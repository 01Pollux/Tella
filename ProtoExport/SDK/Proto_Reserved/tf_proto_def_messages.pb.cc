// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tf_proto_def_messages.proto
#pragma warning(push, 1)

#include "tf_proto_def_messages.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CMsgFieldID_CMsgField::CMsgFieldID_CMsgField(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : field_number_(0u)
  , repeated_index_(0u){}
struct CMsgFieldID_CMsgFieldDefaultTypeInternal {
  constexpr CMsgFieldID_CMsgFieldDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgFieldID_CMsgFieldDefaultTypeInternal() {}
  union {
    CMsgFieldID_CMsgField _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgFieldID_CMsgFieldDefaultTypeInternal _CMsgFieldID_CMsgField_default_instance_;
constexpr CMsgFieldID::CMsgFieldID(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : field_(){}
struct CMsgFieldIDDefaultTypeInternal {
  constexpr CMsgFieldIDDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgFieldIDDefaultTypeInternal() {}
  union {
    CMsgFieldID _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgFieldIDDefaultTypeInternal _CMsgFieldID_default_instance_;
constexpr CMsgUniversalFieldID::CMsgUniversalFieldID(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : defining_obj_id_(nullptr)
  , field_id_(nullptr)
  , source_type_(0)
{}
struct CMsgUniversalFieldIDDefaultTypeInternal {
  constexpr CMsgUniversalFieldIDDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgUniversalFieldIDDefaultTypeInternal() {}
  union {
    CMsgUniversalFieldID _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgUniversalFieldIDDefaultTypeInternal _CMsgUniversalFieldID_default_instance_;
constexpr CMsgVariableDefinition::CMsgVariableDefinition(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , inherit_(true){}
struct CMsgVariableDefinitionDefaultTypeInternal {
  constexpr CMsgVariableDefinitionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgVariableDefinitionDefaultTypeInternal() {}
  union {
    CMsgVariableDefinition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgVariableDefinitionDefaultTypeInternal _CMsgVariableDefinition_default_instance_;
constexpr CMsgProtoDefHeader::CMsgProtoDefHeader(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : prefabs_()
  , tags_()
  , variables_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , defindex_(0u)
  , prefab_only_(false){}
struct CMsgProtoDefHeaderDefaultTypeInternal {
  constexpr CMsgProtoDefHeaderDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgProtoDefHeaderDefaultTypeInternal() {}
  union {
    CMsgProtoDefHeader _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgProtoDefHeaderDefaultTypeInternal _CMsgProtoDefHeader_default_instance_;
constexpr CMsgValidTypes::CMsgValidTypes(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : types_(){}
struct CMsgValidTypesDefaultTypeInternal {
  constexpr CMsgValidTypesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgValidTypesDefaultTypeInternal() {}
  union {
    CMsgValidTypes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgValidTypesDefaultTypeInternal _CMsgValidTypes_default_instance_;
constexpr CMsgProtoDefID::CMsgProtoDefID(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : defindex_(0u)
  , type_(0)

  , _oneof_case_{}{}
struct CMsgProtoDefIDDefaultTypeInternal {
  constexpr CMsgProtoDefIDDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgProtoDefIDDefaultTypeInternal() {}
  union {
    CMsgProtoDefID _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgProtoDefIDDefaultTypeInternal _CMsgProtoDefID_default_instance_;
constexpr CMsgQuestObjectiveDef::CMsgQuestObjectiveDef(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : map_()
  , game_mode_()
  , condition_vars_()
  , classes_vars_()
  , conditions_()
  , item_name_()
  , loc_desctoken_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , header_(nullptr)
  , points_(0u)
  , conditions_defindex_(0u)
  , condition_logic_(0)

  , item_logic_(0)

  , jump_state_(0u)
  , team_(2)
{}
struct CMsgQuestObjectiveDefDefaultTypeInternal {
  constexpr CMsgQuestObjectiveDefDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgQuestObjectiveDefDefaultTypeInternal() {}
  union {
    CMsgQuestObjectiveDef _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgQuestObjectiveDefDefaultTypeInternal _CMsgQuestObjectiveDef_default_instance_;
constexpr CMsgQuestDef_MMCriteria::CMsgQuestDef_MMCriteria(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : group_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , category_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , map_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CMsgQuestDef_MMCriteriaDefaultTypeInternal {
  constexpr CMsgQuestDef_MMCriteriaDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgQuestDef_MMCriteriaDefaultTypeInternal() {}
  union {
    CMsgQuestDef_MMCriteria _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgQuestDef_MMCriteriaDefaultTypeInternal _CMsgQuestDef_MMCriteria_default_instance_;
constexpr CMsgQuestDef_ObjectiveInstance::CMsgQuestDef_ObjectiveInstance(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : objective_(nullptr)
  , point_type_(0)

  , point_value_(0u){}
struct CMsgQuestDef_ObjectiveInstanceDefaultTypeInternal {
  constexpr CMsgQuestDef_ObjectiveInstanceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgQuestDef_ObjectiveInstanceDefaultTypeInternal() {}
  union {
    CMsgQuestDef_ObjectiveInstance _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgQuestDef_ObjectiveInstanceDefaultTypeInternal _CMsgQuestDef_ObjectiveInstance_default_instance_;
constexpr CMsgQuestDef::CMsgQuestDef(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : loaner_names_()
  , objectives_()
  , map_()
  , name_loctoken_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , operation_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , node_image_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , icon_image_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , header_(nullptr)
  , mm_criteria_(nullptr)
  , theme_(nullptr)
  , max_points_0_(0u)
  , max_points_1_(0u)
  , max_points_2_(0u){}
struct CMsgQuestDefDefaultTypeInternal {
  constexpr CMsgQuestDefDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgQuestDefDefaultTypeInternal() {}
  union {
    CMsgQuestDef _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgQuestDefDefaultTypeInternal _CMsgQuestDef_default_instance_;
constexpr CMsgQuestMapStoreItem::CMsgQuestMapStoreItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , reward_lootlist_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , header_(nullptr)
  , price_(nullptr)
  , purchase_limit_(0u)
  , sort_group_(0u){}
struct CMsgQuestMapStoreItemDefaultTypeInternal {
  constexpr CMsgQuestMapStoreItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgQuestMapStoreItemDefaultTypeInternal() {}
  union {
    CMsgQuestMapStoreItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgQuestMapStoreItemDefaultTypeInternal _CMsgQuestMapStoreItem_default_instance_;
constexpr CMsgQuestMapRegionDef_RegionLink::CMsgQuestMapRegionDef_RegionLink(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : target_region_defid_(nullptr)
  , xpos_(0u)
  , ypos_(0u){}
struct CMsgQuestMapRegionDef_RegionLinkDefaultTypeInternal {
  constexpr CMsgQuestMapRegionDef_RegionLinkDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgQuestMapRegionDef_RegionLinkDefaultTypeInternal() {}
  union {
    CMsgQuestMapRegionDef_RegionLink _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgQuestMapRegionDef_RegionLinkDefaultTypeInternal _CMsgQuestMapRegionDef_RegionLink_default_instance_;
constexpr CMsgQuestMapRegionDef::CMsgQuestMapRegionDef(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : links_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , resfile_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , header_(nullptr)
  , return_link_(nullptr)
  , star_type_(nullptr)
  , radio_freq_(0)
  , zoom_scale_(0){}
struct CMsgQuestMapRegionDefDefaultTypeInternal {
  constexpr CMsgQuestMapRegionDefDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgQuestMapRegionDefDefaultTypeInternal() {}
  union {
    CMsgQuestMapRegionDef _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgQuestMapRegionDefDefaultTypeInternal _CMsgQuestMapRegionDef_default_instance_;
constexpr CMsgVarField::CMsgVarField(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : variable_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , _oneof_case_{}{}
struct CMsgVarFieldDefaultTypeInternal {
  constexpr CMsgVarFieldDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgVarFieldDefaultTypeInternal() {}
  union {
    CMsgVarField _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgVarFieldDefaultTypeInternal _CMsgVarField_default_instance_;
constexpr CMsgQuestMapStarType::CMsgQuestMapStarType(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , header_(nullptr){}
struct CMsgQuestMapStarTypeDefaultTypeInternal {
  constexpr CMsgQuestMapStarTypeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgQuestMapStarTypeDefaultTypeInternal() {}
  union {
    CMsgQuestMapStarType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgQuestMapStarTypeDefaultTypeInternal _CMsgQuestMapStarType_default_instance_;
constexpr CMsgQuestMapNodeDef::CMsgQuestMapNodeDef(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : quest_options_()
  , name_loctoken_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , associated_operation_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , reward_item_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , reward_lootlist_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , header_(nullptr)
  , condition_(nullptr)
  , owning_region_(nullptr)
  , star_type_(nullptr)
  , x_pos_(0)
  , y_pos_(0)
  , cash_reward_(1)

  , stars_to_unlock_(1u){}
struct CMsgQuestMapNodeDefDefaultTypeInternal {
  constexpr CMsgQuestMapNodeDefDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgQuestMapNodeDefDefaultTypeInternal() {}
  union {
    CMsgQuestMapNodeDef _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgQuestMapNodeDefDefaultTypeInternal _CMsgQuestMapNodeDef_default_instance_;
constexpr CMsgPaintKit_Variables::CMsgPaintKit_Variables(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_(nullptr){}
struct CMsgPaintKit_VariablesDefaultTypeInternal {
  constexpr CMsgPaintKit_VariablesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgPaintKit_VariablesDefaultTypeInternal() {}
  union {
    CMsgPaintKit_Variables _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgPaintKit_VariablesDefaultTypeInternal _CMsgPaintKit_Variables_default_instance_;
constexpr CMsgPaintKit_Operation_TextureStage::CMsgPaintKit_Operation_TextureStage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : texture_(nullptr)
  , texture_red_(nullptr)
  , texture_blue_(nullptr)
  , adjust_black_(nullptr)
  , adjust_offset_(nullptr)
  , adjust_gamma_(nullptr)
  , rotation_(nullptr)
  , translate_u_(nullptr)
  , translate_v_(nullptr)
  , scale_uv_(nullptr)
  , flip_u_(nullptr)
  , flip_v_(nullptr){}
struct CMsgPaintKit_Operation_TextureStageDefaultTypeInternal {
  constexpr CMsgPaintKit_Operation_TextureStageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgPaintKit_Operation_TextureStageDefaultTypeInternal() {}
  union {
    CMsgPaintKit_Operation_TextureStage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgPaintKit_Operation_TextureStageDefaultTypeInternal _CMsgPaintKit_Operation_TextureStage_default_instance_;
constexpr CMsgPaintKit_Operation_CombineStage::CMsgPaintKit_Operation_CombineStage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : operation_node_()
  , adjust_black_(nullptr)
  , adjust_offset_(nullptr)
  , adjust_gamma_(nullptr)
  , rotation_(nullptr)
  , translate_u_(nullptr)
  , translate_v_(nullptr)
  , scale_uv_(nullptr)
  , flip_u_(nullptr)
  , flip_v_(nullptr){}
struct CMsgPaintKit_Operation_CombineStageDefaultTypeInternal {
  constexpr CMsgPaintKit_Operation_CombineStageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgPaintKit_Operation_CombineStageDefaultTypeInternal() {}
  union {
    CMsgPaintKit_Operation_CombineStage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgPaintKit_Operation_CombineStageDefaultTypeInternal _CMsgPaintKit_Operation_CombineStage_default_instance_;
constexpr CMsgPaintKit_Operation_SelectStage::CMsgPaintKit_Operation_SelectStage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : select_()
  , groups_(nullptr){}
struct CMsgPaintKit_Operation_SelectStageDefaultTypeInternal {
  constexpr CMsgPaintKit_Operation_SelectStageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgPaintKit_Operation_SelectStageDefaultTypeInternal() {}
  union {
    CMsgPaintKit_Operation_SelectStage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgPaintKit_Operation_SelectStageDefaultTypeInternal _CMsgPaintKit_Operation_SelectStage_default_instance_;
constexpr CMsgPaintKit_Operation_Sticker::CMsgPaintKit_Operation_Sticker(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : base_(nullptr)
  , weight_(nullptr)
  , spec_(nullptr){}
struct CMsgPaintKit_Operation_StickerDefaultTypeInternal {
  constexpr CMsgPaintKit_Operation_StickerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgPaintKit_Operation_StickerDefaultTypeInternal() {}
  union {
    CMsgPaintKit_Operation_Sticker _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgPaintKit_Operation_StickerDefaultTypeInternal _CMsgPaintKit_Operation_Sticker_default_instance_;
constexpr CMsgPaintKit_Operation_StickerStage::CMsgPaintKit_Operation_StickerStage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sticker_()
  , operation_node_()
  , dest_tl_(nullptr)
  , dest_tr_(nullptr)
  , dest_bl_(nullptr)
  , adjust_black_(nullptr)
  , adjust_offset_(nullptr)
  , adjust_gamma_(nullptr){}
struct CMsgPaintKit_Operation_StickerStageDefaultTypeInternal {
  constexpr CMsgPaintKit_Operation_StickerStageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgPaintKit_Operation_StickerStageDefaultTypeInternal() {}
  union {
    CMsgPaintKit_Operation_StickerStage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgPaintKit_Operation_StickerStageDefaultTypeInternal _CMsgPaintKit_Operation_StickerStage_default_instance_;
constexpr CMsgPaintKit_OperationStage::CMsgPaintKit_OperationStage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct CMsgPaintKit_OperationStageDefaultTypeInternal {
  constexpr CMsgPaintKit_OperationStageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgPaintKit_OperationStageDefaultTypeInternal() {}
  union {
    CMsgPaintKit_OperationStage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgPaintKit_OperationStageDefaultTypeInternal _CMsgPaintKit_OperationStage_default_instance_;
constexpr CMsgPaintKit_OperationNode::CMsgPaintKit_OperationNode(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct CMsgPaintKit_OperationNodeDefaultTypeInternal {
  constexpr CMsgPaintKit_OperationNodeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgPaintKit_OperationNodeDefaultTypeInternal() {}
  union {
    CMsgPaintKit_OperationNode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgPaintKit_OperationNodeDefaultTypeInternal _CMsgPaintKit_OperationNode_default_instance_;
constexpr CMsgPaintKit_Operation::CMsgPaintKit_Operation(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : operation_node_()
  , header_(nullptr){}
struct CMsgPaintKit_OperationDefaultTypeInternal {
  constexpr CMsgPaintKit_OperationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgPaintKit_OperationDefaultTypeInternal() {}
  union {
    CMsgPaintKit_Operation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgPaintKit_OperationDefaultTypeInternal _CMsgPaintKit_Operation_default_instance_;
constexpr CMsgPaintKit_ItemDefinition_Definition::CMsgPaintKit_ItemDefinition_Definition(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : variable_()
  , operation_template_(nullptr){}
struct CMsgPaintKit_ItemDefinition_DefinitionDefaultTypeInternal {
  constexpr CMsgPaintKit_ItemDefinition_DefinitionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgPaintKit_ItemDefinition_DefinitionDefaultTypeInternal() {}
  union {
    CMsgPaintKit_ItemDefinition_Definition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgPaintKit_ItemDefinition_DefinitionDefaultTypeInternal _CMsgPaintKit_ItemDefinition_Definition_default_instance_;
constexpr CMsgPaintKit_ItemDefinition::CMsgPaintKit_ItemDefinition(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : definition_()
  , header_(nullptr)
  , variable_template_(nullptr)
  , item_definition_index_(0u){}
struct CMsgPaintKit_ItemDefinitionDefaultTypeInternal {
  constexpr CMsgPaintKit_ItemDefinitionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgPaintKit_ItemDefinitionDefaultTypeInternal() {}
  union {
    CMsgPaintKit_ItemDefinition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgPaintKit_ItemDefinitionDefaultTypeInternal _CMsgPaintKit_ItemDefinition_default_instance_;
constexpr CMsgPaintKit_Definition_Item_ItemData::CMsgPaintKit_Definition_Item_ItemData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : variable_()
  , material_override_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , can_apply_paintkit_(true){}
struct CMsgPaintKit_Definition_Item_ItemDataDefaultTypeInternal {
  constexpr CMsgPaintKit_Definition_Item_ItemDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgPaintKit_Definition_Item_ItemDataDefaultTypeInternal() {}
  union {
    CMsgPaintKit_Definition_Item_ItemData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgPaintKit_Definition_Item_ItemDataDefaultTypeInternal _CMsgPaintKit_Definition_Item_ItemData_default_instance_;
constexpr CMsgPaintKit_Definition_Item::CMsgPaintKit_Definition_Item(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_definition_template_(nullptr)
  , data_(nullptr){}
struct CMsgPaintKit_Definition_ItemDefaultTypeInternal {
  constexpr CMsgPaintKit_Definition_ItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgPaintKit_Definition_ItemDefaultTypeInternal() {}
  union {
    CMsgPaintKit_Definition_Item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgPaintKit_Definition_ItemDefaultTypeInternal _CMsgPaintKit_Definition_Item_default_instance_;
constexpr CMsgPaintKit_Definition::CMsgPaintKit_Definition(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_()
  , loc_desctoken_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , header_(nullptr)
  , operation_template_(nullptr)
  , paintkit_tool_(nullptr)
  , flamethrower_(nullptr)
  , grenadelauncher_(nullptr)
  , knife_(nullptr)
  , medigun_(nullptr)
  , minigun_(nullptr)
  , pistol_(nullptr)
  , revolver_(nullptr)
  , rocketlauncher_(nullptr)
  , scattergun_(nullptr)
  , shotgun_(nullptr)
  , smg_(nullptr)
  , sniperrifle_(nullptr)
  , stickybomb_launcher_(nullptr)
  , ubersaw_(nullptr)
  , wrench_(nullptr)
  , amputator_(nullptr)
  , atom_launcher_(nullptr)
  , back_scratcher_(nullptr)
  , battleaxe_(nullptr)
  , bazaar_sniper_(nullptr)
  , blackbox_(nullptr)
  , claidheamohmor_(nullptr)
  , crusaders_crossbow_(nullptr)
  , degreaser_(nullptr)
  , demo_cannon_(nullptr)
  , demo_sultan_sword_(nullptr)
  , detonator_(nullptr)
  , gatling_gun_(nullptr)
  , holymackerel_(nullptr)
  , jag_(nullptr)
  , lochnload_(nullptr)
  , powerjack_(nullptr)
  , quadball_(nullptr)
  , reserve_shooter_(nullptr)
  , riding_crop_(nullptr)
  , russian_riot_(nullptr)
  , scimitar_(nullptr)
  , scorch_shot_(nullptr)
  , shortstop_(nullptr)
  , soda_popper_(nullptr)
  , tele_shotgun_(nullptr)
  , tomislav_(nullptr)
  , trenchgun_(nullptr)
  , winger_pistol_(nullptr)
  , has_team_textures_(false){}
struct CMsgPaintKit_DefinitionDefaultTypeInternal {
  constexpr CMsgPaintKit_DefinitionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgPaintKit_DefinitionDefaultTypeInternal() {}
  union {
    CMsgPaintKit_Definition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgPaintKit_DefinitionDefaultTypeInternal _CMsgPaintKit_Definition_default_instance_;
constexpr CMsgQuestTheme_WeightedString::CMsgQuestTheme_WeightedString(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , weight_(0u){}
struct CMsgQuestTheme_WeightedStringDefaultTypeInternal {
  constexpr CMsgQuestTheme_WeightedStringDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgQuestTheme_WeightedStringDefaultTypeInternal() {}
  union {
    CMsgQuestTheme_WeightedString _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgQuestTheme_WeightedStringDefaultTypeInternal _CMsgQuestTheme_WeightedString_default_instance_;
constexpr CMsgQuestTheme_WeightedStringSet::CMsgQuestTheme_WeightedStringSet(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : weighted_strings_(){}
struct CMsgQuestTheme_WeightedStringSetDefaultTypeInternal {
  constexpr CMsgQuestTheme_WeightedStringSetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgQuestTheme_WeightedStringSetDefaultTypeInternal() {}
  union {
    CMsgQuestTheme_WeightedStringSet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgQuestTheme_WeightedStringSetDefaultTypeInternal _CMsgQuestTheme_WeightedStringSet_default_instance_;
constexpr CMsgQuestTheme::CMsgQuestTheme(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : give_sounds_()
  , complete_sounds_()
  , fully_complete_sounds_()
  , notification_res_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , quest_item_res_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , in_game_tracker_res_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , reward_sound_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , discard_sound_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , reveal_sound_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , header_(nullptr){}
struct CMsgQuestThemeDefaultTypeInternal {
  constexpr CMsgQuestThemeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgQuestThemeDefaultTypeInternal() {}
  union {
    CMsgQuestTheme _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgQuestThemeDefaultTypeInternal _CMsgQuestTheme_default_instance_;
constexpr CMsgQuestMapNodeCondition_NodeState::CMsgQuestMapNodeCondition_NodeState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : target_node_defid_(nullptr)
  , bonus_objectives_required_(0u){}
struct CMsgQuestMapNodeCondition_NodeStateDefaultTypeInternal {
  constexpr CMsgQuestMapNodeCondition_NodeStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgQuestMapNodeCondition_NodeStateDefaultTypeInternal() {}
  union {
    CMsgQuestMapNodeCondition_NodeState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgQuestMapNodeCondition_NodeStateDefaultTypeInternal _CMsgQuestMapNodeCondition_NodeState_default_instance_;
constexpr CMsgQuestMapNodeCondition_Logic::CMsgQuestMapNodeCondition_Logic(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sub_conditions_()
  , operation_(0)
{}
struct CMsgQuestMapNodeCondition_LogicDefaultTypeInternal {
  constexpr CMsgQuestMapNodeCondition_LogicDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgQuestMapNodeCondition_LogicDefaultTypeInternal() {}
  union {
    CMsgQuestMapNodeCondition_Logic _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgQuestMapNodeCondition_LogicDefaultTypeInternal _CMsgQuestMapNodeCondition_Logic_default_instance_;
constexpr CMsgQuestMapNodeCondition::CMsgQuestMapNodeCondition(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct CMsgQuestMapNodeConditionDefaultTypeInternal {
  constexpr CMsgQuestMapNodeConditionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgQuestMapNodeConditionDefaultTypeInternal() {}
  union {
    CMsgQuestMapNodeCondition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgQuestMapNodeConditionDefaultTypeInternal _CMsgQuestMapNodeCondition_default_instance_;
constexpr CMsgHeaderOnly::CMsgHeaderOnly(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_(nullptr){}
struct CMsgHeaderOnlyDefaultTypeInternal {
  constexpr CMsgHeaderOnlyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgHeaderOnlyDefaultTypeInternal() {}
  union {
    CMsgHeaderOnly _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgHeaderOnlyDefaultTypeInternal _CMsgHeaderOnly_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_tf_5fproto_5fdef_5fmessages_2eproto[38];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_tf_5fproto_5fdef_5fmessages_2eproto[9];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_tf_5fproto_5fdef_5fmessages_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_tf_5fproto_5fdef_5fmessages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CMsgFieldID_CMsgField, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgFieldID_CMsgField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgFieldID_CMsgField, field_number_),
  PROTOBUF_FIELD_OFFSET(::CMsgFieldID_CMsgField, repeated_index_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgFieldID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgFieldID, field_),
  PROTOBUF_FIELD_OFFSET(::CMsgUniversalFieldID, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgUniversalFieldID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgUniversalFieldID, source_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgUniversalFieldID, defining_obj_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgUniversalFieldID, field_id_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgVariableDefinition, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgVariableDefinition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgVariableDefinition, name_),
  PROTOBUF_FIELD_OFFSET(::CMsgVariableDefinition, inherit_),
  PROTOBUF_FIELD_OFFSET(::CMsgVariableDefinition, value_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgProtoDefHeader, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgProtoDefHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgProtoDefHeader, defindex_),
  PROTOBUF_FIELD_OFFSET(::CMsgProtoDefHeader, name_),
  PROTOBUF_FIELD_OFFSET(::CMsgProtoDefHeader, prefabs_),
  PROTOBUF_FIELD_OFFSET(::CMsgProtoDefHeader, tags_),
  PROTOBUF_FIELD_OFFSET(::CMsgProtoDefHeader, prefab_only_),
  PROTOBUF_FIELD_OFFSET(::CMsgProtoDefHeader, variables_),
  1,
  0,
  ~0u,
  ~0u,
  2,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgValidTypes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgValidTypes, types_),
  PROTOBUF_FIELD_OFFSET(::CMsgProtoDefID, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgProtoDefID, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::CMsgProtoDefID, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgProtoDefID, defindex_),
  PROTOBUF_FIELD_OFFSET(::CMsgProtoDefID, type_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::CMsgProtoDefID, instance_),
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgQuestObjectiveDef, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuestObjectiveDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgQuestObjectiveDef, header_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuestObjectiveDef, loc_desctoken_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuestObjectiveDef, points_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuestObjectiveDef, conditions_defindex_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuestObjectiveDef, map_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuestObjectiveDef, game_mode_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuestObjectiveDef, team_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuestObjectiveDef, condition_vars_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuestObjectiveDef, classes_vars_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuestObjectiveDef, conditions_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuestObjectiveDef, condition_logic_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuestObjectiveDef, item_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuestObjectiveDef, item_logic_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuestObjectiveDef, jump_state_),
  1,
  0,
  2,
  3,
  ~0u,
  ~0u,
  7,
  ~0u,
  ~0u,
  ~0u,
  4,
  ~0u,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::CMsgQuestDef_MMCriteria, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuestDef_MMCriteria, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgQuestDef_MMCriteria, group_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuestDef_MMCriteria, category_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuestDef_MMCriteria, map_name_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgQuestDef_ObjectiveInstance, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuestDef_ObjectiveInstance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgQuestDef_ObjectiveInstance, objective_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuestDef_ObjectiveInstance, point_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuestDef_ObjectiveInstance, point_value_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgQuestDef, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuestDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgQuestDef, header_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuestDef, max_points_0_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuestDef, max_points_1_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuestDef, max_points_2_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuestDef, name_loctoken_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuestDef, operation_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuestDef, mm_criteria_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuestDef, node_image_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuestDef, icon_image_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuestDef, theme_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuestDef, loaner_names_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuestDef, objectives_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuestDef, map_),
  4,
  7,
  8,
  9,
  0,
  1,
  5,
  2,
  3,
  6,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgQuestMapStoreItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuestMapStoreItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgQuestMapStoreItem, header_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuestMapStoreItem, item_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuestMapStoreItem, reward_lootlist_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuestMapStoreItem, price_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuestMapStoreItem, purchase_limit_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuestMapStoreItem, sort_group_),
  2,
  0,
  1,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CMsgQuestMapRegionDef_RegionLink, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuestMapRegionDef_RegionLink, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgQuestMapRegionDef_RegionLink, target_region_defid_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuestMapRegionDef_RegionLink, xpos_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuestMapRegionDef_RegionLink, ypos_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgQuestMapRegionDef, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuestMapRegionDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgQuestMapRegionDef, header_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuestMapRegionDef, name_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuestMapRegionDef, resfile_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuestMapRegionDef, links_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuestMapRegionDef, return_link_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuestMapRegionDef, radio_freq_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuestMapRegionDef, zoom_scale_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuestMapRegionDef, star_type_),
  2,
  0,
  1,
  ~0u,
  3,
  5,
  6,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgVarField, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgVarField, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::CMsgVarField, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgVarField, variable_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::CMsgVarField, value_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgQuestMapStarType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuestMapStarType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgQuestMapStarType, header_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuestMapStarType, name_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgQuestMapNodeDef, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuestMapNodeDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgQuestMapNodeDef, header_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuestMapNodeDef, name_loctoken_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuestMapNodeDef, x_pos_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuestMapNodeDef, y_pos_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuestMapNodeDef, condition_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuestMapNodeDef, owning_region_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuestMapNodeDef, quest_options_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuestMapNodeDef, associated_operation_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuestMapNodeDef, reward_item_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuestMapNodeDef, reward_lootlist_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuestMapNodeDef, cash_reward_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuestMapNodeDef, star_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuestMapNodeDef, stars_to_unlock_),
  4,
  0,
  8,
  9,
  5,
  6,
  ~0u,
  1,
  2,
  3,
  10,
  7,
  11,
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Variables, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Variables, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Variables, header_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Operation_TextureStage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Operation_TextureStage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Operation_TextureStage, texture_),
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Operation_TextureStage, texture_red_),
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Operation_TextureStage, texture_blue_),
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Operation_TextureStage, adjust_black_),
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Operation_TextureStage, adjust_offset_),
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Operation_TextureStage, adjust_gamma_),
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Operation_TextureStage, rotation_),
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Operation_TextureStage, translate_u_),
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Operation_TextureStage, translate_v_),
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Operation_TextureStage, scale_uv_),
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Operation_TextureStage, flip_u_),
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Operation_TextureStage, flip_v_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Operation_CombineStage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Operation_CombineStage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Operation_CombineStage, adjust_black_),
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Operation_CombineStage, adjust_offset_),
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Operation_CombineStage, adjust_gamma_),
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Operation_CombineStage, rotation_),
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Operation_CombineStage, translate_u_),
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Operation_CombineStage, translate_v_),
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Operation_CombineStage, scale_uv_),
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Operation_CombineStage, flip_u_),
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Operation_CombineStage, flip_v_),
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Operation_CombineStage, operation_node_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Operation_SelectStage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Operation_SelectStage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Operation_SelectStage, groups_),
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Operation_SelectStage, select_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Operation_Sticker, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Operation_Sticker, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Operation_Sticker, base_),
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Operation_Sticker, weight_),
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Operation_Sticker, spec_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Operation_StickerStage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Operation_StickerStage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Operation_StickerStage, sticker_),
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Operation_StickerStage, dest_tl_),
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Operation_StickerStage, dest_tr_),
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Operation_StickerStage, dest_bl_),
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Operation_StickerStage, adjust_black_),
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Operation_StickerStage, adjust_offset_),
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Operation_StickerStage, adjust_gamma_),
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Operation_StickerStage, operation_node_),
  ~0u,
  0,
  1,
  2,
  3,
  4,
  5,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_OperationStage, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_OperationStage, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_OperationStage, stage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_OperationNode, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_OperationNode, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_OperationNode, node_),
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Operation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Operation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Operation, header_),
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Operation, operation_node_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_ItemDefinition_Definition, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_ItemDefinition_Definition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_ItemDefinition_Definition, operation_template_),
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_ItemDefinition_Definition, variable_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_ItemDefinition, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_ItemDefinition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_ItemDefinition, header_),
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_ItemDefinition, item_definition_index_),
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_ItemDefinition, variable_template_),
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_ItemDefinition, definition_),
  0,
  2,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Definition_Item_ItemData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Definition_Item_ItemData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Definition_Item_ItemData, can_apply_paintkit_),
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Definition_Item_ItemData, material_override_),
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Definition_Item_ItemData, variable_),
  1,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Definition_Item, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Definition_Item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Definition_Item, item_definition_template_),
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Definition_Item, data_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Definition, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Definition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Definition, header_),
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Definition, loc_desctoken_),
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Definition, operation_template_),
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Definition, has_team_textures_),
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Definition, item_),
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Definition, paintkit_tool_),
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Definition, flamethrower_),
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Definition, grenadelauncher_),
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Definition, knife_),
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Definition, medigun_),
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Definition, minigun_),
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Definition, pistol_),
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Definition, revolver_),
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Definition, rocketlauncher_),
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Definition, scattergun_),
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Definition, shotgun_),
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Definition, smg_),
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Definition, sniperrifle_),
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Definition, stickybomb_launcher_),
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Definition, ubersaw_),
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Definition, wrench_),
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Definition, amputator_),
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Definition, atom_launcher_),
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Definition, back_scratcher_),
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Definition, battleaxe_),
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Definition, bazaar_sniper_),
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Definition, blackbox_),
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Definition, claidheamohmor_),
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Definition, crusaders_crossbow_),
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Definition, degreaser_),
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Definition, demo_cannon_),
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Definition, demo_sultan_sword_),
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Definition, detonator_),
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Definition, gatling_gun_),
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Definition, holymackerel_),
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Definition, jag_),
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Definition, lochnload_),
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Definition, powerjack_),
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Definition, quadball_),
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Definition, reserve_shooter_),
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Definition, riding_crop_),
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Definition, russian_riot_),
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Definition, scimitar_),
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Definition, scorch_shot_),
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Definition, shortstop_),
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Definition, soda_popper_),
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Definition, tele_shotgun_),
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Definition, tomislav_),
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Definition, trenchgun_),
  PROTOBUF_FIELD_OFFSET(::CMsgPaintKit_Definition, winger_pistol_),
  1,
  0,
  2,
  48,
  ~0u,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
  34,
  35,
  36,
  37,
  38,
  39,
  40,
  41,
  42,
  43,
  44,
  45,
  46,
  47,
  PROTOBUF_FIELD_OFFSET(::CMsgQuestTheme_WeightedString, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuestTheme_WeightedString, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgQuestTheme_WeightedString, string_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuestTheme_WeightedString, weight_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgQuestTheme_WeightedStringSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgQuestTheme_WeightedStringSet, weighted_strings_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuestTheme, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuestTheme, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgQuestTheme, header_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuestTheme, notification_res_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuestTheme, quest_item_res_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuestTheme, in_game_tracker_res_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuestTheme, give_sounds_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuestTheme, complete_sounds_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuestTheme, fully_complete_sounds_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuestTheme, reward_sound_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuestTheme, discard_sound_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuestTheme, reveal_sound_),
  6,
  0,
  1,
  2,
  ~0u,
  ~0u,
  ~0u,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CMsgQuestMapNodeCondition_NodeState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuestMapNodeCondition_NodeState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgQuestMapNodeCondition_NodeState, bonus_objectives_required_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuestMapNodeCondition_NodeState, target_node_defid_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgQuestMapNodeCondition_Logic, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuestMapNodeCondition_Logic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgQuestMapNodeCondition_Logic, operation_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuestMapNodeCondition_Logic, sub_conditions_),
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgQuestMapNodeCondition, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::CMsgQuestMapNodeCondition, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::CMsgQuestMapNodeCondition, operation_),
  PROTOBUF_FIELD_OFFSET(::CMsgHeaderOnly, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgHeaderOnly, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgHeaderOnly, header_),
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::CMsgFieldID_CMsgField)},
  { 9, -1, sizeof(::CMsgFieldID)},
  { 15, 23, sizeof(::CMsgUniversalFieldID)},
  { 26, 34, sizeof(::CMsgVariableDefinition)},
  { 37, 48, sizeof(::CMsgProtoDefHeader)},
  { 54, -1, sizeof(::CMsgValidTypes)},
  { 60, 78, sizeof(::CMsgProtoDefID)},
  { 90, 109, sizeof(::CMsgQuestObjectiveDef)},
  { 123, 131, sizeof(::CMsgQuestDef_MMCriteria)},
  { 134, 142, sizeof(::CMsgQuestDef_ObjectiveInstance)},
  { 145, 163, sizeof(::CMsgQuestDef)},
  { 176, 187, sizeof(::CMsgQuestMapStoreItem)},
  { 193, 201, sizeof(::CMsgQuestMapRegionDef_RegionLink)},
  { 204, 217, sizeof(::CMsgQuestMapRegionDef)},
  { 225, 240, sizeof(::CMsgVarField)},
  { 249, 256, sizeof(::CMsgQuestMapStarType)},
  { 258, 276, sizeof(::CMsgQuestMapNodeDef)},
  { 289, 295, sizeof(::CMsgPaintKit_Variables)},
  { 296, 313, sizeof(::CMsgPaintKit_Operation_TextureStage)},
  { 325, 340, sizeof(::CMsgPaintKit_Operation_CombineStage)},
  { 350, 357, sizeof(::CMsgPaintKit_Operation_SelectStage)},
  { 359, 367, sizeof(::CMsgPaintKit_Operation_Sticker)},
  { 370, 383, sizeof(::CMsgPaintKit_Operation_StickerStage)},
  { 391, -1, sizeof(::CMsgPaintKit_OperationStage)},
  { 403, -1, sizeof(::CMsgPaintKit_OperationNode)},
  { 411, 418, sizeof(::CMsgPaintKit_Operation)},
  { 420, 427, sizeof(::CMsgPaintKit_ItemDefinition_Definition)},
  { 429, 438, sizeof(::CMsgPaintKit_ItemDefinition)},
  { 442, 450, sizeof(::CMsgPaintKit_Definition_Item_ItemData)},
  { 453, 460, sizeof(::CMsgPaintKit_Definition_Item)},
  { 462, 517, sizeof(::CMsgPaintKit_Definition)},
  { 567, 574, sizeof(::CMsgQuestTheme_WeightedString)},
  { 576, -1, sizeof(::CMsgQuestTheme_WeightedStringSet)},
  { 582, 597, sizeof(::CMsgQuestTheme)},
  { 607, 614, sizeof(::CMsgQuestMapNodeCondition_NodeState)},
  { 616, 623, sizeof(::CMsgQuestMapNodeCondition_Logic)},
  { 625, -1, sizeof(::CMsgQuestMapNodeCondition)},
  { 633, 639, sizeof(::CMsgHeaderOnly)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgFieldID_CMsgField_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgFieldID_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgUniversalFieldID_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgVariableDefinition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgProtoDefHeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgValidTypes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgProtoDefID_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgQuestObjectiveDef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgQuestDef_MMCriteria_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgQuestDef_ObjectiveInstance_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgQuestDef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgQuestMapStoreItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgQuestMapRegionDef_RegionLink_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgQuestMapRegionDef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgVarField_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgQuestMapStarType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgQuestMapNodeDef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgPaintKit_Variables_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgPaintKit_Operation_TextureStage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgPaintKit_Operation_CombineStage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgPaintKit_Operation_SelectStage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgPaintKit_Operation_Sticker_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgPaintKit_Operation_StickerStage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgPaintKit_OperationStage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgPaintKit_OperationNode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgPaintKit_Operation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgPaintKit_ItemDefinition_Definition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgPaintKit_ItemDefinition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgPaintKit_Definition_Item_ItemData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgPaintKit_Definition_Item_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgPaintKit_Definition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgQuestTheme_WeightedString_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgQuestTheme_WeightedStringSet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgQuestTheme_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgQuestMapNodeCondition_NodeState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgQuestMapNodeCondition_Logic_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgQuestMapNodeCondition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgHeaderOnly_default_instance_),
};

const char descriptor_table_protodef_tf_5fproto_5fdef_5fmessages_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\033tf_proto_def_messages.proto\032 google/pr"
  "otobuf/descriptor.proto\"o\n\013CMsgFieldID\022%"
  "\n\005field\030\001 \003(\0132\026.CMsgFieldID.CMsgField\0329\n"
  "\tCMsgField\022\024\n\014field_number\030\001 \001(\r\022\026\n\016repe"
  "ated_index\030\002 \001(\r\"\241\001\n\024CMsgUniversalFieldI"
  "D\022\?\n\013source_type\030\001 \001(\0162\027.EValueDefinitio"
  "nSource:\021REFERENCE_DEFINES\022(\n\017defining_o"
  "bj_id\030\002 \001(\0132\017.CMsgProtoDefID\022\036\n\010field_id"
  "\030\003 \001(\0132\014.CMsgFieldID\"R\n\026CMsgVariableDefi"
  "nition\022\022\n\004name\030\001 \001(\tB\004\370\227\"\001\022\025\n\007inherit\030\002 "
  "\001(\010:\004true\022\r\n\005value\030\003 \001(\t\"\354\004\n\022CMsgProtoDe"
  "fHeader\0227\n\010defindex\030\001 \002(\rB%\210\227\"\000\242\227\"\010Defin"
  "dex\252\227\"\rAutogenerated\350\227\"\001\0228\n\004name\030\002 \001(\tB*"
  "\242\227\"\004Name\252\227\"\032Name to show in the editor\350\227"
  "\"\001\022\225\001\n\007prefabs\030\003 \003(\0132\017.CMsgProtoDefIDBs\242"
  "\227\"\006Prefab\252\227\"EInherit the values of these"
  " definitions, in order from top to botto"
  "m.\322\227\"\030CPrefabFieldEditingPanel\350\227\"\001\022s\n\004ta"
  "gs\030\004 \003(\tBe\242\227\"\004Tags\252\227\"YStrings used to de"
  "scribe this definition while searching. "
  " ie. \'class\', \'shotgun\', \'easy\'\022u\n\013prefa"
  "b_only\030\005 \001(\010:\005falseBY\242\227\"\013Pure Prefab\252\227\"B"
  "If true, this is only a prefab and will "
  "not be made into an object\350\227\"\001\022_\n\tvariab"
  "les\030\006 \003(\0132\027.CMsgVariableDefinitionB3\242\227\"\t"
  "Variables\252\227\"\032Variable value definitions\332"
  "\227\"\004name\"/\n\016CMsgValidTypes\022\035\n\005types\030\001 \003(\016"
  "2\016.ProtoDefTypes\"\211\006\n\016CMsgProtoDefID\022\020\n\010d"
  "efindex\030\001 \001(\r\0225\n\004type\030\002 \001(\0162\016.ProtoDefTy"
  "pes:\027DEF_TYPE_QUEST_MAP_NODE\022@\n instance"
  "_def_type_quest_map_node\030\003 \001(\0132\024.CMsgQue"
  "stMapNodeDefH\000\0228\n\035instance_def_type_ques"
  "t_theme\030\005 \001(\0132\017.CMsgQuestThemeH\000\022D\n\"inst"
  "ance_def_type_quest_map_region\030\006 \001(\0132\026.C"
  "MsgQuestMapRegionDefH\000\0220\n\027instance_def_t"
  "ype_quest\030\007 \001(\0132\r.CMsgQuestDefH\000\022C\n!inst"
  "ance_def_type_quest_objective\030\010 \001(\0132\026.CM"
  "sgQuestObjectiveDefH\000\022G\n$instance_def_ty"
  "pe_paintkit_variables\030\t \001(\0132\027.CMsgPaintK"
  "it_VariablesH\000\022G\n$instance_def_type_pain"
  "tkit_operation\030\n \001(\0132\027.CMsgPaintKit_Oper"
  "ationH\000\022R\n*instance_def_type_paintkit_it"
  "em_definition\030\013 \001(\0132\034.CMsgPaintKit_ItemD"
  "efinitionH\000\022I\n%instance_def_type_paintki"
  "t_definition\030\014 \001(\0132\030.CMsgPaintKit_Defini"
  "tionH\000\0228\n\035instance_def_type_header_only\030"
  "\r \001(\0132\017.CMsgHeaderOnlyH\000B\n\n\010instance\"\262,\n"
  "\025CMsgQuestObjectiveDef\022#\n\006header\030\001 \002(\0132\023"
  ".CMsgProtoDefHeader\022\033\n\rloc_desctoken\030\002 \001"
  "(\tB\004\220\227\"\001\022\016\n\006points\030\003 \001(\r\022\033\n\023conditions_d"
  "efindex\030\005 \001(\r\022e\n\003map\030\010 \003(\tBX\242\227\"\rMaps Mod"
  "ifier\252\227\"CIf set, the player must be on o"
  "ne of the listed maps to get credit.\022\234\001\n"
  "\tgame_mode\030\t \003(\0162$.CMsgQuestObjectiveDef"
  ".ETF2GameModesBc\242\227\"\022Game Mode Modifier\252\227"
  "\"IIf set, the player must be in one of t"
  "he listed game modes to get credit.\022\220\001\n\004"
  "team\030\n \001(\0162\037.CMsgQuestObjectiveDef.ETF2T"
  "eam:\013TF_TEAM_REDBT\242\227\"\rTeam Modifier\252\227\"\?I"
  "f set, the player must be on the specifi"
  "ed team to get credit.\022=\n\016condition_vars"
  "\030\013 \003(\0132\r.CMsgVarFieldB\026\242\227\"\016Objective Var"
  "s\360\227\"\t\022;\n\014classes_vars\030\014 \003(\0132\r.CMsgVarFie"
  "ldB\026\242\227\"\016Class Modifier\360\227\"\t\022M\n\nconditions"
  "\030\r \003(\0162%.CMsgQuestObjectiveDef.ETF2Condi"
  "tionsB\022\242\227\"\016Required Conds\022\212\001\n\017condition_"
  "logic\030\016 \001(\0162\021.LogicalOperation:\003ANDBY\242\227\""
  "\017Condition Logic\252\227\"BWhat kind of logic t"
  "o use when evaluating the player\'s condi"
  "tions.\022`\n\titem_name\030\017 \003(\tBM\242\227\"\026Required "
  "equipped item\252\227\"/Require that this item "
  "be equipped in any slot.\022{\n\nitem_logic\030\020"
  " \001(\0162\021.LogicalOperation:\003ANDBO\242\227\"\nItem l"
  "ogic\252\227\"=What kind of logic to use when e"
  "valuating the player\'s items.\022V\n\njump_st"
  "ate\030\021 \001(\rBB\242\227\"\nJump logic\252\227\"0What state "
  "of jumping the player needs to be in.\"\275\004"
  "\n\rETF2GameModes\022\030\n\024kGameCategory_Escort\020"
  "\000\022\025\n\021kGameCategory_CTF\020\001\022\037\n\033kGameCategor"
  "y_AttackDefense\020\002\022\026\n\022kGameCategory_Koth\020"
  "\003\022\024\n\020kGameCategory_CP\020\004\022\034\n\030kGameCategory"
  "_EscortRace\020\005\022\032\n\026kGameCategory_EventMix\020"
  "\006\022\024\n\020kGameCategory_SD\020\007\022\033\n\027kGameCategory"
  "_Quickplay\020\010\022\032\n\026kGameCategory_Event247\020\t"
  "\022\027\n\023kGameCategory_Arena\020\n\022\"\n\036kGameCatego"
  "ry_RobotDestruction\020\013\022\031\n\025kGameCategory_P"
  "owerup\020\014\022\032\n\026kGameCategory_Featured\020\r\022\032\n\026"
  "kGameCategory_Passtime\020\016\022\"\n\036kGameCategor"
  "y_Community_Update\020\017\022\026\n\022kGameCategory_Mi"
  "sc\020\020\022!\n\035kGameCategory_Competitive_6v6\020\021\022"
  "\027\n\023kGameCategory_Other\020\022\022\033\n\027kGameCategor"
  "y_Halloween\020\023\"\222\036\n\016ETF2Conditions\022\022\n\016TF_C"
  "OND_AIMING\020\000\022\022\n\016TF_COND_ZOOMED\020\001\022\026\n\022TF_C"
  "OND_DISGUISING\020\002\022\025\n\021TF_COND_DISGUISED\020\003\022"
  "\025\n\021TF_COND_STEALTHED\020\004\022\030\n\024TF_COND_INVULN"
  "ERABLE\020\005\022\026\n\022TF_COND_TELEPORTED\020\006\022\024\n\020TF_C"
  "OND_TAUNTING\020\007\022#\n\037TF_COND_INVULNERABLE_W"
  "EARINGOFF\020\010\022\033\n\027TF_COND_STEALTHED_BLINK\020\t"
  "\022 \n\034TF_COND_SELECTED_TO_TELEPORT\020\n\022\027\n\023TF"
  "_COND_CRITBOOSTED\020\013\022\032\n\026TF_COND_TMPDAMAGE"
  "BONUS\020\014\022\027\n\023TF_COND_FEIGN_DEATH\020\r\022\021\n\rTF_C"
  "OND_PHASE\020\016\022\023\n\017TF_COND_STUNNED\020\017\022\027\n\023TF_C"
  "OND_OFFENSEBUFF\020\020\022\031\n\025TF_COND_SHIELD_CHAR"
  "GE\020\021\022\025\n\021TF_COND_DEMO_BUFF\020\022\022\027\n\023TF_COND_E"
  "NERGY_BUFF\020\023\022\026\n\022TF_COND_RADIUSHEAL\020\024\022\027\n\023"
  "TF_COND_HEALTH_BUFF\020\025\022\023\n\017TF_COND_BURNING"
  "\020\026\022\035\n\031TF_COND_HEALTH_OVERHEALED\020\027\022\021\n\rTF_"
  "COND_URINE\020\030\022\024\n\020TF_COND_BLEEDING\020\031\022\027\n\023TF"
  "_COND_DEFENSEBUFF\020\032\022\024\n\020TF_COND_MAD_MILK\020"
  "\033\022\024\n\020TF_COND_MEGAHEAL\020\034\022\035\n\031TF_COND_REGEN"
  "ONDAMAGEBUFF\020\035\022\032\n\026TF_COND_MARKEDFORDEATH"
  "\020\036\022\037\n\033TF_COND_NOHEALINGDAMAGEBUFF\020\037\022\027\n\023T"
  "F_COND_SPEED_BOOST\020 \022\037\n\033TF_COND_CRITBOOS"
  "TED_PUMPKIN\020!\022!\n\035TF_COND_CRITBOOSTED_USE"
  "R_BUFF\020\"\022#\n\037TF_COND_CRITBOOSTED_DEMO_CHA"
  "RGE\020#\022\033\n\027TF_COND_SODAPOPPER_HYPE\020$\022#\n\037TF"
  "_COND_CRITBOOSTED_FIRST_BLOOD\020%\022\"\n\036TF_CO"
  "ND_CRITBOOSTED_BONUS_TIME\020&\022#\n\037TF_COND_C"
  "RITBOOSTED_CTF_CAPTURE\020\'\022\037\n\033TF_COND_CRIT"
  "BOOSTED_ON_KILL\020(\022$\n TF_COND_CANNOT_SWIT"
  "CH_FROM_MELEE\020)\022%\n!TF_COND_DEFENSEBUFF_N"
  "O_CRIT_BLOCK\020*\022\030\n\024TF_COND_REPROGRAMMED\020+"
  "\022!\n\035TF_COND_CRITBOOSTED_RAGE_BUFF\020,\022\034\n\030T"
  "F_COND_DEFENSEBUFF_HIGH\020-\022\"\n\036TF_COND_SNI"
  "PERCHARGE_RAGE_BUFF\020.\022\037\n\033TF_COND_DISGUIS"
  "E_WEARINGOFF\020/\022!\n\035TF_COND_MARKEDFORDEATH"
  "_SILENT\0200\022\"\n\036TF_COND_DISGUISED_AS_DISPEN"
  "SER\0201\022\022\n\016TF_COND_SAPPED\0202\022,\n(TF_COND_INV"
  "ULNERABLE_HIDE_UNLESS_DAMAGED\0203\022\"\n\036TF_CO"
  "ND_INVULNERABLE_USER_BUFF\0204\022\037\n\033TF_COND_H"
  "ALLOWEEN_BOMB_HEAD\0205\022\036\n\032TF_COND_HALLOWEE"
  "N_THRILLER\0206\022 \n\034TF_COND_RADIUSHEAL_ON_DA"
  "MAGE\0207\022#\n\037TF_COND_CRITBOOSTED_CARD_EFFEC"
  "T\0208\022$\n TF_COND_INVULNERABLE_CARD_EFFECT\020"
  "9\022&\n\"TF_COND_MEDIGUN_UBER_BULLET_RESIST\020"
  ":\022%\n!TF_COND_MEDIGUN_UBER_BLAST_RESIST\020;"
  "\022$\n TF_COND_MEDIGUN_UBER_FIRE_RESIST\020<\022\'"
  "\n#TF_COND_MEDIGUN_SMALL_BULLET_RESIST\020=\022"
  "&\n\"TF_COND_MEDIGUN_SMALL_BLAST_RESIST\020>\022"
  "%\n!TF_COND_MEDIGUN_SMALL_FIRE_RESIST\020\?\022\037"
  "\n\033TF_COND_STEALTHED_USER_BUFF\020@\022\032\n\026TF_CO"
  "ND_MEDIGUN_DEBUFF\020A\022&\n\"TF_COND_STEALTHED"
  "_USER_BUFF_FADING\020B\022\031\n\025TF_COND_BULLET_IM"
  "MUNE\020C\022\030\n\024TF_COND_BLAST_IMMUNE\020D\022\027\n\023TF_C"
  "OND_FIRE_IMMUNE\020E\022\031\n\025TF_COND_PREVENT_DEA"
  "TH\020F\022\"\n\036TF_COND_MVM_BOT_STUN_RADIOWAVE\020G"
  "\022!\n\035TF_COND_HALLOWEEN_SPEED_BOOST\020H\022 \n\034T"
  "F_COND_HALLOWEEN_QUICK_HEAL\020I\022\033\n\027TF_COND"
  "_HALLOWEEN_GIANT\020J\022\032\n\026TF_COND_HALLOWEEN_"
  "TINY\020K\022\035\n\031TF_COND_HALLOWEEN_IN_HELL\020L\022 \n"
  "\034TF_COND_HALLOWEEN_GHOST_MODE\020M\022#\n\037TF_CO"
  "ND_MINICRITBOOSTED_ON_KILL\020N\022\032\n\026TF_COND_"
  "OBSCURED_SMOKE\020O\022\034\n\030TF_COND_PARACHUTE_AC"
  "TIVE\020P\022\030\n\024TF_COND_BLASTJUMPING\020Q\022\032\n\026TF_C"
  "OND_HALLOWEEN_KART\020R\022\037\n\033TF_COND_HALLOWEE"
  "N_KART_DASH\020S\022\030\n\024TF_COND_BALLOON_HEAD\020T\022"
  "\026\n\022TF_COND_MELEE_ONLY\020U\022\032\n\026TF_COND_SWIMM"
  "ING_CURSE\020V\022\030\n\024TF_COND_FREEZE_INPUT\020W\022\037\n"
  "\033TF_COND_HALLOWEEN_KART_CAGE\020X\022\026\n\022TF_CON"
  "D_DONOTUSE_0\020Y\022\031\n\025TF_COND_RUNE_STRENGTH\020"
  "Z\022\026\n\022TF_COND_RUNE_HASTE\020[\022\026\n\022TF_COND_RUN"
  "E_REGEN\020\\\022\027\n\023TF_COND_RUNE_RESIST\020]\022\030\n\024TF"
  "_COND_RUNE_VAMPIRE\020^\022\030\n\024TF_COND_RUNE_REF"
  "LECT\020_\022\032\n\026TF_COND_RUNE_PRECISION\020`\022\030\n\024TF"
  "_COND_RUNE_AGILITY\020a\022\031\n\025TF_COND_GRAPPLIN"
  "GHOOK\020b\022\"\n\036TF_COND_GRAPPLINGHOOK_SAFEFAL"
  "L\020c\022!\n\035TF_COND_GRAPPLINGHOOK_LATCHED\020d\022\""
  "\n\036TF_COND_GRAPPLINGHOOK_BLEEDING\020e\022\034\n\030TF"
  "_COND_AFTERBURN_IMMUNE\020f\022\031\n\025TF_COND_RUNE"
  "_KNOCKOUT\020g\022\032\n\026TF_COND_RUNE_IMBALANCE\020h\022"
  "!\n\035TF_COND_CRITBOOSTED_RUNE_TEMP\020i\022!\n\035TF"
  "_COND_PASSTIME_INTERCEPTION\020j\022\037\n\033TF_COND"
  "_SWIMMING_NO_EFFECTS\020k\022\025\n\021TF_COND_PURGAT"
  "ORY\020l\022\025\n\021TF_COND_RUNE_KING\020m\022\027\n\023TF_COND_"
  "RUNE_PLAGUE\020n\022\032\n\026TF_COND_RUNE_SUPERNOVA\020"
  "o\022\022\n\016TF_COND_PLAGUE\020p\022\027\n\023TF_COND_KING_BU"
  "FFED\020q\022\026\n\022TF_COND_TEAM_GLOWS\020r\022\034\n\030TF_CON"
  "D_KNOCKED_INTO_AIR\020s\022\036\n\032TF_COND_COMPETIT"
  "IVE_WINNER\020t\022\035\n\031TF_COND_COMPETITIVE_LOSE"
  "R\020u\022\032\n\026TF_COND_HEALING_DEBUFF\020v\022#\n\037TF_CO"
  "ND_PASSTIME_PENALTY_DEBUFF\020w\022\036\n\032TF_COND_"
  "PARACHUTE_DEPLOYED\020x\022!\n\035TF_COND_NO_COMBA"
  "T_SPEED_BOOST\020y\022\033\n\027TF_COND_TRANQ_SPY_BOO"
  "ST\020z\022\030\n\024TF_COND_TRANQ_MARKED\020{\022\026\n\022TF_CON"
  "D_ROCKETPACK\020~\022 \n\034TF_COND_ROCKETPACK_PAS"
  "SENGER\020\177\022\034\n\027TF_COND_STEALTHED_PHASE\020\200\001\022\032"
  "\n\025TF_COND_CLIP_OVERLOAD\020\201\001\022\034\n\027TF_COND_SP"
  "Y_CLASS_STEAL\020\202\001\022\020\n\013TF_COND_GAS\020\203\001\"-\n\010ET"
  "F2Team\022\017\n\013TF_TEAM_RED\020\002\022\020\n\014TF_TEAM_BLUE\020"
  "\003\"\314\007\n\014CMsgQuestDef\022#\n\006header\030\001 \002(\0132\023.CMs"
  "gProtoDefHeader\022\024\n\014max_points_0\030\002 \001(\r\022\024\n"
  "\014max_points_1\030\003 \001(\r\022\024\n\014max_points_2\030\004 \001("
  "\r\022\033\n\rname_loctoken\030\005 \001(\tB\004\220\227\"\001\022\021\n\toperat"
  "ion\030\007 \001(\t\022-\n\013mm_criteria\030\010 \001(\0132\030.CMsgQue"
  "stDef.MMCriteria\022T\n\nnode_image\030\014 \001(\tB@\242\227"
  "\"\nNode Image\252\227\".Filename of the image to"
  " show on the node view\022B\n\nicon_image\030\r \001"
  "(\tB.\242\227\"\tNode Icon\252\227\"\035Which icon to show "
  "on the map\022$\n\005theme\030\016 \001(\0132\017.CMsgProtoDef"
  "IDB\004\200\227\"\002\022F\n\014loaner_names\030\017 \003(\tB0\242\227\"\007Loan"
  "ers\252\227\"!Names of items to give as loaners"
  "\0223\n\nobjectives\030\020 \003(\0132\037.CMsgQuestDef.Obje"
  "ctiveInstance\022e\n\003map\030\021 \003(\tBX\242\227\"\rMaps Mod"
  "ifier\252\227\"CIf set, the player must be on o"
  "ne of the listed maps to get credit.\032I\n\n"
  "MMCriteria\022\022\n\ngroup_name\030\001 \001(\t\022\025\n\rcatego"
  "ry_name\030\002 \001(\t\022\020\n\010map_name\030\003 \001(\t\032\206\002\n\021Obje"
  "ctiveInstance\022(\n\tobjective\030\001 \001(\0132\017.CMsgP"
  "rotoDefIDB\004\200\227\"\005\0226\n\npoint_type\030\002 \001(\0162\r.EQ"
  "uestPoints:\023QUEST_POINTS_NOVICE\022\216\001\n\013poin"
  "t_value\030\003 \001(\rBy\242\227\"\017Points Override\252\227\"bOv"
  "erride value for the point value of the "
  "objective.  If not set, uses the objecti"
  "ve\'s point value\"\200\003\n\025CMsgQuestMapStoreIt"
  "em\022#\n\006header\030\001 \002(\0132\023.CMsgProtoDefHeader\022"
  "\021\n\titem_name\030\002 \001(\t\022a\n\024reward_lootlist_na"
  "me\030\006 \001(\tBC\242\227\"\017Reward Lootlist\252\227\",The nam"
  "e of the lootlist to roll as a reward\022\"\n"
  "\005price\030\003 \001(\0132\r.CMsgVarFieldB\004\360\227\"\006\022Y\n\016pur"
  "chase_limit\030\004 \001(\rBA\242\227\"\016Purchase Limit\252\227\""
  "+How many times this reward can be purch"
  "ased\022M\n\nsort_group\030\005 \001(\rB9\242\227\"\nSort group"
  "\252\227\"\'Sort by this group, then alhpabetica"
  "lly\"\324\005\n\025CMsgQuestMapRegionDef\022#\n\006header\030"
  "\001 \002(\0132\023.CMsgProtoDefHeader\022\022\n\004name\030\002 \001(\t"
  "B\004\220\227\"\001\022\017\n\007resfile\030\003 \001(\t\0220\n\005links\030\004 \003(\0132!"
  ".CMsgQuestMapRegionDef.RegionLink\022s\n\013ret"
  "urn_link\030\005 \001(\0132\017.CMsgProtoDefIDBM\200\227\"\003\242\227\""
  "\013Return Link\252\227\"6Which link we go to when"
  " right-clicking in this region\022o\n\nradio_"
  "freq\030\006 \001(\002B[\242\227\"\013Radio Freq.\252\227\"HWhere the"
  " radio tuner goes on the CYOA PDA when t"
  "his region is selection\022\215\001\n\nzoom_scale\030\007"
  " \001(\002By\242\227\"\nZoom Scale\252\227\"gHow zoomed in th"
  "is panel should be.  Affects the scale o"
  "f the map grid lines and node link dashe"
  "d lines\022k\n\tstar_type\030\010 \001(\0132\017.CMsgProtoDe"
  "fIDBG\200\227\"\014\242\227\"\tStar Type\252\227\"2What stars (if"
  " any) the nodes within use to unlock\032\\\n\n"
  "RegionLink\0222\n\023target_region_defid\030\001 \002(\0132"
  "\017.CMsgProtoDefIDB\004\200\227\"\003\022\014\n\004xpos\030\002 \001(\r\022\014\n\004"
  "ypos\030\003 \001(\r\"\274\001\n\014CMsgVarField\022\026\n\010variable\030"
  "\001 \001(\tB\004\370\227\"\001\022\017\n\005float\030\002 \001(\002H\000\022\020\n\006double\030\003"
  " \001(\001H\000\022\020\n\006uint32\030\004 \001(\rH\000\022\020\n\006uint64\030\005 \001(\004"
  "H\000\022\020\n\006sint32\030\006 \001(\021H\000\022\020\n\006sint64\030\007 \001(\022H\000\022\016"
  "\n\004bool\030\010 \001(\010H\000\022\020\n\006string\030\t \001(\tH\000B\007\n\005valu"
  "e\"\\\n\024CMsgQuestMapStarType\022#\n\006header\030\001 \002("
  "\0132\023.CMsgProtoDefHeader\022\037\n\004name\030\002 \001(\tB\021\220\227"
  "\"\001\242\227\"\tType Name\"\225\t\n\023CMsgQuestMapNodeDef\022"
  "#\n\006header\030\001 \002(\0132\023.CMsgProtoDefHeader\022A\n\r"
  "name_loctoken\030\004 \001(\tB*\220\227\"\001\242\227\"\tNode Name\252\227"
  "\"\025The name of this node\022;\n\005x_pos\030\006 \001(\002B,"
  "\242\227\"\tMap X Pos\252\227\"\033X position on the quest"
  " map\022;\n\005y_pos\030\007 \001(\002B,\242\227\"\tMap Y Pos\252\227\"\033Y "
  "position on the quest map\022t\n\tcondition\030\t"
  " \001(\0132\032.CMsgQuestMapNodeConditionBE\242\227\"\nCo"
  "nditions\252\227\"3Logic to unlock this node. C"
  "an be nested with logic\022g\n\rowning_region"
  "\030\n \001(\0132\017.CMsgProtoDefIDB\?\200\227\"\003\242\227\"\006Region\252"
  "\227\"-Which region in the map this node sho"
  "ws up in\022d\n\rquest_options\030\013 \003(\0132\017.CMsgPr"
  "otoDefIDB<\200\227\"\004\242\227\"\016Offered Quests\252\227\"\036Whic"
  "h quests this node offers.\270\227\"\003\022`\n\024associ"
  "ated_operation\030\020 \001(\tBB\242\227\"\024Associated Ope"
  "ration\252\227\"&Operation this node is associa"
  "ted with\022T\n\020reward_item_name\030\022 \001(\tB:\242\227\"\013"
  "Reward Item\252\227\"\'The name of an item to gi"
  "ve as a reward\022a\n\024reward_lootlist_name\030\026"
  " \001(\tBC\242\227\"\017Reward Lootlist\252\227\",The name of"
  " the lootlist to roll as a reward\022\207\001\n\013ca"
  "sh_reward\030\023 \001(\0162\020.ENodeCashReward:\020CASH_"
  "REWARD_NONEBN\242\227\"\013Cash Reward\252\227\";How much"
  " cash to give when completing the primar"
  "y objective\022Z\n\tstar_type\030\024 \001(\0132\017.CMsgPro"
  "toDefIDB6\200\227\"\014\242\227\"\tStar Type\252\227\"!Which type"
  " of star this node uses\022V\n\017stars_to_unlo"
  "ck\030\025 \001(\r:\0011B:\242\227\"\017Stars to Unlock\252\227\"#Numb"
  "ers of stars it costs to unlock\"=\n\026CMsgP"
  "aintKit_Variables\022#\n\006header\030\001 \002(\0132\023.CMsg"
  "ProtoDefHeader\"\216\004\n#CMsgPaintKit_Operatio"
  "n_TextureStage\022$\n\007texture\030\001 \001(\0132\r.CMsgVa"
  "rFieldB\004\360\227\"\t\022(\n\013texture_red\030\002 \001(\0132\r.CMsg"
  "VarFieldB\004\360\227\"\t\022)\n\014texture_blue\030\003 \001(\0132\r.C"
  "MsgVarFieldB\004\360\227\"\t\022)\n\014adjust_black\030\004 \001(\0132"
  "\r.CMsgVarFieldB\004\360\227\"\t\022*\n\radjust_offset\030\005 "
  "\001(\0132\r.CMsgVarFieldB\004\360\227\"\t\022)\n\014adjust_gamma"
  "\030\006 \001(\0132\r.CMsgVarFieldB\004\360\227\"\t\022%\n\010rotation\030"
  "\007 \001(\0132\r.CMsgVarFieldB\004\360\227\"\t\022(\n\013translate_"
  "u\030\010 \001(\0132\r.CMsgVarFieldB\004\360\227\"\t\022(\n\013translat"
  "e_v\030\t \001(\0132\r.CMsgVarFieldB\004\360\227\"\t\022%\n\010scale_"
  "uv\030\n \001(\0132\r.CMsgVarFieldB\004\360\227\"\t\022#\n\006flip_u\030"
  "\013 \001(\0132\r.CMsgVarFieldB\004\360\227\"\t\022#\n\006flip_v\030\014 \001"
  "(\0132\r.CMsgVarFieldB\004\360\227\"\t\"\310\003\n#CMsgPaintKit"
  "_Operation_CombineStage\022)\n\014adjust_black\030"
  "\001 \001(\0132\r.CMsgVarFieldB\004\360\227\"\t\022*\n\radjust_off"
  "set\030\002 \001(\0132\r.CMsgVarFieldB\004\360\227\"\t\022)\n\014adjust"
  "_gamma\030\003 \001(\0132\r.CMsgVarFieldB\004\360\227\"\t\022%\n\010rot"
  "ation\030\004 \001(\0132\r.CMsgVarFieldB\004\360\227\"\t\022(\n\013tran"
  "slate_u\030\005 \001(\0132\r.CMsgVarFieldB\004\360\227\"\t\022(\n\013tr"
  "anslate_v\030\006 \001(\0132\r.CMsgVarFieldB\004\360\227\"\t\022%\n\010"
  "scale_uv\030\007 \001(\0132\r.CMsgVarFieldB\004\360\227\"\t\022#\n\006f"
  "lip_u\030\010 \001(\0132\r.CMsgVarFieldB\004\360\227\"\t\022#\n\006flip"
  "_v\030\t \001(\0132\r.CMsgVarFieldB\004\360\227\"\t\0223\n\016operati"
  "on_node\030\013 \003(\0132\033.CMsgPaintKit_OperationNo"
  "de\"r\n\"CMsgPaintKit_Operation_SelectStage"
  "\022#\n\006groups\030\001 \001(\0132\r.CMsgVarFieldB\004\360\227\"\t\022\'\n"
  "\006select\030\002 \003(\0132\r.CMsgVarFieldB\010\270\227\"\020\360\227\"\t\"\346"
  "\002\n\036CMsgPaintKit_Operation_Sticker\022W\n\004bas"
  "e\030\001 \001(\0132\r.CMsgVarFieldB:\252\227\"2Name of the "
  "base file for the sticker (the albedo)\360\227"
  "\"\t\022S\n\006weight\030\002 \001(\0132\r.CMsgVarFieldB4\252\227\",R"
  "andom likelihood this one is to be selec"
  "ted\360\227\"\t\022\225\001\n\004spec\030\003 \001(\0132\r.CMsgVarFieldBx\252"
  "\227\"pName of the specular file for the sti"
  "cker, or if blank we will assume it is b"
  "aseFilename + _spec + baseExtension\360\227\"\t\""
  "\200\003\n#CMsgPaintKit_Operation_StickerStage\022"
  "0\n\007sticker\030\001 \003(\0132\037.CMsgPaintKit_Operatio"
  "n_Sticker\022$\n\007dest_tl\030\002 \001(\0132\r.CMsgVarFiel"
  "dB\004\360\227\"\t\022$\n\007dest_tr\030\003 \001(\0132\r.CMsgVarFieldB"
  "\004\360\227\"\t\022$\n\007dest_bl\030\004 \001(\0132\r.CMsgVarFieldB\004\360"
  "\227\"\t\022)\n\014adjust_black\030\005 \001(\0132\r.CMsgVarField"
  "B\004\360\227\"\t\022*\n\radjust_offset\030\006 \001(\0132\r.CMsgVarF"
  "ieldB\004\360\227\"\t\022)\n\014adjust_gamma\030\007 \001(\0132\r.CMsgV"
  "arFieldB\004\360\227\"\t\0223\n\016operation_node\030\t \003(\0132\033."
  "CMsgPaintKit_OperationNode\"\231\003\n\033CMsgPaint"
  "Kit_OperationStage\022>\n\016texture_lookup\030\001 \001"
  "(\0132$.CMsgPaintKit_Operation_TextureStage"
  "H\000\022;\n\013combine_add\030\002 \001(\0132$.CMsgPaintKit_O"
  "peration_CombineStageH\000\022<\n\014combine_lerp\030"
  "\003 \001(\0132$.CMsgPaintKit_Operation_CombineSt"
  "ageH\000\022@\n\020combine_multiply\030\004 \001(\0132$.CMsgPa"
  "intKit_Operation_CombineStageH\000\0225\n\006selec"
  "t\030\005 \001(\0132#.CMsgPaintKit_Operation_SelectS"
  "tageH\000\022=\n\rapply_sticker\030\006 \001(\0132$.CMsgPain"
  "tKit_Operation_StickerStageH\000B\007\n\005stage\"\214"
  "\001\n\032CMsgPaintKit_OperationNode\022-\n\005stage\030\001"
  " \001(\0132\034.CMsgPaintKit_OperationStageH\000\0227\n\022"
  "operation_template\030\002 \001(\0132\017.CMsgProtoDefI"
  "DB\010\200\227\"\007\340\227\"\001H\000B\006\n\004node\"r\n\026CMsgPaintKit_Op"
  "eration\022#\n\006header\030\001 \002(\0132\023.CMsgProtoDefHe"
  "ader\0223\n\016operation_node\030\002 \003(\0132\033.CMsgPaint"
  "Kit_OperationNode\"\312\002\n\033CMsgPaintKit_ItemD"
  "efinition\022#\n\006header\030\001 \002(\0132\023.CMsgProtoDef"
  "Header\022\035\n\025item_definition_index\030\002 \002(\r\0224\n"
  "\021variable_template\030\003 \001(\0132\017.CMsgProtoDefI"
  "DB\010\200\227\"\006\340\227\"\001\022A\n\ndefinition\030\004 \003(\0132\'.CMsgPa"
  "intKit_ItemDefinition.DefinitionB\004\270\227\"\005\032n"
  "\n\nDefinition\0221\n\022operation_template\030\001 \001(\013"
  "2\017.CMsgProtoDefIDB\004\200\227\"\007\022-\n\010variable\030\002 \003("
  "\0132\r.CMsgVarFieldB\014\300\227\"\000\310\227\"\000\360\227\"\t\"\374\026\n\027CMsgP"
  "aintKit_Definition\022#\n\006header\030\001 \002(\0132\023.CMs"
  "gProtoDefHeader\022\033\n\rloc_desctoken\030\002 \001(\tB\004"
  "\220\227\"\001\022\263\001\n\022operation_template\030\003 \001(\0132\017.CMsg"
  "ProtoDefIDB\205\001\200\227\"\007\252\227\"yoperation template "
  "which all items in the list will use unl"
  "ess there\'s operation_template specified"
  " in an item_definition\340\227\"\001\022\031\n\021has_team_t"
  "extures\030\004 \001(\010\022+\n\004item\030\005 \003(\0132\035.CMsgPaintK"
  "it_Definition.Item\0224\n\rpaintkit_tool\030\006 \001("
  "\0132\035.CMsgPaintKit_Definition.Item\0223\n\014flam"
  "ethrower\030\007 \001(\0132\035.CMsgPaintKit_Definition"
  ".Item\0226\n\017grenadelauncher\030\010 \001(\0132\035.CMsgPai"
  "ntKit_Definition.Item\022,\n\005knife\030\t \001(\0132\035.C"
  "MsgPaintKit_Definition.Item\022.\n\007medigun\030\n"
  " \001(\0132\035.CMsgPaintKit_Definition.Item\022.\n\007m"
  "inigun\030\013 \001(\0132\035.CMsgPaintKit_Definition.I"
  "tem\022-\n\006pistol\030\014 \001(\0132\035.CMsgPaintKit_Defin"
  "ition.Item\022/\n\010revolver\030\r \001(\0132\035.CMsgPaint"
  "Kit_Definition.Item\0225\n\016rocketlauncher\030\016 "
  "\001(\0132\035.CMsgPaintKit_Definition.Item\0221\n\nsc"
  "attergun\030\017 \001(\0132\035.CMsgPaintKit_Definition"
  ".Item\022.\n\007shotgun\030\020 \001(\0132\035.CMsgPaintKit_De"
  "finition.Item\022*\n\003smg\030\021 \001(\0132\035.CMsgPaintKi"
  "t_Definition.Item\0222\n\013sniperrifle\030\022 \001(\0132\035"
  ".CMsgPaintKit_Definition.Item\022:\n\023stickyb"
  "omb_launcher\030\023 \001(\0132\035.CMsgPaintKit_Defini"
  "tion.Item\022.\n\007ubersaw\030\024 \001(\0132\035.CMsgPaintKi"
  "t_Definition.Item\022-\n\006wrench\030\025 \001(\0132\035.CMsg"
  "PaintKit_Definition.Item\0220\n\tamputator\030\026 "
  "\001(\0132\035.CMsgPaintKit_Definition.Item\0224\n\rat"
  "om_launcher\030\027 \001(\0132\035.CMsgPaintKit_Definit"
  "ion.Item\0225\n\016back_scratcher\030\030 \001(\0132\035.CMsgP"
  "aintKit_Definition.Item\0220\n\tbattleaxe\030\031 \001"
  "(\0132\035.CMsgPaintKit_Definition.Item\0224\n\rbaz"
  "aar_sniper\030\032 \001(\0132\035.CMsgPaintKit_Definiti"
  "on.Item\022/\n\010blackbox\030\033 \001(\0132\035.CMsgPaintKit"
  "_Definition.Item\0225\n\016claidheamohmor\030\034 \001(\013"
  "2\035.CMsgPaintKit_Definition.Item\0229\n\022crusa"
  "ders_crossbow\030\035 \001(\0132\035.CMsgPaintKit_Defin"
  "ition.Item\0220\n\tdegreaser\030\036 \001(\0132\035.CMsgPain"
  "tKit_Definition.Item\0222\n\013demo_cannon\030\037 \001("
  "\0132\035.CMsgPaintKit_Definition.Item\0228\n\021demo"
  "_sultan_sword\030  \001(\0132\035.CMsgPaintKit_Defin"
  "ition.Item\0220\n\tdetonator\030! \001(\0132\035.CMsgPain"
  "tKit_Definition.Item\0222\n\013gatling_gun\030\" \001("
  "\0132\035.CMsgPaintKit_Definition.Item\0223\n\014holy"
  "mackerel\030# \001(\0132\035.CMsgPaintKit_Definition"
  ".Item\022*\n\003jag\030$ \001(\0132\035.CMsgPaintKit_Defini"
  "tion.Item\0220\n\tlochnload\030% \001(\0132\035.CMsgPaint"
  "Kit_Definition.Item\0220\n\tpowerjack\030& \001(\0132\035"
  ".CMsgPaintKit_Definition.Item\022/\n\010quadbal"
  "l\030\' \001(\0132\035.CMsgPaintKit_Definition.Item\0226"
  "\n\017reserve_shooter\030( \001(\0132\035.CMsgPaintKit_D"
  "efinition.Item\0222\n\013riding_crop\030) \001(\0132\035.CM"
  "sgPaintKit_Definition.Item\0223\n\014russian_ri"
  "ot\030* \001(\0132\035.CMsgPaintKit_Definition.Item\022"
  "/\n\010scimitar\030+ \001(\0132\035.CMsgPaintKit_Definit"
  "ion.Item\0222\n\013scorch_shot\030, \001(\0132\035.CMsgPain"
  "tKit_Definition.Item\0220\n\tshortstop\030- \001(\0132"
  "\035.CMsgPaintKit_Definition.Item\0222\n\013soda_p"
  "opper\030. \001(\0132\035.CMsgPaintKit_Definition.It"
  "em\0223\n\014tele_shotgun\030/ \001(\0132\035.CMsgPaintKit_"
  "Definition.Item\022/\n\010tomislav\0300 \001(\0132\035.CMsg"
  "PaintKit_Definition.Item\0220\n\ttrenchgun\0301 "
  "\001(\0132\035.CMsgPaintKit_Definition.Item\0224\n\rwi"
  "nger_pistol\0302 \001(\0132\035.CMsgPaintKit_Definit"
  "ion.Item\032\232\002\n\004Item\022^\n\030item_definition_tem"
  "plate\030\001 \002(\0132\017.CMsgProtoDefIDB+\200\227\"\010\322\227\"#CP"
  "aintKitDefIdFieldProtoEditorField\0224\n\004dat"
  "a\030\005 \001(\0132&.CMsgPaintKit_Definition.Item.I"
  "temData\032v\n\010ItemData\022 \n\022can_apply_paintki"
  "t\030\002 \001(\010:\004true\022\031\n\021material_override\030\003 \001(\t"
  "\022-\n\010variable\030\004 \003(\0132\r.CMsgVarFieldB\014\300\227\"\000\310"
  "\227\"\000\360\227\"\t:\004\200\210\'\000\"\376\003\n\016CMsgQuestTheme\022#\n\006head"
  "er\030\001 \002(\0132\023.CMsgProtoDefHeader\022\030\n\020notific"
  "ation_res\030\002 \001(\t\022\026\n\016quest_item_res\030\003 \001(\t\022"
  "\033\n\023in_game_tracker_res\030\004 \001(\t\0226\n\013give_sou"
  "nds\030\005 \003(\0132!.CMsgQuestTheme.WeightedStrin"
  "gSet\022:\n\017complete_sounds\030\006 \003(\0132!.CMsgQues"
  "tTheme.WeightedStringSet\022@\n\025fully_comple"
  "te_sounds\030\007 \003(\0132!.CMsgQuestTheme.Weighte"
  "dStringSet\022\024\n\014reward_sound\030\010 \001(\t\022\025\n\rdisc"
  "ard_sound\030\t \001(\t\022\024\n\014reveal_sound\030\n \001(\t\0320\n"
  "\016WeightedString\022\016\n\006string\030\001 \001(\t\022\016\n\006weigh"
  "t\030\002 \001(\r\032M\n\021WeightedStringSet\0228\n\020weighted"
  "_strings\030\001 \003(\0132\036.CMsgQuestTheme.Weighted"
  "String\"\246\002\n#CMsgQuestMapNodeCondition_Nod"
  "eState\022\200\001\n\031bonus_objectives_required\030\001 \001"
  "(\r:\0010BZ\242\227\"\016Bonus Required\252\227\"DNumber of b"
  "onus objectives required, on top of the "
  "primary objective\022|\n\021target_node_defid\030\002"
  " \002(\0132\017.CMsgProtoDefIDBP\200\227\"\000\242\227\"\013Target No"
  "de\252\227\"9Which node is required to have the"
  " above number of medals\"\335\001\n\037CMsgQuestMap"
  "NodeCondition_Logic\022I\n\toperation\030\001 \002(\0162\021"
  ".LogicalOperation:\003ANDB\036\242\227\"\005Logic\252\227\"\021Log"
  "ical operation\022o\n\016sub_conditions\030\002 \003(\0132\032"
  ".CMsgQuestMapNodeConditionB;\242\227\"\010Operands"
  "\252\227\"+Definitions to use in the logical op"
  "eration\"\317\002\n\031CMsgQuestMapNodeCondition\022\227\001"
  "\n\nnode_state\030\001 \001(\0132$.CMsgQuestMapNodeCon"
  "dition_NodeStateB[\242\227\"\024Node State Conditi"
  "on\252\227\"\?Returns true if a specific node ha"
  "s a required number of medalsH\000\022\212\001\n\007logi"
  "cal\030\002 \001(\0132 .CMsgQuestMapNodeCondition_Lo"
  "gicBU\242\227\"\021Logical Condition\252\227\"<Performs a"
  " specified logical operation to all sub "
  "conditionsH\000B\013\n\toperation\"5\n\016CMsgHeaderO"
  "nly\022#\n\006header\030\001 \002(\0132\023.CMsgProtoDefHeader"
  "*,\n\020LogicalOperation\022\007\n\003AND\020\000\022\006\n\002OR\020\001\022\007\n"
  "\003NOT\020\002*|\n\026EValueDefinitionSource\022\025\n\021REFE"
  "RENCE_DEFINES\020\000\022\022\n\016PARENT_DEFINES\020\001\022\020\n\014T"
  "HIS_DEFINES\020\002\022\024\n\020VARIABLE_DEFINES\020\003\022\017\n\013N"
  "OT_DEFINED\020\004*\201\003\n\rProtoDefTypes\022\033\n\027DEF_TY"
  "PE_QUEST_MAP_NODE\020\000\022\030\n\024DEF_TYPE_QUEST_TH"
  "EME\020\002\022\035\n\031DEF_TYPE_QUEST_MAP_REGION\020\003\022\022\n\016"
  "DEF_TYPE_QUEST\020\004\022\034\n\030DEF_TYPE_QUEST_OBJEC"
  "TIVE\020\005\022\037\n\033DEF_TYPE_PAINTKIT_VARIABLES\020\006\022"
  "\037\n\033DEF_TYPE_PAINTKIT_OPERATION\020\007\022%\n!DEF_"
  "TYPE_PAINTKIT_ITEM_DEFINITION\020\010\022 \n\034DEF_T"
  "YPE_PAINTKIT_DEFINITION\020\t\022\030\n\024DEF_TYPE_HE"
  "ADER_ONLY\020\n\022!\n\035DEF_TYPE_QUEST_MAP_STORE_"
  "ITEM\020\013\022 \n\034DEF_TYPE_QUEST_MAP_STAR_TYPE\020\014"
  "*[\n\014EQuestPoints\022\027\n\023QUEST_POINTS_NOVICE\020"
  "\000\022\031\n\025QUEST_POINTS_ADVANCED\020\001\022\027\n\023QUEST_PO"
  "INTS_EXPERT\020\002*\312\001\n\rEVarFieldType\022\024\n\020VAR_T"
  "YPE_INVALID\020\001\022\022\n\016VAR_TYPE_FLOAT\020\002\022\023\n\017VAR"
  "_TYPE_DOUBLE\020\003\022\023\n\017VAR_TYPE_UINT32\020\004\022\023\n\017V"
  "AR_TYPE_UINT64\020\005\022\023\n\017VAR_TYPE_SINT32\020\006\022\023\n"
  "\017VAR_TYPE_SINT64\020\007\022\021\n\rVAR_TYPE_BOOL\020\010\022\023\n"
  "\017VAR_TYPE_STRING\020\t*m\n\017ENodeCashReward\022\024\n"
  "\020CASH_REWARD_NONE\020\001\022\025\n\021CASH_REWARD_SMALL"
  "\020\002\022\026\n\022CASH_REWARD_MEDIUM\020\003\022\025\n\021CASH_REWAR"
  "D_LARGE\020\004:\?\n\016start_expanded\022\037.google.pro"
  "tobuf.MessageOptions\030\200\361\004 \001(\010:\004true:\\\n\nva"
  "lid_type\022\035.google.protobuf.FieldOptions\030"
  "\360\242\004 \001(\0162\016.ProtoDefTypes:\027DEF_TYPE_QUEST_"
  "MAP_NODE:7\n\010editable\022\035.google.protobuf.F"
  "ieldOptions\030\361\242\004 \001(\010:\004true:9\n\tlocalized\022\035"
  ".google.protobuf.FieldOptions\030\362\242\004 \001(\010:\005f"
  "alse:>\n\016do_not_inherit\022\035.google.protobuf"
  ".FieldOptions\030\363\242\004 \001(\010:\005false:5\n\014display_"
  "name\022\035.google.protobuf.FieldOptions\030\364\242\004 "
  "\001(\t:0\n\007comment\022\035.google.protobuf.FieldOp"
  "tions\030\365\242\004 \001(\t:2\n\tmax_count\022\035.google.prot"
  "obuf.FieldOptions\030\367\242\004 \001(\r:8\n\tallow_add\022\035"
  ".google.protobuf.FieldOptions\030\370\242\004 \001(\010:\004t"
  "rue:;\n\014allow_delete\022\035.google.protobuf.Fi"
  "eldOptions\030\371\242\004 \001(\010:\004true:=\n\024panel_class_"
  "override\022\035.google.protobuf.FieldOptions\030"
  "\372\242\004 \001(\t:L\n#message_inherhitance_key_fiel"
  "d_name\022\035.google.protobuf.FieldOptions\030\373\242"
  "\004 \001(\t:K\n\033inherit_reference_variables\022\035.g"
  "oogle.protobuf.FieldOptions\030\374\242\004 \001(\010:\005fal"
  "se:A\n\021self_inherit_only\022\035.google.protobu"
  "f.FieldOptions\030\375\242\004 \001(\010:\005false:Y\n\016var_fie"
  "ld_type\022\035.google.protobuf.FieldOptions\030\376"
  "\242\004 \001(\0162\016.EVarFieldType:\020VAR_TYPE_INVALID"
  ":A\n\021merging_key_field\022\035.google.protobuf."
  "FieldOptions\030\377\242\004 \001(\010:\005falseB\005H\001\200\001\000"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_tf_5fproto_5fdef_5fmessages_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_tf_5fproto_5fdef_5fmessages_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tf_5fproto_5fdef_5fmessages_2eproto = {
  false, false, 20434, descriptor_table_protodef_tf_5fproto_5fdef_5fmessages_2eproto, "tf_proto_def_messages.proto", 
  &descriptor_table_tf_5fproto_5fdef_5fmessages_2eproto_once, descriptor_table_tf_5fproto_5fdef_5fmessages_2eproto_deps, 1, 38,
  schemas, file_default_instances, TableStruct_tf_5fproto_5fdef_5fmessages_2eproto::offsets,
  file_level_metadata_tf_5fproto_5fdef_5fmessages_2eproto, file_level_enum_descriptors_tf_5fproto_5fdef_5fmessages_2eproto, file_level_service_descriptors_tf_5fproto_5fdef_5fmessages_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_tf_5fproto_5fdef_5fmessages_2eproto_getter() {
  return &descriptor_table_tf_5fproto_5fdef_5fmessages_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_tf_5fproto_5fdef_5fmessages_2eproto(&descriptor_table_tf_5fproto_5fdef_5fmessages_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgQuestObjectiveDef_ETF2GameModes_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tf_5fproto_5fdef_5fmessages_2eproto);
  return file_level_enum_descriptors_tf_5fproto_5fdef_5fmessages_2eproto[0];
}
bool CMsgQuestObjectiveDef_ETF2GameModes_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgQuestObjectiveDef_ETF2GameModes CMsgQuestObjectiveDef::kGameCategory_Escort;
constexpr CMsgQuestObjectiveDef_ETF2GameModes CMsgQuestObjectiveDef::kGameCategory_CTF;
constexpr CMsgQuestObjectiveDef_ETF2GameModes CMsgQuestObjectiveDef::kGameCategory_AttackDefense;
constexpr CMsgQuestObjectiveDef_ETF2GameModes CMsgQuestObjectiveDef::kGameCategory_Koth;
constexpr CMsgQuestObjectiveDef_ETF2GameModes CMsgQuestObjectiveDef::kGameCategory_CP;
constexpr CMsgQuestObjectiveDef_ETF2GameModes CMsgQuestObjectiveDef::kGameCategory_EscortRace;
constexpr CMsgQuestObjectiveDef_ETF2GameModes CMsgQuestObjectiveDef::kGameCategory_EventMix;
constexpr CMsgQuestObjectiveDef_ETF2GameModes CMsgQuestObjectiveDef::kGameCategory_SD;
constexpr CMsgQuestObjectiveDef_ETF2GameModes CMsgQuestObjectiveDef::kGameCategory_Quickplay;
constexpr CMsgQuestObjectiveDef_ETF2GameModes CMsgQuestObjectiveDef::kGameCategory_Event247;
constexpr CMsgQuestObjectiveDef_ETF2GameModes CMsgQuestObjectiveDef::kGameCategory_Arena;
constexpr CMsgQuestObjectiveDef_ETF2GameModes CMsgQuestObjectiveDef::kGameCategory_RobotDestruction;
constexpr CMsgQuestObjectiveDef_ETF2GameModes CMsgQuestObjectiveDef::kGameCategory_Powerup;
constexpr CMsgQuestObjectiveDef_ETF2GameModes CMsgQuestObjectiveDef::kGameCategory_Featured;
constexpr CMsgQuestObjectiveDef_ETF2GameModes CMsgQuestObjectiveDef::kGameCategory_Passtime;
constexpr CMsgQuestObjectiveDef_ETF2GameModes CMsgQuestObjectiveDef::kGameCategory_Community_Update;
constexpr CMsgQuestObjectiveDef_ETF2GameModes CMsgQuestObjectiveDef::kGameCategory_Misc;
constexpr CMsgQuestObjectiveDef_ETF2GameModes CMsgQuestObjectiveDef::kGameCategory_Competitive_6v6;
constexpr CMsgQuestObjectiveDef_ETF2GameModes CMsgQuestObjectiveDef::kGameCategory_Other;
constexpr CMsgQuestObjectiveDef_ETF2GameModes CMsgQuestObjectiveDef::kGameCategory_Halloween;
constexpr CMsgQuestObjectiveDef_ETF2GameModes CMsgQuestObjectiveDef::ETF2GameModes_MIN;
constexpr CMsgQuestObjectiveDef_ETF2GameModes CMsgQuestObjectiveDef::ETF2GameModes_MAX;
constexpr int CMsgQuestObjectiveDef::ETF2GameModes_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgQuestObjectiveDef_ETF2Conditions_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tf_5fproto_5fdef_5fmessages_2eproto);
  return file_level_enum_descriptors_tf_5fproto_5fdef_5fmessages_2eproto[1];
}
bool CMsgQuestObjectiveDef_ETF2Conditions_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_AIMING;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_ZOOMED;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_DISGUISING;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_DISGUISED;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_STEALTHED;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_INVULNERABLE;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_TELEPORTED;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_TAUNTING;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_INVULNERABLE_WEARINGOFF;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_STEALTHED_BLINK;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_SELECTED_TO_TELEPORT;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_CRITBOOSTED;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_TMPDAMAGEBONUS;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_FEIGN_DEATH;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_PHASE;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_STUNNED;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_OFFENSEBUFF;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_SHIELD_CHARGE;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_DEMO_BUFF;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_ENERGY_BUFF;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_RADIUSHEAL;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_HEALTH_BUFF;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_BURNING;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_HEALTH_OVERHEALED;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_URINE;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_BLEEDING;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_DEFENSEBUFF;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_MAD_MILK;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_MEGAHEAL;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_REGENONDAMAGEBUFF;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_MARKEDFORDEATH;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_NOHEALINGDAMAGEBUFF;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_SPEED_BOOST;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_CRITBOOSTED_PUMPKIN;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_CRITBOOSTED_USER_BUFF;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_CRITBOOSTED_DEMO_CHARGE;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_SODAPOPPER_HYPE;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_CRITBOOSTED_FIRST_BLOOD;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_CRITBOOSTED_BONUS_TIME;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_CRITBOOSTED_CTF_CAPTURE;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_CRITBOOSTED_ON_KILL;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_CANNOT_SWITCH_FROM_MELEE;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_DEFENSEBUFF_NO_CRIT_BLOCK;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_REPROGRAMMED;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_CRITBOOSTED_RAGE_BUFF;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_DEFENSEBUFF_HIGH;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_SNIPERCHARGE_RAGE_BUFF;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_DISGUISE_WEARINGOFF;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_MARKEDFORDEATH_SILENT;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_DISGUISED_AS_DISPENSER;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_SAPPED;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_INVULNERABLE_HIDE_UNLESS_DAMAGED;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_INVULNERABLE_USER_BUFF;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_HALLOWEEN_BOMB_HEAD;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_HALLOWEEN_THRILLER;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_RADIUSHEAL_ON_DAMAGE;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_CRITBOOSTED_CARD_EFFECT;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_INVULNERABLE_CARD_EFFECT;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_MEDIGUN_UBER_BULLET_RESIST;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_MEDIGUN_UBER_BLAST_RESIST;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_MEDIGUN_UBER_FIRE_RESIST;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_MEDIGUN_SMALL_BULLET_RESIST;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_MEDIGUN_SMALL_BLAST_RESIST;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_MEDIGUN_SMALL_FIRE_RESIST;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_STEALTHED_USER_BUFF;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_MEDIGUN_DEBUFF;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_STEALTHED_USER_BUFF_FADING;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_BULLET_IMMUNE;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_BLAST_IMMUNE;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_FIRE_IMMUNE;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_PREVENT_DEATH;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_MVM_BOT_STUN_RADIOWAVE;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_HALLOWEEN_SPEED_BOOST;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_HALLOWEEN_QUICK_HEAL;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_HALLOWEEN_GIANT;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_HALLOWEEN_TINY;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_HALLOWEEN_IN_HELL;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_HALLOWEEN_GHOST_MODE;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_MINICRITBOOSTED_ON_KILL;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_OBSCURED_SMOKE;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_PARACHUTE_ACTIVE;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_BLASTJUMPING;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_HALLOWEEN_KART;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_HALLOWEEN_KART_DASH;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_BALLOON_HEAD;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_MELEE_ONLY;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_SWIMMING_CURSE;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_FREEZE_INPUT;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_HALLOWEEN_KART_CAGE;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_DONOTUSE_0;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_RUNE_STRENGTH;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_RUNE_HASTE;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_RUNE_REGEN;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_RUNE_RESIST;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_RUNE_VAMPIRE;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_RUNE_REFLECT;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_RUNE_PRECISION;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_RUNE_AGILITY;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_GRAPPLINGHOOK;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_GRAPPLINGHOOK_SAFEFALL;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_GRAPPLINGHOOK_LATCHED;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_GRAPPLINGHOOK_BLEEDING;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_AFTERBURN_IMMUNE;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_RUNE_KNOCKOUT;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_RUNE_IMBALANCE;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_CRITBOOSTED_RUNE_TEMP;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_PASSTIME_INTERCEPTION;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_SWIMMING_NO_EFFECTS;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_PURGATORY;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_RUNE_KING;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_RUNE_PLAGUE;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_RUNE_SUPERNOVA;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_PLAGUE;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_KING_BUFFED;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_TEAM_GLOWS;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_KNOCKED_INTO_AIR;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_COMPETITIVE_WINNER;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_COMPETITIVE_LOSER;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_HEALING_DEBUFF;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_PASSTIME_PENALTY_DEBUFF;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_PARACHUTE_DEPLOYED;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_NO_COMBAT_SPEED_BOOST;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_TRANQ_SPY_BOOST;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_TRANQ_MARKED;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_ROCKETPACK;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_ROCKETPACK_PASSENGER;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_STEALTHED_PHASE;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_CLIP_OVERLOAD;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_SPY_CLASS_STEAL;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_GAS;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::ETF2Conditions_MIN;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::ETF2Conditions_MAX;
constexpr int CMsgQuestObjectiveDef::ETF2Conditions_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgQuestObjectiveDef_ETF2Team_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tf_5fproto_5fdef_5fmessages_2eproto);
  return file_level_enum_descriptors_tf_5fproto_5fdef_5fmessages_2eproto[2];
}
bool CMsgQuestObjectiveDef_ETF2Team_IsValid(int value) {
  switch (value) {
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgQuestObjectiveDef_ETF2Team CMsgQuestObjectiveDef::TF_TEAM_RED;
constexpr CMsgQuestObjectiveDef_ETF2Team CMsgQuestObjectiveDef::TF_TEAM_BLUE;
constexpr CMsgQuestObjectiveDef_ETF2Team CMsgQuestObjectiveDef::ETF2Team_MIN;
constexpr CMsgQuestObjectiveDef_ETF2Team CMsgQuestObjectiveDef::ETF2Team_MAX;
constexpr int CMsgQuestObjectiveDef::ETF2Team_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LogicalOperation_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tf_5fproto_5fdef_5fmessages_2eproto);
  return file_level_enum_descriptors_tf_5fproto_5fdef_5fmessages_2eproto[3];
}
bool LogicalOperation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EValueDefinitionSource_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tf_5fproto_5fdef_5fmessages_2eproto);
  return file_level_enum_descriptors_tf_5fproto_5fdef_5fmessages_2eproto[4];
}
bool EValueDefinitionSource_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProtoDefTypes_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tf_5fproto_5fdef_5fmessages_2eproto);
  return file_level_enum_descriptors_tf_5fproto_5fdef_5fmessages_2eproto[5];
}
bool ProtoDefTypes_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EQuestPoints_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tf_5fproto_5fdef_5fmessages_2eproto);
  return file_level_enum_descriptors_tf_5fproto_5fdef_5fmessages_2eproto[6];
}
bool EQuestPoints_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EVarFieldType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tf_5fproto_5fdef_5fmessages_2eproto);
  return file_level_enum_descriptors_tf_5fproto_5fdef_5fmessages_2eproto[7];
}
bool EVarFieldType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ENodeCashReward_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tf_5fproto_5fdef_5fmessages_2eproto);
  return file_level_enum_descriptors_tf_5fproto_5fdef_5fmessages_2eproto[8];
}
bool ENodeCashReward_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CMsgFieldID_CMsgField::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgFieldID_CMsgField>()._has_bits_);
  static void set_has_field_number(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_repeated_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgFieldID_CMsgField::CMsgFieldID_CMsgField(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgFieldID.CMsgField)
}
CMsgFieldID_CMsgField::CMsgFieldID_CMsgField(const CMsgFieldID_CMsgField& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&field_number_, &from.field_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&repeated_index_) -
    reinterpret_cast<char*>(&field_number_)) + sizeof(repeated_index_));
  // @@protoc_insertion_point(copy_constructor:CMsgFieldID.CMsgField)
}

void CMsgFieldID_CMsgField::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&field_number_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&repeated_index_) -
    reinterpret_cast<char*>(&field_number_)) + sizeof(repeated_index_));
}

CMsgFieldID_CMsgField::~CMsgFieldID_CMsgField() {
  // @@protoc_insertion_point(destructor:CMsgFieldID.CMsgField)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgFieldID_CMsgField::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgFieldID_CMsgField::ArenaDtor(void* object) {
  CMsgFieldID_CMsgField* _this = reinterpret_cast< CMsgFieldID_CMsgField* >(object);
  (void)_this;
}
void CMsgFieldID_CMsgField::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgFieldID_CMsgField::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgFieldID_CMsgField::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgFieldID.CMsgField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&field_number_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&repeated_index_) -
        reinterpret_cast<char*>(&field_number_)) + sizeof(repeated_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgFieldID_CMsgField::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 field_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_field_number(&has_bits);
          field_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 repeated_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_repeated_index(&has_bits);
          repeated_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgFieldID_CMsgField::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgFieldID.CMsgField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 field_number = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_field_number(), target);
  }

  // optional uint32 repeated_index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_repeated_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgFieldID.CMsgField)
  return target;
}

size_t CMsgFieldID_CMsgField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgFieldID.CMsgField)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 field_number = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_field_number());
    }

    // optional uint32 repeated_index = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_repeated_index());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgFieldID_CMsgField::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgFieldID.CMsgField)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgFieldID_CMsgField* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgFieldID_CMsgField>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgFieldID.CMsgField)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgFieldID.CMsgField)
    MergeFrom(*source);
  }
}

void CMsgFieldID_CMsgField::MergeFrom(const CMsgFieldID_CMsgField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgFieldID.CMsgField)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      field_number_ = from.field_number_;
    }
    if (cached_has_bits & 0x00000002u) {
      repeated_index_ = from.repeated_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgFieldID_CMsgField::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgFieldID.CMsgField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgFieldID_CMsgField::CopyFrom(const CMsgFieldID_CMsgField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgFieldID.CMsgField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgFieldID_CMsgField::IsInitialized() const {
  return true;
}

void CMsgFieldID_CMsgField::InternalSwap(CMsgFieldID_CMsgField* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgFieldID_CMsgField, repeated_index_)
      + sizeof(CMsgFieldID_CMsgField::repeated_index_)
      - PROTOBUF_FIELD_OFFSET(CMsgFieldID_CMsgField, field_number_)>(
          reinterpret_cast<char*>(&field_number_),
          reinterpret_cast<char*>(&other->field_number_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgFieldID_CMsgField::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fproto_5fdef_5fmessages_2eproto_getter, &descriptor_table_tf_5fproto_5fdef_5fmessages_2eproto_once,
      file_level_metadata_tf_5fproto_5fdef_5fmessages_2eproto[0]);
}

// ===================================================================

class CMsgFieldID::_Internal {
 public:
};

CMsgFieldID::CMsgFieldID(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  field_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgFieldID)
}
CMsgFieldID::CMsgFieldID(const CMsgFieldID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      field_(from.field_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgFieldID)
}

void CMsgFieldID::SharedCtor() {
}

CMsgFieldID::~CMsgFieldID() {
  // @@protoc_insertion_point(destructor:CMsgFieldID)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgFieldID::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgFieldID::ArenaDtor(void* object) {
  CMsgFieldID* _this = reinterpret_cast< CMsgFieldID* >(object);
  (void)_this;
}
void CMsgFieldID::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgFieldID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgFieldID::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgFieldID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  field_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgFieldID::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgFieldID.CMsgField field = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_field(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgFieldID::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgFieldID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgFieldID.CMsgField field = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_field_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_field(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgFieldID)
  return target;
}

size_t CMsgFieldID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgFieldID)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgFieldID.CMsgField field = 1;
  total_size += 1UL * this->_internal_field_size();
  for (const auto& msg : this->field_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgFieldID::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgFieldID)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgFieldID* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgFieldID>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgFieldID)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgFieldID)
    MergeFrom(*source);
  }
}

void CMsgFieldID::MergeFrom(const CMsgFieldID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgFieldID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  field_.MergeFrom(from.field_);
}

void CMsgFieldID::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgFieldID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgFieldID::CopyFrom(const CMsgFieldID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgFieldID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgFieldID::IsInitialized() const {
  return true;
}

void CMsgFieldID::InternalSwap(CMsgFieldID* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  field_.InternalSwap(&other->field_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgFieldID::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fproto_5fdef_5fmessages_2eproto_getter, &descriptor_table_tf_5fproto_5fdef_5fmessages_2eproto_once,
      file_level_metadata_tf_5fproto_5fdef_5fmessages_2eproto[1]);
}

// ===================================================================

class CMsgUniversalFieldID::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgUniversalFieldID>()._has_bits_);
  static void set_has_source_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CMsgProtoDefID& defining_obj_id(const CMsgUniversalFieldID* msg);
  static void set_has_defining_obj_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgFieldID& field_id(const CMsgUniversalFieldID* msg);
  static void set_has_field_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CMsgProtoDefID&
CMsgUniversalFieldID::_Internal::defining_obj_id(const CMsgUniversalFieldID* msg) {
  return *msg->defining_obj_id_;
}
const ::CMsgFieldID&
CMsgUniversalFieldID::_Internal::field_id(const CMsgUniversalFieldID* msg) {
  return *msg->field_id_;
}
CMsgUniversalFieldID::CMsgUniversalFieldID(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgUniversalFieldID)
}
CMsgUniversalFieldID::CMsgUniversalFieldID(const CMsgUniversalFieldID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_defining_obj_id()) {
    defining_obj_id_ = new ::CMsgProtoDefID(*from.defining_obj_id_);
  } else {
    defining_obj_id_ = nullptr;
  }
  if (from._internal_has_field_id()) {
    field_id_ = new ::CMsgFieldID(*from.field_id_);
  } else {
    field_id_ = nullptr;
  }
  source_type_ = from.source_type_;
  // @@protoc_insertion_point(copy_constructor:CMsgUniversalFieldID)
}

void CMsgUniversalFieldID::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&defining_obj_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&source_type_) -
    reinterpret_cast<char*>(&defining_obj_id_)) + sizeof(source_type_));
}

CMsgUniversalFieldID::~CMsgUniversalFieldID() {
  // @@protoc_insertion_point(destructor:CMsgUniversalFieldID)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgUniversalFieldID::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete defining_obj_id_;
  if (this != internal_default_instance()) delete field_id_;
}

void CMsgUniversalFieldID::ArenaDtor(void* object) {
  CMsgUniversalFieldID* _this = reinterpret_cast< CMsgUniversalFieldID* >(object);
  (void)_this;
}
void CMsgUniversalFieldID::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgUniversalFieldID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgUniversalFieldID::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgUniversalFieldID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(defining_obj_id_ != nullptr);
      defining_obj_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(field_id_ != nullptr);
      field_id_->Clear();
    }
  }
  source_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgUniversalFieldID::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .EValueDefinitionSource source_type = 1 [default = REFERENCE_DEFINES];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EValueDefinitionSource_IsValid(val))) {
            _internal_set_source_type(static_cast<::EValueDefinitionSource>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .CMsgProtoDefID defining_obj_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_defining_obj_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgFieldID field_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_field_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgUniversalFieldID::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgUniversalFieldID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .EValueDefinitionSource source_type = 1 [default = REFERENCE_DEFINES];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_source_type(), target);
  }

  // optional .CMsgProtoDefID defining_obj_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::defining_obj_id(this), target, stream);
  }

  // optional .CMsgFieldID field_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::field_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgUniversalFieldID)
  return target;
}

size_t CMsgUniversalFieldID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgUniversalFieldID)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .CMsgProtoDefID defining_obj_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *defining_obj_id_);
    }

    // optional .CMsgFieldID field_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *field_id_);
    }

    // optional .EValueDefinitionSource source_type = 1 [default = REFERENCE_DEFINES];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_source_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgUniversalFieldID::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgUniversalFieldID)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgUniversalFieldID* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgUniversalFieldID>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgUniversalFieldID)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgUniversalFieldID)
    MergeFrom(*source);
  }
}

void CMsgUniversalFieldID::MergeFrom(const CMsgUniversalFieldID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgUniversalFieldID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_defining_obj_id()->::CMsgProtoDefID::MergeFrom(from._internal_defining_obj_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_field_id()->::CMsgFieldID::MergeFrom(from._internal_field_id());
    }
    if (cached_has_bits & 0x00000004u) {
      source_type_ = from.source_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgUniversalFieldID::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgUniversalFieldID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgUniversalFieldID::CopyFrom(const CMsgUniversalFieldID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgUniversalFieldID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgUniversalFieldID::IsInitialized() const {
  if (_internal_has_defining_obj_id()) {
    if (!defining_obj_id_->IsInitialized()) return false;
  }
  return true;
}

void CMsgUniversalFieldID::InternalSwap(CMsgUniversalFieldID* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgUniversalFieldID, source_type_)
      + sizeof(CMsgUniversalFieldID::source_type_)
      - PROTOBUF_FIELD_OFFSET(CMsgUniversalFieldID, defining_obj_id_)>(
          reinterpret_cast<char*>(&defining_obj_id_),
          reinterpret_cast<char*>(&other->defining_obj_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgUniversalFieldID::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fproto_5fdef_5fmessages_2eproto_getter, &descriptor_table_tf_5fproto_5fdef_5fmessages_2eproto_once,
      file_level_metadata_tf_5fproto_5fdef_5fmessages_2eproto[2]);
}

// ===================================================================

class CMsgVariableDefinition::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgVariableDefinition>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_inherit(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgVariableDefinition::CMsgVariableDefinition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgVariableDefinition)
}
CMsgVariableDefinition::CMsgVariableDefinition(const CMsgVariableDefinition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_value()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  inherit_ = from.inherit_;
  // @@protoc_insertion_point(copy_constructor:CMsgVariableDefinition)
}

void CMsgVariableDefinition::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
inherit_ = true;
}

CMsgVariableDefinition::~CMsgVariableDefinition() {
  // @@protoc_insertion_point(destructor:CMsgVariableDefinition)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgVariableDefinition::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgVariableDefinition::ArenaDtor(void* object) {
  CMsgVariableDefinition* _this = reinterpret_cast< CMsgVariableDefinition* >(object);
  (void)_this;
}
void CMsgVariableDefinition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgVariableDefinition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgVariableDefinition::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgVariableDefinition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      value_.ClearNonDefaultToEmpty();
    }
    inherit_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgVariableDefinition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1 [(.merging_key_field) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgVariableDefinition.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool inherit = 2 [default = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_inherit(&has_bits);
          inherit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgVariableDefinition.value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgVariableDefinition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgVariableDefinition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1 [(.merging_key_field) = true];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgVariableDefinition.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional bool inherit = 2 [default = true];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_inherit(), target);
  }

  // optional string value = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgVariableDefinition.value");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgVariableDefinition)
  return target;
}

size_t CMsgVariableDefinition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgVariableDefinition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 1 [(.merging_key_field) = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string value = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_value());
    }

    // optional bool inherit = 2 [default = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgVariableDefinition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgVariableDefinition)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgVariableDefinition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgVariableDefinition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgVariableDefinition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgVariableDefinition)
    MergeFrom(*source);
  }
}

void CMsgVariableDefinition::MergeFrom(const CMsgVariableDefinition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgVariableDefinition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_value(from._internal_value());
    }
    if (cached_has_bits & 0x00000004u) {
      inherit_ = from.inherit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgVariableDefinition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgVariableDefinition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgVariableDefinition::CopyFrom(const CMsgVariableDefinition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgVariableDefinition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgVariableDefinition::IsInitialized() const {
  return true;
}

void CMsgVariableDefinition::InternalSwap(CMsgVariableDefinition* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, GetArenaForAllocation(),
      &other->value_, other->GetArenaForAllocation()
  );
  swap(inherit_, other->inherit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgVariableDefinition::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fproto_5fdef_5fmessages_2eproto_getter, &descriptor_table_tf_5fproto_5fdef_5fmessages_2eproto_once,
      file_level_metadata_tf_5fproto_5fdef_5fmessages_2eproto[3]);
}

// ===================================================================

class CMsgProtoDefHeader::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgProtoDefHeader>()._has_bits_);
  static void set_has_defindex(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_prefab_only(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

CMsgProtoDefHeader::CMsgProtoDefHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  prefabs_(arena),
  tags_(arena),
  variables_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgProtoDefHeader)
}
CMsgProtoDefHeader::CMsgProtoDefHeader(const CMsgProtoDefHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      prefabs_(from.prefabs_),
      tags_(from.tags_),
      variables_(from.variables_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&defindex_, &from.defindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&prefab_only_) -
    reinterpret_cast<char*>(&defindex_)) + sizeof(prefab_only_));
  // @@protoc_insertion_point(copy_constructor:CMsgProtoDefHeader)
}

void CMsgProtoDefHeader::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&defindex_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&prefab_only_) -
    reinterpret_cast<char*>(&defindex_)) + sizeof(prefab_only_));
}

CMsgProtoDefHeader::~CMsgProtoDefHeader() {
  // @@protoc_insertion_point(destructor:CMsgProtoDefHeader)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgProtoDefHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgProtoDefHeader::ArenaDtor(void* object) {
  CMsgProtoDefHeader* _this = reinterpret_cast< CMsgProtoDefHeader* >(object);
  (void)_this;
}
void CMsgProtoDefHeader::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgProtoDefHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgProtoDefHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgProtoDefHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  prefabs_.Clear();
  tags_.Clear();
  variables_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&defindex_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&prefab_only_) -
        reinterpret_cast<char*>(&defindex_)) + sizeof(prefab_only_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgProtoDefHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 defindex = 1 [(.editable) = false, (.display_name) = "Defindex", (.comment) = "Autogenerated", (.self_inherit_only) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_defindex(&has_bits);
          defindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 2 [(.display_name) = "Name", (.comment) = "Name to show in the editor", (.self_inherit_only) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgProtoDefHeader.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgProtoDefID prefabs = 3 [(.display_name) = "Prefab", (.comment) = "Inherit the values of these definitions, in order from top to bottom.", (.panel_class_override) = "CPrefabFieldEditingPanel", (.self_inherit_only) = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_prefabs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string tags = 4 [(.display_name) = "Tags", (.comment) = "Strings used to describe this definition while searching.  ie. \'class\', \'shotgun\', \'easy\'"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_tags();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgProtoDefHeader.tags");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool prefab_only = 5 [default = false, (.display_name) = "Pure Prefab", (.comment) = "If true, this is only a prefab and will not be made into an object", (.self_inherit_only) = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_prefab_only(&has_bits);
          prefab_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgVariableDefinition variables = 6 [(.display_name) = "Variables", (.comment) = "Variable value definitions", (.message_inherhitance_key_field_name) = "name"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_variables(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgProtoDefHeader::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgProtoDefHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 defindex = 1 [(.editable) = false, (.display_name) = "Defindex", (.comment) = "Autogenerated", (.self_inherit_only) = true];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_defindex(), target);
  }

  // optional string name = 2 [(.display_name) = "Name", (.comment) = "Name to show in the editor", (.self_inherit_only) = true];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgProtoDefHeader.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // repeated .CMsgProtoDefID prefabs = 3 [(.display_name) = "Prefab", (.comment) = "Inherit the values of these definitions, in order from top to bottom.", (.panel_class_override) = "CPrefabFieldEditingPanel", (.self_inherit_only) = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_prefabs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_prefabs(i), target, stream);
  }

  // repeated string tags = 4 [(.display_name) = "Tags", (.comment) = "Strings used to describe this definition while searching.  ie. \'class\', \'shotgun\', \'easy\'"];
  for (int i = 0, n = this->_internal_tags_size(); i < n; i++) {
    const auto& s = this->_internal_tags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgProtoDefHeader.tags");
    target = stream->WriteString(4, s, target);
  }

  // optional bool prefab_only = 5 [default = false, (.display_name) = "Pure Prefab", (.comment) = "If true, this is only a prefab and will not be made into an object", (.self_inherit_only) = true];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_prefab_only(), target);
  }

  // repeated .CMsgVariableDefinition variables = 6 [(.display_name) = "Variables", (.comment) = "Variable value definitions", (.message_inherhitance_key_field_name) = "name"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_variables_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_variables(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgProtoDefHeader)
  return target;
}

size_t CMsgProtoDefHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgProtoDefHeader)
  size_t total_size = 0;

  // required uint32 defindex = 1 [(.editable) = false, (.display_name) = "Defindex", (.comment) = "Autogenerated", (.self_inherit_only) = true];
  if (_internal_has_defindex()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_defindex());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgProtoDefID prefabs = 3 [(.display_name) = "Prefab", (.comment) = "Inherit the values of these definitions, in order from top to bottom.", (.panel_class_override) = "CPrefabFieldEditingPanel", (.self_inherit_only) = true];
  total_size += 1UL * this->_internal_prefabs_size();
  for (const auto& msg : this->prefabs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string tags = 4 [(.display_name) = "Tags", (.comment) = "Strings used to describe this definition while searching.  ie. \'class\', \'shotgun\', \'easy\'"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(tags_.size());
  for (int i = 0, n = tags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      tags_.Get(i));
  }

  // repeated .CMsgVariableDefinition variables = 6 [(.display_name) = "Variables", (.comment) = "Variable value definitions", (.message_inherhitance_key_field_name) = "name"];
  total_size += 1UL * this->_internal_variables_size();
  for (const auto& msg : this->variables_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string name = 2 [(.display_name) = "Name", (.comment) = "Name to show in the editor", (.self_inherit_only) = true];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // optional bool prefab_only = 5 [default = false, (.display_name) = "Pure Prefab", (.comment) = "If true, this is only a prefab and will not be made into an object", (.self_inherit_only) = true];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgProtoDefHeader::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgProtoDefHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgProtoDefHeader* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgProtoDefHeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgProtoDefHeader)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgProtoDefHeader)
    MergeFrom(*source);
  }
}

void CMsgProtoDefHeader::MergeFrom(const CMsgProtoDefHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgProtoDefHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  prefabs_.MergeFrom(from.prefabs_);
  tags_.MergeFrom(from.tags_);
  variables_.MergeFrom(from.variables_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      defindex_ = from.defindex_;
    }
    if (cached_has_bits & 0x00000004u) {
      prefab_only_ = from.prefab_only_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgProtoDefHeader::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgProtoDefHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgProtoDefHeader::CopyFrom(const CMsgProtoDefHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgProtoDefHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgProtoDefHeader::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(prefabs_)) return false;
  return true;
}

void CMsgProtoDefHeader::InternalSwap(CMsgProtoDefHeader* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  prefabs_.InternalSwap(&other->prefabs_);
  tags_.InternalSwap(&other->tags_);
  variables_.InternalSwap(&other->variables_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgProtoDefHeader, prefab_only_)
      + sizeof(CMsgProtoDefHeader::prefab_only_)
      - PROTOBUF_FIELD_OFFSET(CMsgProtoDefHeader, defindex_)>(
          reinterpret_cast<char*>(&defindex_),
          reinterpret_cast<char*>(&other->defindex_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgProtoDefHeader::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fproto_5fdef_5fmessages_2eproto_getter, &descriptor_table_tf_5fproto_5fdef_5fmessages_2eproto_once,
      file_level_metadata_tf_5fproto_5fdef_5fmessages_2eproto[4]);
}

// ===================================================================

class CMsgValidTypes::_Internal {
 public:
};

CMsgValidTypes::CMsgValidTypes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  types_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgValidTypes)
}
CMsgValidTypes::CMsgValidTypes(const CMsgValidTypes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      types_(from.types_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgValidTypes)
}

void CMsgValidTypes::SharedCtor() {
}

CMsgValidTypes::~CMsgValidTypes() {
  // @@protoc_insertion_point(destructor:CMsgValidTypes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgValidTypes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgValidTypes::ArenaDtor(void* object) {
  CMsgValidTypes* _this = reinterpret_cast< CMsgValidTypes* >(object);
  (void)_this;
}
void CMsgValidTypes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgValidTypes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgValidTypes::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgValidTypes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  types_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgValidTypes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ProtoDefTypes types = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::ProtoDefTypes_IsValid(val))) {
              _internal_add_types(static_cast<::ProtoDefTypes>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_types(), ptr, ctx, ::ProtoDefTypes_IsValid, &_internal_metadata_, 1);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgValidTypes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgValidTypes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ProtoDefTypes types = 1;
  for (int i = 0, n = this->_internal_types_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        1, this->_internal_types(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgValidTypes)
  return target;
}

size_t CMsgValidTypes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgValidTypes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ProtoDefTypes types = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_types_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_types(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgValidTypes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgValidTypes)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgValidTypes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgValidTypes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgValidTypes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgValidTypes)
    MergeFrom(*source);
  }
}

void CMsgValidTypes::MergeFrom(const CMsgValidTypes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgValidTypes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  types_.MergeFrom(from.types_);
}

void CMsgValidTypes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgValidTypes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgValidTypes::CopyFrom(const CMsgValidTypes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgValidTypes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgValidTypes::IsInitialized() const {
  return true;
}

void CMsgValidTypes::InternalSwap(CMsgValidTypes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  types_.InternalSwap(&other->types_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgValidTypes::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fproto_5fdef_5fmessages_2eproto_getter, &descriptor_table_tf_5fproto_5fdef_5fmessages_2eproto_once,
      file_level_metadata_tf_5fproto_5fdef_5fmessages_2eproto[5]);
}

// ===================================================================

class CMsgProtoDefID::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgProtoDefID>()._has_bits_);
  static void set_has_defindex(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgQuestMapNodeDef& instance_def_type_quest_map_node(const CMsgProtoDefID* msg);
  static const ::CMsgQuestTheme& instance_def_type_quest_theme(const CMsgProtoDefID* msg);
  static const ::CMsgQuestMapRegionDef& instance_def_type_quest_map_region(const CMsgProtoDefID* msg);
  static const ::CMsgQuestDef& instance_def_type_quest(const CMsgProtoDefID* msg);
  static const ::CMsgQuestObjectiveDef& instance_def_type_quest_objective(const CMsgProtoDefID* msg);
  static const ::CMsgPaintKit_Variables& instance_def_type_paintkit_variables(const CMsgProtoDefID* msg);
  static const ::CMsgPaintKit_Operation& instance_def_type_paintkit_operation(const CMsgProtoDefID* msg);
  static const ::CMsgPaintKit_ItemDefinition& instance_def_type_paintkit_item_definition(const CMsgProtoDefID* msg);
  static const ::CMsgPaintKit_Definition& instance_def_type_paintkit_definition(const CMsgProtoDefID* msg);
  static const ::CMsgHeaderOnly& instance_def_type_header_only(const CMsgProtoDefID* msg);
};

const ::CMsgQuestMapNodeDef&
CMsgProtoDefID::_Internal::instance_def_type_quest_map_node(const CMsgProtoDefID* msg) {
  return *msg->instance_.instance_def_type_quest_map_node_;
}
const ::CMsgQuestTheme&
CMsgProtoDefID::_Internal::instance_def_type_quest_theme(const CMsgProtoDefID* msg) {
  return *msg->instance_.instance_def_type_quest_theme_;
}
const ::CMsgQuestMapRegionDef&
CMsgProtoDefID::_Internal::instance_def_type_quest_map_region(const CMsgProtoDefID* msg) {
  return *msg->instance_.instance_def_type_quest_map_region_;
}
const ::CMsgQuestDef&
CMsgProtoDefID::_Internal::instance_def_type_quest(const CMsgProtoDefID* msg) {
  return *msg->instance_.instance_def_type_quest_;
}
const ::CMsgQuestObjectiveDef&
CMsgProtoDefID::_Internal::instance_def_type_quest_objective(const CMsgProtoDefID* msg) {
  return *msg->instance_.instance_def_type_quest_objective_;
}
const ::CMsgPaintKit_Variables&
CMsgProtoDefID::_Internal::instance_def_type_paintkit_variables(const CMsgProtoDefID* msg) {
  return *msg->instance_.instance_def_type_paintkit_variables_;
}
const ::CMsgPaintKit_Operation&
CMsgProtoDefID::_Internal::instance_def_type_paintkit_operation(const CMsgProtoDefID* msg) {
  return *msg->instance_.instance_def_type_paintkit_operation_;
}
const ::CMsgPaintKit_ItemDefinition&
CMsgProtoDefID::_Internal::instance_def_type_paintkit_item_definition(const CMsgProtoDefID* msg) {
  return *msg->instance_.instance_def_type_paintkit_item_definition_;
}
const ::CMsgPaintKit_Definition&
CMsgProtoDefID::_Internal::instance_def_type_paintkit_definition(const CMsgProtoDefID* msg) {
  return *msg->instance_.instance_def_type_paintkit_definition_;
}
const ::CMsgHeaderOnly&
CMsgProtoDefID::_Internal::instance_def_type_header_only(const CMsgProtoDefID* msg) {
  return *msg->instance_.instance_def_type_header_only_;
}
void CMsgProtoDefID::set_allocated_instance_def_type_quest_map_node(::CMsgQuestMapNodeDef* instance_def_type_quest_map_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_instance();
  if (instance_def_type_quest_map_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgQuestMapNodeDef>::GetOwningArena(instance_def_type_quest_map_node);
    if (message_arena != submessage_arena) {
      instance_def_type_quest_map_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, instance_def_type_quest_map_node, submessage_arena);
    }
    set_has_instance_def_type_quest_map_node();
    instance_.instance_def_type_quest_map_node_ = instance_def_type_quest_map_node;
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgProtoDefID.instance_def_type_quest_map_node)
}
void CMsgProtoDefID::set_allocated_instance_def_type_quest_theme(::CMsgQuestTheme* instance_def_type_quest_theme) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_instance();
  if (instance_def_type_quest_theme) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgQuestTheme>::GetOwningArena(instance_def_type_quest_theme);
    if (message_arena != submessage_arena) {
      instance_def_type_quest_theme = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, instance_def_type_quest_theme, submessage_arena);
    }
    set_has_instance_def_type_quest_theme();
    instance_.instance_def_type_quest_theme_ = instance_def_type_quest_theme;
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgProtoDefID.instance_def_type_quest_theme)
}
void CMsgProtoDefID::set_allocated_instance_def_type_quest_map_region(::CMsgQuestMapRegionDef* instance_def_type_quest_map_region) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_instance();
  if (instance_def_type_quest_map_region) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgQuestMapRegionDef>::GetOwningArena(instance_def_type_quest_map_region);
    if (message_arena != submessage_arena) {
      instance_def_type_quest_map_region = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, instance_def_type_quest_map_region, submessage_arena);
    }
    set_has_instance_def_type_quest_map_region();
    instance_.instance_def_type_quest_map_region_ = instance_def_type_quest_map_region;
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgProtoDefID.instance_def_type_quest_map_region)
}
void CMsgProtoDefID::set_allocated_instance_def_type_quest(::CMsgQuestDef* instance_def_type_quest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_instance();
  if (instance_def_type_quest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgQuestDef>::GetOwningArena(instance_def_type_quest);
    if (message_arena != submessage_arena) {
      instance_def_type_quest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, instance_def_type_quest, submessage_arena);
    }
    set_has_instance_def_type_quest();
    instance_.instance_def_type_quest_ = instance_def_type_quest;
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgProtoDefID.instance_def_type_quest)
}
void CMsgProtoDefID::set_allocated_instance_def_type_quest_objective(::CMsgQuestObjectiveDef* instance_def_type_quest_objective) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_instance();
  if (instance_def_type_quest_objective) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgQuestObjectiveDef>::GetOwningArena(instance_def_type_quest_objective);
    if (message_arena != submessage_arena) {
      instance_def_type_quest_objective = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, instance_def_type_quest_objective, submessage_arena);
    }
    set_has_instance_def_type_quest_objective();
    instance_.instance_def_type_quest_objective_ = instance_def_type_quest_objective;
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgProtoDefID.instance_def_type_quest_objective)
}
void CMsgProtoDefID::set_allocated_instance_def_type_paintkit_variables(::CMsgPaintKit_Variables* instance_def_type_paintkit_variables) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_instance();
  if (instance_def_type_paintkit_variables) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgPaintKit_Variables>::GetOwningArena(instance_def_type_paintkit_variables);
    if (message_arena != submessage_arena) {
      instance_def_type_paintkit_variables = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, instance_def_type_paintkit_variables, submessage_arena);
    }
    set_has_instance_def_type_paintkit_variables();
    instance_.instance_def_type_paintkit_variables_ = instance_def_type_paintkit_variables;
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgProtoDefID.instance_def_type_paintkit_variables)
}
void CMsgProtoDefID::set_allocated_instance_def_type_paintkit_operation(::CMsgPaintKit_Operation* instance_def_type_paintkit_operation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_instance();
  if (instance_def_type_paintkit_operation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgPaintKit_Operation>::GetOwningArena(instance_def_type_paintkit_operation);
    if (message_arena != submessage_arena) {
      instance_def_type_paintkit_operation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, instance_def_type_paintkit_operation, submessage_arena);
    }
    set_has_instance_def_type_paintkit_operation();
    instance_.instance_def_type_paintkit_operation_ = instance_def_type_paintkit_operation;
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgProtoDefID.instance_def_type_paintkit_operation)
}
void CMsgProtoDefID::set_allocated_instance_def_type_paintkit_item_definition(::CMsgPaintKit_ItemDefinition* instance_def_type_paintkit_item_definition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_instance();
  if (instance_def_type_paintkit_item_definition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgPaintKit_ItemDefinition>::GetOwningArena(instance_def_type_paintkit_item_definition);
    if (message_arena != submessage_arena) {
      instance_def_type_paintkit_item_definition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, instance_def_type_paintkit_item_definition, submessage_arena);
    }
    set_has_instance_def_type_paintkit_item_definition();
    instance_.instance_def_type_paintkit_item_definition_ = instance_def_type_paintkit_item_definition;
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgProtoDefID.instance_def_type_paintkit_item_definition)
}
void CMsgProtoDefID::set_allocated_instance_def_type_paintkit_definition(::CMsgPaintKit_Definition* instance_def_type_paintkit_definition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_instance();
  if (instance_def_type_paintkit_definition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgPaintKit_Definition>::GetOwningArena(instance_def_type_paintkit_definition);
    if (message_arena != submessage_arena) {
      instance_def_type_paintkit_definition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, instance_def_type_paintkit_definition, submessage_arena);
    }
    set_has_instance_def_type_paintkit_definition();
    instance_.instance_def_type_paintkit_definition_ = instance_def_type_paintkit_definition;
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgProtoDefID.instance_def_type_paintkit_definition)
}
void CMsgProtoDefID::set_allocated_instance_def_type_header_only(::CMsgHeaderOnly* instance_def_type_header_only) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_instance();
  if (instance_def_type_header_only) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgHeaderOnly>::GetOwningArena(instance_def_type_header_only);
    if (message_arena != submessage_arena) {
      instance_def_type_header_only = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, instance_def_type_header_only, submessage_arena);
    }
    set_has_instance_def_type_header_only();
    instance_.instance_def_type_header_only_ = instance_def_type_header_only;
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgProtoDefID.instance_def_type_header_only)
}
CMsgProtoDefID::CMsgProtoDefID(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgProtoDefID)
}
CMsgProtoDefID::CMsgProtoDefID(const CMsgProtoDefID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&defindex_, &from.defindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&defindex_)) + sizeof(type_));
  clear_has_instance();
  switch (from.instance_case()) {
    case kInstanceDefTypeQuestMapNode: {
      _internal_mutable_instance_def_type_quest_map_node()->::CMsgQuestMapNodeDef::MergeFrom(from._internal_instance_def_type_quest_map_node());
      break;
    }
    case kInstanceDefTypeQuestTheme: {
      _internal_mutable_instance_def_type_quest_theme()->::CMsgQuestTheme::MergeFrom(from._internal_instance_def_type_quest_theme());
      break;
    }
    case kInstanceDefTypeQuestMapRegion: {
      _internal_mutable_instance_def_type_quest_map_region()->::CMsgQuestMapRegionDef::MergeFrom(from._internal_instance_def_type_quest_map_region());
      break;
    }
    case kInstanceDefTypeQuest: {
      _internal_mutable_instance_def_type_quest()->::CMsgQuestDef::MergeFrom(from._internal_instance_def_type_quest());
      break;
    }
    case kInstanceDefTypeQuestObjective: {
      _internal_mutable_instance_def_type_quest_objective()->::CMsgQuestObjectiveDef::MergeFrom(from._internal_instance_def_type_quest_objective());
      break;
    }
    case kInstanceDefTypePaintkitVariables: {
      _internal_mutable_instance_def_type_paintkit_variables()->::CMsgPaintKit_Variables::MergeFrom(from._internal_instance_def_type_paintkit_variables());
      break;
    }
    case kInstanceDefTypePaintkitOperation: {
      _internal_mutable_instance_def_type_paintkit_operation()->::CMsgPaintKit_Operation::MergeFrom(from._internal_instance_def_type_paintkit_operation());
      break;
    }
    case kInstanceDefTypePaintkitItemDefinition: {
      _internal_mutable_instance_def_type_paintkit_item_definition()->::CMsgPaintKit_ItemDefinition::MergeFrom(from._internal_instance_def_type_paintkit_item_definition());
      break;
    }
    case kInstanceDefTypePaintkitDefinition: {
      _internal_mutable_instance_def_type_paintkit_definition()->::CMsgPaintKit_Definition::MergeFrom(from._internal_instance_def_type_paintkit_definition());
      break;
    }
    case kInstanceDefTypeHeaderOnly: {
      _internal_mutable_instance_def_type_header_only()->::CMsgHeaderOnly::MergeFrom(from._internal_instance_def_type_header_only());
      break;
    }
    case INSTANCE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:CMsgProtoDefID)
}

void CMsgProtoDefID::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&defindex_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&defindex_)) + sizeof(type_));
clear_has_instance();
}

CMsgProtoDefID::~CMsgProtoDefID() {
  // @@protoc_insertion_point(destructor:CMsgProtoDefID)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgProtoDefID::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_instance()) {
    clear_instance();
  }
}

void CMsgProtoDefID::ArenaDtor(void* object) {
  CMsgProtoDefID* _this = reinterpret_cast< CMsgProtoDefID* >(object);
  (void)_this;
}
void CMsgProtoDefID::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgProtoDefID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgProtoDefID::clear_instance() {
// @@protoc_insertion_point(one_of_clear_start:CMsgProtoDefID)
  switch (instance_case()) {
    case kInstanceDefTypeQuestMapNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete instance_.instance_def_type_quest_map_node_;
      }
      break;
    }
    case kInstanceDefTypeQuestTheme: {
      if (GetArenaForAllocation() == nullptr) {
        delete instance_.instance_def_type_quest_theme_;
      }
      break;
    }
    case kInstanceDefTypeQuestMapRegion: {
      if (GetArenaForAllocation() == nullptr) {
        delete instance_.instance_def_type_quest_map_region_;
      }
      break;
    }
    case kInstanceDefTypeQuest: {
      if (GetArenaForAllocation() == nullptr) {
        delete instance_.instance_def_type_quest_;
      }
      break;
    }
    case kInstanceDefTypeQuestObjective: {
      if (GetArenaForAllocation() == nullptr) {
        delete instance_.instance_def_type_quest_objective_;
      }
      break;
    }
    case kInstanceDefTypePaintkitVariables: {
      if (GetArenaForAllocation() == nullptr) {
        delete instance_.instance_def_type_paintkit_variables_;
      }
      break;
    }
    case kInstanceDefTypePaintkitOperation: {
      if (GetArenaForAllocation() == nullptr) {
        delete instance_.instance_def_type_paintkit_operation_;
      }
      break;
    }
    case kInstanceDefTypePaintkitItemDefinition: {
      if (GetArenaForAllocation() == nullptr) {
        delete instance_.instance_def_type_paintkit_item_definition_;
      }
      break;
    }
    case kInstanceDefTypePaintkitDefinition: {
      if (GetArenaForAllocation() == nullptr) {
        delete instance_.instance_def_type_paintkit_definition_;
      }
      break;
    }
    case kInstanceDefTypeHeaderOnly: {
      if (GetArenaForAllocation() == nullptr) {
        delete instance_.instance_def_type_header_only_;
      }
      break;
    }
    case INSTANCE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = INSTANCE_NOT_SET;
}


void CMsgProtoDefID::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgProtoDefID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&defindex_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&defindex_)) + sizeof(type_));
  }
  clear_instance();
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgProtoDefID::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 defindex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_defindex(&has_bits);
          defindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ProtoDefTypes type = 2 [default = DEF_TYPE_QUEST_MAP_NODE];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ProtoDefTypes_IsValid(val))) {
            _internal_set_type(static_cast<::ProtoDefTypes>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // .CMsgQuestMapNodeDef instance_def_type_quest_map_node = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_instance_def_type_quest_map_node(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CMsgQuestTheme instance_def_type_quest_theme = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_instance_def_type_quest_theme(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CMsgQuestMapRegionDef instance_def_type_quest_map_region = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_instance_def_type_quest_map_region(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CMsgQuestDef instance_def_type_quest = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_instance_def_type_quest(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CMsgQuestObjectiveDef instance_def_type_quest_objective = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_instance_def_type_quest_objective(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CMsgPaintKit_Variables instance_def_type_paintkit_variables = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_instance_def_type_paintkit_variables(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CMsgPaintKit_Operation instance_def_type_paintkit_operation = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_instance_def_type_paintkit_operation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CMsgPaintKit_ItemDefinition instance_def_type_paintkit_item_definition = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_instance_def_type_paintkit_item_definition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CMsgPaintKit_Definition instance_def_type_paintkit_definition = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_instance_def_type_paintkit_definition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CMsgHeaderOnly instance_def_type_header_only = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_instance_def_type_header_only(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgProtoDefID::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgProtoDefID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 defindex = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_defindex(), target);
  }

  // optional .ProtoDefTypes type = 2 [default = DEF_TYPE_QUEST_MAP_NODE];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  switch (instance_case()) {
    case kInstanceDefTypeQuestMapNode: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          3, _Internal::instance_def_type_quest_map_node(this), target, stream);
      break;
    }
    case kInstanceDefTypeQuestTheme: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          5, _Internal::instance_def_type_quest_theme(this), target, stream);
      break;
    }
    case kInstanceDefTypeQuestMapRegion: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          6, _Internal::instance_def_type_quest_map_region(this), target, stream);
      break;
    }
    case kInstanceDefTypeQuest: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          7, _Internal::instance_def_type_quest(this), target, stream);
      break;
    }
    case kInstanceDefTypeQuestObjective: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          8, _Internal::instance_def_type_quest_objective(this), target, stream);
      break;
    }
    case kInstanceDefTypePaintkitVariables: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          9, _Internal::instance_def_type_paintkit_variables(this), target, stream);
      break;
    }
    case kInstanceDefTypePaintkitOperation: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          10, _Internal::instance_def_type_paintkit_operation(this), target, stream);
      break;
    }
    case kInstanceDefTypePaintkitItemDefinition: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          11, _Internal::instance_def_type_paintkit_item_definition(this), target, stream);
      break;
    }
    case kInstanceDefTypePaintkitDefinition: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          12, _Internal::instance_def_type_paintkit_definition(this), target, stream);
      break;
    }
    case kInstanceDefTypeHeaderOnly: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          13, _Internal::instance_def_type_header_only(this), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgProtoDefID)
  return target;
}

size_t CMsgProtoDefID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgProtoDefID)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 defindex = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_defindex());
    }

    // optional .ProtoDefTypes type = 2 [default = DEF_TYPE_QUEST_MAP_NODE];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  switch (instance_case()) {
    // .CMsgQuestMapNodeDef instance_def_type_quest_map_node = 3;
    case kInstanceDefTypeQuestMapNode: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *instance_.instance_def_type_quest_map_node_);
      break;
    }
    // .CMsgQuestTheme instance_def_type_quest_theme = 5;
    case kInstanceDefTypeQuestTheme: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *instance_.instance_def_type_quest_theme_);
      break;
    }
    // .CMsgQuestMapRegionDef instance_def_type_quest_map_region = 6;
    case kInstanceDefTypeQuestMapRegion: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *instance_.instance_def_type_quest_map_region_);
      break;
    }
    // .CMsgQuestDef instance_def_type_quest = 7;
    case kInstanceDefTypeQuest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *instance_.instance_def_type_quest_);
      break;
    }
    // .CMsgQuestObjectiveDef instance_def_type_quest_objective = 8;
    case kInstanceDefTypeQuestObjective: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *instance_.instance_def_type_quest_objective_);
      break;
    }
    // .CMsgPaintKit_Variables instance_def_type_paintkit_variables = 9;
    case kInstanceDefTypePaintkitVariables: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *instance_.instance_def_type_paintkit_variables_);
      break;
    }
    // .CMsgPaintKit_Operation instance_def_type_paintkit_operation = 10;
    case kInstanceDefTypePaintkitOperation: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *instance_.instance_def_type_paintkit_operation_);
      break;
    }
    // .CMsgPaintKit_ItemDefinition instance_def_type_paintkit_item_definition = 11;
    case kInstanceDefTypePaintkitItemDefinition: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *instance_.instance_def_type_paintkit_item_definition_);
      break;
    }
    // .CMsgPaintKit_Definition instance_def_type_paintkit_definition = 12;
    case kInstanceDefTypePaintkitDefinition: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *instance_.instance_def_type_paintkit_definition_);
      break;
    }
    // .CMsgHeaderOnly instance_def_type_header_only = 13;
    case kInstanceDefTypeHeaderOnly: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *instance_.instance_def_type_header_only_);
      break;
    }
    case INSTANCE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgProtoDefID::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgProtoDefID)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgProtoDefID* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgProtoDefID>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgProtoDefID)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgProtoDefID)
    MergeFrom(*source);
  }
}

void CMsgProtoDefID::MergeFrom(const CMsgProtoDefID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgProtoDefID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      defindex_ = from.defindex_;
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.instance_case()) {
    case kInstanceDefTypeQuestMapNode: {
      _internal_mutable_instance_def_type_quest_map_node()->::CMsgQuestMapNodeDef::MergeFrom(from._internal_instance_def_type_quest_map_node());
      break;
    }
    case kInstanceDefTypeQuestTheme: {
      _internal_mutable_instance_def_type_quest_theme()->::CMsgQuestTheme::MergeFrom(from._internal_instance_def_type_quest_theme());
      break;
    }
    case kInstanceDefTypeQuestMapRegion: {
      _internal_mutable_instance_def_type_quest_map_region()->::CMsgQuestMapRegionDef::MergeFrom(from._internal_instance_def_type_quest_map_region());
      break;
    }
    case kInstanceDefTypeQuest: {
      _internal_mutable_instance_def_type_quest()->::CMsgQuestDef::MergeFrom(from._internal_instance_def_type_quest());
      break;
    }
    case kInstanceDefTypeQuestObjective: {
      _internal_mutable_instance_def_type_quest_objective()->::CMsgQuestObjectiveDef::MergeFrom(from._internal_instance_def_type_quest_objective());
      break;
    }
    case kInstanceDefTypePaintkitVariables: {
      _internal_mutable_instance_def_type_paintkit_variables()->::CMsgPaintKit_Variables::MergeFrom(from._internal_instance_def_type_paintkit_variables());
      break;
    }
    case kInstanceDefTypePaintkitOperation: {
      _internal_mutable_instance_def_type_paintkit_operation()->::CMsgPaintKit_Operation::MergeFrom(from._internal_instance_def_type_paintkit_operation());
      break;
    }
    case kInstanceDefTypePaintkitItemDefinition: {
      _internal_mutable_instance_def_type_paintkit_item_definition()->::CMsgPaintKit_ItemDefinition::MergeFrom(from._internal_instance_def_type_paintkit_item_definition());
      break;
    }
    case kInstanceDefTypePaintkitDefinition: {
      _internal_mutable_instance_def_type_paintkit_definition()->::CMsgPaintKit_Definition::MergeFrom(from._internal_instance_def_type_paintkit_definition());
      break;
    }
    case kInstanceDefTypeHeaderOnly: {
      _internal_mutable_instance_def_type_header_only()->::CMsgHeaderOnly::MergeFrom(from._internal_instance_def_type_header_only());
      break;
    }
    case INSTANCE_NOT_SET: {
      break;
    }
  }
}

void CMsgProtoDefID::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgProtoDefID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgProtoDefID::CopyFrom(const CMsgProtoDefID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgProtoDefID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgProtoDefID::IsInitialized() const {
  switch (instance_case()) {
    case kInstanceDefTypeQuestMapNode: {
      if (has_instance_def_type_quest_map_node()) {
        if (!this->instance_def_type_quest_map_node().IsInitialized()) return false;
      }
      break;
    }
    case kInstanceDefTypeQuestTheme: {
      if (has_instance_def_type_quest_theme()) {
        if (!this->instance_def_type_quest_theme().IsInitialized()) return false;
      }
      break;
    }
    case kInstanceDefTypeQuestMapRegion: {
      if (has_instance_def_type_quest_map_region()) {
        if (!this->instance_def_type_quest_map_region().IsInitialized()) return false;
      }
      break;
    }
    case kInstanceDefTypeQuest: {
      if (has_instance_def_type_quest()) {
        if (!this->instance_def_type_quest().IsInitialized()) return false;
      }
      break;
    }
    case kInstanceDefTypeQuestObjective: {
      if (has_instance_def_type_quest_objective()) {
        if (!this->instance_def_type_quest_objective().IsInitialized()) return false;
      }
      break;
    }
    case kInstanceDefTypePaintkitVariables: {
      if (has_instance_def_type_paintkit_variables()) {
        if (!this->instance_def_type_paintkit_variables().IsInitialized()) return false;
      }
      break;
    }
    case kInstanceDefTypePaintkitOperation: {
      if (has_instance_def_type_paintkit_operation()) {
        if (!this->instance_def_type_paintkit_operation().IsInitialized()) return false;
      }
      break;
    }
    case kInstanceDefTypePaintkitItemDefinition: {
      if (has_instance_def_type_paintkit_item_definition()) {
        if (!this->instance_def_type_paintkit_item_definition().IsInitialized()) return false;
      }
      break;
    }
    case kInstanceDefTypePaintkitDefinition: {
      if (has_instance_def_type_paintkit_definition()) {
        if (!this->instance_def_type_paintkit_definition().IsInitialized()) return false;
      }
      break;
    }
    case kInstanceDefTypeHeaderOnly: {
      if (has_instance_def_type_header_only()) {
        if (!this->instance_def_type_header_only().IsInitialized()) return false;
      }
      break;
    }
    case INSTANCE_NOT_SET: {
      break;
    }
  }
  return true;
}

void CMsgProtoDefID::InternalSwap(CMsgProtoDefID* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgProtoDefID, type_)
      + sizeof(CMsgProtoDefID::type_)
      - PROTOBUF_FIELD_OFFSET(CMsgProtoDefID, defindex_)>(
          reinterpret_cast<char*>(&defindex_),
          reinterpret_cast<char*>(&other->defindex_));
  swap(instance_, other->instance_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgProtoDefID::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fproto_5fdef_5fmessages_2eproto_getter, &descriptor_table_tf_5fproto_5fdef_5fmessages_2eproto_once,
      file_level_metadata_tf_5fproto_5fdef_5fmessages_2eproto[6]);
}

// ===================================================================

class CMsgQuestObjectiveDef::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgQuestObjectiveDef>()._has_bits_);
  static const ::CMsgProtoDefHeader& header(const CMsgQuestObjectiveDef* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_loc_desctoken(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_points(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_conditions_defindex(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_team(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_condition_logic(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_item_logic(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_jump_state(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::CMsgProtoDefHeader&
CMsgQuestObjectiveDef::_Internal::header(const CMsgQuestObjectiveDef* msg) {
  return *msg->header_;
}
CMsgQuestObjectiveDef::CMsgQuestObjectiveDef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  map_(arena),
  game_mode_(arena),
  condition_vars_(arena),
  classes_vars_(arena),
  conditions_(arena),
  item_name_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgQuestObjectiveDef)
}
CMsgQuestObjectiveDef::CMsgQuestObjectiveDef(const CMsgQuestObjectiveDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      map_(from.map_),
      game_mode_(from.game_mode_),
      condition_vars_(from.condition_vars_),
      classes_vars_(from.classes_vars_),
      conditions_(from.conditions_),
      item_name_(from.item_name_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  loc_desctoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_loc_desctoken()) {
    loc_desctoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_loc_desctoken(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_header()) {
    header_ = new ::CMsgProtoDefHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  ::memcpy(&points_, &from.points_,
    static_cast<size_t>(reinterpret_cast<char*>(&team_) -
    reinterpret_cast<char*>(&points_)) + sizeof(team_));
  // @@protoc_insertion_point(copy_constructor:CMsgQuestObjectiveDef)
}

void CMsgQuestObjectiveDef::SharedCtor() {
loc_desctoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&jump_state_) -
    reinterpret_cast<char*>(&header_)) + sizeof(jump_state_));
team_ = 2;
}

CMsgQuestObjectiveDef::~CMsgQuestObjectiveDef() {
  // @@protoc_insertion_point(destructor:CMsgQuestObjectiveDef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgQuestObjectiveDef::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  loc_desctoken_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void CMsgQuestObjectiveDef::ArenaDtor(void* object) {
  CMsgQuestObjectiveDef* _this = reinterpret_cast< CMsgQuestObjectiveDef* >(object);
  (void)_this;
}
void CMsgQuestObjectiveDef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgQuestObjectiveDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgQuestObjectiveDef::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgQuestObjectiveDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map_.Clear();
  game_mode_.Clear();
  condition_vars_.Clear();
  classes_vars_.Clear();
  conditions_.Clear();
  item_name_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      loc_desctoken_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(header_ != nullptr);
      header_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&points_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&jump_state_) -
        reinterpret_cast<char*>(&points_)) + sizeof(jump_state_));
    team_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgQuestObjectiveDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .CMsgProtoDefHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string loc_desctoken = 2 [(.localized) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_loc_desctoken();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgQuestObjectiveDef.loc_desctoken");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 points = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_points(&has_bits);
          points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 conditions_defindex = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_conditions_defindex(&has_bits);
          conditions_defindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string map = 8 [(.display_name) = "Maps Modifier", (.comment) = "If set, the player must be on one of the listed maps to get credit."];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_map();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgQuestObjectiveDef.map");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CMsgQuestObjectiveDef.ETF2GameModes game_mode = 9 [(.display_name) = "Game Mode Modifier", (.comment) = "If set, the player must be in one of the listed game modes to get credit."];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::CMsgQuestObjectiveDef_ETF2GameModes_IsValid(val))) {
              _internal_add_game_mode(static_cast<::CMsgQuestObjectiveDef_ETF2GameModes>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<72>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_game_mode(), ptr, ctx, ::CMsgQuestObjectiveDef_ETF2GameModes_IsValid, &_internal_metadata_, 9);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgQuestObjectiveDef.ETF2Team team = 10 [default = TF_TEAM_RED, (.display_name) = "Team Modifier", (.comment) = "If set, the player must be on the specified team to get credit."];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgQuestObjectiveDef_ETF2Team_IsValid(val))) {
            _internal_set_team(static_cast<::CMsgQuestObjectiveDef_ETF2Team>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .CMsgVarField condition_vars = 11 [(.display_name) = "Objective Vars", (.var_field_type) = VAR_TYPE_STRING];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_condition_vars(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CMsgVarField classes_vars = 12 [(.display_name) = "Class Modifier", (.var_field_type) = VAR_TYPE_STRING];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_classes_vars(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CMsgQuestObjectiveDef.ETF2Conditions conditions = 13 [(.display_name) = "Required Conds"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::CMsgQuestObjectiveDef_ETF2Conditions_IsValid(val))) {
              _internal_add_conditions(static_cast<::CMsgQuestObjectiveDef_ETF2Conditions>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(13, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<104>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_conditions(), ptr, ctx, ::CMsgQuestObjectiveDef_ETF2Conditions_IsValid, &_internal_metadata_, 13);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .LogicalOperation condition_logic = 14 [default = AND, (.display_name) = "Condition Logic", (.comment) = "What kind of logic to use when evaluating the player\'s conditions."];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::LogicalOperation_IsValid(val))) {
            _internal_set_condition_logic(static_cast<::LogicalOperation>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(14, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated string item_name = 15 [(.display_name) = "Required equipped item", (.comment) = "Require that this item be equipped in any slot."];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_item_name();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgQuestObjectiveDef.item_name");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .LogicalOperation item_logic = 16 [default = AND, (.display_name) = "Item logic", (.comment) = "What kind of logic to use when evaluating the player\'s items."];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::LogicalOperation_IsValid(val))) {
            _internal_set_item_logic(static_cast<::LogicalOperation>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(16, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 jump_state = 17 [(.display_name) = "Jump logic", (.comment) = "What state of jumping the player needs to be in."];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_jump_state(&has_bits);
          jump_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgQuestObjectiveDef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgQuestObjectiveDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .CMsgProtoDefHeader header = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // optional string loc_desctoken = 2 [(.localized) = true];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_loc_desctoken().data(), static_cast<int>(this->_internal_loc_desctoken().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgQuestObjectiveDef.loc_desctoken");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_loc_desctoken(), target);
  }

  // optional uint32 points = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_points(), target);
  }

  // optional uint32 conditions_defindex = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_conditions_defindex(), target);
  }

  // repeated string map = 8 [(.display_name) = "Maps Modifier", (.comment) = "If set, the player must be on one of the listed maps to get credit."];
  for (int i = 0, n = this->_internal_map_size(); i < n; i++) {
    const auto& s = this->_internal_map(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgQuestObjectiveDef.map");
    target = stream->WriteString(8, s, target);
  }

  // repeated .CMsgQuestObjectiveDef.ETF2GameModes game_mode = 9 [(.display_name) = "Game Mode Modifier", (.comment) = "If set, the player must be in one of the listed game modes to get credit."];
  for (int i = 0, n = this->_internal_game_mode_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        9, this->_internal_game_mode(i), target);
  }

  // optional .CMsgQuestObjectiveDef.ETF2Team team = 10 [default = TF_TEAM_RED, (.display_name) = "Team Modifier", (.comment) = "If set, the player must be on the specified team to get credit."];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_team(), target);
  }

  // repeated .CMsgVarField condition_vars = 11 [(.display_name) = "Objective Vars", (.var_field_type) = VAR_TYPE_STRING];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_condition_vars_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_condition_vars(i), target, stream);
  }

  // repeated .CMsgVarField classes_vars = 12 [(.display_name) = "Class Modifier", (.var_field_type) = VAR_TYPE_STRING];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_classes_vars_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_classes_vars(i), target, stream);
  }

  // repeated .CMsgQuestObjectiveDef.ETF2Conditions conditions = 13 [(.display_name) = "Required Conds"];
  for (int i = 0, n = this->_internal_conditions_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        13, this->_internal_conditions(i), target);
  }

  // optional .LogicalOperation condition_logic = 14 [default = AND, (.display_name) = "Condition Logic", (.comment) = "What kind of logic to use when evaluating the player\'s conditions."];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      14, this->_internal_condition_logic(), target);
  }

  // repeated string item_name = 15 [(.display_name) = "Required equipped item", (.comment) = "Require that this item be equipped in any slot."];
  for (int i = 0, n = this->_internal_item_name_size(); i < n; i++) {
    const auto& s = this->_internal_item_name(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgQuestObjectiveDef.item_name");
    target = stream->WriteString(15, s, target);
  }

  // optional .LogicalOperation item_logic = 16 [default = AND, (.display_name) = "Item logic", (.comment) = "What kind of logic to use when evaluating the player\'s items."];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      16, this->_internal_item_logic(), target);
  }

  // optional uint32 jump_state = 17 [(.display_name) = "Jump logic", (.comment) = "What state of jumping the player needs to be in."];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_jump_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgQuestObjectiveDef)
  return target;
}

size_t CMsgQuestObjectiveDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgQuestObjectiveDef)
  size_t total_size = 0;

  // required .CMsgProtoDefHeader header = 1;
  if (_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string map = 8 [(.display_name) = "Maps Modifier", (.comment) = "If set, the player must be on one of the listed maps to get credit."];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(map_.size());
  for (int i = 0, n = map_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      map_.Get(i));
  }

  // repeated .CMsgQuestObjectiveDef.ETF2GameModes game_mode = 9 [(.display_name) = "Game Mode Modifier", (.comment) = "If set, the player must be in one of the listed game modes to get credit."];
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_game_mode_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_game_mode(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // repeated .CMsgVarField condition_vars = 11 [(.display_name) = "Objective Vars", (.var_field_type) = VAR_TYPE_STRING];
  total_size += 1UL * this->_internal_condition_vars_size();
  for (const auto& msg : this->condition_vars_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgVarField classes_vars = 12 [(.display_name) = "Class Modifier", (.var_field_type) = VAR_TYPE_STRING];
  total_size += 1UL * this->_internal_classes_vars_size();
  for (const auto& msg : this->classes_vars_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgQuestObjectiveDef.ETF2Conditions conditions = 13 [(.display_name) = "Required Conds"];
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_conditions_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_conditions(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // repeated string item_name = 15 [(.display_name) = "Required equipped item", (.comment) = "Require that this item be equipped in any slot."];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(item_name_.size());
  for (int i = 0, n = item_name_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      item_name_.Get(i));
  }

  // optional string loc_desctoken = 2 [(.localized) = true];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_loc_desctoken());
  }

  if (cached_has_bits & 0x000000fcu) {
    // optional uint32 points = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_points());
    }

    // optional uint32 conditions_defindex = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_conditions_defindex());
    }

    // optional .LogicalOperation condition_logic = 14 [default = AND, (.display_name) = "Condition Logic", (.comment) = "What kind of logic to use when evaluating the player\'s conditions."];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_condition_logic());
    }

    // optional .LogicalOperation item_logic = 16 [default = AND, (.display_name) = "Item logic", (.comment) = "What kind of logic to use when evaluating the player\'s items."];
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_item_logic());
    }

    // optional uint32 jump_state = 17 [(.display_name) = "Jump logic", (.comment) = "What state of jumping the player needs to be in."];
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_jump_state());
    }

    // optional .CMsgQuestObjectiveDef.ETF2Team team = 10 [default = TF_TEAM_RED, (.display_name) = "Team Modifier", (.comment) = "If set, the player must be on the specified team to get credit."];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_team());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgQuestObjectiveDef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgQuestObjectiveDef)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgQuestObjectiveDef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgQuestObjectiveDef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgQuestObjectiveDef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgQuestObjectiveDef)
    MergeFrom(*source);
  }
}

void CMsgQuestObjectiveDef::MergeFrom(const CMsgQuestObjectiveDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgQuestObjectiveDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  map_.MergeFrom(from.map_);
  game_mode_.MergeFrom(from.game_mode_);
  condition_vars_.MergeFrom(from.condition_vars_);
  classes_vars_.MergeFrom(from.classes_vars_);
  conditions_.MergeFrom(from.conditions_);
  item_name_.MergeFrom(from.item_name_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_loc_desctoken(from._internal_loc_desctoken());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_header()->::CMsgProtoDefHeader::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000004u) {
      points_ = from.points_;
    }
    if (cached_has_bits & 0x00000008u) {
      conditions_defindex_ = from.conditions_defindex_;
    }
    if (cached_has_bits & 0x00000010u) {
      condition_logic_ = from.condition_logic_;
    }
    if (cached_has_bits & 0x00000020u) {
      item_logic_ = from.item_logic_;
    }
    if (cached_has_bits & 0x00000040u) {
      jump_state_ = from.jump_state_;
    }
    if (cached_has_bits & 0x00000080u) {
      team_ = from.team_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgQuestObjectiveDef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgQuestObjectiveDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgQuestObjectiveDef::CopyFrom(const CMsgQuestObjectiveDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgQuestObjectiveDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgQuestObjectiveDef::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_header()) {
    if (!header_->IsInitialized()) return false;
  }
  return true;
}

void CMsgQuestObjectiveDef::InternalSwap(CMsgQuestObjectiveDef* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  map_.InternalSwap(&other->map_);
  game_mode_.InternalSwap(&other->game_mode_);
  condition_vars_.InternalSwap(&other->condition_vars_);
  classes_vars_.InternalSwap(&other->classes_vars_);
  conditions_.InternalSwap(&other->conditions_);
  item_name_.InternalSwap(&other->item_name_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &loc_desctoken_, GetArenaForAllocation(),
      &other->loc_desctoken_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgQuestObjectiveDef, jump_state_)
      + sizeof(CMsgQuestObjectiveDef::jump_state_)
      - PROTOBUF_FIELD_OFFSET(CMsgQuestObjectiveDef, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
  swap(team_, other->team_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgQuestObjectiveDef::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fproto_5fdef_5fmessages_2eproto_getter, &descriptor_table_tf_5fproto_5fdef_5fmessages_2eproto_once,
      file_level_metadata_tf_5fproto_5fdef_5fmessages_2eproto[7]);
}

// ===================================================================

class CMsgQuestDef_MMCriteria::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgQuestDef_MMCriteria>()._has_bits_);
  static void set_has_group_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_category_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_map_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgQuestDef_MMCriteria::CMsgQuestDef_MMCriteria(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgQuestDef.MMCriteria)
}
CMsgQuestDef_MMCriteria::CMsgQuestDef_MMCriteria(const CMsgQuestDef_MMCriteria& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  group_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_group_name()) {
    group_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_group_name(), 
      GetArenaForAllocation());
  }
  category_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_category_name()) {
    category_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_category_name(), 
      GetArenaForAllocation());
  }
  map_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_map_name()) {
    map_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_map_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CMsgQuestDef.MMCriteria)
}

void CMsgQuestDef_MMCriteria::SharedCtor() {
group_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
category_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
map_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CMsgQuestDef_MMCriteria::~CMsgQuestDef_MMCriteria() {
  // @@protoc_insertion_point(destructor:CMsgQuestDef.MMCriteria)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgQuestDef_MMCriteria::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  group_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  category_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  map_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgQuestDef_MMCriteria::ArenaDtor(void* object) {
  CMsgQuestDef_MMCriteria* _this = reinterpret_cast< CMsgQuestDef_MMCriteria* >(object);
  (void)_this;
}
void CMsgQuestDef_MMCriteria::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgQuestDef_MMCriteria::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgQuestDef_MMCriteria::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgQuestDef.MMCriteria)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      group_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      category_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      map_name_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgQuestDef_MMCriteria::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string group_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_group_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgQuestDef.MMCriteria.group_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string category_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_category_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgQuestDef.MMCriteria.category_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string map_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_map_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgQuestDef.MMCriteria.map_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgQuestDef_MMCriteria::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgQuestDef.MMCriteria)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string group_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_group_name().data(), static_cast<int>(this->_internal_group_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgQuestDef.MMCriteria.group_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_group_name(), target);
  }

  // optional string category_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_category_name().data(), static_cast<int>(this->_internal_category_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgQuestDef.MMCriteria.category_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_category_name(), target);
  }

  // optional string map_name = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_map_name().data(), static_cast<int>(this->_internal_map_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgQuestDef.MMCriteria.map_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_map_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgQuestDef.MMCriteria)
  return target;
}

size_t CMsgQuestDef_MMCriteria::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgQuestDef.MMCriteria)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string group_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_group_name());
    }

    // optional string category_name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_category_name());
    }

    // optional string map_name = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_map_name());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgQuestDef_MMCriteria::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgQuestDef.MMCriteria)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgQuestDef_MMCriteria* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgQuestDef_MMCriteria>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgQuestDef.MMCriteria)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgQuestDef.MMCriteria)
    MergeFrom(*source);
  }
}

void CMsgQuestDef_MMCriteria::MergeFrom(const CMsgQuestDef_MMCriteria& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgQuestDef.MMCriteria)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_group_name(from._internal_group_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_category_name(from._internal_category_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_map_name(from._internal_map_name());
    }
  }
}

void CMsgQuestDef_MMCriteria::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgQuestDef.MMCriteria)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgQuestDef_MMCriteria::CopyFrom(const CMsgQuestDef_MMCriteria& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgQuestDef.MMCriteria)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgQuestDef_MMCriteria::IsInitialized() const {
  return true;
}

void CMsgQuestDef_MMCriteria::InternalSwap(CMsgQuestDef_MMCriteria* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &group_name_, GetArenaForAllocation(),
      &other->group_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &category_name_, GetArenaForAllocation(),
      &other->category_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &map_name_, GetArenaForAllocation(),
      &other->map_name_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgQuestDef_MMCriteria::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fproto_5fdef_5fmessages_2eproto_getter, &descriptor_table_tf_5fproto_5fdef_5fmessages_2eproto_once,
      file_level_metadata_tf_5fproto_5fdef_5fmessages_2eproto[8]);
}

// ===================================================================

class CMsgQuestDef_ObjectiveInstance::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgQuestDef_ObjectiveInstance>()._has_bits_);
  static const ::CMsgProtoDefID& objective(const CMsgQuestDef_ObjectiveInstance* msg);
  static void set_has_objective(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_point_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_point_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::CMsgProtoDefID&
CMsgQuestDef_ObjectiveInstance::_Internal::objective(const CMsgQuestDef_ObjectiveInstance* msg) {
  return *msg->objective_;
}
CMsgQuestDef_ObjectiveInstance::CMsgQuestDef_ObjectiveInstance(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgQuestDef.ObjectiveInstance)
}
CMsgQuestDef_ObjectiveInstance::CMsgQuestDef_ObjectiveInstance(const CMsgQuestDef_ObjectiveInstance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_objective()) {
    objective_ = new ::CMsgProtoDefID(*from.objective_);
  } else {
    objective_ = nullptr;
  }
  ::memcpy(&point_type_, &from.point_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&point_value_) -
    reinterpret_cast<char*>(&point_type_)) + sizeof(point_value_));
  // @@protoc_insertion_point(copy_constructor:CMsgQuestDef.ObjectiveInstance)
}

void CMsgQuestDef_ObjectiveInstance::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&objective_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&point_value_) -
    reinterpret_cast<char*>(&objective_)) + sizeof(point_value_));
}

CMsgQuestDef_ObjectiveInstance::~CMsgQuestDef_ObjectiveInstance() {
  // @@protoc_insertion_point(destructor:CMsgQuestDef.ObjectiveInstance)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgQuestDef_ObjectiveInstance::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete objective_;
}

void CMsgQuestDef_ObjectiveInstance::ArenaDtor(void* object) {
  CMsgQuestDef_ObjectiveInstance* _this = reinterpret_cast< CMsgQuestDef_ObjectiveInstance* >(object);
  (void)_this;
}
void CMsgQuestDef_ObjectiveInstance::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgQuestDef_ObjectiveInstance::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgQuestDef_ObjectiveInstance::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgQuestDef.ObjectiveInstance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(objective_ != nullptr);
    objective_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&point_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&point_value_) -
        reinterpret_cast<char*>(&point_type_)) + sizeof(point_value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgQuestDef_ObjectiveInstance::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgProtoDefID objective = 1 [(.valid_type) = DEF_TYPE_QUEST_OBJECTIVE];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_objective(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .EQuestPoints point_type = 2 [default = QUEST_POINTS_NOVICE];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EQuestPoints_IsValid(val))) {
            _internal_set_point_type(static_cast<::EQuestPoints>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 point_value = 3 [(.display_name) = "Points Override", (.comment) = "Override value for the point value of the objective.  If not set, uses the objective\'s point value"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_point_value(&has_bits);
          point_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgQuestDef_ObjectiveInstance::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgQuestDef.ObjectiveInstance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgProtoDefID objective = 1 [(.valid_type) = DEF_TYPE_QUEST_OBJECTIVE];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::objective(this), target, stream);
  }

  // optional .EQuestPoints point_type = 2 [default = QUEST_POINTS_NOVICE];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_point_type(), target);
  }

  // optional uint32 point_value = 3 [(.display_name) = "Points Override", (.comment) = "Override value for the point value of the objective.  If not set, uses the objective\'s point value"];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_point_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgQuestDef.ObjectiveInstance)
  return target;
}

size_t CMsgQuestDef_ObjectiveInstance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgQuestDef.ObjectiveInstance)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .CMsgProtoDefID objective = 1 [(.valid_type) = DEF_TYPE_QUEST_OBJECTIVE];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *objective_);
    }

    // optional .EQuestPoints point_type = 2 [default = QUEST_POINTS_NOVICE];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_point_type());
    }

    // optional uint32 point_value = 3 [(.display_name) = "Points Override", (.comment) = "Override value for the point value of the objective.  If not set, uses the objective\'s point value"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_point_value());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgQuestDef_ObjectiveInstance::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgQuestDef.ObjectiveInstance)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgQuestDef_ObjectiveInstance* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgQuestDef_ObjectiveInstance>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgQuestDef.ObjectiveInstance)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgQuestDef.ObjectiveInstance)
    MergeFrom(*source);
  }
}

void CMsgQuestDef_ObjectiveInstance::MergeFrom(const CMsgQuestDef_ObjectiveInstance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgQuestDef.ObjectiveInstance)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_objective()->::CMsgProtoDefID::MergeFrom(from._internal_objective());
    }
    if (cached_has_bits & 0x00000002u) {
      point_type_ = from.point_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      point_value_ = from.point_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgQuestDef_ObjectiveInstance::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgQuestDef.ObjectiveInstance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgQuestDef_ObjectiveInstance::CopyFrom(const CMsgQuestDef_ObjectiveInstance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgQuestDef.ObjectiveInstance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgQuestDef_ObjectiveInstance::IsInitialized() const {
  if (_internal_has_objective()) {
    if (!objective_->IsInitialized()) return false;
  }
  return true;
}

void CMsgQuestDef_ObjectiveInstance::InternalSwap(CMsgQuestDef_ObjectiveInstance* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgQuestDef_ObjectiveInstance, point_value_)
      + sizeof(CMsgQuestDef_ObjectiveInstance::point_value_)
      - PROTOBUF_FIELD_OFFSET(CMsgQuestDef_ObjectiveInstance, objective_)>(
          reinterpret_cast<char*>(&objective_),
          reinterpret_cast<char*>(&other->objective_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgQuestDef_ObjectiveInstance::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fproto_5fdef_5fmessages_2eproto_getter, &descriptor_table_tf_5fproto_5fdef_5fmessages_2eproto_once,
      file_level_metadata_tf_5fproto_5fdef_5fmessages_2eproto[9]);
}

// ===================================================================

class CMsgQuestDef::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgQuestDef>()._has_bits_);
  static const ::CMsgProtoDefHeader& header(const CMsgQuestDef* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_max_points_0(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_max_points_1(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_max_points_2(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_name_loctoken(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_operation(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgQuestDef_MMCriteria& mm_criteria(const CMsgQuestDef* msg);
  static void set_has_mm_criteria(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_node_image(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_icon_image(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::CMsgProtoDefID& theme(const CMsgQuestDef* msg);
  static void set_has_theme(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000010) ^ 0x00000010) != 0;
  }
};

const ::CMsgProtoDefHeader&
CMsgQuestDef::_Internal::header(const CMsgQuestDef* msg) {
  return *msg->header_;
}
const ::CMsgQuestDef_MMCriteria&
CMsgQuestDef::_Internal::mm_criteria(const CMsgQuestDef* msg) {
  return *msg->mm_criteria_;
}
const ::CMsgProtoDefID&
CMsgQuestDef::_Internal::theme(const CMsgQuestDef* msg) {
  return *msg->theme_;
}
CMsgQuestDef::CMsgQuestDef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  loaner_names_(arena),
  objectives_(arena),
  map_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgQuestDef)
}
CMsgQuestDef::CMsgQuestDef(const CMsgQuestDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      loaner_names_(from.loaner_names_),
      objectives_(from.objectives_),
      map_(from.map_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_loctoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name_loctoken()) {
    name_loctoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name_loctoken(), 
      GetArenaForAllocation());
  }
  operation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_operation()) {
    operation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_operation(), 
      GetArenaForAllocation());
  }
  node_image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_node_image()) {
    node_image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_node_image(), 
      GetArenaForAllocation());
  }
  icon_image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_icon_image()) {
    icon_image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_icon_image(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_header()) {
    header_ = new ::CMsgProtoDefHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_mm_criteria()) {
    mm_criteria_ = new ::CMsgQuestDef_MMCriteria(*from.mm_criteria_);
  } else {
    mm_criteria_ = nullptr;
  }
  if (from._internal_has_theme()) {
    theme_ = new ::CMsgProtoDefID(*from.theme_);
  } else {
    theme_ = nullptr;
  }
  ::memcpy(&max_points_0_, &from.max_points_0_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_points_2_) -
    reinterpret_cast<char*>(&max_points_0_)) + sizeof(max_points_2_));
  // @@protoc_insertion_point(copy_constructor:CMsgQuestDef)
}

void CMsgQuestDef::SharedCtor() {
name_loctoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
operation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
node_image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
icon_image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&max_points_2_) -
    reinterpret_cast<char*>(&header_)) + sizeof(max_points_2_));
}

CMsgQuestDef::~CMsgQuestDef() {
  // @@protoc_insertion_point(destructor:CMsgQuestDef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgQuestDef::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_loctoken_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  operation_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  node_image_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  icon_image_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete mm_criteria_;
  if (this != internal_default_instance()) delete theme_;
}

void CMsgQuestDef::ArenaDtor(void* object) {
  CMsgQuestDef* _this = reinterpret_cast< CMsgQuestDef* >(object);
  (void)_this;
}
void CMsgQuestDef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgQuestDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgQuestDef::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgQuestDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  loaner_names_.Clear();
  objectives_.Clear();
  map_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      name_loctoken_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      operation_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      node_image_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      icon_image_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(header_ != nullptr);
      header_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(mm_criteria_ != nullptr);
      mm_criteria_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(theme_ != nullptr);
      theme_->Clear();
    }
  }
  max_points_0_ = 0u;
  if (cached_has_bits & 0x00000300u) {
    ::memset(&max_points_1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_points_2_) -
        reinterpret_cast<char*>(&max_points_1_)) + sizeof(max_points_2_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgQuestDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .CMsgProtoDefHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_points_0 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_max_points_0(&has_bits);
          max_points_0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_points_1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_max_points_1(&has_bits);
          max_points_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_points_2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_max_points_2(&has_bits);
          max_points_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name_loctoken = 5 [(.localized) = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_name_loctoken();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgQuestDef.name_loctoken");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string operation = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_operation();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgQuestDef.operation");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgQuestDef.MMCriteria mm_criteria = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_mm_criteria(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string node_image = 12 [(.display_name) = "Node Image", (.comment) = "Filename of the image to show on the node view"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_node_image();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgQuestDef.node_image");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string icon_image = 13 [(.display_name) = "Node Icon", (.comment) = "Which icon to show on the map"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_icon_image();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgQuestDef.icon_image");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgProtoDefID theme = 14 [(.valid_type) = DEF_TYPE_QUEST_THEME];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_theme(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string loaner_names = 15 [(.display_name) = "Loaners", (.comment) = "Names of items to give as loaners"];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_loaner_names();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgQuestDef.loaner_names");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CMsgQuestDef.ObjectiveInstance objectives = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_objectives(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string map = 17 [(.display_name) = "Maps Modifier", (.comment) = "If set, the player must be on one of the listed maps to get credit."];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_map();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgQuestDef.map");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgQuestDef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgQuestDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .CMsgProtoDefHeader header = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // optional uint32 max_points_0 = 2;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_max_points_0(), target);
  }

  // optional uint32 max_points_1 = 3;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_max_points_1(), target);
  }

  // optional uint32 max_points_2 = 4;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_max_points_2(), target);
  }

  // optional string name_loctoken = 5 [(.localized) = true];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name_loctoken().data(), static_cast<int>(this->_internal_name_loctoken().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgQuestDef.name_loctoken");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_name_loctoken(), target);
  }

  // optional string operation = 7;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_operation().data(), static_cast<int>(this->_internal_operation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgQuestDef.operation");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_operation(), target);
  }

  // optional .CMsgQuestDef.MMCriteria mm_criteria = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::mm_criteria(this), target, stream);
  }

  // optional string node_image = 12 [(.display_name) = "Node Image", (.comment) = "Filename of the image to show on the node view"];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_node_image().data(), static_cast<int>(this->_internal_node_image().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgQuestDef.node_image");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_node_image(), target);
  }

  // optional string icon_image = 13 [(.display_name) = "Node Icon", (.comment) = "Which icon to show on the map"];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_icon_image().data(), static_cast<int>(this->_internal_icon_image().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgQuestDef.icon_image");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_icon_image(), target);
  }

  // optional .CMsgProtoDefID theme = 14 [(.valid_type) = DEF_TYPE_QUEST_THEME];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::theme(this), target, stream);
  }

  // repeated string loaner_names = 15 [(.display_name) = "Loaners", (.comment) = "Names of items to give as loaners"];
  for (int i = 0, n = this->_internal_loaner_names_size(); i < n; i++) {
    const auto& s = this->_internal_loaner_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgQuestDef.loaner_names");
    target = stream->WriteString(15, s, target);
  }

  // repeated .CMsgQuestDef.ObjectiveInstance objectives = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_objectives_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, this->_internal_objectives(i), target, stream);
  }

  // repeated string map = 17 [(.display_name) = "Maps Modifier", (.comment) = "If set, the player must be on one of the listed maps to get credit."];
  for (int i = 0, n = this->_internal_map_size(); i < n; i++) {
    const auto& s = this->_internal_map(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgQuestDef.map");
    target = stream->WriteString(17, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgQuestDef)
  return target;
}

size_t CMsgQuestDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgQuestDef)
  size_t total_size = 0;

  // required .CMsgProtoDefHeader header = 1;
  if (_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string loaner_names = 15 [(.display_name) = "Loaners", (.comment) = "Names of items to give as loaners"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(loaner_names_.size());
  for (int i = 0, n = loaner_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      loaner_names_.Get(i));
  }

  // repeated .CMsgQuestDef.ObjectiveInstance objectives = 16;
  total_size += 2UL * this->_internal_objectives_size();
  for (const auto& msg : this->objectives_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string map = 17 [(.display_name) = "Maps Modifier", (.comment) = "If set, the player must be on one of the listed maps to get credit."];
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(map_.size());
  for (int i = 0, n = map_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      map_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string name_loctoken = 5 [(.localized) = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name_loctoken());
    }

    // optional string operation = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_operation());
    }

    // optional string node_image = 12 [(.display_name) = "Node Image", (.comment) = "Filename of the image to show on the node view"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_node_image());
    }

    // optional string icon_image = 13 [(.display_name) = "Node Icon", (.comment) = "Which icon to show on the map"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_icon_image());
    }

  }
  if (cached_has_bits & 0x000000e0u) {
    // optional .CMsgQuestDef.MMCriteria mm_criteria = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mm_criteria_);
    }

    // optional .CMsgProtoDefID theme = 14 [(.valid_type) = DEF_TYPE_QUEST_THEME];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *theme_);
    }

    // optional uint32 max_points_0 = 2;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_points_0());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional uint32 max_points_1 = 3;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_points_1());
    }

    // optional uint32 max_points_2 = 4;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_points_2());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgQuestDef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgQuestDef)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgQuestDef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgQuestDef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgQuestDef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgQuestDef)
    MergeFrom(*source);
  }
}

void CMsgQuestDef::MergeFrom(const CMsgQuestDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgQuestDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  loaner_names_.MergeFrom(from.loaner_names_);
  objectives_.MergeFrom(from.objectives_);
  map_.MergeFrom(from.map_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name_loctoken(from._internal_name_loctoken());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_operation(from._internal_operation());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_node_image(from._internal_node_image());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_icon_image(from._internal_icon_image());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_header()->::CMsgProtoDefHeader::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_mm_criteria()->::CMsgQuestDef_MMCriteria::MergeFrom(from._internal_mm_criteria());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_theme()->::CMsgProtoDefID::MergeFrom(from._internal_theme());
    }
    if (cached_has_bits & 0x00000080u) {
      max_points_0_ = from.max_points_0_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      max_points_1_ = from.max_points_1_;
    }
    if (cached_has_bits & 0x00000200u) {
      max_points_2_ = from.max_points_2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgQuestDef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgQuestDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgQuestDef::CopyFrom(const CMsgQuestDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgQuestDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgQuestDef::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(objectives_)) return false;
  if (_internal_has_header()) {
    if (!header_->IsInitialized()) return false;
  }
  if (_internal_has_theme()) {
    if (!theme_->IsInitialized()) return false;
  }
  return true;
}

void CMsgQuestDef::InternalSwap(CMsgQuestDef* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  loaner_names_.InternalSwap(&other->loaner_names_);
  objectives_.InternalSwap(&other->objectives_);
  map_.InternalSwap(&other->map_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_loctoken_, GetArenaForAllocation(),
      &other->name_loctoken_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &operation_, GetArenaForAllocation(),
      &other->operation_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &node_image_, GetArenaForAllocation(),
      &other->node_image_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &icon_image_, GetArenaForAllocation(),
      &other->icon_image_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgQuestDef, max_points_2_)
      + sizeof(CMsgQuestDef::max_points_2_)
      - PROTOBUF_FIELD_OFFSET(CMsgQuestDef, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgQuestDef::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fproto_5fdef_5fmessages_2eproto_getter, &descriptor_table_tf_5fproto_5fdef_5fmessages_2eproto_once,
      file_level_metadata_tf_5fproto_5fdef_5fmessages_2eproto[10]);
}

// ===================================================================

class CMsgQuestMapStoreItem::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgQuestMapStoreItem>()._has_bits_);
  static const ::CMsgProtoDefHeader& header(const CMsgQuestMapStoreItem* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_item_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_reward_lootlist_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgVarField& price(const CMsgQuestMapStoreItem* msg);
  static void set_has_price(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_purchase_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_sort_group(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000004) ^ 0x00000004) != 0;
  }
};

const ::CMsgProtoDefHeader&
CMsgQuestMapStoreItem::_Internal::header(const CMsgQuestMapStoreItem* msg) {
  return *msg->header_;
}
const ::CMsgVarField&
CMsgQuestMapStoreItem::_Internal::price(const CMsgQuestMapStoreItem* msg) {
  return *msg->price_;
}
CMsgQuestMapStoreItem::CMsgQuestMapStoreItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgQuestMapStoreItem)
}
CMsgQuestMapStoreItem::CMsgQuestMapStoreItem(const CMsgQuestMapStoreItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  item_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_item_name()) {
    item_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_item_name(), 
      GetArenaForAllocation());
  }
  reward_lootlist_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_reward_lootlist_name()) {
    reward_lootlist_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reward_lootlist_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_header()) {
    header_ = new ::CMsgProtoDefHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_price()) {
    price_ = new ::CMsgVarField(*from.price_);
  } else {
    price_ = nullptr;
  }
  ::memcpy(&purchase_limit_, &from.purchase_limit_,
    static_cast<size_t>(reinterpret_cast<char*>(&sort_group_) -
    reinterpret_cast<char*>(&purchase_limit_)) + sizeof(sort_group_));
  // @@protoc_insertion_point(copy_constructor:CMsgQuestMapStoreItem)
}

void CMsgQuestMapStoreItem::SharedCtor() {
item_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
reward_lootlist_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sort_group_) -
    reinterpret_cast<char*>(&header_)) + sizeof(sort_group_));
}

CMsgQuestMapStoreItem::~CMsgQuestMapStoreItem() {
  // @@protoc_insertion_point(destructor:CMsgQuestMapStoreItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgQuestMapStoreItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  item_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reward_lootlist_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete price_;
}

void CMsgQuestMapStoreItem::ArenaDtor(void* object) {
  CMsgQuestMapStoreItem* _this = reinterpret_cast< CMsgQuestMapStoreItem* >(object);
  (void)_this;
}
void CMsgQuestMapStoreItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgQuestMapStoreItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgQuestMapStoreItem::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgQuestMapStoreItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      item_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      reward_lootlist_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(header_ != nullptr);
      header_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(price_ != nullptr);
      price_->Clear();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    ::memset(&purchase_limit_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sort_group_) -
        reinterpret_cast<char*>(&purchase_limit_)) + sizeof(sort_group_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgQuestMapStoreItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .CMsgProtoDefHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string item_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_item_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgQuestMapStoreItem.item_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgVarField price = 3 [(.var_field_type) = VAR_TYPE_SINT32];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_price(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 purchase_limit = 4 [(.display_name) = "Purchase Limit", (.comment) = "How many times this reward can be purchased"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_purchase_limit(&has_bits);
          purchase_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 sort_group = 5 [(.display_name) = "Sort group", (.comment) = "Sort by this group, then alhpabetically"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_sort_group(&has_bits);
          sort_group_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string reward_lootlist_name = 6 [(.display_name) = "Reward Lootlist", (.comment) = "The name of the lootlist to roll as a reward"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_reward_lootlist_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgQuestMapStoreItem.reward_lootlist_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgQuestMapStoreItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgQuestMapStoreItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .CMsgProtoDefHeader header = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // optional string item_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_item_name().data(), static_cast<int>(this->_internal_item_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgQuestMapStoreItem.item_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_item_name(), target);
  }

  // optional .CMsgVarField price = 3 [(.var_field_type) = VAR_TYPE_SINT32];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::price(this), target, stream);
  }

  // optional uint32 purchase_limit = 4 [(.display_name) = "Purchase Limit", (.comment) = "How many times this reward can be purchased"];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_purchase_limit(), target);
  }

  // optional uint32 sort_group = 5 [(.display_name) = "Sort group", (.comment) = "Sort by this group, then alhpabetically"];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_sort_group(), target);
  }

  // optional string reward_lootlist_name = 6 [(.display_name) = "Reward Lootlist", (.comment) = "The name of the lootlist to roll as a reward"];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_reward_lootlist_name().data(), static_cast<int>(this->_internal_reward_lootlist_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgQuestMapStoreItem.reward_lootlist_name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_reward_lootlist_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgQuestMapStoreItem)
  return target;
}

size_t CMsgQuestMapStoreItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgQuestMapStoreItem)
  size_t total_size = 0;

  // required .CMsgProtoDefHeader header = 1;
  if (_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string item_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_item_name());
    }

    // optional string reward_lootlist_name = 6 [(.display_name) = "Reward Lootlist", (.comment) = "The name of the lootlist to roll as a reward"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_reward_lootlist_name());
    }

  }
  if (cached_has_bits & 0x00000038u) {
    // optional .CMsgVarField price = 3 [(.var_field_type) = VAR_TYPE_SINT32];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *price_);
    }

    // optional uint32 purchase_limit = 4 [(.display_name) = "Purchase Limit", (.comment) = "How many times this reward can be purchased"];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_purchase_limit());
    }

    // optional uint32 sort_group = 5 [(.display_name) = "Sort group", (.comment) = "Sort by this group, then alhpabetically"];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_sort_group());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgQuestMapStoreItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgQuestMapStoreItem)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgQuestMapStoreItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgQuestMapStoreItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgQuestMapStoreItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgQuestMapStoreItem)
    MergeFrom(*source);
  }
}

void CMsgQuestMapStoreItem::MergeFrom(const CMsgQuestMapStoreItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgQuestMapStoreItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_item_name(from._internal_item_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_reward_lootlist_name(from._internal_reward_lootlist_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_header()->::CMsgProtoDefHeader::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_price()->::CMsgVarField::MergeFrom(from._internal_price());
    }
    if (cached_has_bits & 0x00000010u) {
      purchase_limit_ = from.purchase_limit_;
    }
    if (cached_has_bits & 0x00000020u) {
      sort_group_ = from.sort_group_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgQuestMapStoreItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgQuestMapStoreItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgQuestMapStoreItem::CopyFrom(const CMsgQuestMapStoreItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgQuestMapStoreItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgQuestMapStoreItem::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_header()) {
    if (!header_->IsInitialized()) return false;
  }
  return true;
}

void CMsgQuestMapStoreItem::InternalSwap(CMsgQuestMapStoreItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &item_name_, GetArenaForAllocation(),
      &other->item_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &reward_lootlist_name_, GetArenaForAllocation(),
      &other->reward_lootlist_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgQuestMapStoreItem, sort_group_)
      + sizeof(CMsgQuestMapStoreItem::sort_group_)
      - PROTOBUF_FIELD_OFFSET(CMsgQuestMapStoreItem, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgQuestMapStoreItem::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fproto_5fdef_5fmessages_2eproto_getter, &descriptor_table_tf_5fproto_5fdef_5fmessages_2eproto_once,
      file_level_metadata_tf_5fproto_5fdef_5fmessages_2eproto[11]);
}

// ===================================================================

class CMsgQuestMapRegionDef_RegionLink::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgQuestMapRegionDef_RegionLink>()._has_bits_);
  static const ::CMsgProtoDefID& target_region_defid(const CMsgQuestMapRegionDef_RegionLink* msg);
  static void set_has_target_region_defid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_xpos(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ypos(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::CMsgProtoDefID&
CMsgQuestMapRegionDef_RegionLink::_Internal::target_region_defid(const CMsgQuestMapRegionDef_RegionLink* msg) {
  return *msg->target_region_defid_;
}
CMsgQuestMapRegionDef_RegionLink::CMsgQuestMapRegionDef_RegionLink(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgQuestMapRegionDef.RegionLink)
}
CMsgQuestMapRegionDef_RegionLink::CMsgQuestMapRegionDef_RegionLink(const CMsgQuestMapRegionDef_RegionLink& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_target_region_defid()) {
    target_region_defid_ = new ::CMsgProtoDefID(*from.target_region_defid_);
  } else {
    target_region_defid_ = nullptr;
  }
  ::memcpy(&xpos_, &from.xpos_,
    static_cast<size_t>(reinterpret_cast<char*>(&ypos_) -
    reinterpret_cast<char*>(&xpos_)) + sizeof(ypos_));
  // @@protoc_insertion_point(copy_constructor:CMsgQuestMapRegionDef.RegionLink)
}

void CMsgQuestMapRegionDef_RegionLink::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&target_region_defid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ypos_) -
    reinterpret_cast<char*>(&target_region_defid_)) + sizeof(ypos_));
}

CMsgQuestMapRegionDef_RegionLink::~CMsgQuestMapRegionDef_RegionLink() {
  // @@protoc_insertion_point(destructor:CMsgQuestMapRegionDef.RegionLink)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgQuestMapRegionDef_RegionLink::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete target_region_defid_;
}

void CMsgQuestMapRegionDef_RegionLink::ArenaDtor(void* object) {
  CMsgQuestMapRegionDef_RegionLink* _this = reinterpret_cast< CMsgQuestMapRegionDef_RegionLink* >(object);
  (void)_this;
}
void CMsgQuestMapRegionDef_RegionLink::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgQuestMapRegionDef_RegionLink::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgQuestMapRegionDef_RegionLink::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgQuestMapRegionDef.RegionLink)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(target_region_defid_ != nullptr);
    target_region_defid_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&xpos_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ypos_) -
        reinterpret_cast<char*>(&xpos_)) + sizeof(ypos_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgQuestMapRegionDef_RegionLink::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .CMsgProtoDefID target_region_defid = 1 [(.valid_type) = DEF_TYPE_QUEST_MAP_REGION];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_target_region_defid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 xpos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_xpos(&has_bits);
          xpos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ypos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_ypos(&has_bits);
          ypos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgQuestMapRegionDef_RegionLink::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgQuestMapRegionDef.RegionLink)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .CMsgProtoDefID target_region_defid = 1 [(.valid_type) = DEF_TYPE_QUEST_MAP_REGION];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::target_region_defid(this), target, stream);
  }

  // optional uint32 xpos = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_xpos(), target);
  }

  // optional uint32 ypos = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_ypos(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgQuestMapRegionDef.RegionLink)
  return target;
}

size_t CMsgQuestMapRegionDef_RegionLink::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgQuestMapRegionDef.RegionLink)
  size_t total_size = 0;

  // required .CMsgProtoDefID target_region_defid = 1 [(.valid_type) = DEF_TYPE_QUEST_MAP_REGION];
  if (_internal_has_target_region_defid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *target_region_defid_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional uint32 xpos = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_xpos());
    }

    // optional uint32 ypos = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ypos());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgQuestMapRegionDef_RegionLink::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgQuestMapRegionDef.RegionLink)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgQuestMapRegionDef_RegionLink* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgQuestMapRegionDef_RegionLink>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgQuestMapRegionDef.RegionLink)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgQuestMapRegionDef.RegionLink)
    MergeFrom(*source);
  }
}

void CMsgQuestMapRegionDef_RegionLink::MergeFrom(const CMsgQuestMapRegionDef_RegionLink& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgQuestMapRegionDef.RegionLink)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_target_region_defid()->::CMsgProtoDefID::MergeFrom(from._internal_target_region_defid());
    }
    if (cached_has_bits & 0x00000002u) {
      xpos_ = from.xpos_;
    }
    if (cached_has_bits & 0x00000004u) {
      ypos_ = from.ypos_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgQuestMapRegionDef_RegionLink::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgQuestMapRegionDef.RegionLink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgQuestMapRegionDef_RegionLink::CopyFrom(const CMsgQuestMapRegionDef_RegionLink& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgQuestMapRegionDef.RegionLink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgQuestMapRegionDef_RegionLink::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_target_region_defid()) {
    if (!target_region_defid_->IsInitialized()) return false;
  }
  return true;
}

void CMsgQuestMapRegionDef_RegionLink::InternalSwap(CMsgQuestMapRegionDef_RegionLink* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgQuestMapRegionDef_RegionLink, ypos_)
      + sizeof(CMsgQuestMapRegionDef_RegionLink::ypos_)
      - PROTOBUF_FIELD_OFFSET(CMsgQuestMapRegionDef_RegionLink, target_region_defid_)>(
          reinterpret_cast<char*>(&target_region_defid_),
          reinterpret_cast<char*>(&other->target_region_defid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgQuestMapRegionDef_RegionLink::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fproto_5fdef_5fmessages_2eproto_getter, &descriptor_table_tf_5fproto_5fdef_5fmessages_2eproto_once,
      file_level_metadata_tf_5fproto_5fdef_5fmessages_2eproto[12]);
}

// ===================================================================

class CMsgQuestMapRegionDef::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgQuestMapRegionDef>()._has_bits_);
  static const ::CMsgProtoDefHeader& header(const CMsgQuestMapRegionDef* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_resfile(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgProtoDefID& return_link(const CMsgQuestMapRegionDef* msg);
  static void set_has_return_link(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_radio_freq(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_zoom_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::CMsgProtoDefID& star_type(const CMsgQuestMapRegionDef* msg);
  static void set_has_star_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000004) ^ 0x00000004) != 0;
  }
};

const ::CMsgProtoDefHeader&
CMsgQuestMapRegionDef::_Internal::header(const CMsgQuestMapRegionDef* msg) {
  return *msg->header_;
}
const ::CMsgProtoDefID&
CMsgQuestMapRegionDef::_Internal::return_link(const CMsgQuestMapRegionDef* msg) {
  return *msg->return_link_;
}
const ::CMsgProtoDefID&
CMsgQuestMapRegionDef::_Internal::star_type(const CMsgQuestMapRegionDef* msg) {
  return *msg->star_type_;
}
CMsgQuestMapRegionDef::CMsgQuestMapRegionDef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  links_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgQuestMapRegionDef)
}
CMsgQuestMapRegionDef::CMsgQuestMapRegionDef(const CMsgQuestMapRegionDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      links_(from.links_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  resfile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_resfile()) {
    resfile_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_resfile(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_header()) {
    header_ = new ::CMsgProtoDefHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_return_link()) {
    return_link_ = new ::CMsgProtoDefID(*from.return_link_);
  } else {
    return_link_ = nullptr;
  }
  if (from._internal_has_star_type()) {
    star_type_ = new ::CMsgProtoDefID(*from.star_type_);
  } else {
    star_type_ = nullptr;
  }
  ::memcpy(&radio_freq_, &from.radio_freq_,
    static_cast<size_t>(reinterpret_cast<char*>(&zoom_scale_) -
    reinterpret_cast<char*>(&radio_freq_)) + sizeof(zoom_scale_));
  // @@protoc_insertion_point(copy_constructor:CMsgQuestMapRegionDef)
}

void CMsgQuestMapRegionDef::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
resfile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&zoom_scale_) -
    reinterpret_cast<char*>(&header_)) + sizeof(zoom_scale_));
}

CMsgQuestMapRegionDef::~CMsgQuestMapRegionDef() {
  // @@protoc_insertion_point(destructor:CMsgQuestMapRegionDef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgQuestMapRegionDef::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resfile_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete return_link_;
  if (this != internal_default_instance()) delete star_type_;
}

void CMsgQuestMapRegionDef::ArenaDtor(void* object) {
  CMsgQuestMapRegionDef* _this = reinterpret_cast< CMsgQuestMapRegionDef* >(object);
  (void)_this;
}
void CMsgQuestMapRegionDef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgQuestMapRegionDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgQuestMapRegionDef::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgQuestMapRegionDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  links_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      resfile_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(header_ != nullptr);
      header_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(return_link_ != nullptr);
      return_link_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(star_type_ != nullptr);
      star_type_->Clear();
    }
  }
  if (cached_has_bits & 0x00000060u) {
    ::memset(&radio_freq_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&zoom_scale_) -
        reinterpret_cast<char*>(&radio_freq_)) + sizeof(zoom_scale_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgQuestMapRegionDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .CMsgProtoDefHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 2 [(.localized) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgQuestMapRegionDef.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string resfile = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_resfile();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgQuestMapRegionDef.resfile");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgQuestMapRegionDef.RegionLink links = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_links(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .CMsgProtoDefID return_link = 5 [(.valid_type) = DEF_TYPE_QUEST_MAP_REGION, (.display_name) = "Return Link", (.comment) = "Which link we go to when right-clicking in this region"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_return_link(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float radio_freq = 6 [(.display_name) = "Radio Freq.", (.comment) = "Where the radio tuner goes on the CYOA PDA when this region is selection"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_radio_freq(&has_bits);
          radio_freq_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float zoom_scale = 7 [(.display_name) = "Zoom Scale", (.comment) = "How zoomed in this panel should be.  Affects the scale of the map grid lines and node link dashed lines"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_zoom_scale(&has_bits);
          zoom_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .CMsgProtoDefID star_type = 8 [(.valid_type) = DEF_TYPE_QUEST_MAP_STAR_TYPE, (.display_name) = "Star Type", (.comment) = "What stars (if any) the nodes within use to unlock"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_star_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgQuestMapRegionDef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgQuestMapRegionDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .CMsgProtoDefHeader header = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // optional string name = 2 [(.localized) = true];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgQuestMapRegionDef.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional string resfile = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_resfile().data(), static_cast<int>(this->_internal_resfile().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgQuestMapRegionDef.resfile");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_resfile(), target);
  }

  // repeated .CMsgQuestMapRegionDef.RegionLink links = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_links_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_links(i), target, stream);
  }

  // optional .CMsgProtoDefID return_link = 5 [(.valid_type) = DEF_TYPE_QUEST_MAP_REGION, (.display_name) = "Return Link", (.comment) = "Which link we go to when right-clicking in this region"];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::return_link(this), target, stream);
  }

  // optional float radio_freq = 6 [(.display_name) = "Radio Freq.", (.comment) = "Where the radio tuner goes on the CYOA PDA when this region is selection"];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_radio_freq(), target);
  }

  // optional float zoom_scale = 7 [(.display_name) = "Zoom Scale", (.comment) = "How zoomed in this panel should be.  Affects the scale of the map grid lines and node link dashed lines"];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_zoom_scale(), target);
  }

  // optional .CMsgProtoDefID star_type = 8 [(.valid_type) = DEF_TYPE_QUEST_MAP_STAR_TYPE, (.display_name) = "Star Type", (.comment) = "What stars (if any) the nodes within use to unlock"];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::star_type(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgQuestMapRegionDef)
  return target;
}

size_t CMsgQuestMapRegionDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgQuestMapRegionDef)
  size_t total_size = 0;

  // required .CMsgProtoDefHeader header = 1;
  if (_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgQuestMapRegionDef.RegionLink links = 4;
  total_size += 1UL * this->_internal_links_size();
  for (const auto& msg : this->links_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 2 [(.localized) = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string resfile = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_resfile());
    }

  }
  if (cached_has_bits & 0x00000078u) {
    // optional .CMsgProtoDefID return_link = 5 [(.valid_type) = DEF_TYPE_QUEST_MAP_REGION, (.display_name) = "Return Link", (.comment) = "Which link we go to when right-clicking in this region"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *return_link_);
    }

    // optional .CMsgProtoDefID star_type = 8 [(.valid_type) = DEF_TYPE_QUEST_MAP_STAR_TYPE, (.display_name) = "Star Type", (.comment) = "What stars (if any) the nodes within use to unlock"];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *star_type_);
    }

    // optional float radio_freq = 6 [(.display_name) = "Radio Freq.", (.comment) = "Where the radio tuner goes on the CYOA PDA when this region is selection"];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float zoom_scale = 7 [(.display_name) = "Zoom Scale", (.comment) = "How zoomed in this panel should be.  Affects the scale of the map grid lines and node link dashed lines"];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgQuestMapRegionDef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgQuestMapRegionDef)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgQuestMapRegionDef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgQuestMapRegionDef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgQuestMapRegionDef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgQuestMapRegionDef)
    MergeFrom(*source);
  }
}

void CMsgQuestMapRegionDef::MergeFrom(const CMsgQuestMapRegionDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgQuestMapRegionDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  links_.MergeFrom(from.links_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_resfile(from._internal_resfile());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_header()->::CMsgProtoDefHeader::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_return_link()->::CMsgProtoDefID::MergeFrom(from._internal_return_link());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_star_type()->::CMsgProtoDefID::MergeFrom(from._internal_star_type());
    }
    if (cached_has_bits & 0x00000020u) {
      radio_freq_ = from.radio_freq_;
    }
    if (cached_has_bits & 0x00000040u) {
      zoom_scale_ = from.zoom_scale_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgQuestMapRegionDef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgQuestMapRegionDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgQuestMapRegionDef::CopyFrom(const CMsgQuestMapRegionDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgQuestMapRegionDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgQuestMapRegionDef::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(links_)) return false;
  if (_internal_has_header()) {
    if (!header_->IsInitialized()) return false;
  }
  if (_internal_has_return_link()) {
    if (!return_link_->IsInitialized()) return false;
  }
  if (_internal_has_star_type()) {
    if (!star_type_->IsInitialized()) return false;
  }
  return true;
}

void CMsgQuestMapRegionDef::InternalSwap(CMsgQuestMapRegionDef* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  links_.InternalSwap(&other->links_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &resfile_, GetArenaForAllocation(),
      &other->resfile_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgQuestMapRegionDef, zoom_scale_)
      + sizeof(CMsgQuestMapRegionDef::zoom_scale_)
      - PROTOBUF_FIELD_OFFSET(CMsgQuestMapRegionDef, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgQuestMapRegionDef::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fproto_5fdef_5fmessages_2eproto_getter, &descriptor_table_tf_5fproto_5fdef_5fmessages_2eproto_once,
      file_level_metadata_tf_5fproto_5fdef_5fmessages_2eproto[13]);
}

// ===================================================================

class CMsgVarField::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgVarField>()._has_bits_);
  static void set_has_variable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgVarField::CMsgVarField(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgVarField)
}
CMsgVarField::CMsgVarField(const CMsgVarField& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  variable_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_variable()) {
    variable_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_variable(), 
      GetArenaForAllocation());
  }
  clear_has_value();
  switch (from.value_case()) {
    case kFloat: {
      _internal_set_float_(from._internal_float_());
      break;
    }
    case kDouble: {
      _internal_set_double_(from._internal_double_());
      break;
    }
    case kUint32: {
      _internal_set_uint32(from._internal_uint32());
      break;
    }
    case kUint64: {
      _internal_set_uint64(from._internal_uint64());
      break;
    }
    case kSint32: {
      _internal_set_sint32(from._internal_sint32());
      break;
    }
    case kSint64: {
      _internal_set_sint64(from._internal_sint64());
      break;
    }
    case kBool: {
      _internal_set_bool_(from._internal_bool_());
      break;
    }
    case kString: {
      _internal_set_string(from._internal_string());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:CMsgVarField)
}

void CMsgVarField::SharedCtor() {
variable_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
clear_has_value();
}

CMsgVarField::~CMsgVarField() {
  // @@protoc_insertion_point(destructor:CMsgVarField)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgVarField::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  variable_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_value()) {
    clear_value();
  }
}

void CMsgVarField::ArenaDtor(void* object) {
  CMsgVarField* _this = reinterpret_cast< CMsgVarField* >(object);
  (void)_this;
}
void CMsgVarField::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgVarField::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgVarField::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:CMsgVarField)
  switch (value_case()) {
    case kFloat: {
      // No need to clear
      break;
    }
    case kDouble: {
      // No need to clear
      break;
    }
    case kUint32: {
      // No need to clear
      break;
    }
    case kUint64: {
      // No need to clear
      break;
    }
    case kSint32: {
      // No need to clear
      break;
    }
    case kSint64: {
      // No need to clear
      break;
    }
    case kBool: {
      // No need to clear
      break;
    }
    case kString: {
      value_.string_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void CMsgVarField::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgVarField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    variable_.ClearNonDefaultToEmpty();
  }
  clear_value();
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgVarField::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string variable = 1 [(.merging_key_field) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_variable();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgVarField.variable");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float float = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _internal_set_float_(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // double double = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _internal_set_double_(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint32 uint32 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _internal_set_uint32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 uint64 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _internal_set_uint64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 sint32 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _internal_set_sint32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint64 sint64 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _internal_set_sint64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool bool = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _internal_set_bool_(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string string = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgVarField.string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgVarField::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgVarField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string variable = 1 [(.merging_key_field) = true];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_variable().data(), static_cast<int>(this->_internal_variable().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgVarField.variable");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_variable(), target);
  }

  switch (value_case()) {
    case kFloat: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_float_(), target);
      break;
    }
    case kDouble: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_double_(), target);
      break;
    }
    case kUint32: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_uint32(), target);
      break;
    }
    case kUint64: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_uint64(), target);
      break;
    }
    case kSint32: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(6, this->_internal_sint32(), target);
      break;
    }
    case kSint64: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(7, this->_internal_sint64(), target);
      break;
    }
    case kBool: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_bool_(), target);
      break;
    }
    case kString: {
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_string().data(), static_cast<int>(this->_internal_string().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "CMsgVarField.string");
      target = stream->WriteStringMaybeAliased(
          9, this->_internal_string(), target);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgVarField)
  return target;
}

size_t CMsgVarField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgVarField)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string variable = 1 [(.merging_key_field) = true];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_variable());
  }

  switch (value_case()) {
    // float float = 2;
    case kFloat: {
      total_size += 1 + 4;
      break;
    }
    // double double = 3;
    case kDouble: {
      total_size += 1 + 8;
      break;
    }
    // uint32 uint32 = 4;
    case kUint32: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_uint32());
      break;
    }
    // uint64 uint64 = 5;
    case kUint64: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_uint64());
      break;
    }
    // sint32 sint32 = 6;
    case kSint32: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
          this->_internal_sint32());
      break;
    }
    // sint64 sint64 = 7;
    case kSint64: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt64Size(
          this->_internal_sint64());
      break;
    }
    // bool bool = 8;
    case kBool: {
      total_size += 1 + 1;
      break;
    }
    // string string = 9;
    case kString: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgVarField::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgVarField)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgVarField* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgVarField>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgVarField)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgVarField)
    MergeFrom(*source);
  }
}

void CMsgVarField::MergeFrom(const CMsgVarField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgVarField)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_variable()) {
    _internal_set_variable(from._internal_variable());
  }
  switch (from.value_case()) {
    case kFloat: {
      _internal_set_float_(from._internal_float_());
      break;
    }
    case kDouble: {
      _internal_set_double_(from._internal_double_());
      break;
    }
    case kUint32: {
      _internal_set_uint32(from._internal_uint32());
      break;
    }
    case kUint64: {
      _internal_set_uint64(from._internal_uint64());
      break;
    }
    case kSint32: {
      _internal_set_sint32(from._internal_sint32());
      break;
    }
    case kSint64: {
      _internal_set_sint64(from._internal_sint64());
      break;
    }
    case kBool: {
      _internal_set_bool_(from._internal_bool_());
      break;
    }
    case kString: {
      _internal_set_string(from._internal_string());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
}

void CMsgVarField::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgVarField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgVarField::CopyFrom(const CMsgVarField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgVarField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgVarField::IsInitialized() const {
  return true;
}

void CMsgVarField::InternalSwap(CMsgVarField* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &variable_, GetArenaForAllocation(),
      &other->variable_, other->GetArenaForAllocation()
  );
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgVarField::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fproto_5fdef_5fmessages_2eproto_getter, &descriptor_table_tf_5fproto_5fdef_5fmessages_2eproto_once,
      file_level_metadata_tf_5fproto_5fdef_5fmessages_2eproto[14]);
}

// ===================================================================

class CMsgQuestMapStarType::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgQuestMapStarType>()._has_bits_);
  static const ::CMsgProtoDefHeader& header(const CMsgQuestMapStarType* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::CMsgProtoDefHeader&
CMsgQuestMapStarType::_Internal::header(const CMsgQuestMapStarType* msg) {
  return *msg->header_;
}
CMsgQuestMapStarType::CMsgQuestMapStarType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgQuestMapStarType)
}
CMsgQuestMapStarType::CMsgQuestMapStarType(const CMsgQuestMapStarType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_header()) {
    header_ = new ::CMsgProtoDefHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CMsgQuestMapStarType)
}

void CMsgQuestMapStarType::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
header_ = nullptr;
}

CMsgQuestMapStarType::~CMsgQuestMapStarType() {
  // @@protoc_insertion_point(destructor:CMsgQuestMapStarType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgQuestMapStarType::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void CMsgQuestMapStarType::ArenaDtor(void* object) {
  CMsgQuestMapStarType* _this = reinterpret_cast< CMsgQuestMapStarType* >(object);
  (void)_this;
}
void CMsgQuestMapStarType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgQuestMapStarType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgQuestMapStarType::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgQuestMapStarType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(header_ != nullptr);
      header_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgQuestMapStarType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .CMsgProtoDefHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 2 [(.localized) = true, (.display_name) = "Type Name"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgQuestMapStarType.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgQuestMapStarType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgQuestMapStarType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .CMsgProtoDefHeader header = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // optional string name = 2 [(.localized) = true, (.display_name) = "Type Name"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgQuestMapStarType.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgQuestMapStarType)
  return target;
}

size_t CMsgQuestMapStarType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgQuestMapStarType)
  size_t total_size = 0;

  // required .CMsgProtoDefHeader header = 1;
  if (_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string name = 2 [(.localized) = true, (.display_name) = "Type Name"];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgQuestMapStarType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgQuestMapStarType)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgQuestMapStarType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgQuestMapStarType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgQuestMapStarType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgQuestMapStarType)
    MergeFrom(*source);
  }
}

void CMsgQuestMapStarType::MergeFrom(const CMsgQuestMapStarType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgQuestMapStarType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_header()->::CMsgProtoDefHeader::MergeFrom(from._internal_header());
    }
  }
}

void CMsgQuestMapStarType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgQuestMapStarType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgQuestMapStarType::CopyFrom(const CMsgQuestMapStarType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgQuestMapStarType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgQuestMapStarType::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_header()) {
    if (!header_->IsInitialized()) return false;
  }
  return true;
}

void CMsgQuestMapStarType::InternalSwap(CMsgQuestMapStarType* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgQuestMapStarType::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fproto_5fdef_5fmessages_2eproto_getter, &descriptor_table_tf_5fproto_5fdef_5fmessages_2eproto_once,
      file_level_metadata_tf_5fproto_5fdef_5fmessages_2eproto[15]);
}

// ===================================================================

class CMsgQuestMapNodeDef::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgQuestMapNodeDef>()._has_bits_);
  static const ::CMsgProtoDefHeader& header(const CMsgQuestMapNodeDef* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_name_loctoken(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_x_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_y_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::CMsgQuestMapNodeCondition& condition(const CMsgQuestMapNodeDef* msg);
  static void set_has_condition(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::CMsgProtoDefID& owning_region(const CMsgQuestMapNodeDef* msg);
  static void set_has_owning_region(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_associated_operation(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_reward_item_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_reward_lootlist_name(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_cash_reward(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::CMsgProtoDefID& star_type(const CMsgQuestMapNodeDef* msg);
  static void set_has_star_type(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_stars_to_unlock(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000010) ^ 0x00000010) != 0;
  }
};

const ::CMsgProtoDefHeader&
CMsgQuestMapNodeDef::_Internal::header(const CMsgQuestMapNodeDef* msg) {
  return *msg->header_;
}
const ::CMsgQuestMapNodeCondition&
CMsgQuestMapNodeDef::_Internal::condition(const CMsgQuestMapNodeDef* msg) {
  return *msg->condition_;
}
const ::CMsgProtoDefID&
CMsgQuestMapNodeDef::_Internal::owning_region(const CMsgQuestMapNodeDef* msg) {
  return *msg->owning_region_;
}
const ::CMsgProtoDefID&
CMsgQuestMapNodeDef::_Internal::star_type(const CMsgQuestMapNodeDef* msg) {
  return *msg->star_type_;
}
CMsgQuestMapNodeDef::CMsgQuestMapNodeDef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  quest_options_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgQuestMapNodeDef)
}
CMsgQuestMapNodeDef::CMsgQuestMapNodeDef(const CMsgQuestMapNodeDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      quest_options_(from.quest_options_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_loctoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name_loctoken()) {
    name_loctoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name_loctoken(), 
      GetArenaForAllocation());
  }
  associated_operation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_associated_operation()) {
    associated_operation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_associated_operation(), 
      GetArenaForAllocation());
  }
  reward_item_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_reward_item_name()) {
    reward_item_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reward_item_name(), 
      GetArenaForAllocation());
  }
  reward_lootlist_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_reward_lootlist_name()) {
    reward_lootlist_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reward_lootlist_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_header()) {
    header_ = new ::CMsgProtoDefHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_condition()) {
    condition_ = new ::CMsgQuestMapNodeCondition(*from.condition_);
  } else {
    condition_ = nullptr;
  }
  if (from._internal_has_owning_region()) {
    owning_region_ = new ::CMsgProtoDefID(*from.owning_region_);
  } else {
    owning_region_ = nullptr;
  }
  if (from._internal_has_star_type()) {
    star_type_ = new ::CMsgProtoDefID(*from.star_type_);
  } else {
    star_type_ = nullptr;
  }
  ::memcpy(&x_pos_, &from.x_pos_,
    static_cast<size_t>(reinterpret_cast<char*>(&stars_to_unlock_) -
    reinterpret_cast<char*>(&x_pos_)) + sizeof(stars_to_unlock_));
  // @@protoc_insertion_point(copy_constructor:CMsgQuestMapNodeDef)
}

void CMsgQuestMapNodeDef::SharedCtor() {
name_loctoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
associated_operation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
reward_item_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
reward_lootlist_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&y_pos_) -
    reinterpret_cast<char*>(&header_)) + sizeof(y_pos_));
cash_reward_ = 1;
stars_to_unlock_ = 1u;
}

CMsgQuestMapNodeDef::~CMsgQuestMapNodeDef() {
  // @@protoc_insertion_point(destructor:CMsgQuestMapNodeDef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgQuestMapNodeDef::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_loctoken_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  associated_operation_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reward_item_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reward_lootlist_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete condition_;
  if (this != internal_default_instance()) delete owning_region_;
  if (this != internal_default_instance()) delete star_type_;
}

void CMsgQuestMapNodeDef::ArenaDtor(void* object) {
  CMsgQuestMapNodeDef* _this = reinterpret_cast< CMsgQuestMapNodeDef* >(object);
  (void)_this;
}
void CMsgQuestMapNodeDef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgQuestMapNodeDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgQuestMapNodeDef::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgQuestMapNodeDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  quest_options_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      name_loctoken_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      associated_operation_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      reward_item_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      reward_lootlist_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(header_ != nullptr);
      header_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(condition_ != nullptr);
      condition_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(owning_region_ != nullptr);
      owning_region_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(star_type_ != nullptr);
      star_type_->Clear();
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&x_pos_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_pos_) -
        reinterpret_cast<char*>(&x_pos_)) + sizeof(y_pos_));
    cash_reward_ = 1;
    stars_to_unlock_ = 1u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgQuestMapNodeDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .CMsgProtoDefHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name_loctoken = 4 [(.localized) = true, (.display_name) = "Node Name", (.comment) = "The name of this node"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_name_loctoken();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgQuestMapNodeDef.name_loctoken");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float x_pos = 6 [(.display_name) = "Map X Pos", (.comment) = "X position on the quest map"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_x_pos(&has_bits);
          x_pos_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float y_pos = 7 [(.display_name) = "Map Y Pos", (.comment) = "Y position on the quest map"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_y_pos(&has_bits);
          y_pos_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .CMsgQuestMapNodeCondition condition = 9 [(.display_name) = "Conditions", (.comment) = "Logic to unlock this node. Can be nested with logic"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_condition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgProtoDefID owning_region = 10 [(.valid_type) = DEF_TYPE_QUEST_MAP_REGION, (.display_name) = "Region", (.comment) = "Which region in the map this node shows up in"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_owning_region(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgProtoDefID quest_options = 11 [(.valid_type) = DEF_TYPE_QUEST, (.display_name) = "Offered Quests", (.comment) = "Which quests this node offers.", (.max_count) = 3];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_quest_options(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string associated_operation = 16 [(.display_name) = "Associated Operation", (.comment) = "Operation this node is associated with"];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_associated_operation();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgQuestMapNodeDef.associated_operation");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string reward_item_name = 18 [(.display_name) = "Reward Item", (.comment) = "The name of an item to give as a reward"];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_reward_item_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgQuestMapNodeDef.reward_item_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ENodeCashReward cash_reward = 19 [default = CASH_REWARD_NONE, (.display_name) = "Cash Reward", (.comment) = "How much cash to give when completing the primary objective"];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ENodeCashReward_IsValid(val))) {
            _internal_set_cash_reward(static_cast<::ENodeCashReward>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(19, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .CMsgProtoDefID star_type = 20 [(.valid_type) = DEF_TYPE_QUEST_MAP_STAR_TYPE, (.display_name) = "Star Type", (.comment) = "Which type of star this node uses"];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_star_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 stars_to_unlock = 21 [default = 1, (.display_name) = "Stars to Unlock", (.comment) = "Numbers of stars it costs to unlock"];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_stars_to_unlock(&has_bits);
          stars_to_unlock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string reward_lootlist_name = 22 [(.display_name) = "Reward Lootlist", (.comment) = "The name of the lootlist to roll as a reward"];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          auto str = _internal_mutable_reward_lootlist_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgQuestMapNodeDef.reward_lootlist_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgQuestMapNodeDef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgQuestMapNodeDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .CMsgProtoDefHeader header = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // optional string name_loctoken = 4 [(.localized) = true, (.display_name) = "Node Name", (.comment) = "The name of this node"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name_loctoken().data(), static_cast<int>(this->_internal_name_loctoken().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgQuestMapNodeDef.name_loctoken");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_name_loctoken(), target);
  }

  // optional float x_pos = 6 [(.display_name) = "Map X Pos", (.comment) = "X position on the quest map"];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_x_pos(), target);
  }

  // optional float y_pos = 7 [(.display_name) = "Map Y Pos", (.comment) = "Y position on the quest map"];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_y_pos(), target);
  }

  // optional .CMsgQuestMapNodeCondition condition = 9 [(.display_name) = "Conditions", (.comment) = "Logic to unlock this node. Can be nested with logic"];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::condition(this), target, stream);
  }

  // optional .CMsgProtoDefID owning_region = 10 [(.valid_type) = DEF_TYPE_QUEST_MAP_REGION, (.display_name) = "Region", (.comment) = "Which region in the map this node shows up in"];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::owning_region(this), target, stream);
  }

  // repeated .CMsgProtoDefID quest_options = 11 [(.valid_type) = DEF_TYPE_QUEST, (.display_name) = "Offered Quests", (.comment) = "Which quests this node offers.", (.max_count) = 3];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_quest_options_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_quest_options(i), target, stream);
  }

  // optional string associated_operation = 16 [(.display_name) = "Associated Operation", (.comment) = "Operation this node is associated with"];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_associated_operation().data(), static_cast<int>(this->_internal_associated_operation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgQuestMapNodeDef.associated_operation");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_associated_operation(), target);
  }

  // optional string reward_item_name = 18 [(.display_name) = "Reward Item", (.comment) = "The name of an item to give as a reward"];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_reward_item_name().data(), static_cast<int>(this->_internal_reward_item_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgQuestMapNodeDef.reward_item_name");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_reward_item_name(), target);
  }

  // optional .ENodeCashReward cash_reward = 19 [default = CASH_REWARD_NONE, (.display_name) = "Cash Reward", (.comment) = "How much cash to give when completing the primary objective"];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      19, this->_internal_cash_reward(), target);
  }

  // optional .CMsgProtoDefID star_type = 20 [(.valid_type) = DEF_TYPE_QUEST_MAP_STAR_TYPE, (.display_name) = "Star Type", (.comment) = "Which type of star this node uses"];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::star_type(this), target, stream);
  }

  // optional uint32 stars_to_unlock = 21 [default = 1, (.display_name) = "Stars to Unlock", (.comment) = "Numbers of stars it costs to unlock"];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(21, this->_internal_stars_to_unlock(), target);
  }

  // optional string reward_lootlist_name = 22 [(.display_name) = "Reward Lootlist", (.comment) = "The name of the lootlist to roll as a reward"];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_reward_lootlist_name().data(), static_cast<int>(this->_internal_reward_lootlist_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgQuestMapNodeDef.reward_lootlist_name");
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_reward_lootlist_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgQuestMapNodeDef)
  return target;
}

size_t CMsgQuestMapNodeDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgQuestMapNodeDef)
  size_t total_size = 0;

  // required .CMsgProtoDefHeader header = 1;
  if (_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgProtoDefID quest_options = 11 [(.valid_type) = DEF_TYPE_QUEST, (.display_name) = "Offered Quests", (.comment) = "Which quests this node offers.", (.max_count) = 3];
  total_size += 1UL * this->_internal_quest_options_size();
  for (const auto& msg : this->quest_options_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string name_loctoken = 4 [(.localized) = true, (.display_name) = "Node Name", (.comment) = "The name of this node"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name_loctoken());
    }

    // optional string associated_operation = 16 [(.display_name) = "Associated Operation", (.comment) = "Operation this node is associated with"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_associated_operation());
    }

    // optional string reward_item_name = 18 [(.display_name) = "Reward Item", (.comment) = "The name of an item to give as a reward"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_reward_item_name());
    }

    // optional string reward_lootlist_name = 22 [(.display_name) = "Reward Lootlist", (.comment) = "The name of the lootlist to roll as a reward"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_reward_lootlist_name());
    }

  }
  if (cached_has_bits & 0x000000e0u) {
    // optional .CMsgQuestMapNodeCondition condition = 9 [(.display_name) = "Conditions", (.comment) = "Logic to unlock this node. Can be nested with logic"];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *condition_);
    }

    // optional .CMsgProtoDefID owning_region = 10 [(.valid_type) = DEF_TYPE_QUEST_MAP_REGION, (.display_name) = "Region", (.comment) = "Which region in the map this node shows up in"];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *owning_region_);
    }

    // optional .CMsgProtoDefID star_type = 20 [(.valid_type) = DEF_TYPE_QUEST_MAP_STAR_TYPE, (.display_name) = "Star Type", (.comment) = "Which type of star this node uses"];
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *star_type_);
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional float x_pos = 6 [(.display_name) = "Map X Pos", (.comment) = "X position on the quest map"];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional float y_pos = 7 [(.display_name) = "Map Y Pos", (.comment) = "Y position on the quest map"];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional .ENodeCashReward cash_reward = 19 [default = CASH_REWARD_NONE, (.display_name) = "Cash Reward", (.comment) = "How much cash to give when completing the primary objective"];
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_cash_reward());
    }

    // optional uint32 stars_to_unlock = 21 [default = 1, (.display_name) = "Stars to Unlock", (.comment) = "Numbers of stars it costs to unlock"];
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_stars_to_unlock());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgQuestMapNodeDef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgQuestMapNodeDef)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgQuestMapNodeDef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgQuestMapNodeDef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgQuestMapNodeDef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgQuestMapNodeDef)
    MergeFrom(*source);
  }
}

void CMsgQuestMapNodeDef::MergeFrom(const CMsgQuestMapNodeDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgQuestMapNodeDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  quest_options_.MergeFrom(from.quest_options_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name_loctoken(from._internal_name_loctoken());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_associated_operation(from._internal_associated_operation());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_reward_item_name(from._internal_reward_item_name());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_reward_lootlist_name(from._internal_reward_lootlist_name());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_header()->::CMsgProtoDefHeader::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_condition()->::CMsgQuestMapNodeCondition::MergeFrom(from._internal_condition());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_owning_region()->::CMsgProtoDefID::MergeFrom(from._internal_owning_region());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_star_type()->::CMsgProtoDefID::MergeFrom(from._internal_star_type());
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      x_pos_ = from.x_pos_;
    }
    if (cached_has_bits & 0x00000200u) {
      y_pos_ = from.y_pos_;
    }
    if (cached_has_bits & 0x00000400u) {
      cash_reward_ = from.cash_reward_;
    }
    if (cached_has_bits & 0x00000800u) {
      stars_to_unlock_ = from.stars_to_unlock_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgQuestMapNodeDef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgQuestMapNodeDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgQuestMapNodeDef::CopyFrom(const CMsgQuestMapNodeDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgQuestMapNodeDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgQuestMapNodeDef::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(quest_options_)) return false;
  if (_internal_has_header()) {
    if (!header_->IsInitialized()) return false;
  }
  if (_internal_has_condition()) {
    if (!condition_->IsInitialized()) return false;
  }
  if (_internal_has_owning_region()) {
    if (!owning_region_->IsInitialized()) return false;
  }
  if (_internal_has_star_type()) {
    if (!star_type_->IsInitialized()) return false;
  }
  return true;
}

void CMsgQuestMapNodeDef::InternalSwap(CMsgQuestMapNodeDef* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  quest_options_.InternalSwap(&other->quest_options_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_loctoken_, GetArenaForAllocation(),
      &other->name_loctoken_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &associated_operation_, GetArenaForAllocation(),
      &other->associated_operation_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &reward_item_name_, GetArenaForAllocation(),
      &other->reward_item_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &reward_lootlist_name_, GetArenaForAllocation(),
      &other->reward_lootlist_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgQuestMapNodeDef, y_pos_)
      + sizeof(CMsgQuestMapNodeDef::y_pos_)
      - PROTOBUF_FIELD_OFFSET(CMsgQuestMapNodeDef, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
  swap(cash_reward_, other->cash_reward_);
  swap(stars_to_unlock_, other->stars_to_unlock_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgQuestMapNodeDef::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fproto_5fdef_5fmessages_2eproto_getter, &descriptor_table_tf_5fproto_5fdef_5fmessages_2eproto_once,
      file_level_metadata_tf_5fproto_5fdef_5fmessages_2eproto[16]);
}

// ===================================================================

class CMsgPaintKit_Variables::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgPaintKit_Variables>()._has_bits_);
  static const ::CMsgProtoDefHeader& header(const CMsgPaintKit_Variables* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::CMsgProtoDefHeader&
CMsgPaintKit_Variables::_Internal::header(const CMsgPaintKit_Variables* msg) {
  return *msg->header_;
}
CMsgPaintKit_Variables::CMsgPaintKit_Variables(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgPaintKit_Variables)
}
CMsgPaintKit_Variables::CMsgPaintKit_Variables(const CMsgPaintKit_Variables& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::CMsgProtoDefHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CMsgPaintKit_Variables)
}

void CMsgPaintKit_Variables::SharedCtor() {
header_ = nullptr;
}

CMsgPaintKit_Variables::~CMsgPaintKit_Variables() {
  // @@protoc_insertion_point(destructor:CMsgPaintKit_Variables)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgPaintKit_Variables::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void CMsgPaintKit_Variables::ArenaDtor(void* object) {
  CMsgPaintKit_Variables* _this = reinterpret_cast< CMsgPaintKit_Variables* >(object);
  (void)_this;
}
void CMsgPaintKit_Variables::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgPaintKit_Variables::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgPaintKit_Variables::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPaintKit_Variables)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != nullptr);
    header_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPaintKit_Variables::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .CMsgProtoDefHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgPaintKit_Variables::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPaintKit_Variables)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .CMsgProtoDefHeader header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPaintKit_Variables)
  return target;
}

size_t CMsgPaintKit_Variables::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPaintKit_Variables)
  size_t total_size = 0;

  // required .CMsgProtoDefHeader header = 1;
  if (_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPaintKit_Variables::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgPaintKit_Variables)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPaintKit_Variables* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgPaintKit_Variables>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgPaintKit_Variables)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgPaintKit_Variables)
    MergeFrom(*source);
  }
}

void CMsgPaintKit_Variables::MergeFrom(const CMsgPaintKit_Variables& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgPaintKit_Variables)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _internal_mutable_header()->::CMsgProtoDefHeader::MergeFrom(from._internal_header());
  }
}

void CMsgPaintKit_Variables::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgPaintKit_Variables)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPaintKit_Variables::CopyFrom(const CMsgPaintKit_Variables& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPaintKit_Variables)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPaintKit_Variables::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_header()) {
    if (!header_->IsInitialized()) return false;
  }
  return true;
}

void CMsgPaintKit_Variables::InternalSwap(CMsgPaintKit_Variables* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPaintKit_Variables::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fproto_5fdef_5fmessages_2eproto_getter, &descriptor_table_tf_5fproto_5fdef_5fmessages_2eproto_once,
      file_level_metadata_tf_5fproto_5fdef_5fmessages_2eproto[17]);
}

// ===================================================================

class CMsgPaintKit_Operation_TextureStage::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgPaintKit_Operation_TextureStage>()._has_bits_);
  static const ::CMsgVarField& texture(const CMsgPaintKit_Operation_TextureStage* msg);
  static void set_has_texture(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgVarField& texture_red(const CMsgPaintKit_Operation_TextureStage* msg);
  static void set_has_texture_red(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgVarField& texture_blue(const CMsgPaintKit_Operation_TextureStage* msg);
  static void set_has_texture_blue(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CMsgVarField& adjust_black(const CMsgPaintKit_Operation_TextureStage* msg);
  static void set_has_adjust_black(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::CMsgVarField& adjust_offset(const CMsgPaintKit_Operation_TextureStage* msg);
  static void set_has_adjust_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::CMsgVarField& adjust_gamma(const CMsgPaintKit_Operation_TextureStage* msg);
  static void set_has_adjust_gamma(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::CMsgVarField& rotation(const CMsgPaintKit_Operation_TextureStage* msg);
  static void set_has_rotation(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::CMsgVarField& translate_u(const CMsgPaintKit_Operation_TextureStage* msg);
  static void set_has_translate_u(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::CMsgVarField& translate_v(const CMsgPaintKit_Operation_TextureStage* msg);
  static void set_has_translate_v(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::CMsgVarField& scale_uv(const CMsgPaintKit_Operation_TextureStage* msg);
  static void set_has_scale_uv(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::CMsgVarField& flip_u(const CMsgPaintKit_Operation_TextureStage* msg);
  static void set_has_flip_u(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::CMsgVarField& flip_v(const CMsgPaintKit_Operation_TextureStage* msg);
  static void set_has_flip_v(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

const ::CMsgVarField&
CMsgPaintKit_Operation_TextureStage::_Internal::texture(const CMsgPaintKit_Operation_TextureStage* msg) {
  return *msg->texture_;
}
const ::CMsgVarField&
CMsgPaintKit_Operation_TextureStage::_Internal::texture_red(const CMsgPaintKit_Operation_TextureStage* msg) {
  return *msg->texture_red_;
}
const ::CMsgVarField&
CMsgPaintKit_Operation_TextureStage::_Internal::texture_blue(const CMsgPaintKit_Operation_TextureStage* msg) {
  return *msg->texture_blue_;
}
const ::CMsgVarField&
CMsgPaintKit_Operation_TextureStage::_Internal::adjust_black(const CMsgPaintKit_Operation_TextureStage* msg) {
  return *msg->adjust_black_;
}
const ::CMsgVarField&
CMsgPaintKit_Operation_TextureStage::_Internal::adjust_offset(const CMsgPaintKit_Operation_TextureStage* msg) {
  return *msg->adjust_offset_;
}
const ::CMsgVarField&
CMsgPaintKit_Operation_TextureStage::_Internal::adjust_gamma(const CMsgPaintKit_Operation_TextureStage* msg) {
  return *msg->adjust_gamma_;
}
const ::CMsgVarField&
CMsgPaintKit_Operation_TextureStage::_Internal::rotation(const CMsgPaintKit_Operation_TextureStage* msg) {
  return *msg->rotation_;
}
const ::CMsgVarField&
CMsgPaintKit_Operation_TextureStage::_Internal::translate_u(const CMsgPaintKit_Operation_TextureStage* msg) {
  return *msg->translate_u_;
}
const ::CMsgVarField&
CMsgPaintKit_Operation_TextureStage::_Internal::translate_v(const CMsgPaintKit_Operation_TextureStage* msg) {
  return *msg->translate_v_;
}
const ::CMsgVarField&
CMsgPaintKit_Operation_TextureStage::_Internal::scale_uv(const CMsgPaintKit_Operation_TextureStage* msg) {
  return *msg->scale_uv_;
}
const ::CMsgVarField&
CMsgPaintKit_Operation_TextureStage::_Internal::flip_u(const CMsgPaintKit_Operation_TextureStage* msg) {
  return *msg->flip_u_;
}
const ::CMsgVarField&
CMsgPaintKit_Operation_TextureStage::_Internal::flip_v(const CMsgPaintKit_Operation_TextureStage* msg) {
  return *msg->flip_v_;
}
CMsgPaintKit_Operation_TextureStage::CMsgPaintKit_Operation_TextureStage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgPaintKit_Operation_TextureStage)
}
CMsgPaintKit_Operation_TextureStage::CMsgPaintKit_Operation_TextureStage(const CMsgPaintKit_Operation_TextureStage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_texture()) {
    texture_ = new ::CMsgVarField(*from.texture_);
  } else {
    texture_ = nullptr;
  }
  if (from._internal_has_texture_red()) {
    texture_red_ = new ::CMsgVarField(*from.texture_red_);
  } else {
    texture_red_ = nullptr;
  }
  if (from._internal_has_texture_blue()) {
    texture_blue_ = new ::CMsgVarField(*from.texture_blue_);
  } else {
    texture_blue_ = nullptr;
  }
  if (from._internal_has_adjust_black()) {
    adjust_black_ = new ::CMsgVarField(*from.adjust_black_);
  } else {
    adjust_black_ = nullptr;
  }
  if (from._internal_has_adjust_offset()) {
    adjust_offset_ = new ::CMsgVarField(*from.adjust_offset_);
  } else {
    adjust_offset_ = nullptr;
  }
  if (from._internal_has_adjust_gamma()) {
    adjust_gamma_ = new ::CMsgVarField(*from.adjust_gamma_);
  } else {
    adjust_gamma_ = nullptr;
  }
  if (from._internal_has_rotation()) {
    rotation_ = new ::CMsgVarField(*from.rotation_);
  } else {
    rotation_ = nullptr;
  }
  if (from._internal_has_translate_u()) {
    translate_u_ = new ::CMsgVarField(*from.translate_u_);
  } else {
    translate_u_ = nullptr;
  }
  if (from._internal_has_translate_v()) {
    translate_v_ = new ::CMsgVarField(*from.translate_v_);
  } else {
    translate_v_ = nullptr;
  }
  if (from._internal_has_scale_uv()) {
    scale_uv_ = new ::CMsgVarField(*from.scale_uv_);
  } else {
    scale_uv_ = nullptr;
  }
  if (from._internal_has_flip_u()) {
    flip_u_ = new ::CMsgVarField(*from.flip_u_);
  } else {
    flip_u_ = nullptr;
  }
  if (from._internal_has_flip_v()) {
    flip_v_ = new ::CMsgVarField(*from.flip_v_);
  } else {
    flip_v_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CMsgPaintKit_Operation_TextureStage)
}

void CMsgPaintKit_Operation_TextureStage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&texture_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&flip_v_) -
    reinterpret_cast<char*>(&texture_)) + sizeof(flip_v_));
}

CMsgPaintKit_Operation_TextureStage::~CMsgPaintKit_Operation_TextureStage() {
  // @@protoc_insertion_point(destructor:CMsgPaintKit_Operation_TextureStage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgPaintKit_Operation_TextureStage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete texture_;
  if (this != internal_default_instance()) delete texture_red_;
  if (this != internal_default_instance()) delete texture_blue_;
  if (this != internal_default_instance()) delete adjust_black_;
  if (this != internal_default_instance()) delete adjust_offset_;
  if (this != internal_default_instance()) delete adjust_gamma_;
  if (this != internal_default_instance()) delete rotation_;
  if (this != internal_default_instance()) delete translate_u_;
  if (this != internal_default_instance()) delete translate_v_;
  if (this != internal_default_instance()) delete scale_uv_;
  if (this != internal_default_instance()) delete flip_u_;
  if (this != internal_default_instance()) delete flip_v_;
}

void CMsgPaintKit_Operation_TextureStage::ArenaDtor(void* object) {
  CMsgPaintKit_Operation_TextureStage* _this = reinterpret_cast< CMsgPaintKit_Operation_TextureStage* >(object);
  (void)_this;
}
void CMsgPaintKit_Operation_TextureStage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgPaintKit_Operation_TextureStage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgPaintKit_Operation_TextureStage::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPaintKit_Operation_TextureStage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(texture_ != nullptr);
      texture_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(texture_red_ != nullptr);
      texture_red_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(texture_blue_ != nullptr);
      texture_blue_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(adjust_black_ != nullptr);
      adjust_black_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(adjust_offset_ != nullptr);
      adjust_offset_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(adjust_gamma_ != nullptr);
      adjust_gamma_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(rotation_ != nullptr);
      rotation_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(translate_u_ != nullptr);
      translate_u_->Clear();
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(translate_v_ != nullptr);
      translate_v_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(scale_uv_ != nullptr);
      scale_uv_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(flip_u_ != nullptr);
      flip_u_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(flip_v_ != nullptr);
      flip_v_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPaintKit_Operation_TextureStage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgVarField texture = 1 [(.var_field_type) = VAR_TYPE_STRING];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_texture(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgVarField texture_red = 2 [(.var_field_type) = VAR_TYPE_STRING];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_texture_red(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgVarField texture_blue = 3 [(.var_field_type) = VAR_TYPE_STRING];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_texture_blue(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgVarField adjust_black = 4 [(.var_field_type) = VAR_TYPE_STRING];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_adjust_black(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgVarField adjust_offset = 5 [(.var_field_type) = VAR_TYPE_STRING];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_adjust_offset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgVarField adjust_gamma = 6 [(.var_field_type) = VAR_TYPE_STRING];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_adjust_gamma(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgVarField rotation = 7 [(.var_field_type) = VAR_TYPE_STRING];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_rotation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgVarField translate_u = 8 [(.var_field_type) = VAR_TYPE_STRING];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_translate_u(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgVarField translate_v = 9 [(.var_field_type) = VAR_TYPE_STRING];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_translate_v(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgVarField scale_uv = 10 [(.var_field_type) = VAR_TYPE_STRING];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_scale_uv(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgVarField flip_u = 11 [(.var_field_type) = VAR_TYPE_STRING];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_flip_u(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgVarField flip_v = 12 [(.var_field_type) = VAR_TYPE_STRING];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_flip_v(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgPaintKit_Operation_TextureStage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPaintKit_Operation_TextureStage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgVarField texture = 1 [(.var_field_type) = VAR_TYPE_STRING];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::texture(this), target, stream);
  }

  // optional .CMsgVarField texture_red = 2 [(.var_field_type) = VAR_TYPE_STRING];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::texture_red(this), target, stream);
  }

  // optional .CMsgVarField texture_blue = 3 [(.var_field_type) = VAR_TYPE_STRING];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::texture_blue(this), target, stream);
  }

  // optional .CMsgVarField adjust_black = 4 [(.var_field_type) = VAR_TYPE_STRING];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::adjust_black(this), target, stream);
  }

  // optional .CMsgVarField adjust_offset = 5 [(.var_field_type) = VAR_TYPE_STRING];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::adjust_offset(this), target, stream);
  }

  // optional .CMsgVarField adjust_gamma = 6 [(.var_field_type) = VAR_TYPE_STRING];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::adjust_gamma(this), target, stream);
  }

  // optional .CMsgVarField rotation = 7 [(.var_field_type) = VAR_TYPE_STRING];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::rotation(this), target, stream);
  }

  // optional .CMsgVarField translate_u = 8 [(.var_field_type) = VAR_TYPE_STRING];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::translate_u(this), target, stream);
  }

  // optional .CMsgVarField translate_v = 9 [(.var_field_type) = VAR_TYPE_STRING];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::translate_v(this), target, stream);
  }

  // optional .CMsgVarField scale_uv = 10 [(.var_field_type) = VAR_TYPE_STRING];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::scale_uv(this), target, stream);
  }

  // optional .CMsgVarField flip_u = 11 [(.var_field_type) = VAR_TYPE_STRING];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::flip_u(this), target, stream);
  }

  // optional .CMsgVarField flip_v = 12 [(.var_field_type) = VAR_TYPE_STRING];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::flip_v(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPaintKit_Operation_TextureStage)
  return target;
}

size_t CMsgPaintKit_Operation_TextureStage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPaintKit_Operation_TextureStage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .CMsgVarField texture = 1 [(.var_field_type) = VAR_TYPE_STRING];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *texture_);
    }

    // optional .CMsgVarField texture_red = 2 [(.var_field_type) = VAR_TYPE_STRING];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *texture_red_);
    }

    // optional .CMsgVarField texture_blue = 3 [(.var_field_type) = VAR_TYPE_STRING];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *texture_blue_);
    }

    // optional .CMsgVarField adjust_black = 4 [(.var_field_type) = VAR_TYPE_STRING];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *adjust_black_);
    }

    // optional .CMsgVarField adjust_offset = 5 [(.var_field_type) = VAR_TYPE_STRING];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *adjust_offset_);
    }

    // optional .CMsgVarField adjust_gamma = 6 [(.var_field_type) = VAR_TYPE_STRING];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *adjust_gamma_);
    }

    // optional .CMsgVarField rotation = 7 [(.var_field_type) = VAR_TYPE_STRING];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rotation_);
    }

    // optional .CMsgVarField translate_u = 8 [(.var_field_type) = VAR_TYPE_STRING];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *translate_u_);
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional .CMsgVarField translate_v = 9 [(.var_field_type) = VAR_TYPE_STRING];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *translate_v_);
    }

    // optional .CMsgVarField scale_uv = 10 [(.var_field_type) = VAR_TYPE_STRING];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *scale_uv_);
    }

    // optional .CMsgVarField flip_u = 11 [(.var_field_type) = VAR_TYPE_STRING];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *flip_u_);
    }

    // optional .CMsgVarField flip_v = 12 [(.var_field_type) = VAR_TYPE_STRING];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *flip_v_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPaintKit_Operation_TextureStage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgPaintKit_Operation_TextureStage)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPaintKit_Operation_TextureStage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgPaintKit_Operation_TextureStage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgPaintKit_Operation_TextureStage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgPaintKit_Operation_TextureStage)
    MergeFrom(*source);
  }
}

void CMsgPaintKit_Operation_TextureStage::MergeFrom(const CMsgPaintKit_Operation_TextureStage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgPaintKit_Operation_TextureStage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_texture()->::CMsgVarField::MergeFrom(from._internal_texture());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_texture_red()->::CMsgVarField::MergeFrom(from._internal_texture_red());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_texture_blue()->::CMsgVarField::MergeFrom(from._internal_texture_blue());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_adjust_black()->::CMsgVarField::MergeFrom(from._internal_adjust_black());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_adjust_offset()->::CMsgVarField::MergeFrom(from._internal_adjust_offset());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_adjust_gamma()->::CMsgVarField::MergeFrom(from._internal_adjust_gamma());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_rotation()->::CMsgVarField::MergeFrom(from._internal_rotation());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_translate_u()->::CMsgVarField::MergeFrom(from._internal_translate_u());
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_translate_v()->::CMsgVarField::MergeFrom(from._internal_translate_v());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_scale_uv()->::CMsgVarField::MergeFrom(from._internal_scale_uv());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_flip_u()->::CMsgVarField::MergeFrom(from._internal_flip_u());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_flip_v()->::CMsgVarField::MergeFrom(from._internal_flip_v());
    }
  }
}

void CMsgPaintKit_Operation_TextureStage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgPaintKit_Operation_TextureStage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPaintKit_Operation_TextureStage::CopyFrom(const CMsgPaintKit_Operation_TextureStage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPaintKit_Operation_TextureStage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPaintKit_Operation_TextureStage::IsInitialized() const {
  return true;
}

void CMsgPaintKit_Operation_TextureStage::InternalSwap(CMsgPaintKit_Operation_TextureStage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgPaintKit_Operation_TextureStage, flip_v_)
      + sizeof(CMsgPaintKit_Operation_TextureStage::flip_v_)
      - PROTOBUF_FIELD_OFFSET(CMsgPaintKit_Operation_TextureStage, texture_)>(
          reinterpret_cast<char*>(&texture_),
          reinterpret_cast<char*>(&other->texture_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPaintKit_Operation_TextureStage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fproto_5fdef_5fmessages_2eproto_getter, &descriptor_table_tf_5fproto_5fdef_5fmessages_2eproto_once,
      file_level_metadata_tf_5fproto_5fdef_5fmessages_2eproto[18]);
}

// ===================================================================

class CMsgPaintKit_Operation_CombineStage::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgPaintKit_Operation_CombineStage>()._has_bits_);
  static const ::CMsgVarField& adjust_black(const CMsgPaintKit_Operation_CombineStage* msg);
  static void set_has_adjust_black(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgVarField& adjust_offset(const CMsgPaintKit_Operation_CombineStage* msg);
  static void set_has_adjust_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgVarField& adjust_gamma(const CMsgPaintKit_Operation_CombineStage* msg);
  static void set_has_adjust_gamma(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CMsgVarField& rotation(const CMsgPaintKit_Operation_CombineStage* msg);
  static void set_has_rotation(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::CMsgVarField& translate_u(const CMsgPaintKit_Operation_CombineStage* msg);
  static void set_has_translate_u(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::CMsgVarField& translate_v(const CMsgPaintKit_Operation_CombineStage* msg);
  static void set_has_translate_v(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::CMsgVarField& scale_uv(const CMsgPaintKit_Operation_CombineStage* msg);
  static void set_has_scale_uv(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::CMsgVarField& flip_u(const CMsgPaintKit_Operation_CombineStage* msg);
  static void set_has_flip_u(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::CMsgVarField& flip_v(const CMsgPaintKit_Operation_CombineStage* msg);
  static void set_has_flip_v(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

const ::CMsgVarField&
CMsgPaintKit_Operation_CombineStage::_Internal::adjust_black(const CMsgPaintKit_Operation_CombineStage* msg) {
  return *msg->adjust_black_;
}
const ::CMsgVarField&
CMsgPaintKit_Operation_CombineStage::_Internal::adjust_offset(const CMsgPaintKit_Operation_CombineStage* msg) {
  return *msg->adjust_offset_;
}
const ::CMsgVarField&
CMsgPaintKit_Operation_CombineStage::_Internal::adjust_gamma(const CMsgPaintKit_Operation_CombineStage* msg) {
  return *msg->adjust_gamma_;
}
const ::CMsgVarField&
CMsgPaintKit_Operation_CombineStage::_Internal::rotation(const CMsgPaintKit_Operation_CombineStage* msg) {
  return *msg->rotation_;
}
const ::CMsgVarField&
CMsgPaintKit_Operation_CombineStage::_Internal::translate_u(const CMsgPaintKit_Operation_CombineStage* msg) {
  return *msg->translate_u_;
}
const ::CMsgVarField&
CMsgPaintKit_Operation_CombineStage::_Internal::translate_v(const CMsgPaintKit_Operation_CombineStage* msg) {
  return *msg->translate_v_;
}
const ::CMsgVarField&
CMsgPaintKit_Operation_CombineStage::_Internal::scale_uv(const CMsgPaintKit_Operation_CombineStage* msg) {
  return *msg->scale_uv_;
}
const ::CMsgVarField&
CMsgPaintKit_Operation_CombineStage::_Internal::flip_u(const CMsgPaintKit_Operation_CombineStage* msg) {
  return *msg->flip_u_;
}
const ::CMsgVarField&
CMsgPaintKit_Operation_CombineStage::_Internal::flip_v(const CMsgPaintKit_Operation_CombineStage* msg) {
  return *msg->flip_v_;
}
CMsgPaintKit_Operation_CombineStage::CMsgPaintKit_Operation_CombineStage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  operation_node_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgPaintKit_Operation_CombineStage)
}
CMsgPaintKit_Operation_CombineStage::CMsgPaintKit_Operation_CombineStage(const CMsgPaintKit_Operation_CombineStage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      operation_node_(from.operation_node_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_adjust_black()) {
    adjust_black_ = new ::CMsgVarField(*from.adjust_black_);
  } else {
    adjust_black_ = nullptr;
  }
  if (from._internal_has_adjust_offset()) {
    adjust_offset_ = new ::CMsgVarField(*from.adjust_offset_);
  } else {
    adjust_offset_ = nullptr;
  }
  if (from._internal_has_adjust_gamma()) {
    adjust_gamma_ = new ::CMsgVarField(*from.adjust_gamma_);
  } else {
    adjust_gamma_ = nullptr;
  }
  if (from._internal_has_rotation()) {
    rotation_ = new ::CMsgVarField(*from.rotation_);
  } else {
    rotation_ = nullptr;
  }
  if (from._internal_has_translate_u()) {
    translate_u_ = new ::CMsgVarField(*from.translate_u_);
  } else {
    translate_u_ = nullptr;
  }
  if (from._internal_has_translate_v()) {
    translate_v_ = new ::CMsgVarField(*from.translate_v_);
  } else {
    translate_v_ = nullptr;
  }
  if (from._internal_has_scale_uv()) {
    scale_uv_ = new ::CMsgVarField(*from.scale_uv_);
  } else {
    scale_uv_ = nullptr;
  }
  if (from._internal_has_flip_u()) {
    flip_u_ = new ::CMsgVarField(*from.flip_u_);
  } else {
    flip_u_ = nullptr;
  }
  if (from._internal_has_flip_v()) {
    flip_v_ = new ::CMsgVarField(*from.flip_v_);
  } else {
    flip_v_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CMsgPaintKit_Operation_CombineStage)
}

void CMsgPaintKit_Operation_CombineStage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&adjust_black_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&flip_v_) -
    reinterpret_cast<char*>(&adjust_black_)) + sizeof(flip_v_));
}

CMsgPaintKit_Operation_CombineStage::~CMsgPaintKit_Operation_CombineStage() {
  // @@protoc_insertion_point(destructor:CMsgPaintKit_Operation_CombineStage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgPaintKit_Operation_CombineStage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete adjust_black_;
  if (this != internal_default_instance()) delete adjust_offset_;
  if (this != internal_default_instance()) delete adjust_gamma_;
  if (this != internal_default_instance()) delete rotation_;
  if (this != internal_default_instance()) delete translate_u_;
  if (this != internal_default_instance()) delete translate_v_;
  if (this != internal_default_instance()) delete scale_uv_;
  if (this != internal_default_instance()) delete flip_u_;
  if (this != internal_default_instance()) delete flip_v_;
}

void CMsgPaintKit_Operation_CombineStage::ArenaDtor(void* object) {
  CMsgPaintKit_Operation_CombineStage* _this = reinterpret_cast< CMsgPaintKit_Operation_CombineStage* >(object);
  (void)_this;
}
void CMsgPaintKit_Operation_CombineStage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgPaintKit_Operation_CombineStage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgPaintKit_Operation_CombineStage::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPaintKit_Operation_CombineStage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  operation_node_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(adjust_black_ != nullptr);
      adjust_black_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(adjust_offset_ != nullptr);
      adjust_offset_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(adjust_gamma_ != nullptr);
      adjust_gamma_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(rotation_ != nullptr);
      rotation_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(translate_u_ != nullptr);
      translate_u_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(translate_v_ != nullptr);
      translate_v_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(scale_uv_ != nullptr);
      scale_uv_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(flip_u_ != nullptr);
      flip_u_->Clear();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(flip_v_ != nullptr);
    flip_v_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPaintKit_Operation_CombineStage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgVarField adjust_black = 1 [(.var_field_type) = VAR_TYPE_STRING];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_adjust_black(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgVarField adjust_offset = 2 [(.var_field_type) = VAR_TYPE_STRING];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_adjust_offset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgVarField adjust_gamma = 3 [(.var_field_type) = VAR_TYPE_STRING];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_adjust_gamma(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgVarField rotation = 4 [(.var_field_type) = VAR_TYPE_STRING];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_rotation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgVarField translate_u = 5 [(.var_field_type) = VAR_TYPE_STRING];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_translate_u(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgVarField translate_v = 6 [(.var_field_type) = VAR_TYPE_STRING];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_translate_v(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgVarField scale_uv = 7 [(.var_field_type) = VAR_TYPE_STRING];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_scale_uv(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgVarField flip_u = 8 [(.var_field_type) = VAR_TYPE_STRING];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_flip_u(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgVarField flip_v = 9 [(.var_field_type) = VAR_TYPE_STRING];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_flip_v(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgPaintKit_OperationNode operation_node = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_operation_node(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgPaintKit_Operation_CombineStage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPaintKit_Operation_CombineStage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgVarField adjust_black = 1 [(.var_field_type) = VAR_TYPE_STRING];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::adjust_black(this), target, stream);
  }

  // optional .CMsgVarField adjust_offset = 2 [(.var_field_type) = VAR_TYPE_STRING];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::adjust_offset(this), target, stream);
  }

  // optional .CMsgVarField adjust_gamma = 3 [(.var_field_type) = VAR_TYPE_STRING];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::adjust_gamma(this), target, stream);
  }

  // optional .CMsgVarField rotation = 4 [(.var_field_type) = VAR_TYPE_STRING];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::rotation(this), target, stream);
  }

  // optional .CMsgVarField translate_u = 5 [(.var_field_type) = VAR_TYPE_STRING];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::translate_u(this), target, stream);
  }

  // optional .CMsgVarField translate_v = 6 [(.var_field_type) = VAR_TYPE_STRING];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::translate_v(this), target, stream);
  }

  // optional .CMsgVarField scale_uv = 7 [(.var_field_type) = VAR_TYPE_STRING];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::scale_uv(this), target, stream);
  }

  // optional .CMsgVarField flip_u = 8 [(.var_field_type) = VAR_TYPE_STRING];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::flip_u(this), target, stream);
  }

  // optional .CMsgVarField flip_v = 9 [(.var_field_type) = VAR_TYPE_STRING];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::flip_v(this), target, stream);
  }

  // repeated .CMsgPaintKit_OperationNode operation_node = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_operation_node_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_operation_node(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPaintKit_Operation_CombineStage)
  return target;
}

size_t CMsgPaintKit_Operation_CombineStage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPaintKit_Operation_CombineStage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgPaintKit_OperationNode operation_node = 11;
  total_size += 1UL * this->_internal_operation_node_size();
  for (const auto& msg : this->operation_node_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .CMsgVarField adjust_black = 1 [(.var_field_type) = VAR_TYPE_STRING];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *adjust_black_);
    }

    // optional .CMsgVarField adjust_offset = 2 [(.var_field_type) = VAR_TYPE_STRING];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *adjust_offset_);
    }

    // optional .CMsgVarField adjust_gamma = 3 [(.var_field_type) = VAR_TYPE_STRING];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *adjust_gamma_);
    }

    // optional .CMsgVarField rotation = 4 [(.var_field_type) = VAR_TYPE_STRING];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rotation_);
    }

    // optional .CMsgVarField translate_u = 5 [(.var_field_type) = VAR_TYPE_STRING];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *translate_u_);
    }

    // optional .CMsgVarField translate_v = 6 [(.var_field_type) = VAR_TYPE_STRING];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *translate_v_);
    }

    // optional .CMsgVarField scale_uv = 7 [(.var_field_type) = VAR_TYPE_STRING];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *scale_uv_);
    }

    // optional .CMsgVarField flip_u = 8 [(.var_field_type) = VAR_TYPE_STRING];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *flip_u_);
    }

  }
  // optional .CMsgVarField flip_v = 9 [(.var_field_type) = VAR_TYPE_STRING];
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *flip_v_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPaintKit_Operation_CombineStage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgPaintKit_Operation_CombineStage)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPaintKit_Operation_CombineStage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgPaintKit_Operation_CombineStage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgPaintKit_Operation_CombineStage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgPaintKit_Operation_CombineStage)
    MergeFrom(*source);
  }
}

void CMsgPaintKit_Operation_CombineStage::MergeFrom(const CMsgPaintKit_Operation_CombineStage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgPaintKit_Operation_CombineStage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  operation_node_.MergeFrom(from.operation_node_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_adjust_black()->::CMsgVarField::MergeFrom(from._internal_adjust_black());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_adjust_offset()->::CMsgVarField::MergeFrom(from._internal_adjust_offset());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_adjust_gamma()->::CMsgVarField::MergeFrom(from._internal_adjust_gamma());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_rotation()->::CMsgVarField::MergeFrom(from._internal_rotation());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_translate_u()->::CMsgVarField::MergeFrom(from._internal_translate_u());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_translate_v()->::CMsgVarField::MergeFrom(from._internal_translate_v());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_scale_uv()->::CMsgVarField::MergeFrom(from._internal_scale_uv());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_flip_u()->::CMsgVarField::MergeFrom(from._internal_flip_u());
    }
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_mutable_flip_v()->::CMsgVarField::MergeFrom(from._internal_flip_v());
  }
}

void CMsgPaintKit_Operation_CombineStage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgPaintKit_Operation_CombineStage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPaintKit_Operation_CombineStage::CopyFrom(const CMsgPaintKit_Operation_CombineStage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPaintKit_Operation_CombineStage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPaintKit_Operation_CombineStage::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(operation_node_)) return false;
  return true;
}

void CMsgPaintKit_Operation_CombineStage::InternalSwap(CMsgPaintKit_Operation_CombineStage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  operation_node_.InternalSwap(&other->operation_node_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgPaintKit_Operation_CombineStage, flip_v_)
      + sizeof(CMsgPaintKit_Operation_CombineStage::flip_v_)
      - PROTOBUF_FIELD_OFFSET(CMsgPaintKit_Operation_CombineStage, adjust_black_)>(
          reinterpret_cast<char*>(&adjust_black_),
          reinterpret_cast<char*>(&other->adjust_black_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPaintKit_Operation_CombineStage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fproto_5fdef_5fmessages_2eproto_getter, &descriptor_table_tf_5fproto_5fdef_5fmessages_2eproto_once,
      file_level_metadata_tf_5fproto_5fdef_5fmessages_2eproto[19]);
}

// ===================================================================

class CMsgPaintKit_Operation_SelectStage::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgPaintKit_Operation_SelectStage>()._has_bits_);
  static const ::CMsgVarField& groups(const CMsgPaintKit_Operation_SelectStage* msg);
  static void set_has_groups(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgVarField&
CMsgPaintKit_Operation_SelectStage::_Internal::groups(const CMsgPaintKit_Operation_SelectStage* msg) {
  return *msg->groups_;
}
CMsgPaintKit_Operation_SelectStage::CMsgPaintKit_Operation_SelectStage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  select_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgPaintKit_Operation_SelectStage)
}
CMsgPaintKit_Operation_SelectStage::CMsgPaintKit_Operation_SelectStage(const CMsgPaintKit_Operation_SelectStage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      select_(from.select_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_groups()) {
    groups_ = new ::CMsgVarField(*from.groups_);
  } else {
    groups_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CMsgPaintKit_Operation_SelectStage)
}

void CMsgPaintKit_Operation_SelectStage::SharedCtor() {
groups_ = nullptr;
}

CMsgPaintKit_Operation_SelectStage::~CMsgPaintKit_Operation_SelectStage() {
  // @@protoc_insertion_point(destructor:CMsgPaintKit_Operation_SelectStage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgPaintKit_Operation_SelectStage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete groups_;
}

void CMsgPaintKit_Operation_SelectStage::ArenaDtor(void* object) {
  CMsgPaintKit_Operation_SelectStage* _this = reinterpret_cast< CMsgPaintKit_Operation_SelectStage* >(object);
  (void)_this;
}
void CMsgPaintKit_Operation_SelectStage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgPaintKit_Operation_SelectStage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgPaintKit_Operation_SelectStage::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPaintKit_Operation_SelectStage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  select_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(groups_ != nullptr);
    groups_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPaintKit_Operation_SelectStage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgVarField groups = 1 [(.var_field_type) = VAR_TYPE_STRING];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_groups(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgVarField select = 2 [(.max_count) = 16, (.var_field_type) = VAR_TYPE_STRING];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_select(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgPaintKit_Operation_SelectStage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPaintKit_Operation_SelectStage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgVarField groups = 1 [(.var_field_type) = VAR_TYPE_STRING];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::groups(this), target, stream);
  }

  // repeated .CMsgVarField select = 2 [(.max_count) = 16, (.var_field_type) = VAR_TYPE_STRING];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_select_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_select(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPaintKit_Operation_SelectStage)
  return target;
}

size_t CMsgPaintKit_Operation_SelectStage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPaintKit_Operation_SelectStage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgVarField select = 2 [(.max_count) = 16, (.var_field_type) = VAR_TYPE_STRING];
  total_size += 1UL * this->_internal_select_size();
  for (const auto& msg : this->select_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .CMsgVarField groups = 1 [(.var_field_type) = VAR_TYPE_STRING];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *groups_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPaintKit_Operation_SelectStage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgPaintKit_Operation_SelectStage)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPaintKit_Operation_SelectStage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgPaintKit_Operation_SelectStage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgPaintKit_Operation_SelectStage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgPaintKit_Operation_SelectStage)
    MergeFrom(*source);
  }
}

void CMsgPaintKit_Operation_SelectStage::MergeFrom(const CMsgPaintKit_Operation_SelectStage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgPaintKit_Operation_SelectStage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  select_.MergeFrom(from.select_);
  if (from._internal_has_groups()) {
    _internal_mutable_groups()->::CMsgVarField::MergeFrom(from._internal_groups());
  }
}

void CMsgPaintKit_Operation_SelectStage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgPaintKit_Operation_SelectStage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPaintKit_Operation_SelectStage::CopyFrom(const CMsgPaintKit_Operation_SelectStage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPaintKit_Operation_SelectStage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPaintKit_Operation_SelectStage::IsInitialized() const {
  return true;
}

void CMsgPaintKit_Operation_SelectStage::InternalSwap(CMsgPaintKit_Operation_SelectStage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  select_.InternalSwap(&other->select_);
  swap(groups_, other->groups_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPaintKit_Operation_SelectStage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fproto_5fdef_5fmessages_2eproto_getter, &descriptor_table_tf_5fproto_5fdef_5fmessages_2eproto_once,
      file_level_metadata_tf_5fproto_5fdef_5fmessages_2eproto[20]);
}

// ===================================================================

class CMsgPaintKit_Operation_Sticker::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgPaintKit_Operation_Sticker>()._has_bits_);
  static const ::CMsgVarField& base(const CMsgPaintKit_Operation_Sticker* msg);
  static void set_has_base(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgVarField& weight(const CMsgPaintKit_Operation_Sticker* msg);
  static void set_has_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgVarField& spec(const CMsgPaintKit_Operation_Sticker* msg);
  static void set_has_spec(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::CMsgVarField&
CMsgPaintKit_Operation_Sticker::_Internal::base(const CMsgPaintKit_Operation_Sticker* msg) {
  return *msg->base_;
}
const ::CMsgVarField&
CMsgPaintKit_Operation_Sticker::_Internal::weight(const CMsgPaintKit_Operation_Sticker* msg) {
  return *msg->weight_;
}
const ::CMsgVarField&
CMsgPaintKit_Operation_Sticker::_Internal::spec(const CMsgPaintKit_Operation_Sticker* msg) {
  return *msg->spec_;
}
CMsgPaintKit_Operation_Sticker::CMsgPaintKit_Operation_Sticker(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgPaintKit_Operation_Sticker)
}
CMsgPaintKit_Operation_Sticker::CMsgPaintKit_Operation_Sticker(const CMsgPaintKit_Operation_Sticker& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base()) {
    base_ = new ::CMsgVarField(*from.base_);
  } else {
    base_ = nullptr;
  }
  if (from._internal_has_weight()) {
    weight_ = new ::CMsgVarField(*from.weight_);
  } else {
    weight_ = nullptr;
  }
  if (from._internal_has_spec()) {
    spec_ = new ::CMsgVarField(*from.spec_);
  } else {
    spec_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CMsgPaintKit_Operation_Sticker)
}

void CMsgPaintKit_Operation_Sticker::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&base_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&spec_) -
    reinterpret_cast<char*>(&base_)) + sizeof(spec_));
}

CMsgPaintKit_Operation_Sticker::~CMsgPaintKit_Operation_Sticker() {
  // @@protoc_insertion_point(destructor:CMsgPaintKit_Operation_Sticker)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgPaintKit_Operation_Sticker::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete base_;
  if (this != internal_default_instance()) delete weight_;
  if (this != internal_default_instance()) delete spec_;
}

void CMsgPaintKit_Operation_Sticker::ArenaDtor(void* object) {
  CMsgPaintKit_Operation_Sticker* _this = reinterpret_cast< CMsgPaintKit_Operation_Sticker* >(object);
  (void)_this;
}
void CMsgPaintKit_Operation_Sticker::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgPaintKit_Operation_Sticker::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgPaintKit_Operation_Sticker::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPaintKit_Operation_Sticker)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(base_ != nullptr);
      base_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(weight_ != nullptr);
      weight_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(spec_ != nullptr);
      spec_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPaintKit_Operation_Sticker::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgVarField base = 1 [(.comment) = "Name of the base file for the sticker (the albedo)", (.var_field_type) = VAR_TYPE_STRING];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgVarField weight = 2 [(.comment) = "Random likelihood this one is to be selected", (.var_field_type) = VAR_TYPE_STRING];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_weight(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgVarField spec = 3 [(.comment) = "Name of the specular file for the sticker, or if blank we will assume it is baseFilename + _spec + baseExtension", (.var_field_type) = VAR_TYPE_STRING];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgPaintKit_Operation_Sticker::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPaintKit_Operation_Sticker)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgVarField base = 1 [(.comment) = "Name of the base file for the sticker (the albedo)", (.var_field_type) = VAR_TYPE_STRING];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // optional .CMsgVarField weight = 2 [(.comment) = "Random likelihood this one is to be selected", (.var_field_type) = VAR_TYPE_STRING];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::weight(this), target, stream);
  }

  // optional .CMsgVarField spec = 3 [(.comment) = "Name of the specular file for the sticker, or if blank we will assume it is baseFilename + _spec + baseExtension", (.var_field_type) = VAR_TYPE_STRING];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::spec(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPaintKit_Operation_Sticker)
  return target;
}

size_t CMsgPaintKit_Operation_Sticker::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPaintKit_Operation_Sticker)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .CMsgVarField base = 1 [(.comment) = "Name of the base file for the sticker (the albedo)", (.var_field_type) = VAR_TYPE_STRING];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *base_);
    }

    // optional .CMsgVarField weight = 2 [(.comment) = "Random likelihood this one is to be selected", (.var_field_type) = VAR_TYPE_STRING];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *weight_);
    }

    // optional .CMsgVarField spec = 3 [(.comment) = "Name of the specular file for the sticker, or if blank we will assume it is baseFilename + _spec + baseExtension", (.var_field_type) = VAR_TYPE_STRING];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *spec_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPaintKit_Operation_Sticker::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgPaintKit_Operation_Sticker)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPaintKit_Operation_Sticker* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgPaintKit_Operation_Sticker>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgPaintKit_Operation_Sticker)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgPaintKit_Operation_Sticker)
    MergeFrom(*source);
  }
}

void CMsgPaintKit_Operation_Sticker::MergeFrom(const CMsgPaintKit_Operation_Sticker& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgPaintKit_Operation_Sticker)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_base()->::CMsgVarField::MergeFrom(from._internal_base());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_weight()->::CMsgVarField::MergeFrom(from._internal_weight());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_spec()->::CMsgVarField::MergeFrom(from._internal_spec());
    }
  }
}

void CMsgPaintKit_Operation_Sticker::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgPaintKit_Operation_Sticker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPaintKit_Operation_Sticker::CopyFrom(const CMsgPaintKit_Operation_Sticker& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPaintKit_Operation_Sticker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPaintKit_Operation_Sticker::IsInitialized() const {
  return true;
}

void CMsgPaintKit_Operation_Sticker::InternalSwap(CMsgPaintKit_Operation_Sticker* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgPaintKit_Operation_Sticker, spec_)
      + sizeof(CMsgPaintKit_Operation_Sticker::spec_)
      - PROTOBUF_FIELD_OFFSET(CMsgPaintKit_Operation_Sticker, base_)>(
          reinterpret_cast<char*>(&base_),
          reinterpret_cast<char*>(&other->base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPaintKit_Operation_Sticker::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fproto_5fdef_5fmessages_2eproto_getter, &descriptor_table_tf_5fproto_5fdef_5fmessages_2eproto_once,
      file_level_metadata_tf_5fproto_5fdef_5fmessages_2eproto[21]);
}

// ===================================================================

class CMsgPaintKit_Operation_StickerStage::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgPaintKit_Operation_StickerStage>()._has_bits_);
  static const ::CMsgVarField& dest_tl(const CMsgPaintKit_Operation_StickerStage* msg);
  static void set_has_dest_tl(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgVarField& dest_tr(const CMsgPaintKit_Operation_StickerStage* msg);
  static void set_has_dest_tr(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgVarField& dest_bl(const CMsgPaintKit_Operation_StickerStage* msg);
  static void set_has_dest_bl(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CMsgVarField& adjust_black(const CMsgPaintKit_Operation_StickerStage* msg);
  static void set_has_adjust_black(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::CMsgVarField& adjust_offset(const CMsgPaintKit_Operation_StickerStage* msg);
  static void set_has_adjust_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::CMsgVarField& adjust_gamma(const CMsgPaintKit_Operation_StickerStage* msg);
  static void set_has_adjust_gamma(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::CMsgVarField&
CMsgPaintKit_Operation_StickerStage::_Internal::dest_tl(const CMsgPaintKit_Operation_StickerStage* msg) {
  return *msg->dest_tl_;
}
const ::CMsgVarField&
CMsgPaintKit_Operation_StickerStage::_Internal::dest_tr(const CMsgPaintKit_Operation_StickerStage* msg) {
  return *msg->dest_tr_;
}
const ::CMsgVarField&
CMsgPaintKit_Operation_StickerStage::_Internal::dest_bl(const CMsgPaintKit_Operation_StickerStage* msg) {
  return *msg->dest_bl_;
}
const ::CMsgVarField&
CMsgPaintKit_Operation_StickerStage::_Internal::adjust_black(const CMsgPaintKit_Operation_StickerStage* msg) {
  return *msg->adjust_black_;
}
const ::CMsgVarField&
CMsgPaintKit_Operation_StickerStage::_Internal::adjust_offset(const CMsgPaintKit_Operation_StickerStage* msg) {
  return *msg->adjust_offset_;
}
const ::CMsgVarField&
CMsgPaintKit_Operation_StickerStage::_Internal::adjust_gamma(const CMsgPaintKit_Operation_StickerStage* msg) {
  return *msg->adjust_gamma_;
}
CMsgPaintKit_Operation_StickerStage::CMsgPaintKit_Operation_StickerStage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  sticker_(arena),
  operation_node_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgPaintKit_Operation_StickerStage)
}
CMsgPaintKit_Operation_StickerStage::CMsgPaintKit_Operation_StickerStage(const CMsgPaintKit_Operation_StickerStage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      sticker_(from.sticker_),
      operation_node_(from.operation_node_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_dest_tl()) {
    dest_tl_ = new ::CMsgVarField(*from.dest_tl_);
  } else {
    dest_tl_ = nullptr;
  }
  if (from._internal_has_dest_tr()) {
    dest_tr_ = new ::CMsgVarField(*from.dest_tr_);
  } else {
    dest_tr_ = nullptr;
  }
  if (from._internal_has_dest_bl()) {
    dest_bl_ = new ::CMsgVarField(*from.dest_bl_);
  } else {
    dest_bl_ = nullptr;
  }
  if (from._internal_has_adjust_black()) {
    adjust_black_ = new ::CMsgVarField(*from.adjust_black_);
  } else {
    adjust_black_ = nullptr;
  }
  if (from._internal_has_adjust_offset()) {
    adjust_offset_ = new ::CMsgVarField(*from.adjust_offset_);
  } else {
    adjust_offset_ = nullptr;
  }
  if (from._internal_has_adjust_gamma()) {
    adjust_gamma_ = new ::CMsgVarField(*from.adjust_gamma_);
  } else {
    adjust_gamma_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CMsgPaintKit_Operation_StickerStage)
}

void CMsgPaintKit_Operation_StickerStage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&dest_tl_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&adjust_gamma_) -
    reinterpret_cast<char*>(&dest_tl_)) + sizeof(adjust_gamma_));
}

CMsgPaintKit_Operation_StickerStage::~CMsgPaintKit_Operation_StickerStage() {
  // @@protoc_insertion_point(destructor:CMsgPaintKit_Operation_StickerStage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgPaintKit_Operation_StickerStage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete dest_tl_;
  if (this != internal_default_instance()) delete dest_tr_;
  if (this != internal_default_instance()) delete dest_bl_;
  if (this != internal_default_instance()) delete adjust_black_;
  if (this != internal_default_instance()) delete adjust_offset_;
  if (this != internal_default_instance()) delete adjust_gamma_;
}

void CMsgPaintKit_Operation_StickerStage::ArenaDtor(void* object) {
  CMsgPaintKit_Operation_StickerStage* _this = reinterpret_cast< CMsgPaintKit_Operation_StickerStage* >(object);
  (void)_this;
}
void CMsgPaintKit_Operation_StickerStage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgPaintKit_Operation_StickerStage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgPaintKit_Operation_StickerStage::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPaintKit_Operation_StickerStage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sticker_.Clear();
  operation_node_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(dest_tl_ != nullptr);
      dest_tl_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(dest_tr_ != nullptr);
      dest_tr_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(dest_bl_ != nullptr);
      dest_bl_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(adjust_black_ != nullptr);
      adjust_black_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(adjust_offset_ != nullptr);
      adjust_offset_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(adjust_gamma_ != nullptr);
      adjust_gamma_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPaintKit_Operation_StickerStage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgPaintKit_Operation_Sticker sticker = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sticker(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .CMsgVarField dest_tl = 2 [(.var_field_type) = VAR_TYPE_STRING];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_dest_tl(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgVarField dest_tr = 3 [(.var_field_type) = VAR_TYPE_STRING];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_dest_tr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgVarField dest_bl = 4 [(.var_field_type) = VAR_TYPE_STRING];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_dest_bl(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgVarField adjust_black = 5 [(.var_field_type) = VAR_TYPE_STRING];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_adjust_black(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgVarField adjust_offset = 6 [(.var_field_type) = VAR_TYPE_STRING];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_adjust_offset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgVarField adjust_gamma = 7 [(.var_field_type) = VAR_TYPE_STRING];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_adjust_gamma(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgPaintKit_OperationNode operation_node = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_operation_node(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgPaintKit_Operation_StickerStage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPaintKit_Operation_StickerStage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgPaintKit_Operation_Sticker sticker = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sticker_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_sticker(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .CMsgVarField dest_tl = 2 [(.var_field_type) = VAR_TYPE_STRING];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::dest_tl(this), target, stream);
  }

  // optional .CMsgVarField dest_tr = 3 [(.var_field_type) = VAR_TYPE_STRING];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::dest_tr(this), target, stream);
  }

  // optional .CMsgVarField dest_bl = 4 [(.var_field_type) = VAR_TYPE_STRING];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::dest_bl(this), target, stream);
  }

  // optional .CMsgVarField adjust_black = 5 [(.var_field_type) = VAR_TYPE_STRING];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::adjust_black(this), target, stream);
  }

  // optional .CMsgVarField adjust_offset = 6 [(.var_field_type) = VAR_TYPE_STRING];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::adjust_offset(this), target, stream);
  }

  // optional .CMsgVarField adjust_gamma = 7 [(.var_field_type) = VAR_TYPE_STRING];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::adjust_gamma(this), target, stream);
  }

  // repeated .CMsgPaintKit_OperationNode operation_node = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_operation_node_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_operation_node(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPaintKit_Operation_StickerStage)
  return target;
}

size_t CMsgPaintKit_Operation_StickerStage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPaintKit_Operation_StickerStage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgPaintKit_Operation_Sticker sticker = 1;
  total_size += 1UL * this->_internal_sticker_size();
  for (const auto& msg : this->sticker_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgPaintKit_OperationNode operation_node = 9;
  total_size += 1UL * this->_internal_operation_node_size();
  for (const auto& msg : this->operation_node_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .CMsgVarField dest_tl = 2 [(.var_field_type) = VAR_TYPE_STRING];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dest_tl_);
    }

    // optional .CMsgVarField dest_tr = 3 [(.var_field_type) = VAR_TYPE_STRING];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dest_tr_);
    }

    // optional .CMsgVarField dest_bl = 4 [(.var_field_type) = VAR_TYPE_STRING];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dest_bl_);
    }

    // optional .CMsgVarField adjust_black = 5 [(.var_field_type) = VAR_TYPE_STRING];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *adjust_black_);
    }

    // optional .CMsgVarField adjust_offset = 6 [(.var_field_type) = VAR_TYPE_STRING];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *adjust_offset_);
    }

    // optional .CMsgVarField adjust_gamma = 7 [(.var_field_type) = VAR_TYPE_STRING];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *adjust_gamma_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPaintKit_Operation_StickerStage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgPaintKit_Operation_StickerStage)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPaintKit_Operation_StickerStage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgPaintKit_Operation_StickerStage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgPaintKit_Operation_StickerStage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgPaintKit_Operation_StickerStage)
    MergeFrom(*source);
  }
}

void CMsgPaintKit_Operation_StickerStage::MergeFrom(const CMsgPaintKit_Operation_StickerStage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgPaintKit_Operation_StickerStage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sticker_.MergeFrom(from.sticker_);
  operation_node_.MergeFrom(from.operation_node_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_dest_tl()->::CMsgVarField::MergeFrom(from._internal_dest_tl());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_dest_tr()->::CMsgVarField::MergeFrom(from._internal_dest_tr());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_dest_bl()->::CMsgVarField::MergeFrom(from._internal_dest_bl());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_adjust_black()->::CMsgVarField::MergeFrom(from._internal_adjust_black());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_adjust_offset()->::CMsgVarField::MergeFrom(from._internal_adjust_offset());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_adjust_gamma()->::CMsgVarField::MergeFrom(from._internal_adjust_gamma());
    }
  }
}

void CMsgPaintKit_Operation_StickerStage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgPaintKit_Operation_StickerStage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPaintKit_Operation_StickerStage::CopyFrom(const CMsgPaintKit_Operation_StickerStage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPaintKit_Operation_StickerStage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPaintKit_Operation_StickerStage::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(operation_node_)) return false;
  return true;
}

void CMsgPaintKit_Operation_StickerStage::InternalSwap(CMsgPaintKit_Operation_StickerStage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sticker_.InternalSwap(&other->sticker_);
  operation_node_.InternalSwap(&other->operation_node_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgPaintKit_Operation_StickerStage, adjust_gamma_)
      + sizeof(CMsgPaintKit_Operation_StickerStage::adjust_gamma_)
      - PROTOBUF_FIELD_OFFSET(CMsgPaintKit_Operation_StickerStage, dest_tl_)>(
          reinterpret_cast<char*>(&dest_tl_),
          reinterpret_cast<char*>(&other->dest_tl_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPaintKit_Operation_StickerStage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fproto_5fdef_5fmessages_2eproto_getter, &descriptor_table_tf_5fproto_5fdef_5fmessages_2eproto_once,
      file_level_metadata_tf_5fproto_5fdef_5fmessages_2eproto[22]);
}

// ===================================================================

class CMsgPaintKit_OperationStage::_Internal {
 public:
  static const ::CMsgPaintKit_Operation_TextureStage& texture_lookup(const CMsgPaintKit_OperationStage* msg);
  static const ::CMsgPaintKit_Operation_CombineStage& combine_add(const CMsgPaintKit_OperationStage* msg);
  static const ::CMsgPaintKit_Operation_CombineStage& combine_lerp(const CMsgPaintKit_OperationStage* msg);
  static const ::CMsgPaintKit_Operation_CombineStage& combine_multiply(const CMsgPaintKit_OperationStage* msg);
  static const ::CMsgPaintKit_Operation_SelectStage& select(const CMsgPaintKit_OperationStage* msg);
  static const ::CMsgPaintKit_Operation_StickerStage& apply_sticker(const CMsgPaintKit_OperationStage* msg);
};

const ::CMsgPaintKit_Operation_TextureStage&
CMsgPaintKit_OperationStage::_Internal::texture_lookup(const CMsgPaintKit_OperationStage* msg) {
  return *msg->stage_.texture_lookup_;
}
const ::CMsgPaintKit_Operation_CombineStage&
CMsgPaintKit_OperationStage::_Internal::combine_add(const CMsgPaintKit_OperationStage* msg) {
  return *msg->stage_.combine_add_;
}
const ::CMsgPaintKit_Operation_CombineStage&
CMsgPaintKit_OperationStage::_Internal::combine_lerp(const CMsgPaintKit_OperationStage* msg) {
  return *msg->stage_.combine_lerp_;
}
const ::CMsgPaintKit_Operation_CombineStage&
CMsgPaintKit_OperationStage::_Internal::combine_multiply(const CMsgPaintKit_OperationStage* msg) {
  return *msg->stage_.combine_multiply_;
}
const ::CMsgPaintKit_Operation_SelectStage&
CMsgPaintKit_OperationStage::_Internal::select(const CMsgPaintKit_OperationStage* msg) {
  return *msg->stage_.select_;
}
const ::CMsgPaintKit_Operation_StickerStage&
CMsgPaintKit_OperationStage::_Internal::apply_sticker(const CMsgPaintKit_OperationStage* msg) {
  return *msg->stage_.apply_sticker_;
}
void CMsgPaintKit_OperationStage::set_allocated_texture_lookup(::CMsgPaintKit_Operation_TextureStage* texture_lookup) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_stage();
  if (texture_lookup) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgPaintKit_Operation_TextureStage>::GetOwningArena(texture_lookup);
    if (message_arena != submessage_arena) {
      texture_lookup = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, texture_lookup, submessage_arena);
    }
    set_has_texture_lookup();
    stage_.texture_lookup_ = texture_lookup;
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_OperationStage.texture_lookup)
}
void CMsgPaintKit_OperationStage::set_allocated_combine_add(::CMsgPaintKit_Operation_CombineStage* combine_add) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_stage();
  if (combine_add) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgPaintKit_Operation_CombineStage>::GetOwningArena(combine_add);
    if (message_arena != submessage_arena) {
      combine_add = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, combine_add, submessage_arena);
    }
    set_has_combine_add();
    stage_.combine_add_ = combine_add;
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_OperationStage.combine_add)
}
void CMsgPaintKit_OperationStage::set_allocated_combine_lerp(::CMsgPaintKit_Operation_CombineStage* combine_lerp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_stage();
  if (combine_lerp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgPaintKit_Operation_CombineStage>::GetOwningArena(combine_lerp);
    if (message_arena != submessage_arena) {
      combine_lerp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, combine_lerp, submessage_arena);
    }
    set_has_combine_lerp();
    stage_.combine_lerp_ = combine_lerp;
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_OperationStage.combine_lerp)
}
void CMsgPaintKit_OperationStage::set_allocated_combine_multiply(::CMsgPaintKit_Operation_CombineStage* combine_multiply) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_stage();
  if (combine_multiply) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgPaintKit_Operation_CombineStage>::GetOwningArena(combine_multiply);
    if (message_arena != submessage_arena) {
      combine_multiply = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, combine_multiply, submessage_arena);
    }
    set_has_combine_multiply();
    stage_.combine_multiply_ = combine_multiply;
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_OperationStage.combine_multiply)
}
void CMsgPaintKit_OperationStage::set_allocated_select(::CMsgPaintKit_Operation_SelectStage* select) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_stage();
  if (select) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgPaintKit_Operation_SelectStage>::GetOwningArena(select);
    if (message_arena != submessage_arena) {
      select = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, select, submessage_arena);
    }
    set_has_select();
    stage_.select_ = select;
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_OperationStage.select)
}
void CMsgPaintKit_OperationStage::set_allocated_apply_sticker(::CMsgPaintKit_Operation_StickerStage* apply_sticker) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_stage();
  if (apply_sticker) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgPaintKit_Operation_StickerStage>::GetOwningArena(apply_sticker);
    if (message_arena != submessage_arena) {
      apply_sticker = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, apply_sticker, submessage_arena);
    }
    set_has_apply_sticker();
    stage_.apply_sticker_ = apply_sticker;
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_OperationStage.apply_sticker)
}
CMsgPaintKit_OperationStage::CMsgPaintKit_OperationStage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgPaintKit_OperationStage)
}
CMsgPaintKit_OperationStage::CMsgPaintKit_OperationStage(const CMsgPaintKit_OperationStage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_stage();
  switch (from.stage_case()) {
    case kTextureLookup: {
      _internal_mutable_texture_lookup()->::CMsgPaintKit_Operation_TextureStage::MergeFrom(from._internal_texture_lookup());
      break;
    }
    case kCombineAdd: {
      _internal_mutable_combine_add()->::CMsgPaintKit_Operation_CombineStage::MergeFrom(from._internal_combine_add());
      break;
    }
    case kCombineLerp: {
      _internal_mutable_combine_lerp()->::CMsgPaintKit_Operation_CombineStage::MergeFrom(from._internal_combine_lerp());
      break;
    }
    case kCombineMultiply: {
      _internal_mutable_combine_multiply()->::CMsgPaintKit_Operation_CombineStage::MergeFrom(from._internal_combine_multiply());
      break;
    }
    case kSelect: {
      _internal_mutable_select()->::CMsgPaintKit_Operation_SelectStage::MergeFrom(from._internal_select());
      break;
    }
    case kApplySticker: {
      _internal_mutable_apply_sticker()->::CMsgPaintKit_Operation_StickerStage::MergeFrom(from._internal_apply_sticker());
      break;
    }
    case STAGE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:CMsgPaintKit_OperationStage)
}

void CMsgPaintKit_OperationStage::SharedCtor() {
clear_has_stage();
}

CMsgPaintKit_OperationStage::~CMsgPaintKit_OperationStage() {
  // @@protoc_insertion_point(destructor:CMsgPaintKit_OperationStage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgPaintKit_OperationStage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_stage()) {
    clear_stage();
  }
}

void CMsgPaintKit_OperationStage::ArenaDtor(void* object) {
  CMsgPaintKit_OperationStage* _this = reinterpret_cast< CMsgPaintKit_OperationStage* >(object);
  (void)_this;
}
void CMsgPaintKit_OperationStage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgPaintKit_OperationStage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgPaintKit_OperationStage::clear_stage() {
// @@protoc_insertion_point(one_of_clear_start:CMsgPaintKit_OperationStage)
  switch (stage_case()) {
    case kTextureLookup: {
      if (GetArenaForAllocation() == nullptr) {
        delete stage_.texture_lookup_;
      }
      break;
    }
    case kCombineAdd: {
      if (GetArenaForAllocation() == nullptr) {
        delete stage_.combine_add_;
      }
      break;
    }
    case kCombineLerp: {
      if (GetArenaForAllocation() == nullptr) {
        delete stage_.combine_lerp_;
      }
      break;
    }
    case kCombineMultiply: {
      if (GetArenaForAllocation() == nullptr) {
        delete stage_.combine_multiply_;
      }
      break;
    }
    case kSelect: {
      if (GetArenaForAllocation() == nullptr) {
        delete stage_.select_;
      }
      break;
    }
    case kApplySticker: {
      if (GetArenaForAllocation() == nullptr) {
        delete stage_.apply_sticker_;
      }
      break;
    }
    case STAGE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = STAGE_NOT_SET;
}


void CMsgPaintKit_OperationStage::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPaintKit_OperationStage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_stage();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPaintKit_OperationStage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .CMsgPaintKit_Operation_TextureStage texture_lookup = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_texture_lookup(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CMsgPaintKit_Operation_CombineStage combine_add = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_combine_add(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CMsgPaintKit_Operation_CombineStage combine_lerp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_combine_lerp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CMsgPaintKit_Operation_CombineStage combine_multiply = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_combine_multiply(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CMsgPaintKit_Operation_SelectStage select = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_select(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CMsgPaintKit_Operation_StickerStage apply_sticker = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_apply_sticker(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgPaintKit_OperationStage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPaintKit_OperationStage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (stage_case()) {
    case kTextureLookup: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          1, _Internal::texture_lookup(this), target, stream);
      break;
    }
    case kCombineAdd: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          2, _Internal::combine_add(this), target, stream);
      break;
    }
    case kCombineLerp: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          3, _Internal::combine_lerp(this), target, stream);
      break;
    }
    case kCombineMultiply: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          4, _Internal::combine_multiply(this), target, stream);
      break;
    }
    case kSelect: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          5, _Internal::select(this), target, stream);
      break;
    }
    case kApplySticker: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          6, _Internal::apply_sticker(this), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPaintKit_OperationStage)
  return target;
}

size_t CMsgPaintKit_OperationStage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPaintKit_OperationStage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (stage_case()) {
    // .CMsgPaintKit_Operation_TextureStage texture_lookup = 1;
    case kTextureLookup: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stage_.texture_lookup_);
      break;
    }
    // .CMsgPaintKit_Operation_CombineStage combine_add = 2;
    case kCombineAdd: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stage_.combine_add_);
      break;
    }
    // .CMsgPaintKit_Operation_CombineStage combine_lerp = 3;
    case kCombineLerp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stage_.combine_lerp_);
      break;
    }
    // .CMsgPaintKit_Operation_CombineStage combine_multiply = 4;
    case kCombineMultiply: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stage_.combine_multiply_);
      break;
    }
    // .CMsgPaintKit_Operation_SelectStage select = 5;
    case kSelect: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stage_.select_);
      break;
    }
    // .CMsgPaintKit_Operation_StickerStage apply_sticker = 6;
    case kApplySticker: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stage_.apply_sticker_);
      break;
    }
    case STAGE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPaintKit_OperationStage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgPaintKit_OperationStage)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPaintKit_OperationStage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgPaintKit_OperationStage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgPaintKit_OperationStage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgPaintKit_OperationStage)
    MergeFrom(*source);
  }
}

void CMsgPaintKit_OperationStage::MergeFrom(const CMsgPaintKit_OperationStage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgPaintKit_OperationStage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.stage_case()) {
    case kTextureLookup: {
      _internal_mutable_texture_lookup()->::CMsgPaintKit_Operation_TextureStage::MergeFrom(from._internal_texture_lookup());
      break;
    }
    case kCombineAdd: {
      _internal_mutable_combine_add()->::CMsgPaintKit_Operation_CombineStage::MergeFrom(from._internal_combine_add());
      break;
    }
    case kCombineLerp: {
      _internal_mutable_combine_lerp()->::CMsgPaintKit_Operation_CombineStage::MergeFrom(from._internal_combine_lerp());
      break;
    }
    case kCombineMultiply: {
      _internal_mutable_combine_multiply()->::CMsgPaintKit_Operation_CombineStage::MergeFrom(from._internal_combine_multiply());
      break;
    }
    case kSelect: {
      _internal_mutable_select()->::CMsgPaintKit_Operation_SelectStage::MergeFrom(from._internal_select());
      break;
    }
    case kApplySticker: {
      _internal_mutable_apply_sticker()->::CMsgPaintKit_Operation_StickerStage::MergeFrom(from._internal_apply_sticker());
      break;
    }
    case STAGE_NOT_SET: {
      break;
    }
  }
}

void CMsgPaintKit_OperationStage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgPaintKit_OperationStage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPaintKit_OperationStage::CopyFrom(const CMsgPaintKit_OperationStage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPaintKit_OperationStage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPaintKit_OperationStage::IsInitialized() const {
  switch (stage_case()) {
    case kTextureLookup: {
      break;
    }
    case kCombineAdd: {
      if (has_combine_add()) {
        if (!this->combine_add().IsInitialized()) return false;
      }
      break;
    }
    case kCombineLerp: {
      if (has_combine_lerp()) {
        if (!this->combine_lerp().IsInitialized()) return false;
      }
      break;
    }
    case kCombineMultiply: {
      if (has_combine_multiply()) {
        if (!this->combine_multiply().IsInitialized()) return false;
      }
      break;
    }
    case kSelect: {
      break;
    }
    case kApplySticker: {
      if (has_apply_sticker()) {
        if (!this->apply_sticker().IsInitialized()) return false;
      }
      break;
    }
    case STAGE_NOT_SET: {
      break;
    }
  }
  return true;
}

void CMsgPaintKit_OperationStage::InternalSwap(CMsgPaintKit_OperationStage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(stage_, other->stage_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPaintKit_OperationStage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fproto_5fdef_5fmessages_2eproto_getter, &descriptor_table_tf_5fproto_5fdef_5fmessages_2eproto_once,
      file_level_metadata_tf_5fproto_5fdef_5fmessages_2eproto[23]);
}

// ===================================================================

class CMsgPaintKit_OperationNode::_Internal {
 public:
  static const ::CMsgPaintKit_OperationStage& stage(const CMsgPaintKit_OperationNode* msg);
  static const ::CMsgProtoDefID& operation_template(const CMsgPaintKit_OperationNode* msg);
};

const ::CMsgPaintKit_OperationStage&
CMsgPaintKit_OperationNode::_Internal::stage(const CMsgPaintKit_OperationNode* msg) {
  return *msg->node_.stage_;
}
const ::CMsgProtoDefID&
CMsgPaintKit_OperationNode::_Internal::operation_template(const CMsgPaintKit_OperationNode* msg) {
  return *msg->node_.operation_template_;
}
void CMsgPaintKit_OperationNode::set_allocated_stage(::CMsgPaintKit_OperationStage* stage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (stage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgPaintKit_OperationStage>::GetOwningArena(stage);
    if (message_arena != submessage_arena) {
      stage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stage, submessage_arena);
    }
    set_has_stage();
    node_.stage_ = stage;
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_OperationNode.stage)
}
void CMsgPaintKit_OperationNode::set_allocated_operation_template(::CMsgProtoDefID* operation_template) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (operation_template) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgProtoDefID>::GetOwningArena(operation_template);
    if (message_arena != submessage_arena) {
      operation_template = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, operation_template, submessage_arena);
    }
    set_has_operation_template();
    node_.operation_template_ = operation_template;
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_OperationNode.operation_template)
}
CMsgPaintKit_OperationNode::CMsgPaintKit_OperationNode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgPaintKit_OperationNode)
}
CMsgPaintKit_OperationNode::CMsgPaintKit_OperationNode(const CMsgPaintKit_OperationNode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_node();
  switch (from.node_case()) {
    case kStage: {
      _internal_mutable_stage()->::CMsgPaintKit_OperationStage::MergeFrom(from._internal_stage());
      break;
    }
    case kOperationTemplate: {
      _internal_mutable_operation_template()->::CMsgProtoDefID::MergeFrom(from._internal_operation_template());
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:CMsgPaintKit_OperationNode)
}

void CMsgPaintKit_OperationNode::SharedCtor() {
clear_has_node();
}

CMsgPaintKit_OperationNode::~CMsgPaintKit_OperationNode() {
  // @@protoc_insertion_point(destructor:CMsgPaintKit_OperationNode)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgPaintKit_OperationNode::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_node()) {
    clear_node();
  }
}

void CMsgPaintKit_OperationNode::ArenaDtor(void* object) {
  CMsgPaintKit_OperationNode* _this = reinterpret_cast< CMsgPaintKit_OperationNode* >(object);
  (void)_this;
}
void CMsgPaintKit_OperationNode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgPaintKit_OperationNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgPaintKit_OperationNode::clear_node() {
// @@protoc_insertion_point(one_of_clear_start:CMsgPaintKit_OperationNode)
  switch (node_case()) {
    case kStage: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.stage_;
      }
      break;
    }
    case kOperationTemplate: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.operation_template_;
      }
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = NODE_NOT_SET;
}


void CMsgPaintKit_OperationNode::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPaintKit_OperationNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_node();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPaintKit_OperationNode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .CMsgPaintKit_OperationStage stage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CMsgProtoDefID operation_template = 2 [(.valid_type) = DEF_TYPE_PAINTKIT_OPERATION, (.inherit_reference_variables) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_operation_template(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgPaintKit_OperationNode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPaintKit_OperationNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (node_case()) {
    case kStage: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          1, _Internal::stage(this), target, stream);
      break;
    }
    case kOperationTemplate: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          2, _Internal::operation_template(this), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPaintKit_OperationNode)
  return target;
}

size_t CMsgPaintKit_OperationNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPaintKit_OperationNode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (node_case()) {
    // .CMsgPaintKit_OperationStage stage = 1;
    case kStage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *node_.stage_);
      break;
    }
    // .CMsgProtoDefID operation_template = 2 [(.valid_type) = DEF_TYPE_PAINTKIT_OPERATION, (.inherit_reference_variables) = true];
    case kOperationTemplate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *node_.operation_template_);
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPaintKit_OperationNode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgPaintKit_OperationNode)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPaintKit_OperationNode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgPaintKit_OperationNode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgPaintKit_OperationNode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgPaintKit_OperationNode)
    MergeFrom(*source);
  }
}

void CMsgPaintKit_OperationNode::MergeFrom(const CMsgPaintKit_OperationNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgPaintKit_OperationNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.node_case()) {
    case kStage: {
      _internal_mutable_stage()->::CMsgPaintKit_OperationStage::MergeFrom(from._internal_stage());
      break;
    }
    case kOperationTemplate: {
      _internal_mutable_operation_template()->::CMsgProtoDefID::MergeFrom(from._internal_operation_template());
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
}

void CMsgPaintKit_OperationNode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgPaintKit_OperationNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPaintKit_OperationNode::CopyFrom(const CMsgPaintKit_OperationNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPaintKit_OperationNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPaintKit_OperationNode::IsInitialized() const {
  switch (node_case()) {
    case kStage: {
      if (has_stage()) {
        if (!this->stage().IsInitialized()) return false;
      }
      break;
    }
    case kOperationTemplate: {
      if (has_operation_template()) {
        if (!this->operation_template().IsInitialized()) return false;
      }
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  return true;
}

void CMsgPaintKit_OperationNode::InternalSwap(CMsgPaintKit_OperationNode* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(node_, other->node_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPaintKit_OperationNode::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fproto_5fdef_5fmessages_2eproto_getter, &descriptor_table_tf_5fproto_5fdef_5fmessages_2eproto_once,
      file_level_metadata_tf_5fproto_5fdef_5fmessages_2eproto[24]);
}

// ===================================================================

class CMsgPaintKit_Operation::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgPaintKit_Operation>()._has_bits_);
  static const ::CMsgProtoDefHeader& header(const CMsgPaintKit_Operation* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::CMsgProtoDefHeader&
CMsgPaintKit_Operation::_Internal::header(const CMsgPaintKit_Operation* msg) {
  return *msg->header_;
}
CMsgPaintKit_Operation::CMsgPaintKit_Operation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  operation_node_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgPaintKit_Operation)
}
CMsgPaintKit_Operation::CMsgPaintKit_Operation(const CMsgPaintKit_Operation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      operation_node_(from.operation_node_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::CMsgProtoDefHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CMsgPaintKit_Operation)
}

void CMsgPaintKit_Operation::SharedCtor() {
header_ = nullptr;
}

CMsgPaintKit_Operation::~CMsgPaintKit_Operation() {
  // @@protoc_insertion_point(destructor:CMsgPaintKit_Operation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgPaintKit_Operation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void CMsgPaintKit_Operation::ArenaDtor(void* object) {
  CMsgPaintKit_Operation* _this = reinterpret_cast< CMsgPaintKit_Operation* >(object);
  (void)_this;
}
void CMsgPaintKit_Operation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgPaintKit_Operation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgPaintKit_Operation::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPaintKit_Operation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  operation_node_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != nullptr);
    header_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPaintKit_Operation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .CMsgProtoDefHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgPaintKit_OperationNode operation_node = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_operation_node(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgPaintKit_Operation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPaintKit_Operation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .CMsgProtoDefHeader header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // repeated .CMsgPaintKit_OperationNode operation_node = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_operation_node_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_operation_node(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPaintKit_Operation)
  return target;
}

size_t CMsgPaintKit_Operation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPaintKit_Operation)
  size_t total_size = 0;

  // required .CMsgProtoDefHeader header = 1;
  if (_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgPaintKit_OperationNode operation_node = 2;
  total_size += 1UL * this->_internal_operation_node_size();
  for (const auto& msg : this->operation_node_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPaintKit_Operation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgPaintKit_Operation)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPaintKit_Operation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgPaintKit_Operation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgPaintKit_Operation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgPaintKit_Operation)
    MergeFrom(*source);
  }
}

void CMsgPaintKit_Operation::MergeFrom(const CMsgPaintKit_Operation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgPaintKit_Operation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  operation_node_.MergeFrom(from.operation_node_);
  if (from._internal_has_header()) {
    _internal_mutable_header()->::CMsgProtoDefHeader::MergeFrom(from._internal_header());
  }
}

void CMsgPaintKit_Operation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgPaintKit_Operation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPaintKit_Operation::CopyFrom(const CMsgPaintKit_Operation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPaintKit_Operation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPaintKit_Operation::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(operation_node_)) return false;
  if (_internal_has_header()) {
    if (!header_->IsInitialized()) return false;
  }
  return true;
}

void CMsgPaintKit_Operation::InternalSwap(CMsgPaintKit_Operation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  operation_node_.InternalSwap(&other->operation_node_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPaintKit_Operation::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fproto_5fdef_5fmessages_2eproto_getter, &descriptor_table_tf_5fproto_5fdef_5fmessages_2eproto_once,
      file_level_metadata_tf_5fproto_5fdef_5fmessages_2eproto[25]);
}

// ===================================================================

class CMsgPaintKit_ItemDefinition_Definition::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgPaintKit_ItemDefinition_Definition>()._has_bits_);
  static const ::CMsgProtoDefID& operation_template(const CMsgPaintKit_ItemDefinition_Definition* msg);
  static void set_has_operation_template(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgProtoDefID&
CMsgPaintKit_ItemDefinition_Definition::_Internal::operation_template(const CMsgPaintKit_ItemDefinition_Definition* msg) {
  return *msg->operation_template_;
}
CMsgPaintKit_ItemDefinition_Definition::CMsgPaintKit_ItemDefinition_Definition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  variable_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgPaintKit_ItemDefinition.Definition)
}
CMsgPaintKit_ItemDefinition_Definition::CMsgPaintKit_ItemDefinition_Definition(const CMsgPaintKit_ItemDefinition_Definition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      variable_(from.variable_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_operation_template()) {
    operation_template_ = new ::CMsgProtoDefID(*from.operation_template_);
  } else {
    operation_template_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CMsgPaintKit_ItemDefinition.Definition)
}

void CMsgPaintKit_ItemDefinition_Definition::SharedCtor() {
operation_template_ = nullptr;
}

CMsgPaintKit_ItemDefinition_Definition::~CMsgPaintKit_ItemDefinition_Definition() {
  // @@protoc_insertion_point(destructor:CMsgPaintKit_ItemDefinition.Definition)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgPaintKit_ItemDefinition_Definition::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete operation_template_;
}

void CMsgPaintKit_ItemDefinition_Definition::ArenaDtor(void* object) {
  CMsgPaintKit_ItemDefinition_Definition* _this = reinterpret_cast< CMsgPaintKit_ItemDefinition_Definition* >(object);
  (void)_this;
}
void CMsgPaintKit_ItemDefinition_Definition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgPaintKit_ItemDefinition_Definition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgPaintKit_ItemDefinition_Definition::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPaintKit_ItemDefinition.Definition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  variable_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(operation_template_ != nullptr);
    operation_template_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPaintKit_ItemDefinition_Definition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgProtoDefID operation_template = 1 [(.valid_type) = DEF_TYPE_PAINTKIT_OPERATION];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_operation_template(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgVarField variable = 2 [(.allow_add) = false, (.allow_delete) = false, (.var_field_type) = VAR_TYPE_STRING];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_variable(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgPaintKit_ItemDefinition_Definition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPaintKit_ItemDefinition.Definition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgProtoDefID operation_template = 1 [(.valid_type) = DEF_TYPE_PAINTKIT_OPERATION];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::operation_template(this), target, stream);
  }

  // repeated .CMsgVarField variable = 2 [(.allow_add) = false, (.allow_delete) = false, (.var_field_type) = VAR_TYPE_STRING];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_variable_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_variable(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPaintKit_ItemDefinition.Definition)
  return target;
}

size_t CMsgPaintKit_ItemDefinition_Definition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPaintKit_ItemDefinition.Definition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgVarField variable = 2 [(.allow_add) = false, (.allow_delete) = false, (.var_field_type) = VAR_TYPE_STRING];
  total_size += 1UL * this->_internal_variable_size();
  for (const auto& msg : this->variable_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .CMsgProtoDefID operation_template = 1 [(.valid_type) = DEF_TYPE_PAINTKIT_OPERATION];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *operation_template_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPaintKit_ItemDefinition_Definition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgPaintKit_ItemDefinition.Definition)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPaintKit_ItemDefinition_Definition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgPaintKit_ItemDefinition_Definition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgPaintKit_ItemDefinition.Definition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgPaintKit_ItemDefinition.Definition)
    MergeFrom(*source);
  }
}

void CMsgPaintKit_ItemDefinition_Definition::MergeFrom(const CMsgPaintKit_ItemDefinition_Definition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgPaintKit_ItemDefinition.Definition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  variable_.MergeFrom(from.variable_);
  if (from._internal_has_operation_template()) {
    _internal_mutable_operation_template()->::CMsgProtoDefID::MergeFrom(from._internal_operation_template());
  }
}

void CMsgPaintKit_ItemDefinition_Definition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgPaintKit_ItemDefinition.Definition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPaintKit_ItemDefinition_Definition::CopyFrom(const CMsgPaintKit_ItemDefinition_Definition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPaintKit_ItemDefinition.Definition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPaintKit_ItemDefinition_Definition::IsInitialized() const {
  if (_internal_has_operation_template()) {
    if (!operation_template_->IsInitialized()) return false;
  }
  return true;
}

void CMsgPaintKit_ItemDefinition_Definition::InternalSwap(CMsgPaintKit_ItemDefinition_Definition* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  variable_.InternalSwap(&other->variable_);
  swap(operation_template_, other->operation_template_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPaintKit_ItemDefinition_Definition::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fproto_5fdef_5fmessages_2eproto_getter, &descriptor_table_tf_5fproto_5fdef_5fmessages_2eproto_once,
      file_level_metadata_tf_5fproto_5fdef_5fmessages_2eproto[26]);
}

// ===================================================================

class CMsgPaintKit_ItemDefinition::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgPaintKit_ItemDefinition>()._has_bits_);
  static const ::CMsgProtoDefHeader& header(const CMsgPaintKit_ItemDefinition* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_item_definition_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CMsgProtoDefID& variable_template(const CMsgPaintKit_ItemDefinition* msg);
  static void set_has_variable_template(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000005) ^ 0x00000005) != 0;
  }
};

const ::CMsgProtoDefHeader&
CMsgPaintKit_ItemDefinition::_Internal::header(const CMsgPaintKit_ItemDefinition* msg) {
  return *msg->header_;
}
const ::CMsgProtoDefID&
CMsgPaintKit_ItemDefinition::_Internal::variable_template(const CMsgPaintKit_ItemDefinition* msg) {
  return *msg->variable_template_;
}
CMsgPaintKit_ItemDefinition::CMsgPaintKit_ItemDefinition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  definition_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgPaintKit_ItemDefinition)
}
CMsgPaintKit_ItemDefinition::CMsgPaintKit_ItemDefinition(const CMsgPaintKit_ItemDefinition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      definition_(from.definition_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::CMsgProtoDefHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_variable_template()) {
    variable_template_ = new ::CMsgProtoDefID(*from.variable_template_);
  } else {
    variable_template_ = nullptr;
  }
  item_definition_index_ = from.item_definition_index_;
  // @@protoc_insertion_point(copy_constructor:CMsgPaintKit_ItemDefinition)
}

void CMsgPaintKit_ItemDefinition::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&item_definition_index_) -
    reinterpret_cast<char*>(&header_)) + sizeof(item_definition_index_));
}

CMsgPaintKit_ItemDefinition::~CMsgPaintKit_ItemDefinition() {
  // @@protoc_insertion_point(destructor:CMsgPaintKit_ItemDefinition)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgPaintKit_ItemDefinition::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete variable_template_;
}

void CMsgPaintKit_ItemDefinition::ArenaDtor(void* object) {
  CMsgPaintKit_ItemDefinition* _this = reinterpret_cast< CMsgPaintKit_ItemDefinition* >(object);
  (void)_this;
}
void CMsgPaintKit_ItemDefinition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgPaintKit_ItemDefinition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgPaintKit_ItemDefinition::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPaintKit_ItemDefinition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  definition_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(header_ != nullptr);
      header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(variable_template_ != nullptr);
      variable_template_->Clear();
    }
  }
  item_definition_index_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPaintKit_ItemDefinition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .CMsgProtoDefHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 item_definition_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_item_definition_index(&has_bits);
          item_definition_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgProtoDefID variable_template = 3 [(.valid_type) = DEF_TYPE_PAINTKIT_VARIABLES, (.inherit_reference_variables) = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_variable_template(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgPaintKit_ItemDefinition.Definition definition = 4 [(.max_count) = 5];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_definition(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgPaintKit_ItemDefinition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPaintKit_ItemDefinition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .CMsgProtoDefHeader header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // required uint32 item_definition_index = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_item_definition_index(), target);
  }

  // optional .CMsgProtoDefID variable_template = 3 [(.valid_type) = DEF_TYPE_PAINTKIT_VARIABLES, (.inherit_reference_variables) = true];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::variable_template(this), target, stream);
  }

  // repeated .CMsgPaintKit_ItemDefinition.Definition definition = 4 [(.max_count) = 5];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_definition_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_definition(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPaintKit_ItemDefinition)
  return target;
}

size_t CMsgPaintKit_ItemDefinition::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CMsgPaintKit_ItemDefinition)
  size_t total_size = 0;

  if (_internal_has_header()) {
    // required .CMsgProtoDefHeader header = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (_internal_has_item_definition_index()) {
    // required uint32 item_definition_index = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_item_definition_index());
  }

  return total_size;
}
size_t CMsgPaintKit_ItemDefinition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPaintKit_ItemDefinition)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required .CMsgProtoDefHeader header = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);

    // required uint32 item_definition_index = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_item_definition_index());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgPaintKit_ItemDefinition.Definition definition = 4 [(.max_count) = 5];
  total_size += 1UL * this->_internal_definition_size();
  for (const auto& msg : this->definition_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .CMsgProtoDefID variable_template = 3 [(.valid_type) = DEF_TYPE_PAINTKIT_VARIABLES, (.inherit_reference_variables) = true];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *variable_template_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPaintKit_ItemDefinition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgPaintKit_ItemDefinition)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPaintKit_ItemDefinition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgPaintKit_ItemDefinition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgPaintKit_ItemDefinition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgPaintKit_ItemDefinition)
    MergeFrom(*source);
  }
}

void CMsgPaintKit_ItemDefinition::MergeFrom(const CMsgPaintKit_ItemDefinition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgPaintKit_ItemDefinition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  definition_.MergeFrom(from.definition_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::CMsgProtoDefHeader::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_variable_template()->::CMsgProtoDefID::MergeFrom(from._internal_variable_template());
    }
    if (cached_has_bits & 0x00000004u) {
      item_definition_index_ = from.item_definition_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgPaintKit_ItemDefinition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgPaintKit_ItemDefinition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPaintKit_ItemDefinition::CopyFrom(const CMsgPaintKit_ItemDefinition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPaintKit_ItemDefinition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPaintKit_ItemDefinition::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(definition_)) return false;
  if (_internal_has_header()) {
    if (!header_->IsInitialized()) return false;
  }
  if (_internal_has_variable_template()) {
    if (!variable_template_->IsInitialized()) return false;
  }
  return true;
}

void CMsgPaintKit_ItemDefinition::InternalSwap(CMsgPaintKit_ItemDefinition* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  definition_.InternalSwap(&other->definition_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgPaintKit_ItemDefinition, item_definition_index_)
      + sizeof(CMsgPaintKit_ItemDefinition::item_definition_index_)
      - PROTOBUF_FIELD_OFFSET(CMsgPaintKit_ItemDefinition, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPaintKit_ItemDefinition::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fproto_5fdef_5fmessages_2eproto_getter, &descriptor_table_tf_5fproto_5fdef_5fmessages_2eproto_once,
      file_level_metadata_tf_5fproto_5fdef_5fmessages_2eproto[27]);
}

// ===================================================================

class CMsgPaintKit_Definition_Item_ItemData::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgPaintKit_Definition_Item_ItemData>()._has_bits_);
  static void set_has_can_apply_paintkit(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_material_override(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgPaintKit_Definition_Item_ItemData::CMsgPaintKit_Definition_Item_ItemData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  variable_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgPaintKit_Definition.Item.ItemData)
}
CMsgPaintKit_Definition_Item_ItemData::CMsgPaintKit_Definition_Item_ItemData(const CMsgPaintKit_Definition_Item_ItemData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      variable_(from.variable_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  material_override_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_material_override()) {
    material_override_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_material_override(), 
      GetArenaForAllocation());
  }
  can_apply_paintkit_ = from.can_apply_paintkit_;
  // @@protoc_insertion_point(copy_constructor:CMsgPaintKit_Definition.Item.ItemData)
}

void CMsgPaintKit_Definition_Item_ItemData::SharedCtor() {
material_override_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
can_apply_paintkit_ = true;
}

CMsgPaintKit_Definition_Item_ItemData::~CMsgPaintKit_Definition_Item_ItemData() {
  // @@protoc_insertion_point(destructor:CMsgPaintKit_Definition.Item.ItemData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgPaintKit_Definition_Item_ItemData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  material_override_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgPaintKit_Definition_Item_ItemData::ArenaDtor(void* object) {
  CMsgPaintKit_Definition_Item_ItemData* _this = reinterpret_cast< CMsgPaintKit_Definition_Item_ItemData* >(object);
  (void)_this;
}
void CMsgPaintKit_Definition_Item_ItemData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgPaintKit_Definition_Item_ItemData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgPaintKit_Definition_Item_ItemData::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPaintKit_Definition.Item.ItemData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  variable_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      material_override_.ClearNonDefaultToEmpty();
    }
    can_apply_paintkit_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPaintKit_Definition_Item_ItemData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool can_apply_paintkit = 2 [default = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_can_apply_paintkit(&has_bits);
          can_apply_paintkit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string material_override = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_material_override();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgPaintKit_Definition.Item.ItemData.material_override");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgVarField variable = 4 [(.allow_add) = false, (.allow_delete) = false, (.var_field_type) = VAR_TYPE_STRING];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_variable(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgPaintKit_Definition_Item_ItemData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPaintKit_Definition.Item.ItemData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool can_apply_paintkit = 2 [default = true];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_can_apply_paintkit(), target);
  }

  // optional string material_override = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_material_override().data(), static_cast<int>(this->_internal_material_override().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgPaintKit_Definition.Item.ItemData.material_override");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_material_override(), target);
  }

  // repeated .CMsgVarField variable = 4 [(.allow_add) = false, (.allow_delete) = false, (.var_field_type) = VAR_TYPE_STRING];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_variable_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_variable(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPaintKit_Definition.Item.ItemData)
  return target;
}

size_t CMsgPaintKit_Definition_Item_ItemData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPaintKit_Definition.Item.ItemData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgVarField variable = 4 [(.allow_add) = false, (.allow_delete) = false, (.var_field_type) = VAR_TYPE_STRING];
  total_size += 1UL * this->_internal_variable_size();
  for (const auto& msg : this->variable_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string material_override = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_material_override());
    }

    // optional bool can_apply_paintkit = 2 [default = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPaintKit_Definition_Item_ItemData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgPaintKit_Definition.Item.ItemData)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPaintKit_Definition_Item_ItemData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgPaintKit_Definition_Item_ItemData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgPaintKit_Definition.Item.ItemData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgPaintKit_Definition.Item.ItemData)
    MergeFrom(*source);
  }
}

void CMsgPaintKit_Definition_Item_ItemData::MergeFrom(const CMsgPaintKit_Definition_Item_ItemData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgPaintKit_Definition.Item.ItemData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  variable_.MergeFrom(from.variable_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_material_override(from._internal_material_override());
    }
    if (cached_has_bits & 0x00000002u) {
      can_apply_paintkit_ = from.can_apply_paintkit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgPaintKit_Definition_Item_ItemData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgPaintKit_Definition.Item.ItemData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPaintKit_Definition_Item_ItemData::CopyFrom(const CMsgPaintKit_Definition_Item_ItemData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPaintKit_Definition.Item.ItemData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPaintKit_Definition_Item_ItemData::IsInitialized() const {
  return true;
}

void CMsgPaintKit_Definition_Item_ItemData::InternalSwap(CMsgPaintKit_Definition_Item_ItemData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  variable_.InternalSwap(&other->variable_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &material_override_, GetArenaForAllocation(),
      &other->material_override_, other->GetArenaForAllocation()
  );
  swap(can_apply_paintkit_, other->can_apply_paintkit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPaintKit_Definition_Item_ItemData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fproto_5fdef_5fmessages_2eproto_getter, &descriptor_table_tf_5fproto_5fdef_5fmessages_2eproto_once,
      file_level_metadata_tf_5fproto_5fdef_5fmessages_2eproto[28]);
}

// ===================================================================

class CMsgPaintKit_Definition_Item::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgPaintKit_Definition_Item>()._has_bits_);
  static const ::CMsgProtoDefID& item_definition_template(const CMsgPaintKit_Definition_Item* msg);
  static void set_has_item_definition_template(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgPaintKit_Definition_Item_ItemData& data(const CMsgPaintKit_Definition_Item* msg);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::CMsgProtoDefID&
CMsgPaintKit_Definition_Item::_Internal::item_definition_template(const CMsgPaintKit_Definition_Item* msg) {
  return *msg->item_definition_template_;
}
const ::CMsgPaintKit_Definition_Item_ItemData&
CMsgPaintKit_Definition_Item::_Internal::data(const CMsgPaintKit_Definition_Item* msg) {
  return *msg->data_;
}
CMsgPaintKit_Definition_Item::CMsgPaintKit_Definition_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgPaintKit_Definition.Item)
}
CMsgPaintKit_Definition_Item::CMsgPaintKit_Definition_Item(const CMsgPaintKit_Definition_Item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_item_definition_template()) {
    item_definition_template_ = new ::CMsgProtoDefID(*from.item_definition_template_);
  } else {
    item_definition_template_ = nullptr;
  }
  if (from._internal_has_data()) {
    data_ = new ::CMsgPaintKit_Definition_Item_ItemData(*from.data_);
  } else {
    data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CMsgPaintKit_Definition.Item)
}

void CMsgPaintKit_Definition_Item::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&item_definition_template_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&data_) -
    reinterpret_cast<char*>(&item_definition_template_)) + sizeof(data_));
}

CMsgPaintKit_Definition_Item::~CMsgPaintKit_Definition_Item() {
  // @@protoc_insertion_point(destructor:CMsgPaintKit_Definition.Item)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgPaintKit_Definition_Item::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete item_definition_template_;
  if (this != internal_default_instance()) delete data_;
}

void CMsgPaintKit_Definition_Item::ArenaDtor(void* object) {
  CMsgPaintKit_Definition_Item* _this = reinterpret_cast< CMsgPaintKit_Definition_Item* >(object);
  (void)_this;
}
void CMsgPaintKit_Definition_Item::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgPaintKit_Definition_Item::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgPaintKit_Definition_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPaintKit_Definition.Item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(item_definition_template_ != nullptr);
      item_definition_template_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(data_ != nullptr);
      data_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPaintKit_Definition_Item::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .CMsgProtoDefID item_definition_template = 1 [(.valid_type) = DEF_TYPE_PAINTKIT_ITEM_DEFINITION, (.panel_class_override) = "CPaintKitDefIdFieldProtoEditorField"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_item_definition_template(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgPaintKit_Definition.Item.ItemData data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgPaintKit_Definition_Item::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPaintKit_Definition.Item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .CMsgProtoDefID item_definition_template = 1 [(.valid_type) = DEF_TYPE_PAINTKIT_ITEM_DEFINITION, (.panel_class_override) = "CPaintKitDefIdFieldProtoEditorField"];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::item_definition_template(this), target, stream);
  }

  // optional .CMsgPaintKit_Definition.Item.ItemData data = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPaintKit_Definition.Item)
  return target;
}

size_t CMsgPaintKit_Definition_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPaintKit_Definition.Item)
  size_t total_size = 0;

  // required .CMsgProtoDefID item_definition_template = 1 [(.valid_type) = DEF_TYPE_PAINTKIT_ITEM_DEFINITION, (.panel_class_override) = "CPaintKitDefIdFieldProtoEditorField"];
  if (_internal_has_item_definition_template()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *item_definition_template_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CMsgPaintKit_Definition.Item.ItemData data = 5;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPaintKit_Definition_Item::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgPaintKit_Definition.Item)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPaintKit_Definition_Item* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgPaintKit_Definition_Item>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgPaintKit_Definition.Item)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgPaintKit_Definition.Item)
    MergeFrom(*source);
  }
}

void CMsgPaintKit_Definition_Item::MergeFrom(const CMsgPaintKit_Definition_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgPaintKit_Definition.Item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_item_definition_template()->::CMsgProtoDefID::MergeFrom(from._internal_item_definition_template());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_data()->::CMsgPaintKit_Definition_Item_ItemData::MergeFrom(from._internal_data());
    }
  }
}

void CMsgPaintKit_Definition_Item::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgPaintKit_Definition.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPaintKit_Definition_Item::CopyFrom(const CMsgPaintKit_Definition_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPaintKit_Definition.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPaintKit_Definition_Item::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_item_definition_template()) {
    if (!item_definition_template_->IsInitialized()) return false;
  }
  return true;
}

void CMsgPaintKit_Definition_Item::InternalSwap(CMsgPaintKit_Definition_Item* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgPaintKit_Definition_Item, data_)
      + sizeof(CMsgPaintKit_Definition_Item::data_)
      - PROTOBUF_FIELD_OFFSET(CMsgPaintKit_Definition_Item, item_definition_template_)>(
          reinterpret_cast<char*>(&item_definition_template_),
          reinterpret_cast<char*>(&other->item_definition_template_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPaintKit_Definition_Item::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fproto_5fdef_5fmessages_2eproto_getter, &descriptor_table_tf_5fproto_5fdef_5fmessages_2eproto_once,
      file_level_metadata_tf_5fproto_5fdef_5fmessages_2eproto[29]);
}

// ===================================================================

class CMsgPaintKit_Definition::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgPaintKit_Definition>()._has_bits_);
  static const ::CMsgProtoDefHeader& header(const CMsgPaintKit_Definition* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_loc_desctoken(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgProtoDefID& operation_template(const CMsgPaintKit_Definition* msg);
  static void set_has_operation_template(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_has_team_textures(HasBits* has_bits) {
    (*has_bits)[1] |= 65536u;
  }
  static const ::CMsgPaintKit_Definition_Item& paintkit_tool(const CMsgPaintKit_Definition* msg);
  static void set_has_paintkit_tool(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::CMsgPaintKit_Definition_Item& flamethrower(const CMsgPaintKit_Definition* msg);
  static void set_has_flamethrower(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::CMsgPaintKit_Definition_Item& grenadelauncher(const CMsgPaintKit_Definition* msg);
  static void set_has_grenadelauncher(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::CMsgPaintKit_Definition_Item& knife(const CMsgPaintKit_Definition* msg);
  static void set_has_knife(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::CMsgPaintKit_Definition_Item& medigun(const CMsgPaintKit_Definition* msg);
  static void set_has_medigun(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::CMsgPaintKit_Definition_Item& minigun(const CMsgPaintKit_Definition* msg);
  static void set_has_minigun(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::CMsgPaintKit_Definition_Item& pistol(const CMsgPaintKit_Definition* msg);
  static void set_has_pistol(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::CMsgPaintKit_Definition_Item& revolver(const CMsgPaintKit_Definition* msg);
  static void set_has_revolver(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::CMsgPaintKit_Definition_Item& rocketlauncher(const CMsgPaintKit_Definition* msg);
  static void set_has_rocketlauncher(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::CMsgPaintKit_Definition_Item& scattergun(const CMsgPaintKit_Definition* msg);
  static void set_has_scattergun(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::CMsgPaintKit_Definition_Item& shotgun(const CMsgPaintKit_Definition* msg);
  static void set_has_shotgun(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::CMsgPaintKit_Definition_Item& smg(const CMsgPaintKit_Definition* msg);
  static void set_has_smg(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::CMsgPaintKit_Definition_Item& sniperrifle(const CMsgPaintKit_Definition* msg);
  static void set_has_sniperrifle(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::CMsgPaintKit_Definition_Item& stickybomb_launcher(const CMsgPaintKit_Definition* msg);
  static void set_has_stickybomb_launcher(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::CMsgPaintKit_Definition_Item& ubersaw(const CMsgPaintKit_Definition* msg);
  static void set_has_ubersaw(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::CMsgPaintKit_Definition_Item& wrench(const CMsgPaintKit_Definition* msg);
  static void set_has_wrench(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const ::CMsgPaintKit_Definition_Item& amputator(const CMsgPaintKit_Definition* msg);
  static void set_has_amputator(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static const ::CMsgPaintKit_Definition_Item& atom_launcher(const CMsgPaintKit_Definition* msg);
  static void set_has_atom_launcher(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static const ::CMsgPaintKit_Definition_Item& back_scratcher(const CMsgPaintKit_Definition* msg);
  static void set_has_back_scratcher(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static const ::CMsgPaintKit_Definition_Item& battleaxe(const CMsgPaintKit_Definition* msg);
  static void set_has_battleaxe(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static const ::CMsgPaintKit_Definition_Item& bazaar_sniper(const CMsgPaintKit_Definition* msg);
  static void set_has_bazaar_sniper(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static const ::CMsgPaintKit_Definition_Item& blackbox(const CMsgPaintKit_Definition* msg);
  static void set_has_blackbox(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static const ::CMsgPaintKit_Definition_Item& claidheamohmor(const CMsgPaintKit_Definition* msg);
  static void set_has_claidheamohmor(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static const ::CMsgPaintKit_Definition_Item& crusaders_crossbow(const CMsgPaintKit_Definition* msg);
  static void set_has_crusaders_crossbow(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static const ::CMsgPaintKit_Definition_Item& degreaser(const CMsgPaintKit_Definition* msg);
  static void set_has_degreaser(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static const ::CMsgPaintKit_Definition_Item& demo_cannon(const CMsgPaintKit_Definition* msg);
  static void set_has_demo_cannon(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static const ::CMsgPaintKit_Definition_Item& demo_sultan_sword(const CMsgPaintKit_Definition* msg);
  static void set_has_demo_sultan_sword(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static const ::CMsgPaintKit_Definition_Item& detonator(const CMsgPaintKit_Definition* msg);
  static void set_has_detonator(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static const ::CMsgPaintKit_Definition_Item& gatling_gun(const CMsgPaintKit_Definition* msg);
  static void set_has_gatling_gun(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static const ::CMsgPaintKit_Definition_Item& holymackerel(const CMsgPaintKit_Definition* msg);
  static void set_has_holymackerel(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static const ::CMsgPaintKit_Definition_Item& jag(const CMsgPaintKit_Definition* msg);
  static void set_has_jag(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static const ::CMsgPaintKit_Definition_Item& lochnload(const CMsgPaintKit_Definition* msg);
  static void set_has_lochnload(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static const ::CMsgPaintKit_Definition_Item& powerjack(const CMsgPaintKit_Definition* msg);
  static void set_has_powerjack(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static const ::CMsgPaintKit_Definition_Item& quadball(const CMsgPaintKit_Definition* msg);
  static void set_has_quadball(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static const ::CMsgPaintKit_Definition_Item& reserve_shooter(const CMsgPaintKit_Definition* msg);
  static void set_has_reserve_shooter(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static const ::CMsgPaintKit_Definition_Item& riding_crop(const CMsgPaintKit_Definition* msg);
  static void set_has_riding_crop(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static const ::CMsgPaintKit_Definition_Item& russian_riot(const CMsgPaintKit_Definition* msg);
  static void set_has_russian_riot(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static const ::CMsgPaintKit_Definition_Item& scimitar(const CMsgPaintKit_Definition* msg);
  static void set_has_scimitar(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static const ::CMsgPaintKit_Definition_Item& scorch_shot(const CMsgPaintKit_Definition* msg);
  static void set_has_scorch_shot(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static const ::CMsgPaintKit_Definition_Item& shortstop(const CMsgPaintKit_Definition* msg);
  static void set_has_shortstop(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static const ::CMsgPaintKit_Definition_Item& soda_popper(const CMsgPaintKit_Definition* msg);
  static void set_has_soda_popper(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
  static const ::CMsgPaintKit_Definition_Item& tele_shotgun(const CMsgPaintKit_Definition* msg);
  static void set_has_tele_shotgun(HasBits* has_bits) {
    (*has_bits)[1] |= 4096u;
  }
  static const ::CMsgPaintKit_Definition_Item& tomislav(const CMsgPaintKit_Definition* msg);
  static void set_has_tomislav(HasBits* has_bits) {
    (*has_bits)[1] |= 8192u;
  }
  static const ::CMsgPaintKit_Definition_Item& trenchgun(const CMsgPaintKit_Definition* msg);
  static void set_has_trenchgun(HasBits* has_bits) {
    (*has_bits)[1] |= 16384u;
  }
  static const ::CMsgPaintKit_Definition_Item& winger_pistol(const CMsgPaintKit_Definition* msg);
  static void set_has_winger_pistol(HasBits* has_bits) {
    (*has_bits)[1] |= 32768u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::CMsgProtoDefHeader&
CMsgPaintKit_Definition::_Internal::header(const CMsgPaintKit_Definition* msg) {
  return *msg->header_;
}
const ::CMsgProtoDefID&
CMsgPaintKit_Definition::_Internal::operation_template(const CMsgPaintKit_Definition* msg) {
  return *msg->operation_template_;
}
const ::CMsgPaintKit_Definition_Item&
CMsgPaintKit_Definition::_Internal::paintkit_tool(const CMsgPaintKit_Definition* msg) {
  return *msg->paintkit_tool_;
}
const ::CMsgPaintKit_Definition_Item&
CMsgPaintKit_Definition::_Internal::flamethrower(const CMsgPaintKit_Definition* msg) {
  return *msg->flamethrower_;
}
const ::CMsgPaintKit_Definition_Item&
CMsgPaintKit_Definition::_Internal::grenadelauncher(const CMsgPaintKit_Definition* msg) {
  return *msg->grenadelauncher_;
}
const ::CMsgPaintKit_Definition_Item&
CMsgPaintKit_Definition::_Internal::knife(const CMsgPaintKit_Definition* msg) {
  return *msg->knife_;
}
const ::CMsgPaintKit_Definition_Item&
CMsgPaintKit_Definition::_Internal::medigun(const CMsgPaintKit_Definition* msg) {
  return *msg->medigun_;
}
const ::CMsgPaintKit_Definition_Item&
CMsgPaintKit_Definition::_Internal::minigun(const CMsgPaintKit_Definition* msg) {
  return *msg->minigun_;
}
const ::CMsgPaintKit_Definition_Item&
CMsgPaintKit_Definition::_Internal::pistol(const CMsgPaintKit_Definition* msg) {
  return *msg->pistol_;
}
const ::CMsgPaintKit_Definition_Item&
CMsgPaintKit_Definition::_Internal::revolver(const CMsgPaintKit_Definition* msg) {
  return *msg->revolver_;
}
const ::CMsgPaintKit_Definition_Item&
CMsgPaintKit_Definition::_Internal::rocketlauncher(const CMsgPaintKit_Definition* msg) {
  return *msg->rocketlauncher_;
}
const ::CMsgPaintKit_Definition_Item&
CMsgPaintKit_Definition::_Internal::scattergun(const CMsgPaintKit_Definition* msg) {
  return *msg->scattergun_;
}
const ::CMsgPaintKit_Definition_Item&
CMsgPaintKit_Definition::_Internal::shotgun(const CMsgPaintKit_Definition* msg) {
  return *msg->shotgun_;
}
const ::CMsgPaintKit_Definition_Item&
CMsgPaintKit_Definition::_Internal::smg(const CMsgPaintKit_Definition* msg) {
  return *msg->smg_;
}
const ::CMsgPaintKit_Definition_Item&
CMsgPaintKit_Definition::_Internal::sniperrifle(const CMsgPaintKit_Definition* msg) {
  return *msg->sniperrifle_;
}
const ::CMsgPaintKit_Definition_Item&
CMsgPaintKit_Definition::_Internal::stickybomb_launcher(const CMsgPaintKit_Definition* msg) {
  return *msg->stickybomb_launcher_;
}
const ::CMsgPaintKit_Definition_Item&
CMsgPaintKit_Definition::_Internal::ubersaw(const CMsgPaintKit_Definition* msg) {
  return *msg->ubersaw_;
}
const ::CMsgPaintKit_Definition_Item&
CMsgPaintKit_Definition::_Internal::wrench(const CMsgPaintKit_Definition* msg) {
  return *msg->wrench_;
}
const ::CMsgPaintKit_Definition_Item&
CMsgPaintKit_Definition::_Internal::amputator(const CMsgPaintKit_Definition* msg) {
  return *msg->amputator_;
}
const ::CMsgPaintKit_Definition_Item&
CMsgPaintKit_Definition::_Internal::atom_launcher(const CMsgPaintKit_Definition* msg) {
  return *msg->atom_launcher_;
}
const ::CMsgPaintKit_Definition_Item&
CMsgPaintKit_Definition::_Internal::back_scratcher(const CMsgPaintKit_Definition* msg) {
  return *msg->back_scratcher_;
}
const ::CMsgPaintKit_Definition_Item&
CMsgPaintKit_Definition::_Internal::battleaxe(const CMsgPaintKit_Definition* msg) {
  return *msg->battleaxe_;
}
const ::CMsgPaintKit_Definition_Item&
CMsgPaintKit_Definition::_Internal::bazaar_sniper(const CMsgPaintKit_Definition* msg) {
  return *msg->bazaar_sniper_;
}
const ::CMsgPaintKit_Definition_Item&
CMsgPaintKit_Definition::_Internal::blackbox(const CMsgPaintKit_Definition* msg) {
  return *msg->blackbox_;
}
const ::CMsgPaintKit_Definition_Item&
CMsgPaintKit_Definition::_Internal::claidheamohmor(const CMsgPaintKit_Definition* msg) {
  return *msg->claidheamohmor_;
}
const ::CMsgPaintKit_Definition_Item&
CMsgPaintKit_Definition::_Internal::crusaders_crossbow(const CMsgPaintKit_Definition* msg) {
  return *msg->crusaders_crossbow_;
}
const ::CMsgPaintKit_Definition_Item&
CMsgPaintKit_Definition::_Internal::degreaser(const CMsgPaintKit_Definition* msg) {
  return *msg->degreaser_;
}
const ::CMsgPaintKit_Definition_Item&
CMsgPaintKit_Definition::_Internal::demo_cannon(const CMsgPaintKit_Definition* msg) {
  return *msg->demo_cannon_;
}
const ::CMsgPaintKit_Definition_Item&
CMsgPaintKit_Definition::_Internal::demo_sultan_sword(const CMsgPaintKit_Definition* msg) {
  return *msg->demo_sultan_sword_;
}
const ::CMsgPaintKit_Definition_Item&
CMsgPaintKit_Definition::_Internal::detonator(const CMsgPaintKit_Definition* msg) {
  return *msg->detonator_;
}
const ::CMsgPaintKit_Definition_Item&
CMsgPaintKit_Definition::_Internal::gatling_gun(const CMsgPaintKit_Definition* msg) {
  return *msg->gatling_gun_;
}
const ::CMsgPaintKit_Definition_Item&
CMsgPaintKit_Definition::_Internal::holymackerel(const CMsgPaintKit_Definition* msg) {
  return *msg->holymackerel_;
}
const ::CMsgPaintKit_Definition_Item&
CMsgPaintKit_Definition::_Internal::jag(const CMsgPaintKit_Definition* msg) {
  return *msg->jag_;
}
const ::CMsgPaintKit_Definition_Item&
CMsgPaintKit_Definition::_Internal::lochnload(const CMsgPaintKit_Definition* msg) {
  return *msg->lochnload_;
}
const ::CMsgPaintKit_Definition_Item&
CMsgPaintKit_Definition::_Internal::powerjack(const CMsgPaintKit_Definition* msg) {
  return *msg->powerjack_;
}
const ::CMsgPaintKit_Definition_Item&
CMsgPaintKit_Definition::_Internal::quadball(const CMsgPaintKit_Definition* msg) {
  return *msg->quadball_;
}
const ::CMsgPaintKit_Definition_Item&
CMsgPaintKit_Definition::_Internal::reserve_shooter(const CMsgPaintKit_Definition* msg) {
  return *msg->reserve_shooter_;
}
const ::CMsgPaintKit_Definition_Item&
CMsgPaintKit_Definition::_Internal::riding_crop(const CMsgPaintKit_Definition* msg) {
  return *msg->riding_crop_;
}
const ::CMsgPaintKit_Definition_Item&
CMsgPaintKit_Definition::_Internal::russian_riot(const CMsgPaintKit_Definition* msg) {
  return *msg->russian_riot_;
}
const ::CMsgPaintKit_Definition_Item&
CMsgPaintKit_Definition::_Internal::scimitar(const CMsgPaintKit_Definition* msg) {
  return *msg->scimitar_;
}
const ::CMsgPaintKit_Definition_Item&
CMsgPaintKit_Definition::_Internal::scorch_shot(const CMsgPaintKit_Definition* msg) {
  return *msg->scorch_shot_;
}
const ::CMsgPaintKit_Definition_Item&
CMsgPaintKit_Definition::_Internal::shortstop(const CMsgPaintKit_Definition* msg) {
  return *msg->shortstop_;
}
const ::CMsgPaintKit_Definition_Item&
CMsgPaintKit_Definition::_Internal::soda_popper(const CMsgPaintKit_Definition* msg) {
  return *msg->soda_popper_;
}
const ::CMsgPaintKit_Definition_Item&
CMsgPaintKit_Definition::_Internal::tele_shotgun(const CMsgPaintKit_Definition* msg) {
  return *msg->tele_shotgun_;
}
const ::CMsgPaintKit_Definition_Item&
CMsgPaintKit_Definition::_Internal::tomislav(const CMsgPaintKit_Definition* msg) {
  return *msg->tomislav_;
}
const ::CMsgPaintKit_Definition_Item&
CMsgPaintKit_Definition::_Internal::trenchgun(const CMsgPaintKit_Definition* msg) {
  return *msg->trenchgun_;
}
const ::CMsgPaintKit_Definition_Item&
CMsgPaintKit_Definition::_Internal::winger_pistol(const CMsgPaintKit_Definition* msg) {
  return *msg->winger_pistol_;
}
CMsgPaintKit_Definition::CMsgPaintKit_Definition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  item_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgPaintKit_Definition)
}
CMsgPaintKit_Definition::CMsgPaintKit_Definition(const CMsgPaintKit_Definition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      item_(from.item_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  loc_desctoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_loc_desctoken()) {
    loc_desctoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_loc_desctoken(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_header()) {
    header_ = new ::CMsgProtoDefHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_operation_template()) {
    operation_template_ = new ::CMsgProtoDefID(*from.operation_template_);
  } else {
    operation_template_ = nullptr;
  }
  if (from._internal_has_paintkit_tool()) {
    paintkit_tool_ = new ::CMsgPaintKit_Definition_Item(*from.paintkit_tool_);
  } else {
    paintkit_tool_ = nullptr;
  }
  if (from._internal_has_flamethrower()) {
    flamethrower_ = new ::CMsgPaintKit_Definition_Item(*from.flamethrower_);
  } else {
    flamethrower_ = nullptr;
  }
  if (from._internal_has_grenadelauncher()) {
    grenadelauncher_ = new ::CMsgPaintKit_Definition_Item(*from.grenadelauncher_);
  } else {
    grenadelauncher_ = nullptr;
  }
  if (from._internal_has_knife()) {
    knife_ = new ::CMsgPaintKit_Definition_Item(*from.knife_);
  } else {
    knife_ = nullptr;
  }
  if (from._internal_has_medigun()) {
    medigun_ = new ::CMsgPaintKit_Definition_Item(*from.medigun_);
  } else {
    medigun_ = nullptr;
  }
  if (from._internal_has_minigun()) {
    minigun_ = new ::CMsgPaintKit_Definition_Item(*from.minigun_);
  } else {
    minigun_ = nullptr;
  }
  if (from._internal_has_pistol()) {
    pistol_ = new ::CMsgPaintKit_Definition_Item(*from.pistol_);
  } else {
    pistol_ = nullptr;
  }
  if (from._internal_has_revolver()) {
    revolver_ = new ::CMsgPaintKit_Definition_Item(*from.revolver_);
  } else {
    revolver_ = nullptr;
  }
  if (from._internal_has_rocketlauncher()) {
    rocketlauncher_ = new ::CMsgPaintKit_Definition_Item(*from.rocketlauncher_);
  } else {
    rocketlauncher_ = nullptr;
  }
  if (from._internal_has_scattergun()) {
    scattergun_ = new ::CMsgPaintKit_Definition_Item(*from.scattergun_);
  } else {
    scattergun_ = nullptr;
  }
  if (from._internal_has_shotgun()) {
    shotgun_ = new ::CMsgPaintKit_Definition_Item(*from.shotgun_);
  } else {
    shotgun_ = nullptr;
  }
  if (from._internal_has_smg()) {
    smg_ = new ::CMsgPaintKit_Definition_Item(*from.smg_);
  } else {
    smg_ = nullptr;
  }
  if (from._internal_has_sniperrifle()) {
    sniperrifle_ = new ::CMsgPaintKit_Definition_Item(*from.sniperrifle_);
  } else {
    sniperrifle_ = nullptr;
  }
  if (from._internal_has_stickybomb_launcher()) {
    stickybomb_launcher_ = new ::CMsgPaintKit_Definition_Item(*from.stickybomb_launcher_);
  } else {
    stickybomb_launcher_ = nullptr;
  }
  if (from._internal_has_ubersaw()) {
    ubersaw_ = new ::CMsgPaintKit_Definition_Item(*from.ubersaw_);
  } else {
    ubersaw_ = nullptr;
  }
  if (from._internal_has_wrench()) {
    wrench_ = new ::CMsgPaintKit_Definition_Item(*from.wrench_);
  } else {
    wrench_ = nullptr;
  }
  if (from._internal_has_amputator()) {
    amputator_ = new ::CMsgPaintKit_Definition_Item(*from.amputator_);
  } else {
    amputator_ = nullptr;
  }
  if (from._internal_has_atom_launcher()) {
    atom_launcher_ = new ::CMsgPaintKit_Definition_Item(*from.atom_launcher_);
  } else {
    atom_launcher_ = nullptr;
  }
  if (from._internal_has_back_scratcher()) {
    back_scratcher_ = new ::CMsgPaintKit_Definition_Item(*from.back_scratcher_);
  } else {
    back_scratcher_ = nullptr;
  }
  if (from._internal_has_battleaxe()) {
    battleaxe_ = new ::CMsgPaintKit_Definition_Item(*from.battleaxe_);
  } else {
    battleaxe_ = nullptr;
  }
  if (from._internal_has_bazaar_sniper()) {
    bazaar_sniper_ = new ::CMsgPaintKit_Definition_Item(*from.bazaar_sniper_);
  } else {
    bazaar_sniper_ = nullptr;
  }
  if (from._internal_has_blackbox()) {
    blackbox_ = new ::CMsgPaintKit_Definition_Item(*from.blackbox_);
  } else {
    blackbox_ = nullptr;
  }
  if (from._internal_has_claidheamohmor()) {
    claidheamohmor_ = new ::CMsgPaintKit_Definition_Item(*from.claidheamohmor_);
  } else {
    claidheamohmor_ = nullptr;
  }
  if (from._internal_has_crusaders_crossbow()) {
    crusaders_crossbow_ = new ::CMsgPaintKit_Definition_Item(*from.crusaders_crossbow_);
  } else {
    crusaders_crossbow_ = nullptr;
  }
  if (from._internal_has_degreaser()) {
    degreaser_ = new ::CMsgPaintKit_Definition_Item(*from.degreaser_);
  } else {
    degreaser_ = nullptr;
  }
  if (from._internal_has_demo_cannon()) {
    demo_cannon_ = new ::CMsgPaintKit_Definition_Item(*from.demo_cannon_);
  } else {
    demo_cannon_ = nullptr;
  }
  if (from._internal_has_demo_sultan_sword()) {
    demo_sultan_sword_ = new ::CMsgPaintKit_Definition_Item(*from.demo_sultan_sword_);
  } else {
    demo_sultan_sword_ = nullptr;
  }
  if (from._internal_has_detonator()) {
    detonator_ = new ::CMsgPaintKit_Definition_Item(*from.detonator_);
  } else {
    detonator_ = nullptr;
  }
  if (from._internal_has_gatling_gun()) {
    gatling_gun_ = new ::CMsgPaintKit_Definition_Item(*from.gatling_gun_);
  } else {
    gatling_gun_ = nullptr;
  }
  if (from._internal_has_holymackerel()) {
    holymackerel_ = new ::CMsgPaintKit_Definition_Item(*from.holymackerel_);
  } else {
    holymackerel_ = nullptr;
  }
  if (from._internal_has_jag()) {
    jag_ = new ::CMsgPaintKit_Definition_Item(*from.jag_);
  } else {
    jag_ = nullptr;
  }
  if (from._internal_has_lochnload()) {
    lochnload_ = new ::CMsgPaintKit_Definition_Item(*from.lochnload_);
  } else {
    lochnload_ = nullptr;
  }
  if (from._internal_has_powerjack()) {
    powerjack_ = new ::CMsgPaintKit_Definition_Item(*from.powerjack_);
  } else {
    powerjack_ = nullptr;
  }
  if (from._internal_has_quadball()) {
    quadball_ = new ::CMsgPaintKit_Definition_Item(*from.quadball_);
  } else {
    quadball_ = nullptr;
  }
  if (from._internal_has_reserve_shooter()) {
    reserve_shooter_ = new ::CMsgPaintKit_Definition_Item(*from.reserve_shooter_);
  } else {
    reserve_shooter_ = nullptr;
  }
  if (from._internal_has_riding_crop()) {
    riding_crop_ = new ::CMsgPaintKit_Definition_Item(*from.riding_crop_);
  } else {
    riding_crop_ = nullptr;
  }
  if (from._internal_has_russian_riot()) {
    russian_riot_ = new ::CMsgPaintKit_Definition_Item(*from.russian_riot_);
  } else {
    russian_riot_ = nullptr;
  }
  if (from._internal_has_scimitar()) {
    scimitar_ = new ::CMsgPaintKit_Definition_Item(*from.scimitar_);
  } else {
    scimitar_ = nullptr;
  }
  if (from._internal_has_scorch_shot()) {
    scorch_shot_ = new ::CMsgPaintKit_Definition_Item(*from.scorch_shot_);
  } else {
    scorch_shot_ = nullptr;
  }
  if (from._internal_has_shortstop()) {
    shortstop_ = new ::CMsgPaintKit_Definition_Item(*from.shortstop_);
  } else {
    shortstop_ = nullptr;
  }
  if (from._internal_has_soda_popper()) {
    soda_popper_ = new ::CMsgPaintKit_Definition_Item(*from.soda_popper_);
  } else {
    soda_popper_ = nullptr;
  }
  if (from._internal_has_tele_shotgun()) {
    tele_shotgun_ = new ::CMsgPaintKit_Definition_Item(*from.tele_shotgun_);
  } else {
    tele_shotgun_ = nullptr;
  }
  if (from._internal_has_tomislav()) {
    tomislav_ = new ::CMsgPaintKit_Definition_Item(*from.tomislav_);
  } else {
    tomislav_ = nullptr;
  }
  if (from._internal_has_trenchgun()) {
    trenchgun_ = new ::CMsgPaintKit_Definition_Item(*from.trenchgun_);
  } else {
    trenchgun_ = nullptr;
  }
  if (from._internal_has_winger_pistol()) {
    winger_pistol_ = new ::CMsgPaintKit_Definition_Item(*from.winger_pistol_);
  } else {
    winger_pistol_ = nullptr;
  }
  has_team_textures_ = from.has_team_textures_;
  // @@protoc_insertion_point(copy_constructor:CMsgPaintKit_Definition)
}

void CMsgPaintKit_Definition::SharedCtor() {
loc_desctoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&has_team_textures_) -
    reinterpret_cast<char*>(&header_)) + sizeof(has_team_textures_));
}

CMsgPaintKit_Definition::~CMsgPaintKit_Definition() {
  // @@protoc_insertion_point(destructor:CMsgPaintKit_Definition)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgPaintKit_Definition::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  loc_desctoken_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete operation_template_;
  if (this != internal_default_instance()) delete paintkit_tool_;
  if (this != internal_default_instance()) delete flamethrower_;
  if (this != internal_default_instance()) delete grenadelauncher_;
  if (this != internal_default_instance()) delete knife_;
  if (this != internal_default_instance()) delete medigun_;
  if (this != internal_default_instance()) delete minigun_;
  if (this != internal_default_instance()) delete pistol_;
  if (this != internal_default_instance()) delete revolver_;
  if (this != internal_default_instance()) delete rocketlauncher_;
  if (this != internal_default_instance()) delete scattergun_;
  if (this != internal_default_instance()) delete shotgun_;
  if (this != internal_default_instance()) delete smg_;
  if (this != internal_default_instance()) delete sniperrifle_;
  if (this != internal_default_instance()) delete stickybomb_launcher_;
  if (this != internal_default_instance()) delete ubersaw_;
  if (this != internal_default_instance()) delete wrench_;
  if (this != internal_default_instance()) delete amputator_;
  if (this != internal_default_instance()) delete atom_launcher_;
  if (this != internal_default_instance()) delete back_scratcher_;
  if (this != internal_default_instance()) delete battleaxe_;
  if (this != internal_default_instance()) delete bazaar_sniper_;
  if (this != internal_default_instance()) delete blackbox_;
  if (this != internal_default_instance()) delete claidheamohmor_;
  if (this != internal_default_instance()) delete crusaders_crossbow_;
  if (this != internal_default_instance()) delete degreaser_;
  if (this != internal_default_instance()) delete demo_cannon_;
  if (this != internal_default_instance()) delete demo_sultan_sword_;
  if (this != internal_default_instance()) delete detonator_;
  if (this != internal_default_instance()) delete gatling_gun_;
  if (this != internal_default_instance()) delete holymackerel_;
  if (this != internal_default_instance()) delete jag_;
  if (this != internal_default_instance()) delete lochnload_;
  if (this != internal_default_instance()) delete powerjack_;
  if (this != internal_default_instance()) delete quadball_;
  if (this != internal_default_instance()) delete reserve_shooter_;
  if (this != internal_default_instance()) delete riding_crop_;
  if (this != internal_default_instance()) delete russian_riot_;
  if (this != internal_default_instance()) delete scimitar_;
  if (this != internal_default_instance()) delete scorch_shot_;
  if (this != internal_default_instance()) delete shortstop_;
  if (this != internal_default_instance()) delete soda_popper_;
  if (this != internal_default_instance()) delete tele_shotgun_;
  if (this != internal_default_instance()) delete tomislav_;
  if (this != internal_default_instance()) delete trenchgun_;
  if (this != internal_default_instance()) delete winger_pistol_;
}

void CMsgPaintKit_Definition::ArenaDtor(void* object) {
  CMsgPaintKit_Definition* _this = reinterpret_cast< CMsgPaintKit_Definition* >(object);
  (void)_this;
}
void CMsgPaintKit_Definition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgPaintKit_Definition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgPaintKit_Definition::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPaintKit_Definition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      loc_desctoken_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(header_ != nullptr);
      header_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(operation_template_ != nullptr);
      operation_template_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(paintkit_tool_ != nullptr);
      paintkit_tool_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(flamethrower_ != nullptr);
      flamethrower_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(grenadelauncher_ != nullptr);
      grenadelauncher_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(knife_ != nullptr);
      knife_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(medigun_ != nullptr);
      medigun_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(minigun_ != nullptr);
      minigun_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(pistol_ != nullptr);
      pistol_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(revolver_ != nullptr);
      revolver_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(rocketlauncher_ != nullptr);
      rocketlauncher_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(scattergun_ != nullptr);
      scattergun_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(shotgun_ != nullptr);
      shotgun_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(smg_ != nullptr);
      smg_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(sniperrifle_ != nullptr);
      sniperrifle_->Clear();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(stickybomb_launcher_ != nullptr);
      stickybomb_launcher_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(ubersaw_ != nullptr);
      ubersaw_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(wrench_ != nullptr);
      wrench_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(amputator_ != nullptr);
      amputator_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(atom_launcher_ != nullptr);
      atom_launcher_->Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(back_scratcher_ != nullptr);
      back_scratcher_->Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(battleaxe_ != nullptr);
      battleaxe_->Clear();
    }
    if (cached_has_bits & 0x00800000u) {
      GOOGLE_DCHECK(bazaar_sniper_ != nullptr);
      bazaar_sniper_->Clear();
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      GOOGLE_DCHECK(blackbox_ != nullptr);
      blackbox_->Clear();
    }
    if (cached_has_bits & 0x02000000u) {
      GOOGLE_DCHECK(claidheamohmor_ != nullptr);
      claidheamohmor_->Clear();
    }
    if (cached_has_bits & 0x04000000u) {
      GOOGLE_DCHECK(crusaders_crossbow_ != nullptr);
      crusaders_crossbow_->Clear();
    }
    if (cached_has_bits & 0x08000000u) {
      GOOGLE_DCHECK(degreaser_ != nullptr);
      degreaser_->Clear();
    }
    if (cached_has_bits & 0x10000000u) {
      GOOGLE_DCHECK(demo_cannon_ != nullptr);
      demo_cannon_->Clear();
    }
    if (cached_has_bits & 0x20000000u) {
      GOOGLE_DCHECK(demo_sultan_sword_ != nullptr);
      demo_sultan_sword_->Clear();
    }
    if (cached_has_bits & 0x40000000u) {
      GOOGLE_DCHECK(detonator_ != nullptr);
      detonator_->Clear();
    }
    if (cached_has_bits & 0x80000000u) {
      GOOGLE_DCHECK(gatling_gun_ != nullptr);
      gatling_gun_->Clear();
    }
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(holymackerel_ != nullptr);
      holymackerel_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(jag_ != nullptr);
      jag_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(lochnload_ != nullptr);
      lochnload_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(powerjack_ != nullptr);
      powerjack_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(quadball_ != nullptr);
      quadball_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(reserve_shooter_ != nullptr);
      reserve_shooter_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(riding_crop_ != nullptr);
      riding_crop_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(russian_riot_ != nullptr);
      russian_riot_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(scimitar_ != nullptr);
      scimitar_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(scorch_shot_ != nullptr);
      scorch_shot_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(shortstop_ != nullptr);
      shortstop_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(soda_popper_ != nullptr);
      soda_popper_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(tele_shotgun_ != nullptr);
      tele_shotgun_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(tomislav_ != nullptr);
      tomislav_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(trenchgun_ != nullptr);
      trenchgun_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(winger_pistol_ != nullptr);
      winger_pistol_->Clear();
    }
  }
  has_team_textures_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPaintKit_Definition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .CMsgProtoDefHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string loc_desctoken = 2 [(.localized) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_loc_desctoken();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgPaintKit_Definition.loc_desctoken");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgProtoDefID operation_template = 3 [(.valid_type) = DEF_TYPE_PAINTKIT_OPERATION, (.comment) = "operation template which all items in the list will use unless there\'s operation_template specified in an item_definition", (.inherit_reference_variables) = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_operation_template(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool has_team_textures = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_has_team_textures(&_has_bits_);
          has_team_textures_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgPaintKit_Definition.Item item = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_item(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .CMsgPaintKit_Definition.Item paintkit_tool = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_paintkit_tool(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgPaintKit_Definition.Item flamethrower = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_flamethrower(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgPaintKit_Definition.Item grenadelauncher = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_grenadelauncher(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgPaintKit_Definition.Item knife = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_knife(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgPaintKit_Definition.Item medigun = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_medigun(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgPaintKit_Definition.Item minigun = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_minigun(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgPaintKit_Definition.Item pistol = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_pistol(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgPaintKit_Definition.Item revolver = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_revolver(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgPaintKit_Definition.Item rocketlauncher = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_rocketlauncher(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgPaintKit_Definition.Item scattergun = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_scattergun(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgPaintKit_Definition.Item shotgun = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_shotgun(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgPaintKit_Definition.Item smg = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_smg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgPaintKit_Definition.Item sniperrifle = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_sniperrifle(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgPaintKit_Definition.Item stickybomb_launcher = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_stickybomb_launcher(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgPaintKit_Definition.Item ubersaw = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_ubersaw(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgPaintKit_Definition.Item wrench = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_wrench(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgPaintKit_Definition.Item amputator = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_amputator(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgPaintKit_Definition.Item atom_launcher = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_atom_launcher(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgPaintKit_Definition.Item back_scratcher = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_back_scratcher(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgPaintKit_Definition.Item battleaxe = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_battleaxe(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgPaintKit_Definition.Item bazaar_sniper = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_bazaar_sniper(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgPaintKit_Definition.Item blackbox = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_blackbox(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgPaintKit_Definition.Item claidheamohmor = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_claidheamohmor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgPaintKit_Definition.Item crusaders_crossbow = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_crusaders_crossbow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgPaintKit_Definition.Item degreaser = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_degreaser(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgPaintKit_Definition.Item demo_cannon = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_demo_cannon(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgPaintKit_Definition.Item demo_sultan_sword = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_demo_sultan_sword(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgPaintKit_Definition.Item detonator = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_detonator(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgPaintKit_Definition.Item gatling_gun = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_gatling_gun(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgPaintKit_Definition.Item holymackerel = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_holymackerel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgPaintKit_Definition.Item jag = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_jag(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgPaintKit_Definition.Item lochnload = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_lochnload(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgPaintKit_Definition.Item powerjack = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_powerjack(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgPaintKit_Definition.Item quadball = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_quadball(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgPaintKit_Definition.Item reserve_shooter = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_reserve_shooter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgPaintKit_Definition.Item riding_crop = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_riding_crop(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgPaintKit_Definition.Item russian_riot = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_russian_riot(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgPaintKit_Definition.Item scimitar = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_scimitar(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgPaintKit_Definition.Item scorch_shot = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_scorch_shot(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgPaintKit_Definition.Item shortstop = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_shortstop(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgPaintKit_Definition.Item soda_popper = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_soda_popper(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgPaintKit_Definition.Item tele_shotgun = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_tele_shotgun(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgPaintKit_Definition.Item tomislav = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_tomislav(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgPaintKit_Definition.Item trenchgun = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_trenchgun(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgPaintKit_Definition.Item winger_pistol = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_winger_pistol(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgPaintKit_Definition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPaintKit_Definition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .CMsgProtoDefHeader header = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // optional string loc_desctoken = 2 [(.localized) = true];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_loc_desctoken().data(), static_cast<int>(this->_internal_loc_desctoken().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgPaintKit_Definition.loc_desctoken");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_loc_desctoken(), target);
  }

  // optional .CMsgProtoDefID operation_template = 3 [(.valid_type) = DEF_TYPE_PAINTKIT_OPERATION, (.comment) = "operation template which all items in the list will use unless there\'s operation_template specified in an item_definition", (.inherit_reference_variables) = true];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::operation_template(this), target, stream);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool has_team_textures = 4;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_has_team_textures(), target);
  }

  // repeated .CMsgPaintKit_Definition.Item item = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_item_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_item(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .CMsgPaintKit_Definition.Item paintkit_tool = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::paintkit_tool(this), target, stream);
  }

  // optional .CMsgPaintKit_Definition.Item flamethrower = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::flamethrower(this), target, stream);
  }

  // optional .CMsgPaintKit_Definition.Item grenadelauncher = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::grenadelauncher(this), target, stream);
  }

  // optional .CMsgPaintKit_Definition.Item knife = 9;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::knife(this), target, stream);
  }

  // optional .CMsgPaintKit_Definition.Item medigun = 10;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::medigun(this), target, stream);
  }

  // optional .CMsgPaintKit_Definition.Item minigun = 11;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::minigun(this), target, stream);
  }

  // optional .CMsgPaintKit_Definition.Item pistol = 12;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::pistol(this), target, stream);
  }

  // optional .CMsgPaintKit_Definition.Item revolver = 13;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::revolver(this), target, stream);
  }

  // optional .CMsgPaintKit_Definition.Item rocketlauncher = 14;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::rocketlauncher(this), target, stream);
  }

  // optional .CMsgPaintKit_Definition.Item scattergun = 15;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::scattergun(this), target, stream);
  }

  // optional .CMsgPaintKit_Definition.Item shotgun = 16;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::shotgun(this), target, stream);
  }

  // optional .CMsgPaintKit_Definition.Item smg = 17;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::smg(this), target, stream);
  }

  // optional .CMsgPaintKit_Definition.Item sniperrifle = 18;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::sniperrifle(this), target, stream);
  }

  // optional .CMsgPaintKit_Definition.Item stickybomb_launcher = 19;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::stickybomb_launcher(this), target, stream);
  }

  // optional .CMsgPaintKit_Definition.Item ubersaw = 20;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::ubersaw(this), target, stream);
  }

  // optional .CMsgPaintKit_Definition.Item wrench = 21;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::wrench(this), target, stream);
  }

  // optional .CMsgPaintKit_Definition.Item amputator = 22;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::amputator(this), target, stream);
  }

  // optional .CMsgPaintKit_Definition.Item atom_launcher = 23;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::atom_launcher(this), target, stream);
  }

  // optional .CMsgPaintKit_Definition.Item back_scratcher = 24;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        24, _Internal::back_scratcher(this), target, stream);
  }

  // optional .CMsgPaintKit_Definition.Item battleaxe = 25;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::battleaxe(this), target, stream);
  }

  // optional .CMsgPaintKit_Definition.Item bazaar_sniper = 26;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        26, _Internal::bazaar_sniper(this), target, stream);
  }

  // optional .CMsgPaintKit_Definition.Item blackbox = 27;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        27, _Internal::blackbox(this), target, stream);
  }

  // optional .CMsgPaintKit_Definition.Item claidheamohmor = 28;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        28, _Internal::claidheamohmor(this), target, stream);
  }

  // optional .CMsgPaintKit_Definition.Item crusaders_crossbow = 29;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        29, _Internal::crusaders_crossbow(this), target, stream);
  }

  // optional .CMsgPaintKit_Definition.Item degreaser = 30;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        30, _Internal::degreaser(this), target, stream);
  }

  // optional .CMsgPaintKit_Definition.Item demo_cannon = 31;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        31, _Internal::demo_cannon(this), target, stream);
  }

  // optional .CMsgPaintKit_Definition.Item demo_sultan_sword = 32;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        32, _Internal::demo_sultan_sword(this), target, stream);
  }

  // optional .CMsgPaintKit_Definition.Item detonator = 33;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        33, _Internal::detonator(this), target, stream);
  }

  // optional .CMsgPaintKit_Definition.Item gatling_gun = 34;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        34, _Internal::gatling_gun(this), target, stream);
  }

  cached_has_bits = _has_bits_[1];
  // optional .CMsgPaintKit_Definition.Item holymackerel = 35;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        35, _Internal::holymackerel(this), target, stream);
  }

  // optional .CMsgPaintKit_Definition.Item jag = 36;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        36, _Internal::jag(this), target, stream);
  }

  // optional .CMsgPaintKit_Definition.Item lochnload = 37;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        37, _Internal::lochnload(this), target, stream);
  }

  // optional .CMsgPaintKit_Definition.Item powerjack = 38;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        38, _Internal::powerjack(this), target, stream);
  }

  // optional .CMsgPaintKit_Definition.Item quadball = 39;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        39, _Internal::quadball(this), target, stream);
  }

  // optional .CMsgPaintKit_Definition.Item reserve_shooter = 40;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        40, _Internal::reserve_shooter(this), target, stream);
  }

  // optional .CMsgPaintKit_Definition.Item riding_crop = 41;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        41, _Internal::riding_crop(this), target, stream);
  }

  // optional .CMsgPaintKit_Definition.Item russian_riot = 42;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        42, _Internal::russian_riot(this), target, stream);
  }

  // optional .CMsgPaintKit_Definition.Item scimitar = 43;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        43, _Internal::scimitar(this), target, stream);
  }

  // optional .CMsgPaintKit_Definition.Item scorch_shot = 44;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        44, _Internal::scorch_shot(this), target, stream);
  }

  // optional .CMsgPaintKit_Definition.Item shortstop = 45;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        45, _Internal::shortstop(this), target, stream);
  }

  // optional .CMsgPaintKit_Definition.Item soda_popper = 46;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        46, _Internal::soda_popper(this), target, stream);
  }

  // optional .CMsgPaintKit_Definition.Item tele_shotgun = 47;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        47, _Internal::tele_shotgun(this), target, stream);
  }

  // optional .CMsgPaintKit_Definition.Item tomislav = 48;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        48, _Internal::tomislav(this), target, stream);
  }

  // optional .CMsgPaintKit_Definition.Item trenchgun = 49;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        49, _Internal::trenchgun(this), target, stream);
  }

  // optional .CMsgPaintKit_Definition.Item winger_pistol = 50;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        50, _Internal::winger_pistol(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPaintKit_Definition)
  return target;
}

size_t CMsgPaintKit_Definition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPaintKit_Definition)
  size_t total_size = 0;

  // required .CMsgProtoDefHeader header = 1;
  if (_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgPaintKit_Definition.Item item = 5;
  total_size += 1UL * this->_internal_item_size();
  for (const auto& msg : this->item_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string loc_desctoken = 2 [(.localized) = true];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_loc_desctoken());
  }

  if (cached_has_bits & 0x000000fcu) {
    // optional .CMsgProtoDefID operation_template = 3 [(.valid_type) = DEF_TYPE_PAINTKIT_OPERATION, (.comment) = "operation template which all items in the list will use unless there\'s operation_template specified in an item_definition", (.inherit_reference_variables) = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *operation_template_);
    }

    // optional .CMsgPaintKit_Definition.Item paintkit_tool = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *paintkit_tool_);
    }

    // optional .CMsgPaintKit_Definition.Item flamethrower = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *flamethrower_);
    }

    // optional .CMsgPaintKit_Definition.Item grenadelauncher = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *grenadelauncher_);
    }

    // optional .CMsgPaintKit_Definition.Item knife = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *knife_);
    }

    // optional .CMsgPaintKit_Definition.Item medigun = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *medigun_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .CMsgPaintKit_Definition.Item minigun = 11;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *minigun_);
    }

    // optional .CMsgPaintKit_Definition.Item pistol = 12;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pistol_);
    }

    // optional .CMsgPaintKit_Definition.Item revolver = 13;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *revolver_);
    }

    // optional .CMsgPaintKit_Definition.Item rocketlauncher = 14;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rocketlauncher_);
    }

    // optional .CMsgPaintKit_Definition.Item scattergun = 15;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *scattergun_);
    }

    // optional .CMsgPaintKit_Definition.Item shotgun = 16;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *shotgun_);
    }

    // optional .CMsgPaintKit_Definition.Item smg = 17;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *smg_);
    }

    // optional .CMsgPaintKit_Definition.Item sniperrifle = 18;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sniperrifle_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .CMsgPaintKit_Definition.Item stickybomb_launcher = 19;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stickybomb_launcher_);
    }

    // optional .CMsgPaintKit_Definition.Item ubersaw = 20;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ubersaw_);
    }

    // optional .CMsgPaintKit_Definition.Item wrench = 21;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *wrench_);
    }

    // optional .CMsgPaintKit_Definition.Item amputator = 22;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *amputator_);
    }

    // optional .CMsgPaintKit_Definition.Item atom_launcher = 23;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *atom_launcher_);
    }

    // optional .CMsgPaintKit_Definition.Item back_scratcher = 24;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *back_scratcher_);
    }

    // optional .CMsgPaintKit_Definition.Item battleaxe = 25;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *battleaxe_);
    }

    // optional .CMsgPaintKit_Definition.Item bazaar_sniper = 26;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *bazaar_sniper_);
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional .CMsgPaintKit_Definition.Item blackbox = 27;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *blackbox_);
    }

    // optional .CMsgPaintKit_Definition.Item claidheamohmor = 28;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *claidheamohmor_);
    }

    // optional .CMsgPaintKit_Definition.Item crusaders_crossbow = 29;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *crusaders_crossbow_);
    }

    // optional .CMsgPaintKit_Definition.Item degreaser = 30;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *degreaser_);
    }

    // optional .CMsgPaintKit_Definition.Item demo_cannon = 31;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *demo_cannon_);
    }

    // optional .CMsgPaintKit_Definition.Item demo_sultan_sword = 32;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *demo_sultan_sword_);
    }

    // optional .CMsgPaintKit_Definition.Item detonator = 33;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *detonator_);
    }

    // optional .CMsgPaintKit_Definition.Item gatling_gun = 34;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *gatling_gun_);
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional .CMsgPaintKit_Definition.Item holymackerel = 35;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *holymackerel_);
    }

    // optional .CMsgPaintKit_Definition.Item jag = 36;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *jag_);
    }

    // optional .CMsgPaintKit_Definition.Item lochnload = 37;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *lochnload_);
    }

    // optional .CMsgPaintKit_Definition.Item powerjack = 38;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *powerjack_);
    }

    // optional .CMsgPaintKit_Definition.Item quadball = 39;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *quadball_);
    }

    // optional .CMsgPaintKit_Definition.Item reserve_shooter = 40;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *reserve_shooter_);
    }

    // optional .CMsgPaintKit_Definition.Item riding_crop = 41;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *riding_crop_);
    }

    // optional .CMsgPaintKit_Definition.Item russian_riot = 42;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *russian_riot_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .CMsgPaintKit_Definition.Item scimitar = 43;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *scimitar_);
    }

    // optional .CMsgPaintKit_Definition.Item scorch_shot = 44;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *scorch_shot_);
    }

    // optional .CMsgPaintKit_Definition.Item shortstop = 45;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *shortstop_);
    }

    // optional .CMsgPaintKit_Definition.Item soda_popper = 46;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *soda_popper_);
    }

    // optional .CMsgPaintKit_Definition.Item tele_shotgun = 47;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tele_shotgun_);
    }

    // optional .CMsgPaintKit_Definition.Item tomislav = 48;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tomislav_);
    }

    // optional .CMsgPaintKit_Definition.Item trenchgun = 49;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *trenchgun_);
    }

    // optional .CMsgPaintKit_Definition.Item winger_pistol = 50;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *winger_pistol_);
    }

  }
  // optional bool has_team_textures = 4;
  if (cached_has_bits & 0x00010000u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPaintKit_Definition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgPaintKit_Definition)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPaintKit_Definition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgPaintKit_Definition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgPaintKit_Definition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgPaintKit_Definition)
    MergeFrom(*source);
  }
}

void CMsgPaintKit_Definition::MergeFrom(const CMsgPaintKit_Definition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgPaintKit_Definition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_.MergeFrom(from.item_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_loc_desctoken(from._internal_loc_desctoken());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_header()->::CMsgProtoDefHeader::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_operation_template()->::CMsgProtoDefID::MergeFrom(from._internal_operation_template());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_paintkit_tool()->::CMsgPaintKit_Definition_Item::MergeFrom(from._internal_paintkit_tool());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_flamethrower()->::CMsgPaintKit_Definition_Item::MergeFrom(from._internal_flamethrower());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_grenadelauncher()->::CMsgPaintKit_Definition_Item::MergeFrom(from._internal_grenadelauncher());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_knife()->::CMsgPaintKit_Definition_Item::MergeFrom(from._internal_knife());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_medigun()->::CMsgPaintKit_Definition_Item::MergeFrom(from._internal_medigun());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_minigun()->::CMsgPaintKit_Definition_Item::MergeFrom(from._internal_minigun());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_pistol()->::CMsgPaintKit_Definition_Item::MergeFrom(from._internal_pistol());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_revolver()->::CMsgPaintKit_Definition_Item::MergeFrom(from._internal_revolver());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_rocketlauncher()->::CMsgPaintKit_Definition_Item::MergeFrom(from._internal_rocketlauncher());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_scattergun()->::CMsgPaintKit_Definition_Item::MergeFrom(from._internal_scattergun());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_mutable_shotgun()->::CMsgPaintKit_Definition_Item::MergeFrom(from._internal_shotgun());
    }
    if (cached_has_bits & 0x00004000u) {
      _internal_mutable_smg()->::CMsgPaintKit_Definition_Item::MergeFrom(from._internal_smg());
    }
    if (cached_has_bits & 0x00008000u) {
      _internal_mutable_sniperrifle()->::CMsgPaintKit_Definition_Item::MergeFrom(from._internal_sniperrifle());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _internal_mutable_stickybomb_launcher()->::CMsgPaintKit_Definition_Item::MergeFrom(from._internal_stickybomb_launcher());
    }
    if (cached_has_bits & 0x00020000u) {
      _internal_mutable_ubersaw()->::CMsgPaintKit_Definition_Item::MergeFrom(from._internal_ubersaw());
    }
    if (cached_has_bits & 0x00040000u) {
      _internal_mutable_wrench()->::CMsgPaintKit_Definition_Item::MergeFrom(from._internal_wrench());
    }
    if (cached_has_bits & 0x00080000u) {
      _internal_mutable_amputator()->::CMsgPaintKit_Definition_Item::MergeFrom(from._internal_amputator());
    }
    if (cached_has_bits & 0x00100000u) {
      _internal_mutable_atom_launcher()->::CMsgPaintKit_Definition_Item::MergeFrom(from._internal_atom_launcher());
    }
    if (cached_has_bits & 0x00200000u) {
      _internal_mutable_back_scratcher()->::CMsgPaintKit_Definition_Item::MergeFrom(from._internal_back_scratcher());
    }
    if (cached_has_bits & 0x00400000u) {
      _internal_mutable_battleaxe()->::CMsgPaintKit_Definition_Item::MergeFrom(from._internal_battleaxe());
    }
    if (cached_has_bits & 0x00800000u) {
      _internal_mutable_bazaar_sniper()->::CMsgPaintKit_Definition_Item::MergeFrom(from._internal_bazaar_sniper());
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _internal_mutable_blackbox()->::CMsgPaintKit_Definition_Item::MergeFrom(from._internal_blackbox());
    }
    if (cached_has_bits & 0x02000000u) {
      _internal_mutable_claidheamohmor()->::CMsgPaintKit_Definition_Item::MergeFrom(from._internal_claidheamohmor());
    }
    if (cached_has_bits & 0x04000000u) {
      _internal_mutable_crusaders_crossbow()->::CMsgPaintKit_Definition_Item::MergeFrom(from._internal_crusaders_crossbow());
    }
    if (cached_has_bits & 0x08000000u) {
      _internal_mutable_degreaser()->::CMsgPaintKit_Definition_Item::MergeFrom(from._internal_degreaser());
    }
    if (cached_has_bits & 0x10000000u) {
      _internal_mutable_demo_cannon()->::CMsgPaintKit_Definition_Item::MergeFrom(from._internal_demo_cannon());
    }
    if (cached_has_bits & 0x20000000u) {
      _internal_mutable_demo_sultan_sword()->::CMsgPaintKit_Definition_Item::MergeFrom(from._internal_demo_sultan_sword());
    }
    if (cached_has_bits & 0x40000000u) {
      _internal_mutable_detonator()->::CMsgPaintKit_Definition_Item::MergeFrom(from._internal_detonator());
    }
    if (cached_has_bits & 0x80000000u) {
      _internal_mutable_gatling_gun()->::CMsgPaintKit_Definition_Item::MergeFrom(from._internal_gatling_gun());
    }
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_holymackerel()->::CMsgPaintKit_Definition_Item::MergeFrom(from._internal_holymackerel());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_jag()->::CMsgPaintKit_Definition_Item::MergeFrom(from._internal_jag());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_lochnload()->::CMsgPaintKit_Definition_Item::MergeFrom(from._internal_lochnload());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_powerjack()->::CMsgPaintKit_Definition_Item::MergeFrom(from._internal_powerjack());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_quadball()->::CMsgPaintKit_Definition_Item::MergeFrom(from._internal_quadball());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_reserve_shooter()->::CMsgPaintKit_Definition_Item::MergeFrom(from._internal_reserve_shooter());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_riding_crop()->::CMsgPaintKit_Definition_Item::MergeFrom(from._internal_riding_crop());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_russian_riot()->::CMsgPaintKit_Definition_Item::MergeFrom(from._internal_russian_riot());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_scimitar()->::CMsgPaintKit_Definition_Item::MergeFrom(from._internal_scimitar());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_scorch_shot()->::CMsgPaintKit_Definition_Item::MergeFrom(from._internal_scorch_shot());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_shortstop()->::CMsgPaintKit_Definition_Item::MergeFrom(from._internal_shortstop());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_soda_popper()->::CMsgPaintKit_Definition_Item::MergeFrom(from._internal_soda_popper());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_tele_shotgun()->::CMsgPaintKit_Definition_Item::MergeFrom(from._internal_tele_shotgun());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_mutable_tomislav()->::CMsgPaintKit_Definition_Item::MergeFrom(from._internal_tomislav());
    }
    if (cached_has_bits & 0x00004000u) {
      _internal_mutable_trenchgun()->::CMsgPaintKit_Definition_Item::MergeFrom(from._internal_trenchgun());
    }
    if (cached_has_bits & 0x00008000u) {
      _internal_mutable_winger_pistol()->::CMsgPaintKit_Definition_Item::MergeFrom(from._internal_winger_pistol());
    }
  }
  if (cached_has_bits & 0x00010000u) {
    _internal_set_has_team_textures(from._internal_has_team_textures());
  }
}

void CMsgPaintKit_Definition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgPaintKit_Definition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPaintKit_Definition::CopyFrom(const CMsgPaintKit_Definition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPaintKit_Definition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPaintKit_Definition::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(item_)) return false;
  if (_internal_has_header()) {
    if (!header_->IsInitialized()) return false;
  }
  if (_internal_has_operation_template()) {
    if (!operation_template_->IsInitialized()) return false;
  }
  if (_internal_has_paintkit_tool()) {
    if (!paintkit_tool_->IsInitialized()) return false;
  }
  if (_internal_has_flamethrower()) {
    if (!flamethrower_->IsInitialized()) return false;
  }
  if (_internal_has_grenadelauncher()) {
    if (!grenadelauncher_->IsInitialized()) return false;
  }
  if (_internal_has_knife()) {
    if (!knife_->IsInitialized()) return false;
  }
  if (_internal_has_medigun()) {
    if (!medigun_->IsInitialized()) return false;
  }
  if (_internal_has_minigun()) {
    if (!minigun_->IsInitialized()) return false;
  }
  if (_internal_has_pistol()) {
    if (!pistol_->IsInitialized()) return false;
  }
  if (_internal_has_revolver()) {
    if (!revolver_->IsInitialized()) return false;
  }
  if (_internal_has_rocketlauncher()) {
    if (!rocketlauncher_->IsInitialized()) return false;
  }
  if (_internal_has_scattergun()) {
    if (!scattergun_->IsInitialized()) return false;
  }
  if (_internal_has_shotgun()) {
    if (!shotgun_->IsInitialized()) return false;
  }
  if (_internal_has_smg()) {
    if (!smg_->IsInitialized()) return false;
  }
  if (_internal_has_sniperrifle()) {
    if (!sniperrifle_->IsInitialized()) return false;
  }
  if (_internal_has_stickybomb_launcher()) {
    if (!stickybomb_launcher_->IsInitialized()) return false;
  }
  if (_internal_has_ubersaw()) {
    if (!ubersaw_->IsInitialized()) return false;
  }
  if (_internal_has_wrench()) {
    if (!wrench_->IsInitialized()) return false;
  }
  if (_internal_has_amputator()) {
    if (!amputator_->IsInitialized()) return false;
  }
  if (_internal_has_atom_launcher()) {
    if (!atom_launcher_->IsInitialized()) return false;
  }
  if (_internal_has_back_scratcher()) {
    if (!back_scratcher_->IsInitialized()) return false;
  }
  if (_internal_has_battleaxe()) {
    if (!battleaxe_->IsInitialized()) return false;
  }
  if (_internal_has_bazaar_sniper()) {
    if (!bazaar_sniper_->IsInitialized()) return false;
  }
  if (_internal_has_blackbox()) {
    if (!blackbox_->IsInitialized()) return false;
  }
  if (_internal_has_claidheamohmor()) {
    if (!claidheamohmor_->IsInitialized()) return false;
  }
  if (_internal_has_crusaders_crossbow()) {
    if (!crusaders_crossbow_->IsInitialized()) return false;
  }
  if (_internal_has_degreaser()) {
    if (!degreaser_->IsInitialized()) return false;
  }
  if (_internal_has_demo_cannon()) {
    if (!demo_cannon_->IsInitialized()) return false;
  }
  if (_internal_has_demo_sultan_sword()) {
    if (!demo_sultan_sword_->IsInitialized()) return false;
  }
  if (_internal_has_detonator()) {
    if (!detonator_->IsInitialized()) return false;
  }
  if (_internal_has_gatling_gun()) {
    if (!gatling_gun_->IsInitialized()) return false;
  }
  if (_internal_has_holymackerel()) {
    if (!holymackerel_->IsInitialized()) return false;
  }
  if (_internal_has_jag()) {
    if (!jag_->IsInitialized()) return false;
  }
  if (_internal_has_lochnload()) {
    if (!lochnload_->IsInitialized()) return false;
  }
  if (_internal_has_powerjack()) {
    if (!powerjack_->IsInitialized()) return false;
  }
  if (_internal_has_quadball()) {
    if (!quadball_->IsInitialized()) return false;
  }
  if (_internal_has_reserve_shooter()) {
    if (!reserve_shooter_->IsInitialized()) return false;
  }
  if (_internal_has_riding_crop()) {
    if (!riding_crop_->IsInitialized()) return false;
  }
  if (_internal_has_russian_riot()) {
    if (!russian_riot_->IsInitialized()) return false;
  }
  if (_internal_has_scimitar()) {
    if (!scimitar_->IsInitialized()) return false;
  }
  if (_internal_has_scorch_shot()) {
    if (!scorch_shot_->IsInitialized()) return false;
  }
  if (_internal_has_shortstop()) {
    if (!shortstop_->IsInitialized()) return false;
  }
  if (_internal_has_soda_popper()) {
    if (!soda_popper_->IsInitialized()) return false;
  }
  if (_internal_has_tele_shotgun()) {
    if (!tele_shotgun_->IsInitialized()) return false;
  }
  if (_internal_has_tomislav()) {
    if (!tomislav_->IsInitialized()) return false;
  }
  if (_internal_has_trenchgun()) {
    if (!trenchgun_->IsInitialized()) return false;
  }
  if (_internal_has_winger_pistol()) {
    if (!winger_pistol_->IsInitialized()) return false;
  }
  return true;
}

void CMsgPaintKit_Definition::InternalSwap(CMsgPaintKit_Definition* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  item_.InternalSwap(&other->item_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &loc_desctoken_, GetArenaForAllocation(),
      &other->loc_desctoken_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgPaintKit_Definition, has_team_textures_)
      + sizeof(CMsgPaintKit_Definition::has_team_textures_)
      - PROTOBUF_FIELD_OFFSET(CMsgPaintKit_Definition, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPaintKit_Definition::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fproto_5fdef_5fmessages_2eproto_getter, &descriptor_table_tf_5fproto_5fdef_5fmessages_2eproto_once,
      file_level_metadata_tf_5fproto_5fdef_5fmessages_2eproto[30]);
}

// ===================================================================

class CMsgQuestTheme_WeightedString::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgQuestTheme_WeightedString>()._has_bits_);
  static void set_has_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgQuestTheme_WeightedString::CMsgQuestTheme_WeightedString(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgQuestTheme.WeightedString)
}
CMsgQuestTheme_WeightedString::CMsgQuestTheme_WeightedString(const CMsgQuestTheme_WeightedString& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_string()) {
    string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_string(), 
      GetArenaForAllocation());
  }
  weight_ = from.weight_;
  // @@protoc_insertion_point(copy_constructor:CMsgQuestTheme.WeightedString)
}

void CMsgQuestTheme_WeightedString::SharedCtor() {
string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
weight_ = 0u;
}

CMsgQuestTheme_WeightedString::~CMsgQuestTheme_WeightedString() {
  // @@protoc_insertion_point(destructor:CMsgQuestTheme.WeightedString)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgQuestTheme_WeightedString::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgQuestTheme_WeightedString::ArenaDtor(void* object) {
  CMsgQuestTheme_WeightedString* _this = reinterpret_cast< CMsgQuestTheme_WeightedString* >(object);
  (void)_this;
}
void CMsgQuestTheme_WeightedString::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgQuestTheme_WeightedString::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgQuestTheme_WeightedString::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgQuestTheme.WeightedString)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    string_.ClearNonDefaultToEmpty();
  }
  weight_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgQuestTheme_WeightedString::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string string = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgQuestTheme.WeightedString.string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 weight = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_weight(&has_bits);
          weight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgQuestTheme_WeightedString::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgQuestTheme.WeightedString)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string string = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_string().data(), static_cast<int>(this->_internal_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgQuestTheme.WeightedString.string");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_string(), target);
  }

  // optional uint32 weight = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_weight(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgQuestTheme.WeightedString)
  return target;
}

size_t CMsgQuestTheme_WeightedString::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgQuestTheme.WeightedString)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string string = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string());
    }

    // optional uint32 weight = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_weight());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgQuestTheme_WeightedString::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgQuestTheme.WeightedString)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgQuestTheme_WeightedString* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgQuestTheme_WeightedString>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgQuestTheme.WeightedString)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgQuestTheme.WeightedString)
    MergeFrom(*source);
  }
}

void CMsgQuestTheme_WeightedString::MergeFrom(const CMsgQuestTheme_WeightedString& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgQuestTheme.WeightedString)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_string(from._internal_string());
    }
    if (cached_has_bits & 0x00000002u) {
      weight_ = from.weight_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgQuestTheme_WeightedString::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgQuestTheme.WeightedString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgQuestTheme_WeightedString::CopyFrom(const CMsgQuestTheme_WeightedString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgQuestTheme.WeightedString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgQuestTheme_WeightedString::IsInitialized() const {
  return true;
}

void CMsgQuestTheme_WeightedString::InternalSwap(CMsgQuestTheme_WeightedString* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &string_, GetArenaForAllocation(),
      &other->string_, other->GetArenaForAllocation()
  );
  swap(weight_, other->weight_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgQuestTheme_WeightedString::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fproto_5fdef_5fmessages_2eproto_getter, &descriptor_table_tf_5fproto_5fdef_5fmessages_2eproto_once,
      file_level_metadata_tf_5fproto_5fdef_5fmessages_2eproto[31]);
}

// ===================================================================

class CMsgQuestTheme_WeightedStringSet::_Internal {
 public:
};

CMsgQuestTheme_WeightedStringSet::CMsgQuestTheme_WeightedStringSet(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  weighted_strings_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgQuestTheme.WeightedStringSet)
}
CMsgQuestTheme_WeightedStringSet::CMsgQuestTheme_WeightedStringSet(const CMsgQuestTheme_WeightedStringSet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      weighted_strings_(from.weighted_strings_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgQuestTheme.WeightedStringSet)
}

void CMsgQuestTheme_WeightedStringSet::SharedCtor() {
}

CMsgQuestTheme_WeightedStringSet::~CMsgQuestTheme_WeightedStringSet() {
  // @@protoc_insertion_point(destructor:CMsgQuestTheme.WeightedStringSet)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgQuestTheme_WeightedStringSet::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgQuestTheme_WeightedStringSet::ArenaDtor(void* object) {
  CMsgQuestTheme_WeightedStringSet* _this = reinterpret_cast< CMsgQuestTheme_WeightedStringSet* >(object);
  (void)_this;
}
void CMsgQuestTheme_WeightedStringSet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgQuestTheme_WeightedStringSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgQuestTheme_WeightedStringSet::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgQuestTheme.WeightedStringSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  weighted_strings_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgQuestTheme_WeightedStringSet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgQuestTheme.WeightedString weighted_strings = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_weighted_strings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgQuestTheme_WeightedStringSet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgQuestTheme.WeightedStringSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgQuestTheme.WeightedString weighted_strings = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_weighted_strings_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_weighted_strings(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgQuestTheme.WeightedStringSet)
  return target;
}

size_t CMsgQuestTheme_WeightedStringSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgQuestTheme.WeightedStringSet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgQuestTheme.WeightedString weighted_strings = 1;
  total_size += 1UL * this->_internal_weighted_strings_size();
  for (const auto& msg : this->weighted_strings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgQuestTheme_WeightedStringSet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgQuestTheme.WeightedStringSet)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgQuestTheme_WeightedStringSet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgQuestTheme_WeightedStringSet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgQuestTheme.WeightedStringSet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgQuestTheme.WeightedStringSet)
    MergeFrom(*source);
  }
}

void CMsgQuestTheme_WeightedStringSet::MergeFrom(const CMsgQuestTheme_WeightedStringSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgQuestTheme.WeightedStringSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  weighted_strings_.MergeFrom(from.weighted_strings_);
}

void CMsgQuestTheme_WeightedStringSet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgQuestTheme.WeightedStringSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgQuestTheme_WeightedStringSet::CopyFrom(const CMsgQuestTheme_WeightedStringSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgQuestTheme.WeightedStringSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgQuestTheme_WeightedStringSet::IsInitialized() const {
  return true;
}

void CMsgQuestTheme_WeightedStringSet::InternalSwap(CMsgQuestTheme_WeightedStringSet* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  weighted_strings_.InternalSwap(&other->weighted_strings_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgQuestTheme_WeightedStringSet::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fproto_5fdef_5fmessages_2eproto_getter, &descriptor_table_tf_5fproto_5fdef_5fmessages_2eproto_once,
      file_level_metadata_tf_5fproto_5fdef_5fmessages_2eproto[32]);
}

// ===================================================================

class CMsgQuestTheme::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgQuestTheme>()._has_bits_);
  static const ::CMsgProtoDefHeader& header(const CMsgQuestTheme* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_notification_res(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_quest_item_res(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_in_game_tracker_res(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_reward_sound(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_discard_sound(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_reveal_sound(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000040) ^ 0x00000040) != 0;
  }
};

const ::CMsgProtoDefHeader&
CMsgQuestTheme::_Internal::header(const CMsgQuestTheme* msg) {
  return *msg->header_;
}
CMsgQuestTheme::CMsgQuestTheme(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  give_sounds_(arena),
  complete_sounds_(arena),
  fully_complete_sounds_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgQuestTheme)
}
CMsgQuestTheme::CMsgQuestTheme(const CMsgQuestTheme& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      give_sounds_(from.give_sounds_),
      complete_sounds_(from.complete_sounds_),
      fully_complete_sounds_(from.fully_complete_sounds_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  notification_res_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_notification_res()) {
    notification_res_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_notification_res(), 
      GetArenaForAllocation());
  }
  quest_item_res_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_quest_item_res()) {
    quest_item_res_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_quest_item_res(), 
      GetArenaForAllocation());
  }
  in_game_tracker_res_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_in_game_tracker_res()) {
    in_game_tracker_res_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_in_game_tracker_res(), 
      GetArenaForAllocation());
  }
  reward_sound_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_reward_sound()) {
    reward_sound_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reward_sound(), 
      GetArenaForAllocation());
  }
  discard_sound_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_discard_sound()) {
    discard_sound_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_discard_sound(), 
      GetArenaForAllocation());
  }
  reveal_sound_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_reveal_sound()) {
    reveal_sound_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reveal_sound(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_header()) {
    header_ = new ::CMsgProtoDefHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CMsgQuestTheme)
}

void CMsgQuestTheme::SharedCtor() {
notification_res_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
quest_item_res_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
in_game_tracker_res_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
reward_sound_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
discard_sound_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
reveal_sound_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
header_ = nullptr;
}

CMsgQuestTheme::~CMsgQuestTheme() {
  // @@protoc_insertion_point(destructor:CMsgQuestTheme)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgQuestTheme::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  notification_res_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  quest_item_res_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  in_game_tracker_res_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reward_sound_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  discard_sound_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reveal_sound_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void CMsgQuestTheme::ArenaDtor(void* object) {
  CMsgQuestTheme* _this = reinterpret_cast< CMsgQuestTheme* >(object);
  (void)_this;
}
void CMsgQuestTheme::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgQuestTheme::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgQuestTheme::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgQuestTheme)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  give_sounds_.Clear();
  complete_sounds_.Clear();
  fully_complete_sounds_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      notification_res_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      quest_item_res_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      in_game_tracker_res_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      reward_sound_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      discard_sound_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      reveal_sound_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(header_ != nullptr);
      header_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgQuestTheme::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .CMsgProtoDefHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string notification_res = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_notification_res();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgQuestTheme.notification_res");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string quest_item_res = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_quest_item_res();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgQuestTheme.quest_item_res");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string in_game_tracker_res = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_in_game_tracker_res();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgQuestTheme.in_game_tracker_res");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgQuestTheme.WeightedStringSet give_sounds = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_give_sounds(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CMsgQuestTheme.WeightedStringSet complete_sounds = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_complete_sounds(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CMsgQuestTheme.WeightedStringSet fully_complete_sounds = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fully_complete_sounds(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string reward_sound = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_reward_sound();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgQuestTheme.reward_sound");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string discard_sound = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_discard_sound();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgQuestTheme.discard_sound");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string reveal_sound = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_reveal_sound();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgQuestTheme.reveal_sound");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgQuestTheme::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgQuestTheme)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .CMsgProtoDefHeader header = 1;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // optional string notification_res = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_notification_res().data(), static_cast<int>(this->_internal_notification_res().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgQuestTheme.notification_res");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_notification_res(), target);
  }

  // optional string quest_item_res = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_quest_item_res().data(), static_cast<int>(this->_internal_quest_item_res().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgQuestTheme.quest_item_res");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_quest_item_res(), target);
  }

  // optional string in_game_tracker_res = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_in_game_tracker_res().data(), static_cast<int>(this->_internal_in_game_tracker_res().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgQuestTheme.in_game_tracker_res");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_in_game_tracker_res(), target);
  }

  // repeated .CMsgQuestTheme.WeightedStringSet give_sounds = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_give_sounds_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_give_sounds(i), target, stream);
  }

  // repeated .CMsgQuestTheme.WeightedStringSet complete_sounds = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_complete_sounds_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_complete_sounds(i), target, stream);
  }

  // repeated .CMsgQuestTheme.WeightedStringSet fully_complete_sounds = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fully_complete_sounds_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_fully_complete_sounds(i), target, stream);
  }

  // optional string reward_sound = 8;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_reward_sound().data(), static_cast<int>(this->_internal_reward_sound().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgQuestTheme.reward_sound");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_reward_sound(), target);
  }

  // optional string discard_sound = 9;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_discard_sound().data(), static_cast<int>(this->_internal_discard_sound().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgQuestTheme.discard_sound");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_discard_sound(), target);
  }

  // optional string reveal_sound = 10;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_reveal_sound().data(), static_cast<int>(this->_internal_reveal_sound().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgQuestTheme.reveal_sound");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_reveal_sound(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgQuestTheme)
  return target;
}

size_t CMsgQuestTheme::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgQuestTheme)
  size_t total_size = 0;

  // required .CMsgProtoDefHeader header = 1;
  if (_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgQuestTheme.WeightedStringSet give_sounds = 5;
  total_size += 1UL * this->_internal_give_sounds_size();
  for (const auto& msg : this->give_sounds_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgQuestTheme.WeightedStringSet complete_sounds = 6;
  total_size += 1UL * this->_internal_complete_sounds_size();
  for (const auto& msg : this->complete_sounds_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgQuestTheme.WeightedStringSet fully_complete_sounds = 7;
  total_size += 1UL * this->_internal_fully_complete_sounds_size();
  for (const auto& msg : this->fully_complete_sounds_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string notification_res = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_notification_res());
    }

    // optional string quest_item_res = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_quest_item_res());
    }

    // optional string in_game_tracker_res = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_in_game_tracker_res());
    }

    // optional string reward_sound = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_reward_sound());
    }

    // optional string discard_sound = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_discard_sound());
    }

    // optional string reveal_sound = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_reveal_sound());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgQuestTheme::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgQuestTheme)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgQuestTheme* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgQuestTheme>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgQuestTheme)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgQuestTheme)
    MergeFrom(*source);
  }
}

void CMsgQuestTheme::MergeFrom(const CMsgQuestTheme& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgQuestTheme)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  give_sounds_.MergeFrom(from.give_sounds_);
  complete_sounds_.MergeFrom(from.complete_sounds_);
  fully_complete_sounds_.MergeFrom(from.fully_complete_sounds_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_notification_res(from._internal_notification_res());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_quest_item_res(from._internal_quest_item_res());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_in_game_tracker_res(from._internal_in_game_tracker_res());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_reward_sound(from._internal_reward_sound());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_discard_sound(from._internal_discard_sound());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_reveal_sound(from._internal_reveal_sound());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_header()->::CMsgProtoDefHeader::MergeFrom(from._internal_header());
    }
  }
}

void CMsgQuestTheme::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgQuestTheme)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgQuestTheme::CopyFrom(const CMsgQuestTheme& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgQuestTheme)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgQuestTheme::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_header()) {
    if (!header_->IsInitialized()) return false;
  }
  return true;
}

void CMsgQuestTheme::InternalSwap(CMsgQuestTheme* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  give_sounds_.InternalSwap(&other->give_sounds_);
  complete_sounds_.InternalSwap(&other->complete_sounds_);
  fully_complete_sounds_.InternalSwap(&other->fully_complete_sounds_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &notification_res_, GetArenaForAllocation(),
      &other->notification_res_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &quest_item_res_, GetArenaForAllocation(),
      &other->quest_item_res_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &in_game_tracker_res_, GetArenaForAllocation(),
      &other->in_game_tracker_res_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &reward_sound_, GetArenaForAllocation(),
      &other->reward_sound_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &discard_sound_, GetArenaForAllocation(),
      &other->discard_sound_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &reveal_sound_, GetArenaForAllocation(),
      &other->reveal_sound_, other->GetArenaForAllocation()
  );
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgQuestTheme::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fproto_5fdef_5fmessages_2eproto_getter, &descriptor_table_tf_5fproto_5fdef_5fmessages_2eproto_once,
      file_level_metadata_tf_5fproto_5fdef_5fmessages_2eproto[33]);
}

// ===================================================================

class CMsgQuestMapNodeCondition_NodeState::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgQuestMapNodeCondition_NodeState>()._has_bits_);
  static void set_has_bonus_objectives_required(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgProtoDefID& target_node_defid(const CMsgQuestMapNodeCondition_NodeState* msg);
  static void set_has_target_node_defid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::CMsgProtoDefID&
CMsgQuestMapNodeCondition_NodeState::_Internal::target_node_defid(const CMsgQuestMapNodeCondition_NodeState* msg) {
  return *msg->target_node_defid_;
}
CMsgQuestMapNodeCondition_NodeState::CMsgQuestMapNodeCondition_NodeState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgQuestMapNodeCondition_NodeState)
}
CMsgQuestMapNodeCondition_NodeState::CMsgQuestMapNodeCondition_NodeState(const CMsgQuestMapNodeCondition_NodeState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_target_node_defid()) {
    target_node_defid_ = new ::CMsgProtoDefID(*from.target_node_defid_);
  } else {
    target_node_defid_ = nullptr;
  }
  bonus_objectives_required_ = from.bonus_objectives_required_;
  // @@protoc_insertion_point(copy_constructor:CMsgQuestMapNodeCondition_NodeState)
}

void CMsgQuestMapNodeCondition_NodeState::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&target_node_defid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bonus_objectives_required_) -
    reinterpret_cast<char*>(&target_node_defid_)) + sizeof(bonus_objectives_required_));
}

CMsgQuestMapNodeCondition_NodeState::~CMsgQuestMapNodeCondition_NodeState() {
  // @@protoc_insertion_point(destructor:CMsgQuestMapNodeCondition_NodeState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgQuestMapNodeCondition_NodeState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete target_node_defid_;
}

void CMsgQuestMapNodeCondition_NodeState::ArenaDtor(void* object) {
  CMsgQuestMapNodeCondition_NodeState* _this = reinterpret_cast< CMsgQuestMapNodeCondition_NodeState* >(object);
  (void)_this;
}
void CMsgQuestMapNodeCondition_NodeState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgQuestMapNodeCondition_NodeState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgQuestMapNodeCondition_NodeState::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgQuestMapNodeCondition_NodeState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(target_node_defid_ != nullptr);
    target_node_defid_->Clear();
  }
  bonus_objectives_required_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgQuestMapNodeCondition_NodeState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 bonus_objectives_required = 1 [default = 0, (.display_name) = "Bonus Required", (.comment) = "Number of bonus objectives required, on top of the primary objective"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_bonus_objectives_required(&has_bits);
          bonus_objectives_required_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .CMsgProtoDefID target_node_defid = 2 [(.valid_type) = DEF_TYPE_QUEST_MAP_NODE, (.display_name) = "Target Node", (.comment) = "Which node is required to have the above number of medals"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_target_node_defid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgQuestMapNodeCondition_NodeState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgQuestMapNodeCondition_NodeState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 bonus_objectives_required = 1 [default = 0, (.display_name) = "Bonus Required", (.comment) = "Number of bonus objectives required, on top of the primary objective"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_bonus_objectives_required(), target);
  }

  // required .CMsgProtoDefID target_node_defid = 2 [(.valid_type) = DEF_TYPE_QUEST_MAP_NODE, (.display_name) = "Target Node", (.comment) = "Which node is required to have the above number of medals"];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::target_node_defid(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgQuestMapNodeCondition_NodeState)
  return target;
}

size_t CMsgQuestMapNodeCondition_NodeState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgQuestMapNodeCondition_NodeState)
  size_t total_size = 0;

  // required .CMsgProtoDefID target_node_defid = 2 [(.valid_type) = DEF_TYPE_QUEST_MAP_NODE, (.display_name) = "Target Node", (.comment) = "Which node is required to have the above number of medals"];
  if (_internal_has_target_node_defid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *target_node_defid_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 bonus_objectives_required = 1 [default = 0, (.display_name) = "Bonus Required", (.comment) = "Number of bonus objectives required, on top of the primary objective"];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_bonus_objectives_required());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgQuestMapNodeCondition_NodeState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgQuestMapNodeCondition_NodeState)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgQuestMapNodeCondition_NodeState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgQuestMapNodeCondition_NodeState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgQuestMapNodeCondition_NodeState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgQuestMapNodeCondition_NodeState)
    MergeFrom(*source);
  }
}

void CMsgQuestMapNodeCondition_NodeState::MergeFrom(const CMsgQuestMapNodeCondition_NodeState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgQuestMapNodeCondition_NodeState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_target_node_defid()->::CMsgProtoDefID::MergeFrom(from._internal_target_node_defid());
    }
    if (cached_has_bits & 0x00000002u) {
      bonus_objectives_required_ = from.bonus_objectives_required_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgQuestMapNodeCondition_NodeState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgQuestMapNodeCondition_NodeState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgQuestMapNodeCondition_NodeState::CopyFrom(const CMsgQuestMapNodeCondition_NodeState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgQuestMapNodeCondition_NodeState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgQuestMapNodeCondition_NodeState::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_target_node_defid()) {
    if (!target_node_defid_->IsInitialized()) return false;
  }
  return true;
}

void CMsgQuestMapNodeCondition_NodeState::InternalSwap(CMsgQuestMapNodeCondition_NodeState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgQuestMapNodeCondition_NodeState, bonus_objectives_required_)
      + sizeof(CMsgQuestMapNodeCondition_NodeState::bonus_objectives_required_)
      - PROTOBUF_FIELD_OFFSET(CMsgQuestMapNodeCondition_NodeState, target_node_defid_)>(
          reinterpret_cast<char*>(&target_node_defid_),
          reinterpret_cast<char*>(&other->target_node_defid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgQuestMapNodeCondition_NodeState::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fproto_5fdef_5fmessages_2eproto_getter, &descriptor_table_tf_5fproto_5fdef_5fmessages_2eproto_once,
      file_level_metadata_tf_5fproto_5fdef_5fmessages_2eproto[34]);
}

// ===================================================================

class CMsgQuestMapNodeCondition_Logic::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgQuestMapNodeCondition_Logic>()._has_bits_);
  static void set_has_operation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

CMsgQuestMapNodeCondition_Logic::CMsgQuestMapNodeCondition_Logic(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  sub_conditions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgQuestMapNodeCondition_Logic)
}
CMsgQuestMapNodeCondition_Logic::CMsgQuestMapNodeCondition_Logic(const CMsgQuestMapNodeCondition_Logic& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      sub_conditions_(from.sub_conditions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  operation_ = from.operation_;
  // @@protoc_insertion_point(copy_constructor:CMsgQuestMapNodeCondition_Logic)
}

void CMsgQuestMapNodeCondition_Logic::SharedCtor() {
operation_ = 0;
}

CMsgQuestMapNodeCondition_Logic::~CMsgQuestMapNodeCondition_Logic() {
  // @@protoc_insertion_point(destructor:CMsgQuestMapNodeCondition_Logic)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgQuestMapNodeCondition_Logic::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgQuestMapNodeCondition_Logic::ArenaDtor(void* object) {
  CMsgQuestMapNodeCondition_Logic* _this = reinterpret_cast< CMsgQuestMapNodeCondition_Logic* >(object);
  (void)_this;
}
void CMsgQuestMapNodeCondition_Logic::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgQuestMapNodeCondition_Logic::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgQuestMapNodeCondition_Logic::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgQuestMapNodeCondition_Logic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sub_conditions_.Clear();
  operation_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgQuestMapNodeCondition_Logic::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .LogicalOperation operation = 1 [default = AND, (.display_name) = "Logic", (.comment) = "Logical operation"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::LogicalOperation_IsValid(val))) {
            _internal_set_operation(static_cast<::LogicalOperation>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .CMsgQuestMapNodeCondition sub_conditions = 2 [(.display_name) = "Operands", (.comment) = "Definitions to use in the logical operation"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sub_conditions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgQuestMapNodeCondition_Logic::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgQuestMapNodeCondition_Logic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .LogicalOperation operation = 1 [default = AND, (.display_name) = "Logic", (.comment) = "Logical operation"];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_operation(), target);
  }

  // repeated .CMsgQuestMapNodeCondition sub_conditions = 2 [(.display_name) = "Operands", (.comment) = "Definitions to use in the logical operation"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sub_conditions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_sub_conditions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgQuestMapNodeCondition_Logic)
  return target;
}

size_t CMsgQuestMapNodeCondition_Logic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgQuestMapNodeCondition_Logic)
  size_t total_size = 0;

  // required .LogicalOperation operation = 1 [default = AND, (.display_name) = "Logic", (.comment) = "Logical operation"];
  if (_internal_has_operation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_operation());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgQuestMapNodeCondition sub_conditions = 2 [(.display_name) = "Operands", (.comment) = "Definitions to use in the logical operation"];
  total_size += 1UL * this->_internal_sub_conditions_size();
  for (const auto& msg : this->sub_conditions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgQuestMapNodeCondition_Logic::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgQuestMapNodeCondition_Logic)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgQuestMapNodeCondition_Logic* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgQuestMapNodeCondition_Logic>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgQuestMapNodeCondition_Logic)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgQuestMapNodeCondition_Logic)
    MergeFrom(*source);
  }
}

void CMsgQuestMapNodeCondition_Logic::MergeFrom(const CMsgQuestMapNodeCondition_Logic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgQuestMapNodeCondition_Logic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sub_conditions_.MergeFrom(from.sub_conditions_);
  if (from._internal_has_operation()) {
    _internal_set_operation(from._internal_operation());
  }
}

void CMsgQuestMapNodeCondition_Logic::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgQuestMapNodeCondition_Logic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgQuestMapNodeCondition_Logic::CopyFrom(const CMsgQuestMapNodeCondition_Logic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgQuestMapNodeCondition_Logic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgQuestMapNodeCondition_Logic::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(sub_conditions_)) return false;
  return true;
}

void CMsgQuestMapNodeCondition_Logic::InternalSwap(CMsgQuestMapNodeCondition_Logic* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sub_conditions_.InternalSwap(&other->sub_conditions_);
  swap(operation_, other->operation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgQuestMapNodeCondition_Logic::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fproto_5fdef_5fmessages_2eproto_getter, &descriptor_table_tf_5fproto_5fdef_5fmessages_2eproto_once,
      file_level_metadata_tf_5fproto_5fdef_5fmessages_2eproto[35]);
}

// ===================================================================

class CMsgQuestMapNodeCondition::_Internal {
 public:
  static const ::CMsgQuestMapNodeCondition_NodeState& node_state(const CMsgQuestMapNodeCondition* msg);
  static const ::CMsgQuestMapNodeCondition_Logic& logical(const CMsgQuestMapNodeCondition* msg);
};

const ::CMsgQuestMapNodeCondition_NodeState&
CMsgQuestMapNodeCondition::_Internal::node_state(const CMsgQuestMapNodeCondition* msg) {
  return *msg->operation_.node_state_;
}
const ::CMsgQuestMapNodeCondition_Logic&
CMsgQuestMapNodeCondition::_Internal::logical(const CMsgQuestMapNodeCondition* msg) {
  return *msg->operation_.logical_;
}
void CMsgQuestMapNodeCondition::set_allocated_node_state(::CMsgQuestMapNodeCondition_NodeState* node_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_operation();
  if (node_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgQuestMapNodeCondition_NodeState>::GetOwningArena(node_state);
    if (message_arena != submessage_arena) {
      node_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, node_state, submessage_arena);
    }
    set_has_node_state();
    operation_.node_state_ = node_state;
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgQuestMapNodeCondition.node_state)
}
void CMsgQuestMapNodeCondition::set_allocated_logical(::CMsgQuestMapNodeCondition_Logic* logical) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_operation();
  if (logical) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgQuestMapNodeCondition_Logic>::GetOwningArena(logical);
    if (message_arena != submessage_arena) {
      logical = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, logical, submessage_arena);
    }
    set_has_logical();
    operation_.logical_ = logical;
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgQuestMapNodeCondition.logical)
}
CMsgQuestMapNodeCondition::CMsgQuestMapNodeCondition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgQuestMapNodeCondition)
}
CMsgQuestMapNodeCondition::CMsgQuestMapNodeCondition(const CMsgQuestMapNodeCondition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_operation();
  switch (from.operation_case()) {
    case kNodeState: {
      _internal_mutable_node_state()->::CMsgQuestMapNodeCondition_NodeState::MergeFrom(from._internal_node_state());
      break;
    }
    case kLogical: {
      _internal_mutable_logical()->::CMsgQuestMapNodeCondition_Logic::MergeFrom(from._internal_logical());
      break;
    }
    case OPERATION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:CMsgQuestMapNodeCondition)
}

void CMsgQuestMapNodeCondition::SharedCtor() {
clear_has_operation();
}

CMsgQuestMapNodeCondition::~CMsgQuestMapNodeCondition() {
  // @@protoc_insertion_point(destructor:CMsgQuestMapNodeCondition)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgQuestMapNodeCondition::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_operation()) {
    clear_operation();
  }
}

void CMsgQuestMapNodeCondition::ArenaDtor(void* object) {
  CMsgQuestMapNodeCondition* _this = reinterpret_cast< CMsgQuestMapNodeCondition* >(object);
  (void)_this;
}
void CMsgQuestMapNodeCondition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgQuestMapNodeCondition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgQuestMapNodeCondition::clear_operation() {
// @@protoc_insertion_point(one_of_clear_start:CMsgQuestMapNodeCondition)
  switch (operation_case()) {
    case kNodeState: {
      if (GetArenaForAllocation() == nullptr) {
        delete operation_.node_state_;
      }
      break;
    }
    case kLogical: {
      if (GetArenaForAllocation() == nullptr) {
        delete operation_.logical_;
      }
      break;
    }
    case OPERATION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OPERATION_NOT_SET;
}


void CMsgQuestMapNodeCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgQuestMapNodeCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_operation();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgQuestMapNodeCondition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .CMsgQuestMapNodeCondition_NodeState node_state = 1 [(.display_name) = "Node State Condition", (.comment) = "Returns true if a specific node has a required number of medals"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_node_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CMsgQuestMapNodeCondition_Logic logical = 2 [(.display_name) = "Logical Condition", (.comment) = "Performs a specified logical operation to all sub conditions"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_logical(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgQuestMapNodeCondition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgQuestMapNodeCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (operation_case()) {
    case kNodeState: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          1, _Internal::node_state(this), target, stream);
      break;
    }
    case kLogical: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          2, _Internal::logical(this), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgQuestMapNodeCondition)
  return target;
}

size_t CMsgQuestMapNodeCondition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgQuestMapNodeCondition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (operation_case()) {
    // .CMsgQuestMapNodeCondition_NodeState node_state = 1 [(.display_name) = "Node State Condition", (.comment) = "Returns true if a specific node has a required number of medals"];
    case kNodeState: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *operation_.node_state_);
      break;
    }
    // .CMsgQuestMapNodeCondition_Logic logical = 2 [(.display_name) = "Logical Condition", (.comment) = "Performs a specified logical operation to all sub conditions"];
    case kLogical: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *operation_.logical_);
      break;
    }
    case OPERATION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgQuestMapNodeCondition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgQuestMapNodeCondition)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgQuestMapNodeCondition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgQuestMapNodeCondition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgQuestMapNodeCondition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgQuestMapNodeCondition)
    MergeFrom(*source);
  }
}

void CMsgQuestMapNodeCondition::MergeFrom(const CMsgQuestMapNodeCondition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgQuestMapNodeCondition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.operation_case()) {
    case kNodeState: {
      _internal_mutable_node_state()->::CMsgQuestMapNodeCondition_NodeState::MergeFrom(from._internal_node_state());
      break;
    }
    case kLogical: {
      _internal_mutable_logical()->::CMsgQuestMapNodeCondition_Logic::MergeFrom(from._internal_logical());
      break;
    }
    case OPERATION_NOT_SET: {
      break;
    }
  }
}

void CMsgQuestMapNodeCondition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgQuestMapNodeCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgQuestMapNodeCondition::CopyFrom(const CMsgQuestMapNodeCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgQuestMapNodeCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgQuestMapNodeCondition::IsInitialized() const {
  switch (operation_case()) {
    case kNodeState: {
      if (has_node_state()) {
        if (!this->node_state().IsInitialized()) return false;
      }
      break;
    }
    case kLogical: {
      if (has_logical()) {
        if (!this->logical().IsInitialized()) return false;
      }
      break;
    }
    case OPERATION_NOT_SET: {
      break;
    }
  }
  return true;
}

void CMsgQuestMapNodeCondition::InternalSwap(CMsgQuestMapNodeCondition* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(operation_, other->operation_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgQuestMapNodeCondition::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fproto_5fdef_5fmessages_2eproto_getter, &descriptor_table_tf_5fproto_5fdef_5fmessages_2eproto_once,
      file_level_metadata_tf_5fproto_5fdef_5fmessages_2eproto[36]);
}

// ===================================================================

class CMsgHeaderOnly::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgHeaderOnly>()._has_bits_);
  static const ::CMsgProtoDefHeader& header(const CMsgHeaderOnly* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::CMsgProtoDefHeader&
CMsgHeaderOnly::_Internal::header(const CMsgHeaderOnly* msg) {
  return *msg->header_;
}
CMsgHeaderOnly::CMsgHeaderOnly(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgHeaderOnly)
}
CMsgHeaderOnly::CMsgHeaderOnly(const CMsgHeaderOnly& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::CMsgProtoDefHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CMsgHeaderOnly)
}

void CMsgHeaderOnly::SharedCtor() {
header_ = nullptr;
}

CMsgHeaderOnly::~CMsgHeaderOnly() {
  // @@protoc_insertion_point(destructor:CMsgHeaderOnly)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgHeaderOnly::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void CMsgHeaderOnly::ArenaDtor(void* object) {
  CMsgHeaderOnly* _this = reinterpret_cast< CMsgHeaderOnly* >(object);
  (void)_this;
}
void CMsgHeaderOnly::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgHeaderOnly::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgHeaderOnly::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgHeaderOnly)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != nullptr);
    header_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgHeaderOnly::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .CMsgProtoDefHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgHeaderOnly::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgHeaderOnly)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .CMsgProtoDefHeader header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgHeaderOnly)
  return target;
}

size_t CMsgHeaderOnly::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgHeaderOnly)
  size_t total_size = 0;

  // required .CMsgProtoDefHeader header = 1;
  if (_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgHeaderOnly::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgHeaderOnly)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgHeaderOnly* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgHeaderOnly>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgHeaderOnly)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgHeaderOnly)
    MergeFrom(*source);
  }
}

void CMsgHeaderOnly::MergeFrom(const CMsgHeaderOnly& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgHeaderOnly)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _internal_mutable_header()->::CMsgProtoDefHeader::MergeFrom(from._internal_header());
  }
}

void CMsgHeaderOnly::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgHeaderOnly)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgHeaderOnly::CopyFrom(const CMsgHeaderOnly& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgHeaderOnly)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgHeaderOnly::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_header()) {
    if (!header_->IsInitialized()) return false;
  }
  return true;
}

void CMsgHeaderOnly::InternalSwap(CMsgHeaderOnly* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgHeaderOnly::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fproto_5fdef_5fmessages_2eproto_getter, &descriptor_table_tf_5fproto_5fdef_5fmessages_2eproto_once,
      file_level_metadata_tf_5fproto_5fdef_5fmessages_2eproto[37]);
}
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::MessageOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  start_expanded(kStartExpandedFieldNumber, true);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::EnumTypeTraits< ::ProtoDefTypes, ::ProtoDefTypes_IsValid>, 14, false >
  valid_type(kValidTypeFieldNumber, static_cast< ::ProtoDefTypes >(0));
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  editable(kEditableFieldNumber, true);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  localized(kLocalizedFieldNumber, false);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  do_not_inherit(kDoNotInheritFieldNumber, false);
const std::string display_name_default("");
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false >
  display_name(kDisplayNameFieldNumber, display_name_default);
const std::string comment_default("");
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false >
  comment(kCommentFieldNumber, comment_default);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::uint32 >, 13, false >
  max_count(kMaxCountFieldNumber, 0u);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  allow_add(kAllowAddFieldNumber, true);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  allow_delete(kAllowDeleteFieldNumber, true);
const std::string panel_class_override_default("");
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false >
  panel_class_override(kPanelClassOverrideFieldNumber, panel_class_override_default);
const std::string message_inherhitance_key_field_name_default("");
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false >
  message_inherhitance_key_field_name(kMessageInherhitanceKeyFieldNameFieldNumber, message_inherhitance_key_field_name_default);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  inherit_reference_variables(kInheritReferenceVariablesFieldNumber, false);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  self_inherit_only(kSelfInheritOnlyFieldNumber, false);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::EnumTypeTraits< ::EVarFieldType, ::EVarFieldType_IsValid>, 14, false >
  var_field_type(kVarFieldTypeFieldNumber, static_cast< ::EVarFieldType >(1));
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  merging_key_field(kMergingKeyFieldFieldNumber, false);

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CMsgFieldID_CMsgField* Arena::CreateMaybeMessage< ::CMsgFieldID_CMsgField >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgFieldID_CMsgField >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgFieldID* Arena::CreateMaybeMessage< ::CMsgFieldID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgFieldID >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgUniversalFieldID* Arena::CreateMaybeMessage< ::CMsgUniversalFieldID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgUniversalFieldID >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgVariableDefinition* Arena::CreateMaybeMessage< ::CMsgVariableDefinition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgVariableDefinition >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgProtoDefHeader* Arena::CreateMaybeMessage< ::CMsgProtoDefHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgProtoDefHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgValidTypes* Arena::CreateMaybeMessage< ::CMsgValidTypes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgValidTypes >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgProtoDefID* Arena::CreateMaybeMessage< ::CMsgProtoDefID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgProtoDefID >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgQuestObjectiveDef* Arena::CreateMaybeMessage< ::CMsgQuestObjectiveDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgQuestObjectiveDef >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgQuestDef_MMCriteria* Arena::CreateMaybeMessage< ::CMsgQuestDef_MMCriteria >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgQuestDef_MMCriteria >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgQuestDef_ObjectiveInstance* Arena::CreateMaybeMessage< ::CMsgQuestDef_ObjectiveInstance >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgQuestDef_ObjectiveInstance >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgQuestDef* Arena::CreateMaybeMessage< ::CMsgQuestDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgQuestDef >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgQuestMapStoreItem* Arena::CreateMaybeMessage< ::CMsgQuestMapStoreItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgQuestMapStoreItem >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgQuestMapRegionDef_RegionLink* Arena::CreateMaybeMessage< ::CMsgQuestMapRegionDef_RegionLink >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgQuestMapRegionDef_RegionLink >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgQuestMapRegionDef* Arena::CreateMaybeMessage< ::CMsgQuestMapRegionDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgQuestMapRegionDef >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgVarField* Arena::CreateMaybeMessage< ::CMsgVarField >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgVarField >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgQuestMapStarType* Arena::CreateMaybeMessage< ::CMsgQuestMapStarType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgQuestMapStarType >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgQuestMapNodeDef* Arena::CreateMaybeMessage< ::CMsgQuestMapNodeDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgQuestMapNodeDef >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPaintKit_Variables* Arena::CreateMaybeMessage< ::CMsgPaintKit_Variables >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPaintKit_Variables >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPaintKit_Operation_TextureStage* Arena::CreateMaybeMessage< ::CMsgPaintKit_Operation_TextureStage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPaintKit_Operation_TextureStage >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPaintKit_Operation_CombineStage* Arena::CreateMaybeMessage< ::CMsgPaintKit_Operation_CombineStage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPaintKit_Operation_CombineStage >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPaintKit_Operation_SelectStage* Arena::CreateMaybeMessage< ::CMsgPaintKit_Operation_SelectStage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPaintKit_Operation_SelectStage >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPaintKit_Operation_Sticker* Arena::CreateMaybeMessage< ::CMsgPaintKit_Operation_Sticker >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPaintKit_Operation_Sticker >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPaintKit_Operation_StickerStage* Arena::CreateMaybeMessage< ::CMsgPaintKit_Operation_StickerStage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPaintKit_Operation_StickerStage >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPaintKit_OperationStage* Arena::CreateMaybeMessage< ::CMsgPaintKit_OperationStage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPaintKit_OperationStage >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPaintKit_OperationNode* Arena::CreateMaybeMessage< ::CMsgPaintKit_OperationNode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPaintKit_OperationNode >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPaintKit_Operation* Arena::CreateMaybeMessage< ::CMsgPaintKit_Operation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPaintKit_Operation >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPaintKit_ItemDefinition_Definition* Arena::CreateMaybeMessage< ::CMsgPaintKit_ItemDefinition_Definition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPaintKit_ItemDefinition_Definition >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPaintKit_ItemDefinition* Arena::CreateMaybeMessage< ::CMsgPaintKit_ItemDefinition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPaintKit_ItemDefinition >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPaintKit_Definition_Item_ItemData* Arena::CreateMaybeMessage< ::CMsgPaintKit_Definition_Item_ItemData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPaintKit_Definition_Item_ItemData >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPaintKit_Definition_Item* Arena::CreateMaybeMessage< ::CMsgPaintKit_Definition_Item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPaintKit_Definition_Item >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPaintKit_Definition* Arena::CreateMaybeMessage< ::CMsgPaintKit_Definition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPaintKit_Definition >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgQuestTheme_WeightedString* Arena::CreateMaybeMessage< ::CMsgQuestTheme_WeightedString >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgQuestTheme_WeightedString >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgQuestTheme_WeightedStringSet* Arena::CreateMaybeMessage< ::CMsgQuestTheme_WeightedStringSet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgQuestTheme_WeightedStringSet >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgQuestTheme* Arena::CreateMaybeMessage< ::CMsgQuestTheme >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgQuestTheme >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgQuestMapNodeCondition_NodeState* Arena::CreateMaybeMessage< ::CMsgQuestMapNodeCondition_NodeState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgQuestMapNodeCondition_NodeState >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgQuestMapNodeCondition_Logic* Arena::CreateMaybeMessage< ::CMsgQuestMapNodeCondition_Logic >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgQuestMapNodeCondition_Logic >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgQuestMapNodeCondition* Arena::CreateMaybeMessage< ::CMsgQuestMapNodeCondition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgQuestMapNodeCondition >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgHeaderOnly* Arena::CreateMaybeMessage< ::CMsgHeaderOnly >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgHeaderOnly >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
#pragma warning(pop)