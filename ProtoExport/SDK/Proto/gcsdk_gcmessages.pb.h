// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gcsdk_gcmessages.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_gcsdk_5fgcmessages_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_gcsdk_5fgcmessages_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "steammessages.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_gcsdk_5fgcmessages_2eproto M0PROTO
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct M0PROTO TableStruct_gcsdk_5fgcmessages_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[29]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern M0PROTO const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gcsdk_5fgcmessages_2eproto;
class CGCToGCMsgMasterAck;
struct CGCToGCMsgMasterAckDefaultTypeInternal;
M0PROTO extern CGCToGCMsgMasterAckDefaultTypeInternal _CGCToGCMsgMasterAck_default_instance_;
class CGCToGCMsgMasterAck_Response;
struct CGCToGCMsgMasterAck_ResponseDefaultTypeInternal;
M0PROTO extern CGCToGCMsgMasterAck_ResponseDefaultTypeInternal _CGCToGCMsgMasterAck_Response_default_instance_;
class CGCToGCMsgMasterStartupComplete;
struct CGCToGCMsgMasterStartupCompleteDefaultTypeInternal;
M0PROTO extern CGCToGCMsgMasterStartupCompleteDefaultTypeInternal _CGCToGCMsgMasterStartupComplete_default_instance_;
class CGCToGCMsgMasterStartupComplete_GCInfo;
struct CGCToGCMsgMasterStartupComplete_GCInfoDefaultTypeInternal;
M0PROTO extern CGCToGCMsgMasterStartupComplete_GCInfoDefaultTypeInternal _CGCToGCMsgMasterStartupComplete_GCInfo_default_instance_;
class CGCToGCMsgRouted;
struct CGCToGCMsgRoutedDefaultTypeInternal;
M0PROTO extern CGCToGCMsgRoutedDefaultTypeInternal _CGCToGCMsgRouted_default_instance_;
class CGCToGCMsgRoutedReply;
struct CGCToGCMsgRoutedReplyDefaultTypeInternal;
M0PROTO extern CGCToGCMsgRoutedReplyDefaultTypeInternal _CGCToGCMsgRoutedReply_default_instance_;
class CMsgConnectionStatus;
struct CMsgConnectionStatusDefaultTypeInternal;
M0PROTO extern CMsgConnectionStatusDefaultTypeInternal _CMsgConnectionStatus_default_instance_;
class CMsgGCClientPing;
struct CMsgGCClientPingDefaultTypeInternal;
M0PROTO extern CMsgGCClientPingDefaultTypeInternal _CMsgGCClientPing_default_instance_;
class CMsgGCMultiplexMessage;
struct CMsgGCMultiplexMessageDefaultTypeInternal;
M0PROTO extern CMsgGCMultiplexMessageDefaultTypeInternal _CMsgGCMultiplexMessage_default_instance_;
class CMsgGCRequestSubGCSessionInfo;
struct CMsgGCRequestSubGCSessionInfoDefaultTypeInternal;
M0PROTO extern CMsgGCRequestSubGCSessionInfoDefaultTypeInternal _CMsgGCRequestSubGCSessionInfo_default_instance_;
class CMsgGCRequestSubGCSessionInfoResponse;
struct CMsgGCRequestSubGCSessionInfoResponseDefaultTypeInternal;
M0PROTO extern CMsgGCRequestSubGCSessionInfoResponseDefaultTypeInternal _CMsgGCRequestSubGCSessionInfoResponse_default_instance_;
class CMsgGCToGCIncrementRecruitmentLevel;
struct CMsgGCToGCIncrementRecruitmentLevelDefaultTypeInternal;
M0PROTO extern CMsgGCToGCIncrementRecruitmentLevelDefaultTypeInternal _CMsgGCToGCIncrementRecruitmentLevel_default_instance_;
class CMsgGCToGCSOCacheSubscribe;
struct CMsgGCToGCSOCacheSubscribeDefaultTypeInternal;
M0PROTO extern CMsgGCToGCSOCacheSubscribeDefaultTypeInternal _CMsgGCToGCSOCacheSubscribe_default_instance_;
class CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions;
struct CMsgGCToGCSOCacheSubscribe_CMsgHaveVersionsDefaultTypeInternal;
M0PROTO extern CMsgGCToGCSOCacheSubscribe_CMsgHaveVersionsDefaultTypeInternal _CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions_default_instance_;
class CMsgGCToGCSOCacheUnsubscribe;
struct CMsgGCToGCSOCacheUnsubscribeDefaultTypeInternal;
M0PROTO extern CMsgGCToGCSOCacheUnsubscribeDefaultTypeInternal _CMsgGCToGCSOCacheUnsubscribe_default_instance_;
class CMsgGCUpdateSubGCSessionInfo;
struct CMsgGCUpdateSubGCSessionInfoDefaultTypeInternal;
M0PROTO extern CMsgGCUpdateSubGCSessionInfoDefaultTypeInternal _CMsgGCUpdateSubGCSessionInfo_default_instance_;
class CMsgGCUpdateSubGCSessionInfo_CMsgUpdate;
struct CMsgGCUpdateSubGCSessionInfo_CMsgUpdateDefaultTypeInternal;
M0PROTO extern CMsgGCUpdateSubGCSessionInfo_CMsgUpdateDefaultTypeInternal _CMsgGCUpdateSubGCSessionInfo_CMsgUpdate_default_instance_;
class CMsgSOCacheHaveVersion;
struct CMsgSOCacheHaveVersionDefaultTypeInternal;
M0PROTO extern CMsgSOCacheHaveVersionDefaultTypeInternal _CMsgSOCacheHaveVersion_default_instance_;
class CMsgSOCacheSubscribed;
struct CMsgSOCacheSubscribedDefaultTypeInternal;
M0PROTO extern CMsgSOCacheSubscribedDefaultTypeInternal _CMsgSOCacheSubscribed_default_instance_;
class CMsgSOCacheSubscribedUpToDate;
struct CMsgSOCacheSubscribedUpToDateDefaultTypeInternal;
M0PROTO extern CMsgSOCacheSubscribedUpToDateDefaultTypeInternal _CMsgSOCacheSubscribedUpToDate_default_instance_;
class CMsgSOCacheSubscribed_SubscribedType;
struct CMsgSOCacheSubscribed_SubscribedTypeDefaultTypeInternal;
M0PROTO extern CMsgSOCacheSubscribed_SubscribedTypeDefaultTypeInternal _CMsgSOCacheSubscribed_SubscribedType_default_instance_;
class CMsgSOCacheSubscriptionCheck;
struct CMsgSOCacheSubscriptionCheckDefaultTypeInternal;
M0PROTO extern CMsgSOCacheSubscriptionCheckDefaultTypeInternal _CMsgSOCacheSubscriptionCheck_default_instance_;
class CMsgSOCacheSubscriptionRefresh;
struct CMsgSOCacheSubscriptionRefreshDefaultTypeInternal;
M0PROTO extern CMsgSOCacheSubscriptionRefreshDefaultTypeInternal _CMsgSOCacheSubscriptionRefresh_default_instance_;
class CMsgSOCacheUnsubscribed;
struct CMsgSOCacheUnsubscribedDefaultTypeInternal;
M0PROTO extern CMsgSOCacheUnsubscribedDefaultTypeInternal _CMsgSOCacheUnsubscribed_default_instance_;
class CMsgSOCacheVersion;
struct CMsgSOCacheVersionDefaultTypeInternal;
M0PROTO extern CMsgSOCacheVersionDefaultTypeInternal _CMsgSOCacheVersion_default_instance_;
class CMsgSOIDOwner;
struct CMsgSOIDOwnerDefaultTypeInternal;
M0PROTO extern CMsgSOIDOwnerDefaultTypeInternal _CMsgSOIDOwner_default_instance_;
class CMsgSOMultipleObjects;
struct CMsgSOMultipleObjectsDefaultTypeInternal;
M0PROTO extern CMsgSOMultipleObjectsDefaultTypeInternal _CMsgSOMultipleObjects_default_instance_;
class CMsgSOMultipleObjects_SingleObject;
struct CMsgSOMultipleObjects_SingleObjectDefaultTypeInternal;
M0PROTO extern CMsgSOMultipleObjects_SingleObjectDefaultTypeInternal _CMsgSOMultipleObjects_SingleObject_default_instance_;
class CMsgSOSingleObject;
struct CMsgSOSingleObjectDefaultTypeInternal;
M0PROTO extern CMsgSOSingleObjectDefaultTypeInternal _CMsgSOSingleObject_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> M0PROTO ::CGCToGCMsgMasterAck* Arena::CreateMaybeMessage<::CGCToGCMsgMasterAck>(Arena*);
template<> M0PROTO ::CGCToGCMsgMasterAck_Response* Arena::CreateMaybeMessage<::CGCToGCMsgMasterAck_Response>(Arena*);
template<> M0PROTO ::CGCToGCMsgMasterStartupComplete* Arena::CreateMaybeMessage<::CGCToGCMsgMasterStartupComplete>(Arena*);
template<> M0PROTO ::CGCToGCMsgMasterStartupComplete_GCInfo* Arena::CreateMaybeMessage<::CGCToGCMsgMasterStartupComplete_GCInfo>(Arena*);
template<> M0PROTO ::CGCToGCMsgRouted* Arena::CreateMaybeMessage<::CGCToGCMsgRouted>(Arena*);
template<> M0PROTO ::CGCToGCMsgRoutedReply* Arena::CreateMaybeMessage<::CGCToGCMsgRoutedReply>(Arena*);
template<> M0PROTO ::CMsgConnectionStatus* Arena::CreateMaybeMessage<::CMsgConnectionStatus>(Arena*);
template<> M0PROTO ::CMsgGCClientPing* Arena::CreateMaybeMessage<::CMsgGCClientPing>(Arena*);
template<> M0PROTO ::CMsgGCMultiplexMessage* Arena::CreateMaybeMessage<::CMsgGCMultiplexMessage>(Arena*);
template<> M0PROTO ::CMsgGCRequestSubGCSessionInfo* Arena::CreateMaybeMessage<::CMsgGCRequestSubGCSessionInfo>(Arena*);
template<> M0PROTO ::CMsgGCRequestSubGCSessionInfoResponse* Arena::CreateMaybeMessage<::CMsgGCRequestSubGCSessionInfoResponse>(Arena*);
template<> M0PROTO ::CMsgGCToGCIncrementRecruitmentLevel* Arena::CreateMaybeMessage<::CMsgGCToGCIncrementRecruitmentLevel>(Arena*);
template<> M0PROTO ::CMsgGCToGCSOCacheSubscribe* Arena::CreateMaybeMessage<::CMsgGCToGCSOCacheSubscribe>(Arena*);
template<> M0PROTO ::CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions* Arena::CreateMaybeMessage<::CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions>(Arena*);
template<> M0PROTO ::CMsgGCToGCSOCacheUnsubscribe* Arena::CreateMaybeMessage<::CMsgGCToGCSOCacheUnsubscribe>(Arena*);
template<> M0PROTO ::CMsgGCUpdateSubGCSessionInfo* Arena::CreateMaybeMessage<::CMsgGCUpdateSubGCSessionInfo>(Arena*);
template<> M0PROTO ::CMsgGCUpdateSubGCSessionInfo_CMsgUpdate* Arena::CreateMaybeMessage<::CMsgGCUpdateSubGCSessionInfo_CMsgUpdate>(Arena*);
template<> M0PROTO ::CMsgSOCacheHaveVersion* Arena::CreateMaybeMessage<::CMsgSOCacheHaveVersion>(Arena*);
template<> M0PROTO ::CMsgSOCacheSubscribed* Arena::CreateMaybeMessage<::CMsgSOCacheSubscribed>(Arena*);
template<> M0PROTO ::CMsgSOCacheSubscribedUpToDate* Arena::CreateMaybeMessage<::CMsgSOCacheSubscribedUpToDate>(Arena*);
template<> M0PROTO ::CMsgSOCacheSubscribed_SubscribedType* Arena::CreateMaybeMessage<::CMsgSOCacheSubscribed_SubscribedType>(Arena*);
template<> M0PROTO ::CMsgSOCacheSubscriptionCheck* Arena::CreateMaybeMessage<::CMsgSOCacheSubscriptionCheck>(Arena*);
template<> M0PROTO ::CMsgSOCacheSubscriptionRefresh* Arena::CreateMaybeMessage<::CMsgSOCacheSubscriptionRefresh>(Arena*);
template<> M0PROTO ::CMsgSOCacheUnsubscribed* Arena::CreateMaybeMessage<::CMsgSOCacheUnsubscribed>(Arena*);
template<> M0PROTO ::CMsgSOCacheVersion* Arena::CreateMaybeMessage<::CMsgSOCacheVersion>(Arena*);
template<> M0PROTO ::CMsgSOIDOwner* Arena::CreateMaybeMessage<::CMsgSOIDOwner>(Arena*);
template<> M0PROTO ::CMsgSOMultipleObjects* Arena::CreateMaybeMessage<::CMsgSOMultipleObjects>(Arena*);
template<> M0PROTO ::CMsgSOMultipleObjects_SingleObject* Arena::CreateMaybeMessage<::CMsgSOMultipleObjects_SingleObject>(Arena*);
template<> M0PROTO ::CMsgSOSingleObject* Arena::CreateMaybeMessage<::CMsgSOSingleObject>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum PartnerAccountType : int {
  PARTNER_NONE = 0,
  PARTNER_PERFECT_WORLD = 1,
  PARTNER_NEXON = 2
};
M0PROTO bool PartnerAccountType_IsValid(int value);
constexpr PartnerAccountType PartnerAccountType_MIN = PARTNER_NONE;
constexpr PartnerAccountType PartnerAccountType_MAX = PARTNER_NEXON;
constexpr int PartnerAccountType_ARRAYSIZE = PartnerAccountType_MAX + 1;

M0PROTO const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PartnerAccountType_descriptor();
template<typename T>
inline const std::string& PartnerAccountType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PartnerAccountType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PartnerAccountType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PartnerAccountType_descriptor(), enum_t_value);
}
inline bool PartnerAccountType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PartnerAccountType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PartnerAccountType>(
    PartnerAccountType_descriptor(), name, value);
}
enum GCConnectionStatus : int {
  GCConnectionStatus_HAVE_SESSION = 0,
  GCConnectionStatus_GC_GOING_DOWN = 1,
  GCConnectionStatus_NO_SESSION = 2,
  GCConnectionStatus_NO_SESSION_IN_LOGON_QUEUE = 3,
  GCConnectionStatus_NO_STEAM = 4,
  GCConnectionStatus_SUSPENDED = 5
};
M0PROTO bool GCConnectionStatus_IsValid(int value);
constexpr GCConnectionStatus GCConnectionStatus_MIN = GCConnectionStatus_HAVE_SESSION;
constexpr GCConnectionStatus GCConnectionStatus_MAX = GCConnectionStatus_SUSPENDED;
constexpr int GCConnectionStatus_ARRAYSIZE = GCConnectionStatus_MAX + 1;

M0PROTO const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GCConnectionStatus_descriptor();
template<typename T>
inline const std::string& GCConnectionStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GCConnectionStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GCConnectionStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GCConnectionStatus_descriptor(), enum_t_value);
}
inline bool GCConnectionStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GCConnectionStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GCConnectionStatus>(
    GCConnectionStatus_descriptor(), name, value);
}
// ===================================================================

class M0PROTO CMsgSOIDOwner final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSOIDOwner) */ {
 public:
  inline CMsgSOIDOwner() : CMsgSOIDOwner(nullptr) {}
  ~CMsgSOIDOwner() override;
  explicit constexpr CMsgSOIDOwner(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSOIDOwner(const CMsgSOIDOwner& from);
  CMsgSOIDOwner(CMsgSOIDOwner&& from) noexcept
    : CMsgSOIDOwner() {
    *this = ::std::move(from);
  }

  inline CMsgSOIDOwner& operator=(const CMsgSOIDOwner& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSOIDOwner& operator=(CMsgSOIDOwner&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSOIDOwner& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSOIDOwner* internal_default_instance() {
    return reinterpret_cast<const CMsgSOIDOwner*>(
               &_CMsgSOIDOwner_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CMsgSOIDOwner& a, CMsgSOIDOwner& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSOIDOwner* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSOIDOwner* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgSOIDOwner* New() const final {
    return new CMsgSOIDOwner();
  }

  CMsgSOIDOwner* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgSOIDOwner>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgSOIDOwner& from);
  void MergeFrom(const CMsgSOIDOwner& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSOIDOwner* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSOIDOwner";
  }
  protected:
  explicit CMsgSOIDOwner(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // optional uint64 id = 2;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSOIDOwner)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  friend struct ::TableStruct_gcsdk_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class M0PROTO CMsgSOSingleObject final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSOSingleObject) */ {
 public:
  inline CMsgSOSingleObject() : CMsgSOSingleObject(nullptr) {}
  ~CMsgSOSingleObject() override;
  explicit constexpr CMsgSOSingleObject(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSOSingleObject(const CMsgSOSingleObject& from);
  CMsgSOSingleObject(CMsgSOSingleObject&& from) noexcept
    : CMsgSOSingleObject() {
    *this = ::std::move(from);
  }

  inline CMsgSOSingleObject& operator=(const CMsgSOSingleObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSOSingleObject& operator=(CMsgSOSingleObject&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSOSingleObject& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSOSingleObject* internal_default_instance() {
    return reinterpret_cast<const CMsgSOSingleObject*>(
               &_CMsgSOSingleObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CMsgSOSingleObject& a, CMsgSOSingleObject& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSOSingleObject* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSOSingleObject* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgSOSingleObject* New() const final {
    return new CMsgSOSingleObject();
  }

  CMsgSOSingleObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgSOSingleObject>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgSOSingleObject& from);
  void MergeFrom(const CMsgSOSingleObject& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSOSingleObject* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSOSingleObject";
  }
  protected:
  explicit CMsgSOSingleObject(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectDataFieldNumber = 3,
    kOwnerSoidFieldNumber = 5,
    kOwnerFieldNumber = 1,
    kVersionFieldNumber = 4,
    kTypeIdFieldNumber = 2,
    kServiceIdFieldNumber = 6,
  };
  // optional bytes object_data = 3;
  bool has_object_data() const;
  private:
  bool _internal_has_object_data() const;
  public:
  void clear_object_data();
  const std::string& object_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_object_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_object_data();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_object_data();
  void set_allocated_object_data(std::string* object_data);
  private:
  const std::string& _internal_object_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_object_data(const std::string& value);
  std::string* _internal_mutable_object_data();
  public:

  // optional .CMsgSOIDOwner owner_soid = 5;
  bool has_owner_soid() const;
  private:
  bool _internal_has_owner_soid() const;
  public:
  void clear_owner_soid();
  const ::CMsgSOIDOwner& owner_soid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgSOIDOwner* release_owner_soid();
  ::CMsgSOIDOwner* mutable_owner_soid();
  void set_allocated_owner_soid(::CMsgSOIDOwner* owner_soid);
  private:
  const ::CMsgSOIDOwner& _internal_owner_soid() const;
  ::CMsgSOIDOwner* _internal_mutable_owner_soid();
  public:
  void unsafe_arena_set_allocated_owner_soid(
      ::CMsgSOIDOwner* owner_soid);
  ::CMsgSOIDOwner* unsafe_arena_release_owner_soid();

  // optional fixed64 owner = 1;
  bool has_owner() const;
  private:
  bool _internal_has_owner() const;
  public:
  void clear_owner();
  ::PROTOBUF_NAMESPACE_ID::uint64 owner() const;
  void set_owner(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_owner() const;
  void _internal_set_owner(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional fixed64 version = 4;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint64 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional int32 type_id = 2;
  bool has_type_id() const;
  private:
  bool _internal_has_type_id() const;
  public:
  void clear_type_id();
  ::PROTOBUF_NAMESPACE_ID::int32 type_id() const;
  void set_type_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type_id() const;
  void _internal_set_type_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint32 service_id = 6;
  bool has_service_id() const;
  private:
  bool _internal_has_service_id() const;
  public:
  void clear_service_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 service_id() const;
  void set_service_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_service_id() const;
  void _internal_set_service_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSOSingleObject)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr object_data_;
  ::CMsgSOIDOwner* owner_soid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 owner_;
  ::PROTOBUF_NAMESPACE_ID::uint64 version_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 service_id_;
  friend struct ::TableStruct_gcsdk_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class M0PROTO CMsgSOMultipleObjects_SingleObject final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSOMultipleObjects.SingleObject) */ {
 public:
  inline CMsgSOMultipleObjects_SingleObject() : CMsgSOMultipleObjects_SingleObject(nullptr) {}
  ~CMsgSOMultipleObjects_SingleObject() override;
  explicit constexpr CMsgSOMultipleObjects_SingleObject(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSOMultipleObjects_SingleObject(const CMsgSOMultipleObjects_SingleObject& from);
  CMsgSOMultipleObjects_SingleObject(CMsgSOMultipleObjects_SingleObject&& from) noexcept
    : CMsgSOMultipleObjects_SingleObject() {
    *this = ::std::move(from);
  }

  inline CMsgSOMultipleObjects_SingleObject& operator=(const CMsgSOMultipleObjects_SingleObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSOMultipleObjects_SingleObject& operator=(CMsgSOMultipleObjects_SingleObject&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSOMultipleObjects_SingleObject& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSOMultipleObjects_SingleObject* internal_default_instance() {
    return reinterpret_cast<const CMsgSOMultipleObjects_SingleObject*>(
               &_CMsgSOMultipleObjects_SingleObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CMsgSOMultipleObjects_SingleObject& a, CMsgSOMultipleObjects_SingleObject& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSOMultipleObjects_SingleObject* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSOMultipleObjects_SingleObject* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgSOMultipleObjects_SingleObject* New() const final {
    return new CMsgSOMultipleObjects_SingleObject();
  }

  CMsgSOMultipleObjects_SingleObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgSOMultipleObjects_SingleObject>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgSOMultipleObjects_SingleObject& from);
  void MergeFrom(const CMsgSOMultipleObjects_SingleObject& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSOMultipleObjects_SingleObject* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSOMultipleObjects.SingleObject";
  }
  protected:
  explicit CMsgSOMultipleObjects_SingleObject(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectDataFieldNumber = 2,
    kTypeIdFieldNumber = 1,
  };
  // optional bytes object_data = 2;
  bool has_object_data() const;
  private:
  bool _internal_has_object_data() const;
  public:
  void clear_object_data();
  const std::string& object_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_object_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_object_data();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_object_data();
  void set_allocated_object_data(std::string* object_data);
  private:
  const std::string& _internal_object_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_object_data(const std::string& value);
  std::string* _internal_mutable_object_data();
  public:

  // optional int32 type_id = 1;
  bool has_type_id() const;
  private:
  bool _internal_has_type_id() const;
  public:
  void clear_type_id();
  ::PROTOBUF_NAMESPACE_ID::int32 type_id() const;
  void set_type_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type_id() const;
  void _internal_set_type_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSOMultipleObjects.SingleObject)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr object_data_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_id_;
  friend struct ::TableStruct_gcsdk_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class M0PROTO CMsgSOMultipleObjects final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSOMultipleObjects) */ {
 public:
  inline CMsgSOMultipleObjects() : CMsgSOMultipleObjects(nullptr) {}
  ~CMsgSOMultipleObjects() override;
  explicit constexpr CMsgSOMultipleObjects(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSOMultipleObjects(const CMsgSOMultipleObjects& from);
  CMsgSOMultipleObjects(CMsgSOMultipleObjects&& from) noexcept
    : CMsgSOMultipleObjects() {
    *this = ::std::move(from);
  }

  inline CMsgSOMultipleObjects& operator=(const CMsgSOMultipleObjects& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSOMultipleObjects& operator=(CMsgSOMultipleObjects&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSOMultipleObjects& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSOMultipleObjects* internal_default_instance() {
    return reinterpret_cast<const CMsgSOMultipleObjects*>(
               &_CMsgSOMultipleObjects_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CMsgSOMultipleObjects& a, CMsgSOMultipleObjects& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSOMultipleObjects* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSOMultipleObjects* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgSOMultipleObjects* New() const final {
    return new CMsgSOMultipleObjects();
  }

  CMsgSOMultipleObjects* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgSOMultipleObjects>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgSOMultipleObjects& from);
  void MergeFrom(const CMsgSOMultipleObjects& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSOMultipleObjects* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSOMultipleObjects";
  }
  protected:
  explicit CMsgSOMultipleObjects(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgSOMultipleObjects_SingleObject SingleObject;

  // accessors -------------------------------------------------------

  enum : int {
    kObjectsFieldNumber = 2,
    kOwnerSoidFieldNumber = 6,
    kOwnerFieldNumber = 1,
    kVersionFieldNumber = 3,
    kServiceIdFieldNumber = 7,
  };
  // repeated .CMsgSOMultipleObjects.SingleObject objects = 2;
  int objects_size() const;
  private:
  int _internal_objects_size() const;
  public:
  void clear_objects();
  ::CMsgSOMultipleObjects_SingleObject* mutable_objects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSOMultipleObjects_SingleObject >*
      mutable_objects();
  private:
  const ::CMsgSOMultipleObjects_SingleObject& _internal_objects(int index) const;
  ::CMsgSOMultipleObjects_SingleObject* _internal_add_objects();
  public:
  const ::CMsgSOMultipleObjects_SingleObject& objects(int index) const;
  ::CMsgSOMultipleObjects_SingleObject* add_objects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSOMultipleObjects_SingleObject >&
      objects() const;

  // optional .CMsgSOIDOwner owner_soid = 6;
  bool has_owner_soid() const;
  private:
  bool _internal_has_owner_soid() const;
  public:
  void clear_owner_soid();
  const ::CMsgSOIDOwner& owner_soid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgSOIDOwner* release_owner_soid();
  ::CMsgSOIDOwner* mutable_owner_soid();
  void set_allocated_owner_soid(::CMsgSOIDOwner* owner_soid);
  private:
  const ::CMsgSOIDOwner& _internal_owner_soid() const;
  ::CMsgSOIDOwner* _internal_mutable_owner_soid();
  public:
  void unsafe_arena_set_allocated_owner_soid(
      ::CMsgSOIDOwner* owner_soid);
  ::CMsgSOIDOwner* unsafe_arena_release_owner_soid();

  // optional fixed64 owner = 1;
  bool has_owner() const;
  private:
  bool _internal_has_owner() const;
  public:
  void clear_owner();
  ::PROTOBUF_NAMESPACE_ID::uint64 owner() const;
  void set_owner(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_owner() const;
  void _internal_set_owner(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional fixed64 version = 3;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint64 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 service_id = 7;
  bool has_service_id() const;
  private:
  bool _internal_has_service_id() const;
  public:
  void clear_service_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 service_id() const;
  void set_service_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_service_id() const;
  void _internal_set_service_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSOMultipleObjects)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSOMultipleObjects_SingleObject > objects_;
  ::CMsgSOIDOwner* owner_soid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 owner_;
  ::PROTOBUF_NAMESPACE_ID::uint64 version_;
  ::PROTOBUF_NAMESPACE_ID::uint32 service_id_;
  friend struct ::TableStruct_gcsdk_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class M0PROTO CMsgSOCacheSubscribed_SubscribedType final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSOCacheSubscribed.SubscribedType) */ {
 public:
  inline CMsgSOCacheSubscribed_SubscribedType() : CMsgSOCacheSubscribed_SubscribedType(nullptr) {}
  ~CMsgSOCacheSubscribed_SubscribedType() override;
  explicit constexpr CMsgSOCacheSubscribed_SubscribedType(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSOCacheSubscribed_SubscribedType(const CMsgSOCacheSubscribed_SubscribedType& from);
  CMsgSOCacheSubscribed_SubscribedType(CMsgSOCacheSubscribed_SubscribedType&& from) noexcept
    : CMsgSOCacheSubscribed_SubscribedType() {
    *this = ::std::move(from);
  }

  inline CMsgSOCacheSubscribed_SubscribedType& operator=(const CMsgSOCacheSubscribed_SubscribedType& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSOCacheSubscribed_SubscribedType& operator=(CMsgSOCacheSubscribed_SubscribedType&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSOCacheSubscribed_SubscribedType& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSOCacheSubscribed_SubscribedType* internal_default_instance() {
    return reinterpret_cast<const CMsgSOCacheSubscribed_SubscribedType*>(
               &_CMsgSOCacheSubscribed_SubscribedType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CMsgSOCacheSubscribed_SubscribedType& a, CMsgSOCacheSubscribed_SubscribedType& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSOCacheSubscribed_SubscribedType* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSOCacheSubscribed_SubscribedType* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgSOCacheSubscribed_SubscribedType* New() const final {
    return new CMsgSOCacheSubscribed_SubscribedType();
  }

  CMsgSOCacheSubscribed_SubscribedType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgSOCacheSubscribed_SubscribedType>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgSOCacheSubscribed_SubscribedType& from);
  void MergeFrom(const CMsgSOCacheSubscribed_SubscribedType& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSOCacheSubscribed_SubscribedType* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSOCacheSubscribed.SubscribedType";
  }
  protected:
  explicit CMsgSOCacheSubscribed_SubscribedType(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectDataFieldNumber = 2,
    kTypeIdFieldNumber = 1,
  };
  // repeated bytes object_data = 2;
  int object_data_size() const;
  private:
  int _internal_object_data_size() const;
  public:
  void clear_object_data();
  const std::string& object_data(int index) const;
  std::string* mutable_object_data(int index);
  void set_object_data(int index, const std::string& value);
  void set_object_data(int index, std::string&& value);
  void set_object_data(int index, const char* value);
  void set_object_data(int index, const void* value, size_t size);
  std::string* add_object_data();
  void add_object_data(const std::string& value);
  void add_object_data(std::string&& value);
  void add_object_data(const char* value);
  void add_object_data(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& object_data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_object_data();
  private:
  const std::string& _internal_object_data(int index) const;
  std::string* _internal_add_object_data();
  public:

  // optional int32 type_id = 1;
  bool has_type_id() const;
  private:
  bool _internal_has_type_id() const;
  public:
  void clear_type_id();
  ::PROTOBUF_NAMESPACE_ID::int32 type_id() const;
  void set_type_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type_id() const;
  void _internal_set_type_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSOCacheSubscribed.SubscribedType)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> object_data_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_id_;
  friend struct ::TableStruct_gcsdk_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class M0PROTO CMsgSOCacheSubscribed final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSOCacheSubscribed) */ {
 public:
  inline CMsgSOCacheSubscribed() : CMsgSOCacheSubscribed(nullptr) {}
  ~CMsgSOCacheSubscribed() override;
  explicit constexpr CMsgSOCacheSubscribed(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSOCacheSubscribed(const CMsgSOCacheSubscribed& from);
  CMsgSOCacheSubscribed(CMsgSOCacheSubscribed&& from) noexcept
    : CMsgSOCacheSubscribed() {
    *this = ::std::move(from);
  }

  inline CMsgSOCacheSubscribed& operator=(const CMsgSOCacheSubscribed& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSOCacheSubscribed& operator=(CMsgSOCacheSubscribed&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSOCacheSubscribed& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSOCacheSubscribed* internal_default_instance() {
    return reinterpret_cast<const CMsgSOCacheSubscribed*>(
               &_CMsgSOCacheSubscribed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CMsgSOCacheSubscribed& a, CMsgSOCacheSubscribed& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSOCacheSubscribed* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSOCacheSubscribed* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgSOCacheSubscribed* New() const final {
    return new CMsgSOCacheSubscribed();
  }

  CMsgSOCacheSubscribed* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgSOCacheSubscribed>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgSOCacheSubscribed& from);
  void MergeFrom(const CMsgSOCacheSubscribed& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSOCacheSubscribed* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSOCacheSubscribed";
  }
  protected:
  explicit CMsgSOCacheSubscribed(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgSOCacheSubscribed_SubscribedType SubscribedType;

  // accessors -------------------------------------------------------

  enum : int {
    kObjectsFieldNumber = 2,
    kServiceListFieldNumber = 6,
    kOwnerSoidFieldNumber = 4,
    kOwnerFieldNumber = 1,
    kVersionFieldNumber = 3,
    kSyncVersionFieldNumber = 7,
    kServiceIdFieldNumber = 5,
  };
  // repeated .CMsgSOCacheSubscribed.SubscribedType objects = 2;
  int objects_size() const;
  private:
  int _internal_objects_size() const;
  public:
  void clear_objects();
  ::CMsgSOCacheSubscribed_SubscribedType* mutable_objects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSOCacheSubscribed_SubscribedType >*
      mutable_objects();
  private:
  const ::CMsgSOCacheSubscribed_SubscribedType& _internal_objects(int index) const;
  ::CMsgSOCacheSubscribed_SubscribedType* _internal_add_objects();
  public:
  const ::CMsgSOCacheSubscribed_SubscribedType& objects(int index) const;
  ::CMsgSOCacheSubscribed_SubscribedType* add_objects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSOCacheSubscribed_SubscribedType >&
      objects() const;

  // repeated uint32 service_list = 6;
  int service_list_size() const;
  private:
  int _internal_service_list_size() const;
  public:
  void clear_service_list();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_service_list(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_service_list() const;
  void _internal_add_service_list(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_service_list();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 service_list(int index) const;
  void set_service_list(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_service_list(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      service_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_service_list();

  // optional .CMsgSOIDOwner owner_soid = 4;
  bool has_owner_soid() const;
  private:
  bool _internal_has_owner_soid() const;
  public:
  void clear_owner_soid();
  const ::CMsgSOIDOwner& owner_soid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgSOIDOwner* release_owner_soid();
  ::CMsgSOIDOwner* mutable_owner_soid();
  void set_allocated_owner_soid(::CMsgSOIDOwner* owner_soid);
  private:
  const ::CMsgSOIDOwner& _internal_owner_soid() const;
  ::CMsgSOIDOwner* _internal_mutable_owner_soid();
  public:
  void unsafe_arena_set_allocated_owner_soid(
      ::CMsgSOIDOwner* owner_soid);
  ::CMsgSOIDOwner* unsafe_arena_release_owner_soid();

  // optional fixed64 owner = 1;
  bool has_owner() const;
  private:
  bool _internal_has_owner() const;
  public:
  void clear_owner();
  ::PROTOBUF_NAMESPACE_ID::uint64 owner() const;
  void set_owner(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_owner() const;
  void _internal_set_owner(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional fixed64 version = 3;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint64 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional fixed64 sync_version = 7;
  bool has_sync_version() const;
  private:
  bool _internal_has_sync_version() const;
  public:
  void clear_sync_version();
  ::PROTOBUF_NAMESPACE_ID::uint64 sync_version() const;
  void set_sync_version(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sync_version() const;
  void _internal_set_sync_version(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 service_id = 5;
  bool has_service_id() const;
  private:
  bool _internal_has_service_id() const;
  public:
  void clear_service_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 service_id() const;
  void set_service_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_service_id() const;
  void _internal_set_service_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSOCacheSubscribed)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSOCacheSubscribed_SubscribedType > objects_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > service_list_;
  ::CMsgSOIDOwner* owner_soid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 owner_;
  ::PROTOBUF_NAMESPACE_ID::uint64 version_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sync_version_;
  ::PROTOBUF_NAMESPACE_ID::uint32 service_id_;
  friend struct ::TableStruct_gcsdk_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class M0PROTO CMsgSOCacheSubscribedUpToDate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSOCacheSubscribedUpToDate) */ {
 public:
  inline CMsgSOCacheSubscribedUpToDate() : CMsgSOCacheSubscribedUpToDate(nullptr) {}
  ~CMsgSOCacheSubscribedUpToDate() override;
  explicit constexpr CMsgSOCacheSubscribedUpToDate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSOCacheSubscribedUpToDate(const CMsgSOCacheSubscribedUpToDate& from);
  CMsgSOCacheSubscribedUpToDate(CMsgSOCacheSubscribedUpToDate&& from) noexcept
    : CMsgSOCacheSubscribedUpToDate() {
    *this = ::std::move(from);
  }

  inline CMsgSOCacheSubscribedUpToDate& operator=(const CMsgSOCacheSubscribedUpToDate& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSOCacheSubscribedUpToDate& operator=(CMsgSOCacheSubscribedUpToDate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSOCacheSubscribedUpToDate& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSOCacheSubscribedUpToDate* internal_default_instance() {
    return reinterpret_cast<const CMsgSOCacheSubscribedUpToDate*>(
               &_CMsgSOCacheSubscribedUpToDate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CMsgSOCacheSubscribedUpToDate& a, CMsgSOCacheSubscribedUpToDate& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSOCacheSubscribedUpToDate* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSOCacheSubscribedUpToDate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgSOCacheSubscribedUpToDate* New() const final {
    return new CMsgSOCacheSubscribedUpToDate();
  }

  CMsgSOCacheSubscribedUpToDate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgSOCacheSubscribedUpToDate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgSOCacheSubscribedUpToDate& from);
  void MergeFrom(const CMsgSOCacheSubscribedUpToDate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSOCacheSubscribedUpToDate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSOCacheSubscribedUpToDate";
  }
  protected:
  explicit CMsgSOCacheSubscribedUpToDate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceListFieldNumber = 4,
    kOwnerSoidFieldNumber = 2,
    kVersionFieldNumber = 1,
    kSyncVersionFieldNumber = 5,
    kServiceIdFieldNumber = 3,
  };
  // repeated uint32 service_list = 4;
  int service_list_size() const;
  private:
  int _internal_service_list_size() const;
  public:
  void clear_service_list();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_service_list(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_service_list() const;
  void _internal_add_service_list(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_service_list();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 service_list(int index) const;
  void set_service_list(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_service_list(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      service_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_service_list();

  // optional .CMsgSOIDOwner owner_soid = 2;
  bool has_owner_soid() const;
  private:
  bool _internal_has_owner_soid() const;
  public:
  void clear_owner_soid();
  const ::CMsgSOIDOwner& owner_soid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgSOIDOwner* release_owner_soid();
  ::CMsgSOIDOwner* mutable_owner_soid();
  void set_allocated_owner_soid(::CMsgSOIDOwner* owner_soid);
  private:
  const ::CMsgSOIDOwner& _internal_owner_soid() const;
  ::CMsgSOIDOwner* _internal_mutable_owner_soid();
  public:
  void unsafe_arena_set_allocated_owner_soid(
      ::CMsgSOIDOwner* owner_soid);
  ::CMsgSOIDOwner* unsafe_arena_release_owner_soid();

  // optional fixed64 version = 1;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint64 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional fixed64 sync_version = 5;
  bool has_sync_version() const;
  private:
  bool _internal_has_sync_version() const;
  public:
  void clear_sync_version();
  ::PROTOBUF_NAMESPACE_ID::uint64 sync_version() const;
  void set_sync_version(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sync_version() const;
  void _internal_set_sync_version(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 service_id = 3;
  bool has_service_id() const;
  private:
  bool _internal_has_service_id() const;
  public:
  void clear_service_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 service_id() const;
  void set_service_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_service_id() const;
  void _internal_set_service_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSOCacheSubscribedUpToDate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > service_list_;
  ::CMsgSOIDOwner* owner_soid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 version_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sync_version_;
  ::PROTOBUF_NAMESPACE_ID::uint32 service_id_;
  friend struct ::TableStruct_gcsdk_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class M0PROTO CMsgSOCacheUnsubscribed final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSOCacheUnsubscribed) */ {
 public:
  inline CMsgSOCacheUnsubscribed() : CMsgSOCacheUnsubscribed(nullptr) {}
  ~CMsgSOCacheUnsubscribed() override;
  explicit constexpr CMsgSOCacheUnsubscribed(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSOCacheUnsubscribed(const CMsgSOCacheUnsubscribed& from);
  CMsgSOCacheUnsubscribed(CMsgSOCacheUnsubscribed&& from) noexcept
    : CMsgSOCacheUnsubscribed() {
    *this = ::std::move(from);
  }

  inline CMsgSOCacheUnsubscribed& operator=(const CMsgSOCacheUnsubscribed& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSOCacheUnsubscribed& operator=(CMsgSOCacheUnsubscribed&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSOCacheUnsubscribed& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSOCacheUnsubscribed* internal_default_instance() {
    return reinterpret_cast<const CMsgSOCacheUnsubscribed*>(
               &_CMsgSOCacheUnsubscribed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CMsgSOCacheUnsubscribed& a, CMsgSOCacheUnsubscribed& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSOCacheUnsubscribed* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSOCacheUnsubscribed* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgSOCacheUnsubscribed* New() const final {
    return new CMsgSOCacheUnsubscribed();
  }

  CMsgSOCacheUnsubscribed* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgSOCacheUnsubscribed>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgSOCacheUnsubscribed& from);
  void MergeFrom(const CMsgSOCacheUnsubscribed& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSOCacheUnsubscribed* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSOCacheUnsubscribed";
  }
  protected:
  explicit CMsgSOCacheUnsubscribed(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerFieldNumber = 1,
  };
  // optional fixed64 owner = 1;
  bool has_owner() const;
  private:
  bool _internal_has_owner() const;
  public:
  void clear_owner();
  ::PROTOBUF_NAMESPACE_ID::uint64 owner() const;
  void set_owner(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_owner() const;
  void _internal_set_owner(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSOCacheUnsubscribed)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 owner_;
  friend struct ::TableStruct_gcsdk_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class M0PROTO CMsgSOCacheSubscriptionCheck final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSOCacheSubscriptionCheck) */ {
 public:
  inline CMsgSOCacheSubscriptionCheck() : CMsgSOCacheSubscriptionCheck(nullptr) {}
  ~CMsgSOCacheSubscriptionCheck() override;
  explicit constexpr CMsgSOCacheSubscriptionCheck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSOCacheSubscriptionCheck(const CMsgSOCacheSubscriptionCheck& from);
  CMsgSOCacheSubscriptionCheck(CMsgSOCacheSubscriptionCheck&& from) noexcept
    : CMsgSOCacheSubscriptionCheck() {
    *this = ::std::move(from);
  }

  inline CMsgSOCacheSubscriptionCheck& operator=(const CMsgSOCacheSubscriptionCheck& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSOCacheSubscriptionCheck& operator=(CMsgSOCacheSubscriptionCheck&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSOCacheSubscriptionCheck& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSOCacheSubscriptionCheck* internal_default_instance() {
    return reinterpret_cast<const CMsgSOCacheSubscriptionCheck*>(
               &_CMsgSOCacheSubscriptionCheck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CMsgSOCacheSubscriptionCheck& a, CMsgSOCacheSubscriptionCheck& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSOCacheSubscriptionCheck* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSOCacheSubscriptionCheck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgSOCacheSubscriptionCheck* New() const final {
    return new CMsgSOCacheSubscriptionCheck();
  }

  CMsgSOCacheSubscriptionCheck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgSOCacheSubscriptionCheck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgSOCacheSubscriptionCheck& from);
  void MergeFrom(const CMsgSOCacheSubscriptionCheck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSOCacheSubscriptionCheck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSOCacheSubscriptionCheck";
  }
  protected:
  explicit CMsgSOCacheSubscriptionCheck(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceListFieldNumber = 5,
    kOwnerSoidFieldNumber = 3,
    kOwnerFieldNumber = 1,
    kVersionFieldNumber = 2,
    kSyncVersionFieldNumber = 6,
    kServiceIdFieldNumber = 4,
  };
  // repeated uint32 service_list = 5;
  int service_list_size() const;
  private:
  int _internal_service_list_size() const;
  public:
  void clear_service_list();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_service_list(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_service_list() const;
  void _internal_add_service_list(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_service_list();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 service_list(int index) const;
  void set_service_list(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_service_list(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      service_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_service_list();

  // optional .CMsgSOIDOwner owner_soid = 3;
  bool has_owner_soid() const;
  private:
  bool _internal_has_owner_soid() const;
  public:
  void clear_owner_soid();
  const ::CMsgSOIDOwner& owner_soid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgSOIDOwner* release_owner_soid();
  ::CMsgSOIDOwner* mutable_owner_soid();
  void set_allocated_owner_soid(::CMsgSOIDOwner* owner_soid);
  private:
  const ::CMsgSOIDOwner& _internal_owner_soid() const;
  ::CMsgSOIDOwner* _internal_mutable_owner_soid();
  public:
  void unsafe_arena_set_allocated_owner_soid(
      ::CMsgSOIDOwner* owner_soid);
  ::CMsgSOIDOwner* unsafe_arena_release_owner_soid();

  // optional fixed64 owner = 1;
  bool has_owner() const;
  private:
  bool _internal_has_owner() const;
  public:
  void clear_owner();
  ::PROTOBUF_NAMESPACE_ID::uint64 owner() const;
  void set_owner(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_owner() const;
  void _internal_set_owner(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional fixed64 version = 2;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint64 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional fixed64 sync_version = 6;
  bool has_sync_version() const;
  private:
  bool _internal_has_sync_version() const;
  public:
  void clear_sync_version();
  ::PROTOBUF_NAMESPACE_ID::uint64 sync_version() const;
  void set_sync_version(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sync_version() const;
  void _internal_set_sync_version(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 service_id = 4;
  bool has_service_id() const;
  private:
  bool _internal_has_service_id() const;
  public:
  void clear_service_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 service_id() const;
  void set_service_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_service_id() const;
  void _internal_set_service_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSOCacheSubscriptionCheck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > service_list_;
  ::CMsgSOIDOwner* owner_soid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 owner_;
  ::PROTOBUF_NAMESPACE_ID::uint64 version_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sync_version_;
  ::PROTOBUF_NAMESPACE_ID::uint32 service_id_;
  friend struct ::TableStruct_gcsdk_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class M0PROTO CMsgSOCacheSubscriptionRefresh final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSOCacheSubscriptionRefresh) */ {
 public:
  inline CMsgSOCacheSubscriptionRefresh() : CMsgSOCacheSubscriptionRefresh(nullptr) {}
  ~CMsgSOCacheSubscriptionRefresh() override;
  explicit constexpr CMsgSOCacheSubscriptionRefresh(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSOCacheSubscriptionRefresh(const CMsgSOCacheSubscriptionRefresh& from);
  CMsgSOCacheSubscriptionRefresh(CMsgSOCacheSubscriptionRefresh&& from) noexcept
    : CMsgSOCacheSubscriptionRefresh() {
    *this = ::std::move(from);
  }

  inline CMsgSOCacheSubscriptionRefresh& operator=(const CMsgSOCacheSubscriptionRefresh& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSOCacheSubscriptionRefresh& operator=(CMsgSOCacheSubscriptionRefresh&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSOCacheSubscriptionRefresh& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSOCacheSubscriptionRefresh* internal_default_instance() {
    return reinterpret_cast<const CMsgSOCacheSubscriptionRefresh*>(
               &_CMsgSOCacheSubscriptionRefresh_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CMsgSOCacheSubscriptionRefresh& a, CMsgSOCacheSubscriptionRefresh& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSOCacheSubscriptionRefresh* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSOCacheSubscriptionRefresh* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgSOCacheSubscriptionRefresh* New() const final {
    return new CMsgSOCacheSubscriptionRefresh();
  }

  CMsgSOCacheSubscriptionRefresh* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgSOCacheSubscriptionRefresh>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgSOCacheSubscriptionRefresh& from);
  void MergeFrom(const CMsgSOCacheSubscriptionRefresh& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSOCacheSubscriptionRefresh* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSOCacheSubscriptionRefresh";
  }
  protected:
  explicit CMsgSOCacheSubscriptionRefresh(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerSoidFieldNumber = 2,
    kOwnerFieldNumber = 1,
  };
  // optional .CMsgSOIDOwner owner_soid = 2;
  bool has_owner_soid() const;
  private:
  bool _internal_has_owner_soid() const;
  public:
  void clear_owner_soid();
  const ::CMsgSOIDOwner& owner_soid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgSOIDOwner* release_owner_soid();
  ::CMsgSOIDOwner* mutable_owner_soid();
  void set_allocated_owner_soid(::CMsgSOIDOwner* owner_soid);
  private:
  const ::CMsgSOIDOwner& _internal_owner_soid() const;
  ::CMsgSOIDOwner* _internal_mutable_owner_soid();
  public:
  void unsafe_arena_set_allocated_owner_soid(
      ::CMsgSOIDOwner* owner_soid);
  ::CMsgSOIDOwner* unsafe_arena_release_owner_soid();

  // optional fixed64 owner = 1;
  bool has_owner() const;
  private:
  bool _internal_has_owner() const;
  public:
  void clear_owner();
  ::PROTOBUF_NAMESPACE_ID::uint64 owner() const;
  void set_owner(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_owner() const;
  void _internal_set_owner(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSOCacheSubscriptionRefresh)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CMsgSOIDOwner* owner_soid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 owner_;
  friend struct ::TableStruct_gcsdk_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class M0PROTO CMsgSOCacheVersion final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSOCacheVersion) */ {
 public:
  inline CMsgSOCacheVersion() : CMsgSOCacheVersion(nullptr) {}
  ~CMsgSOCacheVersion() override;
  explicit constexpr CMsgSOCacheVersion(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSOCacheVersion(const CMsgSOCacheVersion& from);
  CMsgSOCacheVersion(CMsgSOCacheVersion&& from) noexcept
    : CMsgSOCacheVersion() {
    *this = ::std::move(from);
  }

  inline CMsgSOCacheVersion& operator=(const CMsgSOCacheVersion& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSOCacheVersion& operator=(CMsgSOCacheVersion&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSOCacheVersion& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSOCacheVersion* internal_default_instance() {
    return reinterpret_cast<const CMsgSOCacheVersion*>(
               &_CMsgSOCacheVersion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CMsgSOCacheVersion& a, CMsgSOCacheVersion& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSOCacheVersion* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSOCacheVersion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgSOCacheVersion* New() const final {
    return new CMsgSOCacheVersion();
  }

  CMsgSOCacheVersion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgSOCacheVersion>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgSOCacheVersion& from);
  void MergeFrom(const CMsgSOCacheVersion& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSOCacheVersion* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSOCacheVersion";
  }
  protected:
  explicit CMsgSOCacheVersion(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
  };
  // optional fixed64 version = 1;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint64 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSOCacheVersion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 version_;
  friend struct ::TableStruct_gcsdk_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class M0PROTO CMsgGCMultiplexMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCMultiplexMessage) */ {
 public:
  inline CMsgGCMultiplexMessage() : CMsgGCMultiplexMessage(nullptr) {}
  ~CMsgGCMultiplexMessage() override;
  explicit constexpr CMsgGCMultiplexMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCMultiplexMessage(const CMsgGCMultiplexMessage& from);
  CMsgGCMultiplexMessage(CMsgGCMultiplexMessage&& from) noexcept
    : CMsgGCMultiplexMessage() {
    *this = ::std::move(from);
  }

  inline CMsgGCMultiplexMessage& operator=(const CMsgGCMultiplexMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCMultiplexMessage& operator=(CMsgGCMultiplexMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCMultiplexMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCMultiplexMessage* internal_default_instance() {
    return reinterpret_cast<const CMsgGCMultiplexMessage*>(
               &_CMsgGCMultiplexMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CMsgGCMultiplexMessage& a, CMsgGCMultiplexMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCMultiplexMessage* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCMultiplexMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCMultiplexMessage* New() const final {
    return new CMsgGCMultiplexMessage();
  }

  CMsgGCMultiplexMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCMultiplexMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgGCMultiplexMessage& from);
  void MergeFrom(const CMsgGCMultiplexMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCMultiplexMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCMultiplexMessage";
  }
  protected:
  explicit CMsgGCMultiplexMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamidsFieldNumber = 3,
    kPayloadFieldNumber = 2,
    kMsgtypeFieldNumber = 1,
  };
  // repeated fixed64 steamids = 3;
  int steamids_size() const;
  private:
  int _internal_steamids_size() const;
  public:
  void clear_steamids();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_steamids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_steamids() const;
  void _internal_add_steamids(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_steamids();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 steamids(int index) const;
  void set_steamids(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_steamids(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      steamids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_steamids();

  // optional bytes payload = 2;
  bool has_payload() const;
  private:
  bool _internal_has_payload() const;
  public:
  void clear_payload();
  const std::string& payload() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_payload(ArgT0&& arg0, ArgT... args);
  std::string* mutable_payload();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  private:
  const std::string& _internal_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // optional uint32 msgtype = 1;
  bool has_msgtype() const;
  private:
  bool _internal_has_msgtype() const;
  public:
  void clear_msgtype();
  ::PROTOBUF_NAMESPACE_ID::uint32 msgtype() const;
  void set_msgtype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_msgtype() const;
  void _internal_set_msgtype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCMultiplexMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > steamids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
  ::PROTOBUF_NAMESPACE_ID::uint32 msgtype_;
  friend struct ::TableStruct_gcsdk_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class M0PROTO CGCToGCMsgMasterAck final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGCToGCMsgMasterAck) */ {
 public:
  inline CGCToGCMsgMasterAck() : CGCToGCMsgMasterAck(nullptr) {}
  ~CGCToGCMsgMasterAck() override;
  explicit constexpr CGCToGCMsgMasterAck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGCToGCMsgMasterAck(const CGCToGCMsgMasterAck& from);
  CGCToGCMsgMasterAck(CGCToGCMsgMasterAck&& from) noexcept
    : CGCToGCMsgMasterAck() {
    *this = ::std::move(from);
  }

  inline CGCToGCMsgMasterAck& operator=(const CGCToGCMsgMasterAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGCToGCMsgMasterAck& operator=(CGCToGCMsgMasterAck&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CGCToGCMsgMasterAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGCToGCMsgMasterAck* internal_default_instance() {
    return reinterpret_cast<const CGCToGCMsgMasterAck*>(
               &_CGCToGCMsgMasterAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CGCToGCMsgMasterAck& a, CGCToGCMsgMasterAck& b) {
    a.Swap(&b);
  }
  inline void Swap(CGCToGCMsgMasterAck* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGCToGCMsgMasterAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGCToGCMsgMasterAck* New() const final {
    return new CGCToGCMsgMasterAck();
  }

  CGCToGCMsgMasterAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGCToGCMsgMasterAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGCToGCMsgMasterAck& from);
  void MergeFrom(const CGCToGCMsgMasterAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGCToGCMsgMasterAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGCToGCMsgMasterAck";
  }
  protected:
  explicit CGCToGCMsgMasterAck(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeInstancesFieldNumber = 5,
    kMachineNameFieldNumber = 3,
    kProcessNameFieldNumber = 4,
    kDirIndexFieldNumber = 1,
  };
  // repeated uint32 type_instances = 5;
  int type_instances_size() const;
  private:
  int _internal_type_instances_size() const;
  public:
  void clear_type_instances();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type_instances(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_type_instances() const;
  void _internal_add_type_instances(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_type_instances();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 type_instances(int index) const;
  void set_type_instances(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_type_instances(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      type_instances() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_type_instances();

  // optional string machine_name = 3;
  bool has_machine_name() const;
  private:
  bool _internal_has_machine_name() const;
  public:
  void clear_machine_name();
  const std::string& machine_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_machine_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_machine_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_machine_name();
  void set_allocated_machine_name(std::string* machine_name);
  private:
  const std::string& _internal_machine_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_machine_name(const std::string& value);
  std::string* _internal_mutable_machine_name();
  public:

  // optional string process_name = 4;
  bool has_process_name() const;
  private:
  bool _internal_has_process_name() const;
  public:
  void clear_process_name();
  const std::string& process_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_process_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_process_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_process_name();
  void set_allocated_process_name(std::string* process_name);
  private:
  const std::string& _internal_process_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_process_name(const std::string& value);
  std::string* _internal_mutable_process_name();
  public:

  // optional uint32 dir_index = 1;
  bool has_dir_index() const;
  private:
  bool _internal_has_dir_index() const;
  public:
  void clear_dir_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 dir_index() const;
  void set_dir_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dir_index() const;
  void _internal_set_dir_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CGCToGCMsgMasterAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > type_instances_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr machine_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr process_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dir_index_;
  friend struct ::TableStruct_gcsdk_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class M0PROTO CGCToGCMsgMasterAck_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGCToGCMsgMasterAck_Response) */ {
 public:
  inline CGCToGCMsgMasterAck_Response() : CGCToGCMsgMasterAck_Response(nullptr) {}
  ~CGCToGCMsgMasterAck_Response() override;
  explicit constexpr CGCToGCMsgMasterAck_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGCToGCMsgMasterAck_Response(const CGCToGCMsgMasterAck_Response& from);
  CGCToGCMsgMasterAck_Response(CGCToGCMsgMasterAck_Response&& from) noexcept
    : CGCToGCMsgMasterAck_Response() {
    *this = ::std::move(from);
  }

  inline CGCToGCMsgMasterAck_Response& operator=(const CGCToGCMsgMasterAck_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGCToGCMsgMasterAck_Response& operator=(CGCToGCMsgMasterAck_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CGCToGCMsgMasterAck_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGCToGCMsgMasterAck_Response* internal_default_instance() {
    return reinterpret_cast<const CGCToGCMsgMasterAck_Response*>(
               &_CGCToGCMsgMasterAck_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CGCToGCMsgMasterAck_Response& a, CGCToGCMsgMasterAck_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CGCToGCMsgMasterAck_Response* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGCToGCMsgMasterAck_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGCToGCMsgMasterAck_Response* New() const final {
    return new CGCToGCMsgMasterAck_Response();
  }

  CGCToGCMsgMasterAck_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGCToGCMsgMasterAck_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGCToGCMsgMasterAck_Response& from);
  void MergeFrom(const CGCToGCMsgMasterAck_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGCToGCMsgMasterAck_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGCToGCMsgMasterAck_Response";
  }
  protected:
  explicit CGCToGCMsgMasterAck_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEresultFieldNumber = 1,
  };
  // optional int32 eresult = 1 [default = 2];
  bool has_eresult() const;
  private:
  bool _internal_has_eresult() const;
  public:
  void clear_eresult();
  ::PROTOBUF_NAMESPACE_ID::int32 eresult() const;
  void set_eresult(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_eresult() const;
  void _internal_set_eresult(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CGCToGCMsgMasterAck_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 eresult_;
  friend struct ::TableStruct_gcsdk_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class M0PROTO CGCToGCMsgMasterStartupComplete_GCInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGCToGCMsgMasterStartupComplete.GCInfo) */ {
 public:
  inline CGCToGCMsgMasterStartupComplete_GCInfo() : CGCToGCMsgMasterStartupComplete_GCInfo(nullptr) {}
  ~CGCToGCMsgMasterStartupComplete_GCInfo() override;
  explicit constexpr CGCToGCMsgMasterStartupComplete_GCInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGCToGCMsgMasterStartupComplete_GCInfo(const CGCToGCMsgMasterStartupComplete_GCInfo& from);
  CGCToGCMsgMasterStartupComplete_GCInfo(CGCToGCMsgMasterStartupComplete_GCInfo&& from) noexcept
    : CGCToGCMsgMasterStartupComplete_GCInfo() {
    *this = ::std::move(from);
  }

  inline CGCToGCMsgMasterStartupComplete_GCInfo& operator=(const CGCToGCMsgMasterStartupComplete_GCInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGCToGCMsgMasterStartupComplete_GCInfo& operator=(CGCToGCMsgMasterStartupComplete_GCInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CGCToGCMsgMasterStartupComplete_GCInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGCToGCMsgMasterStartupComplete_GCInfo* internal_default_instance() {
    return reinterpret_cast<const CGCToGCMsgMasterStartupComplete_GCInfo*>(
               &_CGCToGCMsgMasterStartupComplete_GCInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(CGCToGCMsgMasterStartupComplete_GCInfo& a, CGCToGCMsgMasterStartupComplete_GCInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CGCToGCMsgMasterStartupComplete_GCInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGCToGCMsgMasterStartupComplete_GCInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGCToGCMsgMasterStartupComplete_GCInfo* New() const final {
    return new CGCToGCMsgMasterStartupComplete_GCInfo();
  }

  CGCToGCMsgMasterStartupComplete_GCInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGCToGCMsgMasterStartupComplete_GCInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGCToGCMsgMasterStartupComplete_GCInfo& from);
  void MergeFrom(const CGCToGCMsgMasterStartupComplete_GCInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGCToGCMsgMasterStartupComplete_GCInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGCToGCMsgMasterStartupComplete.GCInfo";
  }
  protected:
  explicit CGCToGCMsgMasterStartupComplete_GCInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMachineNameFieldNumber = 2,
    kDirIndexFieldNumber = 1,
  };
  // optional string machine_name = 2;
  bool has_machine_name() const;
  private:
  bool _internal_has_machine_name() const;
  public:
  void clear_machine_name();
  const std::string& machine_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_machine_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_machine_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_machine_name();
  void set_allocated_machine_name(std::string* machine_name);
  private:
  const std::string& _internal_machine_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_machine_name(const std::string& value);
  std::string* _internal_mutable_machine_name();
  public:

  // optional uint32 dir_index = 1;
  bool has_dir_index() const;
  private:
  bool _internal_has_dir_index() const;
  public:
  void clear_dir_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 dir_index() const;
  void set_dir_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dir_index() const;
  void _internal_set_dir_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CGCToGCMsgMasterStartupComplete.GCInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr machine_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dir_index_;
  friend struct ::TableStruct_gcsdk_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class M0PROTO CGCToGCMsgMasterStartupComplete final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGCToGCMsgMasterStartupComplete) */ {
 public:
  inline CGCToGCMsgMasterStartupComplete() : CGCToGCMsgMasterStartupComplete(nullptr) {}
  ~CGCToGCMsgMasterStartupComplete() override;
  explicit constexpr CGCToGCMsgMasterStartupComplete(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGCToGCMsgMasterStartupComplete(const CGCToGCMsgMasterStartupComplete& from);
  CGCToGCMsgMasterStartupComplete(CGCToGCMsgMasterStartupComplete&& from) noexcept
    : CGCToGCMsgMasterStartupComplete() {
    *this = ::std::move(from);
  }

  inline CGCToGCMsgMasterStartupComplete& operator=(const CGCToGCMsgMasterStartupComplete& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGCToGCMsgMasterStartupComplete& operator=(CGCToGCMsgMasterStartupComplete&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CGCToGCMsgMasterStartupComplete& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGCToGCMsgMasterStartupComplete* internal_default_instance() {
    return reinterpret_cast<const CGCToGCMsgMasterStartupComplete*>(
               &_CGCToGCMsgMasterStartupComplete_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(CGCToGCMsgMasterStartupComplete& a, CGCToGCMsgMasterStartupComplete& b) {
    a.Swap(&b);
  }
  inline void Swap(CGCToGCMsgMasterStartupComplete* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGCToGCMsgMasterStartupComplete* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGCToGCMsgMasterStartupComplete* New() const final {
    return new CGCToGCMsgMasterStartupComplete();
  }

  CGCToGCMsgMasterStartupComplete* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGCToGCMsgMasterStartupComplete>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGCToGCMsgMasterStartupComplete& from);
  void MergeFrom(const CGCToGCMsgMasterStartupComplete& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGCToGCMsgMasterStartupComplete* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGCToGCMsgMasterStartupComplete";
  }
  protected:
  explicit CGCToGCMsgMasterStartupComplete(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CGCToGCMsgMasterStartupComplete_GCInfo GCInfo;

  // accessors -------------------------------------------------------

  enum : int {
    kGcInfoFieldNumber = 1,
  };
  // repeated .CGCToGCMsgMasterStartupComplete.GCInfo gc_info = 1;
  int gc_info_size() const;
  private:
  int _internal_gc_info_size() const;
  public:
  void clear_gc_info();
  ::CGCToGCMsgMasterStartupComplete_GCInfo* mutable_gc_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGCToGCMsgMasterStartupComplete_GCInfo >*
      mutable_gc_info();
  private:
  const ::CGCToGCMsgMasterStartupComplete_GCInfo& _internal_gc_info(int index) const;
  ::CGCToGCMsgMasterStartupComplete_GCInfo* _internal_add_gc_info();
  public:
  const ::CGCToGCMsgMasterStartupComplete_GCInfo& gc_info(int index) const;
  ::CGCToGCMsgMasterStartupComplete_GCInfo* add_gc_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGCToGCMsgMasterStartupComplete_GCInfo >&
      gc_info() const;

  // @@protoc_insertion_point(class_scope:CGCToGCMsgMasterStartupComplete)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGCToGCMsgMasterStartupComplete_GCInfo > gc_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gcsdk_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class M0PROTO CGCToGCMsgRouted final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGCToGCMsgRouted) */ {
 public:
  inline CGCToGCMsgRouted() : CGCToGCMsgRouted(nullptr) {}
  ~CGCToGCMsgRouted() override;
  explicit constexpr CGCToGCMsgRouted(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGCToGCMsgRouted(const CGCToGCMsgRouted& from);
  CGCToGCMsgRouted(CGCToGCMsgRouted&& from) noexcept
    : CGCToGCMsgRouted() {
    *this = ::std::move(from);
  }

  inline CGCToGCMsgRouted& operator=(const CGCToGCMsgRouted& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGCToGCMsgRouted& operator=(CGCToGCMsgRouted&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CGCToGCMsgRouted& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGCToGCMsgRouted* internal_default_instance() {
    return reinterpret_cast<const CGCToGCMsgRouted*>(
               &_CGCToGCMsgRouted_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(CGCToGCMsgRouted& a, CGCToGCMsgRouted& b) {
    a.Swap(&b);
  }
  inline void Swap(CGCToGCMsgRouted* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGCToGCMsgRouted* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGCToGCMsgRouted* New() const final {
    return new CGCToGCMsgRouted();
  }

  CGCToGCMsgRouted* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGCToGCMsgRouted>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGCToGCMsgRouted& from);
  void MergeFrom(const CGCToGCMsgRouted& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGCToGCMsgRouted* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGCToGCMsgRouted";
  }
  protected:
  explicit CGCToGCMsgRouted(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNetMessageFieldNumber = 3,
    kSenderIdFieldNumber = 2,
    kMsgTypeFieldNumber = 1,
  };
  // optional bytes net_message = 3;
  bool has_net_message() const;
  private:
  bool _internal_has_net_message() const;
  public:
  void clear_net_message();
  const std::string& net_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_net_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_net_message();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_net_message();
  void set_allocated_net_message(std::string* net_message);
  private:
  const std::string& _internal_net_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_net_message(const std::string& value);
  std::string* _internal_mutable_net_message();
  public:

  // optional fixed64 sender_id = 2;
  bool has_sender_id() const;
  private:
  bool _internal_has_sender_id() const;
  public:
  void clear_sender_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 sender_id() const;
  void set_sender_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sender_id() const;
  void _internal_set_sender_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 msg_type = 1;
  bool has_msg_type() const;
  private:
  bool _internal_has_msg_type() const;
  public:
  void clear_msg_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 msg_type() const;
  void set_msg_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_msg_type() const;
  void _internal_set_msg_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CGCToGCMsgRouted)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr net_message_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sender_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 msg_type_;
  friend struct ::TableStruct_gcsdk_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class M0PROTO CGCToGCMsgRoutedReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGCToGCMsgRoutedReply) */ {
 public:
  inline CGCToGCMsgRoutedReply() : CGCToGCMsgRoutedReply(nullptr) {}
  ~CGCToGCMsgRoutedReply() override;
  explicit constexpr CGCToGCMsgRoutedReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGCToGCMsgRoutedReply(const CGCToGCMsgRoutedReply& from);
  CGCToGCMsgRoutedReply(CGCToGCMsgRoutedReply&& from) noexcept
    : CGCToGCMsgRoutedReply() {
    *this = ::std::move(from);
  }

  inline CGCToGCMsgRoutedReply& operator=(const CGCToGCMsgRoutedReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGCToGCMsgRoutedReply& operator=(CGCToGCMsgRoutedReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CGCToGCMsgRoutedReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGCToGCMsgRoutedReply* internal_default_instance() {
    return reinterpret_cast<const CGCToGCMsgRoutedReply*>(
               &_CGCToGCMsgRoutedReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(CGCToGCMsgRoutedReply& a, CGCToGCMsgRoutedReply& b) {
    a.Swap(&b);
  }
  inline void Swap(CGCToGCMsgRoutedReply* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGCToGCMsgRoutedReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGCToGCMsgRoutedReply* New() const final {
    return new CGCToGCMsgRoutedReply();
  }

  CGCToGCMsgRoutedReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGCToGCMsgRoutedReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGCToGCMsgRoutedReply& from);
  void MergeFrom(const CGCToGCMsgRoutedReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGCToGCMsgRoutedReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGCToGCMsgRoutedReply";
  }
  protected:
  explicit CGCToGCMsgRoutedReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNetMessageFieldNumber = 2,
    kMsgTypeFieldNumber = 1,
  };
  // optional bytes net_message = 2;
  bool has_net_message() const;
  private:
  bool _internal_has_net_message() const;
  public:
  void clear_net_message();
  const std::string& net_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_net_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_net_message();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_net_message();
  void set_allocated_net_message(std::string* net_message);
  private:
  const std::string& _internal_net_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_net_message(const std::string& value);
  std::string* _internal_mutable_net_message();
  public:

  // optional uint32 msg_type = 1;
  bool has_msg_type() const;
  private:
  bool _internal_has_msg_type() const;
  public:
  void clear_msg_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 msg_type() const;
  void set_msg_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_msg_type() const;
  void _internal_set_msg_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CGCToGCMsgRoutedReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr net_message_;
  ::PROTOBUF_NAMESPACE_ID::uint32 msg_type_;
  friend struct ::TableStruct_gcsdk_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class M0PROTO CMsgGCUpdateSubGCSessionInfo_CMsgUpdate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCUpdateSubGCSessionInfo.CMsgUpdate) */ {
 public:
  inline CMsgGCUpdateSubGCSessionInfo_CMsgUpdate() : CMsgGCUpdateSubGCSessionInfo_CMsgUpdate(nullptr) {}
  ~CMsgGCUpdateSubGCSessionInfo_CMsgUpdate() override;
  explicit constexpr CMsgGCUpdateSubGCSessionInfo_CMsgUpdate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCUpdateSubGCSessionInfo_CMsgUpdate(const CMsgGCUpdateSubGCSessionInfo_CMsgUpdate& from);
  CMsgGCUpdateSubGCSessionInfo_CMsgUpdate(CMsgGCUpdateSubGCSessionInfo_CMsgUpdate&& from) noexcept
    : CMsgGCUpdateSubGCSessionInfo_CMsgUpdate() {
    *this = ::std::move(from);
  }

  inline CMsgGCUpdateSubGCSessionInfo_CMsgUpdate& operator=(const CMsgGCUpdateSubGCSessionInfo_CMsgUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCUpdateSubGCSessionInfo_CMsgUpdate& operator=(CMsgGCUpdateSubGCSessionInfo_CMsgUpdate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCUpdateSubGCSessionInfo_CMsgUpdate& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCUpdateSubGCSessionInfo_CMsgUpdate* internal_default_instance() {
    return reinterpret_cast<const CMsgGCUpdateSubGCSessionInfo_CMsgUpdate*>(
               &_CMsgGCUpdateSubGCSessionInfo_CMsgUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(CMsgGCUpdateSubGCSessionInfo_CMsgUpdate& a, CMsgGCUpdateSubGCSessionInfo_CMsgUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCUpdateSubGCSessionInfo_CMsgUpdate* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCUpdateSubGCSessionInfo_CMsgUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCUpdateSubGCSessionInfo_CMsgUpdate* New() const final {
    return new CMsgGCUpdateSubGCSessionInfo_CMsgUpdate();
  }

  CMsgGCUpdateSubGCSessionInfo_CMsgUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCUpdateSubGCSessionInfo_CMsgUpdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgGCUpdateSubGCSessionInfo_CMsgUpdate& from);
  void MergeFrom(const CMsgGCUpdateSubGCSessionInfo_CMsgUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCUpdateSubGCSessionInfo_CMsgUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCUpdateSubGCSessionInfo.CMsgUpdate";
  }
  protected:
  explicit CMsgGCUpdateSubGCSessionInfo_CMsgUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamidFieldNumber = 1,
    kIpFieldNumber = 2,
    kTrustedFieldNumber = 3,
  };
  // optional fixed64 steamid = 1;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  ::PROTOBUF_NAMESPACE_ID::uint64 steamid() const;
  void set_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_steamid() const;
  void _internal_set_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional fixed32 ip = 2;
  bool has_ip() const;
  private:
  bool _internal_has_ip() const;
  public:
  void clear_ip();
  ::PROTOBUF_NAMESPACE_ID::uint32 ip() const;
  void set_ip(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ip() const;
  void _internal_set_ip(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool trusted = 3;
  bool has_trusted() const;
  private:
  bool _internal_has_trusted() const;
  public:
  void clear_trusted();
  bool trusted() const;
  void set_trusted(bool value);
  private:
  bool _internal_trusted() const;
  void _internal_set_trusted(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCUpdateSubGCSessionInfo.CMsgUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 steamid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ip_;
  bool trusted_;
  friend struct ::TableStruct_gcsdk_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class M0PROTO CMsgGCUpdateSubGCSessionInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCUpdateSubGCSessionInfo) */ {
 public:
  inline CMsgGCUpdateSubGCSessionInfo() : CMsgGCUpdateSubGCSessionInfo(nullptr) {}
  ~CMsgGCUpdateSubGCSessionInfo() override;
  explicit constexpr CMsgGCUpdateSubGCSessionInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCUpdateSubGCSessionInfo(const CMsgGCUpdateSubGCSessionInfo& from);
  CMsgGCUpdateSubGCSessionInfo(CMsgGCUpdateSubGCSessionInfo&& from) noexcept
    : CMsgGCUpdateSubGCSessionInfo() {
    *this = ::std::move(from);
  }

  inline CMsgGCUpdateSubGCSessionInfo& operator=(const CMsgGCUpdateSubGCSessionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCUpdateSubGCSessionInfo& operator=(CMsgGCUpdateSubGCSessionInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCUpdateSubGCSessionInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCUpdateSubGCSessionInfo* internal_default_instance() {
    return reinterpret_cast<const CMsgGCUpdateSubGCSessionInfo*>(
               &_CMsgGCUpdateSubGCSessionInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(CMsgGCUpdateSubGCSessionInfo& a, CMsgGCUpdateSubGCSessionInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCUpdateSubGCSessionInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCUpdateSubGCSessionInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCUpdateSubGCSessionInfo* New() const final {
    return new CMsgGCUpdateSubGCSessionInfo();
  }

  CMsgGCUpdateSubGCSessionInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCUpdateSubGCSessionInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgGCUpdateSubGCSessionInfo& from);
  void MergeFrom(const CMsgGCUpdateSubGCSessionInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCUpdateSubGCSessionInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCUpdateSubGCSessionInfo";
  }
  protected:
  explicit CMsgGCUpdateSubGCSessionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgGCUpdateSubGCSessionInfo_CMsgUpdate CMsgUpdate;

  // accessors -------------------------------------------------------

  enum : int {
    kUpdatesFieldNumber = 1,
  };
  // repeated .CMsgGCUpdateSubGCSessionInfo.CMsgUpdate updates = 1;
  int updates_size() const;
  private:
  int _internal_updates_size() const;
  public:
  void clear_updates();
  ::CMsgGCUpdateSubGCSessionInfo_CMsgUpdate* mutable_updates(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCUpdateSubGCSessionInfo_CMsgUpdate >*
      mutable_updates();
  private:
  const ::CMsgGCUpdateSubGCSessionInfo_CMsgUpdate& _internal_updates(int index) const;
  ::CMsgGCUpdateSubGCSessionInfo_CMsgUpdate* _internal_add_updates();
  public:
  const ::CMsgGCUpdateSubGCSessionInfo_CMsgUpdate& updates(int index) const;
  ::CMsgGCUpdateSubGCSessionInfo_CMsgUpdate* add_updates();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCUpdateSubGCSessionInfo_CMsgUpdate >&
      updates() const;

  // @@protoc_insertion_point(class_scope:CMsgGCUpdateSubGCSessionInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCUpdateSubGCSessionInfo_CMsgUpdate > updates_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gcsdk_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class M0PROTO CMsgGCRequestSubGCSessionInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCRequestSubGCSessionInfo) */ {
 public:
  inline CMsgGCRequestSubGCSessionInfo() : CMsgGCRequestSubGCSessionInfo(nullptr) {}
  ~CMsgGCRequestSubGCSessionInfo() override;
  explicit constexpr CMsgGCRequestSubGCSessionInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCRequestSubGCSessionInfo(const CMsgGCRequestSubGCSessionInfo& from);
  CMsgGCRequestSubGCSessionInfo(CMsgGCRequestSubGCSessionInfo&& from) noexcept
    : CMsgGCRequestSubGCSessionInfo() {
    *this = ::std::move(from);
  }

  inline CMsgGCRequestSubGCSessionInfo& operator=(const CMsgGCRequestSubGCSessionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCRequestSubGCSessionInfo& operator=(CMsgGCRequestSubGCSessionInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCRequestSubGCSessionInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCRequestSubGCSessionInfo* internal_default_instance() {
    return reinterpret_cast<const CMsgGCRequestSubGCSessionInfo*>(
               &_CMsgGCRequestSubGCSessionInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(CMsgGCRequestSubGCSessionInfo& a, CMsgGCRequestSubGCSessionInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCRequestSubGCSessionInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCRequestSubGCSessionInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCRequestSubGCSessionInfo* New() const final {
    return new CMsgGCRequestSubGCSessionInfo();
  }

  CMsgGCRequestSubGCSessionInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCRequestSubGCSessionInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgGCRequestSubGCSessionInfo& from);
  void MergeFrom(const CMsgGCRequestSubGCSessionInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCRequestSubGCSessionInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCRequestSubGCSessionInfo";
  }
  protected:
  explicit CMsgGCRequestSubGCSessionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamidFieldNumber = 1,
  };
  // optional fixed64 steamid = 1;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  ::PROTOBUF_NAMESPACE_ID::uint64 steamid() const;
  void set_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_steamid() const;
  void _internal_set_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCRequestSubGCSessionInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 steamid_;
  friend struct ::TableStruct_gcsdk_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class M0PROTO CMsgGCRequestSubGCSessionInfoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCRequestSubGCSessionInfoResponse) */ {
 public:
  inline CMsgGCRequestSubGCSessionInfoResponse() : CMsgGCRequestSubGCSessionInfoResponse(nullptr) {}
  ~CMsgGCRequestSubGCSessionInfoResponse() override;
  explicit constexpr CMsgGCRequestSubGCSessionInfoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCRequestSubGCSessionInfoResponse(const CMsgGCRequestSubGCSessionInfoResponse& from);
  CMsgGCRequestSubGCSessionInfoResponse(CMsgGCRequestSubGCSessionInfoResponse&& from) noexcept
    : CMsgGCRequestSubGCSessionInfoResponse() {
    *this = ::std::move(from);
  }

  inline CMsgGCRequestSubGCSessionInfoResponse& operator=(const CMsgGCRequestSubGCSessionInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCRequestSubGCSessionInfoResponse& operator=(CMsgGCRequestSubGCSessionInfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCRequestSubGCSessionInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCRequestSubGCSessionInfoResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgGCRequestSubGCSessionInfoResponse*>(
               &_CMsgGCRequestSubGCSessionInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(CMsgGCRequestSubGCSessionInfoResponse& a, CMsgGCRequestSubGCSessionInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCRequestSubGCSessionInfoResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCRequestSubGCSessionInfoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCRequestSubGCSessionInfoResponse* New() const final {
    return new CMsgGCRequestSubGCSessionInfoResponse();
  }

  CMsgGCRequestSubGCSessionInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCRequestSubGCSessionInfoResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgGCRequestSubGCSessionInfoResponse& from);
  void MergeFrom(const CMsgGCRequestSubGCSessionInfoResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCRequestSubGCSessionInfoResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCRequestSubGCSessionInfoResponse";
  }
  protected:
  explicit CMsgGCRequestSubGCSessionInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 1,
    kTrustedFieldNumber = 2,
  };
  // optional fixed32 ip = 1;
  bool has_ip() const;
  private:
  bool _internal_has_ip() const;
  public:
  void clear_ip();
  ::PROTOBUF_NAMESPACE_ID::uint32 ip() const;
  void set_ip(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ip() const;
  void _internal_set_ip(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool trusted = 2;
  bool has_trusted() const;
  private:
  bool _internal_has_trusted() const;
  public:
  void clear_trusted();
  bool trusted() const;
  void set_trusted(bool value);
  private:
  bool _internal_trusted() const;
  void _internal_set_trusted(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCRequestSubGCSessionInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ip_;
  bool trusted_;
  friend struct ::TableStruct_gcsdk_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class M0PROTO CMsgGCToGCIncrementRecruitmentLevel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCToGCIncrementRecruitmentLevel) */ {
 public:
  inline CMsgGCToGCIncrementRecruitmentLevel() : CMsgGCToGCIncrementRecruitmentLevel(nullptr) {}
  ~CMsgGCToGCIncrementRecruitmentLevel() override;
  explicit constexpr CMsgGCToGCIncrementRecruitmentLevel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCToGCIncrementRecruitmentLevel(const CMsgGCToGCIncrementRecruitmentLevel& from);
  CMsgGCToGCIncrementRecruitmentLevel(CMsgGCToGCIncrementRecruitmentLevel&& from) noexcept
    : CMsgGCToGCIncrementRecruitmentLevel() {
    *this = ::std::move(from);
  }

  inline CMsgGCToGCIncrementRecruitmentLevel& operator=(const CMsgGCToGCIncrementRecruitmentLevel& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCToGCIncrementRecruitmentLevel& operator=(CMsgGCToGCIncrementRecruitmentLevel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCToGCIncrementRecruitmentLevel& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCToGCIncrementRecruitmentLevel* internal_default_instance() {
    return reinterpret_cast<const CMsgGCToGCIncrementRecruitmentLevel*>(
               &_CMsgGCToGCIncrementRecruitmentLevel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(CMsgGCToGCIncrementRecruitmentLevel& a, CMsgGCToGCIncrementRecruitmentLevel& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCToGCIncrementRecruitmentLevel* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCToGCIncrementRecruitmentLevel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCToGCIncrementRecruitmentLevel* New() const final {
    return new CMsgGCToGCIncrementRecruitmentLevel();
  }

  CMsgGCToGCIncrementRecruitmentLevel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCToGCIncrementRecruitmentLevel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgGCToGCIncrementRecruitmentLevel& from);
  void MergeFrom(const CMsgGCToGCIncrementRecruitmentLevel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCToGCIncrementRecruitmentLevel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCToGCIncrementRecruitmentLevel";
  }
  protected:
  explicit CMsgGCToGCIncrementRecruitmentLevel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamidFieldNumber = 1,
  };
  // optional fixed64 steamid = 1;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  ::PROTOBUF_NAMESPACE_ID::uint64 steamid() const;
  void set_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_steamid() const;
  void _internal_set_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCToGCIncrementRecruitmentLevel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 steamid_;
  friend struct ::TableStruct_gcsdk_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class M0PROTO CMsgSOCacheHaveVersion final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSOCacheHaveVersion) */ {
 public:
  inline CMsgSOCacheHaveVersion() : CMsgSOCacheHaveVersion(nullptr) {}
  ~CMsgSOCacheHaveVersion() override;
  explicit constexpr CMsgSOCacheHaveVersion(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSOCacheHaveVersion(const CMsgSOCacheHaveVersion& from);
  CMsgSOCacheHaveVersion(CMsgSOCacheHaveVersion&& from) noexcept
    : CMsgSOCacheHaveVersion() {
    *this = ::std::move(from);
  }

  inline CMsgSOCacheHaveVersion& operator=(const CMsgSOCacheHaveVersion& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSOCacheHaveVersion& operator=(CMsgSOCacheHaveVersion&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSOCacheHaveVersion& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSOCacheHaveVersion* internal_default_instance() {
    return reinterpret_cast<const CMsgSOCacheHaveVersion*>(
               &_CMsgSOCacheHaveVersion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(CMsgSOCacheHaveVersion& a, CMsgSOCacheHaveVersion& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSOCacheHaveVersion* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSOCacheHaveVersion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgSOCacheHaveVersion* New() const final {
    return new CMsgSOCacheHaveVersion();
  }

  CMsgSOCacheHaveVersion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgSOCacheHaveVersion>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgSOCacheHaveVersion& from);
  void MergeFrom(const CMsgSOCacheHaveVersion& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSOCacheHaveVersion* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSOCacheHaveVersion";
  }
  protected:
  explicit CMsgSOCacheHaveVersion(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSoidFieldNumber = 1,
    kVersionFieldNumber = 2,
    kServiceIdFieldNumber = 3,
  };
  // optional .CMsgSOIDOwner soid = 1;
  bool has_soid() const;
  private:
  bool _internal_has_soid() const;
  public:
  void clear_soid();
  const ::CMsgSOIDOwner& soid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgSOIDOwner* release_soid();
  ::CMsgSOIDOwner* mutable_soid();
  void set_allocated_soid(::CMsgSOIDOwner* soid);
  private:
  const ::CMsgSOIDOwner& _internal_soid() const;
  ::CMsgSOIDOwner* _internal_mutable_soid();
  public:
  void unsafe_arena_set_allocated_soid(
      ::CMsgSOIDOwner* soid);
  ::CMsgSOIDOwner* unsafe_arena_release_soid();

  // optional fixed64 version = 2;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint64 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 service_id = 3;
  bool has_service_id() const;
  private:
  bool _internal_has_service_id() const;
  public:
  void clear_service_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 service_id() const;
  void set_service_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_service_id() const;
  void _internal_set_service_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSOCacheHaveVersion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CMsgSOIDOwner* soid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 version_;
  ::PROTOBUF_NAMESPACE_ID::uint32 service_id_;
  friend struct ::TableStruct_gcsdk_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class M0PROTO CMsgConnectionStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgConnectionStatus) */ {
 public:
  inline CMsgConnectionStatus() : CMsgConnectionStatus(nullptr) {}
  ~CMsgConnectionStatus() override;
  explicit constexpr CMsgConnectionStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgConnectionStatus(const CMsgConnectionStatus& from);
  CMsgConnectionStatus(CMsgConnectionStatus&& from) noexcept
    : CMsgConnectionStatus() {
    *this = ::std::move(from);
  }

  inline CMsgConnectionStatus& operator=(const CMsgConnectionStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgConnectionStatus& operator=(CMsgConnectionStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgConnectionStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgConnectionStatus* internal_default_instance() {
    return reinterpret_cast<const CMsgConnectionStatus*>(
               &_CMsgConnectionStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(CMsgConnectionStatus& a, CMsgConnectionStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgConnectionStatus* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgConnectionStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgConnectionStatus* New() const final {
    return new CMsgConnectionStatus();
  }

  CMsgConnectionStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgConnectionStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgConnectionStatus& from);
  void MergeFrom(const CMsgConnectionStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgConnectionStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgConnectionStatus";
  }
  protected:
  explicit CMsgConnectionStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kClientSessionNeedFieldNumber = 2,
    kQueuePositionFieldNumber = 3,
    kQueueSizeFieldNumber = 4,
    kWaitSecondsFieldNumber = 5,
    kEstimatedWaitSecondsRemainingFieldNumber = 6,
  };
  // optional .GCConnectionStatus status = 1 [default = GCConnectionStatus_HAVE_SESSION];
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::GCConnectionStatus status() const;
  void set_status(::GCConnectionStatus value);
  private:
  ::GCConnectionStatus _internal_status() const;
  void _internal_set_status(::GCConnectionStatus value);
  public:

  // optional uint32 client_session_need = 2;
  bool has_client_session_need() const;
  private:
  bool _internal_has_client_session_need() const;
  public:
  void clear_client_session_need();
  ::PROTOBUF_NAMESPACE_ID::uint32 client_session_need() const;
  void set_client_session_need(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_client_session_need() const;
  void _internal_set_client_session_need(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 queue_position = 3;
  bool has_queue_position() const;
  private:
  bool _internal_has_queue_position() const;
  public:
  void clear_queue_position();
  ::PROTOBUF_NAMESPACE_ID::int32 queue_position() const;
  void set_queue_position(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_queue_position() const;
  void _internal_set_queue_position(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 queue_size = 4;
  bool has_queue_size() const;
  private:
  bool _internal_has_queue_size() const;
  public:
  void clear_queue_size();
  ::PROTOBUF_NAMESPACE_ID::int32 queue_size() const;
  void set_queue_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_queue_size() const;
  void _internal_set_queue_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 wait_seconds = 5;
  bool has_wait_seconds() const;
  private:
  bool _internal_has_wait_seconds() const;
  public:
  void clear_wait_seconds();
  ::PROTOBUF_NAMESPACE_ID::int32 wait_seconds() const;
  void set_wait_seconds(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_wait_seconds() const;
  void _internal_set_wait_seconds(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 estimated_wait_seconds_remaining = 6;
  bool has_estimated_wait_seconds_remaining() const;
  private:
  bool _internal_has_estimated_wait_seconds_remaining() const;
  public:
  void clear_estimated_wait_seconds_remaining();
  ::PROTOBUF_NAMESPACE_ID::int32 estimated_wait_seconds_remaining() const;
  void set_estimated_wait_seconds_remaining(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_estimated_wait_seconds_remaining() const;
  void _internal_set_estimated_wait_seconds_remaining(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgConnectionStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int status_;
  ::PROTOBUF_NAMESPACE_ID::uint32 client_session_need_;
  ::PROTOBUF_NAMESPACE_ID::int32 queue_position_;
  ::PROTOBUF_NAMESPACE_ID::int32 queue_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 wait_seconds_;
  ::PROTOBUF_NAMESPACE_ID::int32 estimated_wait_seconds_remaining_;
  friend struct ::TableStruct_gcsdk_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class M0PROTO CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions) */ {
 public:
  inline CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions() : CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions(nullptr) {}
  ~CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions() override;
  explicit constexpr CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions(const CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions& from);
  CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions(CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions&& from) noexcept
    : CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions() {
    *this = ::std::move(from);
  }

  inline CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions& operator=(const CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions& operator=(CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions* internal_default_instance() {
    return reinterpret_cast<const CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions*>(
               &_CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions& a, CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions* New() const final {
    return new CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions();
  }

  CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions& from);
  void MergeFrom(const CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions";
  }
  protected:
  explicit CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 2,
    kServiceIdFieldNumber = 1,
  };
  // optional uint64 version = 2;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint64 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 service_id = 1;
  bool has_service_id() const;
  private:
  bool _internal_has_service_id() const;
  public:
  void clear_service_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 service_id() const;
  void set_service_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_service_id() const;
  void _internal_set_service_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 version_;
  ::PROTOBUF_NAMESPACE_ID::uint32 service_id_;
  friend struct ::TableStruct_gcsdk_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class M0PROTO CMsgGCToGCSOCacheSubscribe final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCToGCSOCacheSubscribe) */ {
 public:
  inline CMsgGCToGCSOCacheSubscribe() : CMsgGCToGCSOCacheSubscribe(nullptr) {}
  ~CMsgGCToGCSOCacheSubscribe() override;
  explicit constexpr CMsgGCToGCSOCacheSubscribe(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCToGCSOCacheSubscribe(const CMsgGCToGCSOCacheSubscribe& from);
  CMsgGCToGCSOCacheSubscribe(CMsgGCToGCSOCacheSubscribe&& from) noexcept
    : CMsgGCToGCSOCacheSubscribe() {
    *this = ::std::move(from);
  }

  inline CMsgGCToGCSOCacheSubscribe& operator=(const CMsgGCToGCSOCacheSubscribe& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCToGCSOCacheSubscribe& operator=(CMsgGCToGCSOCacheSubscribe&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCToGCSOCacheSubscribe& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCToGCSOCacheSubscribe* internal_default_instance() {
    return reinterpret_cast<const CMsgGCToGCSOCacheSubscribe*>(
               &_CMsgGCToGCSOCacheSubscribe_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(CMsgGCToGCSOCacheSubscribe& a, CMsgGCToGCSOCacheSubscribe& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCToGCSOCacheSubscribe* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCToGCSOCacheSubscribe* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCToGCSOCacheSubscribe* New() const final {
    return new CMsgGCToGCSOCacheSubscribe();
  }

  CMsgGCToGCSOCacheSubscribe* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCToGCSOCacheSubscribe>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgGCToGCSOCacheSubscribe& from);
  void MergeFrom(const CMsgGCToGCSOCacheSubscribe& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCToGCSOCacheSubscribe* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCToGCSOCacheSubscribe";
  }
  protected:
  explicit CMsgGCToGCSOCacheSubscribe(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions CMsgHaveVersions;

  // accessors -------------------------------------------------------

  enum : int {
    kHaveVersionsFieldNumber = 4,
    kSubscriberFieldNumber = 1,
    kSubscribeToFieldNumber = 2,
    kSyncVersionFieldNumber = 3,
  };
  // repeated .CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions have_versions = 4;
  int have_versions_size() const;
  private:
  int _internal_have_versions_size() const;
  public:
  void clear_have_versions();
  ::CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions* mutable_have_versions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions >*
      mutable_have_versions();
  private:
  const ::CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions& _internal_have_versions(int index) const;
  ::CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions* _internal_add_have_versions();
  public:
  const ::CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions& have_versions(int index) const;
  ::CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions* add_have_versions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions >&
      have_versions() const;

  // optional fixed64 subscriber = 1;
  bool has_subscriber() const;
  private:
  bool _internal_has_subscriber() const;
  public:
  void clear_subscriber();
  ::PROTOBUF_NAMESPACE_ID::uint64 subscriber() const;
  void set_subscriber(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_subscriber() const;
  void _internal_set_subscriber(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional fixed64 subscribe_to = 2;
  bool has_subscribe_to() const;
  private:
  bool _internal_has_subscribe_to() const;
  public:
  void clear_subscribe_to();
  ::PROTOBUF_NAMESPACE_ID::uint64 subscribe_to() const;
  void set_subscribe_to(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_subscribe_to() const;
  void _internal_set_subscribe_to(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional fixed64 sync_version = 3;
  bool has_sync_version() const;
  private:
  bool _internal_has_sync_version() const;
  public:
  void clear_sync_version();
  ::PROTOBUF_NAMESPACE_ID::uint64 sync_version() const;
  void set_sync_version(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sync_version() const;
  void _internal_set_sync_version(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCToGCSOCacheSubscribe)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions > have_versions_;
  ::PROTOBUF_NAMESPACE_ID::uint64 subscriber_;
  ::PROTOBUF_NAMESPACE_ID::uint64 subscribe_to_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sync_version_;
  friend struct ::TableStruct_gcsdk_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class M0PROTO CMsgGCToGCSOCacheUnsubscribe final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCToGCSOCacheUnsubscribe) */ {
 public:
  inline CMsgGCToGCSOCacheUnsubscribe() : CMsgGCToGCSOCacheUnsubscribe(nullptr) {}
  ~CMsgGCToGCSOCacheUnsubscribe() override;
  explicit constexpr CMsgGCToGCSOCacheUnsubscribe(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCToGCSOCacheUnsubscribe(const CMsgGCToGCSOCacheUnsubscribe& from);
  CMsgGCToGCSOCacheUnsubscribe(CMsgGCToGCSOCacheUnsubscribe&& from) noexcept
    : CMsgGCToGCSOCacheUnsubscribe() {
    *this = ::std::move(from);
  }

  inline CMsgGCToGCSOCacheUnsubscribe& operator=(const CMsgGCToGCSOCacheUnsubscribe& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCToGCSOCacheUnsubscribe& operator=(CMsgGCToGCSOCacheUnsubscribe&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCToGCSOCacheUnsubscribe& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCToGCSOCacheUnsubscribe* internal_default_instance() {
    return reinterpret_cast<const CMsgGCToGCSOCacheUnsubscribe*>(
               &_CMsgGCToGCSOCacheUnsubscribe_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(CMsgGCToGCSOCacheUnsubscribe& a, CMsgGCToGCSOCacheUnsubscribe& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCToGCSOCacheUnsubscribe* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCToGCSOCacheUnsubscribe* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCToGCSOCacheUnsubscribe* New() const final {
    return new CMsgGCToGCSOCacheUnsubscribe();
  }

  CMsgGCToGCSOCacheUnsubscribe* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCToGCSOCacheUnsubscribe>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgGCToGCSOCacheUnsubscribe& from);
  void MergeFrom(const CMsgGCToGCSOCacheUnsubscribe& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCToGCSOCacheUnsubscribe* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCToGCSOCacheUnsubscribe";
  }
  protected:
  explicit CMsgGCToGCSOCacheUnsubscribe(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubscriberFieldNumber = 1,
    kUnsubscribeFromFieldNumber = 2,
  };
  // optional fixed64 subscriber = 1;
  bool has_subscriber() const;
  private:
  bool _internal_has_subscriber() const;
  public:
  void clear_subscriber();
  ::PROTOBUF_NAMESPACE_ID::uint64 subscriber() const;
  void set_subscriber(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_subscriber() const;
  void _internal_set_subscriber(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional fixed64 unsubscribe_from = 2;
  bool has_unsubscribe_from() const;
  private:
  bool _internal_has_unsubscribe_from() const;
  public:
  void clear_unsubscribe_from();
  ::PROTOBUF_NAMESPACE_ID::uint64 unsubscribe_from() const;
  void set_unsubscribe_from(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_unsubscribe_from() const;
  void _internal_set_unsubscribe_from(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCToGCSOCacheUnsubscribe)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 subscriber_;
  ::PROTOBUF_NAMESPACE_ID::uint64 unsubscribe_from_;
  friend struct ::TableStruct_gcsdk_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class M0PROTO CMsgGCClientPing final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCClientPing) */ {
 public:
  inline CMsgGCClientPing() : CMsgGCClientPing(nullptr) {}
  ~CMsgGCClientPing() override;
  explicit constexpr CMsgGCClientPing(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCClientPing(const CMsgGCClientPing& from);
  CMsgGCClientPing(CMsgGCClientPing&& from) noexcept
    : CMsgGCClientPing() {
    *this = ::std::move(from);
  }

  inline CMsgGCClientPing& operator=(const CMsgGCClientPing& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCClientPing& operator=(CMsgGCClientPing&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCClientPing& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCClientPing* internal_default_instance() {
    return reinterpret_cast<const CMsgGCClientPing*>(
               &_CMsgGCClientPing_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(CMsgGCClientPing& a, CMsgGCClientPing& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCClientPing* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCClientPing* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCClientPing* New() const final {
    return new CMsgGCClientPing();
  }

  CMsgGCClientPing* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCClientPing>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgGCClientPing& from);
  void MergeFrom(const CMsgGCClientPing& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCClientPing* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCClientPing";
  }
  protected:
  explicit CMsgGCClientPing(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgGCClientPing)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gcsdk_5fgcmessages_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CMsgSOIDOwner

// optional uint32 type = 1;
inline bool CMsgSOIDOwner::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSOIDOwner::has_type() const {
  return _internal_has_type();
}
inline void CMsgSOIDOwner::clear_type() {
  type_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSOIDOwner::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSOIDOwner::type() const {
  // @@protoc_insertion_point(field_get:CMsgSOIDOwner.type)
  return _internal_type();
}
inline void CMsgSOIDOwner::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  type_ = value;
}
inline void CMsgSOIDOwner::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:CMsgSOIDOwner.type)
}

// optional uint64 id = 2;
inline bool CMsgSOIDOwner::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSOIDOwner::has_id() const {
  return _internal_has_id();
}
inline void CMsgSOIDOwner::clear_id() {
  id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgSOIDOwner::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgSOIDOwner::id() const {
  // @@protoc_insertion_point(field_get:CMsgSOIDOwner.id)
  return _internal_id();
}
inline void CMsgSOIDOwner::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
}
inline void CMsgSOIDOwner::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:CMsgSOIDOwner.id)
}

// -------------------------------------------------------------------

// CMsgSOSingleObject

// optional fixed64 owner = 1;
inline bool CMsgSOSingleObject::_internal_has_owner() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgSOSingleObject::has_owner() const {
  return _internal_has_owner();
}
inline void CMsgSOSingleObject::clear_owner() {
  owner_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgSOSingleObject::_internal_owner() const {
  return owner_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgSOSingleObject::owner() const {
  // @@protoc_insertion_point(field_get:CMsgSOSingleObject.owner)
  return _internal_owner();
}
inline void CMsgSOSingleObject::_internal_set_owner(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  owner_ = value;
}
inline void CMsgSOSingleObject::set_owner(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_owner(value);
  // @@protoc_insertion_point(field_set:CMsgSOSingleObject.owner)
}

// optional int32 type_id = 2;
inline bool CMsgSOSingleObject::_internal_has_type_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgSOSingleObject::has_type_id() const {
  return _internal_has_type_id();
}
inline void CMsgSOSingleObject::clear_type_id() {
  type_id_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgSOSingleObject::_internal_type_id() const {
  return type_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgSOSingleObject::type_id() const {
  // @@protoc_insertion_point(field_get:CMsgSOSingleObject.type_id)
  return _internal_type_id();
}
inline void CMsgSOSingleObject::_internal_set_type_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  type_id_ = value;
}
inline void CMsgSOSingleObject::set_type_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type_id(value);
  // @@protoc_insertion_point(field_set:CMsgSOSingleObject.type_id)
}

// optional bytes object_data = 3;
inline bool CMsgSOSingleObject::_internal_has_object_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSOSingleObject::has_object_data() const {
  return _internal_has_object_data();
}
inline void CMsgSOSingleObject::clear_object_data() {
  object_data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgSOSingleObject::object_data() const {
  // @@protoc_insertion_point(field_get:CMsgSOSingleObject.object_data)
  return _internal_object_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgSOSingleObject::set_object_data(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 object_data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgSOSingleObject.object_data)
}
inline std::string* CMsgSOSingleObject::mutable_object_data() {
  // @@protoc_insertion_point(field_mutable:CMsgSOSingleObject.object_data)
  return _internal_mutable_object_data();
}
inline const std::string& CMsgSOSingleObject::_internal_object_data() const {
  return object_data_.Get();
}
inline void CMsgSOSingleObject::_internal_set_object_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  object_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgSOSingleObject::_internal_mutable_object_data() {
  _has_bits_[0] |= 0x00000001u;
  return object_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgSOSingleObject::release_object_data() {
  // @@protoc_insertion_point(field_release:CMsgSOSingleObject.object_data)
  if (!_internal_has_object_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return object_data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CMsgSOSingleObject::set_allocated_object_data(std::string* object_data) {
  if (object_data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  object_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), object_data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CMsgSOSingleObject.object_data)
}

// optional fixed64 version = 4;
inline bool CMsgSOSingleObject::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgSOSingleObject::has_version() const {
  return _internal_has_version();
}
inline void CMsgSOSingleObject::clear_version() {
  version_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgSOSingleObject::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgSOSingleObject::version() const {
  // @@protoc_insertion_point(field_get:CMsgSOSingleObject.version)
  return _internal_version();
}
inline void CMsgSOSingleObject::_internal_set_version(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  version_ = value;
}
inline void CMsgSOSingleObject::set_version(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:CMsgSOSingleObject.version)
}

// optional .CMsgSOIDOwner owner_soid = 5;
inline bool CMsgSOSingleObject::_internal_has_owner_soid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || owner_soid_ != nullptr);
  return value;
}
inline bool CMsgSOSingleObject::has_owner_soid() const {
  return _internal_has_owner_soid();
}
inline void CMsgSOSingleObject::clear_owner_soid() {
  if (owner_soid_ != nullptr) owner_soid_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::CMsgSOIDOwner& CMsgSOSingleObject::_internal_owner_soid() const {
  const ::CMsgSOIDOwner* p = owner_soid_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgSOIDOwner&>(
      ::_CMsgSOIDOwner_default_instance_);
}
inline const ::CMsgSOIDOwner& CMsgSOSingleObject::owner_soid() const {
  // @@protoc_insertion_point(field_get:CMsgSOSingleObject.owner_soid)
  return _internal_owner_soid();
}
inline void CMsgSOSingleObject::unsafe_arena_set_allocated_owner_soid(
    ::CMsgSOIDOwner* owner_soid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(owner_soid_);
  }
  owner_soid_ = owner_soid;
  if (owner_soid) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgSOSingleObject.owner_soid)
}
inline ::CMsgSOIDOwner* CMsgSOSingleObject::release_owner_soid() {
  _has_bits_[0] &= ~0x00000002u;
  ::CMsgSOIDOwner* temp = owner_soid_;
  owner_soid_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgSOIDOwner* CMsgSOSingleObject::unsafe_arena_release_owner_soid() {
  // @@protoc_insertion_point(field_release:CMsgSOSingleObject.owner_soid)
  _has_bits_[0] &= ~0x00000002u;
  ::CMsgSOIDOwner* temp = owner_soid_;
  owner_soid_ = nullptr;
  return temp;
}
inline ::CMsgSOIDOwner* CMsgSOSingleObject::_internal_mutable_owner_soid() {
  _has_bits_[0] |= 0x00000002u;
  if (owner_soid_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgSOIDOwner>(GetArenaForAllocation());
    owner_soid_ = p;
  }
  return owner_soid_;
}
inline ::CMsgSOIDOwner* CMsgSOSingleObject::mutable_owner_soid() {
  // @@protoc_insertion_point(field_mutable:CMsgSOSingleObject.owner_soid)
  return _internal_mutable_owner_soid();
}
inline void CMsgSOSingleObject::set_allocated_owner_soid(::CMsgSOIDOwner* owner_soid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete owner_soid_;
  }
  if (owner_soid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgSOIDOwner>::GetOwningArena(owner_soid);
    if (message_arena != submessage_arena) {
      owner_soid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, owner_soid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  owner_soid_ = owner_soid;
  // @@protoc_insertion_point(field_set_allocated:CMsgSOSingleObject.owner_soid)
}

// optional uint32 service_id = 6;
inline bool CMsgSOSingleObject::_internal_has_service_id() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgSOSingleObject::has_service_id() const {
  return _internal_has_service_id();
}
inline void CMsgSOSingleObject::clear_service_id() {
  service_id_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSOSingleObject::_internal_service_id() const {
  return service_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSOSingleObject::service_id() const {
  // @@protoc_insertion_point(field_get:CMsgSOSingleObject.service_id)
  return _internal_service_id();
}
inline void CMsgSOSingleObject::_internal_set_service_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  service_id_ = value;
}
inline void CMsgSOSingleObject::set_service_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_service_id(value);
  // @@protoc_insertion_point(field_set:CMsgSOSingleObject.service_id)
}

// -------------------------------------------------------------------

// CMsgSOMultipleObjects_SingleObject

// optional int32 type_id = 1;
inline bool CMsgSOMultipleObjects_SingleObject::_internal_has_type_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSOMultipleObjects_SingleObject::has_type_id() const {
  return _internal_has_type_id();
}
inline void CMsgSOMultipleObjects_SingleObject::clear_type_id() {
  type_id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgSOMultipleObjects_SingleObject::_internal_type_id() const {
  return type_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgSOMultipleObjects_SingleObject::type_id() const {
  // @@protoc_insertion_point(field_get:CMsgSOMultipleObjects.SingleObject.type_id)
  return _internal_type_id();
}
inline void CMsgSOMultipleObjects_SingleObject::_internal_set_type_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  type_id_ = value;
}
inline void CMsgSOMultipleObjects_SingleObject::set_type_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type_id(value);
  // @@protoc_insertion_point(field_set:CMsgSOMultipleObjects.SingleObject.type_id)
}

// optional bytes object_data = 2;
inline bool CMsgSOMultipleObjects_SingleObject::_internal_has_object_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSOMultipleObjects_SingleObject::has_object_data() const {
  return _internal_has_object_data();
}
inline void CMsgSOMultipleObjects_SingleObject::clear_object_data() {
  object_data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgSOMultipleObjects_SingleObject::object_data() const {
  // @@protoc_insertion_point(field_get:CMsgSOMultipleObjects.SingleObject.object_data)
  return _internal_object_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgSOMultipleObjects_SingleObject::set_object_data(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 object_data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgSOMultipleObjects.SingleObject.object_data)
}
inline std::string* CMsgSOMultipleObjects_SingleObject::mutable_object_data() {
  // @@protoc_insertion_point(field_mutable:CMsgSOMultipleObjects.SingleObject.object_data)
  return _internal_mutable_object_data();
}
inline const std::string& CMsgSOMultipleObjects_SingleObject::_internal_object_data() const {
  return object_data_.Get();
}
inline void CMsgSOMultipleObjects_SingleObject::_internal_set_object_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  object_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgSOMultipleObjects_SingleObject::_internal_mutable_object_data() {
  _has_bits_[0] |= 0x00000001u;
  return object_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgSOMultipleObjects_SingleObject::release_object_data() {
  // @@protoc_insertion_point(field_release:CMsgSOMultipleObjects.SingleObject.object_data)
  if (!_internal_has_object_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return object_data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CMsgSOMultipleObjects_SingleObject::set_allocated_object_data(std::string* object_data) {
  if (object_data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  object_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), object_data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CMsgSOMultipleObjects.SingleObject.object_data)
}

// -------------------------------------------------------------------

// CMsgSOMultipleObjects

// optional fixed64 owner = 1;
inline bool CMsgSOMultipleObjects::_internal_has_owner() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSOMultipleObjects::has_owner() const {
  return _internal_has_owner();
}
inline void CMsgSOMultipleObjects::clear_owner() {
  owner_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgSOMultipleObjects::_internal_owner() const {
  return owner_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgSOMultipleObjects::owner() const {
  // @@protoc_insertion_point(field_get:CMsgSOMultipleObjects.owner)
  return _internal_owner();
}
inline void CMsgSOMultipleObjects::_internal_set_owner(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  owner_ = value;
}
inline void CMsgSOMultipleObjects::set_owner(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_owner(value);
  // @@protoc_insertion_point(field_set:CMsgSOMultipleObjects.owner)
}

// repeated .CMsgSOMultipleObjects.SingleObject objects = 2;
inline int CMsgSOMultipleObjects::_internal_objects_size() const {
  return objects_.size();
}
inline int CMsgSOMultipleObjects::objects_size() const {
  return _internal_objects_size();
}
inline void CMsgSOMultipleObjects::clear_objects() {
  objects_.Clear();
}
inline ::CMsgSOMultipleObjects_SingleObject* CMsgSOMultipleObjects::mutable_objects(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgSOMultipleObjects.objects)
  return objects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSOMultipleObjects_SingleObject >*
CMsgSOMultipleObjects::mutable_objects() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSOMultipleObjects.objects)
  return &objects_;
}
inline const ::CMsgSOMultipleObjects_SingleObject& CMsgSOMultipleObjects::_internal_objects(int index) const {
  return objects_.Get(index);
}
inline const ::CMsgSOMultipleObjects_SingleObject& CMsgSOMultipleObjects::objects(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSOMultipleObjects.objects)
  return _internal_objects(index);
}
inline ::CMsgSOMultipleObjects_SingleObject* CMsgSOMultipleObjects::_internal_add_objects() {
  return objects_.Add();
}
inline ::CMsgSOMultipleObjects_SingleObject* CMsgSOMultipleObjects::add_objects() {
  // @@protoc_insertion_point(field_add:CMsgSOMultipleObjects.objects)
  return _internal_add_objects();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSOMultipleObjects_SingleObject >&
CMsgSOMultipleObjects::objects() const {
  // @@protoc_insertion_point(field_list:CMsgSOMultipleObjects.objects)
  return objects_;
}

// optional fixed64 version = 3;
inline bool CMsgSOMultipleObjects::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgSOMultipleObjects::has_version() const {
  return _internal_has_version();
}
inline void CMsgSOMultipleObjects::clear_version() {
  version_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgSOMultipleObjects::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgSOMultipleObjects::version() const {
  // @@protoc_insertion_point(field_get:CMsgSOMultipleObjects.version)
  return _internal_version();
}
inline void CMsgSOMultipleObjects::_internal_set_version(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  version_ = value;
}
inline void CMsgSOMultipleObjects::set_version(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:CMsgSOMultipleObjects.version)
}

// optional .CMsgSOIDOwner owner_soid = 6;
inline bool CMsgSOMultipleObjects::_internal_has_owner_soid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || owner_soid_ != nullptr);
  return value;
}
inline bool CMsgSOMultipleObjects::has_owner_soid() const {
  return _internal_has_owner_soid();
}
inline void CMsgSOMultipleObjects::clear_owner_soid() {
  if (owner_soid_ != nullptr) owner_soid_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgSOIDOwner& CMsgSOMultipleObjects::_internal_owner_soid() const {
  const ::CMsgSOIDOwner* p = owner_soid_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgSOIDOwner&>(
      ::_CMsgSOIDOwner_default_instance_);
}
inline const ::CMsgSOIDOwner& CMsgSOMultipleObjects::owner_soid() const {
  // @@protoc_insertion_point(field_get:CMsgSOMultipleObjects.owner_soid)
  return _internal_owner_soid();
}
inline void CMsgSOMultipleObjects::unsafe_arena_set_allocated_owner_soid(
    ::CMsgSOIDOwner* owner_soid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(owner_soid_);
  }
  owner_soid_ = owner_soid;
  if (owner_soid) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgSOMultipleObjects.owner_soid)
}
inline ::CMsgSOIDOwner* CMsgSOMultipleObjects::release_owner_soid() {
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgSOIDOwner* temp = owner_soid_;
  owner_soid_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgSOIDOwner* CMsgSOMultipleObjects::unsafe_arena_release_owner_soid() {
  // @@protoc_insertion_point(field_release:CMsgSOMultipleObjects.owner_soid)
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgSOIDOwner* temp = owner_soid_;
  owner_soid_ = nullptr;
  return temp;
}
inline ::CMsgSOIDOwner* CMsgSOMultipleObjects::_internal_mutable_owner_soid() {
  _has_bits_[0] |= 0x00000001u;
  if (owner_soid_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgSOIDOwner>(GetArenaForAllocation());
    owner_soid_ = p;
  }
  return owner_soid_;
}
inline ::CMsgSOIDOwner* CMsgSOMultipleObjects::mutable_owner_soid() {
  // @@protoc_insertion_point(field_mutable:CMsgSOMultipleObjects.owner_soid)
  return _internal_mutable_owner_soid();
}
inline void CMsgSOMultipleObjects::set_allocated_owner_soid(::CMsgSOIDOwner* owner_soid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete owner_soid_;
  }
  if (owner_soid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgSOIDOwner>::GetOwningArena(owner_soid);
    if (message_arena != submessage_arena) {
      owner_soid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, owner_soid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  owner_soid_ = owner_soid;
  // @@protoc_insertion_point(field_set_allocated:CMsgSOMultipleObjects.owner_soid)
}

// optional uint32 service_id = 7;
inline bool CMsgSOMultipleObjects::_internal_has_service_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgSOMultipleObjects::has_service_id() const {
  return _internal_has_service_id();
}
inline void CMsgSOMultipleObjects::clear_service_id() {
  service_id_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSOMultipleObjects::_internal_service_id() const {
  return service_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSOMultipleObjects::service_id() const {
  // @@protoc_insertion_point(field_get:CMsgSOMultipleObjects.service_id)
  return _internal_service_id();
}
inline void CMsgSOMultipleObjects::_internal_set_service_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  service_id_ = value;
}
inline void CMsgSOMultipleObjects::set_service_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_service_id(value);
  // @@protoc_insertion_point(field_set:CMsgSOMultipleObjects.service_id)
}

// -------------------------------------------------------------------

// CMsgSOCacheSubscribed_SubscribedType

// optional int32 type_id = 1;
inline bool CMsgSOCacheSubscribed_SubscribedType::_internal_has_type_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSOCacheSubscribed_SubscribedType::has_type_id() const {
  return _internal_has_type_id();
}
inline void CMsgSOCacheSubscribed_SubscribedType::clear_type_id() {
  type_id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgSOCacheSubscribed_SubscribedType::_internal_type_id() const {
  return type_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgSOCacheSubscribed_SubscribedType::type_id() const {
  // @@protoc_insertion_point(field_get:CMsgSOCacheSubscribed.SubscribedType.type_id)
  return _internal_type_id();
}
inline void CMsgSOCacheSubscribed_SubscribedType::_internal_set_type_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  type_id_ = value;
}
inline void CMsgSOCacheSubscribed_SubscribedType::set_type_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type_id(value);
  // @@protoc_insertion_point(field_set:CMsgSOCacheSubscribed.SubscribedType.type_id)
}

// repeated bytes object_data = 2;
inline int CMsgSOCacheSubscribed_SubscribedType::_internal_object_data_size() const {
  return object_data_.size();
}
inline int CMsgSOCacheSubscribed_SubscribedType::object_data_size() const {
  return _internal_object_data_size();
}
inline void CMsgSOCacheSubscribed_SubscribedType::clear_object_data() {
  object_data_.Clear();
}
inline std::string* CMsgSOCacheSubscribed_SubscribedType::add_object_data() {
  // @@protoc_insertion_point(field_add_mutable:CMsgSOCacheSubscribed.SubscribedType.object_data)
  return _internal_add_object_data();
}
inline const std::string& CMsgSOCacheSubscribed_SubscribedType::_internal_object_data(int index) const {
  return object_data_.Get(index);
}
inline const std::string& CMsgSOCacheSubscribed_SubscribedType::object_data(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSOCacheSubscribed.SubscribedType.object_data)
  return _internal_object_data(index);
}
inline std::string* CMsgSOCacheSubscribed_SubscribedType::mutable_object_data(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgSOCacheSubscribed.SubscribedType.object_data)
  return object_data_.Mutable(index);
}
inline void CMsgSOCacheSubscribed_SubscribedType::set_object_data(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:CMsgSOCacheSubscribed.SubscribedType.object_data)
  object_data_.Mutable(index)->assign(value);
}
inline void CMsgSOCacheSubscribed_SubscribedType::set_object_data(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:CMsgSOCacheSubscribed.SubscribedType.object_data)
  object_data_.Mutable(index)->assign(std::move(value));
}
inline void CMsgSOCacheSubscribed_SubscribedType::set_object_data(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  object_data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgSOCacheSubscribed.SubscribedType.object_data)
}
inline void CMsgSOCacheSubscribed_SubscribedType::set_object_data(int index, const void* value, size_t size) {
  object_data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgSOCacheSubscribed.SubscribedType.object_data)
}
inline std::string* CMsgSOCacheSubscribed_SubscribedType::_internal_add_object_data() {
  return object_data_.Add();
}
inline void CMsgSOCacheSubscribed_SubscribedType::add_object_data(const std::string& value) {
  object_data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CMsgSOCacheSubscribed.SubscribedType.object_data)
}
inline void CMsgSOCacheSubscribed_SubscribedType::add_object_data(std::string&& value) {
  object_data_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CMsgSOCacheSubscribed.SubscribedType.object_data)
}
inline void CMsgSOCacheSubscribed_SubscribedType::add_object_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  object_data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CMsgSOCacheSubscribed.SubscribedType.object_data)
}
inline void CMsgSOCacheSubscribed_SubscribedType::add_object_data(const void* value, size_t size) {
  object_data_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CMsgSOCacheSubscribed.SubscribedType.object_data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CMsgSOCacheSubscribed_SubscribedType::object_data() const {
  // @@protoc_insertion_point(field_list:CMsgSOCacheSubscribed.SubscribedType.object_data)
  return object_data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CMsgSOCacheSubscribed_SubscribedType::mutable_object_data() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSOCacheSubscribed.SubscribedType.object_data)
  return &object_data_;
}

// -------------------------------------------------------------------

// CMsgSOCacheSubscribed

// optional fixed64 owner = 1;
inline bool CMsgSOCacheSubscribed::_internal_has_owner() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSOCacheSubscribed::has_owner() const {
  return _internal_has_owner();
}
inline void CMsgSOCacheSubscribed::clear_owner() {
  owner_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgSOCacheSubscribed::_internal_owner() const {
  return owner_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgSOCacheSubscribed::owner() const {
  // @@protoc_insertion_point(field_get:CMsgSOCacheSubscribed.owner)
  return _internal_owner();
}
inline void CMsgSOCacheSubscribed::_internal_set_owner(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  owner_ = value;
}
inline void CMsgSOCacheSubscribed::set_owner(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_owner(value);
  // @@protoc_insertion_point(field_set:CMsgSOCacheSubscribed.owner)
}

// repeated .CMsgSOCacheSubscribed.SubscribedType objects = 2;
inline int CMsgSOCacheSubscribed::_internal_objects_size() const {
  return objects_.size();
}
inline int CMsgSOCacheSubscribed::objects_size() const {
  return _internal_objects_size();
}
inline void CMsgSOCacheSubscribed::clear_objects() {
  objects_.Clear();
}
inline ::CMsgSOCacheSubscribed_SubscribedType* CMsgSOCacheSubscribed::mutable_objects(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgSOCacheSubscribed.objects)
  return objects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSOCacheSubscribed_SubscribedType >*
CMsgSOCacheSubscribed::mutable_objects() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSOCacheSubscribed.objects)
  return &objects_;
}
inline const ::CMsgSOCacheSubscribed_SubscribedType& CMsgSOCacheSubscribed::_internal_objects(int index) const {
  return objects_.Get(index);
}
inline const ::CMsgSOCacheSubscribed_SubscribedType& CMsgSOCacheSubscribed::objects(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSOCacheSubscribed.objects)
  return _internal_objects(index);
}
inline ::CMsgSOCacheSubscribed_SubscribedType* CMsgSOCacheSubscribed::_internal_add_objects() {
  return objects_.Add();
}
inline ::CMsgSOCacheSubscribed_SubscribedType* CMsgSOCacheSubscribed::add_objects() {
  // @@protoc_insertion_point(field_add:CMsgSOCacheSubscribed.objects)
  return _internal_add_objects();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSOCacheSubscribed_SubscribedType >&
CMsgSOCacheSubscribed::objects() const {
  // @@protoc_insertion_point(field_list:CMsgSOCacheSubscribed.objects)
  return objects_;
}

// optional fixed64 version = 3;
inline bool CMsgSOCacheSubscribed::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgSOCacheSubscribed::has_version() const {
  return _internal_has_version();
}
inline void CMsgSOCacheSubscribed::clear_version() {
  version_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgSOCacheSubscribed::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgSOCacheSubscribed::version() const {
  // @@protoc_insertion_point(field_get:CMsgSOCacheSubscribed.version)
  return _internal_version();
}
inline void CMsgSOCacheSubscribed::_internal_set_version(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  version_ = value;
}
inline void CMsgSOCacheSubscribed::set_version(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:CMsgSOCacheSubscribed.version)
}

// optional .CMsgSOIDOwner owner_soid = 4;
inline bool CMsgSOCacheSubscribed::_internal_has_owner_soid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || owner_soid_ != nullptr);
  return value;
}
inline bool CMsgSOCacheSubscribed::has_owner_soid() const {
  return _internal_has_owner_soid();
}
inline void CMsgSOCacheSubscribed::clear_owner_soid() {
  if (owner_soid_ != nullptr) owner_soid_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgSOIDOwner& CMsgSOCacheSubscribed::_internal_owner_soid() const {
  const ::CMsgSOIDOwner* p = owner_soid_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgSOIDOwner&>(
      ::_CMsgSOIDOwner_default_instance_);
}
inline const ::CMsgSOIDOwner& CMsgSOCacheSubscribed::owner_soid() const {
  // @@protoc_insertion_point(field_get:CMsgSOCacheSubscribed.owner_soid)
  return _internal_owner_soid();
}
inline void CMsgSOCacheSubscribed::unsafe_arena_set_allocated_owner_soid(
    ::CMsgSOIDOwner* owner_soid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(owner_soid_);
  }
  owner_soid_ = owner_soid;
  if (owner_soid) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgSOCacheSubscribed.owner_soid)
}
inline ::CMsgSOIDOwner* CMsgSOCacheSubscribed::release_owner_soid() {
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgSOIDOwner* temp = owner_soid_;
  owner_soid_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgSOIDOwner* CMsgSOCacheSubscribed::unsafe_arena_release_owner_soid() {
  // @@protoc_insertion_point(field_release:CMsgSOCacheSubscribed.owner_soid)
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgSOIDOwner* temp = owner_soid_;
  owner_soid_ = nullptr;
  return temp;
}
inline ::CMsgSOIDOwner* CMsgSOCacheSubscribed::_internal_mutable_owner_soid() {
  _has_bits_[0] |= 0x00000001u;
  if (owner_soid_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgSOIDOwner>(GetArenaForAllocation());
    owner_soid_ = p;
  }
  return owner_soid_;
}
inline ::CMsgSOIDOwner* CMsgSOCacheSubscribed::mutable_owner_soid() {
  // @@protoc_insertion_point(field_mutable:CMsgSOCacheSubscribed.owner_soid)
  return _internal_mutable_owner_soid();
}
inline void CMsgSOCacheSubscribed::set_allocated_owner_soid(::CMsgSOIDOwner* owner_soid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete owner_soid_;
  }
  if (owner_soid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgSOIDOwner>::GetOwningArena(owner_soid);
    if (message_arena != submessage_arena) {
      owner_soid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, owner_soid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  owner_soid_ = owner_soid;
  // @@protoc_insertion_point(field_set_allocated:CMsgSOCacheSubscribed.owner_soid)
}

// optional uint32 service_id = 5;
inline bool CMsgSOCacheSubscribed::_internal_has_service_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgSOCacheSubscribed::has_service_id() const {
  return _internal_has_service_id();
}
inline void CMsgSOCacheSubscribed::clear_service_id() {
  service_id_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSOCacheSubscribed::_internal_service_id() const {
  return service_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSOCacheSubscribed::service_id() const {
  // @@protoc_insertion_point(field_get:CMsgSOCacheSubscribed.service_id)
  return _internal_service_id();
}
inline void CMsgSOCacheSubscribed::_internal_set_service_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  service_id_ = value;
}
inline void CMsgSOCacheSubscribed::set_service_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_service_id(value);
  // @@protoc_insertion_point(field_set:CMsgSOCacheSubscribed.service_id)
}

// repeated uint32 service_list = 6;
inline int CMsgSOCacheSubscribed::_internal_service_list_size() const {
  return service_list_.size();
}
inline int CMsgSOCacheSubscribed::service_list_size() const {
  return _internal_service_list_size();
}
inline void CMsgSOCacheSubscribed::clear_service_list() {
  service_list_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSOCacheSubscribed::_internal_service_list(int index) const {
  return service_list_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSOCacheSubscribed::service_list(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSOCacheSubscribed.service_list)
  return _internal_service_list(index);
}
inline void CMsgSOCacheSubscribed::set_service_list(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  service_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgSOCacheSubscribed.service_list)
}
inline void CMsgSOCacheSubscribed::_internal_add_service_list(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  service_list_.Add(value);
}
inline void CMsgSOCacheSubscribed::add_service_list(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_service_list(value);
  // @@protoc_insertion_point(field_add:CMsgSOCacheSubscribed.service_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CMsgSOCacheSubscribed::_internal_service_list() const {
  return service_list_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CMsgSOCacheSubscribed::service_list() const {
  // @@protoc_insertion_point(field_list:CMsgSOCacheSubscribed.service_list)
  return _internal_service_list();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CMsgSOCacheSubscribed::_internal_mutable_service_list() {
  return &service_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CMsgSOCacheSubscribed::mutable_service_list() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSOCacheSubscribed.service_list)
  return _internal_mutable_service_list();
}

// optional fixed64 sync_version = 7;
inline bool CMsgSOCacheSubscribed::_internal_has_sync_version() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgSOCacheSubscribed::has_sync_version() const {
  return _internal_has_sync_version();
}
inline void CMsgSOCacheSubscribed::clear_sync_version() {
  sync_version_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgSOCacheSubscribed::_internal_sync_version() const {
  return sync_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgSOCacheSubscribed::sync_version() const {
  // @@protoc_insertion_point(field_get:CMsgSOCacheSubscribed.sync_version)
  return _internal_sync_version();
}
inline void CMsgSOCacheSubscribed::_internal_set_sync_version(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  sync_version_ = value;
}
inline void CMsgSOCacheSubscribed::set_sync_version(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sync_version(value);
  // @@protoc_insertion_point(field_set:CMsgSOCacheSubscribed.sync_version)
}

// -------------------------------------------------------------------

// CMsgSOCacheSubscribedUpToDate

// optional fixed64 version = 1;
inline bool CMsgSOCacheSubscribedUpToDate::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSOCacheSubscribedUpToDate::has_version() const {
  return _internal_has_version();
}
inline void CMsgSOCacheSubscribedUpToDate::clear_version() {
  version_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgSOCacheSubscribedUpToDate::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgSOCacheSubscribedUpToDate::version() const {
  // @@protoc_insertion_point(field_get:CMsgSOCacheSubscribedUpToDate.version)
  return _internal_version();
}
inline void CMsgSOCacheSubscribedUpToDate::_internal_set_version(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  version_ = value;
}
inline void CMsgSOCacheSubscribedUpToDate::set_version(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:CMsgSOCacheSubscribedUpToDate.version)
}

// optional .CMsgSOIDOwner owner_soid = 2;
inline bool CMsgSOCacheSubscribedUpToDate::_internal_has_owner_soid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || owner_soid_ != nullptr);
  return value;
}
inline bool CMsgSOCacheSubscribedUpToDate::has_owner_soid() const {
  return _internal_has_owner_soid();
}
inline void CMsgSOCacheSubscribedUpToDate::clear_owner_soid() {
  if (owner_soid_ != nullptr) owner_soid_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgSOIDOwner& CMsgSOCacheSubscribedUpToDate::_internal_owner_soid() const {
  const ::CMsgSOIDOwner* p = owner_soid_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgSOIDOwner&>(
      ::_CMsgSOIDOwner_default_instance_);
}
inline const ::CMsgSOIDOwner& CMsgSOCacheSubscribedUpToDate::owner_soid() const {
  // @@protoc_insertion_point(field_get:CMsgSOCacheSubscribedUpToDate.owner_soid)
  return _internal_owner_soid();
}
inline void CMsgSOCacheSubscribedUpToDate::unsafe_arena_set_allocated_owner_soid(
    ::CMsgSOIDOwner* owner_soid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(owner_soid_);
  }
  owner_soid_ = owner_soid;
  if (owner_soid) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgSOCacheSubscribedUpToDate.owner_soid)
}
inline ::CMsgSOIDOwner* CMsgSOCacheSubscribedUpToDate::release_owner_soid() {
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgSOIDOwner* temp = owner_soid_;
  owner_soid_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgSOIDOwner* CMsgSOCacheSubscribedUpToDate::unsafe_arena_release_owner_soid() {
  // @@protoc_insertion_point(field_release:CMsgSOCacheSubscribedUpToDate.owner_soid)
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgSOIDOwner* temp = owner_soid_;
  owner_soid_ = nullptr;
  return temp;
}
inline ::CMsgSOIDOwner* CMsgSOCacheSubscribedUpToDate::_internal_mutable_owner_soid() {
  _has_bits_[0] |= 0x00000001u;
  if (owner_soid_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgSOIDOwner>(GetArenaForAllocation());
    owner_soid_ = p;
  }
  return owner_soid_;
}
inline ::CMsgSOIDOwner* CMsgSOCacheSubscribedUpToDate::mutable_owner_soid() {
  // @@protoc_insertion_point(field_mutable:CMsgSOCacheSubscribedUpToDate.owner_soid)
  return _internal_mutable_owner_soid();
}
inline void CMsgSOCacheSubscribedUpToDate::set_allocated_owner_soid(::CMsgSOIDOwner* owner_soid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete owner_soid_;
  }
  if (owner_soid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgSOIDOwner>::GetOwningArena(owner_soid);
    if (message_arena != submessage_arena) {
      owner_soid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, owner_soid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  owner_soid_ = owner_soid;
  // @@protoc_insertion_point(field_set_allocated:CMsgSOCacheSubscribedUpToDate.owner_soid)
}

// optional uint32 service_id = 3;
inline bool CMsgSOCacheSubscribedUpToDate::_internal_has_service_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgSOCacheSubscribedUpToDate::has_service_id() const {
  return _internal_has_service_id();
}
inline void CMsgSOCacheSubscribedUpToDate::clear_service_id() {
  service_id_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSOCacheSubscribedUpToDate::_internal_service_id() const {
  return service_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSOCacheSubscribedUpToDate::service_id() const {
  // @@protoc_insertion_point(field_get:CMsgSOCacheSubscribedUpToDate.service_id)
  return _internal_service_id();
}
inline void CMsgSOCacheSubscribedUpToDate::_internal_set_service_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  service_id_ = value;
}
inline void CMsgSOCacheSubscribedUpToDate::set_service_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_service_id(value);
  // @@protoc_insertion_point(field_set:CMsgSOCacheSubscribedUpToDate.service_id)
}

// repeated uint32 service_list = 4;
inline int CMsgSOCacheSubscribedUpToDate::_internal_service_list_size() const {
  return service_list_.size();
}
inline int CMsgSOCacheSubscribedUpToDate::service_list_size() const {
  return _internal_service_list_size();
}
inline void CMsgSOCacheSubscribedUpToDate::clear_service_list() {
  service_list_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSOCacheSubscribedUpToDate::_internal_service_list(int index) const {
  return service_list_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSOCacheSubscribedUpToDate::service_list(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSOCacheSubscribedUpToDate.service_list)
  return _internal_service_list(index);
}
inline void CMsgSOCacheSubscribedUpToDate::set_service_list(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  service_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgSOCacheSubscribedUpToDate.service_list)
}
inline void CMsgSOCacheSubscribedUpToDate::_internal_add_service_list(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  service_list_.Add(value);
}
inline void CMsgSOCacheSubscribedUpToDate::add_service_list(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_service_list(value);
  // @@protoc_insertion_point(field_add:CMsgSOCacheSubscribedUpToDate.service_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CMsgSOCacheSubscribedUpToDate::_internal_service_list() const {
  return service_list_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CMsgSOCacheSubscribedUpToDate::service_list() const {
  // @@protoc_insertion_point(field_list:CMsgSOCacheSubscribedUpToDate.service_list)
  return _internal_service_list();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CMsgSOCacheSubscribedUpToDate::_internal_mutable_service_list() {
  return &service_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CMsgSOCacheSubscribedUpToDate::mutable_service_list() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSOCacheSubscribedUpToDate.service_list)
  return _internal_mutable_service_list();
}

// optional fixed64 sync_version = 5;
inline bool CMsgSOCacheSubscribedUpToDate::_internal_has_sync_version() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgSOCacheSubscribedUpToDate::has_sync_version() const {
  return _internal_has_sync_version();
}
inline void CMsgSOCacheSubscribedUpToDate::clear_sync_version() {
  sync_version_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgSOCacheSubscribedUpToDate::_internal_sync_version() const {
  return sync_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgSOCacheSubscribedUpToDate::sync_version() const {
  // @@protoc_insertion_point(field_get:CMsgSOCacheSubscribedUpToDate.sync_version)
  return _internal_sync_version();
}
inline void CMsgSOCacheSubscribedUpToDate::_internal_set_sync_version(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  sync_version_ = value;
}
inline void CMsgSOCacheSubscribedUpToDate::set_sync_version(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sync_version(value);
  // @@protoc_insertion_point(field_set:CMsgSOCacheSubscribedUpToDate.sync_version)
}

// -------------------------------------------------------------------

// CMsgSOCacheUnsubscribed

// optional fixed64 owner = 1;
inline bool CMsgSOCacheUnsubscribed::_internal_has_owner() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSOCacheUnsubscribed::has_owner() const {
  return _internal_has_owner();
}
inline void CMsgSOCacheUnsubscribed::clear_owner() {
  owner_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgSOCacheUnsubscribed::_internal_owner() const {
  return owner_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgSOCacheUnsubscribed::owner() const {
  // @@protoc_insertion_point(field_get:CMsgSOCacheUnsubscribed.owner)
  return _internal_owner();
}
inline void CMsgSOCacheUnsubscribed::_internal_set_owner(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  owner_ = value;
}
inline void CMsgSOCacheUnsubscribed::set_owner(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_owner(value);
  // @@protoc_insertion_point(field_set:CMsgSOCacheUnsubscribed.owner)
}

// -------------------------------------------------------------------

// CMsgSOCacheSubscriptionCheck

// optional fixed64 owner = 1;
inline bool CMsgSOCacheSubscriptionCheck::_internal_has_owner() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSOCacheSubscriptionCheck::has_owner() const {
  return _internal_has_owner();
}
inline void CMsgSOCacheSubscriptionCheck::clear_owner() {
  owner_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgSOCacheSubscriptionCheck::_internal_owner() const {
  return owner_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgSOCacheSubscriptionCheck::owner() const {
  // @@protoc_insertion_point(field_get:CMsgSOCacheSubscriptionCheck.owner)
  return _internal_owner();
}
inline void CMsgSOCacheSubscriptionCheck::_internal_set_owner(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  owner_ = value;
}
inline void CMsgSOCacheSubscriptionCheck::set_owner(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_owner(value);
  // @@protoc_insertion_point(field_set:CMsgSOCacheSubscriptionCheck.owner)
}

// optional fixed64 version = 2;
inline bool CMsgSOCacheSubscriptionCheck::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgSOCacheSubscriptionCheck::has_version() const {
  return _internal_has_version();
}
inline void CMsgSOCacheSubscriptionCheck::clear_version() {
  version_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgSOCacheSubscriptionCheck::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgSOCacheSubscriptionCheck::version() const {
  // @@protoc_insertion_point(field_get:CMsgSOCacheSubscriptionCheck.version)
  return _internal_version();
}
inline void CMsgSOCacheSubscriptionCheck::_internal_set_version(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  version_ = value;
}
inline void CMsgSOCacheSubscriptionCheck::set_version(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:CMsgSOCacheSubscriptionCheck.version)
}

// optional .CMsgSOIDOwner owner_soid = 3;
inline bool CMsgSOCacheSubscriptionCheck::_internal_has_owner_soid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || owner_soid_ != nullptr);
  return value;
}
inline bool CMsgSOCacheSubscriptionCheck::has_owner_soid() const {
  return _internal_has_owner_soid();
}
inline void CMsgSOCacheSubscriptionCheck::clear_owner_soid() {
  if (owner_soid_ != nullptr) owner_soid_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgSOIDOwner& CMsgSOCacheSubscriptionCheck::_internal_owner_soid() const {
  const ::CMsgSOIDOwner* p = owner_soid_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgSOIDOwner&>(
      ::_CMsgSOIDOwner_default_instance_);
}
inline const ::CMsgSOIDOwner& CMsgSOCacheSubscriptionCheck::owner_soid() const {
  // @@protoc_insertion_point(field_get:CMsgSOCacheSubscriptionCheck.owner_soid)
  return _internal_owner_soid();
}
inline void CMsgSOCacheSubscriptionCheck::unsafe_arena_set_allocated_owner_soid(
    ::CMsgSOIDOwner* owner_soid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(owner_soid_);
  }
  owner_soid_ = owner_soid;
  if (owner_soid) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgSOCacheSubscriptionCheck.owner_soid)
}
inline ::CMsgSOIDOwner* CMsgSOCacheSubscriptionCheck::release_owner_soid() {
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgSOIDOwner* temp = owner_soid_;
  owner_soid_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgSOIDOwner* CMsgSOCacheSubscriptionCheck::unsafe_arena_release_owner_soid() {
  // @@protoc_insertion_point(field_release:CMsgSOCacheSubscriptionCheck.owner_soid)
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgSOIDOwner* temp = owner_soid_;
  owner_soid_ = nullptr;
  return temp;
}
inline ::CMsgSOIDOwner* CMsgSOCacheSubscriptionCheck::_internal_mutable_owner_soid() {
  _has_bits_[0] |= 0x00000001u;
  if (owner_soid_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgSOIDOwner>(GetArenaForAllocation());
    owner_soid_ = p;
  }
  return owner_soid_;
}
inline ::CMsgSOIDOwner* CMsgSOCacheSubscriptionCheck::mutable_owner_soid() {
  // @@protoc_insertion_point(field_mutable:CMsgSOCacheSubscriptionCheck.owner_soid)
  return _internal_mutable_owner_soid();
}
inline void CMsgSOCacheSubscriptionCheck::set_allocated_owner_soid(::CMsgSOIDOwner* owner_soid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete owner_soid_;
  }
  if (owner_soid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgSOIDOwner>::GetOwningArena(owner_soid);
    if (message_arena != submessage_arena) {
      owner_soid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, owner_soid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  owner_soid_ = owner_soid;
  // @@protoc_insertion_point(field_set_allocated:CMsgSOCacheSubscriptionCheck.owner_soid)
}

// optional uint32 service_id = 4;
inline bool CMsgSOCacheSubscriptionCheck::_internal_has_service_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgSOCacheSubscriptionCheck::has_service_id() const {
  return _internal_has_service_id();
}
inline void CMsgSOCacheSubscriptionCheck::clear_service_id() {
  service_id_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSOCacheSubscriptionCheck::_internal_service_id() const {
  return service_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSOCacheSubscriptionCheck::service_id() const {
  // @@protoc_insertion_point(field_get:CMsgSOCacheSubscriptionCheck.service_id)
  return _internal_service_id();
}
inline void CMsgSOCacheSubscriptionCheck::_internal_set_service_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  service_id_ = value;
}
inline void CMsgSOCacheSubscriptionCheck::set_service_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_service_id(value);
  // @@protoc_insertion_point(field_set:CMsgSOCacheSubscriptionCheck.service_id)
}

// repeated uint32 service_list = 5;
inline int CMsgSOCacheSubscriptionCheck::_internal_service_list_size() const {
  return service_list_.size();
}
inline int CMsgSOCacheSubscriptionCheck::service_list_size() const {
  return _internal_service_list_size();
}
inline void CMsgSOCacheSubscriptionCheck::clear_service_list() {
  service_list_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSOCacheSubscriptionCheck::_internal_service_list(int index) const {
  return service_list_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSOCacheSubscriptionCheck::service_list(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSOCacheSubscriptionCheck.service_list)
  return _internal_service_list(index);
}
inline void CMsgSOCacheSubscriptionCheck::set_service_list(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  service_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgSOCacheSubscriptionCheck.service_list)
}
inline void CMsgSOCacheSubscriptionCheck::_internal_add_service_list(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  service_list_.Add(value);
}
inline void CMsgSOCacheSubscriptionCheck::add_service_list(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_service_list(value);
  // @@protoc_insertion_point(field_add:CMsgSOCacheSubscriptionCheck.service_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CMsgSOCacheSubscriptionCheck::_internal_service_list() const {
  return service_list_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CMsgSOCacheSubscriptionCheck::service_list() const {
  // @@protoc_insertion_point(field_list:CMsgSOCacheSubscriptionCheck.service_list)
  return _internal_service_list();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CMsgSOCacheSubscriptionCheck::_internal_mutable_service_list() {
  return &service_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CMsgSOCacheSubscriptionCheck::mutable_service_list() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSOCacheSubscriptionCheck.service_list)
  return _internal_mutable_service_list();
}

// optional fixed64 sync_version = 6;
inline bool CMsgSOCacheSubscriptionCheck::_internal_has_sync_version() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgSOCacheSubscriptionCheck::has_sync_version() const {
  return _internal_has_sync_version();
}
inline void CMsgSOCacheSubscriptionCheck::clear_sync_version() {
  sync_version_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgSOCacheSubscriptionCheck::_internal_sync_version() const {
  return sync_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgSOCacheSubscriptionCheck::sync_version() const {
  // @@protoc_insertion_point(field_get:CMsgSOCacheSubscriptionCheck.sync_version)
  return _internal_sync_version();
}
inline void CMsgSOCacheSubscriptionCheck::_internal_set_sync_version(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  sync_version_ = value;
}
inline void CMsgSOCacheSubscriptionCheck::set_sync_version(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sync_version(value);
  // @@protoc_insertion_point(field_set:CMsgSOCacheSubscriptionCheck.sync_version)
}

// -------------------------------------------------------------------

// CMsgSOCacheSubscriptionRefresh

// optional fixed64 owner = 1;
inline bool CMsgSOCacheSubscriptionRefresh::_internal_has_owner() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSOCacheSubscriptionRefresh::has_owner() const {
  return _internal_has_owner();
}
inline void CMsgSOCacheSubscriptionRefresh::clear_owner() {
  owner_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgSOCacheSubscriptionRefresh::_internal_owner() const {
  return owner_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgSOCacheSubscriptionRefresh::owner() const {
  // @@protoc_insertion_point(field_get:CMsgSOCacheSubscriptionRefresh.owner)
  return _internal_owner();
}
inline void CMsgSOCacheSubscriptionRefresh::_internal_set_owner(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  owner_ = value;
}
inline void CMsgSOCacheSubscriptionRefresh::set_owner(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_owner(value);
  // @@protoc_insertion_point(field_set:CMsgSOCacheSubscriptionRefresh.owner)
}

// optional .CMsgSOIDOwner owner_soid = 2;
inline bool CMsgSOCacheSubscriptionRefresh::_internal_has_owner_soid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || owner_soid_ != nullptr);
  return value;
}
inline bool CMsgSOCacheSubscriptionRefresh::has_owner_soid() const {
  return _internal_has_owner_soid();
}
inline void CMsgSOCacheSubscriptionRefresh::clear_owner_soid() {
  if (owner_soid_ != nullptr) owner_soid_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgSOIDOwner& CMsgSOCacheSubscriptionRefresh::_internal_owner_soid() const {
  const ::CMsgSOIDOwner* p = owner_soid_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgSOIDOwner&>(
      ::_CMsgSOIDOwner_default_instance_);
}
inline const ::CMsgSOIDOwner& CMsgSOCacheSubscriptionRefresh::owner_soid() const {
  // @@protoc_insertion_point(field_get:CMsgSOCacheSubscriptionRefresh.owner_soid)
  return _internal_owner_soid();
}
inline void CMsgSOCacheSubscriptionRefresh::unsafe_arena_set_allocated_owner_soid(
    ::CMsgSOIDOwner* owner_soid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(owner_soid_);
  }
  owner_soid_ = owner_soid;
  if (owner_soid) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgSOCacheSubscriptionRefresh.owner_soid)
}
inline ::CMsgSOIDOwner* CMsgSOCacheSubscriptionRefresh::release_owner_soid() {
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgSOIDOwner* temp = owner_soid_;
  owner_soid_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgSOIDOwner* CMsgSOCacheSubscriptionRefresh::unsafe_arena_release_owner_soid() {
  // @@protoc_insertion_point(field_release:CMsgSOCacheSubscriptionRefresh.owner_soid)
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgSOIDOwner* temp = owner_soid_;
  owner_soid_ = nullptr;
  return temp;
}
inline ::CMsgSOIDOwner* CMsgSOCacheSubscriptionRefresh::_internal_mutable_owner_soid() {
  _has_bits_[0] |= 0x00000001u;
  if (owner_soid_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgSOIDOwner>(GetArenaForAllocation());
    owner_soid_ = p;
  }
  return owner_soid_;
}
inline ::CMsgSOIDOwner* CMsgSOCacheSubscriptionRefresh::mutable_owner_soid() {
  // @@protoc_insertion_point(field_mutable:CMsgSOCacheSubscriptionRefresh.owner_soid)
  return _internal_mutable_owner_soid();
}
inline void CMsgSOCacheSubscriptionRefresh::set_allocated_owner_soid(::CMsgSOIDOwner* owner_soid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete owner_soid_;
  }
  if (owner_soid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgSOIDOwner>::GetOwningArena(owner_soid);
    if (message_arena != submessage_arena) {
      owner_soid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, owner_soid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  owner_soid_ = owner_soid;
  // @@protoc_insertion_point(field_set_allocated:CMsgSOCacheSubscriptionRefresh.owner_soid)
}

// -------------------------------------------------------------------

// CMsgSOCacheVersion

// optional fixed64 version = 1;
inline bool CMsgSOCacheVersion::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSOCacheVersion::has_version() const {
  return _internal_has_version();
}
inline void CMsgSOCacheVersion::clear_version() {
  version_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgSOCacheVersion::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgSOCacheVersion::version() const {
  // @@protoc_insertion_point(field_get:CMsgSOCacheVersion.version)
  return _internal_version();
}
inline void CMsgSOCacheVersion::_internal_set_version(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  version_ = value;
}
inline void CMsgSOCacheVersion::set_version(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:CMsgSOCacheVersion.version)
}

// -------------------------------------------------------------------

// CMsgGCMultiplexMessage

// optional uint32 msgtype = 1;
inline bool CMsgGCMultiplexMessage::_internal_has_msgtype() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCMultiplexMessage::has_msgtype() const {
  return _internal_has_msgtype();
}
inline void CMsgGCMultiplexMessage::clear_msgtype() {
  msgtype_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCMultiplexMessage::_internal_msgtype() const {
  return msgtype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCMultiplexMessage::msgtype() const {
  // @@protoc_insertion_point(field_get:CMsgGCMultiplexMessage.msgtype)
  return _internal_msgtype();
}
inline void CMsgGCMultiplexMessage::_internal_set_msgtype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  msgtype_ = value;
}
inline void CMsgGCMultiplexMessage::set_msgtype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_msgtype(value);
  // @@protoc_insertion_point(field_set:CMsgGCMultiplexMessage.msgtype)
}

// optional bytes payload = 2;
inline bool CMsgGCMultiplexMessage::_internal_has_payload() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCMultiplexMessage::has_payload() const {
  return _internal_has_payload();
}
inline void CMsgGCMultiplexMessage::clear_payload() {
  payload_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgGCMultiplexMessage::payload() const {
  // @@protoc_insertion_point(field_get:CMsgGCMultiplexMessage.payload)
  return _internal_payload();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgGCMultiplexMessage::set_payload(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 payload_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgGCMultiplexMessage.payload)
}
inline std::string* CMsgGCMultiplexMessage::mutable_payload() {
  // @@protoc_insertion_point(field_mutable:CMsgGCMultiplexMessage.payload)
  return _internal_mutable_payload();
}
inline const std::string& CMsgGCMultiplexMessage::_internal_payload() const {
  return payload_.Get();
}
inline void CMsgGCMultiplexMessage::_internal_set_payload(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgGCMultiplexMessage::_internal_mutable_payload() {
  _has_bits_[0] |= 0x00000001u;
  return payload_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgGCMultiplexMessage::release_payload() {
  // @@protoc_insertion_point(field_release:CMsgGCMultiplexMessage.payload)
  if (!_internal_has_payload()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return payload_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CMsgGCMultiplexMessage::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  payload_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CMsgGCMultiplexMessage.payload)
}

// repeated fixed64 steamids = 3;
inline int CMsgGCMultiplexMessage::_internal_steamids_size() const {
  return steamids_.size();
}
inline int CMsgGCMultiplexMessage::steamids_size() const {
  return _internal_steamids_size();
}
inline void CMsgGCMultiplexMessage::clear_steamids() {
  steamids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCMultiplexMessage::_internal_steamids(int index) const {
  return steamids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCMultiplexMessage::steamids(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCMultiplexMessage.steamids)
  return _internal_steamids(index);
}
inline void CMsgGCMultiplexMessage::set_steamids(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  steamids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGCMultiplexMessage.steamids)
}
inline void CMsgGCMultiplexMessage::_internal_add_steamids(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  steamids_.Add(value);
}
inline void CMsgGCMultiplexMessage::add_steamids(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_steamids(value);
  // @@protoc_insertion_point(field_add:CMsgGCMultiplexMessage.steamids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
CMsgGCMultiplexMessage::_internal_steamids() const {
  return steamids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
CMsgGCMultiplexMessage::steamids() const {
  // @@protoc_insertion_point(field_list:CMsgGCMultiplexMessage.steamids)
  return _internal_steamids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
CMsgGCMultiplexMessage::_internal_mutable_steamids() {
  return &steamids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
CMsgGCMultiplexMessage::mutable_steamids() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCMultiplexMessage.steamids)
  return _internal_mutable_steamids();
}

// -------------------------------------------------------------------

// CGCToGCMsgMasterAck

// optional uint32 dir_index = 1;
inline bool CGCToGCMsgMasterAck::_internal_has_dir_index() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CGCToGCMsgMasterAck::has_dir_index() const {
  return _internal_has_dir_index();
}
inline void CGCToGCMsgMasterAck::clear_dir_index() {
  dir_index_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGCToGCMsgMasterAck::_internal_dir_index() const {
  return dir_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGCToGCMsgMasterAck::dir_index() const {
  // @@protoc_insertion_point(field_get:CGCToGCMsgMasterAck.dir_index)
  return _internal_dir_index();
}
inline void CGCToGCMsgMasterAck::_internal_set_dir_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  dir_index_ = value;
}
inline void CGCToGCMsgMasterAck::set_dir_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_dir_index(value);
  // @@protoc_insertion_point(field_set:CGCToGCMsgMasterAck.dir_index)
}

// optional string machine_name = 3;
inline bool CGCToGCMsgMasterAck::_internal_has_machine_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGCToGCMsgMasterAck::has_machine_name() const {
  return _internal_has_machine_name();
}
inline void CGCToGCMsgMasterAck::clear_machine_name() {
  machine_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CGCToGCMsgMasterAck::machine_name() const {
  // @@protoc_insertion_point(field_get:CGCToGCMsgMasterAck.machine_name)
  return _internal_machine_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CGCToGCMsgMasterAck::set_machine_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 machine_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CGCToGCMsgMasterAck.machine_name)
}
inline std::string* CGCToGCMsgMasterAck::mutable_machine_name() {
  // @@protoc_insertion_point(field_mutable:CGCToGCMsgMasterAck.machine_name)
  return _internal_mutable_machine_name();
}
inline const std::string& CGCToGCMsgMasterAck::_internal_machine_name() const {
  return machine_name_.Get();
}
inline void CGCToGCMsgMasterAck::_internal_set_machine_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  machine_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CGCToGCMsgMasterAck::_internal_mutable_machine_name() {
  _has_bits_[0] |= 0x00000001u;
  return machine_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CGCToGCMsgMasterAck::release_machine_name() {
  // @@protoc_insertion_point(field_release:CGCToGCMsgMasterAck.machine_name)
  if (!_internal_has_machine_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return machine_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CGCToGCMsgMasterAck::set_allocated_machine_name(std::string* machine_name) {
  if (machine_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  machine_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), machine_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CGCToGCMsgMasterAck.machine_name)
}

// optional string process_name = 4;
inline bool CGCToGCMsgMasterAck::_internal_has_process_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CGCToGCMsgMasterAck::has_process_name() const {
  return _internal_has_process_name();
}
inline void CGCToGCMsgMasterAck::clear_process_name() {
  process_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CGCToGCMsgMasterAck::process_name() const {
  // @@protoc_insertion_point(field_get:CGCToGCMsgMasterAck.process_name)
  return _internal_process_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CGCToGCMsgMasterAck::set_process_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 process_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CGCToGCMsgMasterAck.process_name)
}
inline std::string* CGCToGCMsgMasterAck::mutable_process_name() {
  // @@protoc_insertion_point(field_mutable:CGCToGCMsgMasterAck.process_name)
  return _internal_mutable_process_name();
}
inline const std::string& CGCToGCMsgMasterAck::_internal_process_name() const {
  return process_name_.Get();
}
inline void CGCToGCMsgMasterAck::_internal_set_process_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  process_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CGCToGCMsgMasterAck::_internal_mutable_process_name() {
  _has_bits_[0] |= 0x00000002u;
  return process_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CGCToGCMsgMasterAck::release_process_name() {
  // @@protoc_insertion_point(field_release:CGCToGCMsgMasterAck.process_name)
  if (!_internal_has_process_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return process_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CGCToGCMsgMasterAck::set_allocated_process_name(std::string* process_name) {
  if (process_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  process_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), process_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CGCToGCMsgMasterAck.process_name)
}

// repeated uint32 type_instances = 5;
inline int CGCToGCMsgMasterAck::_internal_type_instances_size() const {
  return type_instances_.size();
}
inline int CGCToGCMsgMasterAck::type_instances_size() const {
  return _internal_type_instances_size();
}
inline void CGCToGCMsgMasterAck::clear_type_instances() {
  type_instances_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGCToGCMsgMasterAck::_internal_type_instances(int index) const {
  return type_instances_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGCToGCMsgMasterAck::type_instances(int index) const {
  // @@protoc_insertion_point(field_get:CGCToGCMsgMasterAck.type_instances)
  return _internal_type_instances(index);
}
inline void CGCToGCMsgMasterAck::set_type_instances(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  type_instances_.Set(index, value);
  // @@protoc_insertion_point(field_set:CGCToGCMsgMasterAck.type_instances)
}
inline void CGCToGCMsgMasterAck::_internal_add_type_instances(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  type_instances_.Add(value);
}
inline void CGCToGCMsgMasterAck::add_type_instances(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_type_instances(value);
  // @@protoc_insertion_point(field_add:CGCToGCMsgMasterAck.type_instances)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CGCToGCMsgMasterAck::_internal_type_instances() const {
  return type_instances_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CGCToGCMsgMasterAck::type_instances() const {
  // @@protoc_insertion_point(field_list:CGCToGCMsgMasterAck.type_instances)
  return _internal_type_instances();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CGCToGCMsgMasterAck::_internal_mutable_type_instances() {
  return &type_instances_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CGCToGCMsgMasterAck::mutable_type_instances() {
  // @@protoc_insertion_point(field_mutable_list:CGCToGCMsgMasterAck.type_instances)
  return _internal_mutable_type_instances();
}

// -------------------------------------------------------------------

// CGCToGCMsgMasterAck_Response

// optional int32 eresult = 1 [default = 2];
inline bool CGCToGCMsgMasterAck_Response::_internal_has_eresult() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGCToGCMsgMasterAck_Response::has_eresult() const {
  return _internal_has_eresult();
}
inline void CGCToGCMsgMasterAck_Response::clear_eresult() {
  eresult_ = 2;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGCToGCMsgMasterAck_Response::_internal_eresult() const {
  return eresult_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGCToGCMsgMasterAck_Response::eresult() const {
  // @@protoc_insertion_point(field_get:CGCToGCMsgMasterAck_Response.eresult)
  return _internal_eresult();
}
inline void CGCToGCMsgMasterAck_Response::_internal_set_eresult(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  eresult_ = value;
}
inline void CGCToGCMsgMasterAck_Response::set_eresult(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_eresult(value);
  // @@protoc_insertion_point(field_set:CGCToGCMsgMasterAck_Response.eresult)
}

// -------------------------------------------------------------------

// CGCToGCMsgMasterStartupComplete_GCInfo

// optional uint32 dir_index = 1;
inline bool CGCToGCMsgMasterStartupComplete_GCInfo::_internal_has_dir_index() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CGCToGCMsgMasterStartupComplete_GCInfo::has_dir_index() const {
  return _internal_has_dir_index();
}
inline void CGCToGCMsgMasterStartupComplete_GCInfo::clear_dir_index() {
  dir_index_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGCToGCMsgMasterStartupComplete_GCInfo::_internal_dir_index() const {
  return dir_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGCToGCMsgMasterStartupComplete_GCInfo::dir_index() const {
  // @@protoc_insertion_point(field_get:CGCToGCMsgMasterStartupComplete.GCInfo.dir_index)
  return _internal_dir_index();
}
inline void CGCToGCMsgMasterStartupComplete_GCInfo::_internal_set_dir_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  dir_index_ = value;
}
inline void CGCToGCMsgMasterStartupComplete_GCInfo::set_dir_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_dir_index(value);
  // @@protoc_insertion_point(field_set:CGCToGCMsgMasterStartupComplete.GCInfo.dir_index)
}

// optional string machine_name = 2;
inline bool CGCToGCMsgMasterStartupComplete_GCInfo::_internal_has_machine_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGCToGCMsgMasterStartupComplete_GCInfo::has_machine_name() const {
  return _internal_has_machine_name();
}
inline void CGCToGCMsgMasterStartupComplete_GCInfo::clear_machine_name() {
  machine_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CGCToGCMsgMasterStartupComplete_GCInfo::machine_name() const {
  // @@protoc_insertion_point(field_get:CGCToGCMsgMasterStartupComplete.GCInfo.machine_name)
  return _internal_machine_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CGCToGCMsgMasterStartupComplete_GCInfo::set_machine_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 machine_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CGCToGCMsgMasterStartupComplete.GCInfo.machine_name)
}
inline std::string* CGCToGCMsgMasterStartupComplete_GCInfo::mutable_machine_name() {
  // @@protoc_insertion_point(field_mutable:CGCToGCMsgMasterStartupComplete.GCInfo.machine_name)
  return _internal_mutable_machine_name();
}
inline const std::string& CGCToGCMsgMasterStartupComplete_GCInfo::_internal_machine_name() const {
  return machine_name_.Get();
}
inline void CGCToGCMsgMasterStartupComplete_GCInfo::_internal_set_machine_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  machine_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CGCToGCMsgMasterStartupComplete_GCInfo::_internal_mutable_machine_name() {
  _has_bits_[0] |= 0x00000001u;
  return machine_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CGCToGCMsgMasterStartupComplete_GCInfo::release_machine_name() {
  // @@protoc_insertion_point(field_release:CGCToGCMsgMasterStartupComplete.GCInfo.machine_name)
  if (!_internal_has_machine_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return machine_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CGCToGCMsgMasterStartupComplete_GCInfo::set_allocated_machine_name(std::string* machine_name) {
  if (machine_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  machine_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), machine_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CGCToGCMsgMasterStartupComplete.GCInfo.machine_name)
}

// -------------------------------------------------------------------

// CGCToGCMsgMasterStartupComplete

// repeated .CGCToGCMsgMasterStartupComplete.GCInfo gc_info = 1;
inline int CGCToGCMsgMasterStartupComplete::_internal_gc_info_size() const {
  return gc_info_.size();
}
inline int CGCToGCMsgMasterStartupComplete::gc_info_size() const {
  return _internal_gc_info_size();
}
inline void CGCToGCMsgMasterStartupComplete::clear_gc_info() {
  gc_info_.Clear();
}
inline ::CGCToGCMsgMasterStartupComplete_GCInfo* CGCToGCMsgMasterStartupComplete::mutable_gc_info(int index) {
  // @@protoc_insertion_point(field_mutable:CGCToGCMsgMasterStartupComplete.gc_info)
  return gc_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGCToGCMsgMasterStartupComplete_GCInfo >*
CGCToGCMsgMasterStartupComplete::mutable_gc_info() {
  // @@protoc_insertion_point(field_mutable_list:CGCToGCMsgMasterStartupComplete.gc_info)
  return &gc_info_;
}
inline const ::CGCToGCMsgMasterStartupComplete_GCInfo& CGCToGCMsgMasterStartupComplete::_internal_gc_info(int index) const {
  return gc_info_.Get(index);
}
inline const ::CGCToGCMsgMasterStartupComplete_GCInfo& CGCToGCMsgMasterStartupComplete::gc_info(int index) const {
  // @@protoc_insertion_point(field_get:CGCToGCMsgMasterStartupComplete.gc_info)
  return _internal_gc_info(index);
}
inline ::CGCToGCMsgMasterStartupComplete_GCInfo* CGCToGCMsgMasterStartupComplete::_internal_add_gc_info() {
  return gc_info_.Add();
}
inline ::CGCToGCMsgMasterStartupComplete_GCInfo* CGCToGCMsgMasterStartupComplete::add_gc_info() {
  // @@protoc_insertion_point(field_add:CGCToGCMsgMasterStartupComplete.gc_info)
  return _internal_add_gc_info();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGCToGCMsgMasterStartupComplete_GCInfo >&
CGCToGCMsgMasterStartupComplete::gc_info() const {
  // @@protoc_insertion_point(field_list:CGCToGCMsgMasterStartupComplete.gc_info)
  return gc_info_;
}

// -------------------------------------------------------------------

// CGCToGCMsgRouted

// optional uint32 msg_type = 1;
inline bool CGCToGCMsgRouted::_internal_has_msg_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CGCToGCMsgRouted::has_msg_type() const {
  return _internal_has_msg_type();
}
inline void CGCToGCMsgRouted::clear_msg_type() {
  msg_type_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGCToGCMsgRouted::_internal_msg_type() const {
  return msg_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGCToGCMsgRouted::msg_type() const {
  // @@protoc_insertion_point(field_get:CGCToGCMsgRouted.msg_type)
  return _internal_msg_type();
}
inline void CGCToGCMsgRouted::_internal_set_msg_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  msg_type_ = value;
}
inline void CGCToGCMsgRouted::set_msg_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_msg_type(value);
  // @@protoc_insertion_point(field_set:CGCToGCMsgRouted.msg_type)
}

// optional fixed64 sender_id = 2;
inline bool CGCToGCMsgRouted::_internal_has_sender_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CGCToGCMsgRouted::has_sender_id() const {
  return _internal_has_sender_id();
}
inline void CGCToGCMsgRouted::clear_sender_id() {
  sender_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGCToGCMsgRouted::_internal_sender_id() const {
  return sender_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGCToGCMsgRouted::sender_id() const {
  // @@protoc_insertion_point(field_get:CGCToGCMsgRouted.sender_id)
  return _internal_sender_id();
}
inline void CGCToGCMsgRouted::_internal_set_sender_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  sender_id_ = value;
}
inline void CGCToGCMsgRouted::set_sender_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sender_id(value);
  // @@protoc_insertion_point(field_set:CGCToGCMsgRouted.sender_id)
}

// optional bytes net_message = 3;
inline bool CGCToGCMsgRouted::_internal_has_net_message() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGCToGCMsgRouted::has_net_message() const {
  return _internal_has_net_message();
}
inline void CGCToGCMsgRouted::clear_net_message() {
  net_message_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CGCToGCMsgRouted::net_message() const {
  // @@protoc_insertion_point(field_get:CGCToGCMsgRouted.net_message)
  return _internal_net_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CGCToGCMsgRouted::set_net_message(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 net_message_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CGCToGCMsgRouted.net_message)
}
inline std::string* CGCToGCMsgRouted::mutable_net_message() {
  // @@protoc_insertion_point(field_mutable:CGCToGCMsgRouted.net_message)
  return _internal_mutable_net_message();
}
inline const std::string& CGCToGCMsgRouted::_internal_net_message() const {
  return net_message_.Get();
}
inline void CGCToGCMsgRouted::_internal_set_net_message(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  net_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CGCToGCMsgRouted::_internal_mutable_net_message() {
  _has_bits_[0] |= 0x00000001u;
  return net_message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CGCToGCMsgRouted::release_net_message() {
  // @@protoc_insertion_point(field_release:CGCToGCMsgRouted.net_message)
  if (!_internal_has_net_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return net_message_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CGCToGCMsgRouted::set_allocated_net_message(std::string* net_message) {
  if (net_message != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  net_message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), net_message,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CGCToGCMsgRouted.net_message)
}

// -------------------------------------------------------------------

// CGCToGCMsgRoutedReply

// optional uint32 msg_type = 1;
inline bool CGCToGCMsgRoutedReply::_internal_has_msg_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CGCToGCMsgRoutedReply::has_msg_type() const {
  return _internal_has_msg_type();
}
inline void CGCToGCMsgRoutedReply::clear_msg_type() {
  msg_type_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGCToGCMsgRoutedReply::_internal_msg_type() const {
  return msg_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGCToGCMsgRoutedReply::msg_type() const {
  // @@protoc_insertion_point(field_get:CGCToGCMsgRoutedReply.msg_type)
  return _internal_msg_type();
}
inline void CGCToGCMsgRoutedReply::_internal_set_msg_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  msg_type_ = value;
}
inline void CGCToGCMsgRoutedReply::set_msg_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_msg_type(value);
  // @@protoc_insertion_point(field_set:CGCToGCMsgRoutedReply.msg_type)
}

// optional bytes net_message = 2;
inline bool CGCToGCMsgRoutedReply::_internal_has_net_message() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGCToGCMsgRoutedReply::has_net_message() const {
  return _internal_has_net_message();
}
inline void CGCToGCMsgRoutedReply::clear_net_message() {
  net_message_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CGCToGCMsgRoutedReply::net_message() const {
  // @@protoc_insertion_point(field_get:CGCToGCMsgRoutedReply.net_message)
  return _internal_net_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CGCToGCMsgRoutedReply::set_net_message(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 net_message_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CGCToGCMsgRoutedReply.net_message)
}
inline std::string* CGCToGCMsgRoutedReply::mutable_net_message() {
  // @@protoc_insertion_point(field_mutable:CGCToGCMsgRoutedReply.net_message)
  return _internal_mutable_net_message();
}
inline const std::string& CGCToGCMsgRoutedReply::_internal_net_message() const {
  return net_message_.Get();
}
inline void CGCToGCMsgRoutedReply::_internal_set_net_message(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  net_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CGCToGCMsgRoutedReply::_internal_mutable_net_message() {
  _has_bits_[0] |= 0x00000001u;
  return net_message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CGCToGCMsgRoutedReply::release_net_message() {
  // @@protoc_insertion_point(field_release:CGCToGCMsgRoutedReply.net_message)
  if (!_internal_has_net_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return net_message_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CGCToGCMsgRoutedReply::set_allocated_net_message(std::string* net_message) {
  if (net_message != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  net_message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), net_message,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CGCToGCMsgRoutedReply.net_message)
}

// -------------------------------------------------------------------

// CMsgGCUpdateSubGCSessionInfo_CMsgUpdate

// optional fixed64 steamid = 1;
inline bool CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::has_steamid() const {
  return _internal_has_steamid();
}
inline void CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::_internal_steamid() const {
  return steamid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::steamid() const {
  // @@protoc_insertion_point(field_get:CMsgGCUpdateSubGCSessionInfo.CMsgUpdate.steamid)
  return _internal_steamid();
}
inline void CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::_internal_set_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  steamid_ = value;
}
inline void CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::set_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CMsgGCUpdateSubGCSessionInfo.CMsgUpdate.steamid)
}

// optional fixed32 ip = 2;
inline bool CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::_internal_has_ip() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::has_ip() const {
  return _internal_has_ip();
}
inline void CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::clear_ip() {
  ip_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::_internal_ip() const {
  return ip_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::ip() const {
  // @@protoc_insertion_point(field_get:CMsgGCUpdateSubGCSessionInfo.CMsgUpdate.ip)
  return _internal_ip();
}
inline void CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::_internal_set_ip(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  ip_ = value;
}
inline void CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::set_ip(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:CMsgGCUpdateSubGCSessionInfo.CMsgUpdate.ip)
}

// optional bool trusted = 3;
inline bool CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::_internal_has_trusted() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::has_trusted() const {
  return _internal_has_trusted();
}
inline void CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::clear_trusted() {
  trusted_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::_internal_trusted() const {
  return trusted_;
}
inline bool CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::trusted() const {
  // @@protoc_insertion_point(field_get:CMsgGCUpdateSubGCSessionInfo.CMsgUpdate.trusted)
  return _internal_trusted();
}
inline void CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::_internal_set_trusted(bool value) {
  _has_bits_[0] |= 0x00000004u;
  trusted_ = value;
}
inline void CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::set_trusted(bool value) {
  _internal_set_trusted(value);
  // @@protoc_insertion_point(field_set:CMsgGCUpdateSubGCSessionInfo.CMsgUpdate.trusted)
}

// -------------------------------------------------------------------

// CMsgGCUpdateSubGCSessionInfo

// repeated .CMsgGCUpdateSubGCSessionInfo.CMsgUpdate updates = 1;
inline int CMsgGCUpdateSubGCSessionInfo::_internal_updates_size() const {
  return updates_.size();
}
inline int CMsgGCUpdateSubGCSessionInfo::updates_size() const {
  return _internal_updates_size();
}
inline void CMsgGCUpdateSubGCSessionInfo::clear_updates() {
  updates_.Clear();
}
inline ::CMsgGCUpdateSubGCSessionInfo_CMsgUpdate* CMsgGCUpdateSubGCSessionInfo::mutable_updates(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGCUpdateSubGCSessionInfo.updates)
  return updates_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCUpdateSubGCSessionInfo_CMsgUpdate >*
CMsgGCUpdateSubGCSessionInfo::mutable_updates() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCUpdateSubGCSessionInfo.updates)
  return &updates_;
}
inline const ::CMsgGCUpdateSubGCSessionInfo_CMsgUpdate& CMsgGCUpdateSubGCSessionInfo::_internal_updates(int index) const {
  return updates_.Get(index);
}
inline const ::CMsgGCUpdateSubGCSessionInfo_CMsgUpdate& CMsgGCUpdateSubGCSessionInfo::updates(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCUpdateSubGCSessionInfo.updates)
  return _internal_updates(index);
}
inline ::CMsgGCUpdateSubGCSessionInfo_CMsgUpdate* CMsgGCUpdateSubGCSessionInfo::_internal_add_updates() {
  return updates_.Add();
}
inline ::CMsgGCUpdateSubGCSessionInfo_CMsgUpdate* CMsgGCUpdateSubGCSessionInfo::add_updates() {
  // @@protoc_insertion_point(field_add:CMsgGCUpdateSubGCSessionInfo.updates)
  return _internal_add_updates();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCUpdateSubGCSessionInfo_CMsgUpdate >&
CMsgGCUpdateSubGCSessionInfo::updates() const {
  // @@protoc_insertion_point(field_list:CMsgGCUpdateSubGCSessionInfo.updates)
  return updates_;
}

// -------------------------------------------------------------------

// CMsgGCRequestSubGCSessionInfo

// optional fixed64 steamid = 1;
inline bool CMsgGCRequestSubGCSessionInfo::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCRequestSubGCSessionInfo::has_steamid() const {
  return _internal_has_steamid();
}
inline void CMsgGCRequestSubGCSessionInfo::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCRequestSubGCSessionInfo::_internal_steamid() const {
  return steamid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCRequestSubGCSessionInfo::steamid() const {
  // @@protoc_insertion_point(field_get:CMsgGCRequestSubGCSessionInfo.steamid)
  return _internal_steamid();
}
inline void CMsgGCRequestSubGCSessionInfo::_internal_set_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  steamid_ = value;
}
inline void CMsgGCRequestSubGCSessionInfo::set_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CMsgGCRequestSubGCSessionInfo.steamid)
}

// -------------------------------------------------------------------

// CMsgGCRequestSubGCSessionInfoResponse

// optional fixed32 ip = 1;
inline bool CMsgGCRequestSubGCSessionInfoResponse::_internal_has_ip() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCRequestSubGCSessionInfoResponse::has_ip() const {
  return _internal_has_ip();
}
inline void CMsgGCRequestSubGCSessionInfoResponse::clear_ip() {
  ip_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCRequestSubGCSessionInfoResponse::_internal_ip() const {
  return ip_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCRequestSubGCSessionInfoResponse::ip() const {
  // @@protoc_insertion_point(field_get:CMsgGCRequestSubGCSessionInfoResponse.ip)
  return _internal_ip();
}
inline void CMsgGCRequestSubGCSessionInfoResponse::_internal_set_ip(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  ip_ = value;
}
inline void CMsgGCRequestSubGCSessionInfoResponse::set_ip(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:CMsgGCRequestSubGCSessionInfoResponse.ip)
}

// optional bool trusted = 2;
inline bool CMsgGCRequestSubGCSessionInfoResponse::_internal_has_trusted() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCRequestSubGCSessionInfoResponse::has_trusted() const {
  return _internal_has_trusted();
}
inline void CMsgGCRequestSubGCSessionInfoResponse::clear_trusted() {
  trusted_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CMsgGCRequestSubGCSessionInfoResponse::_internal_trusted() const {
  return trusted_;
}
inline bool CMsgGCRequestSubGCSessionInfoResponse::trusted() const {
  // @@protoc_insertion_point(field_get:CMsgGCRequestSubGCSessionInfoResponse.trusted)
  return _internal_trusted();
}
inline void CMsgGCRequestSubGCSessionInfoResponse::_internal_set_trusted(bool value) {
  _has_bits_[0] |= 0x00000002u;
  trusted_ = value;
}
inline void CMsgGCRequestSubGCSessionInfoResponse::set_trusted(bool value) {
  _internal_set_trusted(value);
  // @@protoc_insertion_point(field_set:CMsgGCRequestSubGCSessionInfoResponse.trusted)
}

// -------------------------------------------------------------------

// CMsgGCToGCIncrementRecruitmentLevel

// optional fixed64 steamid = 1;
inline bool CMsgGCToGCIncrementRecruitmentLevel::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCToGCIncrementRecruitmentLevel::has_steamid() const {
  return _internal_has_steamid();
}
inline void CMsgGCToGCIncrementRecruitmentLevel::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCToGCIncrementRecruitmentLevel::_internal_steamid() const {
  return steamid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCToGCIncrementRecruitmentLevel::steamid() const {
  // @@protoc_insertion_point(field_get:CMsgGCToGCIncrementRecruitmentLevel.steamid)
  return _internal_steamid();
}
inline void CMsgGCToGCIncrementRecruitmentLevel::_internal_set_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  steamid_ = value;
}
inline void CMsgGCToGCIncrementRecruitmentLevel::set_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CMsgGCToGCIncrementRecruitmentLevel.steamid)
}

// -------------------------------------------------------------------

// CMsgSOCacheHaveVersion

// optional .CMsgSOIDOwner soid = 1;
inline bool CMsgSOCacheHaveVersion::_internal_has_soid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || soid_ != nullptr);
  return value;
}
inline bool CMsgSOCacheHaveVersion::has_soid() const {
  return _internal_has_soid();
}
inline void CMsgSOCacheHaveVersion::clear_soid() {
  if (soid_ != nullptr) soid_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgSOIDOwner& CMsgSOCacheHaveVersion::_internal_soid() const {
  const ::CMsgSOIDOwner* p = soid_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgSOIDOwner&>(
      ::_CMsgSOIDOwner_default_instance_);
}
inline const ::CMsgSOIDOwner& CMsgSOCacheHaveVersion::soid() const {
  // @@protoc_insertion_point(field_get:CMsgSOCacheHaveVersion.soid)
  return _internal_soid();
}
inline void CMsgSOCacheHaveVersion::unsafe_arena_set_allocated_soid(
    ::CMsgSOIDOwner* soid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(soid_);
  }
  soid_ = soid;
  if (soid) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgSOCacheHaveVersion.soid)
}
inline ::CMsgSOIDOwner* CMsgSOCacheHaveVersion::release_soid() {
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgSOIDOwner* temp = soid_;
  soid_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgSOIDOwner* CMsgSOCacheHaveVersion::unsafe_arena_release_soid() {
  // @@protoc_insertion_point(field_release:CMsgSOCacheHaveVersion.soid)
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgSOIDOwner* temp = soid_;
  soid_ = nullptr;
  return temp;
}
inline ::CMsgSOIDOwner* CMsgSOCacheHaveVersion::_internal_mutable_soid() {
  _has_bits_[0] |= 0x00000001u;
  if (soid_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgSOIDOwner>(GetArenaForAllocation());
    soid_ = p;
  }
  return soid_;
}
inline ::CMsgSOIDOwner* CMsgSOCacheHaveVersion::mutable_soid() {
  // @@protoc_insertion_point(field_mutable:CMsgSOCacheHaveVersion.soid)
  return _internal_mutable_soid();
}
inline void CMsgSOCacheHaveVersion::set_allocated_soid(::CMsgSOIDOwner* soid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete soid_;
  }
  if (soid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgSOIDOwner>::GetOwningArena(soid);
    if (message_arena != submessage_arena) {
      soid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, soid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  soid_ = soid;
  // @@protoc_insertion_point(field_set_allocated:CMsgSOCacheHaveVersion.soid)
}

// optional fixed64 version = 2;
inline bool CMsgSOCacheHaveVersion::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSOCacheHaveVersion::has_version() const {
  return _internal_has_version();
}
inline void CMsgSOCacheHaveVersion::clear_version() {
  version_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgSOCacheHaveVersion::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgSOCacheHaveVersion::version() const {
  // @@protoc_insertion_point(field_get:CMsgSOCacheHaveVersion.version)
  return _internal_version();
}
inline void CMsgSOCacheHaveVersion::_internal_set_version(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  version_ = value;
}
inline void CMsgSOCacheHaveVersion::set_version(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:CMsgSOCacheHaveVersion.version)
}

// optional uint32 service_id = 3;
inline bool CMsgSOCacheHaveVersion::_internal_has_service_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgSOCacheHaveVersion::has_service_id() const {
  return _internal_has_service_id();
}
inline void CMsgSOCacheHaveVersion::clear_service_id() {
  service_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSOCacheHaveVersion::_internal_service_id() const {
  return service_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSOCacheHaveVersion::service_id() const {
  // @@protoc_insertion_point(field_get:CMsgSOCacheHaveVersion.service_id)
  return _internal_service_id();
}
inline void CMsgSOCacheHaveVersion::_internal_set_service_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  service_id_ = value;
}
inline void CMsgSOCacheHaveVersion::set_service_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_service_id(value);
  // @@protoc_insertion_point(field_set:CMsgSOCacheHaveVersion.service_id)
}

// -------------------------------------------------------------------

// CMsgConnectionStatus

// optional .GCConnectionStatus status = 1 [default = GCConnectionStatus_HAVE_SESSION];
inline bool CMsgConnectionStatus::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgConnectionStatus::has_status() const {
  return _internal_has_status();
}
inline void CMsgConnectionStatus::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::GCConnectionStatus CMsgConnectionStatus::_internal_status() const {
  return static_cast< ::GCConnectionStatus >(status_);
}
inline ::GCConnectionStatus CMsgConnectionStatus::status() const {
  // @@protoc_insertion_point(field_get:CMsgConnectionStatus.status)
  return _internal_status();
}
inline void CMsgConnectionStatus::_internal_set_status(::GCConnectionStatus value) {
  assert(::GCConnectionStatus_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  status_ = value;
}
inline void CMsgConnectionStatus::set_status(::GCConnectionStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:CMsgConnectionStatus.status)
}

// optional uint32 client_session_need = 2;
inline bool CMsgConnectionStatus::_internal_has_client_session_need() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgConnectionStatus::has_client_session_need() const {
  return _internal_has_client_session_need();
}
inline void CMsgConnectionStatus::clear_client_session_need() {
  client_session_need_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgConnectionStatus::_internal_client_session_need() const {
  return client_session_need_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgConnectionStatus::client_session_need() const {
  // @@protoc_insertion_point(field_get:CMsgConnectionStatus.client_session_need)
  return _internal_client_session_need();
}
inline void CMsgConnectionStatus::_internal_set_client_session_need(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  client_session_need_ = value;
}
inline void CMsgConnectionStatus::set_client_session_need(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_client_session_need(value);
  // @@protoc_insertion_point(field_set:CMsgConnectionStatus.client_session_need)
}

// optional int32 queue_position = 3;
inline bool CMsgConnectionStatus::_internal_has_queue_position() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgConnectionStatus::has_queue_position() const {
  return _internal_has_queue_position();
}
inline void CMsgConnectionStatus::clear_queue_position() {
  queue_position_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgConnectionStatus::_internal_queue_position() const {
  return queue_position_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgConnectionStatus::queue_position() const {
  // @@protoc_insertion_point(field_get:CMsgConnectionStatus.queue_position)
  return _internal_queue_position();
}
inline void CMsgConnectionStatus::_internal_set_queue_position(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  queue_position_ = value;
}
inline void CMsgConnectionStatus::set_queue_position(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_queue_position(value);
  // @@protoc_insertion_point(field_set:CMsgConnectionStatus.queue_position)
}

// optional int32 queue_size = 4;
inline bool CMsgConnectionStatus::_internal_has_queue_size() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgConnectionStatus::has_queue_size() const {
  return _internal_has_queue_size();
}
inline void CMsgConnectionStatus::clear_queue_size() {
  queue_size_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgConnectionStatus::_internal_queue_size() const {
  return queue_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgConnectionStatus::queue_size() const {
  // @@protoc_insertion_point(field_get:CMsgConnectionStatus.queue_size)
  return _internal_queue_size();
}
inline void CMsgConnectionStatus::_internal_set_queue_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  queue_size_ = value;
}
inline void CMsgConnectionStatus::set_queue_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_queue_size(value);
  // @@protoc_insertion_point(field_set:CMsgConnectionStatus.queue_size)
}

// optional int32 wait_seconds = 5;
inline bool CMsgConnectionStatus::_internal_has_wait_seconds() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgConnectionStatus::has_wait_seconds() const {
  return _internal_has_wait_seconds();
}
inline void CMsgConnectionStatus::clear_wait_seconds() {
  wait_seconds_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgConnectionStatus::_internal_wait_seconds() const {
  return wait_seconds_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgConnectionStatus::wait_seconds() const {
  // @@protoc_insertion_point(field_get:CMsgConnectionStatus.wait_seconds)
  return _internal_wait_seconds();
}
inline void CMsgConnectionStatus::_internal_set_wait_seconds(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  wait_seconds_ = value;
}
inline void CMsgConnectionStatus::set_wait_seconds(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_wait_seconds(value);
  // @@protoc_insertion_point(field_set:CMsgConnectionStatus.wait_seconds)
}

// optional int32 estimated_wait_seconds_remaining = 6;
inline bool CMsgConnectionStatus::_internal_has_estimated_wait_seconds_remaining() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgConnectionStatus::has_estimated_wait_seconds_remaining() const {
  return _internal_has_estimated_wait_seconds_remaining();
}
inline void CMsgConnectionStatus::clear_estimated_wait_seconds_remaining() {
  estimated_wait_seconds_remaining_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgConnectionStatus::_internal_estimated_wait_seconds_remaining() const {
  return estimated_wait_seconds_remaining_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgConnectionStatus::estimated_wait_seconds_remaining() const {
  // @@protoc_insertion_point(field_get:CMsgConnectionStatus.estimated_wait_seconds_remaining)
  return _internal_estimated_wait_seconds_remaining();
}
inline void CMsgConnectionStatus::_internal_set_estimated_wait_seconds_remaining(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  estimated_wait_seconds_remaining_ = value;
}
inline void CMsgConnectionStatus::set_estimated_wait_seconds_remaining(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_estimated_wait_seconds_remaining(value);
  // @@protoc_insertion_point(field_set:CMsgConnectionStatus.estimated_wait_seconds_remaining)
}

// -------------------------------------------------------------------

// CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions

// optional uint32 service_id = 1;
inline bool CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::_internal_has_service_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::has_service_id() const {
  return _internal_has_service_id();
}
inline void CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::clear_service_id() {
  service_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::_internal_service_id() const {
  return service_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::service_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions.service_id)
  return _internal_service_id();
}
inline void CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::_internal_set_service_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  service_id_ = value;
}
inline void CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::set_service_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_service_id(value);
  // @@protoc_insertion_point(field_set:CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions.service_id)
}

// optional uint64 version = 2;
inline bool CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::has_version() const {
  return _internal_has_version();
}
inline void CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::clear_version() {
  version_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::version() const {
  // @@protoc_insertion_point(field_get:CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions.version)
  return _internal_version();
}
inline void CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::_internal_set_version(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  version_ = value;
}
inline void CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::set_version(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions.version)
}

// -------------------------------------------------------------------

// CMsgGCToGCSOCacheSubscribe

// optional fixed64 subscriber = 1;
inline bool CMsgGCToGCSOCacheSubscribe::_internal_has_subscriber() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCToGCSOCacheSubscribe::has_subscriber() const {
  return _internal_has_subscriber();
}
inline void CMsgGCToGCSOCacheSubscribe::clear_subscriber() {
  subscriber_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCToGCSOCacheSubscribe::_internal_subscriber() const {
  return subscriber_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCToGCSOCacheSubscribe::subscriber() const {
  // @@protoc_insertion_point(field_get:CMsgGCToGCSOCacheSubscribe.subscriber)
  return _internal_subscriber();
}
inline void CMsgGCToGCSOCacheSubscribe::_internal_set_subscriber(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  subscriber_ = value;
}
inline void CMsgGCToGCSOCacheSubscribe::set_subscriber(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_subscriber(value);
  // @@protoc_insertion_point(field_set:CMsgGCToGCSOCacheSubscribe.subscriber)
}

// optional fixed64 subscribe_to = 2;
inline bool CMsgGCToGCSOCacheSubscribe::_internal_has_subscribe_to() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCToGCSOCacheSubscribe::has_subscribe_to() const {
  return _internal_has_subscribe_to();
}
inline void CMsgGCToGCSOCacheSubscribe::clear_subscribe_to() {
  subscribe_to_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCToGCSOCacheSubscribe::_internal_subscribe_to() const {
  return subscribe_to_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCToGCSOCacheSubscribe::subscribe_to() const {
  // @@protoc_insertion_point(field_get:CMsgGCToGCSOCacheSubscribe.subscribe_to)
  return _internal_subscribe_to();
}
inline void CMsgGCToGCSOCacheSubscribe::_internal_set_subscribe_to(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  subscribe_to_ = value;
}
inline void CMsgGCToGCSOCacheSubscribe::set_subscribe_to(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_subscribe_to(value);
  // @@protoc_insertion_point(field_set:CMsgGCToGCSOCacheSubscribe.subscribe_to)
}

// optional fixed64 sync_version = 3;
inline bool CMsgGCToGCSOCacheSubscribe::_internal_has_sync_version() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGCToGCSOCacheSubscribe::has_sync_version() const {
  return _internal_has_sync_version();
}
inline void CMsgGCToGCSOCacheSubscribe::clear_sync_version() {
  sync_version_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCToGCSOCacheSubscribe::_internal_sync_version() const {
  return sync_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCToGCSOCacheSubscribe::sync_version() const {
  // @@protoc_insertion_point(field_get:CMsgGCToGCSOCacheSubscribe.sync_version)
  return _internal_sync_version();
}
inline void CMsgGCToGCSOCacheSubscribe::_internal_set_sync_version(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  sync_version_ = value;
}
inline void CMsgGCToGCSOCacheSubscribe::set_sync_version(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sync_version(value);
  // @@protoc_insertion_point(field_set:CMsgGCToGCSOCacheSubscribe.sync_version)
}

// repeated .CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions have_versions = 4;
inline int CMsgGCToGCSOCacheSubscribe::_internal_have_versions_size() const {
  return have_versions_.size();
}
inline int CMsgGCToGCSOCacheSubscribe::have_versions_size() const {
  return _internal_have_versions_size();
}
inline void CMsgGCToGCSOCacheSubscribe::clear_have_versions() {
  have_versions_.Clear();
}
inline ::CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions* CMsgGCToGCSOCacheSubscribe::mutable_have_versions(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGCToGCSOCacheSubscribe.have_versions)
  return have_versions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions >*
CMsgGCToGCSOCacheSubscribe::mutable_have_versions() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCToGCSOCacheSubscribe.have_versions)
  return &have_versions_;
}
inline const ::CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions& CMsgGCToGCSOCacheSubscribe::_internal_have_versions(int index) const {
  return have_versions_.Get(index);
}
inline const ::CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions& CMsgGCToGCSOCacheSubscribe::have_versions(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCToGCSOCacheSubscribe.have_versions)
  return _internal_have_versions(index);
}
inline ::CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions* CMsgGCToGCSOCacheSubscribe::_internal_add_have_versions() {
  return have_versions_.Add();
}
inline ::CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions* CMsgGCToGCSOCacheSubscribe::add_have_versions() {
  // @@protoc_insertion_point(field_add:CMsgGCToGCSOCacheSubscribe.have_versions)
  return _internal_add_have_versions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions >&
CMsgGCToGCSOCacheSubscribe::have_versions() const {
  // @@protoc_insertion_point(field_list:CMsgGCToGCSOCacheSubscribe.have_versions)
  return have_versions_;
}

// -------------------------------------------------------------------

// CMsgGCToGCSOCacheUnsubscribe

// optional fixed64 subscriber = 1;
inline bool CMsgGCToGCSOCacheUnsubscribe::_internal_has_subscriber() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCToGCSOCacheUnsubscribe::has_subscriber() const {
  return _internal_has_subscriber();
}
inline void CMsgGCToGCSOCacheUnsubscribe::clear_subscriber() {
  subscriber_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCToGCSOCacheUnsubscribe::_internal_subscriber() const {
  return subscriber_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCToGCSOCacheUnsubscribe::subscriber() const {
  // @@protoc_insertion_point(field_get:CMsgGCToGCSOCacheUnsubscribe.subscriber)
  return _internal_subscriber();
}
inline void CMsgGCToGCSOCacheUnsubscribe::_internal_set_subscriber(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  subscriber_ = value;
}
inline void CMsgGCToGCSOCacheUnsubscribe::set_subscriber(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_subscriber(value);
  // @@protoc_insertion_point(field_set:CMsgGCToGCSOCacheUnsubscribe.subscriber)
}

// optional fixed64 unsubscribe_from = 2;
inline bool CMsgGCToGCSOCacheUnsubscribe::_internal_has_unsubscribe_from() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCToGCSOCacheUnsubscribe::has_unsubscribe_from() const {
  return _internal_has_unsubscribe_from();
}
inline void CMsgGCToGCSOCacheUnsubscribe::clear_unsubscribe_from() {
  unsubscribe_from_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCToGCSOCacheUnsubscribe::_internal_unsubscribe_from() const {
  return unsubscribe_from_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCToGCSOCacheUnsubscribe::unsubscribe_from() const {
  // @@protoc_insertion_point(field_get:CMsgGCToGCSOCacheUnsubscribe.unsubscribe_from)
  return _internal_unsubscribe_from();
}
inline void CMsgGCToGCSOCacheUnsubscribe::_internal_set_unsubscribe_from(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  unsubscribe_from_ = value;
}
inline void CMsgGCToGCSOCacheUnsubscribe::set_unsubscribe_from(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_unsubscribe_from(value);
  // @@protoc_insertion_point(field_set:CMsgGCToGCSOCacheUnsubscribe.unsubscribe_from)
}

// -------------------------------------------------------------------

// CMsgGCClientPing

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::PartnerAccountType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PartnerAccountType>() {
  return ::PartnerAccountType_descriptor();
}
template <> struct is_proto_enum< ::GCConnectionStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GCConnectionStatus>() {
  return ::GCConnectionStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_gcsdk_5fgcmessages_2eproto
