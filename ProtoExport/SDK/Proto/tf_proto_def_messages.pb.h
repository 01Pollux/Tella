// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tf_proto_def_messages.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tf_5fproto_5fdef_5fmessages_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tf_5fproto_5fdef_5fmessages_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/descriptor.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#include "SDK/ProtoExport.hpp"
#define PROTOBUF_INTERNAL_EXPORT_tf_5fproto_5fdef_5fmessages_2eproto M0PROTO
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct M0PROTO TableStruct_tf_5fproto_5fdef_5fmessages_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[38]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern M0PROTO const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tf_5fproto_5fdef_5fmessages_2eproto;
class CMsgFieldID;
struct CMsgFieldIDDefaultTypeInternal;
M0PROTO extern CMsgFieldIDDefaultTypeInternal _CMsgFieldID_default_instance_;
class CMsgFieldID_CMsgField;
struct CMsgFieldID_CMsgFieldDefaultTypeInternal;
M0PROTO extern CMsgFieldID_CMsgFieldDefaultTypeInternal _CMsgFieldID_CMsgField_default_instance_;
class CMsgHeaderOnly;
struct CMsgHeaderOnlyDefaultTypeInternal;
M0PROTO extern CMsgHeaderOnlyDefaultTypeInternal _CMsgHeaderOnly_default_instance_;
class CMsgPaintKit_Definition;
struct CMsgPaintKit_DefinitionDefaultTypeInternal;
M0PROTO extern CMsgPaintKit_DefinitionDefaultTypeInternal _CMsgPaintKit_Definition_default_instance_;
class CMsgPaintKit_Definition_Item;
struct CMsgPaintKit_Definition_ItemDefaultTypeInternal;
M0PROTO extern CMsgPaintKit_Definition_ItemDefaultTypeInternal _CMsgPaintKit_Definition_Item_default_instance_;
class CMsgPaintKit_Definition_Item_ItemData;
struct CMsgPaintKit_Definition_Item_ItemDataDefaultTypeInternal;
M0PROTO extern CMsgPaintKit_Definition_Item_ItemDataDefaultTypeInternal _CMsgPaintKit_Definition_Item_ItemData_default_instance_;
class CMsgPaintKit_ItemDefinition;
struct CMsgPaintKit_ItemDefinitionDefaultTypeInternal;
M0PROTO extern CMsgPaintKit_ItemDefinitionDefaultTypeInternal _CMsgPaintKit_ItemDefinition_default_instance_;
class CMsgPaintKit_ItemDefinition_Definition;
struct CMsgPaintKit_ItemDefinition_DefinitionDefaultTypeInternal;
M0PROTO extern CMsgPaintKit_ItemDefinition_DefinitionDefaultTypeInternal _CMsgPaintKit_ItemDefinition_Definition_default_instance_;
class CMsgPaintKit_Operation;
struct CMsgPaintKit_OperationDefaultTypeInternal;
M0PROTO extern CMsgPaintKit_OperationDefaultTypeInternal _CMsgPaintKit_Operation_default_instance_;
class CMsgPaintKit_OperationNode;
struct CMsgPaintKit_OperationNodeDefaultTypeInternal;
M0PROTO extern CMsgPaintKit_OperationNodeDefaultTypeInternal _CMsgPaintKit_OperationNode_default_instance_;
class CMsgPaintKit_OperationStage;
struct CMsgPaintKit_OperationStageDefaultTypeInternal;
M0PROTO extern CMsgPaintKit_OperationStageDefaultTypeInternal _CMsgPaintKit_OperationStage_default_instance_;
class CMsgPaintKit_Operation_CombineStage;
struct CMsgPaintKit_Operation_CombineStageDefaultTypeInternal;
M0PROTO extern CMsgPaintKit_Operation_CombineStageDefaultTypeInternal _CMsgPaintKit_Operation_CombineStage_default_instance_;
class CMsgPaintKit_Operation_SelectStage;
struct CMsgPaintKit_Operation_SelectStageDefaultTypeInternal;
M0PROTO extern CMsgPaintKit_Operation_SelectStageDefaultTypeInternal _CMsgPaintKit_Operation_SelectStage_default_instance_;
class CMsgPaintKit_Operation_Sticker;
struct CMsgPaintKit_Operation_StickerDefaultTypeInternal;
M0PROTO extern CMsgPaintKit_Operation_StickerDefaultTypeInternal _CMsgPaintKit_Operation_Sticker_default_instance_;
class CMsgPaintKit_Operation_StickerStage;
struct CMsgPaintKit_Operation_StickerStageDefaultTypeInternal;
M0PROTO extern CMsgPaintKit_Operation_StickerStageDefaultTypeInternal _CMsgPaintKit_Operation_StickerStage_default_instance_;
class CMsgPaintKit_Operation_TextureStage;
struct CMsgPaintKit_Operation_TextureStageDefaultTypeInternal;
M0PROTO extern CMsgPaintKit_Operation_TextureStageDefaultTypeInternal _CMsgPaintKit_Operation_TextureStage_default_instance_;
class CMsgPaintKit_Variables;
struct CMsgPaintKit_VariablesDefaultTypeInternal;
M0PROTO extern CMsgPaintKit_VariablesDefaultTypeInternal _CMsgPaintKit_Variables_default_instance_;
class CMsgProtoDefHeader;
struct CMsgProtoDefHeaderDefaultTypeInternal;
M0PROTO extern CMsgProtoDefHeaderDefaultTypeInternal _CMsgProtoDefHeader_default_instance_;
class CMsgProtoDefID;
struct CMsgProtoDefIDDefaultTypeInternal;
M0PROTO extern CMsgProtoDefIDDefaultTypeInternal _CMsgProtoDefID_default_instance_;
class CMsgQuestDef;
struct CMsgQuestDefDefaultTypeInternal;
M0PROTO extern CMsgQuestDefDefaultTypeInternal _CMsgQuestDef_default_instance_;
class CMsgQuestDef_MMCriteria;
struct CMsgQuestDef_MMCriteriaDefaultTypeInternal;
M0PROTO extern CMsgQuestDef_MMCriteriaDefaultTypeInternal _CMsgQuestDef_MMCriteria_default_instance_;
class CMsgQuestDef_ObjectiveInstance;
struct CMsgQuestDef_ObjectiveInstanceDefaultTypeInternal;
M0PROTO extern CMsgQuestDef_ObjectiveInstanceDefaultTypeInternal _CMsgQuestDef_ObjectiveInstance_default_instance_;
class CMsgQuestMapNodeCondition;
struct CMsgQuestMapNodeConditionDefaultTypeInternal;
M0PROTO extern CMsgQuestMapNodeConditionDefaultTypeInternal _CMsgQuestMapNodeCondition_default_instance_;
class CMsgQuestMapNodeCondition_Logic;
struct CMsgQuestMapNodeCondition_LogicDefaultTypeInternal;
M0PROTO extern CMsgQuestMapNodeCondition_LogicDefaultTypeInternal _CMsgQuestMapNodeCondition_Logic_default_instance_;
class CMsgQuestMapNodeCondition_NodeState;
struct CMsgQuestMapNodeCondition_NodeStateDefaultTypeInternal;
M0PROTO extern CMsgQuestMapNodeCondition_NodeStateDefaultTypeInternal _CMsgQuestMapNodeCondition_NodeState_default_instance_;
class CMsgQuestMapNodeDef;
struct CMsgQuestMapNodeDefDefaultTypeInternal;
M0PROTO extern CMsgQuestMapNodeDefDefaultTypeInternal _CMsgQuestMapNodeDef_default_instance_;
class CMsgQuestMapRegionDef;
struct CMsgQuestMapRegionDefDefaultTypeInternal;
M0PROTO extern CMsgQuestMapRegionDefDefaultTypeInternal _CMsgQuestMapRegionDef_default_instance_;
class CMsgQuestMapRegionDef_RegionLink;
struct CMsgQuestMapRegionDef_RegionLinkDefaultTypeInternal;
M0PROTO extern CMsgQuestMapRegionDef_RegionLinkDefaultTypeInternal _CMsgQuestMapRegionDef_RegionLink_default_instance_;
class CMsgQuestMapStarType;
struct CMsgQuestMapStarTypeDefaultTypeInternal;
M0PROTO extern CMsgQuestMapStarTypeDefaultTypeInternal _CMsgQuestMapStarType_default_instance_;
class CMsgQuestMapStoreItem;
struct CMsgQuestMapStoreItemDefaultTypeInternal;
M0PROTO extern CMsgQuestMapStoreItemDefaultTypeInternal _CMsgQuestMapStoreItem_default_instance_;
class CMsgQuestObjectiveDef;
struct CMsgQuestObjectiveDefDefaultTypeInternal;
M0PROTO extern CMsgQuestObjectiveDefDefaultTypeInternal _CMsgQuestObjectiveDef_default_instance_;
class CMsgQuestTheme;
struct CMsgQuestThemeDefaultTypeInternal;
M0PROTO extern CMsgQuestThemeDefaultTypeInternal _CMsgQuestTheme_default_instance_;
class CMsgQuestTheme_WeightedString;
struct CMsgQuestTheme_WeightedStringDefaultTypeInternal;
M0PROTO extern CMsgQuestTheme_WeightedStringDefaultTypeInternal _CMsgQuestTheme_WeightedString_default_instance_;
class CMsgQuestTheme_WeightedStringSet;
struct CMsgQuestTheme_WeightedStringSetDefaultTypeInternal;
M0PROTO extern CMsgQuestTheme_WeightedStringSetDefaultTypeInternal _CMsgQuestTheme_WeightedStringSet_default_instance_;
class CMsgUniversalFieldID;
struct CMsgUniversalFieldIDDefaultTypeInternal;
M0PROTO extern CMsgUniversalFieldIDDefaultTypeInternal _CMsgUniversalFieldID_default_instance_;
class CMsgValidTypes;
struct CMsgValidTypesDefaultTypeInternal;
M0PROTO extern CMsgValidTypesDefaultTypeInternal _CMsgValidTypes_default_instance_;
class CMsgVarField;
struct CMsgVarFieldDefaultTypeInternal;
M0PROTO extern CMsgVarFieldDefaultTypeInternal _CMsgVarField_default_instance_;
class CMsgVariableDefinition;
struct CMsgVariableDefinitionDefaultTypeInternal;
M0PROTO extern CMsgVariableDefinitionDefaultTypeInternal _CMsgVariableDefinition_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> M0PROTO ::CMsgFieldID* Arena::CreateMaybeMessage<::CMsgFieldID>(Arena*);
template<> M0PROTO ::CMsgFieldID_CMsgField* Arena::CreateMaybeMessage<::CMsgFieldID_CMsgField>(Arena*);
template<> M0PROTO ::CMsgHeaderOnly* Arena::CreateMaybeMessage<::CMsgHeaderOnly>(Arena*);
template<> M0PROTO ::CMsgPaintKit_Definition* Arena::CreateMaybeMessage<::CMsgPaintKit_Definition>(Arena*);
template<> M0PROTO ::CMsgPaintKit_Definition_Item* Arena::CreateMaybeMessage<::CMsgPaintKit_Definition_Item>(Arena*);
template<> M0PROTO ::CMsgPaintKit_Definition_Item_ItemData* Arena::CreateMaybeMessage<::CMsgPaintKit_Definition_Item_ItemData>(Arena*);
template<> M0PROTO ::CMsgPaintKit_ItemDefinition* Arena::CreateMaybeMessage<::CMsgPaintKit_ItemDefinition>(Arena*);
template<> M0PROTO ::CMsgPaintKit_ItemDefinition_Definition* Arena::CreateMaybeMessage<::CMsgPaintKit_ItemDefinition_Definition>(Arena*);
template<> M0PROTO ::CMsgPaintKit_Operation* Arena::CreateMaybeMessage<::CMsgPaintKit_Operation>(Arena*);
template<> M0PROTO ::CMsgPaintKit_OperationNode* Arena::CreateMaybeMessage<::CMsgPaintKit_OperationNode>(Arena*);
template<> M0PROTO ::CMsgPaintKit_OperationStage* Arena::CreateMaybeMessage<::CMsgPaintKit_OperationStage>(Arena*);
template<> M0PROTO ::CMsgPaintKit_Operation_CombineStage* Arena::CreateMaybeMessage<::CMsgPaintKit_Operation_CombineStage>(Arena*);
template<> M0PROTO ::CMsgPaintKit_Operation_SelectStage* Arena::CreateMaybeMessage<::CMsgPaintKit_Operation_SelectStage>(Arena*);
template<> M0PROTO ::CMsgPaintKit_Operation_Sticker* Arena::CreateMaybeMessage<::CMsgPaintKit_Operation_Sticker>(Arena*);
template<> M0PROTO ::CMsgPaintKit_Operation_StickerStage* Arena::CreateMaybeMessage<::CMsgPaintKit_Operation_StickerStage>(Arena*);
template<> M0PROTO ::CMsgPaintKit_Operation_TextureStage* Arena::CreateMaybeMessage<::CMsgPaintKit_Operation_TextureStage>(Arena*);
template<> M0PROTO ::CMsgPaintKit_Variables* Arena::CreateMaybeMessage<::CMsgPaintKit_Variables>(Arena*);
template<> M0PROTO ::CMsgProtoDefHeader* Arena::CreateMaybeMessage<::CMsgProtoDefHeader>(Arena*);
template<> M0PROTO ::CMsgProtoDefID* Arena::CreateMaybeMessage<::CMsgProtoDefID>(Arena*);
template<> M0PROTO ::CMsgQuestDef* Arena::CreateMaybeMessage<::CMsgQuestDef>(Arena*);
template<> M0PROTO ::CMsgQuestDef_MMCriteria* Arena::CreateMaybeMessage<::CMsgQuestDef_MMCriteria>(Arena*);
template<> M0PROTO ::CMsgQuestDef_ObjectiveInstance* Arena::CreateMaybeMessage<::CMsgQuestDef_ObjectiveInstance>(Arena*);
template<> M0PROTO ::CMsgQuestMapNodeCondition* Arena::CreateMaybeMessage<::CMsgQuestMapNodeCondition>(Arena*);
template<> M0PROTO ::CMsgQuestMapNodeCondition_Logic* Arena::CreateMaybeMessage<::CMsgQuestMapNodeCondition_Logic>(Arena*);
template<> M0PROTO ::CMsgQuestMapNodeCondition_NodeState* Arena::CreateMaybeMessage<::CMsgQuestMapNodeCondition_NodeState>(Arena*);
template<> M0PROTO ::CMsgQuestMapNodeDef* Arena::CreateMaybeMessage<::CMsgQuestMapNodeDef>(Arena*);
template<> M0PROTO ::CMsgQuestMapRegionDef* Arena::CreateMaybeMessage<::CMsgQuestMapRegionDef>(Arena*);
template<> M0PROTO ::CMsgQuestMapRegionDef_RegionLink* Arena::CreateMaybeMessage<::CMsgQuestMapRegionDef_RegionLink>(Arena*);
template<> M0PROTO ::CMsgQuestMapStarType* Arena::CreateMaybeMessage<::CMsgQuestMapStarType>(Arena*);
template<> M0PROTO ::CMsgQuestMapStoreItem* Arena::CreateMaybeMessage<::CMsgQuestMapStoreItem>(Arena*);
template<> M0PROTO ::CMsgQuestObjectiveDef* Arena::CreateMaybeMessage<::CMsgQuestObjectiveDef>(Arena*);
template<> M0PROTO ::CMsgQuestTheme* Arena::CreateMaybeMessage<::CMsgQuestTheme>(Arena*);
template<> M0PROTO ::CMsgQuestTheme_WeightedString* Arena::CreateMaybeMessage<::CMsgQuestTheme_WeightedString>(Arena*);
template<> M0PROTO ::CMsgQuestTheme_WeightedStringSet* Arena::CreateMaybeMessage<::CMsgQuestTheme_WeightedStringSet>(Arena*);
template<> M0PROTO ::CMsgUniversalFieldID* Arena::CreateMaybeMessage<::CMsgUniversalFieldID>(Arena*);
template<> M0PROTO ::CMsgValidTypes* Arena::CreateMaybeMessage<::CMsgValidTypes>(Arena*);
template<> M0PROTO ::CMsgVarField* Arena::CreateMaybeMessage<::CMsgVarField>(Arena*);
template<> M0PROTO ::CMsgVariableDefinition* Arena::CreateMaybeMessage<::CMsgVariableDefinition>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum CMsgQuestObjectiveDef_ETF2GameModes : int {
  CMsgQuestObjectiveDef_ETF2GameModes_kGameCategory_Escort = 0,
  CMsgQuestObjectiveDef_ETF2GameModes_kGameCategory_CTF = 1,
  CMsgQuestObjectiveDef_ETF2GameModes_kGameCategory_AttackDefense = 2,
  CMsgQuestObjectiveDef_ETF2GameModes_kGameCategory_Koth = 3,
  CMsgQuestObjectiveDef_ETF2GameModes_kGameCategory_CP = 4,
  CMsgQuestObjectiveDef_ETF2GameModes_kGameCategory_EscortRace = 5,
  CMsgQuestObjectiveDef_ETF2GameModes_kGameCategory_EventMix = 6,
  CMsgQuestObjectiveDef_ETF2GameModes_kGameCategory_SD = 7,
  CMsgQuestObjectiveDef_ETF2GameModes_kGameCategory_Quickplay = 8,
  CMsgQuestObjectiveDef_ETF2GameModes_kGameCategory_Event247 = 9,
  CMsgQuestObjectiveDef_ETF2GameModes_kGameCategory_Arena = 10,
  CMsgQuestObjectiveDef_ETF2GameModes_kGameCategory_RobotDestruction = 11,
  CMsgQuestObjectiveDef_ETF2GameModes_kGameCategory_Powerup = 12,
  CMsgQuestObjectiveDef_ETF2GameModes_kGameCategory_Featured = 13,
  CMsgQuestObjectiveDef_ETF2GameModes_kGameCategory_Passtime = 14,
  CMsgQuestObjectiveDef_ETF2GameModes_kGameCategory_Community_Update = 15,
  CMsgQuestObjectiveDef_ETF2GameModes_kGameCategory_Misc = 16,
  CMsgQuestObjectiveDef_ETF2GameModes_kGameCategory_Competitive_6v6 = 17,
  CMsgQuestObjectiveDef_ETF2GameModes_kGameCategory_Other = 18,
  CMsgQuestObjectiveDef_ETF2GameModes_kGameCategory_Halloween = 19
};
M0PROTO bool CMsgQuestObjectiveDef_ETF2GameModes_IsValid(int value);
constexpr CMsgQuestObjectiveDef_ETF2GameModes CMsgQuestObjectiveDef_ETF2GameModes_ETF2GameModes_MIN = CMsgQuestObjectiveDef_ETF2GameModes_kGameCategory_Escort;
constexpr CMsgQuestObjectiveDef_ETF2GameModes CMsgQuestObjectiveDef_ETF2GameModes_ETF2GameModes_MAX = CMsgQuestObjectiveDef_ETF2GameModes_kGameCategory_Halloween;
constexpr int CMsgQuestObjectiveDef_ETF2GameModes_ETF2GameModes_ARRAYSIZE = CMsgQuestObjectiveDef_ETF2GameModes_ETF2GameModes_MAX + 1;

M0PROTO const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgQuestObjectiveDef_ETF2GameModes_descriptor();
template<typename T>
inline const std::string& CMsgQuestObjectiveDef_ETF2GameModes_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgQuestObjectiveDef_ETF2GameModes>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgQuestObjectiveDef_ETF2GameModes_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgQuestObjectiveDef_ETF2GameModes_descriptor(), enum_t_value);
}
inline bool CMsgQuestObjectiveDef_ETF2GameModes_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgQuestObjectiveDef_ETF2GameModes* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgQuestObjectiveDef_ETF2GameModes>(
    CMsgQuestObjectiveDef_ETF2GameModes_descriptor(), name, value);
}
enum CMsgQuestObjectiveDef_ETF2Conditions : int {
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_AIMING = 0,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_ZOOMED = 1,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_DISGUISING = 2,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_DISGUISED = 3,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_STEALTHED = 4,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_INVULNERABLE = 5,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_TELEPORTED = 6,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_TAUNTING = 7,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_INVULNERABLE_WEARINGOFF = 8,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_STEALTHED_BLINK = 9,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_SELECTED_TO_TELEPORT = 10,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_CRITBOOSTED = 11,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_TMPDAMAGEBONUS = 12,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_FEIGN_DEATH = 13,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_PHASE = 14,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_STUNNED = 15,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_OFFENSEBUFF = 16,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_SHIELD_CHARGE = 17,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_DEMO_BUFF = 18,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_ENERGY_BUFF = 19,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_RADIUSHEAL = 20,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_HEALTH_BUFF = 21,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_BURNING = 22,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_HEALTH_OVERHEALED = 23,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_URINE = 24,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_BLEEDING = 25,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_DEFENSEBUFF = 26,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_MAD_MILK = 27,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_MEGAHEAL = 28,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_REGENONDAMAGEBUFF = 29,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_MARKEDFORDEATH = 30,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_NOHEALINGDAMAGEBUFF = 31,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_SPEED_BOOST = 32,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_CRITBOOSTED_PUMPKIN = 33,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_CRITBOOSTED_USER_BUFF = 34,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_CRITBOOSTED_DEMO_CHARGE = 35,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_SODAPOPPER_HYPE = 36,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_CRITBOOSTED_FIRST_BLOOD = 37,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_CRITBOOSTED_BONUS_TIME = 38,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_CRITBOOSTED_CTF_CAPTURE = 39,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_CRITBOOSTED_ON_KILL = 40,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_CANNOT_SWITCH_FROM_MELEE = 41,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_DEFENSEBUFF_NO_CRIT_BLOCK = 42,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_REPROGRAMMED = 43,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_CRITBOOSTED_RAGE_BUFF = 44,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_DEFENSEBUFF_HIGH = 45,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_SNIPERCHARGE_RAGE_BUFF = 46,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_DISGUISE_WEARINGOFF = 47,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_MARKEDFORDEATH_SILENT = 48,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_DISGUISED_AS_DISPENSER = 49,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_SAPPED = 50,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_INVULNERABLE_HIDE_UNLESS_DAMAGED = 51,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_INVULNERABLE_USER_BUFF = 52,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_HALLOWEEN_BOMB_HEAD = 53,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_HALLOWEEN_THRILLER = 54,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_RADIUSHEAL_ON_DAMAGE = 55,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_CRITBOOSTED_CARD_EFFECT = 56,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_INVULNERABLE_CARD_EFFECT = 57,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_MEDIGUN_UBER_BULLET_RESIST = 58,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_MEDIGUN_UBER_BLAST_RESIST = 59,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_MEDIGUN_UBER_FIRE_RESIST = 60,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_MEDIGUN_SMALL_BULLET_RESIST = 61,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_MEDIGUN_SMALL_BLAST_RESIST = 62,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_MEDIGUN_SMALL_FIRE_RESIST = 63,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_STEALTHED_USER_BUFF = 64,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_MEDIGUN_DEBUFF = 65,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_STEALTHED_USER_BUFF_FADING = 66,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_BULLET_IMMUNE = 67,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_BLAST_IMMUNE = 68,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_FIRE_IMMUNE = 69,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_PREVENT_DEATH = 70,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_MVM_BOT_STUN_RADIOWAVE = 71,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_HALLOWEEN_SPEED_BOOST = 72,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_HALLOWEEN_QUICK_HEAL = 73,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_HALLOWEEN_GIANT = 74,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_HALLOWEEN_TINY = 75,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_HALLOWEEN_IN_HELL = 76,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_HALLOWEEN_GHOST_MODE = 77,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_MINICRITBOOSTED_ON_KILL = 78,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_OBSCURED_SMOKE = 79,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_PARACHUTE_ACTIVE = 80,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_BLASTJUMPING = 81,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_HALLOWEEN_KART = 82,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_HALLOWEEN_KART_DASH = 83,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_BALLOON_HEAD = 84,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_MELEE_ONLY = 85,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_SWIMMING_CURSE = 86,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_FREEZE_INPUT = 87,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_HALLOWEEN_KART_CAGE = 88,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_DONOTUSE_0 = 89,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_RUNE_STRENGTH = 90,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_RUNE_HASTE = 91,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_RUNE_REGEN = 92,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_RUNE_RESIST = 93,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_RUNE_VAMPIRE = 94,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_RUNE_REFLECT = 95,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_RUNE_PRECISION = 96,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_RUNE_AGILITY = 97,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_GRAPPLINGHOOK = 98,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_GRAPPLINGHOOK_SAFEFALL = 99,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_GRAPPLINGHOOK_LATCHED = 100,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_GRAPPLINGHOOK_BLEEDING = 101,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_AFTERBURN_IMMUNE = 102,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_RUNE_KNOCKOUT = 103,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_RUNE_IMBALANCE = 104,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_CRITBOOSTED_RUNE_TEMP = 105,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_PASSTIME_INTERCEPTION = 106,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_SWIMMING_NO_EFFECTS = 107,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_PURGATORY = 108,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_RUNE_KING = 109,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_RUNE_PLAGUE = 110,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_RUNE_SUPERNOVA = 111,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_PLAGUE = 112,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_KING_BUFFED = 113,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_TEAM_GLOWS = 114,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_KNOCKED_INTO_AIR = 115,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_COMPETITIVE_WINNER = 116,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_COMPETITIVE_LOSER = 117,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_HEALING_DEBUFF = 118,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_PASSTIME_PENALTY_DEBUFF = 119,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_PARACHUTE_DEPLOYED = 120,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_NO_COMBAT_SPEED_BOOST = 121,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_TRANQ_SPY_BOOST = 122,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_TRANQ_MARKED = 123,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_ROCKETPACK = 126,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_ROCKETPACK_PASSENGER = 127,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_STEALTHED_PHASE = 128,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_CLIP_OVERLOAD = 129,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_SPY_CLASS_STEAL = 130,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_GAS = 131
};
M0PROTO bool CMsgQuestObjectiveDef_ETF2Conditions_IsValid(int value);
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef_ETF2Conditions_ETF2Conditions_MIN = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_AIMING;
constexpr CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef_ETF2Conditions_ETF2Conditions_MAX = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_GAS;
constexpr int CMsgQuestObjectiveDef_ETF2Conditions_ETF2Conditions_ARRAYSIZE = CMsgQuestObjectiveDef_ETF2Conditions_ETF2Conditions_MAX + 1;

M0PROTO const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgQuestObjectiveDef_ETF2Conditions_descriptor();
template<typename T>
inline const std::string& CMsgQuestObjectiveDef_ETF2Conditions_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgQuestObjectiveDef_ETF2Conditions>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgQuestObjectiveDef_ETF2Conditions_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgQuestObjectiveDef_ETF2Conditions_descriptor(), enum_t_value);
}
inline bool CMsgQuestObjectiveDef_ETF2Conditions_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgQuestObjectiveDef_ETF2Conditions* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgQuestObjectiveDef_ETF2Conditions>(
    CMsgQuestObjectiveDef_ETF2Conditions_descriptor(), name, value);
}
enum CMsgQuestObjectiveDef_ETF2Team : int {
  CMsgQuestObjectiveDef_ETF2Team_TF_TEAM_RED = 2,
  CMsgQuestObjectiveDef_ETF2Team_TF_TEAM_BLUE = 3
};
M0PROTO bool CMsgQuestObjectiveDef_ETF2Team_IsValid(int value);
constexpr CMsgQuestObjectiveDef_ETF2Team CMsgQuestObjectiveDef_ETF2Team_ETF2Team_MIN = CMsgQuestObjectiveDef_ETF2Team_TF_TEAM_RED;
constexpr CMsgQuestObjectiveDef_ETF2Team CMsgQuestObjectiveDef_ETF2Team_ETF2Team_MAX = CMsgQuestObjectiveDef_ETF2Team_TF_TEAM_BLUE;
constexpr int CMsgQuestObjectiveDef_ETF2Team_ETF2Team_ARRAYSIZE = CMsgQuestObjectiveDef_ETF2Team_ETF2Team_MAX + 1;

M0PROTO const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgQuestObjectiveDef_ETF2Team_descriptor();
template<typename T>
inline const std::string& CMsgQuestObjectiveDef_ETF2Team_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgQuestObjectiveDef_ETF2Team>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgQuestObjectiveDef_ETF2Team_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgQuestObjectiveDef_ETF2Team_descriptor(), enum_t_value);
}
inline bool CMsgQuestObjectiveDef_ETF2Team_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgQuestObjectiveDef_ETF2Team* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgQuestObjectiveDef_ETF2Team>(
    CMsgQuestObjectiveDef_ETF2Team_descriptor(), name, value);
}
enum LogicalOperation : int {
  AND = 0,
  OR = 1,
  NOT = 2
};
M0PROTO bool LogicalOperation_IsValid(int value);
constexpr LogicalOperation LogicalOperation_MIN = AND;
constexpr LogicalOperation LogicalOperation_MAX = NOT;
constexpr int LogicalOperation_ARRAYSIZE = LogicalOperation_MAX + 1;

M0PROTO const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LogicalOperation_descriptor();
template<typename T>
inline const std::string& LogicalOperation_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LogicalOperation>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LogicalOperation_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LogicalOperation_descriptor(), enum_t_value);
}
inline bool LogicalOperation_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LogicalOperation* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LogicalOperation>(
    LogicalOperation_descriptor(), name, value);
}
enum EValueDefinitionSource : int {
  REFERENCE_DEFINES = 0,
  PARENT_DEFINES = 1,
  THIS_DEFINES = 2,
  VARIABLE_DEFINES = 3,
  NOT_DEFINED = 4
};
M0PROTO bool EValueDefinitionSource_IsValid(int value);
constexpr EValueDefinitionSource EValueDefinitionSource_MIN = REFERENCE_DEFINES;
constexpr EValueDefinitionSource EValueDefinitionSource_MAX = NOT_DEFINED;
constexpr int EValueDefinitionSource_ARRAYSIZE = EValueDefinitionSource_MAX + 1;

M0PROTO const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EValueDefinitionSource_descriptor();
template<typename T>
inline const std::string& EValueDefinitionSource_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EValueDefinitionSource>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EValueDefinitionSource_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EValueDefinitionSource_descriptor(), enum_t_value);
}
inline bool EValueDefinitionSource_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EValueDefinitionSource* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EValueDefinitionSource>(
    EValueDefinitionSource_descriptor(), name, value);
}
enum ProtoDefTypes : int {
  DEF_TYPE_QUEST_MAP_NODE = 0,
  DEF_TYPE_QUEST_THEME = 2,
  DEF_TYPE_QUEST_MAP_REGION = 3,
  DEF_TYPE_QUEST = 4,
  DEF_TYPE_QUEST_OBJECTIVE = 5,
  DEF_TYPE_PAINTKIT_VARIABLES = 6,
  DEF_TYPE_PAINTKIT_OPERATION = 7,
  DEF_TYPE_PAINTKIT_ITEM_DEFINITION = 8,
  DEF_TYPE_PAINTKIT_DEFINITION = 9,
  DEF_TYPE_HEADER_ONLY = 10,
  DEF_TYPE_QUEST_MAP_STORE_ITEM = 11,
  DEF_TYPE_QUEST_MAP_STAR_TYPE = 12
};
M0PROTO bool ProtoDefTypes_IsValid(int value);
constexpr ProtoDefTypes ProtoDefTypes_MIN = DEF_TYPE_QUEST_MAP_NODE;
constexpr ProtoDefTypes ProtoDefTypes_MAX = DEF_TYPE_QUEST_MAP_STAR_TYPE;
constexpr int ProtoDefTypes_ARRAYSIZE = ProtoDefTypes_MAX + 1;

M0PROTO const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProtoDefTypes_descriptor();
template<typename T>
inline const std::string& ProtoDefTypes_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ProtoDefTypes>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ProtoDefTypes_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ProtoDefTypes_descriptor(), enum_t_value);
}
inline bool ProtoDefTypes_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ProtoDefTypes* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ProtoDefTypes>(
    ProtoDefTypes_descriptor(), name, value);
}
enum EQuestPoints : int {
  QUEST_POINTS_NOVICE = 0,
  QUEST_POINTS_ADVANCED = 1,
  QUEST_POINTS_EXPERT = 2
};
M0PROTO bool EQuestPoints_IsValid(int value);
constexpr EQuestPoints EQuestPoints_MIN = QUEST_POINTS_NOVICE;
constexpr EQuestPoints EQuestPoints_MAX = QUEST_POINTS_EXPERT;
constexpr int EQuestPoints_ARRAYSIZE = EQuestPoints_MAX + 1;

M0PROTO const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EQuestPoints_descriptor();
template<typename T>
inline const std::string& EQuestPoints_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EQuestPoints>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EQuestPoints_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EQuestPoints_descriptor(), enum_t_value);
}
inline bool EQuestPoints_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EQuestPoints* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EQuestPoints>(
    EQuestPoints_descriptor(), name, value);
}
enum EVarFieldType : int {
  VAR_TYPE_INVALID = 1,
  VAR_TYPE_FLOAT = 2,
  VAR_TYPE_DOUBLE = 3,
  VAR_TYPE_UINT32 = 4,
  VAR_TYPE_UINT64 = 5,
  VAR_TYPE_SINT32 = 6,
  VAR_TYPE_SINT64 = 7,
  VAR_TYPE_BOOL = 8,
  VAR_TYPE_STRING = 9
};
M0PROTO bool EVarFieldType_IsValid(int value);
constexpr EVarFieldType EVarFieldType_MIN = VAR_TYPE_INVALID;
constexpr EVarFieldType EVarFieldType_MAX = VAR_TYPE_STRING;
constexpr int EVarFieldType_ARRAYSIZE = EVarFieldType_MAX + 1;

M0PROTO const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EVarFieldType_descriptor();
template<typename T>
inline const std::string& EVarFieldType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EVarFieldType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EVarFieldType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EVarFieldType_descriptor(), enum_t_value);
}
inline bool EVarFieldType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EVarFieldType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EVarFieldType>(
    EVarFieldType_descriptor(), name, value);
}
enum ENodeCashReward : int {
  CASH_REWARD_NONE = 1,
  CASH_REWARD_SMALL = 2,
  CASH_REWARD_MEDIUM = 3,
  CASH_REWARD_LARGE = 4
};
M0PROTO bool ENodeCashReward_IsValid(int value);
constexpr ENodeCashReward ENodeCashReward_MIN = CASH_REWARD_NONE;
constexpr ENodeCashReward ENodeCashReward_MAX = CASH_REWARD_LARGE;
constexpr int ENodeCashReward_ARRAYSIZE = ENodeCashReward_MAX + 1;

M0PROTO const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ENodeCashReward_descriptor();
template<typename T>
inline const std::string& ENodeCashReward_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ENodeCashReward>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ENodeCashReward_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ENodeCashReward_descriptor(), enum_t_value);
}
inline bool ENodeCashReward_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ENodeCashReward* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ENodeCashReward>(
    ENodeCashReward_descriptor(), name, value);
}
// ===================================================================

class M0PROTO CMsgFieldID_CMsgField final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgFieldID.CMsgField) */ {
 public:
  inline CMsgFieldID_CMsgField() : CMsgFieldID_CMsgField(nullptr) {}
  ~CMsgFieldID_CMsgField() override;
  explicit constexpr CMsgFieldID_CMsgField(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgFieldID_CMsgField(const CMsgFieldID_CMsgField& from);
  CMsgFieldID_CMsgField(CMsgFieldID_CMsgField&& from) noexcept
    : CMsgFieldID_CMsgField() {
    *this = ::std::move(from);
  }

  inline CMsgFieldID_CMsgField& operator=(const CMsgFieldID_CMsgField& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgFieldID_CMsgField& operator=(CMsgFieldID_CMsgField&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgFieldID_CMsgField& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgFieldID_CMsgField* internal_default_instance() {
    return reinterpret_cast<const CMsgFieldID_CMsgField*>(
               &_CMsgFieldID_CMsgField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CMsgFieldID_CMsgField& a, CMsgFieldID_CMsgField& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgFieldID_CMsgField* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgFieldID_CMsgField* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgFieldID_CMsgField* New() const final {
    return new CMsgFieldID_CMsgField();
  }

  CMsgFieldID_CMsgField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgFieldID_CMsgField>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgFieldID_CMsgField& from);
  void MergeFrom(const CMsgFieldID_CMsgField& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgFieldID_CMsgField* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgFieldID.CMsgField";
  }
  protected:
  explicit CMsgFieldID_CMsgField(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldNumberFieldNumber = 1,
    kRepeatedIndexFieldNumber = 2,
  };
  // optional uint32 field_number = 1;
  bool has_field_number() const;
  private:
  bool _internal_has_field_number() const;
  public:
  void clear_field_number();
  ::PROTOBUF_NAMESPACE_ID::uint32 field_number() const;
  void set_field_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_field_number() const;
  void _internal_set_field_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 repeated_index = 2;
  bool has_repeated_index() const;
  private:
  bool _internal_has_repeated_index() const;
  public:
  void clear_repeated_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 repeated_index() const;
  void set_repeated_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_repeated_index() const;
  void _internal_set_repeated_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgFieldID.CMsgField)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 field_number_;
  ::PROTOBUF_NAMESPACE_ID::uint32 repeated_index_;
  friend struct ::TableStruct_tf_5fproto_5fdef_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class M0PROTO CMsgFieldID final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgFieldID) */ {
 public:
  inline CMsgFieldID() : CMsgFieldID(nullptr) {}
  ~CMsgFieldID() override;
  explicit constexpr CMsgFieldID(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgFieldID(const CMsgFieldID& from);
  CMsgFieldID(CMsgFieldID&& from) noexcept
    : CMsgFieldID() {
    *this = ::std::move(from);
  }

  inline CMsgFieldID& operator=(const CMsgFieldID& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgFieldID& operator=(CMsgFieldID&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgFieldID& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgFieldID* internal_default_instance() {
    return reinterpret_cast<const CMsgFieldID*>(
               &_CMsgFieldID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CMsgFieldID& a, CMsgFieldID& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgFieldID* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgFieldID* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgFieldID* New() const final {
    return new CMsgFieldID();
  }

  CMsgFieldID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgFieldID>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgFieldID& from);
  void MergeFrom(const CMsgFieldID& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgFieldID* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgFieldID";
  }
  protected:
  explicit CMsgFieldID(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgFieldID_CMsgField CMsgField;

  // accessors -------------------------------------------------------

  enum : int {
    kFieldFieldNumber = 1,
  };
  // repeated .CMsgFieldID.CMsgField field = 1;
  int field_size() const;
  private:
  int _internal_field_size() const;
  public:
  void clear_field();
  ::CMsgFieldID_CMsgField* mutable_field(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgFieldID_CMsgField >*
      mutable_field();
  private:
  const ::CMsgFieldID_CMsgField& _internal_field(int index) const;
  ::CMsgFieldID_CMsgField* _internal_add_field();
  public:
  const ::CMsgFieldID_CMsgField& field(int index) const;
  ::CMsgFieldID_CMsgField* add_field();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgFieldID_CMsgField >&
      field() const;

  // @@protoc_insertion_point(class_scope:CMsgFieldID)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgFieldID_CMsgField > field_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tf_5fproto_5fdef_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class M0PROTO CMsgUniversalFieldID final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgUniversalFieldID) */ {
 public:
  inline CMsgUniversalFieldID() : CMsgUniversalFieldID(nullptr) {}
  ~CMsgUniversalFieldID() override;
  explicit constexpr CMsgUniversalFieldID(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgUniversalFieldID(const CMsgUniversalFieldID& from);
  CMsgUniversalFieldID(CMsgUniversalFieldID&& from) noexcept
    : CMsgUniversalFieldID() {
    *this = ::std::move(from);
  }

  inline CMsgUniversalFieldID& operator=(const CMsgUniversalFieldID& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgUniversalFieldID& operator=(CMsgUniversalFieldID&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgUniversalFieldID& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgUniversalFieldID* internal_default_instance() {
    return reinterpret_cast<const CMsgUniversalFieldID*>(
               &_CMsgUniversalFieldID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CMsgUniversalFieldID& a, CMsgUniversalFieldID& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgUniversalFieldID* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgUniversalFieldID* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgUniversalFieldID* New() const final {
    return new CMsgUniversalFieldID();
  }

  CMsgUniversalFieldID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgUniversalFieldID>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgUniversalFieldID& from);
  void MergeFrom(const CMsgUniversalFieldID& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgUniversalFieldID* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgUniversalFieldID";
  }
  protected:
  explicit CMsgUniversalFieldID(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDefiningObjIdFieldNumber = 2,
    kFieldIdFieldNumber = 3,
    kSourceTypeFieldNumber = 1,
  };
  // optional .CMsgProtoDefID defining_obj_id = 2;
  bool has_defining_obj_id() const;
  private:
  bool _internal_has_defining_obj_id() const;
  public:
  void clear_defining_obj_id();
  const ::CMsgProtoDefID& defining_obj_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgProtoDefID* release_defining_obj_id();
  ::CMsgProtoDefID* mutable_defining_obj_id();
  void set_allocated_defining_obj_id(::CMsgProtoDefID* defining_obj_id);
  private:
  const ::CMsgProtoDefID& _internal_defining_obj_id() const;
  ::CMsgProtoDefID* _internal_mutable_defining_obj_id();
  public:
  void unsafe_arena_set_allocated_defining_obj_id(
      ::CMsgProtoDefID* defining_obj_id);
  ::CMsgProtoDefID* unsafe_arena_release_defining_obj_id();

  // optional .CMsgFieldID field_id = 3;
  bool has_field_id() const;
  private:
  bool _internal_has_field_id() const;
  public:
  void clear_field_id();
  const ::CMsgFieldID& field_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgFieldID* release_field_id();
  ::CMsgFieldID* mutable_field_id();
  void set_allocated_field_id(::CMsgFieldID* field_id);
  private:
  const ::CMsgFieldID& _internal_field_id() const;
  ::CMsgFieldID* _internal_mutable_field_id();
  public:
  void unsafe_arena_set_allocated_field_id(
      ::CMsgFieldID* field_id);
  ::CMsgFieldID* unsafe_arena_release_field_id();

  // optional .EValueDefinitionSource source_type = 1 [default = REFERENCE_DEFINES];
  bool has_source_type() const;
  private:
  bool _internal_has_source_type() const;
  public:
  void clear_source_type();
  ::EValueDefinitionSource source_type() const;
  void set_source_type(::EValueDefinitionSource value);
  private:
  ::EValueDefinitionSource _internal_source_type() const;
  void _internal_set_source_type(::EValueDefinitionSource value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgUniversalFieldID)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CMsgProtoDefID* defining_obj_id_;
  ::CMsgFieldID* field_id_;
  int source_type_;
  friend struct ::TableStruct_tf_5fproto_5fdef_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class M0PROTO CMsgVariableDefinition final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgVariableDefinition) */ {
 public:
  inline CMsgVariableDefinition() : CMsgVariableDefinition(nullptr) {}
  ~CMsgVariableDefinition() override;
  explicit constexpr CMsgVariableDefinition(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgVariableDefinition(const CMsgVariableDefinition& from);
  CMsgVariableDefinition(CMsgVariableDefinition&& from) noexcept
    : CMsgVariableDefinition() {
    *this = ::std::move(from);
  }

  inline CMsgVariableDefinition& operator=(const CMsgVariableDefinition& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgVariableDefinition& operator=(CMsgVariableDefinition&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgVariableDefinition& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgVariableDefinition* internal_default_instance() {
    return reinterpret_cast<const CMsgVariableDefinition*>(
               &_CMsgVariableDefinition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CMsgVariableDefinition& a, CMsgVariableDefinition& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgVariableDefinition* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgVariableDefinition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgVariableDefinition* New() const final {
    return new CMsgVariableDefinition();
  }

  CMsgVariableDefinition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgVariableDefinition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgVariableDefinition& from);
  void MergeFrom(const CMsgVariableDefinition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgVariableDefinition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgVariableDefinition";
  }
  protected:
  explicit CMsgVariableDefinition(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValueFieldNumber = 3,
    kInheritFieldNumber = 2,
  };
  // optional string name = 1 [(.merging_key_field) = true];
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string value = 3;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // optional bool inherit = 2 [default = true];
  bool has_inherit() const;
  private:
  bool _internal_has_inherit() const;
  public:
  void clear_inherit();
  bool inherit() const;
  void set_inherit(bool value);
  private:
  bool _internal_inherit() const;
  void _internal_set_inherit(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgVariableDefinition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  bool inherit_;
  friend struct ::TableStruct_tf_5fproto_5fdef_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class M0PROTO CMsgProtoDefHeader final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgProtoDefHeader) */ {
 public:
  inline CMsgProtoDefHeader() : CMsgProtoDefHeader(nullptr) {}
  ~CMsgProtoDefHeader() override;
  explicit constexpr CMsgProtoDefHeader(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgProtoDefHeader(const CMsgProtoDefHeader& from);
  CMsgProtoDefHeader(CMsgProtoDefHeader&& from) noexcept
    : CMsgProtoDefHeader() {
    *this = ::std::move(from);
  }

  inline CMsgProtoDefHeader& operator=(const CMsgProtoDefHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgProtoDefHeader& operator=(CMsgProtoDefHeader&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgProtoDefHeader& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgProtoDefHeader* internal_default_instance() {
    return reinterpret_cast<const CMsgProtoDefHeader*>(
               &_CMsgProtoDefHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CMsgProtoDefHeader& a, CMsgProtoDefHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgProtoDefHeader* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgProtoDefHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgProtoDefHeader* New() const final {
    return new CMsgProtoDefHeader();
  }

  CMsgProtoDefHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgProtoDefHeader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgProtoDefHeader& from);
  void MergeFrom(const CMsgProtoDefHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgProtoDefHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgProtoDefHeader";
  }
  protected:
  explicit CMsgProtoDefHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrefabsFieldNumber = 3,
    kTagsFieldNumber = 4,
    kVariablesFieldNumber = 6,
    kNameFieldNumber = 2,
    kDefindexFieldNumber = 1,
    kPrefabOnlyFieldNumber = 5,
  };
  // repeated .CMsgProtoDefID prefabs = 3 [(.display_name) = "Prefab", (.comment) = "Inherit the values of these definitions, in order from top to bottom.", (.panel_class_override) = "CPrefabFieldEditingPanel", (.self_inherit_only) = true];
  int prefabs_size() const;
  private:
  int _internal_prefabs_size() const;
  public:
  void clear_prefabs();
  ::CMsgProtoDefID* mutable_prefabs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgProtoDefID >*
      mutable_prefabs();
  private:
  const ::CMsgProtoDefID& _internal_prefabs(int index) const;
  ::CMsgProtoDefID* _internal_add_prefabs();
  public:
  const ::CMsgProtoDefID& prefabs(int index) const;
  ::CMsgProtoDefID* add_prefabs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgProtoDefID >&
      prefabs() const;

  // repeated string tags = 4 [(.display_name) = "Tags", (.comment) = "Strings used to describe this definition while searching.  ie. \'class\', \'shotgun\', \'easy\'"];
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  const std::string& tags(int index) const;
  std::string* mutable_tags(int index);
  void set_tags(int index, const std::string& value);
  void set_tags(int index, std::string&& value);
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  std::string* add_tags();
  void add_tags(const std::string& value);
  void add_tags(std::string&& value);
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& tags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_tags();
  private:
  const std::string& _internal_tags(int index) const;
  std::string* _internal_add_tags();
  public:

  // repeated .CMsgVariableDefinition variables = 6 [(.display_name) = "Variables", (.comment) = "Variable value definitions", (.message_inherhitance_key_field_name) = "name"];
  int variables_size() const;
  private:
  int _internal_variables_size() const;
  public:
  void clear_variables();
  ::CMsgVariableDefinition* mutable_variables(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgVariableDefinition >*
      mutable_variables();
  private:
  const ::CMsgVariableDefinition& _internal_variables(int index) const;
  ::CMsgVariableDefinition* _internal_add_variables();
  public:
  const ::CMsgVariableDefinition& variables(int index) const;
  ::CMsgVariableDefinition* add_variables();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgVariableDefinition >&
      variables() const;

  // optional string name = 2 [(.display_name) = "Name", (.comment) = "Name to show in the editor", (.self_inherit_only) = true];
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required uint32 defindex = 1 [(.editable) = false, (.display_name) = "Defindex", (.comment) = "Autogenerated", (.self_inherit_only) = true];
  bool has_defindex() const;
  private:
  bool _internal_has_defindex() const;
  public:
  void clear_defindex();
  ::PROTOBUF_NAMESPACE_ID::uint32 defindex() const;
  void set_defindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_defindex() const;
  void _internal_set_defindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool prefab_only = 5 [default = false, (.display_name) = "Pure Prefab", (.comment) = "If true, this is only a prefab and will not be made into an object", (.self_inherit_only) = true];
  bool has_prefab_only() const;
  private:
  bool _internal_has_prefab_only() const;
  public:
  void clear_prefab_only();
  bool prefab_only() const;
  void set_prefab_only(bool value);
  private:
  bool _internal_prefab_only() const;
  void _internal_set_prefab_only(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgProtoDefHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgProtoDefID > prefabs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> tags_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgVariableDefinition > variables_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 defindex_;
  bool prefab_only_;
  friend struct ::TableStruct_tf_5fproto_5fdef_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class M0PROTO CMsgValidTypes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgValidTypes) */ {
 public:
  inline CMsgValidTypes() : CMsgValidTypes(nullptr) {}
  ~CMsgValidTypes() override;
  explicit constexpr CMsgValidTypes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgValidTypes(const CMsgValidTypes& from);
  CMsgValidTypes(CMsgValidTypes&& from) noexcept
    : CMsgValidTypes() {
    *this = ::std::move(from);
  }

  inline CMsgValidTypes& operator=(const CMsgValidTypes& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgValidTypes& operator=(CMsgValidTypes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgValidTypes& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgValidTypes* internal_default_instance() {
    return reinterpret_cast<const CMsgValidTypes*>(
               &_CMsgValidTypes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CMsgValidTypes& a, CMsgValidTypes& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgValidTypes* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgValidTypes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgValidTypes* New() const final {
    return new CMsgValidTypes();
  }

  CMsgValidTypes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgValidTypes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgValidTypes& from);
  void MergeFrom(const CMsgValidTypes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgValidTypes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgValidTypes";
  }
  protected:
  explicit CMsgValidTypes(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypesFieldNumber = 1,
  };
  // repeated .ProtoDefTypes types = 1;
  int types_size() const;
  private:
  int _internal_types_size() const;
  public:
  void clear_types();
  private:
  ::ProtoDefTypes _internal_types(int index) const;
  void _internal_add_types(::ProtoDefTypes value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_types();
  public:
  ::ProtoDefTypes types(int index) const;
  void set_types(int index, ::ProtoDefTypes value);
  void add_types(::ProtoDefTypes value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& types() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_types();

  // @@protoc_insertion_point(class_scope:CMsgValidTypes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> types_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tf_5fproto_5fdef_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class M0PROTO CMsgProtoDefID final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgProtoDefID) */ {
 public:
  inline CMsgProtoDefID() : CMsgProtoDefID(nullptr) {}
  ~CMsgProtoDefID() override;
  explicit constexpr CMsgProtoDefID(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgProtoDefID(const CMsgProtoDefID& from);
  CMsgProtoDefID(CMsgProtoDefID&& from) noexcept
    : CMsgProtoDefID() {
    *this = ::std::move(from);
  }

  inline CMsgProtoDefID& operator=(const CMsgProtoDefID& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgProtoDefID& operator=(CMsgProtoDefID&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgProtoDefID& default_instance() {
    return *internal_default_instance();
  }
  enum InstanceCase {
    kInstanceDefTypeQuestMapNode = 3,
    kInstanceDefTypeQuestTheme = 5,
    kInstanceDefTypeQuestMapRegion = 6,
    kInstanceDefTypeQuest = 7,
    kInstanceDefTypeQuestObjective = 8,
    kInstanceDefTypePaintkitVariables = 9,
    kInstanceDefTypePaintkitOperation = 10,
    kInstanceDefTypePaintkitItemDefinition = 11,
    kInstanceDefTypePaintkitDefinition = 12,
    kInstanceDefTypeHeaderOnly = 13,
    INSTANCE_NOT_SET = 0,
  };

  static inline const CMsgProtoDefID* internal_default_instance() {
    return reinterpret_cast<const CMsgProtoDefID*>(
               &_CMsgProtoDefID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CMsgProtoDefID& a, CMsgProtoDefID& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgProtoDefID* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgProtoDefID* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgProtoDefID* New() const final {
    return new CMsgProtoDefID();
  }

  CMsgProtoDefID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgProtoDefID>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgProtoDefID& from);
  void MergeFrom(const CMsgProtoDefID& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgProtoDefID* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgProtoDefID";
  }
  protected:
  explicit CMsgProtoDefID(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDefindexFieldNumber = 1,
    kTypeFieldNumber = 2,
    kInstanceDefTypeQuestMapNodeFieldNumber = 3,
    kInstanceDefTypeQuestThemeFieldNumber = 5,
    kInstanceDefTypeQuestMapRegionFieldNumber = 6,
    kInstanceDefTypeQuestFieldNumber = 7,
    kInstanceDefTypeQuestObjectiveFieldNumber = 8,
    kInstanceDefTypePaintkitVariablesFieldNumber = 9,
    kInstanceDefTypePaintkitOperationFieldNumber = 10,
    kInstanceDefTypePaintkitItemDefinitionFieldNumber = 11,
    kInstanceDefTypePaintkitDefinitionFieldNumber = 12,
    kInstanceDefTypeHeaderOnlyFieldNumber = 13,
  };
  // optional uint32 defindex = 1;
  bool has_defindex() const;
  private:
  bool _internal_has_defindex() const;
  public:
  void clear_defindex();
  ::PROTOBUF_NAMESPACE_ID::uint32 defindex() const;
  void set_defindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_defindex() const;
  void _internal_set_defindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .ProtoDefTypes type = 2 [default = DEF_TYPE_QUEST_MAP_NODE];
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::ProtoDefTypes type() const;
  void set_type(::ProtoDefTypes value);
  private:
  ::ProtoDefTypes _internal_type() const;
  void _internal_set_type(::ProtoDefTypes value);
  public:

  // .CMsgQuestMapNodeDef instance_def_type_quest_map_node = 3;
  bool has_instance_def_type_quest_map_node() const;
  private:
  bool _internal_has_instance_def_type_quest_map_node() const;
  public:
  void clear_instance_def_type_quest_map_node();
  const ::CMsgQuestMapNodeDef& instance_def_type_quest_map_node() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgQuestMapNodeDef* release_instance_def_type_quest_map_node();
  ::CMsgQuestMapNodeDef* mutable_instance_def_type_quest_map_node();
  void set_allocated_instance_def_type_quest_map_node(::CMsgQuestMapNodeDef* instance_def_type_quest_map_node);
  private:
  const ::CMsgQuestMapNodeDef& _internal_instance_def_type_quest_map_node() const;
  ::CMsgQuestMapNodeDef* _internal_mutable_instance_def_type_quest_map_node();
  public:
  void unsafe_arena_set_allocated_instance_def_type_quest_map_node(
      ::CMsgQuestMapNodeDef* instance_def_type_quest_map_node);
  ::CMsgQuestMapNodeDef* unsafe_arena_release_instance_def_type_quest_map_node();

  // .CMsgQuestTheme instance_def_type_quest_theme = 5;
  bool has_instance_def_type_quest_theme() const;
  private:
  bool _internal_has_instance_def_type_quest_theme() const;
  public:
  void clear_instance_def_type_quest_theme();
  const ::CMsgQuestTheme& instance_def_type_quest_theme() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgQuestTheme* release_instance_def_type_quest_theme();
  ::CMsgQuestTheme* mutable_instance_def_type_quest_theme();
  void set_allocated_instance_def_type_quest_theme(::CMsgQuestTheme* instance_def_type_quest_theme);
  private:
  const ::CMsgQuestTheme& _internal_instance_def_type_quest_theme() const;
  ::CMsgQuestTheme* _internal_mutable_instance_def_type_quest_theme();
  public:
  void unsafe_arena_set_allocated_instance_def_type_quest_theme(
      ::CMsgQuestTheme* instance_def_type_quest_theme);
  ::CMsgQuestTheme* unsafe_arena_release_instance_def_type_quest_theme();

  // .CMsgQuestMapRegionDef instance_def_type_quest_map_region = 6;
  bool has_instance_def_type_quest_map_region() const;
  private:
  bool _internal_has_instance_def_type_quest_map_region() const;
  public:
  void clear_instance_def_type_quest_map_region();
  const ::CMsgQuestMapRegionDef& instance_def_type_quest_map_region() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgQuestMapRegionDef* release_instance_def_type_quest_map_region();
  ::CMsgQuestMapRegionDef* mutable_instance_def_type_quest_map_region();
  void set_allocated_instance_def_type_quest_map_region(::CMsgQuestMapRegionDef* instance_def_type_quest_map_region);
  private:
  const ::CMsgQuestMapRegionDef& _internal_instance_def_type_quest_map_region() const;
  ::CMsgQuestMapRegionDef* _internal_mutable_instance_def_type_quest_map_region();
  public:
  void unsafe_arena_set_allocated_instance_def_type_quest_map_region(
      ::CMsgQuestMapRegionDef* instance_def_type_quest_map_region);
  ::CMsgQuestMapRegionDef* unsafe_arena_release_instance_def_type_quest_map_region();

  // .CMsgQuestDef instance_def_type_quest = 7;
  bool has_instance_def_type_quest() const;
  private:
  bool _internal_has_instance_def_type_quest() const;
  public:
  void clear_instance_def_type_quest();
  const ::CMsgQuestDef& instance_def_type_quest() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgQuestDef* release_instance_def_type_quest();
  ::CMsgQuestDef* mutable_instance_def_type_quest();
  void set_allocated_instance_def_type_quest(::CMsgQuestDef* instance_def_type_quest);
  private:
  const ::CMsgQuestDef& _internal_instance_def_type_quest() const;
  ::CMsgQuestDef* _internal_mutable_instance_def_type_quest();
  public:
  void unsafe_arena_set_allocated_instance_def_type_quest(
      ::CMsgQuestDef* instance_def_type_quest);
  ::CMsgQuestDef* unsafe_arena_release_instance_def_type_quest();

  // .CMsgQuestObjectiveDef instance_def_type_quest_objective = 8;
  bool has_instance_def_type_quest_objective() const;
  private:
  bool _internal_has_instance_def_type_quest_objective() const;
  public:
  void clear_instance_def_type_quest_objective();
  const ::CMsgQuestObjectiveDef& instance_def_type_quest_objective() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgQuestObjectiveDef* release_instance_def_type_quest_objective();
  ::CMsgQuestObjectiveDef* mutable_instance_def_type_quest_objective();
  void set_allocated_instance_def_type_quest_objective(::CMsgQuestObjectiveDef* instance_def_type_quest_objective);
  private:
  const ::CMsgQuestObjectiveDef& _internal_instance_def_type_quest_objective() const;
  ::CMsgQuestObjectiveDef* _internal_mutable_instance_def_type_quest_objective();
  public:
  void unsafe_arena_set_allocated_instance_def_type_quest_objective(
      ::CMsgQuestObjectiveDef* instance_def_type_quest_objective);
  ::CMsgQuestObjectiveDef* unsafe_arena_release_instance_def_type_quest_objective();

  // .CMsgPaintKit_Variables instance_def_type_paintkit_variables = 9;
  bool has_instance_def_type_paintkit_variables() const;
  private:
  bool _internal_has_instance_def_type_paintkit_variables() const;
  public:
  void clear_instance_def_type_paintkit_variables();
  const ::CMsgPaintKit_Variables& instance_def_type_paintkit_variables() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgPaintKit_Variables* release_instance_def_type_paintkit_variables();
  ::CMsgPaintKit_Variables* mutable_instance_def_type_paintkit_variables();
  void set_allocated_instance_def_type_paintkit_variables(::CMsgPaintKit_Variables* instance_def_type_paintkit_variables);
  private:
  const ::CMsgPaintKit_Variables& _internal_instance_def_type_paintkit_variables() const;
  ::CMsgPaintKit_Variables* _internal_mutable_instance_def_type_paintkit_variables();
  public:
  void unsafe_arena_set_allocated_instance_def_type_paintkit_variables(
      ::CMsgPaintKit_Variables* instance_def_type_paintkit_variables);
  ::CMsgPaintKit_Variables* unsafe_arena_release_instance_def_type_paintkit_variables();

  // .CMsgPaintKit_Operation instance_def_type_paintkit_operation = 10;
  bool has_instance_def_type_paintkit_operation() const;
  private:
  bool _internal_has_instance_def_type_paintkit_operation() const;
  public:
  void clear_instance_def_type_paintkit_operation();
  const ::CMsgPaintKit_Operation& instance_def_type_paintkit_operation() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgPaintKit_Operation* release_instance_def_type_paintkit_operation();
  ::CMsgPaintKit_Operation* mutable_instance_def_type_paintkit_operation();
  void set_allocated_instance_def_type_paintkit_operation(::CMsgPaintKit_Operation* instance_def_type_paintkit_operation);
  private:
  const ::CMsgPaintKit_Operation& _internal_instance_def_type_paintkit_operation() const;
  ::CMsgPaintKit_Operation* _internal_mutable_instance_def_type_paintkit_operation();
  public:
  void unsafe_arena_set_allocated_instance_def_type_paintkit_operation(
      ::CMsgPaintKit_Operation* instance_def_type_paintkit_operation);
  ::CMsgPaintKit_Operation* unsafe_arena_release_instance_def_type_paintkit_operation();

  // .CMsgPaintKit_ItemDefinition instance_def_type_paintkit_item_definition = 11;
  bool has_instance_def_type_paintkit_item_definition() const;
  private:
  bool _internal_has_instance_def_type_paintkit_item_definition() const;
  public:
  void clear_instance_def_type_paintkit_item_definition();
  const ::CMsgPaintKit_ItemDefinition& instance_def_type_paintkit_item_definition() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgPaintKit_ItemDefinition* release_instance_def_type_paintkit_item_definition();
  ::CMsgPaintKit_ItemDefinition* mutable_instance_def_type_paintkit_item_definition();
  void set_allocated_instance_def_type_paintkit_item_definition(::CMsgPaintKit_ItemDefinition* instance_def_type_paintkit_item_definition);
  private:
  const ::CMsgPaintKit_ItemDefinition& _internal_instance_def_type_paintkit_item_definition() const;
  ::CMsgPaintKit_ItemDefinition* _internal_mutable_instance_def_type_paintkit_item_definition();
  public:
  void unsafe_arena_set_allocated_instance_def_type_paintkit_item_definition(
      ::CMsgPaintKit_ItemDefinition* instance_def_type_paintkit_item_definition);
  ::CMsgPaintKit_ItemDefinition* unsafe_arena_release_instance_def_type_paintkit_item_definition();

  // .CMsgPaintKit_Definition instance_def_type_paintkit_definition = 12;
  bool has_instance_def_type_paintkit_definition() const;
  private:
  bool _internal_has_instance_def_type_paintkit_definition() const;
  public:
  void clear_instance_def_type_paintkit_definition();
  const ::CMsgPaintKit_Definition& instance_def_type_paintkit_definition() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgPaintKit_Definition* release_instance_def_type_paintkit_definition();
  ::CMsgPaintKit_Definition* mutable_instance_def_type_paintkit_definition();
  void set_allocated_instance_def_type_paintkit_definition(::CMsgPaintKit_Definition* instance_def_type_paintkit_definition);
  private:
  const ::CMsgPaintKit_Definition& _internal_instance_def_type_paintkit_definition() const;
  ::CMsgPaintKit_Definition* _internal_mutable_instance_def_type_paintkit_definition();
  public:
  void unsafe_arena_set_allocated_instance_def_type_paintkit_definition(
      ::CMsgPaintKit_Definition* instance_def_type_paintkit_definition);
  ::CMsgPaintKit_Definition* unsafe_arena_release_instance_def_type_paintkit_definition();

  // .CMsgHeaderOnly instance_def_type_header_only = 13;
  bool has_instance_def_type_header_only() const;
  private:
  bool _internal_has_instance_def_type_header_only() const;
  public:
  void clear_instance_def_type_header_only();
  const ::CMsgHeaderOnly& instance_def_type_header_only() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgHeaderOnly* release_instance_def_type_header_only();
  ::CMsgHeaderOnly* mutable_instance_def_type_header_only();
  void set_allocated_instance_def_type_header_only(::CMsgHeaderOnly* instance_def_type_header_only);
  private:
  const ::CMsgHeaderOnly& _internal_instance_def_type_header_only() const;
  ::CMsgHeaderOnly* _internal_mutable_instance_def_type_header_only();
  public:
  void unsafe_arena_set_allocated_instance_def_type_header_only(
      ::CMsgHeaderOnly* instance_def_type_header_only);
  ::CMsgHeaderOnly* unsafe_arena_release_instance_def_type_header_only();

  void clear_instance();
  InstanceCase instance_case() const;
  // @@protoc_insertion_point(class_scope:CMsgProtoDefID)
 private:
  class _Internal;
  void set_has_instance_def_type_quest_map_node();
  void set_has_instance_def_type_quest_theme();
  void set_has_instance_def_type_quest_map_region();
  void set_has_instance_def_type_quest();
  void set_has_instance_def_type_quest_objective();
  void set_has_instance_def_type_paintkit_variables();
  void set_has_instance_def_type_paintkit_operation();
  void set_has_instance_def_type_paintkit_item_definition();
  void set_has_instance_def_type_paintkit_definition();
  void set_has_instance_def_type_header_only();

  inline bool has_instance() const;
  inline void clear_has_instance();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 defindex_;
  int type_;
  union InstanceUnion {
    constexpr InstanceUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::CMsgQuestMapNodeDef* instance_def_type_quest_map_node_;
    ::CMsgQuestTheme* instance_def_type_quest_theme_;
    ::CMsgQuestMapRegionDef* instance_def_type_quest_map_region_;
    ::CMsgQuestDef* instance_def_type_quest_;
    ::CMsgQuestObjectiveDef* instance_def_type_quest_objective_;
    ::CMsgPaintKit_Variables* instance_def_type_paintkit_variables_;
    ::CMsgPaintKit_Operation* instance_def_type_paintkit_operation_;
    ::CMsgPaintKit_ItemDefinition* instance_def_type_paintkit_item_definition_;
    ::CMsgPaintKit_Definition* instance_def_type_paintkit_definition_;
    ::CMsgHeaderOnly* instance_def_type_header_only_;
  } instance_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_tf_5fproto_5fdef_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class M0PROTO CMsgQuestObjectiveDef final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgQuestObjectiveDef) */ {
 public:
  inline CMsgQuestObjectiveDef() : CMsgQuestObjectiveDef(nullptr) {}
  ~CMsgQuestObjectiveDef() override;
  explicit constexpr CMsgQuestObjectiveDef(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgQuestObjectiveDef(const CMsgQuestObjectiveDef& from);
  CMsgQuestObjectiveDef(CMsgQuestObjectiveDef&& from) noexcept
    : CMsgQuestObjectiveDef() {
    *this = ::std::move(from);
  }

  inline CMsgQuestObjectiveDef& operator=(const CMsgQuestObjectiveDef& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgQuestObjectiveDef& operator=(CMsgQuestObjectiveDef&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgQuestObjectiveDef& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgQuestObjectiveDef* internal_default_instance() {
    return reinterpret_cast<const CMsgQuestObjectiveDef*>(
               &_CMsgQuestObjectiveDef_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CMsgQuestObjectiveDef& a, CMsgQuestObjectiveDef& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgQuestObjectiveDef* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgQuestObjectiveDef* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgQuestObjectiveDef* New() const final {
    return new CMsgQuestObjectiveDef();
  }

  CMsgQuestObjectiveDef* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgQuestObjectiveDef>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgQuestObjectiveDef& from);
  void MergeFrom(const CMsgQuestObjectiveDef& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgQuestObjectiveDef* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgQuestObjectiveDef";
  }
  protected:
  explicit CMsgQuestObjectiveDef(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgQuestObjectiveDef_ETF2GameModes ETF2GameModes;
  static constexpr ETF2GameModes kGameCategory_Escort =
    CMsgQuestObjectiveDef_ETF2GameModes_kGameCategory_Escort;
  static constexpr ETF2GameModes kGameCategory_CTF =
    CMsgQuestObjectiveDef_ETF2GameModes_kGameCategory_CTF;
  static constexpr ETF2GameModes kGameCategory_AttackDefense =
    CMsgQuestObjectiveDef_ETF2GameModes_kGameCategory_AttackDefense;
  static constexpr ETF2GameModes kGameCategory_Koth =
    CMsgQuestObjectiveDef_ETF2GameModes_kGameCategory_Koth;
  static constexpr ETF2GameModes kGameCategory_CP =
    CMsgQuestObjectiveDef_ETF2GameModes_kGameCategory_CP;
  static constexpr ETF2GameModes kGameCategory_EscortRace =
    CMsgQuestObjectiveDef_ETF2GameModes_kGameCategory_EscortRace;
  static constexpr ETF2GameModes kGameCategory_EventMix =
    CMsgQuestObjectiveDef_ETF2GameModes_kGameCategory_EventMix;
  static constexpr ETF2GameModes kGameCategory_SD =
    CMsgQuestObjectiveDef_ETF2GameModes_kGameCategory_SD;
  static constexpr ETF2GameModes kGameCategory_Quickplay =
    CMsgQuestObjectiveDef_ETF2GameModes_kGameCategory_Quickplay;
  static constexpr ETF2GameModes kGameCategory_Event247 =
    CMsgQuestObjectiveDef_ETF2GameModes_kGameCategory_Event247;
  static constexpr ETF2GameModes kGameCategory_Arena =
    CMsgQuestObjectiveDef_ETF2GameModes_kGameCategory_Arena;
  static constexpr ETF2GameModes kGameCategory_RobotDestruction =
    CMsgQuestObjectiveDef_ETF2GameModes_kGameCategory_RobotDestruction;
  static constexpr ETF2GameModes kGameCategory_Powerup =
    CMsgQuestObjectiveDef_ETF2GameModes_kGameCategory_Powerup;
  static constexpr ETF2GameModes kGameCategory_Featured =
    CMsgQuestObjectiveDef_ETF2GameModes_kGameCategory_Featured;
  static constexpr ETF2GameModes kGameCategory_Passtime =
    CMsgQuestObjectiveDef_ETF2GameModes_kGameCategory_Passtime;
  static constexpr ETF2GameModes kGameCategory_Community_Update =
    CMsgQuestObjectiveDef_ETF2GameModes_kGameCategory_Community_Update;
  static constexpr ETF2GameModes kGameCategory_Misc =
    CMsgQuestObjectiveDef_ETF2GameModes_kGameCategory_Misc;
  static constexpr ETF2GameModes kGameCategory_Competitive_6v6 =
    CMsgQuestObjectiveDef_ETF2GameModes_kGameCategory_Competitive_6v6;
  static constexpr ETF2GameModes kGameCategory_Other =
    CMsgQuestObjectiveDef_ETF2GameModes_kGameCategory_Other;
  static constexpr ETF2GameModes kGameCategory_Halloween =
    CMsgQuestObjectiveDef_ETF2GameModes_kGameCategory_Halloween;
  static inline bool ETF2GameModes_IsValid(int value) {
    return CMsgQuestObjectiveDef_ETF2GameModes_IsValid(value);
  }
  static constexpr ETF2GameModes ETF2GameModes_MIN =
    CMsgQuestObjectiveDef_ETF2GameModes_ETF2GameModes_MIN;
  static constexpr ETF2GameModes ETF2GameModes_MAX =
    CMsgQuestObjectiveDef_ETF2GameModes_ETF2GameModes_MAX;
  static constexpr int ETF2GameModes_ARRAYSIZE =
    CMsgQuestObjectiveDef_ETF2GameModes_ETF2GameModes_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ETF2GameModes_descriptor() {
    return CMsgQuestObjectiveDef_ETF2GameModes_descriptor();
  }
  template<typename T>
  static inline const std::string& ETF2GameModes_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ETF2GameModes>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ETF2GameModes_Name.");
    return CMsgQuestObjectiveDef_ETF2GameModes_Name(enum_t_value);
  }
  static inline bool ETF2GameModes_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ETF2GameModes* value) {
    return CMsgQuestObjectiveDef_ETF2GameModes_Parse(name, value);
  }

  typedef CMsgQuestObjectiveDef_ETF2Conditions ETF2Conditions;
  static constexpr ETF2Conditions TF_COND_AIMING =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_AIMING;
  static constexpr ETF2Conditions TF_COND_ZOOMED =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_ZOOMED;
  static constexpr ETF2Conditions TF_COND_DISGUISING =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_DISGUISING;
  static constexpr ETF2Conditions TF_COND_DISGUISED =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_DISGUISED;
  static constexpr ETF2Conditions TF_COND_STEALTHED =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_STEALTHED;
  static constexpr ETF2Conditions TF_COND_INVULNERABLE =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_INVULNERABLE;
  static constexpr ETF2Conditions TF_COND_TELEPORTED =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_TELEPORTED;
  static constexpr ETF2Conditions TF_COND_TAUNTING =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_TAUNTING;
  static constexpr ETF2Conditions TF_COND_INVULNERABLE_WEARINGOFF =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_INVULNERABLE_WEARINGOFF;
  static constexpr ETF2Conditions TF_COND_STEALTHED_BLINK =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_STEALTHED_BLINK;
  static constexpr ETF2Conditions TF_COND_SELECTED_TO_TELEPORT =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_SELECTED_TO_TELEPORT;
  static constexpr ETF2Conditions TF_COND_CRITBOOSTED =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_CRITBOOSTED;
  static constexpr ETF2Conditions TF_COND_TMPDAMAGEBONUS =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_TMPDAMAGEBONUS;
  static constexpr ETF2Conditions TF_COND_FEIGN_DEATH =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_FEIGN_DEATH;
  static constexpr ETF2Conditions TF_COND_PHASE =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_PHASE;
  static constexpr ETF2Conditions TF_COND_STUNNED =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_STUNNED;
  static constexpr ETF2Conditions TF_COND_OFFENSEBUFF =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_OFFENSEBUFF;
  static constexpr ETF2Conditions TF_COND_SHIELD_CHARGE =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_SHIELD_CHARGE;
  static constexpr ETF2Conditions TF_COND_DEMO_BUFF =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_DEMO_BUFF;
  static constexpr ETF2Conditions TF_COND_ENERGY_BUFF =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_ENERGY_BUFF;
  static constexpr ETF2Conditions TF_COND_RADIUSHEAL =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_RADIUSHEAL;
  static constexpr ETF2Conditions TF_COND_HEALTH_BUFF =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_HEALTH_BUFF;
  static constexpr ETF2Conditions TF_COND_BURNING =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_BURNING;
  static constexpr ETF2Conditions TF_COND_HEALTH_OVERHEALED =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_HEALTH_OVERHEALED;
  static constexpr ETF2Conditions TF_COND_URINE =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_URINE;
  static constexpr ETF2Conditions TF_COND_BLEEDING =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_BLEEDING;
  static constexpr ETF2Conditions TF_COND_DEFENSEBUFF =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_DEFENSEBUFF;
  static constexpr ETF2Conditions TF_COND_MAD_MILK =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_MAD_MILK;
  static constexpr ETF2Conditions TF_COND_MEGAHEAL =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_MEGAHEAL;
  static constexpr ETF2Conditions TF_COND_REGENONDAMAGEBUFF =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_REGENONDAMAGEBUFF;
  static constexpr ETF2Conditions TF_COND_MARKEDFORDEATH =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_MARKEDFORDEATH;
  static constexpr ETF2Conditions TF_COND_NOHEALINGDAMAGEBUFF =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_NOHEALINGDAMAGEBUFF;
  static constexpr ETF2Conditions TF_COND_SPEED_BOOST =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_SPEED_BOOST;
  static constexpr ETF2Conditions TF_COND_CRITBOOSTED_PUMPKIN =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_CRITBOOSTED_PUMPKIN;
  static constexpr ETF2Conditions TF_COND_CRITBOOSTED_USER_BUFF =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_CRITBOOSTED_USER_BUFF;
  static constexpr ETF2Conditions TF_COND_CRITBOOSTED_DEMO_CHARGE =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_CRITBOOSTED_DEMO_CHARGE;
  static constexpr ETF2Conditions TF_COND_SODAPOPPER_HYPE =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_SODAPOPPER_HYPE;
  static constexpr ETF2Conditions TF_COND_CRITBOOSTED_FIRST_BLOOD =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_CRITBOOSTED_FIRST_BLOOD;
  static constexpr ETF2Conditions TF_COND_CRITBOOSTED_BONUS_TIME =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_CRITBOOSTED_BONUS_TIME;
  static constexpr ETF2Conditions TF_COND_CRITBOOSTED_CTF_CAPTURE =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_CRITBOOSTED_CTF_CAPTURE;
  static constexpr ETF2Conditions TF_COND_CRITBOOSTED_ON_KILL =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_CRITBOOSTED_ON_KILL;
  static constexpr ETF2Conditions TF_COND_CANNOT_SWITCH_FROM_MELEE =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_CANNOT_SWITCH_FROM_MELEE;
  static constexpr ETF2Conditions TF_COND_DEFENSEBUFF_NO_CRIT_BLOCK =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_DEFENSEBUFF_NO_CRIT_BLOCK;
  static constexpr ETF2Conditions TF_COND_REPROGRAMMED =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_REPROGRAMMED;
  static constexpr ETF2Conditions TF_COND_CRITBOOSTED_RAGE_BUFF =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_CRITBOOSTED_RAGE_BUFF;
  static constexpr ETF2Conditions TF_COND_DEFENSEBUFF_HIGH =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_DEFENSEBUFF_HIGH;
  static constexpr ETF2Conditions TF_COND_SNIPERCHARGE_RAGE_BUFF =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_SNIPERCHARGE_RAGE_BUFF;
  static constexpr ETF2Conditions TF_COND_DISGUISE_WEARINGOFF =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_DISGUISE_WEARINGOFF;
  static constexpr ETF2Conditions TF_COND_MARKEDFORDEATH_SILENT =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_MARKEDFORDEATH_SILENT;
  static constexpr ETF2Conditions TF_COND_DISGUISED_AS_DISPENSER =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_DISGUISED_AS_DISPENSER;
  static constexpr ETF2Conditions TF_COND_SAPPED =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_SAPPED;
  static constexpr ETF2Conditions TF_COND_INVULNERABLE_HIDE_UNLESS_DAMAGED =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_INVULNERABLE_HIDE_UNLESS_DAMAGED;
  static constexpr ETF2Conditions TF_COND_INVULNERABLE_USER_BUFF =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_INVULNERABLE_USER_BUFF;
  static constexpr ETF2Conditions TF_COND_HALLOWEEN_BOMB_HEAD =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_HALLOWEEN_BOMB_HEAD;
  static constexpr ETF2Conditions TF_COND_HALLOWEEN_THRILLER =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_HALLOWEEN_THRILLER;
  static constexpr ETF2Conditions TF_COND_RADIUSHEAL_ON_DAMAGE =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_RADIUSHEAL_ON_DAMAGE;
  static constexpr ETF2Conditions TF_COND_CRITBOOSTED_CARD_EFFECT =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_CRITBOOSTED_CARD_EFFECT;
  static constexpr ETF2Conditions TF_COND_INVULNERABLE_CARD_EFFECT =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_INVULNERABLE_CARD_EFFECT;
  static constexpr ETF2Conditions TF_COND_MEDIGUN_UBER_BULLET_RESIST =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_MEDIGUN_UBER_BULLET_RESIST;
  static constexpr ETF2Conditions TF_COND_MEDIGUN_UBER_BLAST_RESIST =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_MEDIGUN_UBER_BLAST_RESIST;
  static constexpr ETF2Conditions TF_COND_MEDIGUN_UBER_FIRE_RESIST =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_MEDIGUN_UBER_FIRE_RESIST;
  static constexpr ETF2Conditions TF_COND_MEDIGUN_SMALL_BULLET_RESIST =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_MEDIGUN_SMALL_BULLET_RESIST;
  static constexpr ETF2Conditions TF_COND_MEDIGUN_SMALL_BLAST_RESIST =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_MEDIGUN_SMALL_BLAST_RESIST;
  static constexpr ETF2Conditions TF_COND_MEDIGUN_SMALL_FIRE_RESIST =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_MEDIGUN_SMALL_FIRE_RESIST;
  static constexpr ETF2Conditions TF_COND_STEALTHED_USER_BUFF =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_STEALTHED_USER_BUFF;
  static constexpr ETF2Conditions TF_COND_MEDIGUN_DEBUFF =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_MEDIGUN_DEBUFF;
  static constexpr ETF2Conditions TF_COND_STEALTHED_USER_BUFF_FADING =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_STEALTHED_USER_BUFF_FADING;
  static constexpr ETF2Conditions TF_COND_BULLET_IMMUNE =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_BULLET_IMMUNE;
  static constexpr ETF2Conditions TF_COND_BLAST_IMMUNE =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_BLAST_IMMUNE;
  static constexpr ETF2Conditions TF_COND_FIRE_IMMUNE =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_FIRE_IMMUNE;
  static constexpr ETF2Conditions TF_COND_PREVENT_DEATH =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_PREVENT_DEATH;
  static constexpr ETF2Conditions TF_COND_MVM_BOT_STUN_RADIOWAVE =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_MVM_BOT_STUN_RADIOWAVE;
  static constexpr ETF2Conditions TF_COND_HALLOWEEN_SPEED_BOOST =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_HALLOWEEN_SPEED_BOOST;
  static constexpr ETF2Conditions TF_COND_HALLOWEEN_QUICK_HEAL =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_HALLOWEEN_QUICK_HEAL;
  static constexpr ETF2Conditions TF_COND_HALLOWEEN_GIANT =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_HALLOWEEN_GIANT;
  static constexpr ETF2Conditions TF_COND_HALLOWEEN_TINY =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_HALLOWEEN_TINY;
  static constexpr ETF2Conditions TF_COND_HALLOWEEN_IN_HELL =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_HALLOWEEN_IN_HELL;
  static constexpr ETF2Conditions TF_COND_HALLOWEEN_GHOST_MODE =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_HALLOWEEN_GHOST_MODE;
  static constexpr ETF2Conditions TF_COND_MINICRITBOOSTED_ON_KILL =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_MINICRITBOOSTED_ON_KILL;
  static constexpr ETF2Conditions TF_COND_OBSCURED_SMOKE =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_OBSCURED_SMOKE;
  static constexpr ETF2Conditions TF_COND_PARACHUTE_ACTIVE =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_PARACHUTE_ACTIVE;
  static constexpr ETF2Conditions TF_COND_BLASTJUMPING =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_BLASTJUMPING;
  static constexpr ETF2Conditions TF_COND_HALLOWEEN_KART =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_HALLOWEEN_KART;
  static constexpr ETF2Conditions TF_COND_HALLOWEEN_KART_DASH =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_HALLOWEEN_KART_DASH;
  static constexpr ETF2Conditions TF_COND_BALLOON_HEAD =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_BALLOON_HEAD;
  static constexpr ETF2Conditions TF_COND_MELEE_ONLY =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_MELEE_ONLY;
  static constexpr ETF2Conditions TF_COND_SWIMMING_CURSE =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_SWIMMING_CURSE;
  static constexpr ETF2Conditions TF_COND_FREEZE_INPUT =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_FREEZE_INPUT;
  static constexpr ETF2Conditions TF_COND_HALLOWEEN_KART_CAGE =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_HALLOWEEN_KART_CAGE;
  static constexpr ETF2Conditions TF_COND_DONOTUSE_0 =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_DONOTUSE_0;
  static constexpr ETF2Conditions TF_COND_RUNE_STRENGTH =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_RUNE_STRENGTH;
  static constexpr ETF2Conditions TF_COND_RUNE_HASTE =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_RUNE_HASTE;
  static constexpr ETF2Conditions TF_COND_RUNE_REGEN =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_RUNE_REGEN;
  static constexpr ETF2Conditions TF_COND_RUNE_RESIST =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_RUNE_RESIST;
  static constexpr ETF2Conditions TF_COND_RUNE_VAMPIRE =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_RUNE_VAMPIRE;
  static constexpr ETF2Conditions TF_COND_RUNE_REFLECT =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_RUNE_REFLECT;
  static constexpr ETF2Conditions TF_COND_RUNE_PRECISION =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_RUNE_PRECISION;
  static constexpr ETF2Conditions TF_COND_RUNE_AGILITY =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_RUNE_AGILITY;
  static constexpr ETF2Conditions TF_COND_GRAPPLINGHOOK =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_GRAPPLINGHOOK;
  static constexpr ETF2Conditions TF_COND_GRAPPLINGHOOK_SAFEFALL =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_GRAPPLINGHOOK_SAFEFALL;
  static constexpr ETF2Conditions TF_COND_GRAPPLINGHOOK_LATCHED =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_GRAPPLINGHOOK_LATCHED;
  static constexpr ETF2Conditions TF_COND_GRAPPLINGHOOK_BLEEDING =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_GRAPPLINGHOOK_BLEEDING;
  static constexpr ETF2Conditions TF_COND_AFTERBURN_IMMUNE =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_AFTERBURN_IMMUNE;
  static constexpr ETF2Conditions TF_COND_RUNE_KNOCKOUT =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_RUNE_KNOCKOUT;
  static constexpr ETF2Conditions TF_COND_RUNE_IMBALANCE =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_RUNE_IMBALANCE;
  static constexpr ETF2Conditions TF_COND_CRITBOOSTED_RUNE_TEMP =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_CRITBOOSTED_RUNE_TEMP;
  static constexpr ETF2Conditions TF_COND_PASSTIME_INTERCEPTION =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_PASSTIME_INTERCEPTION;
  static constexpr ETF2Conditions TF_COND_SWIMMING_NO_EFFECTS =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_SWIMMING_NO_EFFECTS;
  static constexpr ETF2Conditions TF_COND_PURGATORY =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_PURGATORY;
  static constexpr ETF2Conditions TF_COND_RUNE_KING =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_RUNE_KING;
  static constexpr ETF2Conditions TF_COND_RUNE_PLAGUE =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_RUNE_PLAGUE;
  static constexpr ETF2Conditions TF_COND_RUNE_SUPERNOVA =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_RUNE_SUPERNOVA;
  static constexpr ETF2Conditions TF_COND_PLAGUE =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_PLAGUE;
  static constexpr ETF2Conditions TF_COND_KING_BUFFED =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_KING_BUFFED;
  static constexpr ETF2Conditions TF_COND_TEAM_GLOWS =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_TEAM_GLOWS;
  static constexpr ETF2Conditions TF_COND_KNOCKED_INTO_AIR =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_KNOCKED_INTO_AIR;
  static constexpr ETF2Conditions TF_COND_COMPETITIVE_WINNER =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_COMPETITIVE_WINNER;
  static constexpr ETF2Conditions TF_COND_COMPETITIVE_LOSER =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_COMPETITIVE_LOSER;
  static constexpr ETF2Conditions TF_COND_HEALING_DEBUFF =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_HEALING_DEBUFF;
  static constexpr ETF2Conditions TF_COND_PASSTIME_PENALTY_DEBUFF =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_PASSTIME_PENALTY_DEBUFF;
  static constexpr ETF2Conditions TF_COND_PARACHUTE_DEPLOYED =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_PARACHUTE_DEPLOYED;
  static constexpr ETF2Conditions TF_COND_NO_COMBAT_SPEED_BOOST =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_NO_COMBAT_SPEED_BOOST;
  static constexpr ETF2Conditions TF_COND_TRANQ_SPY_BOOST =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_TRANQ_SPY_BOOST;
  static constexpr ETF2Conditions TF_COND_TRANQ_MARKED =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_TRANQ_MARKED;
  static constexpr ETF2Conditions TF_COND_ROCKETPACK =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_ROCKETPACK;
  static constexpr ETF2Conditions TF_COND_ROCKETPACK_PASSENGER =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_ROCKETPACK_PASSENGER;
  static constexpr ETF2Conditions TF_COND_STEALTHED_PHASE =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_STEALTHED_PHASE;
  static constexpr ETF2Conditions TF_COND_CLIP_OVERLOAD =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_CLIP_OVERLOAD;
  static constexpr ETF2Conditions TF_COND_SPY_CLASS_STEAL =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_SPY_CLASS_STEAL;
  static constexpr ETF2Conditions TF_COND_GAS =
    CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_GAS;
  static inline bool ETF2Conditions_IsValid(int value) {
    return CMsgQuestObjectiveDef_ETF2Conditions_IsValid(value);
  }
  static constexpr ETF2Conditions ETF2Conditions_MIN =
    CMsgQuestObjectiveDef_ETF2Conditions_ETF2Conditions_MIN;
  static constexpr ETF2Conditions ETF2Conditions_MAX =
    CMsgQuestObjectiveDef_ETF2Conditions_ETF2Conditions_MAX;
  static constexpr int ETF2Conditions_ARRAYSIZE =
    CMsgQuestObjectiveDef_ETF2Conditions_ETF2Conditions_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ETF2Conditions_descriptor() {
    return CMsgQuestObjectiveDef_ETF2Conditions_descriptor();
  }
  template<typename T>
  static inline const std::string& ETF2Conditions_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ETF2Conditions>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ETF2Conditions_Name.");
    return CMsgQuestObjectiveDef_ETF2Conditions_Name(enum_t_value);
  }
  static inline bool ETF2Conditions_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ETF2Conditions* value) {
    return CMsgQuestObjectiveDef_ETF2Conditions_Parse(name, value);
  }

  typedef CMsgQuestObjectiveDef_ETF2Team ETF2Team;
  static constexpr ETF2Team TF_TEAM_RED =
    CMsgQuestObjectiveDef_ETF2Team_TF_TEAM_RED;
  static constexpr ETF2Team TF_TEAM_BLUE =
    CMsgQuestObjectiveDef_ETF2Team_TF_TEAM_BLUE;
  static inline bool ETF2Team_IsValid(int value) {
    return CMsgQuestObjectiveDef_ETF2Team_IsValid(value);
  }
  static constexpr ETF2Team ETF2Team_MIN =
    CMsgQuestObjectiveDef_ETF2Team_ETF2Team_MIN;
  static constexpr ETF2Team ETF2Team_MAX =
    CMsgQuestObjectiveDef_ETF2Team_ETF2Team_MAX;
  static constexpr int ETF2Team_ARRAYSIZE =
    CMsgQuestObjectiveDef_ETF2Team_ETF2Team_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ETF2Team_descriptor() {
    return CMsgQuestObjectiveDef_ETF2Team_descriptor();
  }
  template<typename T>
  static inline const std::string& ETF2Team_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ETF2Team>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ETF2Team_Name.");
    return CMsgQuestObjectiveDef_ETF2Team_Name(enum_t_value);
  }
  static inline bool ETF2Team_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ETF2Team* value) {
    return CMsgQuestObjectiveDef_ETF2Team_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMapFieldNumber = 8,
    kGameModeFieldNumber = 9,
    kConditionVarsFieldNumber = 11,
    kClassesVarsFieldNumber = 12,
    kConditionsFieldNumber = 13,
    kItemNameFieldNumber = 15,
    kLocDesctokenFieldNumber = 2,
    kHeaderFieldNumber = 1,
    kPointsFieldNumber = 3,
    kConditionsDefindexFieldNumber = 5,
    kConditionLogicFieldNumber = 14,
    kItemLogicFieldNumber = 16,
    kJumpStateFieldNumber = 17,
    kTeamFieldNumber = 10,
  };
  // repeated string map = 8 [(.display_name) = "Maps Modifier", (.comment) = "If set, the player must be on one of the listed maps to get credit."];
  int map_size() const;
  private:
  int _internal_map_size() const;
  public:
  void clear_map();
  const std::string& map(int index) const;
  std::string* mutable_map(int index);
  void set_map(int index, const std::string& value);
  void set_map(int index, std::string&& value);
  void set_map(int index, const char* value);
  void set_map(int index, const char* value, size_t size);
  std::string* add_map();
  void add_map(const std::string& value);
  void add_map(std::string&& value);
  void add_map(const char* value);
  void add_map(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& map() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_map();
  private:
  const std::string& _internal_map(int index) const;
  std::string* _internal_add_map();
  public:

  // repeated .CMsgQuestObjectiveDef.ETF2GameModes game_mode = 9 [(.display_name) = "Game Mode Modifier", (.comment) = "If set, the player must be in one of the listed game modes to get credit."];
  int game_mode_size() const;
  private:
  int _internal_game_mode_size() const;
  public:
  void clear_game_mode();
  private:
  ::CMsgQuestObjectiveDef_ETF2GameModes _internal_game_mode(int index) const;
  void _internal_add_game_mode(::CMsgQuestObjectiveDef_ETF2GameModes value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_game_mode();
  public:
  ::CMsgQuestObjectiveDef_ETF2GameModes game_mode(int index) const;
  void set_game_mode(int index, ::CMsgQuestObjectiveDef_ETF2GameModes value);
  void add_game_mode(::CMsgQuestObjectiveDef_ETF2GameModes value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& game_mode() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_game_mode();

  // repeated .CMsgVarField condition_vars = 11 [(.display_name) = "Objective Vars", (.var_field_type) = VAR_TYPE_STRING];
  int condition_vars_size() const;
  private:
  int _internal_condition_vars_size() const;
  public:
  void clear_condition_vars();
  ::CMsgVarField* mutable_condition_vars(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgVarField >*
      mutable_condition_vars();
  private:
  const ::CMsgVarField& _internal_condition_vars(int index) const;
  ::CMsgVarField* _internal_add_condition_vars();
  public:
  const ::CMsgVarField& condition_vars(int index) const;
  ::CMsgVarField* add_condition_vars();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgVarField >&
      condition_vars() const;

  // repeated .CMsgVarField classes_vars = 12 [(.display_name) = "Class Modifier", (.var_field_type) = VAR_TYPE_STRING];
  int classes_vars_size() const;
  private:
  int _internal_classes_vars_size() const;
  public:
  void clear_classes_vars();
  ::CMsgVarField* mutable_classes_vars(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgVarField >*
      mutable_classes_vars();
  private:
  const ::CMsgVarField& _internal_classes_vars(int index) const;
  ::CMsgVarField* _internal_add_classes_vars();
  public:
  const ::CMsgVarField& classes_vars(int index) const;
  ::CMsgVarField* add_classes_vars();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgVarField >&
      classes_vars() const;

  // repeated .CMsgQuestObjectiveDef.ETF2Conditions conditions = 13 [(.display_name) = "Required Conds"];
  int conditions_size() const;
  private:
  int _internal_conditions_size() const;
  public:
  void clear_conditions();
  private:
  ::CMsgQuestObjectiveDef_ETF2Conditions _internal_conditions(int index) const;
  void _internal_add_conditions(::CMsgQuestObjectiveDef_ETF2Conditions value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_conditions();
  public:
  ::CMsgQuestObjectiveDef_ETF2Conditions conditions(int index) const;
  void set_conditions(int index, ::CMsgQuestObjectiveDef_ETF2Conditions value);
  void add_conditions(::CMsgQuestObjectiveDef_ETF2Conditions value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& conditions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_conditions();

  // repeated string item_name = 15 [(.display_name) = "Required equipped item", (.comment) = "Require that this item be equipped in any slot."];
  int item_name_size() const;
  private:
  int _internal_item_name_size() const;
  public:
  void clear_item_name();
  const std::string& item_name(int index) const;
  std::string* mutable_item_name(int index);
  void set_item_name(int index, const std::string& value);
  void set_item_name(int index, std::string&& value);
  void set_item_name(int index, const char* value);
  void set_item_name(int index, const char* value, size_t size);
  std::string* add_item_name();
  void add_item_name(const std::string& value);
  void add_item_name(std::string&& value);
  void add_item_name(const char* value);
  void add_item_name(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& item_name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_item_name();
  private:
  const std::string& _internal_item_name(int index) const;
  std::string* _internal_add_item_name();
  public:

  // optional string loc_desctoken = 2 [(.localized) = true];
  bool has_loc_desctoken() const;
  private:
  bool _internal_has_loc_desctoken() const;
  public:
  void clear_loc_desctoken();
  const std::string& loc_desctoken() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_loc_desctoken(ArgT0&& arg0, ArgT... args);
  std::string* mutable_loc_desctoken();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_loc_desctoken();
  void set_allocated_loc_desctoken(std::string* loc_desctoken);
  private:
  const std::string& _internal_loc_desctoken() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_loc_desctoken(const std::string& value);
  std::string* _internal_mutable_loc_desctoken();
  public:

  // required .CMsgProtoDefHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::CMsgProtoDefHeader& header() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgProtoDefHeader* release_header();
  ::CMsgProtoDefHeader* mutable_header();
  void set_allocated_header(::CMsgProtoDefHeader* header);
  private:
  const ::CMsgProtoDefHeader& _internal_header() const;
  ::CMsgProtoDefHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::CMsgProtoDefHeader* header);
  ::CMsgProtoDefHeader* unsafe_arena_release_header();

  // optional uint32 points = 3;
  bool has_points() const;
  private:
  bool _internal_has_points() const;
  public:
  void clear_points();
  ::PROTOBUF_NAMESPACE_ID::uint32 points() const;
  void set_points(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_points() const;
  void _internal_set_points(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 conditions_defindex = 5;
  bool has_conditions_defindex() const;
  private:
  bool _internal_has_conditions_defindex() const;
  public:
  void clear_conditions_defindex();
  ::PROTOBUF_NAMESPACE_ID::uint32 conditions_defindex() const;
  void set_conditions_defindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_conditions_defindex() const;
  void _internal_set_conditions_defindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .LogicalOperation condition_logic = 14 [default = AND, (.display_name) = "Condition Logic", (.comment) = "What kind of logic to use when evaluating the player\'s conditions."];
  bool has_condition_logic() const;
  private:
  bool _internal_has_condition_logic() const;
  public:
  void clear_condition_logic();
  ::LogicalOperation condition_logic() const;
  void set_condition_logic(::LogicalOperation value);
  private:
  ::LogicalOperation _internal_condition_logic() const;
  void _internal_set_condition_logic(::LogicalOperation value);
  public:

  // optional .LogicalOperation item_logic = 16 [default = AND, (.display_name) = "Item logic", (.comment) = "What kind of logic to use when evaluating the player\'s items."];
  bool has_item_logic() const;
  private:
  bool _internal_has_item_logic() const;
  public:
  void clear_item_logic();
  ::LogicalOperation item_logic() const;
  void set_item_logic(::LogicalOperation value);
  private:
  ::LogicalOperation _internal_item_logic() const;
  void _internal_set_item_logic(::LogicalOperation value);
  public:

  // optional uint32 jump_state = 17 [(.display_name) = "Jump logic", (.comment) = "What state of jumping the player needs to be in."];
  bool has_jump_state() const;
  private:
  bool _internal_has_jump_state() const;
  public:
  void clear_jump_state();
  ::PROTOBUF_NAMESPACE_ID::uint32 jump_state() const;
  void set_jump_state(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_jump_state() const;
  void _internal_set_jump_state(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .CMsgQuestObjectiveDef.ETF2Team team = 10 [default = TF_TEAM_RED, (.display_name) = "Team Modifier", (.comment) = "If set, the player must be on the specified team to get credit."];
  bool has_team() const;
  private:
  bool _internal_has_team() const;
  public:
  void clear_team();
  ::CMsgQuestObjectiveDef_ETF2Team team() const;
  void set_team(::CMsgQuestObjectiveDef_ETF2Team value);
  private:
  ::CMsgQuestObjectiveDef_ETF2Team _internal_team() const;
  void _internal_set_team(::CMsgQuestObjectiveDef_ETF2Team value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgQuestObjectiveDef)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> map_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> game_mode_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgVarField > condition_vars_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgVarField > classes_vars_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> conditions_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> item_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr loc_desctoken_;
  ::CMsgProtoDefHeader* header_;
  ::PROTOBUF_NAMESPACE_ID::uint32 points_;
  ::PROTOBUF_NAMESPACE_ID::uint32 conditions_defindex_;
  int condition_logic_;
  int item_logic_;
  ::PROTOBUF_NAMESPACE_ID::uint32 jump_state_;
  int team_;
  friend struct ::TableStruct_tf_5fproto_5fdef_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class M0PROTO CMsgQuestDef_MMCriteria final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgQuestDef.MMCriteria) */ {
 public:
  inline CMsgQuestDef_MMCriteria() : CMsgQuestDef_MMCriteria(nullptr) {}
  ~CMsgQuestDef_MMCriteria() override;
  explicit constexpr CMsgQuestDef_MMCriteria(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgQuestDef_MMCriteria(const CMsgQuestDef_MMCriteria& from);
  CMsgQuestDef_MMCriteria(CMsgQuestDef_MMCriteria&& from) noexcept
    : CMsgQuestDef_MMCriteria() {
    *this = ::std::move(from);
  }

  inline CMsgQuestDef_MMCriteria& operator=(const CMsgQuestDef_MMCriteria& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgQuestDef_MMCriteria& operator=(CMsgQuestDef_MMCriteria&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgQuestDef_MMCriteria& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgQuestDef_MMCriteria* internal_default_instance() {
    return reinterpret_cast<const CMsgQuestDef_MMCriteria*>(
               &_CMsgQuestDef_MMCriteria_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CMsgQuestDef_MMCriteria& a, CMsgQuestDef_MMCriteria& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgQuestDef_MMCriteria* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgQuestDef_MMCriteria* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgQuestDef_MMCriteria* New() const final {
    return new CMsgQuestDef_MMCriteria();
  }

  CMsgQuestDef_MMCriteria* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgQuestDef_MMCriteria>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgQuestDef_MMCriteria& from);
  void MergeFrom(const CMsgQuestDef_MMCriteria& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgQuestDef_MMCriteria* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgQuestDef.MMCriteria";
  }
  protected:
  explicit CMsgQuestDef_MMCriteria(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupNameFieldNumber = 1,
    kCategoryNameFieldNumber = 2,
    kMapNameFieldNumber = 3,
  };
  // optional string group_name = 1;
  bool has_group_name() const;
  private:
  bool _internal_has_group_name() const;
  public:
  void clear_group_name();
  const std::string& group_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_group_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_group_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_group_name();
  void set_allocated_group_name(std::string* group_name);
  private:
  const std::string& _internal_group_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_group_name(const std::string& value);
  std::string* _internal_mutable_group_name();
  public:

  // optional string category_name = 2;
  bool has_category_name() const;
  private:
  bool _internal_has_category_name() const;
  public:
  void clear_category_name();
  const std::string& category_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_category_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_category_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_category_name();
  void set_allocated_category_name(std::string* category_name);
  private:
  const std::string& _internal_category_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_category_name(const std::string& value);
  std::string* _internal_mutable_category_name();
  public:

  // optional string map_name = 3;
  bool has_map_name() const;
  private:
  bool _internal_has_map_name() const;
  public:
  void clear_map_name();
  const std::string& map_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_map_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_map_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_map_name();
  void set_allocated_map_name(std::string* map_name);
  private:
  const std::string& _internal_map_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_map_name(const std::string& value);
  std::string* _internal_mutable_map_name();
  public:

  // @@protoc_insertion_point(class_scope:CMsgQuestDef.MMCriteria)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr category_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr map_name_;
  friend struct ::TableStruct_tf_5fproto_5fdef_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class M0PROTO CMsgQuestDef_ObjectiveInstance final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgQuestDef.ObjectiveInstance) */ {
 public:
  inline CMsgQuestDef_ObjectiveInstance() : CMsgQuestDef_ObjectiveInstance(nullptr) {}
  ~CMsgQuestDef_ObjectiveInstance() override;
  explicit constexpr CMsgQuestDef_ObjectiveInstance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgQuestDef_ObjectiveInstance(const CMsgQuestDef_ObjectiveInstance& from);
  CMsgQuestDef_ObjectiveInstance(CMsgQuestDef_ObjectiveInstance&& from) noexcept
    : CMsgQuestDef_ObjectiveInstance() {
    *this = ::std::move(from);
  }

  inline CMsgQuestDef_ObjectiveInstance& operator=(const CMsgQuestDef_ObjectiveInstance& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgQuestDef_ObjectiveInstance& operator=(CMsgQuestDef_ObjectiveInstance&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgQuestDef_ObjectiveInstance& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgQuestDef_ObjectiveInstance* internal_default_instance() {
    return reinterpret_cast<const CMsgQuestDef_ObjectiveInstance*>(
               &_CMsgQuestDef_ObjectiveInstance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CMsgQuestDef_ObjectiveInstance& a, CMsgQuestDef_ObjectiveInstance& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgQuestDef_ObjectiveInstance* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgQuestDef_ObjectiveInstance* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgQuestDef_ObjectiveInstance* New() const final {
    return new CMsgQuestDef_ObjectiveInstance();
  }

  CMsgQuestDef_ObjectiveInstance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgQuestDef_ObjectiveInstance>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgQuestDef_ObjectiveInstance& from);
  void MergeFrom(const CMsgQuestDef_ObjectiveInstance& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgQuestDef_ObjectiveInstance* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgQuestDef.ObjectiveInstance";
  }
  protected:
  explicit CMsgQuestDef_ObjectiveInstance(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectiveFieldNumber = 1,
    kPointTypeFieldNumber = 2,
    kPointValueFieldNumber = 3,
  };
  // optional .CMsgProtoDefID objective = 1 [(.valid_type) = DEF_TYPE_QUEST_OBJECTIVE];
  bool has_objective() const;
  private:
  bool _internal_has_objective() const;
  public:
  void clear_objective();
  const ::CMsgProtoDefID& objective() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgProtoDefID* release_objective();
  ::CMsgProtoDefID* mutable_objective();
  void set_allocated_objective(::CMsgProtoDefID* objective);
  private:
  const ::CMsgProtoDefID& _internal_objective() const;
  ::CMsgProtoDefID* _internal_mutable_objective();
  public:
  void unsafe_arena_set_allocated_objective(
      ::CMsgProtoDefID* objective);
  ::CMsgProtoDefID* unsafe_arena_release_objective();

  // optional .EQuestPoints point_type = 2 [default = QUEST_POINTS_NOVICE];
  bool has_point_type() const;
  private:
  bool _internal_has_point_type() const;
  public:
  void clear_point_type();
  ::EQuestPoints point_type() const;
  void set_point_type(::EQuestPoints value);
  private:
  ::EQuestPoints _internal_point_type() const;
  void _internal_set_point_type(::EQuestPoints value);
  public:

  // optional uint32 point_value = 3 [(.display_name) = "Points Override", (.comment) = "Override value for the point value of the objective.  If not set, uses the objective\'s point value"];
  bool has_point_value() const;
  private:
  bool _internal_has_point_value() const;
  public:
  void clear_point_value();
  ::PROTOBUF_NAMESPACE_ID::uint32 point_value() const;
  void set_point_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_point_value() const;
  void _internal_set_point_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgQuestDef.ObjectiveInstance)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CMsgProtoDefID* objective_;
  int point_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 point_value_;
  friend struct ::TableStruct_tf_5fproto_5fdef_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class M0PROTO CMsgQuestDef final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgQuestDef) */ {
 public:
  inline CMsgQuestDef() : CMsgQuestDef(nullptr) {}
  ~CMsgQuestDef() override;
  explicit constexpr CMsgQuestDef(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgQuestDef(const CMsgQuestDef& from);
  CMsgQuestDef(CMsgQuestDef&& from) noexcept
    : CMsgQuestDef() {
    *this = ::std::move(from);
  }

  inline CMsgQuestDef& operator=(const CMsgQuestDef& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgQuestDef& operator=(CMsgQuestDef&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgQuestDef& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgQuestDef* internal_default_instance() {
    return reinterpret_cast<const CMsgQuestDef*>(
               &_CMsgQuestDef_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CMsgQuestDef& a, CMsgQuestDef& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgQuestDef* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgQuestDef* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgQuestDef* New() const final {
    return new CMsgQuestDef();
  }

  CMsgQuestDef* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgQuestDef>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgQuestDef& from);
  void MergeFrom(const CMsgQuestDef& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgQuestDef* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgQuestDef";
  }
  protected:
  explicit CMsgQuestDef(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgQuestDef_MMCriteria MMCriteria;
  typedef CMsgQuestDef_ObjectiveInstance ObjectiveInstance;

  // accessors -------------------------------------------------------

  enum : int {
    kLoanerNamesFieldNumber = 15,
    kObjectivesFieldNumber = 16,
    kMapFieldNumber = 17,
    kNameLoctokenFieldNumber = 5,
    kOperationFieldNumber = 7,
    kNodeImageFieldNumber = 12,
    kIconImageFieldNumber = 13,
    kHeaderFieldNumber = 1,
    kMmCriteriaFieldNumber = 8,
    kThemeFieldNumber = 14,
    kMaxPoints0FieldNumber = 2,
    kMaxPoints1FieldNumber = 3,
    kMaxPoints2FieldNumber = 4,
  };
  // repeated string loaner_names = 15 [(.display_name) = "Loaners", (.comment) = "Names of items to give as loaners"];
  int loaner_names_size() const;
  private:
  int _internal_loaner_names_size() const;
  public:
  void clear_loaner_names();
  const std::string& loaner_names(int index) const;
  std::string* mutable_loaner_names(int index);
  void set_loaner_names(int index, const std::string& value);
  void set_loaner_names(int index, std::string&& value);
  void set_loaner_names(int index, const char* value);
  void set_loaner_names(int index, const char* value, size_t size);
  std::string* add_loaner_names();
  void add_loaner_names(const std::string& value);
  void add_loaner_names(std::string&& value);
  void add_loaner_names(const char* value);
  void add_loaner_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& loaner_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_loaner_names();
  private:
  const std::string& _internal_loaner_names(int index) const;
  std::string* _internal_add_loaner_names();
  public:

  // repeated .CMsgQuestDef.ObjectiveInstance objectives = 16;
  int objectives_size() const;
  private:
  int _internal_objectives_size() const;
  public:
  void clear_objectives();
  ::CMsgQuestDef_ObjectiveInstance* mutable_objectives(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgQuestDef_ObjectiveInstance >*
      mutable_objectives();
  private:
  const ::CMsgQuestDef_ObjectiveInstance& _internal_objectives(int index) const;
  ::CMsgQuestDef_ObjectiveInstance* _internal_add_objectives();
  public:
  const ::CMsgQuestDef_ObjectiveInstance& objectives(int index) const;
  ::CMsgQuestDef_ObjectiveInstance* add_objectives();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgQuestDef_ObjectiveInstance >&
      objectives() const;

  // repeated string map = 17 [(.display_name) = "Maps Modifier", (.comment) = "If set, the player must be on one of the listed maps to get credit."];
  int map_size() const;
  private:
  int _internal_map_size() const;
  public:
  void clear_map();
  const std::string& map(int index) const;
  std::string* mutable_map(int index);
  void set_map(int index, const std::string& value);
  void set_map(int index, std::string&& value);
  void set_map(int index, const char* value);
  void set_map(int index, const char* value, size_t size);
  std::string* add_map();
  void add_map(const std::string& value);
  void add_map(std::string&& value);
  void add_map(const char* value);
  void add_map(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& map() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_map();
  private:
  const std::string& _internal_map(int index) const;
  std::string* _internal_add_map();
  public:

  // optional string name_loctoken = 5 [(.localized) = true];
  bool has_name_loctoken() const;
  private:
  bool _internal_has_name_loctoken() const;
  public:
  void clear_name_loctoken();
  const std::string& name_loctoken() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name_loctoken(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name_loctoken();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_name_loctoken();
  void set_allocated_name_loctoken(std::string* name_loctoken);
  private:
  const std::string& _internal_name_loctoken() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name_loctoken(const std::string& value);
  std::string* _internal_mutable_name_loctoken();
  public:

  // optional string operation = 7;
  bool has_operation() const;
  private:
  bool _internal_has_operation() const;
  public:
  void clear_operation();
  const std::string& operation() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_operation(ArgT0&& arg0, ArgT... args);
  std::string* mutable_operation();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_operation();
  void set_allocated_operation(std::string* operation);
  private:
  const std::string& _internal_operation() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_operation(const std::string& value);
  std::string* _internal_mutable_operation();
  public:

  // optional string node_image = 12 [(.display_name) = "Node Image", (.comment) = "Filename of the image to show on the node view"];
  bool has_node_image() const;
  private:
  bool _internal_has_node_image() const;
  public:
  void clear_node_image();
  const std::string& node_image() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_node_image(ArgT0&& arg0, ArgT... args);
  std::string* mutable_node_image();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_node_image();
  void set_allocated_node_image(std::string* node_image);
  private:
  const std::string& _internal_node_image() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_node_image(const std::string& value);
  std::string* _internal_mutable_node_image();
  public:

  // optional string icon_image = 13 [(.display_name) = "Node Icon", (.comment) = "Which icon to show on the map"];
  bool has_icon_image() const;
  private:
  bool _internal_has_icon_image() const;
  public:
  void clear_icon_image();
  const std::string& icon_image() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_icon_image(ArgT0&& arg0, ArgT... args);
  std::string* mutable_icon_image();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_icon_image();
  void set_allocated_icon_image(std::string* icon_image);
  private:
  const std::string& _internal_icon_image() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_icon_image(const std::string& value);
  std::string* _internal_mutable_icon_image();
  public:

  // required .CMsgProtoDefHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::CMsgProtoDefHeader& header() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgProtoDefHeader* release_header();
  ::CMsgProtoDefHeader* mutable_header();
  void set_allocated_header(::CMsgProtoDefHeader* header);
  private:
  const ::CMsgProtoDefHeader& _internal_header() const;
  ::CMsgProtoDefHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::CMsgProtoDefHeader* header);
  ::CMsgProtoDefHeader* unsafe_arena_release_header();

  // optional .CMsgQuestDef.MMCriteria mm_criteria = 8;
  bool has_mm_criteria() const;
  private:
  bool _internal_has_mm_criteria() const;
  public:
  void clear_mm_criteria();
  const ::CMsgQuestDef_MMCriteria& mm_criteria() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgQuestDef_MMCriteria* release_mm_criteria();
  ::CMsgQuestDef_MMCriteria* mutable_mm_criteria();
  void set_allocated_mm_criteria(::CMsgQuestDef_MMCriteria* mm_criteria);
  private:
  const ::CMsgQuestDef_MMCriteria& _internal_mm_criteria() const;
  ::CMsgQuestDef_MMCriteria* _internal_mutable_mm_criteria();
  public:
  void unsafe_arena_set_allocated_mm_criteria(
      ::CMsgQuestDef_MMCriteria* mm_criteria);
  ::CMsgQuestDef_MMCriteria* unsafe_arena_release_mm_criteria();

  // optional .CMsgProtoDefID theme = 14 [(.valid_type) = DEF_TYPE_QUEST_THEME];
  bool has_theme() const;
  private:
  bool _internal_has_theme() const;
  public:
  void clear_theme();
  const ::CMsgProtoDefID& theme() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgProtoDefID* release_theme();
  ::CMsgProtoDefID* mutable_theme();
  void set_allocated_theme(::CMsgProtoDefID* theme);
  private:
  const ::CMsgProtoDefID& _internal_theme() const;
  ::CMsgProtoDefID* _internal_mutable_theme();
  public:
  void unsafe_arena_set_allocated_theme(
      ::CMsgProtoDefID* theme);
  ::CMsgProtoDefID* unsafe_arena_release_theme();

  // optional uint32 max_points_0 = 2;
  bool has_max_points_0() const;
  private:
  bool _internal_has_max_points_0() const;
  public:
  void clear_max_points_0();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_points_0() const;
  void set_max_points_0(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_points_0() const;
  void _internal_set_max_points_0(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 max_points_1 = 3;
  bool has_max_points_1() const;
  private:
  bool _internal_has_max_points_1() const;
  public:
  void clear_max_points_1();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_points_1() const;
  void set_max_points_1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_points_1() const;
  void _internal_set_max_points_1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 max_points_2 = 4;
  bool has_max_points_2() const;
  private:
  bool _internal_has_max_points_2() const;
  public:
  void clear_max_points_2();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_points_2() const;
  void set_max_points_2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_points_2() const;
  void _internal_set_max_points_2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgQuestDef)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> loaner_names_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgQuestDef_ObjectiveInstance > objectives_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> map_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_loctoken_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr operation_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr node_image_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr icon_image_;
  ::CMsgProtoDefHeader* header_;
  ::CMsgQuestDef_MMCriteria* mm_criteria_;
  ::CMsgProtoDefID* theme_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_points_0_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_points_1_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_points_2_;
  friend struct ::TableStruct_tf_5fproto_5fdef_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class M0PROTO CMsgQuestMapStoreItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgQuestMapStoreItem) */ {
 public:
  inline CMsgQuestMapStoreItem() : CMsgQuestMapStoreItem(nullptr) {}
  ~CMsgQuestMapStoreItem() override;
  explicit constexpr CMsgQuestMapStoreItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgQuestMapStoreItem(const CMsgQuestMapStoreItem& from);
  CMsgQuestMapStoreItem(CMsgQuestMapStoreItem&& from) noexcept
    : CMsgQuestMapStoreItem() {
    *this = ::std::move(from);
  }

  inline CMsgQuestMapStoreItem& operator=(const CMsgQuestMapStoreItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgQuestMapStoreItem& operator=(CMsgQuestMapStoreItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgQuestMapStoreItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgQuestMapStoreItem* internal_default_instance() {
    return reinterpret_cast<const CMsgQuestMapStoreItem*>(
               &_CMsgQuestMapStoreItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CMsgQuestMapStoreItem& a, CMsgQuestMapStoreItem& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgQuestMapStoreItem* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgQuestMapStoreItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgQuestMapStoreItem* New() const final {
    return new CMsgQuestMapStoreItem();
  }

  CMsgQuestMapStoreItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgQuestMapStoreItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgQuestMapStoreItem& from);
  void MergeFrom(const CMsgQuestMapStoreItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgQuestMapStoreItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgQuestMapStoreItem";
  }
  protected:
  explicit CMsgQuestMapStoreItem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemNameFieldNumber = 2,
    kRewardLootlistNameFieldNumber = 6,
    kHeaderFieldNumber = 1,
    kPriceFieldNumber = 3,
    kPurchaseLimitFieldNumber = 4,
    kSortGroupFieldNumber = 5,
  };
  // optional string item_name = 2;
  bool has_item_name() const;
  private:
  bool _internal_has_item_name() const;
  public:
  void clear_item_name();
  const std::string& item_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_item_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_item_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_item_name();
  void set_allocated_item_name(std::string* item_name);
  private:
  const std::string& _internal_item_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_item_name(const std::string& value);
  std::string* _internal_mutable_item_name();
  public:

  // optional string reward_lootlist_name = 6 [(.display_name) = "Reward Lootlist", (.comment) = "The name of the lootlist to roll as a reward"];
  bool has_reward_lootlist_name() const;
  private:
  bool _internal_has_reward_lootlist_name() const;
  public:
  void clear_reward_lootlist_name();
  const std::string& reward_lootlist_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reward_lootlist_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reward_lootlist_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_reward_lootlist_name();
  void set_allocated_reward_lootlist_name(std::string* reward_lootlist_name);
  private:
  const std::string& _internal_reward_lootlist_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reward_lootlist_name(const std::string& value);
  std::string* _internal_mutable_reward_lootlist_name();
  public:

  // required .CMsgProtoDefHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::CMsgProtoDefHeader& header() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgProtoDefHeader* release_header();
  ::CMsgProtoDefHeader* mutable_header();
  void set_allocated_header(::CMsgProtoDefHeader* header);
  private:
  const ::CMsgProtoDefHeader& _internal_header() const;
  ::CMsgProtoDefHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::CMsgProtoDefHeader* header);
  ::CMsgProtoDefHeader* unsafe_arena_release_header();

  // optional .CMsgVarField price = 3 [(.var_field_type) = VAR_TYPE_SINT32];
  bool has_price() const;
  private:
  bool _internal_has_price() const;
  public:
  void clear_price();
  const ::CMsgVarField& price() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgVarField* release_price();
  ::CMsgVarField* mutable_price();
  void set_allocated_price(::CMsgVarField* price);
  private:
  const ::CMsgVarField& _internal_price() const;
  ::CMsgVarField* _internal_mutable_price();
  public:
  void unsafe_arena_set_allocated_price(
      ::CMsgVarField* price);
  ::CMsgVarField* unsafe_arena_release_price();

  // optional uint32 purchase_limit = 4 [(.display_name) = "Purchase Limit", (.comment) = "How many times this reward can be purchased"];
  bool has_purchase_limit() const;
  private:
  bool _internal_has_purchase_limit() const;
  public:
  void clear_purchase_limit();
  ::PROTOBUF_NAMESPACE_ID::uint32 purchase_limit() const;
  void set_purchase_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_purchase_limit() const;
  void _internal_set_purchase_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 sort_group = 5 [(.display_name) = "Sort group", (.comment) = "Sort by this group, then alhpabetically"];
  bool has_sort_group() const;
  private:
  bool _internal_has_sort_group() const;
  public:
  void clear_sort_group();
  ::PROTOBUF_NAMESPACE_ID::uint32 sort_group() const;
  void set_sort_group(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sort_group() const;
  void _internal_set_sort_group(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgQuestMapStoreItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr item_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reward_lootlist_name_;
  ::CMsgProtoDefHeader* header_;
  ::CMsgVarField* price_;
  ::PROTOBUF_NAMESPACE_ID::uint32 purchase_limit_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sort_group_;
  friend struct ::TableStruct_tf_5fproto_5fdef_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class M0PROTO CMsgQuestMapRegionDef_RegionLink final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgQuestMapRegionDef.RegionLink) */ {
 public:
  inline CMsgQuestMapRegionDef_RegionLink() : CMsgQuestMapRegionDef_RegionLink(nullptr) {}
  ~CMsgQuestMapRegionDef_RegionLink() override;
  explicit constexpr CMsgQuestMapRegionDef_RegionLink(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgQuestMapRegionDef_RegionLink(const CMsgQuestMapRegionDef_RegionLink& from);
  CMsgQuestMapRegionDef_RegionLink(CMsgQuestMapRegionDef_RegionLink&& from) noexcept
    : CMsgQuestMapRegionDef_RegionLink() {
    *this = ::std::move(from);
  }

  inline CMsgQuestMapRegionDef_RegionLink& operator=(const CMsgQuestMapRegionDef_RegionLink& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgQuestMapRegionDef_RegionLink& operator=(CMsgQuestMapRegionDef_RegionLink&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgQuestMapRegionDef_RegionLink& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgQuestMapRegionDef_RegionLink* internal_default_instance() {
    return reinterpret_cast<const CMsgQuestMapRegionDef_RegionLink*>(
               &_CMsgQuestMapRegionDef_RegionLink_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CMsgQuestMapRegionDef_RegionLink& a, CMsgQuestMapRegionDef_RegionLink& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgQuestMapRegionDef_RegionLink* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgQuestMapRegionDef_RegionLink* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgQuestMapRegionDef_RegionLink* New() const final {
    return new CMsgQuestMapRegionDef_RegionLink();
  }

  CMsgQuestMapRegionDef_RegionLink* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgQuestMapRegionDef_RegionLink>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgQuestMapRegionDef_RegionLink& from);
  void MergeFrom(const CMsgQuestMapRegionDef_RegionLink& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgQuestMapRegionDef_RegionLink* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgQuestMapRegionDef.RegionLink";
  }
  protected:
  explicit CMsgQuestMapRegionDef_RegionLink(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetRegionDefidFieldNumber = 1,
    kXposFieldNumber = 2,
    kYposFieldNumber = 3,
  };
  // required .CMsgProtoDefID target_region_defid = 1 [(.valid_type) = DEF_TYPE_QUEST_MAP_REGION];
  bool has_target_region_defid() const;
  private:
  bool _internal_has_target_region_defid() const;
  public:
  void clear_target_region_defid();
  const ::CMsgProtoDefID& target_region_defid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgProtoDefID* release_target_region_defid();
  ::CMsgProtoDefID* mutable_target_region_defid();
  void set_allocated_target_region_defid(::CMsgProtoDefID* target_region_defid);
  private:
  const ::CMsgProtoDefID& _internal_target_region_defid() const;
  ::CMsgProtoDefID* _internal_mutable_target_region_defid();
  public:
  void unsafe_arena_set_allocated_target_region_defid(
      ::CMsgProtoDefID* target_region_defid);
  ::CMsgProtoDefID* unsafe_arena_release_target_region_defid();

  // optional uint32 xpos = 2;
  bool has_xpos() const;
  private:
  bool _internal_has_xpos() const;
  public:
  void clear_xpos();
  ::PROTOBUF_NAMESPACE_ID::uint32 xpos() const;
  void set_xpos(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_xpos() const;
  void _internal_set_xpos(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 ypos = 3;
  bool has_ypos() const;
  private:
  bool _internal_has_ypos() const;
  public:
  void clear_ypos();
  ::PROTOBUF_NAMESPACE_ID::uint32 ypos() const;
  void set_ypos(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ypos() const;
  void _internal_set_ypos(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgQuestMapRegionDef.RegionLink)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CMsgProtoDefID* target_region_defid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 xpos_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ypos_;
  friend struct ::TableStruct_tf_5fproto_5fdef_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class M0PROTO CMsgQuestMapRegionDef final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgQuestMapRegionDef) */ {
 public:
  inline CMsgQuestMapRegionDef() : CMsgQuestMapRegionDef(nullptr) {}
  ~CMsgQuestMapRegionDef() override;
  explicit constexpr CMsgQuestMapRegionDef(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgQuestMapRegionDef(const CMsgQuestMapRegionDef& from);
  CMsgQuestMapRegionDef(CMsgQuestMapRegionDef&& from) noexcept
    : CMsgQuestMapRegionDef() {
    *this = ::std::move(from);
  }

  inline CMsgQuestMapRegionDef& operator=(const CMsgQuestMapRegionDef& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgQuestMapRegionDef& operator=(CMsgQuestMapRegionDef&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgQuestMapRegionDef& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgQuestMapRegionDef* internal_default_instance() {
    return reinterpret_cast<const CMsgQuestMapRegionDef*>(
               &_CMsgQuestMapRegionDef_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CMsgQuestMapRegionDef& a, CMsgQuestMapRegionDef& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgQuestMapRegionDef* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgQuestMapRegionDef* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgQuestMapRegionDef* New() const final {
    return new CMsgQuestMapRegionDef();
  }

  CMsgQuestMapRegionDef* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgQuestMapRegionDef>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgQuestMapRegionDef& from);
  void MergeFrom(const CMsgQuestMapRegionDef& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgQuestMapRegionDef* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgQuestMapRegionDef";
  }
  protected:
  explicit CMsgQuestMapRegionDef(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgQuestMapRegionDef_RegionLink RegionLink;

  // accessors -------------------------------------------------------

  enum : int {
    kLinksFieldNumber = 4,
    kNameFieldNumber = 2,
    kResfileFieldNumber = 3,
    kHeaderFieldNumber = 1,
    kReturnLinkFieldNumber = 5,
    kStarTypeFieldNumber = 8,
    kRadioFreqFieldNumber = 6,
    kZoomScaleFieldNumber = 7,
  };
  // repeated .CMsgQuestMapRegionDef.RegionLink links = 4;
  int links_size() const;
  private:
  int _internal_links_size() const;
  public:
  void clear_links();
  ::CMsgQuestMapRegionDef_RegionLink* mutable_links(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgQuestMapRegionDef_RegionLink >*
      mutable_links();
  private:
  const ::CMsgQuestMapRegionDef_RegionLink& _internal_links(int index) const;
  ::CMsgQuestMapRegionDef_RegionLink* _internal_add_links();
  public:
  const ::CMsgQuestMapRegionDef_RegionLink& links(int index) const;
  ::CMsgQuestMapRegionDef_RegionLink* add_links();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgQuestMapRegionDef_RegionLink >&
      links() const;

  // optional string name = 2 [(.localized) = true];
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string resfile = 3;
  bool has_resfile() const;
  private:
  bool _internal_has_resfile() const;
  public:
  void clear_resfile();
  const std::string& resfile() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_resfile(ArgT0&& arg0, ArgT... args);
  std::string* mutable_resfile();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_resfile();
  void set_allocated_resfile(std::string* resfile);
  private:
  const std::string& _internal_resfile() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_resfile(const std::string& value);
  std::string* _internal_mutable_resfile();
  public:

  // required .CMsgProtoDefHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::CMsgProtoDefHeader& header() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgProtoDefHeader* release_header();
  ::CMsgProtoDefHeader* mutable_header();
  void set_allocated_header(::CMsgProtoDefHeader* header);
  private:
  const ::CMsgProtoDefHeader& _internal_header() const;
  ::CMsgProtoDefHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::CMsgProtoDefHeader* header);
  ::CMsgProtoDefHeader* unsafe_arena_release_header();

  // optional .CMsgProtoDefID return_link = 5 [(.valid_type) = DEF_TYPE_QUEST_MAP_REGION, (.display_name) = "Return Link", (.comment) = "Which link we go to when right-clicking in this region"];
  bool has_return_link() const;
  private:
  bool _internal_has_return_link() const;
  public:
  void clear_return_link();
  const ::CMsgProtoDefID& return_link() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgProtoDefID* release_return_link();
  ::CMsgProtoDefID* mutable_return_link();
  void set_allocated_return_link(::CMsgProtoDefID* return_link);
  private:
  const ::CMsgProtoDefID& _internal_return_link() const;
  ::CMsgProtoDefID* _internal_mutable_return_link();
  public:
  void unsafe_arena_set_allocated_return_link(
      ::CMsgProtoDefID* return_link);
  ::CMsgProtoDefID* unsafe_arena_release_return_link();

  // optional .CMsgProtoDefID star_type = 8 [(.valid_type) = DEF_TYPE_QUEST_MAP_STAR_TYPE, (.display_name) = "Star Type", (.comment) = "What stars (if any) the nodes within use to unlock"];
  bool has_star_type() const;
  private:
  bool _internal_has_star_type() const;
  public:
  void clear_star_type();
  const ::CMsgProtoDefID& star_type() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgProtoDefID* release_star_type();
  ::CMsgProtoDefID* mutable_star_type();
  void set_allocated_star_type(::CMsgProtoDefID* star_type);
  private:
  const ::CMsgProtoDefID& _internal_star_type() const;
  ::CMsgProtoDefID* _internal_mutable_star_type();
  public:
  void unsafe_arena_set_allocated_star_type(
      ::CMsgProtoDefID* star_type);
  ::CMsgProtoDefID* unsafe_arena_release_star_type();

  // optional float radio_freq = 6 [(.display_name) = "Radio Freq.", (.comment) = "Where the radio tuner goes on the CYOA PDA when this region is selection"];
  bool has_radio_freq() const;
  private:
  bool _internal_has_radio_freq() const;
  public:
  void clear_radio_freq();
  float radio_freq() const;
  void set_radio_freq(float value);
  private:
  float _internal_radio_freq() const;
  void _internal_set_radio_freq(float value);
  public:

  // optional float zoom_scale = 7 [(.display_name) = "Zoom Scale", (.comment) = "How zoomed in this panel should be.  Affects the scale of the map grid lines and node link dashed lines"];
  bool has_zoom_scale() const;
  private:
  bool _internal_has_zoom_scale() const;
  public:
  void clear_zoom_scale();
  float zoom_scale() const;
  void set_zoom_scale(float value);
  private:
  float _internal_zoom_scale() const;
  void _internal_set_zoom_scale(float value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgQuestMapRegionDef)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgQuestMapRegionDef_RegionLink > links_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resfile_;
  ::CMsgProtoDefHeader* header_;
  ::CMsgProtoDefID* return_link_;
  ::CMsgProtoDefID* star_type_;
  float radio_freq_;
  float zoom_scale_;
  friend struct ::TableStruct_tf_5fproto_5fdef_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class M0PROTO CMsgVarField final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgVarField) */ {
 public:
  inline CMsgVarField() : CMsgVarField(nullptr) {}
  ~CMsgVarField() override;
  explicit constexpr CMsgVarField(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgVarField(const CMsgVarField& from);
  CMsgVarField(CMsgVarField&& from) noexcept
    : CMsgVarField() {
    *this = ::std::move(from);
  }

  inline CMsgVarField& operator=(const CMsgVarField& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgVarField& operator=(CMsgVarField&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgVarField& default_instance() {
    return *internal_default_instance();
  }
  enum ValueCase {
    kFloat = 2,
    kDouble = 3,
    kUint32 = 4,
    kUint64 = 5,
    kSint32 = 6,
    kSint64 = 7,
    kBool = 8,
    kString = 9,
    VALUE_NOT_SET = 0,
  };

  static inline const CMsgVarField* internal_default_instance() {
    return reinterpret_cast<const CMsgVarField*>(
               &_CMsgVarField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(CMsgVarField& a, CMsgVarField& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgVarField* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgVarField* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgVarField* New() const final {
    return new CMsgVarField();
  }

  CMsgVarField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgVarField>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgVarField& from);
  void MergeFrom(const CMsgVarField& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgVarField* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgVarField";
  }
  protected:
  explicit CMsgVarField(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVariableFieldNumber = 1,
    kFloatFieldNumber = 2,
    kDoubleFieldNumber = 3,
    kUint32FieldNumber = 4,
    kUint64FieldNumber = 5,
    kSint32FieldNumber = 6,
    kSint64FieldNumber = 7,
    kBoolFieldNumber = 8,
    kStringFieldNumber = 9,
  };
  // optional string variable = 1 [(.merging_key_field) = true];
  bool has_variable() const;
  private:
  bool _internal_has_variable() const;
  public:
  void clear_variable();
  const std::string& variable() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_variable(ArgT0&& arg0, ArgT... args);
  std::string* mutable_variable();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_variable();
  void set_allocated_variable(std::string* variable);
  private:
  const std::string& _internal_variable() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_variable(const std::string& value);
  std::string* _internal_mutable_variable();
  public:

  // float float = 2;
  bool has_float_() const;
  private:
  bool _internal_has_float_() const;
  public:
  void clear_float_();
  float float_() const;
  void set_float_(float value);
  private:
  float _internal_float_() const;
  void _internal_set_float_(float value);
  public:

  // double double = 3;
  bool has_double_() const;
  private:
  bool _internal_has_double_() const;
  public:
  void clear_double_();
  double double_() const;
  void set_double_(double value);
  private:
  double _internal_double_() const;
  void _internal_set_double_(double value);
  public:

  // uint32 uint32 = 4;
  bool has_uint32() const;
  private:
  bool _internal_has_uint32() const;
  public:
  void clear_uint32();
  ::PROTOBUF_NAMESPACE_ID::uint32 uint32() const;
  void set_uint32(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uint32() const;
  void _internal_set_uint32(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 uint64 = 5;
  bool has_uint64() const;
  private:
  bool _internal_has_uint64() const;
  public:
  void clear_uint64();
  ::PROTOBUF_NAMESPACE_ID::uint64 uint64() const;
  void set_uint64(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_uint64() const;
  void _internal_set_uint64(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // sint32 sint32 = 6;
  bool has_sint32() const;
  private:
  bool _internal_has_sint32() const;
  public:
  void clear_sint32();
  ::PROTOBUF_NAMESPACE_ID::int32 sint32() const;
  void set_sint32(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sint32() const;
  void _internal_set_sint32(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sint64 sint64 = 7;
  bool has_sint64() const;
  private:
  bool _internal_has_sint64() const;
  public:
  void clear_sint64();
  ::PROTOBUF_NAMESPACE_ID::int64 sint64() const;
  void set_sint64(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_sint64() const;
  void _internal_set_sint64(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool bool = 8;
  bool has_bool_() const;
  private:
  bool _internal_has_bool_() const;
  public:
  void clear_bool_();
  bool bool_() const;
  void set_bool_(bool value);
  private:
  bool _internal_bool_() const;
  void _internal_set_bool_(bool value);
  public:

  // string string = 9;
  bool has_string() const;
  private:
  bool _internal_has_string() const;
  public:
  void clear_string();
  const std::string& string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_string();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_string();
  void set_allocated_string(std::string* string);
  private:
  const std::string& _internal_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_string(const std::string& value);
  std::string* _internal_mutable_string();
  public:

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:CMsgVarField)
 private:
  class _Internal;
  void set_has_float_();
  void set_has_double_();
  void set_has_uint32();
  void set_has_uint64();
  void set_has_sint32();
  void set_has_sint64();
  void set_has_bool_();
  void set_has_string();

  inline bool has_value() const;
  inline void clear_has_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr variable_;
  union ValueUnion {
    constexpr ValueUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    float float__;
    double double__;
    ::PROTOBUF_NAMESPACE_ID::uint32 uint32_;
    ::PROTOBUF_NAMESPACE_ID::uint64 uint64_;
    ::PROTOBUF_NAMESPACE_ID::int32 sint32_;
    ::PROTOBUF_NAMESPACE_ID::int64 sint64_;
    bool bool__;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_;
  } value_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_tf_5fproto_5fdef_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class M0PROTO CMsgQuestMapStarType final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgQuestMapStarType) */ {
 public:
  inline CMsgQuestMapStarType() : CMsgQuestMapStarType(nullptr) {}
  ~CMsgQuestMapStarType() override;
  explicit constexpr CMsgQuestMapStarType(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgQuestMapStarType(const CMsgQuestMapStarType& from);
  CMsgQuestMapStarType(CMsgQuestMapStarType&& from) noexcept
    : CMsgQuestMapStarType() {
    *this = ::std::move(from);
  }

  inline CMsgQuestMapStarType& operator=(const CMsgQuestMapStarType& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgQuestMapStarType& operator=(CMsgQuestMapStarType&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgQuestMapStarType& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgQuestMapStarType* internal_default_instance() {
    return reinterpret_cast<const CMsgQuestMapStarType*>(
               &_CMsgQuestMapStarType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(CMsgQuestMapStarType& a, CMsgQuestMapStarType& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgQuestMapStarType* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgQuestMapStarType* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgQuestMapStarType* New() const final {
    return new CMsgQuestMapStarType();
  }

  CMsgQuestMapStarType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgQuestMapStarType>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgQuestMapStarType& from);
  void MergeFrom(const CMsgQuestMapStarType& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgQuestMapStarType* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgQuestMapStarType";
  }
  protected:
  explicit CMsgQuestMapStarType(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // optional string name = 2 [(.localized) = true, (.display_name) = "Type Name"];
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required .CMsgProtoDefHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::CMsgProtoDefHeader& header() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgProtoDefHeader* release_header();
  ::CMsgProtoDefHeader* mutable_header();
  void set_allocated_header(::CMsgProtoDefHeader* header);
  private:
  const ::CMsgProtoDefHeader& _internal_header() const;
  ::CMsgProtoDefHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::CMsgProtoDefHeader* header);
  ::CMsgProtoDefHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:CMsgQuestMapStarType)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::CMsgProtoDefHeader* header_;
  friend struct ::TableStruct_tf_5fproto_5fdef_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class M0PROTO CMsgQuestMapNodeDef final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgQuestMapNodeDef) */ {
 public:
  inline CMsgQuestMapNodeDef() : CMsgQuestMapNodeDef(nullptr) {}
  ~CMsgQuestMapNodeDef() override;
  explicit constexpr CMsgQuestMapNodeDef(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgQuestMapNodeDef(const CMsgQuestMapNodeDef& from);
  CMsgQuestMapNodeDef(CMsgQuestMapNodeDef&& from) noexcept
    : CMsgQuestMapNodeDef() {
    *this = ::std::move(from);
  }

  inline CMsgQuestMapNodeDef& operator=(const CMsgQuestMapNodeDef& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgQuestMapNodeDef& operator=(CMsgQuestMapNodeDef&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgQuestMapNodeDef& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgQuestMapNodeDef* internal_default_instance() {
    return reinterpret_cast<const CMsgQuestMapNodeDef*>(
               &_CMsgQuestMapNodeDef_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(CMsgQuestMapNodeDef& a, CMsgQuestMapNodeDef& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgQuestMapNodeDef* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgQuestMapNodeDef* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgQuestMapNodeDef* New() const final {
    return new CMsgQuestMapNodeDef();
  }

  CMsgQuestMapNodeDef* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgQuestMapNodeDef>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgQuestMapNodeDef& from);
  void MergeFrom(const CMsgQuestMapNodeDef& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgQuestMapNodeDef* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgQuestMapNodeDef";
  }
  protected:
  explicit CMsgQuestMapNodeDef(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQuestOptionsFieldNumber = 11,
    kNameLoctokenFieldNumber = 4,
    kAssociatedOperationFieldNumber = 16,
    kRewardItemNameFieldNumber = 18,
    kRewardLootlistNameFieldNumber = 22,
    kHeaderFieldNumber = 1,
    kConditionFieldNumber = 9,
    kOwningRegionFieldNumber = 10,
    kStarTypeFieldNumber = 20,
    kXPosFieldNumber = 6,
    kYPosFieldNumber = 7,
    kCashRewardFieldNumber = 19,
    kStarsToUnlockFieldNumber = 21,
  };
  // repeated .CMsgProtoDefID quest_options = 11 [(.valid_type) = DEF_TYPE_QUEST, (.display_name) = "Offered Quests", (.comment) = "Which quests this node offers.", (.max_count) = 3];
  int quest_options_size() const;
  private:
  int _internal_quest_options_size() const;
  public:
  void clear_quest_options();
  ::CMsgProtoDefID* mutable_quest_options(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgProtoDefID >*
      mutable_quest_options();
  private:
  const ::CMsgProtoDefID& _internal_quest_options(int index) const;
  ::CMsgProtoDefID* _internal_add_quest_options();
  public:
  const ::CMsgProtoDefID& quest_options(int index) const;
  ::CMsgProtoDefID* add_quest_options();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgProtoDefID >&
      quest_options() const;

  // optional string name_loctoken = 4 [(.localized) = true, (.display_name) = "Node Name", (.comment) = "The name of this node"];
  bool has_name_loctoken() const;
  private:
  bool _internal_has_name_loctoken() const;
  public:
  void clear_name_loctoken();
  const std::string& name_loctoken() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name_loctoken(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name_loctoken();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_name_loctoken();
  void set_allocated_name_loctoken(std::string* name_loctoken);
  private:
  const std::string& _internal_name_loctoken() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name_loctoken(const std::string& value);
  std::string* _internal_mutable_name_loctoken();
  public:

  // optional string associated_operation = 16 [(.display_name) = "Associated Operation", (.comment) = "Operation this node is associated with"];
  bool has_associated_operation() const;
  private:
  bool _internal_has_associated_operation() const;
  public:
  void clear_associated_operation();
  const std::string& associated_operation() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_associated_operation(ArgT0&& arg0, ArgT... args);
  std::string* mutable_associated_operation();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_associated_operation();
  void set_allocated_associated_operation(std::string* associated_operation);
  private:
  const std::string& _internal_associated_operation() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_associated_operation(const std::string& value);
  std::string* _internal_mutable_associated_operation();
  public:

  // optional string reward_item_name = 18 [(.display_name) = "Reward Item", (.comment) = "The name of an item to give as a reward"];
  bool has_reward_item_name() const;
  private:
  bool _internal_has_reward_item_name() const;
  public:
  void clear_reward_item_name();
  const std::string& reward_item_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reward_item_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reward_item_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_reward_item_name();
  void set_allocated_reward_item_name(std::string* reward_item_name);
  private:
  const std::string& _internal_reward_item_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reward_item_name(const std::string& value);
  std::string* _internal_mutable_reward_item_name();
  public:

  // optional string reward_lootlist_name = 22 [(.display_name) = "Reward Lootlist", (.comment) = "The name of the lootlist to roll as a reward"];
  bool has_reward_lootlist_name() const;
  private:
  bool _internal_has_reward_lootlist_name() const;
  public:
  void clear_reward_lootlist_name();
  const std::string& reward_lootlist_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reward_lootlist_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reward_lootlist_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_reward_lootlist_name();
  void set_allocated_reward_lootlist_name(std::string* reward_lootlist_name);
  private:
  const std::string& _internal_reward_lootlist_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reward_lootlist_name(const std::string& value);
  std::string* _internal_mutable_reward_lootlist_name();
  public:

  // required .CMsgProtoDefHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::CMsgProtoDefHeader& header() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgProtoDefHeader* release_header();
  ::CMsgProtoDefHeader* mutable_header();
  void set_allocated_header(::CMsgProtoDefHeader* header);
  private:
  const ::CMsgProtoDefHeader& _internal_header() const;
  ::CMsgProtoDefHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::CMsgProtoDefHeader* header);
  ::CMsgProtoDefHeader* unsafe_arena_release_header();

  // optional .CMsgQuestMapNodeCondition condition = 9 [(.display_name) = "Conditions", (.comment) = "Logic to unlock this node. Can be nested with logic"];
  bool has_condition() const;
  private:
  bool _internal_has_condition() const;
  public:
  void clear_condition();
  const ::CMsgQuestMapNodeCondition& condition() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgQuestMapNodeCondition* release_condition();
  ::CMsgQuestMapNodeCondition* mutable_condition();
  void set_allocated_condition(::CMsgQuestMapNodeCondition* condition);
  private:
  const ::CMsgQuestMapNodeCondition& _internal_condition() const;
  ::CMsgQuestMapNodeCondition* _internal_mutable_condition();
  public:
  void unsafe_arena_set_allocated_condition(
      ::CMsgQuestMapNodeCondition* condition);
  ::CMsgQuestMapNodeCondition* unsafe_arena_release_condition();

  // optional .CMsgProtoDefID owning_region = 10 [(.valid_type) = DEF_TYPE_QUEST_MAP_REGION, (.display_name) = "Region", (.comment) = "Which region in the map this node shows up in"];
  bool has_owning_region() const;
  private:
  bool _internal_has_owning_region() const;
  public:
  void clear_owning_region();
  const ::CMsgProtoDefID& owning_region() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgProtoDefID* release_owning_region();
  ::CMsgProtoDefID* mutable_owning_region();
  void set_allocated_owning_region(::CMsgProtoDefID* owning_region);
  private:
  const ::CMsgProtoDefID& _internal_owning_region() const;
  ::CMsgProtoDefID* _internal_mutable_owning_region();
  public:
  void unsafe_arena_set_allocated_owning_region(
      ::CMsgProtoDefID* owning_region);
  ::CMsgProtoDefID* unsafe_arena_release_owning_region();

  // optional .CMsgProtoDefID star_type = 20 [(.valid_type) = DEF_TYPE_QUEST_MAP_STAR_TYPE, (.display_name) = "Star Type", (.comment) = "Which type of star this node uses"];
  bool has_star_type() const;
  private:
  bool _internal_has_star_type() const;
  public:
  void clear_star_type();
  const ::CMsgProtoDefID& star_type() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgProtoDefID* release_star_type();
  ::CMsgProtoDefID* mutable_star_type();
  void set_allocated_star_type(::CMsgProtoDefID* star_type);
  private:
  const ::CMsgProtoDefID& _internal_star_type() const;
  ::CMsgProtoDefID* _internal_mutable_star_type();
  public:
  void unsafe_arena_set_allocated_star_type(
      ::CMsgProtoDefID* star_type);
  ::CMsgProtoDefID* unsafe_arena_release_star_type();

  // optional float x_pos = 6 [(.display_name) = "Map X Pos", (.comment) = "X position on the quest map"];
  bool has_x_pos() const;
  private:
  bool _internal_has_x_pos() const;
  public:
  void clear_x_pos();
  float x_pos() const;
  void set_x_pos(float value);
  private:
  float _internal_x_pos() const;
  void _internal_set_x_pos(float value);
  public:

  // optional float y_pos = 7 [(.display_name) = "Map Y Pos", (.comment) = "Y position on the quest map"];
  bool has_y_pos() const;
  private:
  bool _internal_has_y_pos() const;
  public:
  void clear_y_pos();
  float y_pos() const;
  void set_y_pos(float value);
  private:
  float _internal_y_pos() const;
  void _internal_set_y_pos(float value);
  public:

  // optional .ENodeCashReward cash_reward = 19 [default = CASH_REWARD_NONE, (.display_name) = "Cash Reward", (.comment) = "How much cash to give when completing the primary objective"];
  bool has_cash_reward() const;
  private:
  bool _internal_has_cash_reward() const;
  public:
  void clear_cash_reward();
  ::ENodeCashReward cash_reward() const;
  void set_cash_reward(::ENodeCashReward value);
  private:
  ::ENodeCashReward _internal_cash_reward() const;
  void _internal_set_cash_reward(::ENodeCashReward value);
  public:

  // optional uint32 stars_to_unlock = 21 [default = 1, (.display_name) = "Stars to Unlock", (.comment) = "Numbers of stars it costs to unlock"];
  bool has_stars_to_unlock() const;
  private:
  bool _internal_has_stars_to_unlock() const;
  public:
  void clear_stars_to_unlock();
  ::PROTOBUF_NAMESPACE_ID::uint32 stars_to_unlock() const;
  void set_stars_to_unlock(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_stars_to_unlock() const;
  void _internal_set_stars_to_unlock(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgQuestMapNodeDef)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgProtoDefID > quest_options_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_loctoken_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr associated_operation_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reward_item_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reward_lootlist_name_;
  ::CMsgProtoDefHeader* header_;
  ::CMsgQuestMapNodeCondition* condition_;
  ::CMsgProtoDefID* owning_region_;
  ::CMsgProtoDefID* star_type_;
  float x_pos_;
  float y_pos_;
  int cash_reward_;
  ::PROTOBUF_NAMESPACE_ID::uint32 stars_to_unlock_;
  friend struct ::TableStruct_tf_5fproto_5fdef_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class M0PROTO CMsgPaintKit_Variables final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgPaintKit_Variables) */ {
 public:
  inline CMsgPaintKit_Variables() : CMsgPaintKit_Variables(nullptr) {}
  ~CMsgPaintKit_Variables() override;
  explicit constexpr CMsgPaintKit_Variables(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgPaintKit_Variables(const CMsgPaintKit_Variables& from);
  CMsgPaintKit_Variables(CMsgPaintKit_Variables&& from) noexcept
    : CMsgPaintKit_Variables() {
    *this = ::std::move(from);
  }

  inline CMsgPaintKit_Variables& operator=(const CMsgPaintKit_Variables& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgPaintKit_Variables& operator=(CMsgPaintKit_Variables&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgPaintKit_Variables& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgPaintKit_Variables* internal_default_instance() {
    return reinterpret_cast<const CMsgPaintKit_Variables*>(
               &_CMsgPaintKit_Variables_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(CMsgPaintKit_Variables& a, CMsgPaintKit_Variables& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgPaintKit_Variables* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgPaintKit_Variables* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgPaintKit_Variables* New() const final {
    return new CMsgPaintKit_Variables();
  }

  CMsgPaintKit_Variables* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgPaintKit_Variables>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgPaintKit_Variables& from);
  void MergeFrom(const CMsgPaintKit_Variables& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgPaintKit_Variables* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgPaintKit_Variables";
  }
  protected:
  explicit CMsgPaintKit_Variables(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
  };
  // required .CMsgProtoDefHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::CMsgProtoDefHeader& header() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgProtoDefHeader* release_header();
  ::CMsgProtoDefHeader* mutable_header();
  void set_allocated_header(::CMsgProtoDefHeader* header);
  private:
  const ::CMsgProtoDefHeader& _internal_header() const;
  ::CMsgProtoDefHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::CMsgProtoDefHeader* header);
  ::CMsgProtoDefHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:CMsgPaintKit_Variables)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CMsgProtoDefHeader* header_;
  friend struct ::TableStruct_tf_5fproto_5fdef_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class M0PROTO CMsgPaintKit_Operation_TextureStage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgPaintKit_Operation_TextureStage) */ {
 public:
  inline CMsgPaintKit_Operation_TextureStage() : CMsgPaintKit_Operation_TextureStage(nullptr) {}
  ~CMsgPaintKit_Operation_TextureStage() override;
  explicit constexpr CMsgPaintKit_Operation_TextureStage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgPaintKit_Operation_TextureStage(const CMsgPaintKit_Operation_TextureStage& from);
  CMsgPaintKit_Operation_TextureStage(CMsgPaintKit_Operation_TextureStage&& from) noexcept
    : CMsgPaintKit_Operation_TextureStage() {
    *this = ::std::move(from);
  }

  inline CMsgPaintKit_Operation_TextureStage& operator=(const CMsgPaintKit_Operation_TextureStage& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgPaintKit_Operation_TextureStage& operator=(CMsgPaintKit_Operation_TextureStage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgPaintKit_Operation_TextureStage& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgPaintKit_Operation_TextureStage* internal_default_instance() {
    return reinterpret_cast<const CMsgPaintKit_Operation_TextureStage*>(
               &_CMsgPaintKit_Operation_TextureStage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(CMsgPaintKit_Operation_TextureStage& a, CMsgPaintKit_Operation_TextureStage& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgPaintKit_Operation_TextureStage* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgPaintKit_Operation_TextureStage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgPaintKit_Operation_TextureStage* New() const final {
    return new CMsgPaintKit_Operation_TextureStage();
  }

  CMsgPaintKit_Operation_TextureStage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgPaintKit_Operation_TextureStage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgPaintKit_Operation_TextureStage& from);
  void MergeFrom(const CMsgPaintKit_Operation_TextureStage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgPaintKit_Operation_TextureStage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgPaintKit_Operation_TextureStage";
  }
  protected:
  explicit CMsgPaintKit_Operation_TextureStage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextureFieldNumber = 1,
    kTextureRedFieldNumber = 2,
    kTextureBlueFieldNumber = 3,
    kAdjustBlackFieldNumber = 4,
    kAdjustOffsetFieldNumber = 5,
    kAdjustGammaFieldNumber = 6,
    kRotationFieldNumber = 7,
    kTranslateUFieldNumber = 8,
    kTranslateVFieldNumber = 9,
    kScaleUvFieldNumber = 10,
    kFlipUFieldNumber = 11,
    kFlipVFieldNumber = 12,
  };
  // optional .CMsgVarField texture = 1 [(.var_field_type) = VAR_TYPE_STRING];
  bool has_texture() const;
  private:
  bool _internal_has_texture() const;
  public:
  void clear_texture();
  const ::CMsgVarField& texture() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgVarField* release_texture();
  ::CMsgVarField* mutable_texture();
  void set_allocated_texture(::CMsgVarField* texture);
  private:
  const ::CMsgVarField& _internal_texture() const;
  ::CMsgVarField* _internal_mutable_texture();
  public:
  void unsafe_arena_set_allocated_texture(
      ::CMsgVarField* texture);
  ::CMsgVarField* unsafe_arena_release_texture();

  // optional .CMsgVarField texture_red = 2 [(.var_field_type) = VAR_TYPE_STRING];
  bool has_texture_red() const;
  private:
  bool _internal_has_texture_red() const;
  public:
  void clear_texture_red();
  const ::CMsgVarField& texture_red() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgVarField* release_texture_red();
  ::CMsgVarField* mutable_texture_red();
  void set_allocated_texture_red(::CMsgVarField* texture_red);
  private:
  const ::CMsgVarField& _internal_texture_red() const;
  ::CMsgVarField* _internal_mutable_texture_red();
  public:
  void unsafe_arena_set_allocated_texture_red(
      ::CMsgVarField* texture_red);
  ::CMsgVarField* unsafe_arena_release_texture_red();

  // optional .CMsgVarField texture_blue = 3 [(.var_field_type) = VAR_TYPE_STRING];
  bool has_texture_blue() const;
  private:
  bool _internal_has_texture_blue() const;
  public:
  void clear_texture_blue();
  const ::CMsgVarField& texture_blue() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgVarField* release_texture_blue();
  ::CMsgVarField* mutable_texture_blue();
  void set_allocated_texture_blue(::CMsgVarField* texture_blue);
  private:
  const ::CMsgVarField& _internal_texture_blue() const;
  ::CMsgVarField* _internal_mutable_texture_blue();
  public:
  void unsafe_arena_set_allocated_texture_blue(
      ::CMsgVarField* texture_blue);
  ::CMsgVarField* unsafe_arena_release_texture_blue();

  // optional .CMsgVarField adjust_black = 4 [(.var_field_type) = VAR_TYPE_STRING];
  bool has_adjust_black() const;
  private:
  bool _internal_has_adjust_black() const;
  public:
  void clear_adjust_black();
  const ::CMsgVarField& adjust_black() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgVarField* release_adjust_black();
  ::CMsgVarField* mutable_adjust_black();
  void set_allocated_adjust_black(::CMsgVarField* adjust_black);
  private:
  const ::CMsgVarField& _internal_adjust_black() const;
  ::CMsgVarField* _internal_mutable_adjust_black();
  public:
  void unsafe_arena_set_allocated_adjust_black(
      ::CMsgVarField* adjust_black);
  ::CMsgVarField* unsafe_arena_release_adjust_black();

  // optional .CMsgVarField adjust_offset = 5 [(.var_field_type) = VAR_TYPE_STRING];
  bool has_adjust_offset() const;
  private:
  bool _internal_has_adjust_offset() const;
  public:
  void clear_adjust_offset();
  const ::CMsgVarField& adjust_offset() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgVarField* release_adjust_offset();
  ::CMsgVarField* mutable_adjust_offset();
  void set_allocated_adjust_offset(::CMsgVarField* adjust_offset);
  private:
  const ::CMsgVarField& _internal_adjust_offset() const;
  ::CMsgVarField* _internal_mutable_adjust_offset();
  public:
  void unsafe_arena_set_allocated_adjust_offset(
      ::CMsgVarField* adjust_offset);
  ::CMsgVarField* unsafe_arena_release_adjust_offset();

  // optional .CMsgVarField adjust_gamma = 6 [(.var_field_type) = VAR_TYPE_STRING];
  bool has_adjust_gamma() const;
  private:
  bool _internal_has_adjust_gamma() const;
  public:
  void clear_adjust_gamma();
  const ::CMsgVarField& adjust_gamma() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgVarField* release_adjust_gamma();
  ::CMsgVarField* mutable_adjust_gamma();
  void set_allocated_adjust_gamma(::CMsgVarField* adjust_gamma);
  private:
  const ::CMsgVarField& _internal_adjust_gamma() const;
  ::CMsgVarField* _internal_mutable_adjust_gamma();
  public:
  void unsafe_arena_set_allocated_adjust_gamma(
      ::CMsgVarField* adjust_gamma);
  ::CMsgVarField* unsafe_arena_release_adjust_gamma();

  // optional .CMsgVarField rotation = 7 [(.var_field_type) = VAR_TYPE_STRING];
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  const ::CMsgVarField& rotation() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgVarField* release_rotation();
  ::CMsgVarField* mutable_rotation();
  void set_allocated_rotation(::CMsgVarField* rotation);
  private:
  const ::CMsgVarField& _internal_rotation() const;
  ::CMsgVarField* _internal_mutable_rotation();
  public:
  void unsafe_arena_set_allocated_rotation(
      ::CMsgVarField* rotation);
  ::CMsgVarField* unsafe_arena_release_rotation();

  // optional .CMsgVarField translate_u = 8 [(.var_field_type) = VAR_TYPE_STRING];
  bool has_translate_u() const;
  private:
  bool _internal_has_translate_u() const;
  public:
  void clear_translate_u();
  const ::CMsgVarField& translate_u() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgVarField* release_translate_u();
  ::CMsgVarField* mutable_translate_u();
  void set_allocated_translate_u(::CMsgVarField* translate_u);
  private:
  const ::CMsgVarField& _internal_translate_u() const;
  ::CMsgVarField* _internal_mutable_translate_u();
  public:
  void unsafe_arena_set_allocated_translate_u(
      ::CMsgVarField* translate_u);
  ::CMsgVarField* unsafe_arena_release_translate_u();

  // optional .CMsgVarField translate_v = 9 [(.var_field_type) = VAR_TYPE_STRING];
  bool has_translate_v() const;
  private:
  bool _internal_has_translate_v() const;
  public:
  void clear_translate_v();
  const ::CMsgVarField& translate_v() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgVarField* release_translate_v();
  ::CMsgVarField* mutable_translate_v();
  void set_allocated_translate_v(::CMsgVarField* translate_v);
  private:
  const ::CMsgVarField& _internal_translate_v() const;
  ::CMsgVarField* _internal_mutable_translate_v();
  public:
  void unsafe_arena_set_allocated_translate_v(
      ::CMsgVarField* translate_v);
  ::CMsgVarField* unsafe_arena_release_translate_v();

  // optional .CMsgVarField scale_uv = 10 [(.var_field_type) = VAR_TYPE_STRING];
  bool has_scale_uv() const;
  private:
  bool _internal_has_scale_uv() const;
  public:
  void clear_scale_uv();
  const ::CMsgVarField& scale_uv() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgVarField* release_scale_uv();
  ::CMsgVarField* mutable_scale_uv();
  void set_allocated_scale_uv(::CMsgVarField* scale_uv);
  private:
  const ::CMsgVarField& _internal_scale_uv() const;
  ::CMsgVarField* _internal_mutable_scale_uv();
  public:
  void unsafe_arena_set_allocated_scale_uv(
      ::CMsgVarField* scale_uv);
  ::CMsgVarField* unsafe_arena_release_scale_uv();

  // optional .CMsgVarField flip_u = 11 [(.var_field_type) = VAR_TYPE_STRING];
  bool has_flip_u() const;
  private:
  bool _internal_has_flip_u() const;
  public:
  void clear_flip_u();
  const ::CMsgVarField& flip_u() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgVarField* release_flip_u();
  ::CMsgVarField* mutable_flip_u();
  void set_allocated_flip_u(::CMsgVarField* flip_u);
  private:
  const ::CMsgVarField& _internal_flip_u() const;
  ::CMsgVarField* _internal_mutable_flip_u();
  public:
  void unsafe_arena_set_allocated_flip_u(
      ::CMsgVarField* flip_u);
  ::CMsgVarField* unsafe_arena_release_flip_u();

  // optional .CMsgVarField flip_v = 12 [(.var_field_type) = VAR_TYPE_STRING];
  bool has_flip_v() const;
  private:
  bool _internal_has_flip_v() const;
  public:
  void clear_flip_v();
  const ::CMsgVarField& flip_v() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgVarField* release_flip_v();
  ::CMsgVarField* mutable_flip_v();
  void set_allocated_flip_v(::CMsgVarField* flip_v);
  private:
  const ::CMsgVarField& _internal_flip_v() const;
  ::CMsgVarField* _internal_mutable_flip_v();
  public:
  void unsafe_arena_set_allocated_flip_v(
      ::CMsgVarField* flip_v);
  ::CMsgVarField* unsafe_arena_release_flip_v();

  // @@protoc_insertion_point(class_scope:CMsgPaintKit_Operation_TextureStage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CMsgVarField* texture_;
  ::CMsgVarField* texture_red_;
  ::CMsgVarField* texture_blue_;
  ::CMsgVarField* adjust_black_;
  ::CMsgVarField* adjust_offset_;
  ::CMsgVarField* adjust_gamma_;
  ::CMsgVarField* rotation_;
  ::CMsgVarField* translate_u_;
  ::CMsgVarField* translate_v_;
  ::CMsgVarField* scale_uv_;
  ::CMsgVarField* flip_u_;
  ::CMsgVarField* flip_v_;
  friend struct ::TableStruct_tf_5fproto_5fdef_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class M0PROTO CMsgPaintKit_Operation_CombineStage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgPaintKit_Operation_CombineStage) */ {
 public:
  inline CMsgPaintKit_Operation_CombineStage() : CMsgPaintKit_Operation_CombineStage(nullptr) {}
  ~CMsgPaintKit_Operation_CombineStage() override;
  explicit constexpr CMsgPaintKit_Operation_CombineStage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgPaintKit_Operation_CombineStage(const CMsgPaintKit_Operation_CombineStage& from);
  CMsgPaintKit_Operation_CombineStage(CMsgPaintKit_Operation_CombineStage&& from) noexcept
    : CMsgPaintKit_Operation_CombineStage() {
    *this = ::std::move(from);
  }

  inline CMsgPaintKit_Operation_CombineStage& operator=(const CMsgPaintKit_Operation_CombineStage& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgPaintKit_Operation_CombineStage& operator=(CMsgPaintKit_Operation_CombineStage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgPaintKit_Operation_CombineStage& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgPaintKit_Operation_CombineStage* internal_default_instance() {
    return reinterpret_cast<const CMsgPaintKit_Operation_CombineStage*>(
               &_CMsgPaintKit_Operation_CombineStage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(CMsgPaintKit_Operation_CombineStage& a, CMsgPaintKit_Operation_CombineStage& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgPaintKit_Operation_CombineStage* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgPaintKit_Operation_CombineStage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgPaintKit_Operation_CombineStage* New() const final {
    return new CMsgPaintKit_Operation_CombineStage();
  }

  CMsgPaintKit_Operation_CombineStage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgPaintKit_Operation_CombineStage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgPaintKit_Operation_CombineStage& from);
  void MergeFrom(const CMsgPaintKit_Operation_CombineStage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgPaintKit_Operation_CombineStage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgPaintKit_Operation_CombineStage";
  }
  protected:
  explicit CMsgPaintKit_Operation_CombineStage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOperationNodeFieldNumber = 11,
    kAdjustBlackFieldNumber = 1,
    kAdjustOffsetFieldNumber = 2,
    kAdjustGammaFieldNumber = 3,
    kRotationFieldNumber = 4,
    kTranslateUFieldNumber = 5,
    kTranslateVFieldNumber = 6,
    kScaleUvFieldNumber = 7,
    kFlipUFieldNumber = 8,
    kFlipVFieldNumber = 9,
  };
  // repeated .CMsgPaintKit_OperationNode operation_node = 11;
  int operation_node_size() const;
  private:
  int _internal_operation_node_size() const;
  public:
  void clear_operation_node();
  ::CMsgPaintKit_OperationNode* mutable_operation_node(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPaintKit_OperationNode >*
      mutable_operation_node();
  private:
  const ::CMsgPaintKit_OperationNode& _internal_operation_node(int index) const;
  ::CMsgPaintKit_OperationNode* _internal_add_operation_node();
  public:
  const ::CMsgPaintKit_OperationNode& operation_node(int index) const;
  ::CMsgPaintKit_OperationNode* add_operation_node();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPaintKit_OperationNode >&
      operation_node() const;

  // optional .CMsgVarField adjust_black = 1 [(.var_field_type) = VAR_TYPE_STRING];
  bool has_adjust_black() const;
  private:
  bool _internal_has_adjust_black() const;
  public:
  void clear_adjust_black();
  const ::CMsgVarField& adjust_black() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgVarField* release_adjust_black();
  ::CMsgVarField* mutable_adjust_black();
  void set_allocated_adjust_black(::CMsgVarField* adjust_black);
  private:
  const ::CMsgVarField& _internal_adjust_black() const;
  ::CMsgVarField* _internal_mutable_adjust_black();
  public:
  void unsafe_arena_set_allocated_adjust_black(
      ::CMsgVarField* adjust_black);
  ::CMsgVarField* unsafe_arena_release_adjust_black();

  // optional .CMsgVarField adjust_offset = 2 [(.var_field_type) = VAR_TYPE_STRING];
  bool has_adjust_offset() const;
  private:
  bool _internal_has_adjust_offset() const;
  public:
  void clear_adjust_offset();
  const ::CMsgVarField& adjust_offset() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgVarField* release_adjust_offset();
  ::CMsgVarField* mutable_adjust_offset();
  void set_allocated_adjust_offset(::CMsgVarField* adjust_offset);
  private:
  const ::CMsgVarField& _internal_adjust_offset() const;
  ::CMsgVarField* _internal_mutable_adjust_offset();
  public:
  void unsafe_arena_set_allocated_adjust_offset(
      ::CMsgVarField* adjust_offset);
  ::CMsgVarField* unsafe_arena_release_adjust_offset();

  // optional .CMsgVarField adjust_gamma = 3 [(.var_field_type) = VAR_TYPE_STRING];
  bool has_adjust_gamma() const;
  private:
  bool _internal_has_adjust_gamma() const;
  public:
  void clear_adjust_gamma();
  const ::CMsgVarField& adjust_gamma() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgVarField* release_adjust_gamma();
  ::CMsgVarField* mutable_adjust_gamma();
  void set_allocated_adjust_gamma(::CMsgVarField* adjust_gamma);
  private:
  const ::CMsgVarField& _internal_adjust_gamma() const;
  ::CMsgVarField* _internal_mutable_adjust_gamma();
  public:
  void unsafe_arena_set_allocated_adjust_gamma(
      ::CMsgVarField* adjust_gamma);
  ::CMsgVarField* unsafe_arena_release_adjust_gamma();

  // optional .CMsgVarField rotation = 4 [(.var_field_type) = VAR_TYPE_STRING];
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  const ::CMsgVarField& rotation() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgVarField* release_rotation();
  ::CMsgVarField* mutable_rotation();
  void set_allocated_rotation(::CMsgVarField* rotation);
  private:
  const ::CMsgVarField& _internal_rotation() const;
  ::CMsgVarField* _internal_mutable_rotation();
  public:
  void unsafe_arena_set_allocated_rotation(
      ::CMsgVarField* rotation);
  ::CMsgVarField* unsafe_arena_release_rotation();

  // optional .CMsgVarField translate_u = 5 [(.var_field_type) = VAR_TYPE_STRING];
  bool has_translate_u() const;
  private:
  bool _internal_has_translate_u() const;
  public:
  void clear_translate_u();
  const ::CMsgVarField& translate_u() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgVarField* release_translate_u();
  ::CMsgVarField* mutable_translate_u();
  void set_allocated_translate_u(::CMsgVarField* translate_u);
  private:
  const ::CMsgVarField& _internal_translate_u() const;
  ::CMsgVarField* _internal_mutable_translate_u();
  public:
  void unsafe_arena_set_allocated_translate_u(
      ::CMsgVarField* translate_u);
  ::CMsgVarField* unsafe_arena_release_translate_u();

  // optional .CMsgVarField translate_v = 6 [(.var_field_type) = VAR_TYPE_STRING];
  bool has_translate_v() const;
  private:
  bool _internal_has_translate_v() const;
  public:
  void clear_translate_v();
  const ::CMsgVarField& translate_v() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgVarField* release_translate_v();
  ::CMsgVarField* mutable_translate_v();
  void set_allocated_translate_v(::CMsgVarField* translate_v);
  private:
  const ::CMsgVarField& _internal_translate_v() const;
  ::CMsgVarField* _internal_mutable_translate_v();
  public:
  void unsafe_arena_set_allocated_translate_v(
      ::CMsgVarField* translate_v);
  ::CMsgVarField* unsafe_arena_release_translate_v();

  // optional .CMsgVarField scale_uv = 7 [(.var_field_type) = VAR_TYPE_STRING];
  bool has_scale_uv() const;
  private:
  bool _internal_has_scale_uv() const;
  public:
  void clear_scale_uv();
  const ::CMsgVarField& scale_uv() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgVarField* release_scale_uv();
  ::CMsgVarField* mutable_scale_uv();
  void set_allocated_scale_uv(::CMsgVarField* scale_uv);
  private:
  const ::CMsgVarField& _internal_scale_uv() const;
  ::CMsgVarField* _internal_mutable_scale_uv();
  public:
  void unsafe_arena_set_allocated_scale_uv(
      ::CMsgVarField* scale_uv);
  ::CMsgVarField* unsafe_arena_release_scale_uv();

  // optional .CMsgVarField flip_u = 8 [(.var_field_type) = VAR_TYPE_STRING];
  bool has_flip_u() const;
  private:
  bool _internal_has_flip_u() const;
  public:
  void clear_flip_u();
  const ::CMsgVarField& flip_u() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgVarField* release_flip_u();
  ::CMsgVarField* mutable_flip_u();
  void set_allocated_flip_u(::CMsgVarField* flip_u);
  private:
  const ::CMsgVarField& _internal_flip_u() const;
  ::CMsgVarField* _internal_mutable_flip_u();
  public:
  void unsafe_arena_set_allocated_flip_u(
      ::CMsgVarField* flip_u);
  ::CMsgVarField* unsafe_arena_release_flip_u();

  // optional .CMsgVarField flip_v = 9 [(.var_field_type) = VAR_TYPE_STRING];
  bool has_flip_v() const;
  private:
  bool _internal_has_flip_v() const;
  public:
  void clear_flip_v();
  const ::CMsgVarField& flip_v() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgVarField* release_flip_v();
  ::CMsgVarField* mutable_flip_v();
  void set_allocated_flip_v(::CMsgVarField* flip_v);
  private:
  const ::CMsgVarField& _internal_flip_v() const;
  ::CMsgVarField* _internal_mutable_flip_v();
  public:
  void unsafe_arena_set_allocated_flip_v(
      ::CMsgVarField* flip_v);
  ::CMsgVarField* unsafe_arena_release_flip_v();

  // @@protoc_insertion_point(class_scope:CMsgPaintKit_Operation_CombineStage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPaintKit_OperationNode > operation_node_;
  ::CMsgVarField* adjust_black_;
  ::CMsgVarField* adjust_offset_;
  ::CMsgVarField* adjust_gamma_;
  ::CMsgVarField* rotation_;
  ::CMsgVarField* translate_u_;
  ::CMsgVarField* translate_v_;
  ::CMsgVarField* scale_uv_;
  ::CMsgVarField* flip_u_;
  ::CMsgVarField* flip_v_;
  friend struct ::TableStruct_tf_5fproto_5fdef_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class M0PROTO CMsgPaintKit_Operation_SelectStage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgPaintKit_Operation_SelectStage) */ {
 public:
  inline CMsgPaintKit_Operation_SelectStage() : CMsgPaintKit_Operation_SelectStage(nullptr) {}
  ~CMsgPaintKit_Operation_SelectStage() override;
  explicit constexpr CMsgPaintKit_Operation_SelectStage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgPaintKit_Operation_SelectStage(const CMsgPaintKit_Operation_SelectStage& from);
  CMsgPaintKit_Operation_SelectStage(CMsgPaintKit_Operation_SelectStage&& from) noexcept
    : CMsgPaintKit_Operation_SelectStage() {
    *this = ::std::move(from);
  }

  inline CMsgPaintKit_Operation_SelectStage& operator=(const CMsgPaintKit_Operation_SelectStage& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgPaintKit_Operation_SelectStage& operator=(CMsgPaintKit_Operation_SelectStage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgPaintKit_Operation_SelectStage& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgPaintKit_Operation_SelectStage* internal_default_instance() {
    return reinterpret_cast<const CMsgPaintKit_Operation_SelectStage*>(
               &_CMsgPaintKit_Operation_SelectStage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(CMsgPaintKit_Operation_SelectStage& a, CMsgPaintKit_Operation_SelectStage& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgPaintKit_Operation_SelectStage* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgPaintKit_Operation_SelectStage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgPaintKit_Operation_SelectStage* New() const final {
    return new CMsgPaintKit_Operation_SelectStage();
  }

  CMsgPaintKit_Operation_SelectStage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgPaintKit_Operation_SelectStage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgPaintKit_Operation_SelectStage& from);
  void MergeFrom(const CMsgPaintKit_Operation_SelectStage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgPaintKit_Operation_SelectStage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgPaintKit_Operation_SelectStage";
  }
  protected:
  explicit CMsgPaintKit_Operation_SelectStage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSelectFieldNumber = 2,
    kGroupsFieldNumber = 1,
  };
  // repeated .CMsgVarField select = 2 [(.max_count) = 16, (.var_field_type) = VAR_TYPE_STRING];
  int select_size() const;
  private:
  int _internal_select_size() const;
  public:
  void clear_select();
  ::CMsgVarField* mutable_select(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgVarField >*
      mutable_select();
  private:
  const ::CMsgVarField& _internal_select(int index) const;
  ::CMsgVarField* _internal_add_select();
  public:
  const ::CMsgVarField& select(int index) const;
  ::CMsgVarField* add_select();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgVarField >&
      select() const;

  // optional .CMsgVarField groups = 1 [(.var_field_type) = VAR_TYPE_STRING];
  bool has_groups() const;
  private:
  bool _internal_has_groups() const;
  public:
  void clear_groups();
  const ::CMsgVarField& groups() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgVarField* release_groups();
  ::CMsgVarField* mutable_groups();
  void set_allocated_groups(::CMsgVarField* groups);
  private:
  const ::CMsgVarField& _internal_groups() const;
  ::CMsgVarField* _internal_mutable_groups();
  public:
  void unsafe_arena_set_allocated_groups(
      ::CMsgVarField* groups);
  ::CMsgVarField* unsafe_arena_release_groups();

  // @@protoc_insertion_point(class_scope:CMsgPaintKit_Operation_SelectStage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgVarField > select_;
  ::CMsgVarField* groups_;
  friend struct ::TableStruct_tf_5fproto_5fdef_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class M0PROTO CMsgPaintKit_Operation_Sticker final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgPaintKit_Operation_Sticker) */ {
 public:
  inline CMsgPaintKit_Operation_Sticker() : CMsgPaintKit_Operation_Sticker(nullptr) {}
  ~CMsgPaintKit_Operation_Sticker() override;
  explicit constexpr CMsgPaintKit_Operation_Sticker(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgPaintKit_Operation_Sticker(const CMsgPaintKit_Operation_Sticker& from);
  CMsgPaintKit_Operation_Sticker(CMsgPaintKit_Operation_Sticker&& from) noexcept
    : CMsgPaintKit_Operation_Sticker() {
    *this = ::std::move(from);
  }

  inline CMsgPaintKit_Operation_Sticker& operator=(const CMsgPaintKit_Operation_Sticker& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgPaintKit_Operation_Sticker& operator=(CMsgPaintKit_Operation_Sticker&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgPaintKit_Operation_Sticker& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgPaintKit_Operation_Sticker* internal_default_instance() {
    return reinterpret_cast<const CMsgPaintKit_Operation_Sticker*>(
               &_CMsgPaintKit_Operation_Sticker_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(CMsgPaintKit_Operation_Sticker& a, CMsgPaintKit_Operation_Sticker& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgPaintKit_Operation_Sticker* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgPaintKit_Operation_Sticker* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgPaintKit_Operation_Sticker* New() const final {
    return new CMsgPaintKit_Operation_Sticker();
  }

  CMsgPaintKit_Operation_Sticker* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgPaintKit_Operation_Sticker>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgPaintKit_Operation_Sticker& from);
  void MergeFrom(const CMsgPaintKit_Operation_Sticker& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgPaintKit_Operation_Sticker* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgPaintKit_Operation_Sticker";
  }
  protected:
  explicit CMsgPaintKit_Operation_Sticker(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseFieldNumber = 1,
    kWeightFieldNumber = 2,
    kSpecFieldNumber = 3,
  };
  // optional .CMsgVarField base = 1 [(.comment) = "Name of the base file for the sticker (the albedo)", (.var_field_type) = VAR_TYPE_STRING];
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::CMsgVarField& base() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgVarField* release_base();
  ::CMsgVarField* mutable_base();
  void set_allocated_base(::CMsgVarField* base);
  private:
  const ::CMsgVarField& _internal_base() const;
  ::CMsgVarField* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::CMsgVarField* base);
  ::CMsgVarField* unsafe_arena_release_base();

  // optional .CMsgVarField weight = 2 [(.comment) = "Random likelihood this one is to be selected", (.var_field_type) = VAR_TYPE_STRING];
  bool has_weight() const;
  private:
  bool _internal_has_weight() const;
  public:
  void clear_weight();
  const ::CMsgVarField& weight() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgVarField* release_weight();
  ::CMsgVarField* mutable_weight();
  void set_allocated_weight(::CMsgVarField* weight);
  private:
  const ::CMsgVarField& _internal_weight() const;
  ::CMsgVarField* _internal_mutable_weight();
  public:
  void unsafe_arena_set_allocated_weight(
      ::CMsgVarField* weight);
  ::CMsgVarField* unsafe_arena_release_weight();

  // optional .CMsgVarField spec = 3 [(.comment) = "Name of the specular file for the sticker, or if blank we will assume it is baseFilename + _spec + baseExtension", (.var_field_type) = VAR_TYPE_STRING];
  bool has_spec() const;
  private:
  bool _internal_has_spec() const;
  public:
  void clear_spec();
  const ::CMsgVarField& spec() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgVarField* release_spec();
  ::CMsgVarField* mutable_spec();
  void set_allocated_spec(::CMsgVarField* spec);
  private:
  const ::CMsgVarField& _internal_spec() const;
  ::CMsgVarField* _internal_mutable_spec();
  public:
  void unsafe_arena_set_allocated_spec(
      ::CMsgVarField* spec);
  ::CMsgVarField* unsafe_arena_release_spec();

  // @@protoc_insertion_point(class_scope:CMsgPaintKit_Operation_Sticker)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CMsgVarField* base_;
  ::CMsgVarField* weight_;
  ::CMsgVarField* spec_;
  friend struct ::TableStruct_tf_5fproto_5fdef_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class M0PROTO CMsgPaintKit_Operation_StickerStage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgPaintKit_Operation_StickerStage) */ {
 public:
  inline CMsgPaintKit_Operation_StickerStage() : CMsgPaintKit_Operation_StickerStage(nullptr) {}
  ~CMsgPaintKit_Operation_StickerStage() override;
  explicit constexpr CMsgPaintKit_Operation_StickerStage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgPaintKit_Operation_StickerStage(const CMsgPaintKit_Operation_StickerStage& from);
  CMsgPaintKit_Operation_StickerStage(CMsgPaintKit_Operation_StickerStage&& from) noexcept
    : CMsgPaintKit_Operation_StickerStage() {
    *this = ::std::move(from);
  }

  inline CMsgPaintKit_Operation_StickerStage& operator=(const CMsgPaintKit_Operation_StickerStage& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgPaintKit_Operation_StickerStage& operator=(CMsgPaintKit_Operation_StickerStage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgPaintKit_Operation_StickerStage& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgPaintKit_Operation_StickerStage* internal_default_instance() {
    return reinterpret_cast<const CMsgPaintKit_Operation_StickerStage*>(
               &_CMsgPaintKit_Operation_StickerStage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(CMsgPaintKit_Operation_StickerStage& a, CMsgPaintKit_Operation_StickerStage& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgPaintKit_Operation_StickerStage* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgPaintKit_Operation_StickerStage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgPaintKit_Operation_StickerStage* New() const final {
    return new CMsgPaintKit_Operation_StickerStage();
  }

  CMsgPaintKit_Operation_StickerStage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgPaintKit_Operation_StickerStage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgPaintKit_Operation_StickerStage& from);
  void MergeFrom(const CMsgPaintKit_Operation_StickerStage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgPaintKit_Operation_StickerStage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgPaintKit_Operation_StickerStage";
  }
  protected:
  explicit CMsgPaintKit_Operation_StickerStage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStickerFieldNumber = 1,
    kOperationNodeFieldNumber = 9,
    kDestTlFieldNumber = 2,
    kDestTrFieldNumber = 3,
    kDestBlFieldNumber = 4,
    kAdjustBlackFieldNumber = 5,
    kAdjustOffsetFieldNumber = 6,
    kAdjustGammaFieldNumber = 7,
  };
  // repeated .CMsgPaintKit_Operation_Sticker sticker = 1;
  int sticker_size() const;
  private:
  int _internal_sticker_size() const;
  public:
  void clear_sticker();
  ::CMsgPaintKit_Operation_Sticker* mutable_sticker(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPaintKit_Operation_Sticker >*
      mutable_sticker();
  private:
  const ::CMsgPaintKit_Operation_Sticker& _internal_sticker(int index) const;
  ::CMsgPaintKit_Operation_Sticker* _internal_add_sticker();
  public:
  const ::CMsgPaintKit_Operation_Sticker& sticker(int index) const;
  ::CMsgPaintKit_Operation_Sticker* add_sticker();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPaintKit_Operation_Sticker >&
      sticker() const;

  // repeated .CMsgPaintKit_OperationNode operation_node = 9;
  int operation_node_size() const;
  private:
  int _internal_operation_node_size() const;
  public:
  void clear_operation_node();
  ::CMsgPaintKit_OperationNode* mutable_operation_node(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPaintKit_OperationNode >*
      mutable_operation_node();
  private:
  const ::CMsgPaintKit_OperationNode& _internal_operation_node(int index) const;
  ::CMsgPaintKit_OperationNode* _internal_add_operation_node();
  public:
  const ::CMsgPaintKit_OperationNode& operation_node(int index) const;
  ::CMsgPaintKit_OperationNode* add_operation_node();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPaintKit_OperationNode >&
      operation_node() const;

  // optional .CMsgVarField dest_tl = 2 [(.var_field_type) = VAR_TYPE_STRING];
  bool has_dest_tl() const;
  private:
  bool _internal_has_dest_tl() const;
  public:
  void clear_dest_tl();
  const ::CMsgVarField& dest_tl() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgVarField* release_dest_tl();
  ::CMsgVarField* mutable_dest_tl();
  void set_allocated_dest_tl(::CMsgVarField* dest_tl);
  private:
  const ::CMsgVarField& _internal_dest_tl() const;
  ::CMsgVarField* _internal_mutable_dest_tl();
  public:
  void unsafe_arena_set_allocated_dest_tl(
      ::CMsgVarField* dest_tl);
  ::CMsgVarField* unsafe_arena_release_dest_tl();

  // optional .CMsgVarField dest_tr = 3 [(.var_field_type) = VAR_TYPE_STRING];
  bool has_dest_tr() const;
  private:
  bool _internal_has_dest_tr() const;
  public:
  void clear_dest_tr();
  const ::CMsgVarField& dest_tr() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgVarField* release_dest_tr();
  ::CMsgVarField* mutable_dest_tr();
  void set_allocated_dest_tr(::CMsgVarField* dest_tr);
  private:
  const ::CMsgVarField& _internal_dest_tr() const;
  ::CMsgVarField* _internal_mutable_dest_tr();
  public:
  void unsafe_arena_set_allocated_dest_tr(
      ::CMsgVarField* dest_tr);
  ::CMsgVarField* unsafe_arena_release_dest_tr();

  // optional .CMsgVarField dest_bl = 4 [(.var_field_type) = VAR_TYPE_STRING];
  bool has_dest_bl() const;
  private:
  bool _internal_has_dest_bl() const;
  public:
  void clear_dest_bl();
  const ::CMsgVarField& dest_bl() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgVarField* release_dest_bl();
  ::CMsgVarField* mutable_dest_bl();
  void set_allocated_dest_bl(::CMsgVarField* dest_bl);
  private:
  const ::CMsgVarField& _internal_dest_bl() const;
  ::CMsgVarField* _internal_mutable_dest_bl();
  public:
  void unsafe_arena_set_allocated_dest_bl(
      ::CMsgVarField* dest_bl);
  ::CMsgVarField* unsafe_arena_release_dest_bl();

  // optional .CMsgVarField adjust_black = 5 [(.var_field_type) = VAR_TYPE_STRING];
  bool has_adjust_black() const;
  private:
  bool _internal_has_adjust_black() const;
  public:
  void clear_adjust_black();
  const ::CMsgVarField& adjust_black() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgVarField* release_adjust_black();
  ::CMsgVarField* mutable_adjust_black();
  void set_allocated_adjust_black(::CMsgVarField* adjust_black);
  private:
  const ::CMsgVarField& _internal_adjust_black() const;
  ::CMsgVarField* _internal_mutable_adjust_black();
  public:
  void unsafe_arena_set_allocated_adjust_black(
      ::CMsgVarField* adjust_black);
  ::CMsgVarField* unsafe_arena_release_adjust_black();

  // optional .CMsgVarField adjust_offset = 6 [(.var_field_type) = VAR_TYPE_STRING];
  bool has_adjust_offset() const;
  private:
  bool _internal_has_adjust_offset() const;
  public:
  void clear_adjust_offset();
  const ::CMsgVarField& adjust_offset() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgVarField* release_adjust_offset();
  ::CMsgVarField* mutable_adjust_offset();
  void set_allocated_adjust_offset(::CMsgVarField* adjust_offset);
  private:
  const ::CMsgVarField& _internal_adjust_offset() const;
  ::CMsgVarField* _internal_mutable_adjust_offset();
  public:
  void unsafe_arena_set_allocated_adjust_offset(
      ::CMsgVarField* adjust_offset);
  ::CMsgVarField* unsafe_arena_release_adjust_offset();

  // optional .CMsgVarField adjust_gamma = 7 [(.var_field_type) = VAR_TYPE_STRING];
  bool has_adjust_gamma() const;
  private:
  bool _internal_has_adjust_gamma() const;
  public:
  void clear_adjust_gamma();
  const ::CMsgVarField& adjust_gamma() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgVarField* release_adjust_gamma();
  ::CMsgVarField* mutable_adjust_gamma();
  void set_allocated_adjust_gamma(::CMsgVarField* adjust_gamma);
  private:
  const ::CMsgVarField& _internal_adjust_gamma() const;
  ::CMsgVarField* _internal_mutable_adjust_gamma();
  public:
  void unsafe_arena_set_allocated_adjust_gamma(
      ::CMsgVarField* adjust_gamma);
  ::CMsgVarField* unsafe_arena_release_adjust_gamma();

  // @@protoc_insertion_point(class_scope:CMsgPaintKit_Operation_StickerStage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPaintKit_Operation_Sticker > sticker_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPaintKit_OperationNode > operation_node_;
  ::CMsgVarField* dest_tl_;
  ::CMsgVarField* dest_tr_;
  ::CMsgVarField* dest_bl_;
  ::CMsgVarField* adjust_black_;
  ::CMsgVarField* adjust_offset_;
  ::CMsgVarField* adjust_gamma_;
  friend struct ::TableStruct_tf_5fproto_5fdef_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class M0PROTO CMsgPaintKit_OperationStage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgPaintKit_OperationStage) */ {
 public:
  inline CMsgPaintKit_OperationStage() : CMsgPaintKit_OperationStage(nullptr) {}
  ~CMsgPaintKit_OperationStage() override;
  explicit constexpr CMsgPaintKit_OperationStage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgPaintKit_OperationStage(const CMsgPaintKit_OperationStage& from);
  CMsgPaintKit_OperationStage(CMsgPaintKit_OperationStage&& from) noexcept
    : CMsgPaintKit_OperationStage() {
    *this = ::std::move(from);
  }

  inline CMsgPaintKit_OperationStage& operator=(const CMsgPaintKit_OperationStage& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgPaintKit_OperationStage& operator=(CMsgPaintKit_OperationStage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgPaintKit_OperationStage& default_instance() {
    return *internal_default_instance();
  }
  enum StageCase {
    kTextureLookup = 1,
    kCombineAdd = 2,
    kCombineLerp = 3,
    kCombineMultiply = 4,
    kSelect = 5,
    kApplySticker = 6,
    STAGE_NOT_SET = 0,
  };

  static inline const CMsgPaintKit_OperationStage* internal_default_instance() {
    return reinterpret_cast<const CMsgPaintKit_OperationStage*>(
               &_CMsgPaintKit_OperationStage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(CMsgPaintKit_OperationStage& a, CMsgPaintKit_OperationStage& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgPaintKit_OperationStage* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgPaintKit_OperationStage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgPaintKit_OperationStage* New() const final {
    return new CMsgPaintKit_OperationStage();
  }

  CMsgPaintKit_OperationStage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgPaintKit_OperationStage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgPaintKit_OperationStage& from);
  void MergeFrom(const CMsgPaintKit_OperationStage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgPaintKit_OperationStage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgPaintKit_OperationStage";
  }
  protected:
  explicit CMsgPaintKit_OperationStage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextureLookupFieldNumber = 1,
    kCombineAddFieldNumber = 2,
    kCombineLerpFieldNumber = 3,
    kCombineMultiplyFieldNumber = 4,
    kSelectFieldNumber = 5,
    kApplyStickerFieldNumber = 6,
  };
  // .CMsgPaintKit_Operation_TextureStage texture_lookup = 1;
  bool has_texture_lookup() const;
  private:
  bool _internal_has_texture_lookup() const;
  public:
  void clear_texture_lookup();
  const ::CMsgPaintKit_Operation_TextureStage& texture_lookup() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgPaintKit_Operation_TextureStage* release_texture_lookup();
  ::CMsgPaintKit_Operation_TextureStage* mutable_texture_lookup();
  void set_allocated_texture_lookup(::CMsgPaintKit_Operation_TextureStage* texture_lookup);
  private:
  const ::CMsgPaintKit_Operation_TextureStage& _internal_texture_lookup() const;
  ::CMsgPaintKit_Operation_TextureStage* _internal_mutable_texture_lookup();
  public:
  void unsafe_arena_set_allocated_texture_lookup(
      ::CMsgPaintKit_Operation_TextureStage* texture_lookup);
  ::CMsgPaintKit_Operation_TextureStage* unsafe_arena_release_texture_lookup();

  // .CMsgPaintKit_Operation_CombineStage combine_add = 2;
  bool has_combine_add() const;
  private:
  bool _internal_has_combine_add() const;
  public:
  void clear_combine_add();
  const ::CMsgPaintKit_Operation_CombineStage& combine_add() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgPaintKit_Operation_CombineStage* release_combine_add();
  ::CMsgPaintKit_Operation_CombineStage* mutable_combine_add();
  void set_allocated_combine_add(::CMsgPaintKit_Operation_CombineStage* combine_add);
  private:
  const ::CMsgPaintKit_Operation_CombineStage& _internal_combine_add() const;
  ::CMsgPaintKit_Operation_CombineStage* _internal_mutable_combine_add();
  public:
  void unsafe_arena_set_allocated_combine_add(
      ::CMsgPaintKit_Operation_CombineStage* combine_add);
  ::CMsgPaintKit_Operation_CombineStage* unsafe_arena_release_combine_add();

  // .CMsgPaintKit_Operation_CombineStage combine_lerp = 3;
  bool has_combine_lerp() const;
  private:
  bool _internal_has_combine_lerp() const;
  public:
  void clear_combine_lerp();
  const ::CMsgPaintKit_Operation_CombineStage& combine_lerp() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgPaintKit_Operation_CombineStage* release_combine_lerp();
  ::CMsgPaintKit_Operation_CombineStage* mutable_combine_lerp();
  void set_allocated_combine_lerp(::CMsgPaintKit_Operation_CombineStage* combine_lerp);
  private:
  const ::CMsgPaintKit_Operation_CombineStage& _internal_combine_lerp() const;
  ::CMsgPaintKit_Operation_CombineStage* _internal_mutable_combine_lerp();
  public:
  void unsafe_arena_set_allocated_combine_lerp(
      ::CMsgPaintKit_Operation_CombineStage* combine_lerp);
  ::CMsgPaintKit_Operation_CombineStage* unsafe_arena_release_combine_lerp();

  // .CMsgPaintKit_Operation_CombineStage combine_multiply = 4;
  bool has_combine_multiply() const;
  private:
  bool _internal_has_combine_multiply() const;
  public:
  void clear_combine_multiply();
  const ::CMsgPaintKit_Operation_CombineStage& combine_multiply() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgPaintKit_Operation_CombineStage* release_combine_multiply();
  ::CMsgPaintKit_Operation_CombineStage* mutable_combine_multiply();
  void set_allocated_combine_multiply(::CMsgPaintKit_Operation_CombineStage* combine_multiply);
  private:
  const ::CMsgPaintKit_Operation_CombineStage& _internal_combine_multiply() const;
  ::CMsgPaintKit_Operation_CombineStage* _internal_mutable_combine_multiply();
  public:
  void unsafe_arena_set_allocated_combine_multiply(
      ::CMsgPaintKit_Operation_CombineStage* combine_multiply);
  ::CMsgPaintKit_Operation_CombineStage* unsafe_arena_release_combine_multiply();

  // .CMsgPaintKit_Operation_SelectStage select = 5;
  bool has_select() const;
  private:
  bool _internal_has_select() const;
  public:
  void clear_select();
  const ::CMsgPaintKit_Operation_SelectStage& select() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgPaintKit_Operation_SelectStage* release_select();
  ::CMsgPaintKit_Operation_SelectStage* mutable_select();
  void set_allocated_select(::CMsgPaintKit_Operation_SelectStage* select);
  private:
  const ::CMsgPaintKit_Operation_SelectStage& _internal_select() const;
  ::CMsgPaintKit_Operation_SelectStage* _internal_mutable_select();
  public:
  void unsafe_arena_set_allocated_select(
      ::CMsgPaintKit_Operation_SelectStage* select);
  ::CMsgPaintKit_Operation_SelectStage* unsafe_arena_release_select();

  // .CMsgPaintKit_Operation_StickerStage apply_sticker = 6;
  bool has_apply_sticker() const;
  private:
  bool _internal_has_apply_sticker() const;
  public:
  void clear_apply_sticker();
  const ::CMsgPaintKit_Operation_StickerStage& apply_sticker() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgPaintKit_Operation_StickerStage* release_apply_sticker();
  ::CMsgPaintKit_Operation_StickerStage* mutable_apply_sticker();
  void set_allocated_apply_sticker(::CMsgPaintKit_Operation_StickerStage* apply_sticker);
  private:
  const ::CMsgPaintKit_Operation_StickerStage& _internal_apply_sticker() const;
  ::CMsgPaintKit_Operation_StickerStage* _internal_mutable_apply_sticker();
  public:
  void unsafe_arena_set_allocated_apply_sticker(
      ::CMsgPaintKit_Operation_StickerStage* apply_sticker);
  ::CMsgPaintKit_Operation_StickerStage* unsafe_arena_release_apply_sticker();

  void clear_stage();
  StageCase stage_case() const;
  // @@protoc_insertion_point(class_scope:CMsgPaintKit_OperationStage)
 private:
  class _Internal;
  void set_has_texture_lookup();
  void set_has_combine_add();
  void set_has_combine_lerp();
  void set_has_combine_multiply();
  void set_has_select();
  void set_has_apply_sticker();

  inline bool has_stage() const;
  inline void clear_has_stage();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union StageUnion {
    constexpr StageUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::CMsgPaintKit_Operation_TextureStage* texture_lookup_;
    ::CMsgPaintKit_Operation_CombineStage* combine_add_;
    ::CMsgPaintKit_Operation_CombineStage* combine_lerp_;
    ::CMsgPaintKit_Operation_CombineStage* combine_multiply_;
    ::CMsgPaintKit_Operation_SelectStage* select_;
    ::CMsgPaintKit_Operation_StickerStage* apply_sticker_;
  } stage_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_tf_5fproto_5fdef_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class M0PROTO CMsgPaintKit_OperationNode final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgPaintKit_OperationNode) */ {
 public:
  inline CMsgPaintKit_OperationNode() : CMsgPaintKit_OperationNode(nullptr) {}
  ~CMsgPaintKit_OperationNode() override;
  explicit constexpr CMsgPaintKit_OperationNode(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgPaintKit_OperationNode(const CMsgPaintKit_OperationNode& from);
  CMsgPaintKit_OperationNode(CMsgPaintKit_OperationNode&& from) noexcept
    : CMsgPaintKit_OperationNode() {
    *this = ::std::move(from);
  }

  inline CMsgPaintKit_OperationNode& operator=(const CMsgPaintKit_OperationNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgPaintKit_OperationNode& operator=(CMsgPaintKit_OperationNode&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgPaintKit_OperationNode& default_instance() {
    return *internal_default_instance();
  }
  enum NodeCase {
    kStage = 1,
    kOperationTemplate = 2,
    NODE_NOT_SET = 0,
  };

  static inline const CMsgPaintKit_OperationNode* internal_default_instance() {
    return reinterpret_cast<const CMsgPaintKit_OperationNode*>(
               &_CMsgPaintKit_OperationNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(CMsgPaintKit_OperationNode& a, CMsgPaintKit_OperationNode& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgPaintKit_OperationNode* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgPaintKit_OperationNode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgPaintKit_OperationNode* New() const final {
    return new CMsgPaintKit_OperationNode();
  }

  CMsgPaintKit_OperationNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgPaintKit_OperationNode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgPaintKit_OperationNode& from);
  void MergeFrom(const CMsgPaintKit_OperationNode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgPaintKit_OperationNode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgPaintKit_OperationNode";
  }
  protected:
  explicit CMsgPaintKit_OperationNode(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStageFieldNumber = 1,
    kOperationTemplateFieldNumber = 2,
  };
  // .CMsgPaintKit_OperationStage stage = 1;
  bool has_stage() const;
  private:
  bool _internal_has_stage() const;
  public:
  void clear_stage();
  const ::CMsgPaintKit_OperationStage& stage() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgPaintKit_OperationStage* release_stage();
  ::CMsgPaintKit_OperationStage* mutable_stage();
  void set_allocated_stage(::CMsgPaintKit_OperationStage* stage);
  private:
  const ::CMsgPaintKit_OperationStage& _internal_stage() const;
  ::CMsgPaintKit_OperationStage* _internal_mutable_stage();
  public:
  void unsafe_arena_set_allocated_stage(
      ::CMsgPaintKit_OperationStage* stage);
  ::CMsgPaintKit_OperationStage* unsafe_arena_release_stage();

  // .CMsgProtoDefID operation_template = 2 [(.valid_type) = DEF_TYPE_PAINTKIT_OPERATION, (.inherit_reference_variables) = true];
  bool has_operation_template() const;
  private:
  bool _internal_has_operation_template() const;
  public:
  void clear_operation_template();
  const ::CMsgProtoDefID& operation_template() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgProtoDefID* release_operation_template();
  ::CMsgProtoDefID* mutable_operation_template();
  void set_allocated_operation_template(::CMsgProtoDefID* operation_template);
  private:
  const ::CMsgProtoDefID& _internal_operation_template() const;
  ::CMsgProtoDefID* _internal_mutable_operation_template();
  public:
  void unsafe_arena_set_allocated_operation_template(
      ::CMsgProtoDefID* operation_template);
  ::CMsgProtoDefID* unsafe_arena_release_operation_template();

  void clear_node();
  NodeCase node_case() const;
  // @@protoc_insertion_point(class_scope:CMsgPaintKit_OperationNode)
 private:
  class _Internal;
  void set_has_stage();
  void set_has_operation_template();

  inline bool has_node() const;
  inline void clear_has_node();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union NodeUnion {
    constexpr NodeUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::CMsgPaintKit_OperationStage* stage_;
    ::CMsgProtoDefID* operation_template_;
  } node_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_tf_5fproto_5fdef_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class M0PROTO CMsgPaintKit_Operation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgPaintKit_Operation) */ {
 public:
  inline CMsgPaintKit_Operation() : CMsgPaintKit_Operation(nullptr) {}
  ~CMsgPaintKit_Operation() override;
  explicit constexpr CMsgPaintKit_Operation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgPaintKit_Operation(const CMsgPaintKit_Operation& from);
  CMsgPaintKit_Operation(CMsgPaintKit_Operation&& from) noexcept
    : CMsgPaintKit_Operation() {
    *this = ::std::move(from);
  }

  inline CMsgPaintKit_Operation& operator=(const CMsgPaintKit_Operation& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgPaintKit_Operation& operator=(CMsgPaintKit_Operation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgPaintKit_Operation& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgPaintKit_Operation* internal_default_instance() {
    return reinterpret_cast<const CMsgPaintKit_Operation*>(
               &_CMsgPaintKit_Operation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(CMsgPaintKit_Operation& a, CMsgPaintKit_Operation& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgPaintKit_Operation* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgPaintKit_Operation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgPaintKit_Operation* New() const final {
    return new CMsgPaintKit_Operation();
  }

  CMsgPaintKit_Operation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgPaintKit_Operation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgPaintKit_Operation& from);
  void MergeFrom(const CMsgPaintKit_Operation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgPaintKit_Operation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgPaintKit_Operation";
  }
  protected:
  explicit CMsgPaintKit_Operation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOperationNodeFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // repeated .CMsgPaintKit_OperationNode operation_node = 2;
  int operation_node_size() const;
  private:
  int _internal_operation_node_size() const;
  public:
  void clear_operation_node();
  ::CMsgPaintKit_OperationNode* mutable_operation_node(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPaintKit_OperationNode >*
      mutable_operation_node();
  private:
  const ::CMsgPaintKit_OperationNode& _internal_operation_node(int index) const;
  ::CMsgPaintKit_OperationNode* _internal_add_operation_node();
  public:
  const ::CMsgPaintKit_OperationNode& operation_node(int index) const;
  ::CMsgPaintKit_OperationNode* add_operation_node();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPaintKit_OperationNode >&
      operation_node() const;

  // required .CMsgProtoDefHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::CMsgProtoDefHeader& header() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgProtoDefHeader* release_header();
  ::CMsgProtoDefHeader* mutable_header();
  void set_allocated_header(::CMsgProtoDefHeader* header);
  private:
  const ::CMsgProtoDefHeader& _internal_header() const;
  ::CMsgProtoDefHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::CMsgProtoDefHeader* header);
  ::CMsgProtoDefHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:CMsgPaintKit_Operation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPaintKit_OperationNode > operation_node_;
  ::CMsgProtoDefHeader* header_;
  friend struct ::TableStruct_tf_5fproto_5fdef_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class M0PROTO CMsgPaintKit_ItemDefinition_Definition final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgPaintKit_ItemDefinition.Definition) */ {
 public:
  inline CMsgPaintKit_ItemDefinition_Definition() : CMsgPaintKit_ItemDefinition_Definition(nullptr) {}
  ~CMsgPaintKit_ItemDefinition_Definition() override;
  explicit constexpr CMsgPaintKit_ItemDefinition_Definition(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgPaintKit_ItemDefinition_Definition(const CMsgPaintKit_ItemDefinition_Definition& from);
  CMsgPaintKit_ItemDefinition_Definition(CMsgPaintKit_ItemDefinition_Definition&& from) noexcept
    : CMsgPaintKit_ItemDefinition_Definition() {
    *this = ::std::move(from);
  }

  inline CMsgPaintKit_ItemDefinition_Definition& operator=(const CMsgPaintKit_ItemDefinition_Definition& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgPaintKit_ItemDefinition_Definition& operator=(CMsgPaintKit_ItemDefinition_Definition&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgPaintKit_ItemDefinition_Definition& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgPaintKit_ItemDefinition_Definition* internal_default_instance() {
    return reinterpret_cast<const CMsgPaintKit_ItemDefinition_Definition*>(
               &_CMsgPaintKit_ItemDefinition_Definition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(CMsgPaintKit_ItemDefinition_Definition& a, CMsgPaintKit_ItemDefinition_Definition& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgPaintKit_ItemDefinition_Definition* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgPaintKit_ItemDefinition_Definition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgPaintKit_ItemDefinition_Definition* New() const final {
    return new CMsgPaintKit_ItemDefinition_Definition();
  }

  CMsgPaintKit_ItemDefinition_Definition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgPaintKit_ItemDefinition_Definition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgPaintKit_ItemDefinition_Definition& from);
  void MergeFrom(const CMsgPaintKit_ItemDefinition_Definition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgPaintKit_ItemDefinition_Definition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgPaintKit_ItemDefinition.Definition";
  }
  protected:
  explicit CMsgPaintKit_ItemDefinition_Definition(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVariableFieldNumber = 2,
    kOperationTemplateFieldNumber = 1,
  };
  // repeated .CMsgVarField variable = 2 [(.allow_add) = false, (.allow_delete) = false, (.var_field_type) = VAR_TYPE_STRING];
  int variable_size() const;
  private:
  int _internal_variable_size() const;
  public:
  void clear_variable();
  ::CMsgVarField* mutable_variable(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgVarField >*
      mutable_variable();
  private:
  const ::CMsgVarField& _internal_variable(int index) const;
  ::CMsgVarField* _internal_add_variable();
  public:
  const ::CMsgVarField& variable(int index) const;
  ::CMsgVarField* add_variable();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgVarField >&
      variable() const;

  // optional .CMsgProtoDefID operation_template = 1 [(.valid_type) = DEF_TYPE_PAINTKIT_OPERATION];
  bool has_operation_template() const;
  private:
  bool _internal_has_operation_template() const;
  public:
  void clear_operation_template();
  const ::CMsgProtoDefID& operation_template() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgProtoDefID* release_operation_template();
  ::CMsgProtoDefID* mutable_operation_template();
  void set_allocated_operation_template(::CMsgProtoDefID* operation_template);
  private:
  const ::CMsgProtoDefID& _internal_operation_template() const;
  ::CMsgProtoDefID* _internal_mutable_operation_template();
  public:
  void unsafe_arena_set_allocated_operation_template(
      ::CMsgProtoDefID* operation_template);
  ::CMsgProtoDefID* unsafe_arena_release_operation_template();

  // @@protoc_insertion_point(class_scope:CMsgPaintKit_ItemDefinition.Definition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgVarField > variable_;
  ::CMsgProtoDefID* operation_template_;
  friend struct ::TableStruct_tf_5fproto_5fdef_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class M0PROTO CMsgPaintKit_ItemDefinition final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgPaintKit_ItemDefinition) */ {
 public:
  inline CMsgPaintKit_ItemDefinition() : CMsgPaintKit_ItemDefinition(nullptr) {}
  ~CMsgPaintKit_ItemDefinition() override;
  explicit constexpr CMsgPaintKit_ItemDefinition(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgPaintKit_ItemDefinition(const CMsgPaintKit_ItemDefinition& from);
  CMsgPaintKit_ItemDefinition(CMsgPaintKit_ItemDefinition&& from) noexcept
    : CMsgPaintKit_ItemDefinition() {
    *this = ::std::move(from);
  }

  inline CMsgPaintKit_ItemDefinition& operator=(const CMsgPaintKit_ItemDefinition& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgPaintKit_ItemDefinition& operator=(CMsgPaintKit_ItemDefinition&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgPaintKit_ItemDefinition& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgPaintKit_ItemDefinition* internal_default_instance() {
    return reinterpret_cast<const CMsgPaintKit_ItemDefinition*>(
               &_CMsgPaintKit_ItemDefinition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(CMsgPaintKit_ItemDefinition& a, CMsgPaintKit_ItemDefinition& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgPaintKit_ItemDefinition* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgPaintKit_ItemDefinition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgPaintKit_ItemDefinition* New() const final {
    return new CMsgPaintKit_ItemDefinition();
  }

  CMsgPaintKit_ItemDefinition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgPaintKit_ItemDefinition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgPaintKit_ItemDefinition& from);
  void MergeFrom(const CMsgPaintKit_ItemDefinition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgPaintKit_ItemDefinition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgPaintKit_ItemDefinition";
  }
  protected:
  explicit CMsgPaintKit_ItemDefinition(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgPaintKit_ItemDefinition_Definition Definition;

  // accessors -------------------------------------------------------

  enum : int {
    kDefinitionFieldNumber = 4,
    kHeaderFieldNumber = 1,
    kVariableTemplateFieldNumber = 3,
    kItemDefinitionIndexFieldNumber = 2,
  };
  // repeated .CMsgPaintKit_ItemDefinition.Definition definition = 4 [(.max_count) = 5];
  int definition_size() const;
  private:
  int _internal_definition_size() const;
  public:
  void clear_definition();
  ::CMsgPaintKit_ItemDefinition_Definition* mutable_definition(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPaintKit_ItemDefinition_Definition >*
      mutable_definition();
  private:
  const ::CMsgPaintKit_ItemDefinition_Definition& _internal_definition(int index) const;
  ::CMsgPaintKit_ItemDefinition_Definition* _internal_add_definition();
  public:
  const ::CMsgPaintKit_ItemDefinition_Definition& definition(int index) const;
  ::CMsgPaintKit_ItemDefinition_Definition* add_definition();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPaintKit_ItemDefinition_Definition >&
      definition() const;

  // required .CMsgProtoDefHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::CMsgProtoDefHeader& header() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgProtoDefHeader* release_header();
  ::CMsgProtoDefHeader* mutable_header();
  void set_allocated_header(::CMsgProtoDefHeader* header);
  private:
  const ::CMsgProtoDefHeader& _internal_header() const;
  ::CMsgProtoDefHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::CMsgProtoDefHeader* header);
  ::CMsgProtoDefHeader* unsafe_arena_release_header();

  // optional .CMsgProtoDefID variable_template = 3 [(.valid_type) = DEF_TYPE_PAINTKIT_VARIABLES, (.inherit_reference_variables) = true];
  bool has_variable_template() const;
  private:
  bool _internal_has_variable_template() const;
  public:
  void clear_variable_template();
  const ::CMsgProtoDefID& variable_template() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgProtoDefID* release_variable_template();
  ::CMsgProtoDefID* mutable_variable_template();
  void set_allocated_variable_template(::CMsgProtoDefID* variable_template);
  private:
  const ::CMsgProtoDefID& _internal_variable_template() const;
  ::CMsgProtoDefID* _internal_mutable_variable_template();
  public:
  void unsafe_arena_set_allocated_variable_template(
      ::CMsgProtoDefID* variable_template);
  ::CMsgProtoDefID* unsafe_arena_release_variable_template();

  // required uint32 item_definition_index = 2;
  bool has_item_definition_index() const;
  private:
  bool _internal_has_item_definition_index() const;
  public:
  void clear_item_definition_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 item_definition_index() const;
  void set_item_definition_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_item_definition_index() const;
  void _internal_set_item_definition_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgPaintKit_ItemDefinition)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPaintKit_ItemDefinition_Definition > definition_;
  ::CMsgProtoDefHeader* header_;
  ::CMsgProtoDefID* variable_template_;
  ::PROTOBUF_NAMESPACE_ID::uint32 item_definition_index_;
  friend struct ::TableStruct_tf_5fproto_5fdef_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class M0PROTO CMsgPaintKit_Definition_Item_ItemData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgPaintKit_Definition.Item.ItemData) */ {
 public:
  inline CMsgPaintKit_Definition_Item_ItemData() : CMsgPaintKit_Definition_Item_ItemData(nullptr) {}
  ~CMsgPaintKit_Definition_Item_ItemData() override;
  explicit constexpr CMsgPaintKit_Definition_Item_ItemData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgPaintKit_Definition_Item_ItemData(const CMsgPaintKit_Definition_Item_ItemData& from);
  CMsgPaintKit_Definition_Item_ItemData(CMsgPaintKit_Definition_Item_ItemData&& from) noexcept
    : CMsgPaintKit_Definition_Item_ItemData() {
    *this = ::std::move(from);
  }

  inline CMsgPaintKit_Definition_Item_ItemData& operator=(const CMsgPaintKit_Definition_Item_ItemData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgPaintKit_Definition_Item_ItemData& operator=(CMsgPaintKit_Definition_Item_ItemData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgPaintKit_Definition_Item_ItemData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgPaintKit_Definition_Item_ItemData* internal_default_instance() {
    return reinterpret_cast<const CMsgPaintKit_Definition_Item_ItemData*>(
               &_CMsgPaintKit_Definition_Item_ItemData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(CMsgPaintKit_Definition_Item_ItemData& a, CMsgPaintKit_Definition_Item_ItemData& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgPaintKit_Definition_Item_ItemData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgPaintKit_Definition_Item_ItemData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgPaintKit_Definition_Item_ItemData* New() const final {
    return new CMsgPaintKit_Definition_Item_ItemData();
  }

  CMsgPaintKit_Definition_Item_ItemData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgPaintKit_Definition_Item_ItemData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgPaintKit_Definition_Item_ItemData& from);
  void MergeFrom(const CMsgPaintKit_Definition_Item_ItemData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgPaintKit_Definition_Item_ItemData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgPaintKit_Definition.Item.ItemData";
  }
  protected:
  explicit CMsgPaintKit_Definition_Item_ItemData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVariableFieldNumber = 4,
    kMaterialOverrideFieldNumber = 3,
    kCanApplyPaintkitFieldNumber = 2,
  };
  // repeated .CMsgVarField variable = 4 [(.allow_add) = false, (.allow_delete) = false, (.var_field_type) = VAR_TYPE_STRING];
  int variable_size() const;
  private:
  int _internal_variable_size() const;
  public:
  void clear_variable();
  ::CMsgVarField* mutable_variable(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgVarField >*
      mutable_variable();
  private:
  const ::CMsgVarField& _internal_variable(int index) const;
  ::CMsgVarField* _internal_add_variable();
  public:
  const ::CMsgVarField& variable(int index) const;
  ::CMsgVarField* add_variable();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgVarField >&
      variable() const;

  // optional string material_override = 3;
  bool has_material_override() const;
  private:
  bool _internal_has_material_override() const;
  public:
  void clear_material_override();
  const std::string& material_override() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_material_override(ArgT0&& arg0, ArgT... args);
  std::string* mutable_material_override();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_material_override();
  void set_allocated_material_override(std::string* material_override);
  private:
  const std::string& _internal_material_override() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_material_override(const std::string& value);
  std::string* _internal_mutable_material_override();
  public:

  // optional bool can_apply_paintkit = 2 [default = true];
  bool has_can_apply_paintkit() const;
  private:
  bool _internal_has_can_apply_paintkit() const;
  public:
  void clear_can_apply_paintkit();
  bool can_apply_paintkit() const;
  void set_can_apply_paintkit(bool value);
  private:
  bool _internal_can_apply_paintkit() const;
  void _internal_set_can_apply_paintkit(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgPaintKit_Definition.Item.ItemData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgVarField > variable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr material_override_;
  bool can_apply_paintkit_;
  friend struct ::TableStruct_tf_5fproto_5fdef_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class M0PROTO CMsgPaintKit_Definition_Item final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgPaintKit_Definition.Item) */ {
 public:
  inline CMsgPaintKit_Definition_Item() : CMsgPaintKit_Definition_Item(nullptr) {}
  ~CMsgPaintKit_Definition_Item() override;
  explicit constexpr CMsgPaintKit_Definition_Item(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgPaintKit_Definition_Item(const CMsgPaintKit_Definition_Item& from);
  CMsgPaintKit_Definition_Item(CMsgPaintKit_Definition_Item&& from) noexcept
    : CMsgPaintKit_Definition_Item() {
    *this = ::std::move(from);
  }

  inline CMsgPaintKit_Definition_Item& operator=(const CMsgPaintKit_Definition_Item& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgPaintKit_Definition_Item& operator=(CMsgPaintKit_Definition_Item&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgPaintKit_Definition_Item& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgPaintKit_Definition_Item* internal_default_instance() {
    return reinterpret_cast<const CMsgPaintKit_Definition_Item*>(
               &_CMsgPaintKit_Definition_Item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(CMsgPaintKit_Definition_Item& a, CMsgPaintKit_Definition_Item& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgPaintKit_Definition_Item* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgPaintKit_Definition_Item* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgPaintKit_Definition_Item* New() const final {
    return new CMsgPaintKit_Definition_Item();
  }

  CMsgPaintKit_Definition_Item* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgPaintKit_Definition_Item>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgPaintKit_Definition_Item& from);
  void MergeFrom(const CMsgPaintKit_Definition_Item& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgPaintKit_Definition_Item* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgPaintKit_Definition.Item";
  }
  protected:
  explicit CMsgPaintKit_Definition_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgPaintKit_Definition_Item_ItemData ItemData;

  // accessors -------------------------------------------------------

  enum : int {
    kItemDefinitionTemplateFieldNumber = 1,
    kDataFieldNumber = 5,
  };
  // required .CMsgProtoDefID item_definition_template = 1 [(.valid_type) = DEF_TYPE_PAINTKIT_ITEM_DEFINITION, (.panel_class_override) = "CPaintKitDefIdFieldProtoEditorField"];
  bool has_item_definition_template() const;
  private:
  bool _internal_has_item_definition_template() const;
  public:
  void clear_item_definition_template();
  const ::CMsgProtoDefID& item_definition_template() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgProtoDefID* release_item_definition_template();
  ::CMsgProtoDefID* mutable_item_definition_template();
  void set_allocated_item_definition_template(::CMsgProtoDefID* item_definition_template);
  private:
  const ::CMsgProtoDefID& _internal_item_definition_template() const;
  ::CMsgProtoDefID* _internal_mutable_item_definition_template();
  public:
  void unsafe_arena_set_allocated_item_definition_template(
      ::CMsgProtoDefID* item_definition_template);
  ::CMsgProtoDefID* unsafe_arena_release_item_definition_template();

  // optional .CMsgPaintKit_Definition.Item.ItemData data = 5;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::CMsgPaintKit_Definition_Item_ItemData& data() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgPaintKit_Definition_Item_ItemData* release_data();
  ::CMsgPaintKit_Definition_Item_ItemData* mutable_data();
  void set_allocated_data(::CMsgPaintKit_Definition_Item_ItemData* data);
  private:
  const ::CMsgPaintKit_Definition_Item_ItemData& _internal_data() const;
  ::CMsgPaintKit_Definition_Item_ItemData* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::CMsgPaintKit_Definition_Item_ItemData* data);
  ::CMsgPaintKit_Definition_Item_ItemData* unsafe_arena_release_data();

  // @@protoc_insertion_point(class_scope:CMsgPaintKit_Definition.Item)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CMsgProtoDefID* item_definition_template_;
  ::CMsgPaintKit_Definition_Item_ItemData* data_;
  friend struct ::TableStruct_tf_5fproto_5fdef_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class M0PROTO CMsgPaintKit_Definition final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgPaintKit_Definition) */ {
 public:
  inline CMsgPaintKit_Definition() : CMsgPaintKit_Definition(nullptr) {}
  ~CMsgPaintKit_Definition() override;
  explicit constexpr CMsgPaintKit_Definition(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgPaintKit_Definition(const CMsgPaintKit_Definition& from);
  CMsgPaintKit_Definition(CMsgPaintKit_Definition&& from) noexcept
    : CMsgPaintKit_Definition() {
    *this = ::std::move(from);
  }

  inline CMsgPaintKit_Definition& operator=(const CMsgPaintKit_Definition& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgPaintKit_Definition& operator=(CMsgPaintKit_Definition&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgPaintKit_Definition& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgPaintKit_Definition* internal_default_instance() {
    return reinterpret_cast<const CMsgPaintKit_Definition*>(
               &_CMsgPaintKit_Definition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(CMsgPaintKit_Definition& a, CMsgPaintKit_Definition& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgPaintKit_Definition* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgPaintKit_Definition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgPaintKit_Definition* New() const final {
    return new CMsgPaintKit_Definition();
  }

  CMsgPaintKit_Definition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgPaintKit_Definition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgPaintKit_Definition& from);
  void MergeFrom(const CMsgPaintKit_Definition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgPaintKit_Definition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgPaintKit_Definition";
  }
  protected:
  explicit CMsgPaintKit_Definition(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgPaintKit_Definition_Item Item;

  // accessors -------------------------------------------------------

  enum : int {
    kItemFieldNumber = 5,
    kLocDesctokenFieldNumber = 2,
    kHeaderFieldNumber = 1,
    kOperationTemplateFieldNumber = 3,
    kPaintkitToolFieldNumber = 6,
    kFlamethrowerFieldNumber = 7,
    kGrenadelauncherFieldNumber = 8,
    kKnifeFieldNumber = 9,
    kMedigunFieldNumber = 10,
    kMinigunFieldNumber = 11,
    kPistolFieldNumber = 12,
    kRevolverFieldNumber = 13,
    kRocketlauncherFieldNumber = 14,
    kScattergunFieldNumber = 15,
    kShotgunFieldNumber = 16,
    kSmgFieldNumber = 17,
    kSniperrifleFieldNumber = 18,
    kStickybombLauncherFieldNumber = 19,
    kUbersawFieldNumber = 20,
    kWrenchFieldNumber = 21,
    kAmputatorFieldNumber = 22,
    kAtomLauncherFieldNumber = 23,
    kBackScratcherFieldNumber = 24,
    kBattleaxeFieldNumber = 25,
    kBazaarSniperFieldNumber = 26,
    kBlackboxFieldNumber = 27,
    kClaidheamohmorFieldNumber = 28,
    kCrusadersCrossbowFieldNumber = 29,
    kDegreaserFieldNumber = 30,
    kDemoCannonFieldNumber = 31,
    kDemoSultanSwordFieldNumber = 32,
    kDetonatorFieldNumber = 33,
    kGatlingGunFieldNumber = 34,
    kHolymackerelFieldNumber = 35,
    kJagFieldNumber = 36,
    kLochnloadFieldNumber = 37,
    kPowerjackFieldNumber = 38,
    kQuadballFieldNumber = 39,
    kReserveShooterFieldNumber = 40,
    kRidingCropFieldNumber = 41,
    kRussianRiotFieldNumber = 42,
    kScimitarFieldNumber = 43,
    kScorchShotFieldNumber = 44,
    kShortstopFieldNumber = 45,
    kSodaPopperFieldNumber = 46,
    kTeleShotgunFieldNumber = 47,
    kTomislavFieldNumber = 48,
    kTrenchgunFieldNumber = 49,
    kWingerPistolFieldNumber = 50,
    kHasTeamTexturesFieldNumber = 4,
  };
  // repeated .CMsgPaintKit_Definition.Item item = 5;
  int item_size() const;
  private:
  int _internal_item_size() const;
  public:
  void clear_item();
  ::CMsgPaintKit_Definition_Item* mutable_item(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPaintKit_Definition_Item >*
      mutable_item();
  private:
  const ::CMsgPaintKit_Definition_Item& _internal_item(int index) const;
  ::CMsgPaintKit_Definition_Item* _internal_add_item();
  public:
  const ::CMsgPaintKit_Definition_Item& item(int index) const;
  ::CMsgPaintKit_Definition_Item* add_item();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPaintKit_Definition_Item >&
      item() const;

  // optional string loc_desctoken = 2 [(.localized) = true];
  bool has_loc_desctoken() const;
  private:
  bool _internal_has_loc_desctoken() const;
  public:
  void clear_loc_desctoken();
  const std::string& loc_desctoken() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_loc_desctoken(ArgT0&& arg0, ArgT... args);
  std::string* mutable_loc_desctoken();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_loc_desctoken();
  void set_allocated_loc_desctoken(std::string* loc_desctoken);
  private:
  const std::string& _internal_loc_desctoken() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_loc_desctoken(const std::string& value);
  std::string* _internal_mutable_loc_desctoken();
  public:

  // required .CMsgProtoDefHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::CMsgProtoDefHeader& header() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgProtoDefHeader* release_header();
  ::CMsgProtoDefHeader* mutable_header();
  void set_allocated_header(::CMsgProtoDefHeader* header);
  private:
  const ::CMsgProtoDefHeader& _internal_header() const;
  ::CMsgProtoDefHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::CMsgProtoDefHeader* header);
  ::CMsgProtoDefHeader* unsafe_arena_release_header();

  // optional .CMsgProtoDefID operation_template = 3 [(.valid_type) = DEF_TYPE_PAINTKIT_OPERATION, (.comment) = "operation template which all items in the list will use unless there\'s operation_template specified in an item_definition", (.inherit_reference_variables) = true];
  bool has_operation_template() const;
  private:
  bool _internal_has_operation_template() const;
  public:
  void clear_operation_template();
  const ::CMsgProtoDefID& operation_template() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgProtoDefID* release_operation_template();
  ::CMsgProtoDefID* mutable_operation_template();
  void set_allocated_operation_template(::CMsgProtoDefID* operation_template);
  private:
  const ::CMsgProtoDefID& _internal_operation_template() const;
  ::CMsgProtoDefID* _internal_mutable_operation_template();
  public:
  void unsafe_arena_set_allocated_operation_template(
      ::CMsgProtoDefID* operation_template);
  ::CMsgProtoDefID* unsafe_arena_release_operation_template();

  // optional .CMsgPaintKit_Definition.Item paintkit_tool = 6;
  bool has_paintkit_tool() const;
  private:
  bool _internal_has_paintkit_tool() const;
  public:
  void clear_paintkit_tool();
  const ::CMsgPaintKit_Definition_Item& paintkit_tool() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgPaintKit_Definition_Item* release_paintkit_tool();
  ::CMsgPaintKit_Definition_Item* mutable_paintkit_tool();
  void set_allocated_paintkit_tool(::CMsgPaintKit_Definition_Item* paintkit_tool);
  private:
  const ::CMsgPaintKit_Definition_Item& _internal_paintkit_tool() const;
  ::CMsgPaintKit_Definition_Item* _internal_mutable_paintkit_tool();
  public:
  void unsafe_arena_set_allocated_paintkit_tool(
      ::CMsgPaintKit_Definition_Item* paintkit_tool);
  ::CMsgPaintKit_Definition_Item* unsafe_arena_release_paintkit_tool();

  // optional .CMsgPaintKit_Definition.Item flamethrower = 7;
  bool has_flamethrower() const;
  private:
  bool _internal_has_flamethrower() const;
  public:
  void clear_flamethrower();
  const ::CMsgPaintKit_Definition_Item& flamethrower() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgPaintKit_Definition_Item* release_flamethrower();
  ::CMsgPaintKit_Definition_Item* mutable_flamethrower();
  void set_allocated_flamethrower(::CMsgPaintKit_Definition_Item* flamethrower);
  private:
  const ::CMsgPaintKit_Definition_Item& _internal_flamethrower() const;
  ::CMsgPaintKit_Definition_Item* _internal_mutable_flamethrower();
  public:
  void unsafe_arena_set_allocated_flamethrower(
      ::CMsgPaintKit_Definition_Item* flamethrower);
  ::CMsgPaintKit_Definition_Item* unsafe_arena_release_flamethrower();

  // optional .CMsgPaintKit_Definition.Item grenadelauncher = 8;
  bool has_grenadelauncher() const;
  private:
  bool _internal_has_grenadelauncher() const;
  public:
  void clear_grenadelauncher();
  const ::CMsgPaintKit_Definition_Item& grenadelauncher() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgPaintKit_Definition_Item* release_grenadelauncher();
  ::CMsgPaintKit_Definition_Item* mutable_grenadelauncher();
  void set_allocated_grenadelauncher(::CMsgPaintKit_Definition_Item* grenadelauncher);
  private:
  const ::CMsgPaintKit_Definition_Item& _internal_grenadelauncher() const;
  ::CMsgPaintKit_Definition_Item* _internal_mutable_grenadelauncher();
  public:
  void unsafe_arena_set_allocated_grenadelauncher(
      ::CMsgPaintKit_Definition_Item* grenadelauncher);
  ::CMsgPaintKit_Definition_Item* unsafe_arena_release_grenadelauncher();

  // optional .CMsgPaintKit_Definition.Item knife = 9;
  bool has_knife() const;
  private:
  bool _internal_has_knife() const;
  public:
  void clear_knife();
  const ::CMsgPaintKit_Definition_Item& knife() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgPaintKit_Definition_Item* release_knife();
  ::CMsgPaintKit_Definition_Item* mutable_knife();
  void set_allocated_knife(::CMsgPaintKit_Definition_Item* knife);
  private:
  const ::CMsgPaintKit_Definition_Item& _internal_knife() const;
  ::CMsgPaintKit_Definition_Item* _internal_mutable_knife();
  public:
  void unsafe_arena_set_allocated_knife(
      ::CMsgPaintKit_Definition_Item* knife);
  ::CMsgPaintKit_Definition_Item* unsafe_arena_release_knife();

  // optional .CMsgPaintKit_Definition.Item medigun = 10;
  bool has_medigun() const;
  private:
  bool _internal_has_medigun() const;
  public:
  void clear_medigun();
  const ::CMsgPaintKit_Definition_Item& medigun() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgPaintKit_Definition_Item* release_medigun();
  ::CMsgPaintKit_Definition_Item* mutable_medigun();
  void set_allocated_medigun(::CMsgPaintKit_Definition_Item* medigun);
  private:
  const ::CMsgPaintKit_Definition_Item& _internal_medigun() const;
  ::CMsgPaintKit_Definition_Item* _internal_mutable_medigun();
  public:
  void unsafe_arena_set_allocated_medigun(
      ::CMsgPaintKit_Definition_Item* medigun);
  ::CMsgPaintKit_Definition_Item* unsafe_arena_release_medigun();

  // optional .CMsgPaintKit_Definition.Item minigun = 11;
  bool has_minigun() const;
  private:
  bool _internal_has_minigun() const;
  public:
  void clear_minigun();
  const ::CMsgPaintKit_Definition_Item& minigun() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgPaintKit_Definition_Item* release_minigun();
  ::CMsgPaintKit_Definition_Item* mutable_minigun();
  void set_allocated_minigun(::CMsgPaintKit_Definition_Item* minigun);
  private:
  const ::CMsgPaintKit_Definition_Item& _internal_minigun() const;
  ::CMsgPaintKit_Definition_Item* _internal_mutable_minigun();
  public:
  void unsafe_arena_set_allocated_minigun(
      ::CMsgPaintKit_Definition_Item* minigun);
  ::CMsgPaintKit_Definition_Item* unsafe_arena_release_minigun();

  // optional .CMsgPaintKit_Definition.Item pistol = 12;
  bool has_pistol() const;
  private:
  bool _internal_has_pistol() const;
  public:
  void clear_pistol();
  const ::CMsgPaintKit_Definition_Item& pistol() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgPaintKit_Definition_Item* release_pistol();
  ::CMsgPaintKit_Definition_Item* mutable_pistol();
  void set_allocated_pistol(::CMsgPaintKit_Definition_Item* pistol);
  private:
  const ::CMsgPaintKit_Definition_Item& _internal_pistol() const;
  ::CMsgPaintKit_Definition_Item* _internal_mutable_pistol();
  public:
  void unsafe_arena_set_allocated_pistol(
      ::CMsgPaintKit_Definition_Item* pistol);
  ::CMsgPaintKit_Definition_Item* unsafe_arena_release_pistol();

  // optional .CMsgPaintKit_Definition.Item revolver = 13;
  bool has_revolver() const;
  private:
  bool _internal_has_revolver() const;
  public:
  void clear_revolver();
  const ::CMsgPaintKit_Definition_Item& revolver() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgPaintKit_Definition_Item* release_revolver();
  ::CMsgPaintKit_Definition_Item* mutable_revolver();
  void set_allocated_revolver(::CMsgPaintKit_Definition_Item* revolver);
  private:
  const ::CMsgPaintKit_Definition_Item& _internal_revolver() const;
  ::CMsgPaintKit_Definition_Item* _internal_mutable_revolver();
  public:
  void unsafe_arena_set_allocated_revolver(
      ::CMsgPaintKit_Definition_Item* revolver);
  ::CMsgPaintKit_Definition_Item* unsafe_arena_release_revolver();

  // optional .CMsgPaintKit_Definition.Item rocketlauncher = 14;
  bool has_rocketlauncher() const;
  private:
  bool _internal_has_rocketlauncher() const;
  public:
  void clear_rocketlauncher();
  const ::CMsgPaintKit_Definition_Item& rocketlauncher() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgPaintKit_Definition_Item* release_rocketlauncher();
  ::CMsgPaintKit_Definition_Item* mutable_rocketlauncher();
  void set_allocated_rocketlauncher(::CMsgPaintKit_Definition_Item* rocketlauncher);
  private:
  const ::CMsgPaintKit_Definition_Item& _internal_rocketlauncher() const;
  ::CMsgPaintKit_Definition_Item* _internal_mutable_rocketlauncher();
  public:
  void unsafe_arena_set_allocated_rocketlauncher(
      ::CMsgPaintKit_Definition_Item* rocketlauncher);
  ::CMsgPaintKit_Definition_Item* unsafe_arena_release_rocketlauncher();

  // optional .CMsgPaintKit_Definition.Item scattergun = 15;
  bool has_scattergun() const;
  private:
  bool _internal_has_scattergun() const;
  public:
  void clear_scattergun();
  const ::CMsgPaintKit_Definition_Item& scattergun() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgPaintKit_Definition_Item* release_scattergun();
  ::CMsgPaintKit_Definition_Item* mutable_scattergun();
  void set_allocated_scattergun(::CMsgPaintKit_Definition_Item* scattergun);
  private:
  const ::CMsgPaintKit_Definition_Item& _internal_scattergun() const;
  ::CMsgPaintKit_Definition_Item* _internal_mutable_scattergun();
  public:
  void unsafe_arena_set_allocated_scattergun(
      ::CMsgPaintKit_Definition_Item* scattergun);
  ::CMsgPaintKit_Definition_Item* unsafe_arena_release_scattergun();

  // optional .CMsgPaintKit_Definition.Item shotgun = 16;
  bool has_shotgun() const;
  private:
  bool _internal_has_shotgun() const;
  public:
  void clear_shotgun();
  const ::CMsgPaintKit_Definition_Item& shotgun() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgPaintKit_Definition_Item* release_shotgun();
  ::CMsgPaintKit_Definition_Item* mutable_shotgun();
  void set_allocated_shotgun(::CMsgPaintKit_Definition_Item* shotgun);
  private:
  const ::CMsgPaintKit_Definition_Item& _internal_shotgun() const;
  ::CMsgPaintKit_Definition_Item* _internal_mutable_shotgun();
  public:
  void unsafe_arena_set_allocated_shotgun(
      ::CMsgPaintKit_Definition_Item* shotgun);
  ::CMsgPaintKit_Definition_Item* unsafe_arena_release_shotgun();

  // optional .CMsgPaintKit_Definition.Item smg = 17;
  bool has_smg() const;
  private:
  bool _internal_has_smg() const;
  public:
  void clear_smg();
  const ::CMsgPaintKit_Definition_Item& smg() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgPaintKit_Definition_Item* release_smg();
  ::CMsgPaintKit_Definition_Item* mutable_smg();
  void set_allocated_smg(::CMsgPaintKit_Definition_Item* smg);
  private:
  const ::CMsgPaintKit_Definition_Item& _internal_smg() const;
  ::CMsgPaintKit_Definition_Item* _internal_mutable_smg();
  public:
  void unsafe_arena_set_allocated_smg(
      ::CMsgPaintKit_Definition_Item* smg);
  ::CMsgPaintKit_Definition_Item* unsafe_arena_release_smg();

  // optional .CMsgPaintKit_Definition.Item sniperrifle = 18;
  bool has_sniperrifle() const;
  private:
  bool _internal_has_sniperrifle() const;
  public:
  void clear_sniperrifle();
  const ::CMsgPaintKit_Definition_Item& sniperrifle() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgPaintKit_Definition_Item* release_sniperrifle();
  ::CMsgPaintKit_Definition_Item* mutable_sniperrifle();
  void set_allocated_sniperrifle(::CMsgPaintKit_Definition_Item* sniperrifle);
  private:
  const ::CMsgPaintKit_Definition_Item& _internal_sniperrifle() const;
  ::CMsgPaintKit_Definition_Item* _internal_mutable_sniperrifle();
  public:
  void unsafe_arena_set_allocated_sniperrifle(
      ::CMsgPaintKit_Definition_Item* sniperrifle);
  ::CMsgPaintKit_Definition_Item* unsafe_arena_release_sniperrifle();

  // optional .CMsgPaintKit_Definition.Item stickybomb_launcher = 19;
  bool has_stickybomb_launcher() const;
  private:
  bool _internal_has_stickybomb_launcher() const;
  public:
  void clear_stickybomb_launcher();
  const ::CMsgPaintKit_Definition_Item& stickybomb_launcher() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgPaintKit_Definition_Item* release_stickybomb_launcher();
  ::CMsgPaintKit_Definition_Item* mutable_stickybomb_launcher();
  void set_allocated_stickybomb_launcher(::CMsgPaintKit_Definition_Item* stickybomb_launcher);
  private:
  const ::CMsgPaintKit_Definition_Item& _internal_stickybomb_launcher() const;
  ::CMsgPaintKit_Definition_Item* _internal_mutable_stickybomb_launcher();
  public:
  void unsafe_arena_set_allocated_stickybomb_launcher(
      ::CMsgPaintKit_Definition_Item* stickybomb_launcher);
  ::CMsgPaintKit_Definition_Item* unsafe_arena_release_stickybomb_launcher();

  // optional .CMsgPaintKit_Definition.Item ubersaw = 20;
  bool has_ubersaw() const;
  private:
  bool _internal_has_ubersaw() const;
  public:
  void clear_ubersaw();
  const ::CMsgPaintKit_Definition_Item& ubersaw() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgPaintKit_Definition_Item* release_ubersaw();
  ::CMsgPaintKit_Definition_Item* mutable_ubersaw();
  void set_allocated_ubersaw(::CMsgPaintKit_Definition_Item* ubersaw);
  private:
  const ::CMsgPaintKit_Definition_Item& _internal_ubersaw() const;
  ::CMsgPaintKit_Definition_Item* _internal_mutable_ubersaw();
  public:
  void unsafe_arena_set_allocated_ubersaw(
      ::CMsgPaintKit_Definition_Item* ubersaw);
  ::CMsgPaintKit_Definition_Item* unsafe_arena_release_ubersaw();

  // optional .CMsgPaintKit_Definition.Item wrench = 21;
  bool has_wrench() const;
  private:
  bool _internal_has_wrench() const;
  public:
  void clear_wrench();
  const ::CMsgPaintKit_Definition_Item& wrench() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgPaintKit_Definition_Item* release_wrench();
  ::CMsgPaintKit_Definition_Item* mutable_wrench();
  void set_allocated_wrench(::CMsgPaintKit_Definition_Item* wrench);
  private:
  const ::CMsgPaintKit_Definition_Item& _internal_wrench() const;
  ::CMsgPaintKit_Definition_Item* _internal_mutable_wrench();
  public:
  void unsafe_arena_set_allocated_wrench(
      ::CMsgPaintKit_Definition_Item* wrench);
  ::CMsgPaintKit_Definition_Item* unsafe_arena_release_wrench();

  // optional .CMsgPaintKit_Definition.Item amputator = 22;
  bool has_amputator() const;
  private:
  bool _internal_has_amputator() const;
  public:
  void clear_amputator();
  const ::CMsgPaintKit_Definition_Item& amputator() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgPaintKit_Definition_Item* release_amputator();
  ::CMsgPaintKit_Definition_Item* mutable_amputator();
  void set_allocated_amputator(::CMsgPaintKit_Definition_Item* amputator);
  private:
  const ::CMsgPaintKit_Definition_Item& _internal_amputator() const;
  ::CMsgPaintKit_Definition_Item* _internal_mutable_amputator();
  public:
  void unsafe_arena_set_allocated_amputator(
      ::CMsgPaintKit_Definition_Item* amputator);
  ::CMsgPaintKit_Definition_Item* unsafe_arena_release_amputator();

  // optional .CMsgPaintKit_Definition.Item atom_launcher = 23;
  bool has_atom_launcher() const;
  private:
  bool _internal_has_atom_launcher() const;
  public:
  void clear_atom_launcher();
  const ::CMsgPaintKit_Definition_Item& atom_launcher() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgPaintKit_Definition_Item* release_atom_launcher();
  ::CMsgPaintKit_Definition_Item* mutable_atom_launcher();
  void set_allocated_atom_launcher(::CMsgPaintKit_Definition_Item* atom_launcher);
  private:
  const ::CMsgPaintKit_Definition_Item& _internal_atom_launcher() const;
  ::CMsgPaintKit_Definition_Item* _internal_mutable_atom_launcher();
  public:
  void unsafe_arena_set_allocated_atom_launcher(
      ::CMsgPaintKit_Definition_Item* atom_launcher);
  ::CMsgPaintKit_Definition_Item* unsafe_arena_release_atom_launcher();

  // optional .CMsgPaintKit_Definition.Item back_scratcher = 24;
  bool has_back_scratcher() const;
  private:
  bool _internal_has_back_scratcher() const;
  public:
  void clear_back_scratcher();
  const ::CMsgPaintKit_Definition_Item& back_scratcher() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgPaintKit_Definition_Item* release_back_scratcher();
  ::CMsgPaintKit_Definition_Item* mutable_back_scratcher();
  void set_allocated_back_scratcher(::CMsgPaintKit_Definition_Item* back_scratcher);
  private:
  const ::CMsgPaintKit_Definition_Item& _internal_back_scratcher() const;
  ::CMsgPaintKit_Definition_Item* _internal_mutable_back_scratcher();
  public:
  void unsafe_arena_set_allocated_back_scratcher(
      ::CMsgPaintKit_Definition_Item* back_scratcher);
  ::CMsgPaintKit_Definition_Item* unsafe_arena_release_back_scratcher();

  // optional .CMsgPaintKit_Definition.Item battleaxe = 25;
  bool has_battleaxe() const;
  private:
  bool _internal_has_battleaxe() const;
  public:
  void clear_battleaxe();
  const ::CMsgPaintKit_Definition_Item& battleaxe() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgPaintKit_Definition_Item* release_battleaxe();
  ::CMsgPaintKit_Definition_Item* mutable_battleaxe();
  void set_allocated_battleaxe(::CMsgPaintKit_Definition_Item* battleaxe);
  private:
  const ::CMsgPaintKit_Definition_Item& _internal_battleaxe() const;
  ::CMsgPaintKit_Definition_Item* _internal_mutable_battleaxe();
  public:
  void unsafe_arena_set_allocated_battleaxe(
      ::CMsgPaintKit_Definition_Item* battleaxe);
  ::CMsgPaintKit_Definition_Item* unsafe_arena_release_battleaxe();

  // optional .CMsgPaintKit_Definition.Item bazaar_sniper = 26;
  bool has_bazaar_sniper() const;
  private:
  bool _internal_has_bazaar_sniper() const;
  public:
  void clear_bazaar_sniper();
  const ::CMsgPaintKit_Definition_Item& bazaar_sniper() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgPaintKit_Definition_Item* release_bazaar_sniper();
  ::CMsgPaintKit_Definition_Item* mutable_bazaar_sniper();
  void set_allocated_bazaar_sniper(::CMsgPaintKit_Definition_Item* bazaar_sniper);
  private:
  const ::CMsgPaintKit_Definition_Item& _internal_bazaar_sniper() const;
  ::CMsgPaintKit_Definition_Item* _internal_mutable_bazaar_sniper();
  public:
  void unsafe_arena_set_allocated_bazaar_sniper(
      ::CMsgPaintKit_Definition_Item* bazaar_sniper);
  ::CMsgPaintKit_Definition_Item* unsafe_arena_release_bazaar_sniper();

  // optional .CMsgPaintKit_Definition.Item blackbox = 27;
  bool has_blackbox() const;
  private:
  bool _internal_has_blackbox() const;
  public:
  void clear_blackbox();
  const ::CMsgPaintKit_Definition_Item& blackbox() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgPaintKit_Definition_Item* release_blackbox();
  ::CMsgPaintKit_Definition_Item* mutable_blackbox();
  void set_allocated_blackbox(::CMsgPaintKit_Definition_Item* blackbox);
  private:
  const ::CMsgPaintKit_Definition_Item& _internal_blackbox() const;
  ::CMsgPaintKit_Definition_Item* _internal_mutable_blackbox();
  public:
  void unsafe_arena_set_allocated_blackbox(
      ::CMsgPaintKit_Definition_Item* blackbox);
  ::CMsgPaintKit_Definition_Item* unsafe_arena_release_blackbox();

  // optional .CMsgPaintKit_Definition.Item claidheamohmor = 28;
  bool has_claidheamohmor() const;
  private:
  bool _internal_has_claidheamohmor() const;
  public:
  void clear_claidheamohmor();
  const ::CMsgPaintKit_Definition_Item& claidheamohmor() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgPaintKit_Definition_Item* release_claidheamohmor();
  ::CMsgPaintKit_Definition_Item* mutable_claidheamohmor();
  void set_allocated_claidheamohmor(::CMsgPaintKit_Definition_Item* claidheamohmor);
  private:
  const ::CMsgPaintKit_Definition_Item& _internal_claidheamohmor() const;
  ::CMsgPaintKit_Definition_Item* _internal_mutable_claidheamohmor();
  public:
  void unsafe_arena_set_allocated_claidheamohmor(
      ::CMsgPaintKit_Definition_Item* claidheamohmor);
  ::CMsgPaintKit_Definition_Item* unsafe_arena_release_claidheamohmor();

  // optional .CMsgPaintKit_Definition.Item crusaders_crossbow = 29;
  bool has_crusaders_crossbow() const;
  private:
  bool _internal_has_crusaders_crossbow() const;
  public:
  void clear_crusaders_crossbow();
  const ::CMsgPaintKit_Definition_Item& crusaders_crossbow() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgPaintKit_Definition_Item* release_crusaders_crossbow();
  ::CMsgPaintKit_Definition_Item* mutable_crusaders_crossbow();
  void set_allocated_crusaders_crossbow(::CMsgPaintKit_Definition_Item* crusaders_crossbow);
  private:
  const ::CMsgPaintKit_Definition_Item& _internal_crusaders_crossbow() const;
  ::CMsgPaintKit_Definition_Item* _internal_mutable_crusaders_crossbow();
  public:
  void unsafe_arena_set_allocated_crusaders_crossbow(
      ::CMsgPaintKit_Definition_Item* crusaders_crossbow);
  ::CMsgPaintKit_Definition_Item* unsafe_arena_release_crusaders_crossbow();

  // optional .CMsgPaintKit_Definition.Item degreaser = 30;
  bool has_degreaser() const;
  private:
  bool _internal_has_degreaser() const;
  public:
  void clear_degreaser();
  const ::CMsgPaintKit_Definition_Item& degreaser() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgPaintKit_Definition_Item* release_degreaser();
  ::CMsgPaintKit_Definition_Item* mutable_degreaser();
  void set_allocated_degreaser(::CMsgPaintKit_Definition_Item* degreaser);
  private:
  const ::CMsgPaintKit_Definition_Item& _internal_degreaser() const;
  ::CMsgPaintKit_Definition_Item* _internal_mutable_degreaser();
  public:
  void unsafe_arena_set_allocated_degreaser(
      ::CMsgPaintKit_Definition_Item* degreaser);
  ::CMsgPaintKit_Definition_Item* unsafe_arena_release_degreaser();

  // optional .CMsgPaintKit_Definition.Item demo_cannon = 31;
  bool has_demo_cannon() const;
  private:
  bool _internal_has_demo_cannon() const;
  public:
  void clear_demo_cannon();
  const ::CMsgPaintKit_Definition_Item& demo_cannon() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgPaintKit_Definition_Item* release_demo_cannon();
  ::CMsgPaintKit_Definition_Item* mutable_demo_cannon();
  void set_allocated_demo_cannon(::CMsgPaintKit_Definition_Item* demo_cannon);
  private:
  const ::CMsgPaintKit_Definition_Item& _internal_demo_cannon() const;
  ::CMsgPaintKit_Definition_Item* _internal_mutable_demo_cannon();
  public:
  void unsafe_arena_set_allocated_demo_cannon(
      ::CMsgPaintKit_Definition_Item* demo_cannon);
  ::CMsgPaintKit_Definition_Item* unsafe_arena_release_demo_cannon();

  // optional .CMsgPaintKit_Definition.Item demo_sultan_sword = 32;
  bool has_demo_sultan_sword() const;
  private:
  bool _internal_has_demo_sultan_sword() const;
  public:
  void clear_demo_sultan_sword();
  const ::CMsgPaintKit_Definition_Item& demo_sultan_sword() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgPaintKit_Definition_Item* release_demo_sultan_sword();
  ::CMsgPaintKit_Definition_Item* mutable_demo_sultan_sword();
  void set_allocated_demo_sultan_sword(::CMsgPaintKit_Definition_Item* demo_sultan_sword);
  private:
  const ::CMsgPaintKit_Definition_Item& _internal_demo_sultan_sword() const;
  ::CMsgPaintKit_Definition_Item* _internal_mutable_demo_sultan_sword();
  public:
  void unsafe_arena_set_allocated_demo_sultan_sword(
      ::CMsgPaintKit_Definition_Item* demo_sultan_sword);
  ::CMsgPaintKit_Definition_Item* unsafe_arena_release_demo_sultan_sword();

  // optional .CMsgPaintKit_Definition.Item detonator = 33;
  bool has_detonator() const;
  private:
  bool _internal_has_detonator() const;
  public:
  void clear_detonator();
  const ::CMsgPaintKit_Definition_Item& detonator() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgPaintKit_Definition_Item* release_detonator();
  ::CMsgPaintKit_Definition_Item* mutable_detonator();
  void set_allocated_detonator(::CMsgPaintKit_Definition_Item* detonator);
  private:
  const ::CMsgPaintKit_Definition_Item& _internal_detonator() const;
  ::CMsgPaintKit_Definition_Item* _internal_mutable_detonator();
  public:
  void unsafe_arena_set_allocated_detonator(
      ::CMsgPaintKit_Definition_Item* detonator);
  ::CMsgPaintKit_Definition_Item* unsafe_arena_release_detonator();

  // optional .CMsgPaintKit_Definition.Item gatling_gun = 34;
  bool has_gatling_gun() const;
  private:
  bool _internal_has_gatling_gun() const;
  public:
  void clear_gatling_gun();
  const ::CMsgPaintKit_Definition_Item& gatling_gun() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgPaintKit_Definition_Item* release_gatling_gun();
  ::CMsgPaintKit_Definition_Item* mutable_gatling_gun();
  void set_allocated_gatling_gun(::CMsgPaintKit_Definition_Item* gatling_gun);
  private:
  const ::CMsgPaintKit_Definition_Item& _internal_gatling_gun() const;
  ::CMsgPaintKit_Definition_Item* _internal_mutable_gatling_gun();
  public:
  void unsafe_arena_set_allocated_gatling_gun(
      ::CMsgPaintKit_Definition_Item* gatling_gun);
  ::CMsgPaintKit_Definition_Item* unsafe_arena_release_gatling_gun();

  // optional .CMsgPaintKit_Definition.Item holymackerel = 35;
  bool has_holymackerel() const;
  private:
  bool _internal_has_holymackerel() const;
  public:
  void clear_holymackerel();
  const ::CMsgPaintKit_Definition_Item& holymackerel() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgPaintKit_Definition_Item* release_holymackerel();
  ::CMsgPaintKit_Definition_Item* mutable_holymackerel();
  void set_allocated_holymackerel(::CMsgPaintKit_Definition_Item* holymackerel);
  private:
  const ::CMsgPaintKit_Definition_Item& _internal_holymackerel() const;
  ::CMsgPaintKit_Definition_Item* _internal_mutable_holymackerel();
  public:
  void unsafe_arena_set_allocated_holymackerel(
      ::CMsgPaintKit_Definition_Item* holymackerel);
  ::CMsgPaintKit_Definition_Item* unsafe_arena_release_holymackerel();

  // optional .CMsgPaintKit_Definition.Item jag = 36;
  bool has_jag() const;
  private:
  bool _internal_has_jag() const;
  public:
  void clear_jag();
  const ::CMsgPaintKit_Definition_Item& jag() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgPaintKit_Definition_Item* release_jag();
  ::CMsgPaintKit_Definition_Item* mutable_jag();
  void set_allocated_jag(::CMsgPaintKit_Definition_Item* jag);
  private:
  const ::CMsgPaintKit_Definition_Item& _internal_jag() const;
  ::CMsgPaintKit_Definition_Item* _internal_mutable_jag();
  public:
  void unsafe_arena_set_allocated_jag(
      ::CMsgPaintKit_Definition_Item* jag);
  ::CMsgPaintKit_Definition_Item* unsafe_arena_release_jag();

  // optional .CMsgPaintKit_Definition.Item lochnload = 37;
  bool has_lochnload() const;
  private:
  bool _internal_has_lochnload() const;
  public:
  void clear_lochnload();
  const ::CMsgPaintKit_Definition_Item& lochnload() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgPaintKit_Definition_Item* release_lochnload();
  ::CMsgPaintKit_Definition_Item* mutable_lochnload();
  void set_allocated_lochnload(::CMsgPaintKit_Definition_Item* lochnload);
  private:
  const ::CMsgPaintKit_Definition_Item& _internal_lochnload() const;
  ::CMsgPaintKit_Definition_Item* _internal_mutable_lochnload();
  public:
  void unsafe_arena_set_allocated_lochnload(
      ::CMsgPaintKit_Definition_Item* lochnload);
  ::CMsgPaintKit_Definition_Item* unsafe_arena_release_lochnload();

  // optional .CMsgPaintKit_Definition.Item powerjack = 38;
  bool has_powerjack() const;
  private:
  bool _internal_has_powerjack() const;
  public:
  void clear_powerjack();
  const ::CMsgPaintKit_Definition_Item& powerjack() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgPaintKit_Definition_Item* release_powerjack();
  ::CMsgPaintKit_Definition_Item* mutable_powerjack();
  void set_allocated_powerjack(::CMsgPaintKit_Definition_Item* powerjack);
  private:
  const ::CMsgPaintKit_Definition_Item& _internal_powerjack() const;
  ::CMsgPaintKit_Definition_Item* _internal_mutable_powerjack();
  public:
  void unsafe_arena_set_allocated_powerjack(
      ::CMsgPaintKit_Definition_Item* powerjack);
  ::CMsgPaintKit_Definition_Item* unsafe_arena_release_powerjack();

  // optional .CMsgPaintKit_Definition.Item quadball = 39;
  bool has_quadball() const;
  private:
  bool _internal_has_quadball() const;
  public:
  void clear_quadball();
  const ::CMsgPaintKit_Definition_Item& quadball() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgPaintKit_Definition_Item* release_quadball();
  ::CMsgPaintKit_Definition_Item* mutable_quadball();
  void set_allocated_quadball(::CMsgPaintKit_Definition_Item* quadball);
  private:
  const ::CMsgPaintKit_Definition_Item& _internal_quadball() const;
  ::CMsgPaintKit_Definition_Item* _internal_mutable_quadball();
  public:
  void unsafe_arena_set_allocated_quadball(
      ::CMsgPaintKit_Definition_Item* quadball);
  ::CMsgPaintKit_Definition_Item* unsafe_arena_release_quadball();

  // optional .CMsgPaintKit_Definition.Item reserve_shooter = 40;
  bool has_reserve_shooter() const;
  private:
  bool _internal_has_reserve_shooter() const;
  public:
  void clear_reserve_shooter();
  const ::CMsgPaintKit_Definition_Item& reserve_shooter() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgPaintKit_Definition_Item* release_reserve_shooter();
  ::CMsgPaintKit_Definition_Item* mutable_reserve_shooter();
  void set_allocated_reserve_shooter(::CMsgPaintKit_Definition_Item* reserve_shooter);
  private:
  const ::CMsgPaintKit_Definition_Item& _internal_reserve_shooter() const;
  ::CMsgPaintKit_Definition_Item* _internal_mutable_reserve_shooter();
  public:
  void unsafe_arena_set_allocated_reserve_shooter(
      ::CMsgPaintKit_Definition_Item* reserve_shooter);
  ::CMsgPaintKit_Definition_Item* unsafe_arena_release_reserve_shooter();

  // optional .CMsgPaintKit_Definition.Item riding_crop = 41;
  bool has_riding_crop() const;
  private:
  bool _internal_has_riding_crop() const;
  public:
  void clear_riding_crop();
  const ::CMsgPaintKit_Definition_Item& riding_crop() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgPaintKit_Definition_Item* release_riding_crop();
  ::CMsgPaintKit_Definition_Item* mutable_riding_crop();
  void set_allocated_riding_crop(::CMsgPaintKit_Definition_Item* riding_crop);
  private:
  const ::CMsgPaintKit_Definition_Item& _internal_riding_crop() const;
  ::CMsgPaintKit_Definition_Item* _internal_mutable_riding_crop();
  public:
  void unsafe_arena_set_allocated_riding_crop(
      ::CMsgPaintKit_Definition_Item* riding_crop);
  ::CMsgPaintKit_Definition_Item* unsafe_arena_release_riding_crop();

  // optional .CMsgPaintKit_Definition.Item russian_riot = 42;
  bool has_russian_riot() const;
  private:
  bool _internal_has_russian_riot() const;
  public:
  void clear_russian_riot();
  const ::CMsgPaintKit_Definition_Item& russian_riot() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgPaintKit_Definition_Item* release_russian_riot();
  ::CMsgPaintKit_Definition_Item* mutable_russian_riot();
  void set_allocated_russian_riot(::CMsgPaintKit_Definition_Item* russian_riot);
  private:
  const ::CMsgPaintKit_Definition_Item& _internal_russian_riot() const;
  ::CMsgPaintKit_Definition_Item* _internal_mutable_russian_riot();
  public:
  void unsafe_arena_set_allocated_russian_riot(
      ::CMsgPaintKit_Definition_Item* russian_riot);
  ::CMsgPaintKit_Definition_Item* unsafe_arena_release_russian_riot();

  // optional .CMsgPaintKit_Definition.Item scimitar = 43;
  bool has_scimitar() const;
  private:
  bool _internal_has_scimitar() const;
  public:
  void clear_scimitar();
  const ::CMsgPaintKit_Definition_Item& scimitar() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgPaintKit_Definition_Item* release_scimitar();
  ::CMsgPaintKit_Definition_Item* mutable_scimitar();
  void set_allocated_scimitar(::CMsgPaintKit_Definition_Item* scimitar);
  private:
  const ::CMsgPaintKit_Definition_Item& _internal_scimitar() const;
  ::CMsgPaintKit_Definition_Item* _internal_mutable_scimitar();
  public:
  void unsafe_arena_set_allocated_scimitar(
      ::CMsgPaintKit_Definition_Item* scimitar);
  ::CMsgPaintKit_Definition_Item* unsafe_arena_release_scimitar();

  // optional .CMsgPaintKit_Definition.Item scorch_shot = 44;
  bool has_scorch_shot() const;
  private:
  bool _internal_has_scorch_shot() const;
  public:
  void clear_scorch_shot();
  const ::CMsgPaintKit_Definition_Item& scorch_shot() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgPaintKit_Definition_Item* release_scorch_shot();
  ::CMsgPaintKit_Definition_Item* mutable_scorch_shot();
  void set_allocated_scorch_shot(::CMsgPaintKit_Definition_Item* scorch_shot);
  private:
  const ::CMsgPaintKit_Definition_Item& _internal_scorch_shot() const;
  ::CMsgPaintKit_Definition_Item* _internal_mutable_scorch_shot();
  public:
  void unsafe_arena_set_allocated_scorch_shot(
      ::CMsgPaintKit_Definition_Item* scorch_shot);
  ::CMsgPaintKit_Definition_Item* unsafe_arena_release_scorch_shot();

  // optional .CMsgPaintKit_Definition.Item shortstop = 45;
  bool has_shortstop() const;
  private:
  bool _internal_has_shortstop() const;
  public:
  void clear_shortstop();
  const ::CMsgPaintKit_Definition_Item& shortstop() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgPaintKit_Definition_Item* release_shortstop();
  ::CMsgPaintKit_Definition_Item* mutable_shortstop();
  void set_allocated_shortstop(::CMsgPaintKit_Definition_Item* shortstop);
  private:
  const ::CMsgPaintKit_Definition_Item& _internal_shortstop() const;
  ::CMsgPaintKit_Definition_Item* _internal_mutable_shortstop();
  public:
  void unsafe_arena_set_allocated_shortstop(
      ::CMsgPaintKit_Definition_Item* shortstop);
  ::CMsgPaintKit_Definition_Item* unsafe_arena_release_shortstop();

  // optional .CMsgPaintKit_Definition.Item soda_popper = 46;
  bool has_soda_popper() const;
  private:
  bool _internal_has_soda_popper() const;
  public:
  void clear_soda_popper();
  const ::CMsgPaintKit_Definition_Item& soda_popper() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgPaintKit_Definition_Item* release_soda_popper();
  ::CMsgPaintKit_Definition_Item* mutable_soda_popper();
  void set_allocated_soda_popper(::CMsgPaintKit_Definition_Item* soda_popper);
  private:
  const ::CMsgPaintKit_Definition_Item& _internal_soda_popper() const;
  ::CMsgPaintKit_Definition_Item* _internal_mutable_soda_popper();
  public:
  void unsafe_arena_set_allocated_soda_popper(
      ::CMsgPaintKit_Definition_Item* soda_popper);
  ::CMsgPaintKit_Definition_Item* unsafe_arena_release_soda_popper();

  // optional .CMsgPaintKit_Definition.Item tele_shotgun = 47;
  bool has_tele_shotgun() const;
  private:
  bool _internal_has_tele_shotgun() const;
  public:
  void clear_tele_shotgun();
  const ::CMsgPaintKit_Definition_Item& tele_shotgun() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgPaintKit_Definition_Item* release_tele_shotgun();
  ::CMsgPaintKit_Definition_Item* mutable_tele_shotgun();
  void set_allocated_tele_shotgun(::CMsgPaintKit_Definition_Item* tele_shotgun);
  private:
  const ::CMsgPaintKit_Definition_Item& _internal_tele_shotgun() const;
  ::CMsgPaintKit_Definition_Item* _internal_mutable_tele_shotgun();
  public:
  void unsafe_arena_set_allocated_tele_shotgun(
      ::CMsgPaintKit_Definition_Item* tele_shotgun);
  ::CMsgPaintKit_Definition_Item* unsafe_arena_release_tele_shotgun();

  // optional .CMsgPaintKit_Definition.Item tomislav = 48;
  bool has_tomislav() const;
  private:
  bool _internal_has_tomislav() const;
  public:
  void clear_tomislav();
  const ::CMsgPaintKit_Definition_Item& tomislav() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgPaintKit_Definition_Item* release_tomislav();
  ::CMsgPaintKit_Definition_Item* mutable_tomislav();
  void set_allocated_tomislav(::CMsgPaintKit_Definition_Item* tomislav);
  private:
  const ::CMsgPaintKit_Definition_Item& _internal_tomislav() const;
  ::CMsgPaintKit_Definition_Item* _internal_mutable_tomislav();
  public:
  void unsafe_arena_set_allocated_tomislav(
      ::CMsgPaintKit_Definition_Item* tomislav);
  ::CMsgPaintKit_Definition_Item* unsafe_arena_release_tomislav();

  // optional .CMsgPaintKit_Definition.Item trenchgun = 49;
  bool has_trenchgun() const;
  private:
  bool _internal_has_trenchgun() const;
  public:
  void clear_trenchgun();
  const ::CMsgPaintKit_Definition_Item& trenchgun() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgPaintKit_Definition_Item* release_trenchgun();
  ::CMsgPaintKit_Definition_Item* mutable_trenchgun();
  void set_allocated_trenchgun(::CMsgPaintKit_Definition_Item* trenchgun);
  private:
  const ::CMsgPaintKit_Definition_Item& _internal_trenchgun() const;
  ::CMsgPaintKit_Definition_Item* _internal_mutable_trenchgun();
  public:
  void unsafe_arena_set_allocated_trenchgun(
      ::CMsgPaintKit_Definition_Item* trenchgun);
  ::CMsgPaintKit_Definition_Item* unsafe_arena_release_trenchgun();

  // optional .CMsgPaintKit_Definition.Item winger_pistol = 50;
  bool has_winger_pistol() const;
  private:
  bool _internal_has_winger_pistol() const;
  public:
  void clear_winger_pistol();
  const ::CMsgPaintKit_Definition_Item& winger_pistol() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgPaintKit_Definition_Item* release_winger_pistol();
  ::CMsgPaintKit_Definition_Item* mutable_winger_pistol();
  void set_allocated_winger_pistol(::CMsgPaintKit_Definition_Item* winger_pistol);
  private:
  const ::CMsgPaintKit_Definition_Item& _internal_winger_pistol() const;
  ::CMsgPaintKit_Definition_Item* _internal_mutable_winger_pistol();
  public:
  void unsafe_arena_set_allocated_winger_pistol(
      ::CMsgPaintKit_Definition_Item* winger_pistol);
  ::CMsgPaintKit_Definition_Item* unsafe_arena_release_winger_pistol();

  // optional bool has_team_textures = 4;
  bool has_has_team_textures() const;
  private:
  bool _internal_has_has_team_textures() const;
  public:
  void clear_has_team_textures();
  bool has_team_textures() const;
  void set_has_team_textures(bool value);
  private:
  bool _internal_has_team_textures() const;
  void _internal_set_has_team_textures(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgPaintKit_Definition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPaintKit_Definition_Item > item_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr loc_desctoken_;
  ::CMsgProtoDefHeader* header_;
  ::CMsgProtoDefID* operation_template_;
  ::CMsgPaintKit_Definition_Item* paintkit_tool_;
  ::CMsgPaintKit_Definition_Item* flamethrower_;
  ::CMsgPaintKit_Definition_Item* grenadelauncher_;
  ::CMsgPaintKit_Definition_Item* knife_;
  ::CMsgPaintKit_Definition_Item* medigun_;
  ::CMsgPaintKit_Definition_Item* minigun_;
  ::CMsgPaintKit_Definition_Item* pistol_;
  ::CMsgPaintKit_Definition_Item* revolver_;
  ::CMsgPaintKit_Definition_Item* rocketlauncher_;
  ::CMsgPaintKit_Definition_Item* scattergun_;
  ::CMsgPaintKit_Definition_Item* shotgun_;
  ::CMsgPaintKit_Definition_Item* smg_;
  ::CMsgPaintKit_Definition_Item* sniperrifle_;
  ::CMsgPaintKit_Definition_Item* stickybomb_launcher_;
  ::CMsgPaintKit_Definition_Item* ubersaw_;
  ::CMsgPaintKit_Definition_Item* wrench_;
  ::CMsgPaintKit_Definition_Item* amputator_;
  ::CMsgPaintKit_Definition_Item* atom_launcher_;
  ::CMsgPaintKit_Definition_Item* back_scratcher_;
  ::CMsgPaintKit_Definition_Item* battleaxe_;
  ::CMsgPaintKit_Definition_Item* bazaar_sniper_;
  ::CMsgPaintKit_Definition_Item* blackbox_;
  ::CMsgPaintKit_Definition_Item* claidheamohmor_;
  ::CMsgPaintKit_Definition_Item* crusaders_crossbow_;
  ::CMsgPaintKit_Definition_Item* degreaser_;
  ::CMsgPaintKit_Definition_Item* demo_cannon_;
  ::CMsgPaintKit_Definition_Item* demo_sultan_sword_;
  ::CMsgPaintKit_Definition_Item* detonator_;
  ::CMsgPaintKit_Definition_Item* gatling_gun_;
  ::CMsgPaintKit_Definition_Item* holymackerel_;
  ::CMsgPaintKit_Definition_Item* jag_;
  ::CMsgPaintKit_Definition_Item* lochnload_;
  ::CMsgPaintKit_Definition_Item* powerjack_;
  ::CMsgPaintKit_Definition_Item* quadball_;
  ::CMsgPaintKit_Definition_Item* reserve_shooter_;
  ::CMsgPaintKit_Definition_Item* riding_crop_;
  ::CMsgPaintKit_Definition_Item* russian_riot_;
  ::CMsgPaintKit_Definition_Item* scimitar_;
  ::CMsgPaintKit_Definition_Item* scorch_shot_;
  ::CMsgPaintKit_Definition_Item* shortstop_;
  ::CMsgPaintKit_Definition_Item* soda_popper_;
  ::CMsgPaintKit_Definition_Item* tele_shotgun_;
  ::CMsgPaintKit_Definition_Item* tomislav_;
  ::CMsgPaintKit_Definition_Item* trenchgun_;
  ::CMsgPaintKit_Definition_Item* winger_pistol_;
  bool has_team_textures_;
  friend struct ::TableStruct_tf_5fproto_5fdef_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class M0PROTO CMsgQuestTheme_WeightedString final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgQuestTheme.WeightedString) */ {
 public:
  inline CMsgQuestTheme_WeightedString() : CMsgQuestTheme_WeightedString(nullptr) {}
  ~CMsgQuestTheme_WeightedString() override;
  explicit constexpr CMsgQuestTheme_WeightedString(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgQuestTheme_WeightedString(const CMsgQuestTheme_WeightedString& from);
  CMsgQuestTheme_WeightedString(CMsgQuestTheme_WeightedString&& from) noexcept
    : CMsgQuestTheme_WeightedString() {
    *this = ::std::move(from);
  }

  inline CMsgQuestTheme_WeightedString& operator=(const CMsgQuestTheme_WeightedString& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgQuestTheme_WeightedString& operator=(CMsgQuestTheme_WeightedString&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgQuestTheme_WeightedString& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgQuestTheme_WeightedString* internal_default_instance() {
    return reinterpret_cast<const CMsgQuestTheme_WeightedString*>(
               &_CMsgQuestTheme_WeightedString_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(CMsgQuestTheme_WeightedString& a, CMsgQuestTheme_WeightedString& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgQuestTheme_WeightedString* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgQuestTheme_WeightedString* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgQuestTheme_WeightedString* New() const final {
    return new CMsgQuestTheme_WeightedString();
  }

  CMsgQuestTheme_WeightedString* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgQuestTheme_WeightedString>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgQuestTheme_WeightedString& from);
  void MergeFrom(const CMsgQuestTheme_WeightedString& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgQuestTheme_WeightedString* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgQuestTheme.WeightedString";
  }
  protected:
  explicit CMsgQuestTheme_WeightedString(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStringFieldNumber = 1,
    kWeightFieldNumber = 2,
  };
  // optional string string = 1;
  bool has_string() const;
  private:
  bool _internal_has_string() const;
  public:
  void clear_string();
  const std::string& string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_string();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_string();
  void set_allocated_string(std::string* string);
  private:
  const std::string& _internal_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_string(const std::string& value);
  std::string* _internal_mutable_string();
  public:

  // optional uint32 weight = 2;
  bool has_weight() const;
  private:
  bool _internal_has_weight() const;
  public:
  void clear_weight();
  ::PROTOBUF_NAMESPACE_ID::uint32 weight() const;
  void set_weight(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_weight() const;
  void _internal_set_weight(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgQuestTheme.WeightedString)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_;
  ::PROTOBUF_NAMESPACE_ID::uint32 weight_;
  friend struct ::TableStruct_tf_5fproto_5fdef_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class M0PROTO CMsgQuestTheme_WeightedStringSet final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgQuestTheme.WeightedStringSet) */ {
 public:
  inline CMsgQuestTheme_WeightedStringSet() : CMsgQuestTheme_WeightedStringSet(nullptr) {}
  ~CMsgQuestTheme_WeightedStringSet() override;
  explicit constexpr CMsgQuestTheme_WeightedStringSet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgQuestTheme_WeightedStringSet(const CMsgQuestTheme_WeightedStringSet& from);
  CMsgQuestTheme_WeightedStringSet(CMsgQuestTheme_WeightedStringSet&& from) noexcept
    : CMsgQuestTheme_WeightedStringSet() {
    *this = ::std::move(from);
  }

  inline CMsgQuestTheme_WeightedStringSet& operator=(const CMsgQuestTheme_WeightedStringSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgQuestTheme_WeightedStringSet& operator=(CMsgQuestTheme_WeightedStringSet&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgQuestTheme_WeightedStringSet& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgQuestTheme_WeightedStringSet* internal_default_instance() {
    return reinterpret_cast<const CMsgQuestTheme_WeightedStringSet*>(
               &_CMsgQuestTheme_WeightedStringSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(CMsgQuestTheme_WeightedStringSet& a, CMsgQuestTheme_WeightedStringSet& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgQuestTheme_WeightedStringSet* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgQuestTheme_WeightedStringSet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgQuestTheme_WeightedStringSet* New() const final {
    return new CMsgQuestTheme_WeightedStringSet();
  }

  CMsgQuestTheme_WeightedStringSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgQuestTheme_WeightedStringSet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgQuestTheme_WeightedStringSet& from);
  void MergeFrom(const CMsgQuestTheme_WeightedStringSet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgQuestTheme_WeightedStringSet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgQuestTheme.WeightedStringSet";
  }
  protected:
  explicit CMsgQuestTheme_WeightedStringSet(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWeightedStringsFieldNumber = 1,
  };
  // repeated .CMsgQuestTheme.WeightedString weighted_strings = 1;
  int weighted_strings_size() const;
  private:
  int _internal_weighted_strings_size() const;
  public:
  void clear_weighted_strings();
  ::CMsgQuestTheme_WeightedString* mutable_weighted_strings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgQuestTheme_WeightedString >*
      mutable_weighted_strings();
  private:
  const ::CMsgQuestTheme_WeightedString& _internal_weighted_strings(int index) const;
  ::CMsgQuestTheme_WeightedString* _internal_add_weighted_strings();
  public:
  const ::CMsgQuestTheme_WeightedString& weighted_strings(int index) const;
  ::CMsgQuestTheme_WeightedString* add_weighted_strings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgQuestTheme_WeightedString >&
      weighted_strings() const;

  // @@protoc_insertion_point(class_scope:CMsgQuestTheme.WeightedStringSet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgQuestTheme_WeightedString > weighted_strings_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tf_5fproto_5fdef_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class M0PROTO CMsgQuestTheme final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgQuestTheme) */ {
 public:
  inline CMsgQuestTheme() : CMsgQuestTheme(nullptr) {}
  ~CMsgQuestTheme() override;
  explicit constexpr CMsgQuestTheme(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgQuestTheme(const CMsgQuestTheme& from);
  CMsgQuestTheme(CMsgQuestTheme&& from) noexcept
    : CMsgQuestTheme() {
    *this = ::std::move(from);
  }

  inline CMsgQuestTheme& operator=(const CMsgQuestTheme& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgQuestTheme& operator=(CMsgQuestTheme&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgQuestTheme& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgQuestTheme* internal_default_instance() {
    return reinterpret_cast<const CMsgQuestTheme*>(
               &_CMsgQuestTheme_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(CMsgQuestTheme& a, CMsgQuestTheme& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgQuestTheme* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgQuestTheme* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgQuestTheme* New() const final {
    return new CMsgQuestTheme();
  }

  CMsgQuestTheme* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgQuestTheme>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgQuestTheme& from);
  void MergeFrom(const CMsgQuestTheme& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgQuestTheme* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgQuestTheme";
  }
  protected:
  explicit CMsgQuestTheme(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgQuestTheme_WeightedString WeightedString;
  typedef CMsgQuestTheme_WeightedStringSet WeightedStringSet;

  // accessors -------------------------------------------------------

  enum : int {
    kGiveSoundsFieldNumber = 5,
    kCompleteSoundsFieldNumber = 6,
    kFullyCompleteSoundsFieldNumber = 7,
    kNotificationResFieldNumber = 2,
    kQuestItemResFieldNumber = 3,
    kInGameTrackerResFieldNumber = 4,
    kRewardSoundFieldNumber = 8,
    kDiscardSoundFieldNumber = 9,
    kRevealSoundFieldNumber = 10,
    kHeaderFieldNumber = 1,
  };
  // repeated .CMsgQuestTheme.WeightedStringSet give_sounds = 5;
  int give_sounds_size() const;
  private:
  int _internal_give_sounds_size() const;
  public:
  void clear_give_sounds();
  ::CMsgQuestTheme_WeightedStringSet* mutable_give_sounds(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgQuestTheme_WeightedStringSet >*
      mutable_give_sounds();
  private:
  const ::CMsgQuestTheme_WeightedStringSet& _internal_give_sounds(int index) const;
  ::CMsgQuestTheme_WeightedStringSet* _internal_add_give_sounds();
  public:
  const ::CMsgQuestTheme_WeightedStringSet& give_sounds(int index) const;
  ::CMsgQuestTheme_WeightedStringSet* add_give_sounds();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgQuestTheme_WeightedStringSet >&
      give_sounds() const;

  // repeated .CMsgQuestTheme.WeightedStringSet complete_sounds = 6;
  int complete_sounds_size() const;
  private:
  int _internal_complete_sounds_size() const;
  public:
  void clear_complete_sounds();
  ::CMsgQuestTheme_WeightedStringSet* mutable_complete_sounds(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgQuestTheme_WeightedStringSet >*
      mutable_complete_sounds();
  private:
  const ::CMsgQuestTheme_WeightedStringSet& _internal_complete_sounds(int index) const;
  ::CMsgQuestTheme_WeightedStringSet* _internal_add_complete_sounds();
  public:
  const ::CMsgQuestTheme_WeightedStringSet& complete_sounds(int index) const;
  ::CMsgQuestTheme_WeightedStringSet* add_complete_sounds();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgQuestTheme_WeightedStringSet >&
      complete_sounds() const;

  // repeated .CMsgQuestTheme.WeightedStringSet fully_complete_sounds = 7;
  int fully_complete_sounds_size() const;
  private:
  int _internal_fully_complete_sounds_size() const;
  public:
  void clear_fully_complete_sounds();
  ::CMsgQuestTheme_WeightedStringSet* mutable_fully_complete_sounds(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgQuestTheme_WeightedStringSet >*
      mutable_fully_complete_sounds();
  private:
  const ::CMsgQuestTheme_WeightedStringSet& _internal_fully_complete_sounds(int index) const;
  ::CMsgQuestTheme_WeightedStringSet* _internal_add_fully_complete_sounds();
  public:
  const ::CMsgQuestTheme_WeightedStringSet& fully_complete_sounds(int index) const;
  ::CMsgQuestTheme_WeightedStringSet* add_fully_complete_sounds();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgQuestTheme_WeightedStringSet >&
      fully_complete_sounds() const;

  // optional string notification_res = 2;
  bool has_notification_res() const;
  private:
  bool _internal_has_notification_res() const;
  public:
  void clear_notification_res();
  const std::string& notification_res() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_notification_res(ArgT0&& arg0, ArgT... args);
  std::string* mutable_notification_res();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_notification_res();
  void set_allocated_notification_res(std::string* notification_res);
  private:
  const std::string& _internal_notification_res() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_notification_res(const std::string& value);
  std::string* _internal_mutable_notification_res();
  public:

  // optional string quest_item_res = 3;
  bool has_quest_item_res() const;
  private:
  bool _internal_has_quest_item_res() const;
  public:
  void clear_quest_item_res();
  const std::string& quest_item_res() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_quest_item_res(ArgT0&& arg0, ArgT... args);
  std::string* mutable_quest_item_res();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_quest_item_res();
  void set_allocated_quest_item_res(std::string* quest_item_res);
  private:
  const std::string& _internal_quest_item_res() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_quest_item_res(const std::string& value);
  std::string* _internal_mutable_quest_item_res();
  public:

  // optional string in_game_tracker_res = 4;
  bool has_in_game_tracker_res() const;
  private:
  bool _internal_has_in_game_tracker_res() const;
  public:
  void clear_in_game_tracker_res();
  const std::string& in_game_tracker_res() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_in_game_tracker_res(ArgT0&& arg0, ArgT... args);
  std::string* mutable_in_game_tracker_res();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_in_game_tracker_res();
  void set_allocated_in_game_tracker_res(std::string* in_game_tracker_res);
  private:
  const std::string& _internal_in_game_tracker_res() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_in_game_tracker_res(const std::string& value);
  std::string* _internal_mutable_in_game_tracker_res();
  public:

  // optional string reward_sound = 8;
  bool has_reward_sound() const;
  private:
  bool _internal_has_reward_sound() const;
  public:
  void clear_reward_sound();
  const std::string& reward_sound() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reward_sound(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reward_sound();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_reward_sound();
  void set_allocated_reward_sound(std::string* reward_sound);
  private:
  const std::string& _internal_reward_sound() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reward_sound(const std::string& value);
  std::string* _internal_mutable_reward_sound();
  public:

  // optional string discard_sound = 9;
  bool has_discard_sound() const;
  private:
  bool _internal_has_discard_sound() const;
  public:
  void clear_discard_sound();
  const std::string& discard_sound() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_discard_sound(ArgT0&& arg0, ArgT... args);
  std::string* mutable_discard_sound();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_discard_sound();
  void set_allocated_discard_sound(std::string* discard_sound);
  private:
  const std::string& _internal_discard_sound() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_discard_sound(const std::string& value);
  std::string* _internal_mutable_discard_sound();
  public:

  // optional string reveal_sound = 10;
  bool has_reveal_sound() const;
  private:
  bool _internal_has_reveal_sound() const;
  public:
  void clear_reveal_sound();
  const std::string& reveal_sound() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reveal_sound(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reveal_sound();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_reveal_sound();
  void set_allocated_reveal_sound(std::string* reveal_sound);
  private:
  const std::string& _internal_reveal_sound() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reveal_sound(const std::string& value);
  std::string* _internal_mutable_reveal_sound();
  public:

  // required .CMsgProtoDefHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::CMsgProtoDefHeader& header() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgProtoDefHeader* release_header();
  ::CMsgProtoDefHeader* mutable_header();
  void set_allocated_header(::CMsgProtoDefHeader* header);
  private:
  const ::CMsgProtoDefHeader& _internal_header() const;
  ::CMsgProtoDefHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::CMsgProtoDefHeader* header);
  ::CMsgProtoDefHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:CMsgQuestTheme)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgQuestTheme_WeightedStringSet > give_sounds_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgQuestTheme_WeightedStringSet > complete_sounds_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgQuestTheme_WeightedStringSet > fully_complete_sounds_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr notification_res_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr quest_item_res_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr in_game_tracker_res_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reward_sound_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr discard_sound_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reveal_sound_;
  ::CMsgProtoDefHeader* header_;
  friend struct ::TableStruct_tf_5fproto_5fdef_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class M0PROTO CMsgQuestMapNodeCondition_NodeState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgQuestMapNodeCondition_NodeState) */ {
 public:
  inline CMsgQuestMapNodeCondition_NodeState() : CMsgQuestMapNodeCondition_NodeState(nullptr) {}
  ~CMsgQuestMapNodeCondition_NodeState() override;
  explicit constexpr CMsgQuestMapNodeCondition_NodeState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgQuestMapNodeCondition_NodeState(const CMsgQuestMapNodeCondition_NodeState& from);
  CMsgQuestMapNodeCondition_NodeState(CMsgQuestMapNodeCondition_NodeState&& from) noexcept
    : CMsgQuestMapNodeCondition_NodeState() {
    *this = ::std::move(from);
  }

  inline CMsgQuestMapNodeCondition_NodeState& operator=(const CMsgQuestMapNodeCondition_NodeState& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgQuestMapNodeCondition_NodeState& operator=(CMsgQuestMapNodeCondition_NodeState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgQuestMapNodeCondition_NodeState& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgQuestMapNodeCondition_NodeState* internal_default_instance() {
    return reinterpret_cast<const CMsgQuestMapNodeCondition_NodeState*>(
               &_CMsgQuestMapNodeCondition_NodeState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(CMsgQuestMapNodeCondition_NodeState& a, CMsgQuestMapNodeCondition_NodeState& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgQuestMapNodeCondition_NodeState* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgQuestMapNodeCondition_NodeState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgQuestMapNodeCondition_NodeState* New() const final {
    return new CMsgQuestMapNodeCondition_NodeState();
  }

  CMsgQuestMapNodeCondition_NodeState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgQuestMapNodeCondition_NodeState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgQuestMapNodeCondition_NodeState& from);
  void MergeFrom(const CMsgQuestMapNodeCondition_NodeState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgQuestMapNodeCondition_NodeState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgQuestMapNodeCondition_NodeState";
  }
  protected:
  explicit CMsgQuestMapNodeCondition_NodeState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetNodeDefidFieldNumber = 2,
    kBonusObjectivesRequiredFieldNumber = 1,
  };
  // required .CMsgProtoDefID target_node_defid = 2 [(.valid_type) = DEF_TYPE_QUEST_MAP_NODE, (.display_name) = "Target Node", (.comment) = "Which node is required to have the above number of medals"];
  bool has_target_node_defid() const;
  private:
  bool _internal_has_target_node_defid() const;
  public:
  void clear_target_node_defid();
  const ::CMsgProtoDefID& target_node_defid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgProtoDefID* release_target_node_defid();
  ::CMsgProtoDefID* mutable_target_node_defid();
  void set_allocated_target_node_defid(::CMsgProtoDefID* target_node_defid);
  private:
  const ::CMsgProtoDefID& _internal_target_node_defid() const;
  ::CMsgProtoDefID* _internal_mutable_target_node_defid();
  public:
  void unsafe_arena_set_allocated_target_node_defid(
      ::CMsgProtoDefID* target_node_defid);
  ::CMsgProtoDefID* unsafe_arena_release_target_node_defid();

  // optional uint32 bonus_objectives_required = 1 [default = 0, (.display_name) = "Bonus Required", (.comment) = "Number of bonus objectives required, on top of the primary objective"];
  bool has_bonus_objectives_required() const;
  private:
  bool _internal_has_bonus_objectives_required() const;
  public:
  void clear_bonus_objectives_required();
  ::PROTOBUF_NAMESPACE_ID::uint32 bonus_objectives_required() const;
  void set_bonus_objectives_required(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_bonus_objectives_required() const;
  void _internal_set_bonus_objectives_required(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgQuestMapNodeCondition_NodeState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CMsgProtoDefID* target_node_defid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 bonus_objectives_required_;
  friend struct ::TableStruct_tf_5fproto_5fdef_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class M0PROTO CMsgQuestMapNodeCondition_Logic final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgQuestMapNodeCondition_Logic) */ {
 public:
  inline CMsgQuestMapNodeCondition_Logic() : CMsgQuestMapNodeCondition_Logic(nullptr) {}
  ~CMsgQuestMapNodeCondition_Logic() override;
  explicit constexpr CMsgQuestMapNodeCondition_Logic(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgQuestMapNodeCondition_Logic(const CMsgQuestMapNodeCondition_Logic& from);
  CMsgQuestMapNodeCondition_Logic(CMsgQuestMapNodeCondition_Logic&& from) noexcept
    : CMsgQuestMapNodeCondition_Logic() {
    *this = ::std::move(from);
  }

  inline CMsgQuestMapNodeCondition_Logic& operator=(const CMsgQuestMapNodeCondition_Logic& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgQuestMapNodeCondition_Logic& operator=(CMsgQuestMapNodeCondition_Logic&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgQuestMapNodeCondition_Logic& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgQuestMapNodeCondition_Logic* internal_default_instance() {
    return reinterpret_cast<const CMsgQuestMapNodeCondition_Logic*>(
               &_CMsgQuestMapNodeCondition_Logic_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(CMsgQuestMapNodeCondition_Logic& a, CMsgQuestMapNodeCondition_Logic& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgQuestMapNodeCondition_Logic* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgQuestMapNodeCondition_Logic* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgQuestMapNodeCondition_Logic* New() const final {
    return new CMsgQuestMapNodeCondition_Logic();
  }

  CMsgQuestMapNodeCondition_Logic* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgQuestMapNodeCondition_Logic>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgQuestMapNodeCondition_Logic& from);
  void MergeFrom(const CMsgQuestMapNodeCondition_Logic& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgQuestMapNodeCondition_Logic* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgQuestMapNodeCondition_Logic";
  }
  protected:
  explicit CMsgQuestMapNodeCondition_Logic(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubConditionsFieldNumber = 2,
    kOperationFieldNumber = 1,
  };
  // repeated .CMsgQuestMapNodeCondition sub_conditions = 2 [(.display_name) = "Operands", (.comment) = "Definitions to use in the logical operation"];
  int sub_conditions_size() const;
  private:
  int _internal_sub_conditions_size() const;
  public:
  void clear_sub_conditions();
  ::CMsgQuestMapNodeCondition* mutable_sub_conditions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgQuestMapNodeCondition >*
      mutable_sub_conditions();
  private:
  const ::CMsgQuestMapNodeCondition& _internal_sub_conditions(int index) const;
  ::CMsgQuestMapNodeCondition* _internal_add_sub_conditions();
  public:
  const ::CMsgQuestMapNodeCondition& sub_conditions(int index) const;
  ::CMsgQuestMapNodeCondition* add_sub_conditions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgQuestMapNodeCondition >&
      sub_conditions() const;

  // required .LogicalOperation operation = 1 [default = AND, (.display_name) = "Logic", (.comment) = "Logical operation"];
  bool has_operation() const;
  private:
  bool _internal_has_operation() const;
  public:
  void clear_operation();
  ::LogicalOperation operation() const;
  void set_operation(::LogicalOperation value);
  private:
  ::LogicalOperation _internal_operation() const;
  void _internal_set_operation(::LogicalOperation value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgQuestMapNodeCondition_Logic)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgQuestMapNodeCondition > sub_conditions_;
  int operation_;
  friend struct ::TableStruct_tf_5fproto_5fdef_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class M0PROTO CMsgQuestMapNodeCondition final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgQuestMapNodeCondition) */ {
 public:
  inline CMsgQuestMapNodeCondition() : CMsgQuestMapNodeCondition(nullptr) {}
  ~CMsgQuestMapNodeCondition() override;
  explicit constexpr CMsgQuestMapNodeCondition(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgQuestMapNodeCondition(const CMsgQuestMapNodeCondition& from);
  CMsgQuestMapNodeCondition(CMsgQuestMapNodeCondition&& from) noexcept
    : CMsgQuestMapNodeCondition() {
    *this = ::std::move(from);
  }

  inline CMsgQuestMapNodeCondition& operator=(const CMsgQuestMapNodeCondition& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgQuestMapNodeCondition& operator=(CMsgQuestMapNodeCondition&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgQuestMapNodeCondition& default_instance() {
    return *internal_default_instance();
  }
  enum OperationCase {
    kNodeState = 1,
    kLogical = 2,
    OPERATION_NOT_SET = 0,
  };

  static inline const CMsgQuestMapNodeCondition* internal_default_instance() {
    return reinterpret_cast<const CMsgQuestMapNodeCondition*>(
               &_CMsgQuestMapNodeCondition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(CMsgQuestMapNodeCondition& a, CMsgQuestMapNodeCondition& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgQuestMapNodeCondition* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgQuestMapNodeCondition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgQuestMapNodeCondition* New() const final {
    return new CMsgQuestMapNodeCondition();
  }

  CMsgQuestMapNodeCondition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgQuestMapNodeCondition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgQuestMapNodeCondition& from);
  void MergeFrom(const CMsgQuestMapNodeCondition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgQuestMapNodeCondition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgQuestMapNodeCondition";
  }
  protected:
  explicit CMsgQuestMapNodeCondition(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeStateFieldNumber = 1,
    kLogicalFieldNumber = 2,
  };
  // .CMsgQuestMapNodeCondition_NodeState node_state = 1 [(.display_name) = "Node State Condition", (.comment) = "Returns true if a specific node has a required number of medals"];
  bool has_node_state() const;
  private:
  bool _internal_has_node_state() const;
  public:
  void clear_node_state();
  const ::CMsgQuestMapNodeCondition_NodeState& node_state() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgQuestMapNodeCondition_NodeState* release_node_state();
  ::CMsgQuestMapNodeCondition_NodeState* mutable_node_state();
  void set_allocated_node_state(::CMsgQuestMapNodeCondition_NodeState* node_state);
  private:
  const ::CMsgQuestMapNodeCondition_NodeState& _internal_node_state() const;
  ::CMsgQuestMapNodeCondition_NodeState* _internal_mutable_node_state();
  public:
  void unsafe_arena_set_allocated_node_state(
      ::CMsgQuestMapNodeCondition_NodeState* node_state);
  ::CMsgQuestMapNodeCondition_NodeState* unsafe_arena_release_node_state();

  // .CMsgQuestMapNodeCondition_Logic logical = 2 [(.display_name) = "Logical Condition", (.comment) = "Performs a specified logical operation to all sub conditions"];
  bool has_logical() const;
  private:
  bool _internal_has_logical() const;
  public:
  void clear_logical();
  const ::CMsgQuestMapNodeCondition_Logic& logical() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgQuestMapNodeCondition_Logic* release_logical();
  ::CMsgQuestMapNodeCondition_Logic* mutable_logical();
  void set_allocated_logical(::CMsgQuestMapNodeCondition_Logic* logical);
  private:
  const ::CMsgQuestMapNodeCondition_Logic& _internal_logical() const;
  ::CMsgQuestMapNodeCondition_Logic* _internal_mutable_logical();
  public:
  void unsafe_arena_set_allocated_logical(
      ::CMsgQuestMapNodeCondition_Logic* logical);
  ::CMsgQuestMapNodeCondition_Logic* unsafe_arena_release_logical();

  void clear_operation();
  OperationCase operation_case() const;
  // @@protoc_insertion_point(class_scope:CMsgQuestMapNodeCondition)
 private:
  class _Internal;
  void set_has_node_state();
  void set_has_logical();

  inline bool has_operation() const;
  inline void clear_has_operation();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union OperationUnion {
    constexpr OperationUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::CMsgQuestMapNodeCondition_NodeState* node_state_;
    ::CMsgQuestMapNodeCondition_Logic* logical_;
  } operation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_tf_5fproto_5fdef_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class M0PROTO CMsgHeaderOnly final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgHeaderOnly) */ {
 public:
  inline CMsgHeaderOnly() : CMsgHeaderOnly(nullptr) {}
  ~CMsgHeaderOnly() override;
  explicit constexpr CMsgHeaderOnly(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgHeaderOnly(const CMsgHeaderOnly& from);
  CMsgHeaderOnly(CMsgHeaderOnly&& from) noexcept
    : CMsgHeaderOnly() {
    *this = ::std::move(from);
  }

  inline CMsgHeaderOnly& operator=(const CMsgHeaderOnly& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgHeaderOnly& operator=(CMsgHeaderOnly&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgHeaderOnly& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgHeaderOnly* internal_default_instance() {
    return reinterpret_cast<const CMsgHeaderOnly*>(
               &_CMsgHeaderOnly_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(CMsgHeaderOnly& a, CMsgHeaderOnly& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgHeaderOnly* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgHeaderOnly* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgHeaderOnly* New() const final {
    return new CMsgHeaderOnly();
  }

  CMsgHeaderOnly* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgHeaderOnly>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgHeaderOnly& from);
  void MergeFrom(const CMsgHeaderOnly& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgHeaderOnly* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgHeaderOnly";
  }
  protected:
  explicit CMsgHeaderOnly(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
  };
  // required .CMsgProtoDefHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::CMsgProtoDefHeader& header() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgProtoDefHeader* release_header();
  ::CMsgProtoDefHeader* mutable_header();
  void set_allocated_header(::CMsgProtoDefHeader* header);
  private:
  const ::CMsgProtoDefHeader& _internal_header() const;
  ::CMsgProtoDefHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::CMsgProtoDefHeader* header);
  ::CMsgProtoDefHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:CMsgHeaderOnly)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CMsgProtoDefHeader* header_;
  friend struct ::TableStruct_tf_5fproto_5fdef_5fmessages_2eproto;
};
// ===================================================================

static const int kStartExpandedFieldNumber = 80000;
M0PROTO extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::MessageOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  start_expanded;
static const int kValidTypeFieldNumber = 70000;
M0PROTO extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::EnumTypeTraits< ::ProtoDefTypes, ::ProtoDefTypes_IsValid>, 14, false >
  valid_type;
static const int kEditableFieldNumber = 70001;
M0PROTO extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  editable;
static const int kLocalizedFieldNumber = 70002;
M0PROTO extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  localized;
static const int kDoNotInheritFieldNumber = 70003;
M0PROTO extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  do_not_inherit;
static const int kDisplayNameFieldNumber = 70004;
M0PROTO extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false >
  display_name;
static const int kCommentFieldNumber = 70005;
M0PROTO extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false >
  comment;
static const int kMaxCountFieldNumber = 70007;
M0PROTO extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::uint32 >, 13, false >
  max_count;
static const int kAllowAddFieldNumber = 70008;
M0PROTO extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  allow_add;
static const int kAllowDeleteFieldNumber = 70009;
M0PROTO extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  allow_delete;
static const int kPanelClassOverrideFieldNumber = 70010;
M0PROTO extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false >
  panel_class_override;
static const int kMessageInherhitanceKeyFieldNameFieldNumber = 70011;
M0PROTO extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false >
  message_inherhitance_key_field_name;
static const int kInheritReferenceVariablesFieldNumber = 70012;
M0PROTO extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  inherit_reference_variables;
static const int kSelfInheritOnlyFieldNumber = 70013;
M0PROTO extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  self_inherit_only;
static const int kVarFieldTypeFieldNumber = 70014;
M0PROTO extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::EnumTypeTraits< ::EVarFieldType, ::EVarFieldType_IsValid>, 14, false >
  var_field_type;
static const int kMergingKeyFieldFieldNumber = 70015;
M0PROTO extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  merging_key_field;

// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CMsgFieldID_CMsgField

// optional uint32 field_number = 1;
inline bool CMsgFieldID_CMsgField::_internal_has_field_number() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgFieldID_CMsgField::has_field_number() const {
  return _internal_has_field_number();
}
inline void CMsgFieldID_CMsgField::clear_field_number() {
  field_number_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgFieldID_CMsgField::_internal_field_number() const {
  return field_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgFieldID_CMsgField::field_number() const {
  // @@protoc_insertion_point(field_get:CMsgFieldID.CMsgField.field_number)
  return _internal_field_number();
}
inline void CMsgFieldID_CMsgField::_internal_set_field_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  field_number_ = value;
}
inline void CMsgFieldID_CMsgField::set_field_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_field_number(value);
  // @@protoc_insertion_point(field_set:CMsgFieldID.CMsgField.field_number)
}

// optional uint32 repeated_index = 2;
inline bool CMsgFieldID_CMsgField::_internal_has_repeated_index() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgFieldID_CMsgField::has_repeated_index() const {
  return _internal_has_repeated_index();
}
inline void CMsgFieldID_CMsgField::clear_repeated_index() {
  repeated_index_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgFieldID_CMsgField::_internal_repeated_index() const {
  return repeated_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgFieldID_CMsgField::repeated_index() const {
  // @@protoc_insertion_point(field_get:CMsgFieldID.CMsgField.repeated_index)
  return _internal_repeated_index();
}
inline void CMsgFieldID_CMsgField::_internal_set_repeated_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  repeated_index_ = value;
}
inline void CMsgFieldID_CMsgField::set_repeated_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_repeated_index(value);
  // @@protoc_insertion_point(field_set:CMsgFieldID.CMsgField.repeated_index)
}

// -------------------------------------------------------------------

// CMsgFieldID

// repeated .CMsgFieldID.CMsgField field = 1;
inline int CMsgFieldID::_internal_field_size() const {
  return field_.size();
}
inline int CMsgFieldID::field_size() const {
  return _internal_field_size();
}
inline void CMsgFieldID::clear_field() {
  field_.Clear();
}
inline ::CMsgFieldID_CMsgField* CMsgFieldID::mutable_field(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgFieldID.field)
  return field_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgFieldID_CMsgField >*
CMsgFieldID::mutable_field() {
  // @@protoc_insertion_point(field_mutable_list:CMsgFieldID.field)
  return &field_;
}
inline const ::CMsgFieldID_CMsgField& CMsgFieldID::_internal_field(int index) const {
  return field_.Get(index);
}
inline const ::CMsgFieldID_CMsgField& CMsgFieldID::field(int index) const {
  // @@protoc_insertion_point(field_get:CMsgFieldID.field)
  return _internal_field(index);
}
inline ::CMsgFieldID_CMsgField* CMsgFieldID::_internal_add_field() {
  return field_.Add();
}
inline ::CMsgFieldID_CMsgField* CMsgFieldID::add_field() {
  // @@protoc_insertion_point(field_add:CMsgFieldID.field)
  return _internal_add_field();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgFieldID_CMsgField >&
CMsgFieldID::field() const {
  // @@protoc_insertion_point(field_list:CMsgFieldID.field)
  return field_;
}

// -------------------------------------------------------------------

// CMsgUniversalFieldID

// optional .EValueDefinitionSource source_type = 1 [default = REFERENCE_DEFINES];
inline bool CMsgUniversalFieldID::_internal_has_source_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgUniversalFieldID::has_source_type() const {
  return _internal_has_source_type();
}
inline void CMsgUniversalFieldID::clear_source_type() {
  source_type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::EValueDefinitionSource CMsgUniversalFieldID::_internal_source_type() const {
  return static_cast< ::EValueDefinitionSource >(source_type_);
}
inline ::EValueDefinitionSource CMsgUniversalFieldID::source_type() const {
  // @@protoc_insertion_point(field_get:CMsgUniversalFieldID.source_type)
  return _internal_source_type();
}
inline void CMsgUniversalFieldID::_internal_set_source_type(::EValueDefinitionSource value) {
  assert(::EValueDefinitionSource_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  source_type_ = value;
}
inline void CMsgUniversalFieldID::set_source_type(::EValueDefinitionSource value) {
  _internal_set_source_type(value);
  // @@protoc_insertion_point(field_set:CMsgUniversalFieldID.source_type)
}

// optional .CMsgProtoDefID defining_obj_id = 2;
inline bool CMsgUniversalFieldID::_internal_has_defining_obj_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || defining_obj_id_ != nullptr);
  return value;
}
inline bool CMsgUniversalFieldID::has_defining_obj_id() const {
  return _internal_has_defining_obj_id();
}
inline void CMsgUniversalFieldID::clear_defining_obj_id() {
  if (defining_obj_id_ != nullptr) defining_obj_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgProtoDefID& CMsgUniversalFieldID::_internal_defining_obj_id() const {
  const ::CMsgProtoDefID* p = defining_obj_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgProtoDefID&>(
      ::_CMsgProtoDefID_default_instance_);
}
inline const ::CMsgProtoDefID& CMsgUniversalFieldID::defining_obj_id() const {
  // @@protoc_insertion_point(field_get:CMsgUniversalFieldID.defining_obj_id)
  return _internal_defining_obj_id();
}
inline void CMsgUniversalFieldID::unsafe_arena_set_allocated_defining_obj_id(
    ::CMsgProtoDefID* defining_obj_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(defining_obj_id_);
  }
  defining_obj_id_ = defining_obj_id;
  if (defining_obj_id) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgUniversalFieldID.defining_obj_id)
}
inline ::CMsgProtoDefID* CMsgUniversalFieldID::release_defining_obj_id() {
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgProtoDefID* temp = defining_obj_id_;
  defining_obj_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgProtoDefID* CMsgUniversalFieldID::unsafe_arena_release_defining_obj_id() {
  // @@protoc_insertion_point(field_release:CMsgUniversalFieldID.defining_obj_id)
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgProtoDefID* temp = defining_obj_id_;
  defining_obj_id_ = nullptr;
  return temp;
}
inline ::CMsgProtoDefID* CMsgUniversalFieldID::_internal_mutable_defining_obj_id() {
  _has_bits_[0] |= 0x00000001u;
  if (defining_obj_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgProtoDefID>(GetArenaForAllocation());
    defining_obj_id_ = p;
  }
  return defining_obj_id_;
}
inline ::CMsgProtoDefID* CMsgUniversalFieldID::mutable_defining_obj_id() {
  // @@protoc_insertion_point(field_mutable:CMsgUniversalFieldID.defining_obj_id)
  return _internal_mutable_defining_obj_id();
}
inline void CMsgUniversalFieldID::set_allocated_defining_obj_id(::CMsgProtoDefID* defining_obj_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete defining_obj_id_;
  }
  if (defining_obj_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgProtoDefID>::GetOwningArena(defining_obj_id);
    if (message_arena != submessage_arena) {
      defining_obj_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, defining_obj_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  defining_obj_id_ = defining_obj_id;
  // @@protoc_insertion_point(field_set_allocated:CMsgUniversalFieldID.defining_obj_id)
}

// optional .CMsgFieldID field_id = 3;
inline bool CMsgUniversalFieldID::_internal_has_field_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || field_id_ != nullptr);
  return value;
}
inline bool CMsgUniversalFieldID::has_field_id() const {
  return _internal_has_field_id();
}
inline void CMsgUniversalFieldID::clear_field_id() {
  if (field_id_ != nullptr) field_id_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::CMsgFieldID& CMsgUniversalFieldID::_internal_field_id() const {
  const ::CMsgFieldID* p = field_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgFieldID&>(
      ::_CMsgFieldID_default_instance_);
}
inline const ::CMsgFieldID& CMsgUniversalFieldID::field_id() const {
  // @@protoc_insertion_point(field_get:CMsgUniversalFieldID.field_id)
  return _internal_field_id();
}
inline void CMsgUniversalFieldID::unsafe_arena_set_allocated_field_id(
    ::CMsgFieldID* field_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(field_id_);
  }
  field_id_ = field_id;
  if (field_id) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgUniversalFieldID.field_id)
}
inline ::CMsgFieldID* CMsgUniversalFieldID::release_field_id() {
  _has_bits_[0] &= ~0x00000002u;
  ::CMsgFieldID* temp = field_id_;
  field_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgFieldID* CMsgUniversalFieldID::unsafe_arena_release_field_id() {
  // @@protoc_insertion_point(field_release:CMsgUniversalFieldID.field_id)
  _has_bits_[0] &= ~0x00000002u;
  ::CMsgFieldID* temp = field_id_;
  field_id_ = nullptr;
  return temp;
}
inline ::CMsgFieldID* CMsgUniversalFieldID::_internal_mutable_field_id() {
  _has_bits_[0] |= 0x00000002u;
  if (field_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgFieldID>(GetArenaForAllocation());
    field_id_ = p;
  }
  return field_id_;
}
inline ::CMsgFieldID* CMsgUniversalFieldID::mutable_field_id() {
  // @@protoc_insertion_point(field_mutable:CMsgUniversalFieldID.field_id)
  return _internal_mutable_field_id();
}
inline void CMsgUniversalFieldID::set_allocated_field_id(::CMsgFieldID* field_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete field_id_;
  }
  if (field_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgFieldID>::GetOwningArena(field_id);
    if (message_arena != submessage_arena) {
      field_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, field_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  field_id_ = field_id;
  // @@protoc_insertion_point(field_set_allocated:CMsgUniversalFieldID.field_id)
}

// -------------------------------------------------------------------

// CMsgVariableDefinition

// optional string name = 1 [(.merging_key_field) = true];
inline bool CMsgVariableDefinition::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgVariableDefinition::has_name() const {
  return _internal_has_name();
}
inline void CMsgVariableDefinition::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgVariableDefinition::name() const {
  // @@protoc_insertion_point(field_get:CMsgVariableDefinition.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgVariableDefinition::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgVariableDefinition.name)
}
inline std::string* CMsgVariableDefinition::mutable_name() {
  // @@protoc_insertion_point(field_mutable:CMsgVariableDefinition.name)
  return _internal_mutable_name();
}
inline const std::string& CMsgVariableDefinition::_internal_name() const {
  return name_.Get();
}
inline void CMsgVariableDefinition::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgVariableDefinition::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgVariableDefinition::release_name() {
  // @@protoc_insertion_point(field_release:CMsgVariableDefinition.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CMsgVariableDefinition::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CMsgVariableDefinition.name)
}

// optional bool inherit = 2 [default = true];
inline bool CMsgVariableDefinition::_internal_has_inherit() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgVariableDefinition::has_inherit() const {
  return _internal_has_inherit();
}
inline void CMsgVariableDefinition::clear_inherit() {
  inherit_ = true;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CMsgVariableDefinition::_internal_inherit() const {
  return inherit_;
}
inline bool CMsgVariableDefinition::inherit() const {
  // @@protoc_insertion_point(field_get:CMsgVariableDefinition.inherit)
  return _internal_inherit();
}
inline void CMsgVariableDefinition::_internal_set_inherit(bool value) {
  _has_bits_[0] |= 0x00000004u;
  inherit_ = value;
}
inline void CMsgVariableDefinition::set_inherit(bool value) {
  _internal_set_inherit(value);
  // @@protoc_insertion_point(field_set:CMsgVariableDefinition.inherit)
}

// optional string value = 3;
inline bool CMsgVariableDefinition::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgVariableDefinition::has_value() const {
  return _internal_has_value();
}
inline void CMsgVariableDefinition::clear_value() {
  value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgVariableDefinition::value() const {
  // @@protoc_insertion_point(field_get:CMsgVariableDefinition.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgVariableDefinition::set_value(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgVariableDefinition.value)
}
inline std::string* CMsgVariableDefinition::mutable_value() {
  // @@protoc_insertion_point(field_mutable:CMsgVariableDefinition.value)
  return _internal_mutable_value();
}
inline const std::string& CMsgVariableDefinition::_internal_value() const {
  return value_.Get();
}
inline void CMsgVariableDefinition::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgVariableDefinition::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgVariableDefinition::release_value() {
  // @@protoc_insertion_point(field_release:CMsgVariableDefinition.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CMsgVariableDefinition::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CMsgVariableDefinition.value)
}

// -------------------------------------------------------------------

// CMsgProtoDefHeader

// required uint32 defindex = 1 [(.editable) = false, (.display_name) = "Defindex", (.comment) = "Autogenerated", (.self_inherit_only) = true];
inline bool CMsgProtoDefHeader::_internal_has_defindex() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgProtoDefHeader::has_defindex() const {
  return _internal_has_defindex();
}
inline void CMsgProtoDefHeader::clear_defindex() {
  defindex_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgProtoDefHeader::_internal_defindex() const {
  return defindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgProtoDefHeader::defindex() const {
  // @@protoc_insertion_point(field_get:CMsgProtoDefHeader.defindex)
  return _internal_defindex();
}
inline void CMsgProtoDefHeader::_internal_set_defindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  defindex_ = value;
}
inline void CMsgProtoDefHeader::set_defindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_defindex(value);
  // @@protoc_insertion_point(field_set:CMsgProtoDefHeader.defindex)
}

// optional string name = 2 [(.display_name) = "Name", (.comment) = "Name to show in the editor", (.self_inherit_only) = true];
inline bool CMsgProtoDefHeader::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgProtoDefHeader::has_name() const {
  return _internal_has_name();
}
inline void CMsgProtoDefHeader::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgProtoDefHeader::name() const {
  // @@protoc_insertion_point(field_get:CMsgProtoDefHeader.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgProtoDefHeader::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgProtoDefHeader.name)
}
inline std::string* CMsgProtoDefHeader::mutable_name() {
  // @@protoc_insertion_point(field_mutable:CMsgProtoDefHeader.name)
  return _internal_mutable_name();
}
inline const std::string& CMsgProtoDefHeader::_internal_name() const {
  return name_.Get();
}
inline void CMsgProtoDefHeader::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgProtoDefHeader::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgProtoDefHeader::release_name() {
  // @@protoc_insertion_point(field_release:CMsgProtoDefHeader.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CMsgProtoDefHeader::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CMsgProtoDefHeader.name)
}

// repeated .CMsgProtoDefID prefabs = 3 [(.display_name) = "Prefab", (.comment) = "Inherit the values of these definitions, in order from top to bottom.", (.panel_class_override) = "CPrefabFieldEditingPanel", (.self_inherit_only) = true];
inline int CMsgProtoDefHeader::_internal_prefabs_size() const {
  return prefabs_.size();
}
inline int CMsgProtoDefHeader::prefabs_size() const {
  return _internal_prefabs_size();
}
inline void CMsgProtoDefHeader::clear_prefabs() {
  prefabs_.Clear();
}
inline ::CMsgProtoDefID* CMsgProtoDefHeader::mutable_prefabs(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgProtoDefHeader.prefabs)
  return prefabs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgProtoDefID >*
CMsgProtoDefHeader::mutable_prefabs() {
  // @@protoc_insertion_point(field_mutable_list:CMsgProtoDefHeader.prefabs)
  return &prefabs_;
}
inline const ::CMsgProtoDefID& CMsgProtoDefHeader::_internal_prefabs(int index) const {
  return prefabs_.Get(index);
}
inline const ::CMsgProtoDefID& CMsgProtoDefHeader::prefabs(int index) const {
  // @@protoc_insertion_point(field_get:CMsgProtoDefHeader.prefabs)
  return _internal_prefabs(index);
}
inline ::CMsgProtoDefID* CMsgProtoDefHeader::_internal_add_prefabs() {
  return prefabs_.Add();
}
inline ::CMsgProtoDefID* CMsgProtoDefHeader::add_prefabs() {
  // @@protoc_insertion_point(field_add:CMsgProtoDefHeader.prefabs)
  return _internal_add_prefabs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgProtoDefID >&
CMsgProtoDefHeader::prefabs() const {
  // @@protoc_insertion_point(field_list:CMsgProtoDefHeader.prefabs)
  return prefabs_;
}

// repeated string tags = 4 [(.display_name) = "Tags", (.comment) = "Strings used to describe this definition while searching.  ie. \'class\', \'shotgun\', \'easy\'"];
inline int CMsgProtoDefHeader::_internal_tags_size() const {
  return tags_.size();
}
inline int CMsgProtoDefHeader::tags_size() const {
  return _internal_tags_size();
}
inline void CMsgProtoDefHeader::clear_tags() {
  tags_.Clear();
}
inline std::string* CMsgProtoDefHeader::add_tags() {
  // @@protoc_insertion_point(field_add_mutable:CMsgProtoDefHeader.tags)
  return _internal_add_tags();
}
inline const std::string& CMsgProtoDefHeader::_internal_tags(int index) const {
  return tags_.Get(index);
}
inline const std::string& CMsgProtoDefHeader::tags(int index) const {
  // @@protoc_insertion_point(field_get:CMsgProtoDefHeader.tags)
  return _internal_tags(index);
}
inline std::string* CMsgProtoDefHeader::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgProtoDefHeader.tags)
  return tags_.Mutable(index);
}
inline void CMsgProtoDefHeader::set_tags(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:CMsgProtoDefHeader.tags)
  tags_.Mutable(index)->assign(value);
}
inline void CMsgProtoDefHeader::set_tags(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:CMsgProtoDefHeader.tags)
  tags_.Mutable(index)->assign(std::move(value));
}
inline void CMsgProtoDefHeader::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgProtoDefHeader.tags)
}
inline void CMsgProtoDefHeader::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgProtoDefHeader.tags)
}
inline std::string* CMsgProtoDefHeader::_internal_add_tags() {
  return tags_.Add();
}
inline void CMsgProtoDefHeader::add_tags(const std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CMsgProtoDefHeader.tags)
}
inline void CMsgProtoDefHeader::add_tags(std::string&& value) {
  tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CMsgProtoDefHeader.tags)
}
inline void CMsgProtoDefHeader::add_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CMsgProtoDefHeader.tags)
}
inline void CMsgProtoDefHeader::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CMsgProtoDefHeader.tags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CMsgProtoDefHeader::tags() const {
  // @@protoc_insertion_point(field_list:CMsgProtoDefHeader.tags)
  return tags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CMsgProtoDefHeader::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:CMsgProtoDefHeader.tags)
  return &tags_;
}

// optional bool prefab_only = 5 [default = false, (.display_name) = "Pure Prefab", (.comment) = "If true, this is only a prefab and will not be made into an object", (.self_inherit_only) = true];
inline bool CMsgProtoDefHeader::_internal_has_prefab_only() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgProtoDefHeader::has_prefab_only() const {
  return _internal_has_prefab_only();
}
inline void CMsgProtoDefHeader::clear_prefab_only() {
  prefab_only_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CMsgProtoDefHeader::_internal_prefab_only() const {
  return prefab_only_;
}
inline bool CMsgProtoDefHeader::prefab_only() const {
  // @@protoc_insertion_point(field_get:CMsgProtoDefHeader.prefab_only)
  return _internal_prefab_only();
}
inline void CMsgProtoDefHeader::_internal_set_prefab_only(bool value) {
  _has_bits_[0] |= 0x00000004u;
  prefab_only_ = value;
}
inline void CMsgProtoDefHeader::set_prefab_only(bool value) {
  _internal_set_prefab_only(value);
  // @@protoc_insertion_point(field_set:CMsgProtoDefHeader.prefab_only)
}

// repeated .CMsgVariableDefinition variables = 6 [(.display_name) = "Variables", (.comment) = "Variable value definitions", (.message_inherhitance_key_field_name) = "name"];
inline int CMsgProtoDefHeader::_internal_variables_size() const {
  return variables_.size();
}
inline int CMsgProtoDefHeader::variables_size() const {
  return _internal_variables_size();
}
inline void CMsgProtoDefHeader::clear_variables() {
  variables_.Clear();
}
inline ::CMsgVariableDefinition* CMsgProtoDefHeader::mutable_variables(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgProtoDefHeader.variables)
  return variables_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgVariableDefinition >*
CMsgProtoDefHeader::mutable_variables() {
  // @@protoc_insertion_point(field_mutable_list:CMsgProtoDefHeader.variables)
  return &variables_;
}
inline const ::CMsgVariableDefinition& CMsgProtoDefHeader::_internal_variables(int index) const {
  return variables_.Get(index);
}
inline const ::CMsgVariableDefinition& CMsgProtoDefHeader::variables(int index) const {
  // @@protoc_insertion_point(field_get:CMsgProtoDefHeader.variables)
  return _internal_variables(index);
}
inline ::CMsgVariableDefinition* CMsgProtoDefHeader::_internal_add_variables() {
  return variables_.Add();
}
inline ::CMsgVariableDefinition* CMsgProtoDefHeader::add_variables() {
  // @@protoc_insertion_point(field_add:CMsgProtoDefHeader.variables)
  return _internal_add_variables();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgVariableDefinition >&
CMsgProtoDefHeader::variables() const {
  // @@protoc_insertion_point(field_list:CMsgProtoDefHeader.variables)
  return variables_;
}

// -------------------------------------------------------------------

// CMsgValidTypes

// repeated .ProtoDefTypes types = 1;
inline int CMsgValidTypes::_internal_types_size() const {
  return types_.size();
}
inline int CMsgValidTypes::types_size() const {
  return _internal_types_size();
}
inline void CMsgValidTypes::clear_types() {
  types_.Clear();
}
inline ::ProtoDefTypes CMsgValidTypes::_internal_types(int index) const {
  return static_cast< ::ProtoDefTypes >(types_.Get(index));
}
inline ::ProtoDefTypes CMsgValidTypes::types(int index) const {
  // @@protoc_insertion_point(field_get:CMsgValidTypes.types)
  return _internal_types(index);
}
inline void CMsgValidTypes::set_types(int index, ::ProtoDefTypes value) {
  assert(::ProtoDefTypes_IsValid(value));
  types_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgValidTypes.types)
}
inline void CMsgValidTypes::_internal_add_types(::ProtoDefTypes value) {
  assert(::ProtoDefTypes_IsValid(value));
  types_.Add(value);
}
inline void CMsgValidTypes::add_types(::ProtoDefTypes value) {
  // @@protoc_insertion_point(field_add:CMsgValidTypes.types)
  _internal_add_types(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
CMsgValidTypes::types() const {
  // @@protoc_insertion_point(field_list:CMsgValidTypes.types)
  return types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
CMsgValidTypes::_internal_mutable_types() {
  return &types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
CMsgValidTypes::mutable_types() {
  // @@protoc_insertion_point(field_mutable_list:CMsgValidTypes.types)
  return _internal_mutable_types();
}

// -------------------------------------------------------------------

// CMsgProtoDefID

// optional uint32 defindex = 1;
inline bool CMsgProtoDefID::_internal_has_defindex() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgProtoDefID::has_defindex() const {
  return _internal_has_defindex();
}
inline void CMsgProtoDefID::clear_defindex() {
  defindex_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgProtoDefID::_internal_defindex() const {
  return defindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgProtoDefID::defindex() const {
  // @@protoc_insertion_point(field_get:CMsgProtoDefID.defindex)
  return _internal_defindex();
}
inline void CMsgProtoDefID::_internal_set_defindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  defindex_ = value;
}
inline void CMsgProtoDefID::set_defindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_defindex(value);
  // @@protoc_insertion_point(field_set:CMsgProtoDefID.defindex)
}

// optional .ProtoDefTypes type = 2 [default = DEF_TYPE_QUEST_MAP_NODE];
inline bool CMsgProtoDefID::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgProtoDefID::has_type() const {
  return _internal_has_type();
}
inline void CMsgProtoDefID::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::ProtoDefTypes CMsgProtoDefID::_internal_type() const {
  return static_cast< ::ProtoDefTypes >(type_);
}
inline ::ProtoDefTypes CMsgProtoDefID::type() const {
  // @@protoc_insertion_point(field_get:CMsgProtoDefID.type)
  return _internal_type();
}
inline void CMsgProtoDefID::_internal_set_type(::ProtoDefTypes value) {
  assert(::ProtoDefTypes_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  type_ = value;
}
inline void CMsgProtoDefID::set_type(::ProtoDefTypes value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:CMsgProtoDefID.type)
}

// .CMsgQuestMapNodeDef instance_def_type_quest_map_node = 3;
inline bool CMsgProtoDefID::_internal_has_instance_def_type_quest_map_node() const {
  return instance_case() == kInstanceDefTypeQuestMapNode;
}
inline bool CMsgProtoDefID::has_instance_def_type_quest_map_node() const {
  return _internal_has_instance_def_type_quest_map_node();
}
inline void CMsgProtoDefID::set_has_instance_def_type_quest_map_node() {
  _oneof_case_[0] = kInstanceDefTypeQuestMapNode;
}
inline void CMsgProtoDefID::clear_instance_def_type_quest_map_node() {
  if (_internal_has_instance_def_type_quest_map_node()) {
    if (GetArenaForAllocation() == nullptr) {
      delete instance_.instance_def_type_quest_map_node_;
    }
    clear_has_instance();
  }
}
inline ::CMsgQuestMapNodeDef* CMsgProtoDefID::release_instance_def_type_quest_map_node() {
  // @@protoc_insertion_point(field_release:CMsgProtoDefID.instance_def_type_quest_map_node)
  if (_internal_has_instance_def_type_quest_map_node()) {
    clear_has_instance();
      ::CMsgQuestMapNodeDef* temp = instance_.instance_def_type_quest_map_node_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    instance_.instance_def_type_quest_map_node_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CMsgQuestMapNodeDef& CMsgProtoDefID::_internal_instance_def_type_quest_map_node() const {
  return _internal_has_instance_def_type_quest_map_node()
      ? *instance_.instance_def_type_quest_map_node_
      : reinterpret_cast< ::CMsgQuestMapNodeDef&>(::_CMsgQuestMapNodeDef_default_instance_);
}
inline const ::CMsgQuestMapNodeDef& CMsgProtoDefID::instance_def_type_quest_map_node() const {
  // @@protoc_insertion_point(field_get:CMsgProtoDefID.instance_def_type_quest_map_node)
  return _internal_instance_def_type_quest_map_node();
}
inline ::CMsgQuestMapNodeDef* CMsgProtoDefID::unsafe_arena_release_instance_def_type_quest_map_node() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CMsgProtoDefID.instance_def_type_quest_map_node)
  if (_internal_has_instance_def_type_quest_map_node()) {
    clear_has_instance();
    ::CMsgQuestMapNodeDef* temp = instance_.instance_def_type_quest_map_node_;
    instance_.instance_def_type_quest_map_node_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CMsgProtoDefID::unsafe_arena_set_allocated_instance_def_type_quest_map_node(::CMsgQuestMapNodeDef* instance_def_type_quest_map_node) {
  clear_instance();
  if (instance_def_type_quest_map_node) {
    set_has_instance_def_type_quest_map_node();
    instance_.instance_def_type_quest_map_node_ = instance_def_type_quest_map_node;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgProtoDefID.instance_def_type_quest_map_node)
}
inline ::CMsgQuestMapNodeDef* CMsgProtoDefID::_internal_mutable_instance_def_type_quest_map_node() {
  if (!_internal_has_instance_def_type_quest_map_node()) {
    clear_instance();
    set_has_instance_def_type_quest_map_node();
    instance_.instance_def_type_quest_map_node_ = CreateMaybeMessage< ::CMsgQuestMapNodeDef >(GetArenaForAllocation());
  }
  return instance_.instance_def_type_quest_map_node_;
}
inline ::CMsgQuestMapNodeDef* CMsgProtoDefID::mutable_instance_def_type_quest_map_node() {
  // @@protoc_insertion_point(field_mutable:CMsgProtoDefID.instance_def_type_quest_map_node)
  return _internal_mutable_instance_def_type_quest_map_node();
}

// .CMsgQuestTheme instance_def_type_quest_theme = 5;
inline bool CMsgProtoDefID::_internal_has_instance_def_type_quest_theme() const {
  return instance_case() == kInstanceDefTypeQuestTheme;
}
inline bool CMsgProtoDefID::has_instance_def_type_quest_theme() const {
  return _internal_has_instance_def_type_quest_theme();
}
inline void CMsgProtoDefID::set_has_instance_def_type_quest_theme() {
  _oneof_case_[0] = kInstanceDefTypeQuestTheme;
}
inline void CMsgProtoDefID::clear_instance_def_type_quest_theme() {
  if (_internal_has_instance_def_type_quest_theme()) {
    if (GetArenaForAllocation() == nullptr) {
      delete instance_.instance_def_type_quest_theme_;
    }
    clear_has_instance();
  }
}
inline ::CMsgQuestTheme* CMsgProtoDefID::release_instance_def_type_quest_theme() {
  // @@protoc_insertion_point(field_release:CMsgProtoDefID.instance_def_type_quest_theme)
  if (_internal_has_instance_def_type_quest_theme()) {
    clear_has_instance();
      ::CMsgQuestTheme* temp = instance_.instance_def_type_quest_theme_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    instance_.instance_def_type_quest_theme_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CMsgQuestTheme& CMsgProtoDefID::_internal_instance_def_type_quest_theme() const {
  return _internal_has_instance_def_type_quest_theme()
      ? *instance_.instance_def_type_quest_theme_
      : reinterpret_cast< ::CMsgQuestTheme&>(::_CMsgQuestTheme_default_instance_);
}
inline const ::CMsgQuestTheme& CMsgProtoDefID::instance_def_type_quest_theme() const {
  // @@protoc_insertion_point(field_get:CMsgProtoDefID.instance_def_type_quest_theme)
  return _internal_instance_def_type_quest_theme();
}
inline ::CMsgQuestTheme* CMsgProtoDefID::unsafe_arena_release_instance_def_type_quest_theme() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CMsgProtoDefID.instance_def_type_quest_theme)
  if (_internal_has_instance_def_type_quest_theme()) {
    clear_has_instance();
    ::CMsgQuestTheme* temp = instance_.instance_def_type_quest_theme_;
    instance_.instance_def_type_quest_theme_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CMsgProtoDefID::unsafe_arena_set_allocated_instance_def_type_quest_theme(::CMsgQuestTheme* instance_def_type_quest_theme) {
  clear_instance();
  if (instance_def_type_quest_theme) {
    set_has_instance_def_type_quest_theme();
    instance_.instance_def_type_quest_theme_ = instance_def_type_quest_theme;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgProtoDefID.instance_def_type_quest_theme)
}
inline ::CMsgQuestTheme* CMsgProtoDefID::_internal_mutable_instance_def_type_quest_theme() {
  if (!_internal_has_instance_def_type_quest_theme()) {
    clear_instance();
    set_has_instance_def_type_quest_theme();
    instance_.instance_def_type_quest_theme_ = CreateMaybeMessage< ::CMsgQuestTheme >(GetArenaForAllocation());
  }
  return instance_.instance_def_type_quest_theme_;
}
inline ::CMsgQuestTheme* CMsgProtoDefID::mutable_instance_def_type_quest_theme() {
  // @@protoc_insertion_point(field_mutable:CMsgProtoDefID.instance_def_type_quest_theme)
  return _internal_mutable_instance_def_type_quest_theme();
}

// .CMsgQuestMapRegionDef instance_def_type_quest_map_region = 6;
inline bool CMsgProtoDefID::_internal_has_instance_def_type_quest_map_region() const {
  return instance_case() == kInstanceDefTypeQuestMapRegion;
}
inline bool CMsgProtoDefID::has_instance_def_type_quest_map_region() const {
  return _internal_has_instance_def_type_quest_map_region();
}
inline void CMsgProtoDefID::set_has_instance_def_type_quest_map_region() {
  _oneof_case_[0] = kInstanceDefTypeQuestMapRegion;
}
inline void CMsgProtoDefID::clear_instance_def_type_quest_map_region() {
  if (_internal_has_instance_def_type_quest_map_region()) {
    if (GetArenaForAllocation() == nullptr) {
      delete instance_.instance_def_type_quest_map_region_;
    }
    clear_has_instance();
  }
}
inline ::CMsgQuestMapRegionDef* CMsgProtoDefID::release_instance_def_type_quest_map_region() {
  // @@protoc_insertion_point(field_release:CMsgProtoDefID.instance_def_type_quest_map_region)
  if (_internal_has_instance_def_type_quest_map_region()) {
    clear_has_instance();
      ::CMsgQuestMapRegionDef* temp = instance_.instance_def_type_quest_map_region_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    instance_.instance_def_type_quest_map_region_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CMsgQuestMapRegionDef& CMsgProtoDefID::_internal_instance_def_type_quest_map_region() const {
  return _internal_has_instance_def_type_quest_map_region()
      ? *instance_.instance_def_type_quest_map_region_
      : reinterpret_cast< ::CMsgQuestMapRegionDef&>(::_CMsgQuestMapRegionDef_default_instance_);
}
inline const ::CMsgQuestMapRegionDef& CMsgProtoDefID::instance_def_type_quest_map_region() const {
  // @@protoc_insertion_point(field_get:CMsgProtoDefID.instance_def_type_quest_map_region)
  return _internal_instance_def_type_quest_map_region();
}
inline ::CMsgQuestMapRegionDef* CMsgProtoDefID::unsafe_arena_release_instance_def_type_quest_map_region() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CMsgProtoDefID.instance_def_type_quest_map_region)
  if (_internal_has_instance_def_type_quest_map_region()) {
    clear_has_instance();
    ::CMsgQuestMapRegionDef* temp = instance_.instance_def_type_quest_map_region_;
    instance_.instance_def_type_quest_map_region_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CMsgProtoDefID::unsafe_arena_set_allocated_instance_def_type_quest_map_region(::CMsgQuestMapRegionDef* instance_def_type_quest_map_region) {
  clear_instance();
  if (instance_def_type_quest_map_region) {
    set_has_instance_def_type_quest_map_region();
    instance_.instance_def_type_quest_map_region_ = instance_def_type_quest_map_region;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgProtoDefID.instance_def_type_quest_map_region)
}
inline ::CMsgQuestMapRegionDef* CMsgProtoDefID::_internal_mutable_instance_def_type_quest_map_region() {
  if (!_internal_has_instance_def_type_quest_map_region()) {
    clear_instance();
    set_has_instance_def_type_quest_map_region();
    instance_.instance_def_type_quest_map_region_ = CreateMaybeMessage< ::CMsgQuestMapRegionDef >(GetArenaForAllocation());
  }
  return instance_.instance_def_type_quest_map_region_;
}
inline ::CMsgQuestMapRegionDef* CMsgProtoDefID::mutable_instance_def_type_quest_map_region() {
  // @@protoc_insertion_point(field_mutable:CMsgProtoDefID.instance_def_type_quest_map_region)
  return _internal_mutable_instance_def_type_quest_map_region();
}

// .CMsgQuestDef instance_def_type_quest = 7;
inline bool CMsgProtoDefID::_internal_has_instance_def_type_quest() const {
  return instance_case() == kInstanceDefTypeQuest;
}
inline bool CMsgProtoDefID::has_instance_def_type_quest() const {
  return _internal_has_instance_def_type_quest();
}
inline void CMsgProtoDefID::set_has_instance_def_type_quest() {
  _oneof_case_[0] = kInstanceDefTypeQuest;
}
inline void CMsgProtoDefID::clear_instance_def_type_quest() {
  if (_internal_has_instance_def_type_quest()) {
    if (GetArenaForAllocation() == nullptr) {
      delete instance_.instance_def_type_quest_;
    }
    clear_has_instance();
  }
}
inline ::CMsgQuestDef* CMsgProtoDefID::release_instance_def_type_quest() {
  // @@protoc_insertion_point(field_release:CMsgProtoDefID.instance_def_type_quest)
  if (_internal_has_instance_def_type_quest()) {
    clear_has_instance();
      ::CMsgQuestDef* temp = instance_.instance_def_type_quest_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    instance_.instance_def_type_quest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CMsgQuestDef& CMsgProtoDefID::_internal_instance_def_type_quest() const {
  return _internal_has_instance_def_type_quest()
      ? *instance_.instance_def_type_quest_
      : reinterpret_cast< ::CMsgQuestDef&>(::_CMsgQuestDef_default_instance_);
}
inline const ::CMsgQuestDef& CMsgProtoDefID::instance_def_type_quest() const {
  // @@protoc_insertion_point(field_get:CMsgProtoDefID.instance_def_type_quest)
  return _internal_instance_def_type_quest();
}
inline ::CMsgQuestDef* CMsgProtoDefID::unsafe_arena_release_instance_def_type_quest() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CMsgProtoDefID.instance_def_type_quest)
  if (_internal_has_instance_def_type_quest()) {
    clear_has_instance();
    ::CMsgQuestDef* temp = instance_.instance_def_type_quest_;
    instance_.instance_def_type_quest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CMsgProtoDefID::unsafe_arena_set_allocated_instance_def_type_quest(::CMsgQuestDef* instance_def_type_quest) {
  clear_instance();
  if (instance_def_type_quest) {
    set_has_instance_def_type_quest();
    instance_.instance_def_type_quest_ = instance_def_type_quest;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgProtoDefID.instance_def_type_quest)
}
inline ::CMsgQuestDef* CMsgProtoDefID::_internal_mutable_instance_def_type_quest() {
  if (!_internal_has_instance_def_type_quest()) {
    clear_instance();
    set_has_instance_def_type_quest();
    instance_.instance_def_type_quest_ = CreateMaybeMessage< ::CMsgQuestDef >(GetArenaForAllocation());
  }
  return instance_.instance_def_type_quest_;
}
inline ::CMsgQuestDef* CMsgProtoDefID::mutable_instance_def_type_quest() {
  // @@protoc_insertion_point(field_mutable:CMsgProtoDefID.instance_def_type_quest)
  return _internal_mutable_instance_def_type_quest();
}

// .CMsgQuestObjectiveDef instance_def_type_quest_objective = 8;
inline bool CMsgProtoDefID::_internal_has_instance_def_type_quest_objective() const {
  return instance_case() == kInstanceDefTypeQuestObjective;
}
inline bool CMsgProtoDefID::has_instance_def_type_quest_objective() const {
  return _internal_has_instance_def_type_quest_objective();
}
inline void CMsgProtoDefID::set_has_instance_def_type_quest_objective() {
  _oneof_case_[0] = kInstanceDefTypeQuestObjective;
}
inline void CMsgProtoDefID::clear_instance_def_type_quest_objective() {
  if (_internal_has_instance_def_type_quest_objective()) {
    if (GetArenaForAllocation() == nullptr) {
      delete instance_.instance_def_type_quest_objective_;
    }
    clear_has_instance();
  }
}
inline ::CMsgQuestObjectiveDef* CMsgProtoDefID::release_instance_def_type_quest_objective() {
  // @@protoc_insertion_point(field_release:CMsgProtoDefID.instance_def_type_quest_objective)
  if (_internal_has_instance_def_type_quest_objective()) {
    clear_has_instance();
      ::CMsgQuestObjectiveDef* temp = instance_.instance_def_type_quest_objective_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    instance_.instance_def_type_quest_objective_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CMsgQuestObjectiveDef& CMsgProtoDefID::_internal_instance_def_type_quest_objective() const {
  return _internal_has_instance_def_type_quest_objective()
      ? *instance_.instance_def_type_quest_objective_
      : reinterpret_cast< ::CMsgQuestObjectiveDef&>(::_CMsgQuestObjectiveDef_default_instance_);
}
inline const ::CMsgQuestObjectiveDef& CMsgProtoDefID::instance_def_type_quest_objective() const {
  // @@protoc_insertion_point(field_get:CMsgProtoDefID.instance_def_type_quest_objective)
  return _internal_instance_def_type_quest_objective();
}
inline ::CMsgQuestObjectiveDef* CMsgProtoDefID::unsafe_arena_release_instance_def_type_quest_objective() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CMsgProtoDefID.instance_def_type_quest_objective)
  if (_internal_has_instance_def_type_quest_objective()) {
    clear_has_instance();
    ::CMsgQuestObjectiveDef* temp = instance_.instance_def_type_quest_objective_;
    instance_.instance_def_type_quest_objective_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CMsgProtoDefID::unsafe_arena_set_allocated_instance_def_type_quest_objective(::CMsgQuestObjectiveDef* instance_def_type_quest_objective) {
  clear_instance();
  if (instance_def_type_quest_objective) {
    set_has_instance_def_type_quest_objective();
    instance_.instance_def_type_quest_objective_ = instance_def_type_quest_objective;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgProtoDefID.instance_def_type_quest_objective)
}
inline ::CMsgQuestObjectiveDef* CMsgProtoDefID::_internal_mutable_instance_def_type_quest_objective() {
  if (!_internal_has_instance_def_type_quest_objective()) {
    clear_instance();
    set_has_instance_def_type_quest_objective();
    instance_.instance_def_type_quest_objective_ = CreateMaybeMessage< ::CMsgQuestObjectiveDef >(GetArenaForAllocation());
  }
  return instance_.instance_def_type_quest_objective_;
}
inline ::CMsgQuestObjectiveDef* CMsgProtoDefID::mutable_instance_def_type_quest_objective() {
  // @@protoc_insertion_point(field_mutable:CMsgProtoDefID.instance_def_type_quest_objective)
  return _internal_mutable_instance_def_type_quest_objective();
}

// .CMsgPaintKit_Variables instance_def_type_paintkit_variables = 9;
inline bool CMsgProtoDefID::_internal_has_instance_def_type_paintkit_variables() const {
  return instance_case() == kInstanceDefTypePaintkitVariables;
}
inline bool CMsgProtoDefID::has_instance_def_type_paintkit_variables() const {
  return _internal_has_instance_def_type_paintkit_variables();
}
inline void CMsgProtoDefID::set_has_instance_def_type_paintkit_variables() {
  _oneof_case_[0] = kInstanceDefTypePaintkitVariables;
}
inline void CMsgProtoDefID::clear_instance_def_type_paintkit_variables() {
  if (_internal_has_instance_def_type_paintkit_variables()) {
    if (GetArenaForAllocation() == nullptr) {
      delete instance_.instance_def_type_paintkit_variables_;
    }
    clear_has_instance();
  }
}
inline ::CMsgPaintKit_Variables* CMsgProtoDefID::release_instance_def_type_paintkit_variables() {
  // @@protoc_insertion_point(field_release:CMsgProtoDefID.instance_def_type_paintkit_variables)
  if (_internal_has_instance_def_type_paintkit_variables()) {
    clear_has_instance();
      ::CMsgPaintKit_Variables* temp = instance_.instance_def_type_paintkit_variables_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    instance_.instance_def_type_paintkit_variables_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CMsgPaintKit_Variables& CMsgProtoDefID::_internal_instance_def_type_paintkit_variables() const {
  return _internal_has_instance_def_type_paintkit_variables()
      ? *instance_.instance_def_type_paintkit_variables_
      : reinterpret_cast< ::CMsgPaintKit_Variables&>(::_CMsgPaintKit_Variables_default_instance_);
}
inline const ::CMsgPaintKit_Variables& CMsgProtoDefID::instance_def_type_paintkit_variables() const {
  // @@protoc_insertion_point(field_get:CMsgProtoDefID.instance_def_type_paintkit_variables)
  return _internal_instance_def_type_paintkit_variables();
}
inline ::CMsgPaintKit_Variables* CMsgProtoDefID::unsafe_arena_release_instance_def_type_paintkit_variables() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CMsgProtoDefID.instance_def_type_paintkit_variables)
  if (_internal_has_instance_def_type_paintkit_variables()) {
    clear_has_instance();
    ::CMsgPaintKit_Variables* temp = instance_.instance_def_type_paintkit_variables_;
    instance_.instance_def_type_paintkit_variables_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CMsgProtoDefID::unsafe_arena_set_allocated_instance_def_type_paintkit_variables(::CMsgPaintKit_Variables* instance_def_type_paintkit_variables) {
  clear_instance();
  if (instance_def_type_paintkit_variables) {
    set_has_instance_def_type_paintkit_variables();
    instance_.instance_def_type_paintkit_variables_ = instance_def_type_paintkit_variables;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgProtoDefID.instance_def_type_paintkit_variables)
}
inline ::CMsgPaintKit_Variables* CMsgProtoDefID::_internal_mutable_instance_def_type_paintkit_variables() {
  if (!_internal_has_instance_def_type_paintkit_variables()) {
    clear_instance();
    set_has_instance_def_type_paintkit_variables();
    instance_.instance_def_type_paintkit_variables_ = CreateMaybeMessage< ::CMsgPaintKit_Variables >(GetArenaForAllocation());
  }
  return instance_.instance_def_type_paintkit_variables_;
}
inline ::CMsgPaintKit_Variables* CMsgProtoDefID::mutable_instance_def_type_paintkit_variables() {
  // @@protoc_insertion_point(field_mutable:CMsgProtoDefID.instance_def_type_paintkit_variables)
  return _internal_mutable_instance_def_type_paintkit_variables();
}

// .CMsgPaintKit_Operation instance_def_type_paintkit_operation = 10;
inline bool CMsgProtoDefID::_internal_has_instance_def_type_paintkit_operation() const {
  return instance_case() == kInstanceDefTypePaintkitOperation;
}
inline bool CMsgProtoDefID::has_instance_def_type_paintkit_operation() const {
  return _internal_has_instance_def_type_paintkit_operation();
}
inline void CMsgProtoDefID::set_has_instance_def_type_paintkit_operation() {
  _oneof_case_[0] = kInstanceDefTypePaintkitOperation;
}
inline void CMsgProtoDefID::clear_instance_def_type_paintkit_operation() {
  if (_internal_has_instance_def_type_paintkit_operation()) {
    if (GetArenaForAllocation() == nullptr) {
      delete instance_.instance_def_type_paintkit_operation_;
    }
    clear_has_instance();
  }
}
inline ::CMsgPaintKit_Operation* CMsgProtoDefID::release_instance_def_type_paintkit_operation() {
  // @@protoc_insertion_point(field_release:CMsgProtoDefID.instance_def_type_paintkit_operation)
  if (_internal_has_instance_def_type_paintkit_operation()) {
    clear_has_instance();
      ::CMsgPaintKit_Operation* temp = instance_.instance_def_type_paintkit_operation_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    instance_.instance_def_type_paintkit_operation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CMsgPaintKit_Operation& CMsgProtoDefID::_internal_instance_def_type_paintkit_operation() const {
  return _internal_has_instance_def_type_paintkit_operation()
      ? *instance_.instance_def_type_paintkit_operation_
      : reinterpret_cast< ::CMsgPaintKit_Operation&>(::_CMsgPaintKit_Operation_default_instance_);
}
inline const ::CMsgPaintKit_Operation& CMsgProtoDefID::instance_def_type_paintkit_operation() const {
  // @@protoc_insertion_point(field_get:CMsgProtoDefID.instance_def_type_paintkit_operation)
  return _internal_instance_def_type_paintkit_operation();
}
inline ::CMsgPaintKit_Operation* CMsgProtoDefID::unsafe_arena_release_instance_def_type_paintkit_operation() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CMsgProtoDefID.instance_def_type_paintkit_operation)
  if (_internal_has_instance_def_type_paintkit_operation()) {
    clear_has_instance();
    ::CMsgPaintKit_Operation* temp = instance_.instance_def_type_paintkit_operation_;
    instance_.instance_def_type_paintkit_operation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CMsgProtoDefID::unsafe_arena_set_allocated_instance_def_type_paintkit_operation(::CMsgPaintKit_Operation* instance_def_type_paintkit_operation) {
  clear_instance();
  if (instance_def_type_paintkit_operation) {
    set_has_instance_def_type_paintkit_operation();
    instance_.instance_def_type_paintkit_operation_ = instance_def_type_paintkit_operation;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgProtoDefID.instance_def_type_paintkit_operation)
}
inline ::CMsgPaintKit_Operation* CMsgProtoDefID::_internal_mutable_instance_def_type_paintkit_operation() {
  if (!_internal_has_instance_def_type_paintkit_operation()) {
    clear_instance();
    set_has_instance_def_type_paintkit_operation();
    instance_.instance_def_type_paintkit_operation_ = CreateMaybeMessage< ::CMsgPaintKit_Operation >(GetArenaForAllocation());
  }
  return instance_.instance_def_type_paintkit_operation_;
}
inline ::CMsgPaintKit_Operation* CMsgProtoDefID::mutable_instance_def_type_paintkit_operation() {
  // @@protoc_insertion_point(field_mutable:CMsgProtoDefID.instance_def_type_paintkit_operation)
  return _internal_mutable_instance_def_type_paintkit_operation();
}

// .CMsgPaintKit_ItemDefinition instance_def_type_paintkit_item_definition = 11;
inline bool CMsgProtoDefID::_internal_has_instance_def_type_paintkit_item_definition() const {
  return instance_case() == kInstanceDefTypePaintkitItemDefinition;
}
inline bool CMsgProtoDefID::has_instance_def_type_paintkit_item_definition() const {
  return _internal_has_instance_def_type_paintkit_item_definition();
}
inline void CMsgProtoDefID::set_has_instance_def_type_paintkit_item_definition() {
  _oneof_case_[0] = kInstanceDefTypePaintkitItemDefinition;
}
inline void CMsgProtoDefID::clear_instance_def_type_paintkit_item_definition() {
  if (_internal_has_instance_def_type_paintkit_item_definition()) {
    if (GetArenaForAllocation() == nullptr) {
      delete instance_.instance_def_type_paintkit_item_definition_;
    }
    clear_has_instance();
  }
}
inline ::CMsgPaintKit_ItemDefinition* CMsgProtoDefID::release_instance_def_type_paintkit_item_definition() {
  // @@protoc_insertion_point(field_release:CMsgProtoDefID.instance_def_type_paintkit_item_definition)
  if (_internal_has_instance_def_type_paintkit_item_definition()) {
    clear_has_instance();
      ::CMsgPaintKit_ItemDefinition* temp = instance_.instance_def_type_paintkit_item_definition_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    instance_.instance_def_type_paintkit_item_definition_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CMsgPaintKit_ItemDefinition& CMsgProtoDefID::_internal_instance_def_type_paintkit_item_definition() const {
  return _internal_has_instance_def_type_paintkit_item_definition()
      ? *instance_.instance_def_type_paintkit_item_definition_
      : reinterpret_cast< ::CMsgPaintKit_ItemDefinition&>(::_CMsgPaintKit_ItemDefinition_default_instance_);
}
inline const ::CMsgPaintKit_ItemDefinition& CMsgProtoDefID::instance_def_type_paintkit_item_definition() const {
  // @@protoc_insertion_point(field_get:CMsgProtoDefID.instance_def_type_paintkit_item_definition)
  return _internal_instance_def_type_paintkit_item_definition();
}
inline ::CMsgPaintKit_ItemDefinition* CMsgProtoDefID::unsafe_arena_release_instance_def_type_paintkit_item_definition() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CMsgProtoDefID.instance_def_type_paintkit_item_definition)
  if (_internal_has_instance_def_type_paintkit_item_definition()) {
    clear_has_instance();
    ::CMsgPaintKit_ItemDefinition* temp = instance_.instance_def_type_paintkit_item_definition_;
    instance_.instance_def_type_paintkit_item_definition_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CMsgProtoDefID::unsafe_arena_set_allocated_instance_def_type_paintkit_item_definition(::CMsgPaintKit_ItemDefinition* instance_def_type_paintkit_item_definition) {
  clear_instance();
  if (instance_def_type_paintkit_item_definition) {
    set_has_instance_def_type_paintkit_item_definition();
    instance_.instance_def_type_paintkit_item_definition_ = instance_def_type_paintkit_item_definition;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgProtoDefID.instance_def_type_paintkit_item_definition)
}
inline ::CMsgPaintKit_ItemDefinition* CMsgProtoDefID::_internal_mutable_instance_def_type_paintkit_item_definition() {
  if (!_internal_has_instance_def_type_paintkit_item_definition()) {
    clear_instance();
    set_has_instance_def_type_paintkit_item_definition();
    instance_.instance_def_type_paintkit_item_definition_ = CreateMaybeMessage< ::CMsgPaintKit_ItemDefinition >(GetArenaForAllocation());
  }
  return instance_.instance_def_type_paintkit_item_definition_;
}
inline ::CMsgPaintKit_ItemDefinition* CMsgProtoDefID::mutable_instance_def_type_paintkit_item_definition() {
  // @@protoc_insertion_point(field_mutable:CMsgProtoDefID.instance_def_type_paintkit_item_definition)
  return _internal_mutable_instance_def_type_paintkit_item_definition();
}

// .CMsgPaintKit_Definition instance_def_type_paintkit_definition = 12;
inline bool CMsgProtoDefID::_internal_has_instance_def_type_paintkit_definition() const {
  return instance_case() == kInstanceDefTypePaintkitDefinition;
}
inline bool CMsgProtoDefID::has_instance_def_type_paintkit_definition() const {
  return _internal_has_instance_def_type_paintkit_definition();
}
inline void CMsgProtoDefID::set_has_instance_def_type_paintkit_definition() {
  _oneof_case_[0] = kInstanceDefTypePaintkitDefinition;
}
inline void CMsgProtoDefID::clear_instance_def_type_paintkit_definition() {
  if (_internal_has_instance_def_type_paintkit_definition()) {
    if (GetArenaForAllocation() == nullptr) {
      delete instance_.instance_def_type_paintkit_definition_;
    }
    clear_has_instance();
  }
}
inline ::CMsgPaintKit_Definition* CMsgProtoDefID::release_instance_def_type_paintkit_definition() {
  // @@protoc_insertion_point(field_release:CMsgProtoDefID.instance_def_type_paintkit_definition)
  if (_internal_has_instance_def_type_paintkit_definition()) {
    clear_has_instance();
      ::CMsgPaintKit_Definition* temp = instance_.instance_def_type_paintkit_definition_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    instance_.instance_def_type_paintkit_definition_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CMsgPaintKit_Definition& CMsgProtoDefID::_internal_instance_def_type_paintkit_definition() const {
  return _internal_has_instance_def_type_paintkit_definition()
      ? *instance_.instance_def_type_paintkit_definition_
      : reinterpret_cast< ::CMsgPaintKit_Definition&>(::_CMsgPaintKit_Definition_default_instance_);
}
inline const ::CMsgPaintKit_Definition& CMsgProtoDefID::instance_def_type_paintkit_definition() const {
  // @@protoc_insertion_point(field_get:CMsgProtoDefID.instance_def_type_paintkit_definition)
  return _internal_instance_def_type_paintkit_definition();
}
inline ::CMsgPaintKit_Definition* CMsgProtoDefID::unsafe_arena_release_instance_def_type_paintkit_definition() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CMsgProtoDefID.instance_def_type_paintkit_definition)
  if (_internal_has_instance_def_type_paintkit_definition()) {
    clear_has_instance();
    ::CMsgPaintKit_Definition* temp = instance_.instance_def_type_paintkit_definition_;
    instance_.instance_def_type_paintkit_definition_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CMsgProtoDefID::unsafe_arena_set_allocated_instance_def_type_paintkit_definition(::CMsgPaintKit_Definition* instance_def_type_paintkit_definition) {
  clear_instance();
  if (instance_def_type_paintkit_definition) {
    set_has_instance_def_type_paintkit_definition();
    instance_.instance_def_type_paintkit_definition_ = instance_def_type_paintkit_definition;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgProtoDefID.instance_def_type_paintkit_definition)
}
inline ::CMsgPaintKit_Definition* CMsgProtoDefID::_internal_mutable_instance_def_type_paintkit_definition() {
  if (!_internal_has_instance_def_type_paintkit_definition()) {
    clear_instance();
    set_has_instance_def_type_paintkit_definition();
    instance_.instance_def_type_paintkit_definition_ = CreateMaybeMessage< ::CMsgPaintKit_Definition >(GetArenaForAllocation());
  }
  return instance_.instance_def_type_paintkit_definition_;
}
inline ::CMsgPaintKit_Definition* CMsgProtoDefID::mutable_instance_def_type_paintkit_definition() {
  // @@protoc_insertion_point(field_mutable:CMsgProtoDefID.instance_def_type_paintkit_definition)
  return _internal_mutable_instance_def_type_paintkit_definition();
}

// .CMsgHeaderOnly instance_def_type_header_only = 13;
inline bool CMsgProtoDefID::_internal_has_instance_def_type_header_only() const {
  return instance_case() == kInstanceDefTypeHeaderOnly;
}
inline bool CMsgProtoDefID::has_instance_def_type_header_only() const {
  return _internal_has_instance_def_type_header_only();
}
inline void CMsgProtoDefID::set_has_instance_def_type_header_only() {
  _oneof_case_[0] = kInstanceDefTypeHeaderOnly;
}
inline void CMsgProtoDefID::clear_instance_def_type_header_only() {
  if (_internal_has_instance_def_type_header_only()) {
    if (GetArenaForAllocation() == nullptr) {
      delete instance_.instance_def_type_header_only_;
    }
    clear_has_instance();
  }
}
inline ::CMsgHeaderOnly* CMsgProtoDefID::release_instance_def_type_header_only() {
  // @@protoc_insertion_point(field_release:CMsgProtoDefID.instance_def_type_header_only)
  if (_internal_has_instance_def_type_header_only()) {
    clear_has_instance();
      ::CMsgHeaderOnly* temp = instance_.instance_def_type_header_only_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    instance_.instance_def_type_header_only_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CMsgHeaderOnly& CMsgProtoDefID::_internal_instance_def_type_header_only() const {
  return _internal_has_instance_def_type_header_only()
      ? *instance_.instance_def_type_header_only_
      : reinterpret_cast< ::CMsgHeaderOnly&>(::_CMsgHeaderOnly_default_instance_);
}
inline const ::CMsgHeaderOnly& CMsgProtoDefID::instance_def_type_header_only() const {
  // @@protoc_insertion_point(field_get:CMsgProtoDefID.instance_def_type_header_only)
  return _internal_instance_def_type_header_only();
}
inline ::CMsgHeaderOnly* CMsgProtoDefID::unsafe_arena_release_instance_def_type_header_only() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CMsgProtoDefID.instance_def_type_header_only)
  if (_internal_has_instance_def_type_header_only()) {
    clear_has_instance();
    ::CMsgHeaderOnly* temp = instance_.instance_def_type_header_only_;
    instance_.instance_def_type_header_only_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CMsgProtoDefID::unsafe_arena_set_allocated_instance_def_type_header_only(::CMsgHeaderOnly* instance_def_type_header_only) {
  clear_instance();
  if (instance_def_type_header_only) {
    set_has_instance_def_type_header_only();
    instance_.instance_def_type_header_only_ = instance_def_type_header_only;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgProtoDefID.instance_def_type_header_only)
}
inline ::CMsgHeaderOnly* CMsgProtoDefID::_internal_mutable_instance_def_type_header_only() {
  if (!_internal_has_instance_def_type_header_only()) {
    clear_instance();
    set_has_instance_def_type_header_only();
    instance_.instance_def_type_header_only_ = CreateMaybeMessage< ::CMsgHeaderOnly >(GetArenaForAllocation());
  }
  return instance_.instance_def_type_header_only_;
}
inline ::CMsgHeaderOnly* CMsgProtoDefID::mutable_instance_def_type_header_only() {
  // @@protoc_insertion_point(field_mutable:CMsgProtoDefID.instance_def_type_header_only)
  return _internal_mutable_instance_def_type_header_only();
}

inline bool CMsgProtoDefID::has_instance() const {
  return instance_case() != INSTANCE_NOT_SET;
}
inline void CMsgProtoDefID::clear_has_instance() {
  _oneof_case_[0] = INSTANCE_NOT_SET;
}
inline CMsgProtoDefID::InstanceCase CMsgProtoDefID::instance_case() const {
  return CMsgProtoDefID::InstanceCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// CMsgQuestObjectiveDef

// required .CMsgProtoDefHeader header = 1;
inline bool CMsgQuestObjectiveDef::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool CMsgQuestObjectiveDef::has_header() const {
  return _internal_has_header();
}
inline void CMsgQuestObjectiveDef::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::CMsgProtoDefHeader& CMsgQuestObjectiveDef::_internal_header() const {
  const ::CMsgProtoDefHeader* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgProtoDefHeader&>(
      ::_CMsgProtoDefHeader_default_instance_);
}
inline const ::CMsgProtoDefHeader& CMsgQuestObjectiveDef::header() const {
  // @@protoc_insertion_point(field_get:CMsgQuestObjectiveDef.header)
  return _internal_header();
}
inline void CMsgQuestObjectiveDef::unsafe_arena_set_allocated_header(
    ::CMsgProtoDefHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgQuestObjectiveDef.header)
}
inline ::CMsgProtoDefHeader* CMsgQuestObjectiveDef::release_header() {
  _has_bits_[0] &= ~0x00000002u;
  ::CMsgProtoDefHeader* temp = header_;
  header_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgProtoDefHeader* CMsgQuestObjectiveDef::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:CMsgQuestObjectiveDef.header)
  _has_bits_[0] &= ~0x00000002u;
  ::CMsgProtoDefHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::CMsgProtoDefHeader* CMsgQuestObjectiveDef::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000002u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgProtoDefHeader>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::CMsgProtoDefHeader* CMsgQuestObjectiveDef::mutable_header() {
  // @@protoc_insertion_point(field_mutable:CMsgQuestObjectiveDef.header)
  return _internal_mutable_header();
}
inline void CMsgQuestObjectiveDef::set_allocated_header(::CMsgProtoDefHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgProtoDefHeader>::GetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:CMsgQuestObjectiveDef.header)
}

// optional string loc_desctoken = 2 [(.localized) = true];
inline bool CMsgQuestObjectiveDef::_internal_has_loc_desctoken() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgQuestObjectiveDef::has_loc_desctoken() const {
  return _internal_has_loc_desctoken();
}
inline void CMsgQuestObjectiveDef::clear_loc_desctoken() {
  loc_desctoken_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgQuestObjectiveDef::loc_desctoken() const {
  // @@protoc_insertion_point(field_get:CMsgQuestObjectiveDef.loc_desctoken)
  return _internal_loc_desctoken();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgQuestObjectiveDef::set_loc_desctoken(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 loc_desctoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgQuestObjectiveDef.loc_desctoken)
}
inline std::string* CMsgQuestObjectiveDef::mutable_loc_desctoken() {
  // @@protoc_insertion_point(field_mutable:CMsgQuestObjectiveDef.loc_desctoken)
  return _internal_mutable_loc_desctoken();
}
inline const std::string& CMsgQuestObjectiveDef::_internal_loc_desctoken() const {
  return loc_desctoken_.Get();
}
inline void CMsgQuestObjectiveDef::_internal_set_loc_desctoken(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  loc_desctoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgQuestObjectiveDef::_internal_mutable_loc_desctoken() {
  _has_bits_[0] |= 0x00000001u;
  return loc_desctoken_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgQuestObjectiveDef::release_loc_desctoken() {
  // @@protoc_insertion_point(field_release:CMsgQuestObjectiveDef.loc_desctoken)
  if (!_internal_has_loc_desctoken()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return loc_desctoken_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CMsgQuestObjectiveDef::set_allocated_loc_desctoken(std::string* loc_desctoken) {
  if (loc_desctoken != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  loc_desctoken_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), loc_desctoken,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CMsgQuestObjectiveDef.loc_desctoken)
}

// optional uint32 points = 3;
inline bool CMsgQuestObjectiveDef::_internal_has_points() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgQuestObjectiveDef::has_points() const {
  return _internal_has_points();
}
inline void CMsgQuestObjectiveDef::clear_points() {
  points_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgQuestObjectiveDef::_internal_points() const {
  return points_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgQuestObjectiveDef::points() const {
  // @@protoc_insertion_point(field_get:CMsgQuestObjectiveDef.points)
  return _internal_points();
}
inline void CMsgQuestObjectiveDef::_internal_set_points(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  points_ = value;
}
inline void CMsgQuestObjectiveDef::set_points(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_points(value);
  // @@protoc_insertion_point(field_set:CMsgQuestObjectiveDef.points)
}

// optional uint32 conditions_defindex = 5;
inline bool CMsgQuestObjectiveDef::_internal_has_conditions_defindex() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgQuestObjectiveDef::has_conditions_defindex() const {
  return _internal_has_conditions_defindex();
}
inline void CMsgQuestObjectiveDef::clear_conditions_defindex() {
  conditions_defindex_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgQuestObjectiveDef::_internal_conditions_defindex() const {
  return conditions_defindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgQuestObjectiveDef::conditions_defindex() const {
  // @@protoc_insertion_point(field_get:CMsgQuestObjectiveDef.conditions_defindex)
  return _internal_conditions_defindex();
}
inline void CMsgQuestObjectiveDef::_internal_set_conditions_defindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  conditions_defindex_ = value;
}
inline void CMsgQuestObjectiveDef::set_conditions_defindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_conditions_defindex(value);
  // @@protoc_insertion_point(field_set:CMsgQuestObjectiveDef.conditions_defindex)
}

// repeated string map = 8 [(.display_name) = "Maps Modifier", (.comment) = "If set, the player must be on one of the listed maps to get credit."];
inline int CMsgQuestObjectiveDef::_internal_map_size() const {
  return map_.size();
}
inline int CMsgQuestObjectiveDef::map_size() const {
  return _internal_map_size();
}
inline void CMsgQuestObjectiveDef::clear_map() {
  map_.Clear();
}
inline std::string* CMsgQuestObjectiveDef::add_map() {
  // @@protoc_insertion_point(field_add_mutable:CMsgQuestObjectiveDef.map)
  return _internal_add_map();
}
inline const std::string& CMsgQuestObjectiveDef::_internal_map(int index) const {
  return map_.Get(index);
}
inline const std::string& CMsgQuestObjectiveDef::map(int index) const {
  // @@protoc_insertion_point(field_get:CMsgQuestObjectiveDef.map)
  return _internal_map(index);
}
inline std::string* CMsgQuestObjectiveDef::mutable_map(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgQuestObjectiveDef.map)
  return map_.Mutable(index);
}
inline void CMsgQuestObjectiveDef::set_map(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:CMsgQuestObjectiveDef.map)
  map_.Mutable(index)->assign(value);
}
inline void CMsgQuestObjectiveDef::set_map(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:CMsgQuestObjectiveDef.map)
  map_.Mutable(index)->assign(std::move(value));
}
inline void CMsgQuestObjectiveDef::set_map(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  map_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgQuestObjectiveDef.map)
}
inline void CMsgQuestObjectiveDef::set_map(int index, const char* value, size_t size) {
  map_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgQuestObjectiveDef.map)
}
inline std::string* CMsgQuestObjectiveDef::_internal_add_map() {
  return map_.Add();
}
inline void CMsgQuestObjectiveDef::add_map(const std::string& value) {
  map_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CMsgQuestObjectiveDef.map)
}
inline void CMsgQuestObjectiveDef::add_map(std::string&& value) {
  map_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CMsgQuestObjectiveDef.map)
}
inline void CMsgQuestObjectiveDef::add_map(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  map_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CMsgQuestObjectiveDef.map)
}
inline void CMsgQuestObjectiveDef::add_map(const char* value, size_t size) {
  map_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CMsgQuestObjectiveDef.map)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CMsgQuestObjectiveDef::map() const {
  // @@protoc_insertion_point(field_list:CMsgQuestObjectiveDef.map)
  return map_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CMsgQuestObjectiveDef::mutable_map() {
  // @@protoc_insertion_point(field_mutable_list:CMsgQuestObjectiveDef.map)
  return &map_;
}

// repeated .CMsgQuestObjectiveDef.ETF2GameModes game_mode = 9 [(.display_name) = "Game Mode Modifier", (.comment) = "If set, the player must be in one of the listed game modes to get credit."];
inline int CMsgQuestObjectiveDef::_internal_game_mode_size() const {
  return game_mode_.size();
}
inline int CMsgQuestObjectiveDef::game_mode_size() const {
  return _internal_game_mode_size();
}
inline void CMsgQuestObjectiveDef::clear_game_mode() {
  game_mode_.Clear();
}
inline ::CMsgQuestObjectiveDef_ETF2GameModes CMsgQuestObjectiveDef::_internal_game_mode(int index) const {
  return static_cast< ::CMsgQuestObjectiveDef_ETF2GameModes >(game_mode_.Get(index));
}
inline ::CMsgQuestObjectiveDef_ETF2GameModes CMsgQuestObjectiveDef::game_mode(int index) const {
  // @@protoc_insertion_point(field_get:CMsgQuestObjectiveDef.game_mode)
  return _internal_game_mode(index);
}
inline void CMsgQuestObjectiveDef::set_game_mode(int index, ::CMsgQuestObjectiveDef_ETF2GameModes value) {
  assert(::CMsgQuestObjectiveDef_ETF2GameModes_IsValid(value));
  game_mode_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgQuestObjectiveDef.game_mode)
}
inline void CMsgQuestObjectiveDef::_internal_add_game_mode(::CMsgQuestObjectiveDef_ETF2GameModes value) {
  assert(::CMsgQuestObjectiveDef_ETF2GameModes_IsValid(value));
  game_mode_.Add(value);
}
inline void CMsgQuestObjectiveDef::add_game_mode(::CMsgQuestObjectiveDef_ETF2GameModes value) {
  // @@protoc_insertion_point(field_add:CMsgQuestObjectiveDef.game_mode)
  _internal_add_game_mode(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
CMsgQuestObjectiveDef::game_mode() const {
  // @@protoc_insertion_point(field_list:CMsgQuestObjectiveDef.game_mode)
  return game_mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
CMsgQuestObjectiveDef::_internal_mutable_game_mode() {
  return &game_mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
CMsgQuestObjectiveDef::mutable_game_mode() {
  // @@protoc_insertion_point(field_mutable_list:CMsgQuestObjectiveDef.game_mode)
  return _internal_mutable_game_mode();
}

// optional .CMsgQuestObjectiveDef.ETF2Team team = 10 [default = TF_TEAM_RED, (.display_name) = "Team Modifier", (.comment) = "If set, the player must be on the specified team to get credit."];
inline bool CMsgQuestObjectiveDef::_internal_has_team() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgQuestObjectiveDef::has_team() const {
  return _internal_has_team();
}
inline void CMsgQuestObjectiveDef::clear_team() {
  team_ = 2;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::CMsgQuestObjectiveDef_ETF2Team CMsgQuestObjectiveDef::_internal_team() const {
  return static_cast< ::CMsgQuestObjectiveDef_ETF2Team >(team_);
}
inline ::CMsgQuestObjectiveDef_ETF2Team CMsgQuestObjectiveDef::team() const {
  // @@protoc_insertion_point(field_get:CMsgQuestObjectiveDef.team)
  return _internal_team();
}
inline void CMsgQuestObjectiveDef::_internal_set_team(::CMsgQuestObjectiveDef_ETF2Team value) {
  assert(::CMsgQuestObjectiveDef_ETF2Team_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  team_ = value;
}
inline void CMsgQuestObjectiveDef::set_team(::CMsgQuestObjectiveDef_ETF2Team value) {
  _internal_set_team(value);
  // @@protoc_insertion_point(field_set:CMsgQuestObjectiveDef.team)
}

// repeated .CMsgVarField condition_vars = 11 [(.display_name) = "Objective Vars", (.var_field_type) = VAR_TYPE_STRING];
inline int CMsgQuestObjectiveDef::_internal_condition_vars_size() const {
  return condition_vars_.size();
}
inline int CMsgQuestObjectiveDef::condition_vars_size() const {
  return _internal_condition_vars_size();
}
inline void CMsgQuestObjectiveDef::clear_condition_vars() {
  condition_vars_.Clear();
}
inline ::CMsgVarField* CMsgQuestObjectiveDef::mutable_condition_vars(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgQuestObjectiveDef.condition_vars)
  return condition_vars_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgVarField >*
CMsgQuestObjectiveDef::mutable_condition_vars() {
  // @@protoc_insertion_point(field_mutable_list:CMsgQuestObjectiveDef.condition_vars)
  return &condition_vars_;
}
inline const ::CMsgVarField& CMsgQuestObjectiveDef::_internal_condition_vars(int index) const {
  return condition_vars_.Get(index);
}
inline const ::CMsgVarField& CMsgQuestObjectiveDef::condition_vars(int index) const {
  // @@protoc_insertion_point(field_get:CMsgQuestObjectiveDef.condition_vars)
  return _internal_condition_vars(index);
}
inline ::CMsgVarField* CMsgQuestObjectiveDef::_internal_add_condition_vars() {
  return condition_vars_.Add();
}
inline ::CMsgVarField* CMsgQuestObjectiveDef::add_condition_vars() {
  // @@protoc_insertion_point(field_add:CMsgQuestObjectiveDef.condition_vars)
  return _internal_add_condition_vars();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgVarField >&
CMsgQuestObjectiveDef::condition_vars() const {
  // @@protoc_insertion_point(field_list:CMsgQuestObjectiveDef.condition_vars)
  return condition_vars_;
}

// repeated .CMsgVarField classes_vars = 12 [(.display_name) = "Class Modifier", (.var_field_type) = VAR_TYPE_STRING];
inline int CMsgQuestObjectiveDef::_internal_classes_vars_size() const {
  return classes_vars_.size();
}
inline int CMsgQuestObjectiveDef::classes_vars_size() const {
  return _internal_classes_vars_size();
}
inline void CMsgQuestObjectiveDef::clear_classes_vars() {
  classes_vars_.Clear();
}
inline ::CMsgVarField* CMsgQuestObjectiveDef::mutable_classes_vars(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgQuestObjectiveDef.classes_vars)
  return classes_vars_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgVarField >*
CMsgQuestObjectiveDef::mutable_classes_vars() {
  // @@protoc_insertion_point(field_mutable_list:CMsgQuestObjectiveDef.classes_vars)
  return &classes_vars_;
}
inline const ::CMsgVarField& CMsgQuestObjectiveDef::_internal_classes_vars(int index) const {
  return classes_vars_.Get(index);
}
inline const ::CMsgVarField& CMsgQuestObjectiveDef::classes_vars(int index) const {
  // @@protoc_insertion_point(field_get:CMsgQuestObjectiveDef.classes_vars)
  return _internal_classes_vars(index);
}
inline ::CMsgVarField* CMsgQuestObjectiveDef::_internal_add_classes_vars() {
  return classes_vars_.Add();
}
inline ::CMsgVarField* CMsgQuestObjectiveDef::add_classes_vars() {
  // @@protoc_insertion_point(field_add:CMsgQuestObjectiveDef.classes_vars)
  return _internal_add_classes_vars();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgVarField >&
CMsgQuestObjectiveDef::classes_vars() const {
  // @@protoc_insertion_point(field_list:CMsgQuestObjectiveDef.classes_vars)
  return classes_vars_;
}

// repeated .CMsgQuestObjectiveDef.ETF2Conditions conditions = 13 [(.display_name) = "Required Conds"];
inline int CMsgQuestObjectiveDef::_internal_conditions_size() const {
  return conditions_.size();
}
inline int CMsgQuestObjectiveDef::conditions_size() const {
  return _internal_conditions_size();
}
inline void CMsgQuestObjectiveDef::clear_conditions() {
  conditions_.Clear();
}
inline ::CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::_internal_conditions(int index) const {
  return static_cast< ::CMsgQuestObjectiveDef_ETF2Conditions >(conditions_.Get(index));
}
inline ::CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::conditions(int index) const {
  // @@protoc_insertion_point(field_get:CMsgQuestObjectiveDef.conditions)
  return _internal_conditions(index);
}
inline void CMsgQuestObjectiveDef::set_conditions(int index, ::CMsgQuestObjectiveDef_ETF2Conditions value) {
  assert(::CMsgQuestObjectiveDef_ETF2Conditions_IsValid(value));
  conditions_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgQuestObjectiveDef.conditions)
}
inline void CMsgQuestObjectiveDef::_internal_add_conditions(::CMsgQuestObjectiveDef_ETF2Conditions value) {
  assert(::CMsgQuestObjectiveDef_ETF2Conditions_IsValid(value));
  conditions_.Add(value);
}
inline void CMsgQuestObjectiveDef::add_conditions(::CMsgQuestObjectiveDef_ETF2Conditions value) {
  // @@protoc_insertion_point(field_add:CMsgQuestObjectiveDef.conditions)
  _internal_add_conditions(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
CMsgQuestObjectiveDef::conditions() const {
  // @@protoc_insertion_point(field_list:CMsgQuestObjectiveDef.conditions)
  return conditions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
CMsgQuestObjectiveDef::_internal_mutable_conditions() {
  return &conditions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
CMsgQuestObjectiveDef::mutable_conditions() {
  // @@protoc_insertion_point(field_mutable_list:CMsgQuestObjectiveDef.conditions)
  return _internal_mutable_conditions();
}

// optional .LogicalOperation condition_logic = 14 [default = AND, (.display_name) = "Condition Logic", (.comment) = "What kind of logic to use when evaluating the player\'s conditions."];
inline bool CMsgQuestObjectiveDef::_internal_has_condition_logic() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgQuestObjectiveDef::has_condition_logic() const {
  return _internal_has_condition_logic();
}
inline void CMsgQuestObjectiveDef::clear_condition_logic() {
  condition_logic_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::LogicalOperation CMsgQuestObjectiveDef::_internal_condition_logic() const {
  return static_cast< ::LogicalOperation >(condition_logic_);
}
inline ::LogicalOperation CMsgQuestObjectiveDef::condition_logic() const {
  // @@protoc_insertion_point(field_get:CMsgQuestObjectiveDef.condition_logic)
  return _internal_condition_logic();
}
inline void CMsgQuestObjectiveDef::_internal_set_condition_logic(::LogicalOperation value) {
  assert(::LogicalOperation_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  condition_logic_ = value;
}
inline void CMsgQuestObjectiveDef::set_condition_logic(::LogicalOperation value) {
  _internal_set_condition_logic(value);
  // @@protoc_insertion_point(field_set:CMsgQuestObjectiveDef.condition_logic)
}

// repeated string item_name = 15 [(.display_name) = "Required equipped item", (.comment) = "Require that this item be equipped in any slot."];
inline int CMsgQuestObjectiveDef::_internal_item_name_size() const {
  return item_name_.size();
}
inline int CMsgQuestObjectiveDef::item_name_size() const {
  return _internal_item_name_size();
}
inline void CMsgQuestObjectiveDef::clear_item_name() {
  item_name_.Clear();
}
inline std::string* CMsgQuestObjectiveDef::add_item_name() {
  // @@protoc_insertion_point(field_add_mutable:CMsgQuestObjectiveDef.item_name)
  return _internal_add_item_name();
}
inline const std::string& CMsgQuestObjectiveDef::_internal_item_name(int index) const {
  return item_name_.Get(index);
}
inline const std::string& CMsgQuestObjectiveDef::item_name(int index) const {
  // @@protoc_insertion_point(field_get:CMsgQuestObjectiveDef.item_name)
  return _internal_item_name(index);
}
inline std::string* CMsgQuestObjectiveDef::mutable_item_name(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgQuestObjectiveDef.item_name)
  return item_name_.Mutable(index);
}
inline void CMsgQuestObjectiveDef::set_item_name(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:CMsgQuestObjectiveDef.item_name)
  item_name_.Mutable(index)->assign(value);
}
inline void CMsgQuestObjectiveDef::set_item_name(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:CMsgQuestObjectiveDef.item_name)
  item_name_.Mutable(index)->assign(std::move(value));
}
inline void CMsgQuestObjectiveDef::set_item_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  item_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgQuestObjectiveDef.item_name)
}
inline void CMsgQuestObjectiveDef::set_item_name(int index, const char* value, size_t size) {
  item_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgQuestObjectiveDef.item_name)
}
inline std::string* CMsgQuestObjectiveDef::_internal_add_item_name() {
  return item_name_.Add();
}
inline void CMsgQuestObjectiveDef::add_item_name(const std::string& value) {
  item_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CMsgQuestObjectiveDef.item_name)
}
inline void CMsgQuestObjectiveDef::add_item_name(std::string&& value) {
  item_name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CMsgQuestObjectiveDef.item_name)
}
inline void CMsgQuestObjectiveDef::add_item_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  item_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CMsgQuestObjectiveDef.item_name)
}
inline void CMsgQuestObjectiveDef::add_item_name(const char* value, size_t size) {
  item_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CMsgQuestObjectiveDef.item_name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CMsgQuestObjectiveDef::item_name() const {
  // @@protoc_insertion_point(field_list:CMsgQuestObjectiveDef.item_name)
  return item_name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CMsgQuestObjectiveDef::mutable_item_name() {
  // @@protoc_insertion_point(field_mutable_list:CMsgQuestObjectiveDef.item_name)
  return &item_name_;
}

// optional .LogicalOperation item_logic = 16 [default = AND, (.display_name) = "Item logic", (.comment) = "What kind of logic to use when evaluating the player\'s items."];
inline bool CMsgQuestObjectiveDef::_internal_has_item_logic() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgQuestObjectiveDef::has_item_logic() const {
  return _internal_has_item_logic();
}
inline void CMsgQuestObjectiveDef::clear_item_logic() {
  item_logic_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::LogicalOperation CMsgQuestObjectiveDef::_internal_item_logic() const {
  return static_cast< ::LogicalOperation >(item_logic_);
}
inline ::LogicalOperation CMsgQuestObjectiveDef::item_logic() const {
  // @@protoc_insertion_point(field_get:CMsgQuestObjectiveDef.item_logic)
  return _internal_item_logic();
}
inline void CMsgQuestObjectiveDef::_internal_set_item_logic(::LogicalOperation value) {
  assert(::LogicalOperation_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  item_logic_ = value;
}
inline void CMsgQuestObjectiveDef::set_item_logic(::LogicalOperation value) {
  _internal_set_item_logic(value);
  // @@protoc_insertion_point(field_set:CMsgQuestObjectiveDef.item_logic)
}

// optional uint32 jump_state = 17 [(.display_name) = "Jump logic", (.comment) = "What state of jumping the player needs to be in."];
inline bool CMsgQuestObjectiveDef::_internal_has_jump_state() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgQuestObjectiveDef::has_jump_state() const {
  return _internal_has_jump_state();
}
inline void CMsgQuestObjectiveDef::clear_jump_state() {
  jump_state_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgQuestObjectiveDef::_internal_jump_state() const {
  return jump_state_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgQuestObjectiveDef::jump_state() const {
  // @@protoc_insertion_point(field_get:CMsgQuestObjectiveDef.jump_state)
  return _internal_jump_state();
}
inline void CMsgQuestObjectiveDef::_internal_set_jump_state(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  jump_state_ = value;
}
inline void CMsgQuestObjectiveDef::set_jump_state(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_jump_state(value);
  // @@protoc_insertion_point(field_set:CMsgQuestObjectiveDef.jump_state)
}

// -------------------------------------------------------------------

// CMsgQuestDef_MMCriteria

// optional string group_name = 1;
inline bool CMsgQuestDef_MMCriteria::_internal_has_group_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgQuestDef_MMCriteria::has_group_name() const {
  return _internal_has_group_name();
}
inline void CMsgQuestDef_MMCriteria::clear_group_name() {
  group_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgQuestDef_MMCriteria::group_name() const {
  // @@protoc_insertion_point(field_get:CMsgQuestDef.MMCriteria.group_name)
  return _internal_group_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgQuestDef_MMCriteria::set_group_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 group_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgQuestDef.MMCriteria.group_name)
}
inline std::string* CMsgQuestDef_MMCriteria::mutable_group_name() {
  // @@protoc_insertion_point(field_mutable:CMsgQuestDef.MMCriteria.group_name)
  return _internal_mutable_group_name();
}
inline const std::string& CMsgQuestDef_MMCriteria::_internal_group_name() const {
  return group_name_.Get();
}
inline void CMsgQuestDef_MMCriteria::_internal_set_group_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  group_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgQuestDef_MMCriteria::_internal_mutable_group_name() {
  _has_bits_[0] |= 0x00000001u;
  return group_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgQuestDef_MMCriteria::release_group_name() {
  // @@protoc_insertion_point(field_release:CMsgQuestDef.MMCriteria.group_name)
  if (!_internal_has_group_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return group_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CMsgQuestDef_MMCriteria::set_allocated_group_name(std::string* group_name) {
  if (group_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  group_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), group_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CMsgQuestDef.MMCriteria.group_name)
}

// optional string category_name = 2;
inline bool CMsgQuestDef_MMCriteria::_internal_has_category_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgQuestDef_MMCriteria::has_category_name() const {
  return _internal_has_category_name();
}
inline void CMsgQuestDef_MMCriteria::clear_category_name() {
  category_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgQuestDef_MMCriteria::category_name() const {
  // @@protoc_insertion_point(field_get:CMsgQuestDef.MMCriteria.category_name)
  return _internal_category_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgQuestDef_MMCriteria::set_category_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 category_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgQuestDef.MMCriteria.category_name)
}
inline std::string* CMsgQuestDef_MMCriteria::mutable_category_name() {
  // @@protoc_insertion_point(field_mutable:CMsgQuestDef.MMCriteria.category_name)
  return _internal_mutable_category_name();
}
inline const std::string& CMsgQuestDef_MMCriteria::_internal_category_name() const {
  return category_name_.Get();
}
inline void CMsgQuestDef_MMCriteria::_internal_set_category_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  category_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgQuestDef_MMCriteria::_internal_mutable_category_name() {
  _has_bits_[0] |= 0x00000002u;
  return category_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgQuestDef_MMCriteria::release_category_name() {
  // @@protoc_insertion_point(field_release:CMsgQuestDef.MMCriteria.category_name)
  if (!_internal_has_category_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return category_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CMsgQuestDef_MMCriteria::set_allocated_category_name(std::string* category_name) {
  if (category_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  category_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), category_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CMsgQuestDef.MMCriteria.category_name)
}

// optional string map_name = 3;
inline bool CMsgQuestDef_MMCriteria::_internal_has_map_name() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgQuestDef_MMCriteria::has_map_name() const {
  return _internal_has_map_name();
}
inline void CMsgQuestDef_MMCriteria::clear_map_name() {
  map_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CMsgQuestDef_MMCriteria::map_name() const {
  // @@protoc_insertion_point(field_get:CMsgQuestDef.MMCriteria.map_name)
  return _internal_map_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgQuestDef_MMCriteria::set_map_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 map_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgQuestDef.MMCriteria.map_name)
}
inline std::string* CMsgQuestDef_MMCriteria::mutable_map_name() {
  // @@protoc_insertion_point(field_mutable:CMsgQuestDef.MMCriteria.map_name)
  return _internal_mutable_map_name();
}
inline const std::string& CMsgQuestDef_MMCriteria::_internal_map_name() const {
  return map_name_.Get();
}
inline void CMsgQuestDef_MMCriteria::_internal_set_map_name(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  map_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgQuestDef_MMCriteria::_internal_mutable_map_name() {
  _has_bits_[0] |= 0x00000004u;
  return map_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgQuestDef_MMCriteria::release_map_name() {
  // @@protoc_insertion_point(field_release:CMsgQuestDef.MMCriteria.map_name)
  if (!_internal_has_map_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return map_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CMsgQuestDef_MMCriteria::set_allocated_map_name(std::string* map_name) {
  if (map_name != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  map_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), map_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CMsgQuestDef.MMCriteria.map_name)
}

// -------------------------------------------------------------------

// CMsgQuestDef_ObjectiveInstance

// optional .CMsgProtoDefID objective = 1 [(.valid_type) = DEF_TYPE_QUEST_OBJECTIVE];
inline bool CMsgQuestDef_ObjectiveInstance::_internal_has_objective() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || objective_ != nullptr);
  return value;
}
inline bool CMsgQuestDef_ObjectiveInstance::has_objective() const {
  return _internal_has_objective();
}
inline void CMsgQuestDef_ObjectiveInstance::clear_objective() {
  if (objective_ != nullptr) objective_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgProtoDefID& CMsgQuestDef_ObjectiveInstance::_internal_objective() const {
  const ::CMsgProtoDefID* p = objective_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgProtoDefID&>(
      ::_CMsgProtoDefID_default_instance_);
}
inline const ::CMsgProtoDefID& CMsgQuestDef_ObjectiveInstance::objective() const {
  // @@protoc_insertion_point(field_get:CMsgQuestDef.ObjectiveInstance.objective)
  return _internal_objective();
}
inline void CMsgQuestDef_ObjectiveInstance::unsafe_arena_set_allocated_objective(
    ::CMsgProtoDefID* objective) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(objective_);
  }
  objective_ = objective;
  if (objective) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgQuestDef.ObjectiveInstance.objective)
}
inline ::CMsgProtoDefID* CMsgQuestDef_ObjectiveInstance::release_objective() {
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgProtoDefID* temp = objective_;
  objective_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgProtoDefID* CMsgQuestDef_ObjectiveInstance::unsafe_arena_release_objective() {
  // @@protoc_insertion_point(field_release:CMsgQuestDef.ObjectiveInstance.objective)
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgProtoDefID* temp = objective_;
  objective_ = nullptr;
  return temp;
}
inline ::CMsgProtoDefID* CMsgQuestDef_ObjectiveInstance::_internal_mutable_objective() {
  _has_bits_[0] |= 0x00000001u;
  if (objective_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgProtoDefID>(GetArenaForAllocation());
    objective_ = p;
  }
  return objective_;
}
inline ::CMsgProtoDefID* CMsgQuestDef_ObjectiveInstance::mutable_objective() {
  // @@protoc_insertion_point(field_mutable:CMsgQuestDef.ObjectiveInstance.objective)
  return _internal_mutable_objective();
}
inline void CMsgQuestDef_ObjectiveInstance::set_allocated_objective(::CMsgProtoDefID* objective) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete objective_;
  }
  if (objective) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgProtoDefID>::GetOwningArena(objective);
    if (message_arena != submessage_arena) {
      objective = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, objective, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  objective_ = objective;
  // @@protoc_insertion_point(field_set_allocated:CMsgQuestDef.ObjectiveInstance.objective)
}

// optional .EQuestPoints point_type = 2 [default = QUEST_POINTS_NOVICE];
inline bool CMsgQuestDef_ObjectiveInstance::_internal_has_point_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgQuestDef_ObjectiveInstance::has_point_type() const {
  return _internal_has_point_type();
}
inline void CMsgQuestDef_ObjectiveInstance::clear_point_type() {
  point_type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::EQuestPoints CMsgQuestDef_ObjectiveInstance::_internal_point_type() const {
  return static_cast< ::EQuestPoints >(point_type_);
}
inline ::EQuestPoints CMsgQuestDef_ObjectiveInstance::point_type() const {
  // @@protoc_insertion_point(field_get:CMsgQuestDef.ObjectiveInstance.point_type)
  return _internal_point_type();
}
inline void CMsgQuestDef_ObjectiveInstance::_internal_set_point_type(::EQuestPoints value) {
  assert(::EQuestPoints_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  point_type_ = value;
}
inline void CMsgQuestDef_ObjectiveInstance::set_point_type(::EQuestPoints value) {
  _internal_set_point_type(value);
  // @@protoc_insertion_point(field_set:CMsgQuestDef.ObjectiveInstance.point_type)
}

// optional uint32 point_value = 3 [(.display_name) = "Points Override", (.comment) = "Override value for the point value of the objective.  If not set, uses the objective\'s point value"];
inline bool CMsgQuestDef_ObjectiveInstance::_internal_has_point_value() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgQuestDef_ObjectiveInstance::has_point_value() const {
  return _internal_has_point_value();
}
inline void CMsgQuestDef_ObjectiveInstance::clear_point_value() {
  point_value_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgQuestDef_ObjectiveInstance::_internal_point_value() const {
  return point_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgQuestDef_ObjectiveInstance::point_value() const {
  // @@protoc_insertion_point(field_get:CMsgQuestDef.ObjectiveInstance.point_value)
  return _internal_point_value();
}
inline void CMsgQuestDef_ObjectiveInstance::_internal_set_point_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  point_value_ = value;
}
inline void CMsgQuestDef_ObjectiveInstance::set_point_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_point_value(value);
  // @@protoc_insertion_point(field_set:CMsgQuestDef.ObjectiveInstance.point_value)
}

// -------------------------------------------------------------------

// CMsgQuestDef

// required .CMsgProtoDefHeader header = 1;
inline bool CMsgQuestDef::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool CMsgQuestDef::has_header() const {
  return _internal_has_header();
}
inline void CMsgQuestDef::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::CMsgProtoDefHeader& CMsgQuestDef::_internal_header() const {
  const ::CMsgProtoDefHeader* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgProtoDefHeader&>(
      ::_CMsgProtoDefHeader_default_instance_);
}
inline const ::CMsgProtoDefHeader& CMsgQuestDef::header() const {
  // @@protoc_insertion_point(field_get:CMsgQuestDef.header)
  return _internal_header();
}
inline void CMsgQuestDef::unsafe_arena_set_allocated_header(
    ::CMsgProtoDefHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgQuestDef.header)
}
inline ::CMsgProtoDefHeader* CMsgQuestDef::release_header() {
  _has_bits_[0] &= ~0x00000010u;
  ::CMsgProtoDefHeader* temp = header_;
  header_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgProtoDefHeader* CMsgQuestDef::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:CMsgQuestDef.header)
  _has_bits_[0] &= ~0x00000010u;
  ::CMsgProtoDefHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::CMsgProtoDefHeader* CMsgQuestDef::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000010u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgProtoDefHeader>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::CMsgProtoDefHeader* CMsgQuestDef::mutable_header() {
  // @@protoc_insertion_point(field_mutable:CMsgQuestDef.header)
  return _internal_mutable_header();
}
inline void CMsgQuestDef::set_allocated_header(::CMsgProtoDefHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgProtoDefHeader>::GetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:CMsgQuestDef.header)
}

// optional uint32 max_points_0 = 2;
inline bool CMsgQuestDef::_internal_has_max_points_0() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgQuestDef::has_max_points_0() const {
  return _internal_has_max_points_0();
}
inline void CMsgQuestDef::clear_max_points_0() {
  max_points_0_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgQuestDef::_internal_max_points_0() const {
  return max_points_0_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgQuestDef::max_points_0() const {
  // @@protoc_insertion_point(field_get:CMsgQuestDef.max_points_0)
  return _internal_max_points_0();
}
inline void CMsgQuestDef::_internal_set_max_points_0(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  max_points_0_ = value;
}
inline void CMsgQuestDef::set_max_points_0(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_points_0(value);
  // @@protoc_insertion_point(field_set:CMsgQuestDef.max_points_0)
}

// optional uint32 max_points_1 = 3;
inline bool CMsgQuestDef::_internal_has_max_points_1() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgQuestDef::has_max_points_1() const {
  return _internal_has_max_points_1();
}
inline void CMsgQuestDef::clear_max_points_1() {
  max_points_1_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgQuestDef::_internal_max_points_1() const {
  return max_points_1_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgQuestDef::max_points_1() const {
  // @@protoc_insertion_point(field_get:CMsgQuestDef.max_points_1)
  return _internal_max_points_1();
}
inline void CMsgQuestDef::_internal_set_max_points_1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  max_points_1_ = value;
}
inline void CMsgQuestDef::set_max_points_1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_points_1(value);
  // @@protoc_insertion_point(field_set:CMsgQuestDef.max_points_1)
}

// optional uint32 max_points_2 = 4;
inline bool CMsgQuestDef::_internal_has_max_points_2() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgQuestDef::has_max_points_2() const {
  return _internal_has_max_points_2();
}
inline void CMsgQuestDef::clear_max_points_2() {
  max_points_2_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgQuestDef::_internal_max_points_2() const {
  return max_points_2_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgQuestDef::max_points_2() const {
  // @@protoc_insertion_point(field_get:CMsgQuestDef.max_points_2)
  return _internal_max_points_2();
}
inline void CMsgQuestDef::_internal_set_max_points_2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  max_points_2_ = value;
}
inline void CMsgQuestDef::set_max_points_2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_points_2(value);
  // @@protoc_insertion_point(field_set:CMsgQuestDef.max_points_2)
}

// optional string name_loctoken = 5 [(.localized) = true];
inline bool CMsgQuestDef::_internal_has_name_loctoken() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgQuestDef::has_name_loctoken() const {
  return _internal_has_name_loctoken();
}
inline void CMsgQuestDef::clear_name_loctoken() {
  name_loctoken_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgQuestDef::name_loctoken() const {
  // @@protoc_insertion_point(field_get:CMsgQuestDef.name_loctoken)
  return _internal_name_loctoken();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgQuestDef::set_name_loctoken(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_loctoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgQuestDef.name_loctoken)
}
inline std::string* CMsgQuestDef::mutable_name_loctoken() {
  // @@protoc_insertion_point(field_mutable:CMsgQuestDef.name_loctoken)
  return _internal_mutable_name_loctoken();
}
inline const std::string& CMsgQuestDef::_internal_name_loctoken() const {
  return name_loctoken_.Get();
}
inline void CMsgQuestDef::_internal_set_name_loctoken(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_loctoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgQuestDef::_internal_mutable_name_loctoken() {
  _has_bits_[0] |= 0x00000001u;
  return name_loctoken_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgQuestDef::release_name_loctoken() {
  // @@protoc_insertion_point(field_release:CMsgQuestDef.name_loctoken)
  if (!_internal_has_name_loctoken()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_loctoken_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CMsgQuestDef::set_allocated_name_loctoken(std::string* name_loctoken) {
  if (name_loctoken != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_loctoken_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name_loctoken,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CMsgQuestDef.name_loctoken)
}

// optional string operation = 7;
inline bool CMsgQuestDef::_internal_has_operation() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgQuestDef::has_operation() const {
  return _internal_has_operation();
}
inline void CMsgQuestDef::clear_operation() {
  operation_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgQuestDef::operation() const {
  // @@protoc_insertion_point(field_get:CMsgQuestDef.operation)
  return _internal_operation();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgQuestDef::set_operation(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 operation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgQuestDef.operation)
}
inline std::string* CMsgQuestDef::mutable_operation() {
  // @@protoc_insertion_point(field_mutable:CMsgQuestDef.operation)
  return _internal_mutable_operation();
}
inline const std::string& CMsgQuestDef::_internal_operation() const {
  return operation_.Get();
}
inline void CMsgQuestDef::_internal_set_operation(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  operation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgQuestDef::_internal_mutable_operation() {
  _has_bits_[0] |= 0x00000002u;
  return operation_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgQuestDef::release_operation() {
  // @@protoc_insertion_point(field_release:CMsgQuestDef.operation)
  if (!_internal_has_operation()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return operation_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CMsgQuestDef::set_allocated_operation(std::string* operation) {
  if (operation != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  operation_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), operation,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CMsgQuestDef.operation)
}

// optional .CMsgQuestDef.MMCriteria mm_criteria = 8;
inline bool CMsgQuestDef::_internal_has_mm_criteria() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || mm_criteria_ != nullptr);
  return value;
}
inline bool CMsgQuestDef::has_mm_criteria() const {
  return _internal_has_mm_criteria();
}
inline void CMsgQuestDef::clear_mm_criteria() {
  if (mm_criteria_ != nullptr) mm_criteria_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::CMsgQuestDef_MMCriteria& CMsgQuestDef::_internal_mm_criteria() const {
  const ::CMsgQuestDef_MMCriteria* p = mm_criteria_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgQuestDef_MMCriteria&>(
      ::_CMsgQuestDef_MMCriteria_default_instance_);
}
inline const ::CMsgQuestDef_MMCriteria& CMsgQuestDef::mm_criteria() const {
  // @@protoc_insertion_point(field_get:CMsgQuestDef.mm_criteria)
  return _internal_mm_criteria();
}
inline void CMsgQuestDef::unsafe_arena_set_allocated_mm_criteria(
    ::CMsgQuestDef_MMCriteria* mm_criteria) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mm_criteria_);
  }
  mm_criteria_ = mm_criteria;
  if (mm_criteria) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgQuestDef.mm_criteria)
}
inline ::CMsgQuestDef_MMCriteria* CMsgQuestDef::release_mm_criteria() {
  _has_bits_[0] &= ~0x00000020u;
  ::CMsgQuestDef_MMCriteria* temp = mm_criteria_;
  mm_criteria_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgQuestDef_MMCriteria* CMsgQuestDef::unsafe_arena_release_mm_criteria() {
  // @@protoc_insertion_point(field_release:CMsgQuestDef.mm_criteria)
  _has_bits_[0] &= ~0x00000020u;
  ::CMsgQuestDef_MMCriteria* temp = mm_criteria_;
  mm_criteria_ = nullptr;
  return temp;
}
inline ::CMsgQuestDef_MMCriteria* CMsgQuestDef::_internal_mutable_mm_criteria() {
  _has_bits_[0] |= 0x00000020u;
  if (mm_criteria_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgQuestDef_MMCriteria>(GetArenaForAllocation());
    mm_criteria_ = p;
  }
  return mm_criteria_;
}
inline ::CMsgQuestDef_MMCriteria* CMsgQuestDef::mutable_mm_criteria() {
  // @@protoc_insertion_point(field_mutable:CMsgQuestDef.mm_criteria)
  return _internal_mutable_mm_criteria();
}
inline void CMsgQuestDef::set_allocated_mm_criteria(::CMsgQuestDef_MMCriteria* mm_criteria) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete mm_criteria_;
  }
  if (mm_criteria) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgQuestDef_MMCriteria>::GetOwningArena(mm_criteria);
    if (message_arena != submessage_arena) {
      mm_criteria = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mm_criteria, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  mm_criteria_ = mm_criteria;
  // @@protoc_insertion_point(field_set_allocated:CMsgQuestDef.mm_criteria)
}

// optional string node_image = 12 [(.display_name) = "Node Image", (.comment) = "Filename of the image to show on the node view"];
inline bool CMsgQuestDef::_internal_has_node_image() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgQuestDef::has_node_image() const {
  return _internal_has_node_image();
}
inline void CMsgQuestDef::clear_node_image() {
  node_image_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CMsgQuestDef::node_image() const {
  // @@protoc_insertion_point(field_get:CMsgQuestDef.node_image)
  return _internal_node_image();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgQuestDef::set_node_image(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 node_image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgQuestDef.node_image)
}
inline std::string* CMsgQuestDef::mutable_node_image() {
  // @@protoc_insertion_point(field_mutable:CMsgQuestDef.node_image)
  return _internal_mutable_node_image();
}
inline const std::string& CMsgQuestDef::_internal_node_image() const {
  return node_image_.Get();
}
inline void CMsgQuestDef::_internal_set_node_image(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  node_image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgQuestDef::_internal_mutable_node_image() {
  _has_bits_[0] |= 0x00000004u;
  return node_image_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgQuestDef::release_node_image() {
  // @@protoc_insertion_point(field_release:CMsgQuestDef.node_image)
  if (!_internal_has_node_image()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return node_image_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CMsgQuestDef::set_allocated_node_image(std::string* node_image) {
  if (node_image != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  node_image_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), node_image,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CMsgQuestDef.node_image)
}

// optional string icon_image = 13 [(.display_name) = "Node Icon", (.comment) = "Which icon to show on the map"];
inline bool CMsgQuestDef::_internal_has_icon_image() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgQuestDef::has_icon_image() const {
  return _internal_has_icon_image();
}
inline void CMsgQuestDef::clear_icon_image() {
  icon_image_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CMsgQuestDef::icon_image() const {
  // @@protoc_insertion_point(field_get:CMsgQuestDef.icon_image)
  return _internal_icon_image();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgQuestDef::set_icon_image(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 icon_image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgQuestDef.icon_image)
}
inline std::string* CMsgQuestDef::mutable_icon_image() {
  // @@protoc_insertion_point(field_mutable:CMsgQuestDef.icon_image)
  return _internal_mutable_icon_image();
}
inline const std::string& CMsgQuestDef::_internal_icon_image() const {
  return icon_image_.Get();
}
inline void CMsgQuestDef::_internal_set_icon_image(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  icon_image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgQuestDef::_internal_mutable_icon_image() {
  _has_bits_[0] |= 0x00000008u;
  return icon_image_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgQuestDef::release_icon_image() {
  // @@protoc_insertion_point(field_release:CMsgQuestDef.icon_image)
  if (!_internal_has_icon_image()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return icon_image_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CMsgQuestDef::set_allocated_icon_image(std::string* icon_image) {
  if (icon_image != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  icon_image_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), icon_image,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CMsgQuestDef.icon_image)
}

// optional .CMsgProtoDefID theme = 14 [(.valid_type) = DEF_TYPE_QUEST_THEME];
inline bool CMsgQuestDef::_internal_has_theme() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || theme_ != nullptr);
  return value;
}
inline bool CMsgQuestDef::has_theme() const {
  return _internal_has_theme();
}
inline void CMsgQuestDef::clear_theme() {
  if (theme_ != nullptr) theme_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::CMsgProtoDefID& CMsgQuestDef::_internal_theme() const {
  const ::CMsgProtoDefID* p = theme_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgProtoDefID&>(
      ::_CMsgProtoDefID_default_instance_);
}
inline const ::CMsgProtoDefID& CMsgQuestDef::theme() const {
  // @@protoc_insertion_point(field_get:CMsgQuestDef.theme)
  return _internal_theme();
}
inline void CMsgQuestDef::unsafe_arena_set_allocated_theme(
    ::CMsgProtoDefID* theme) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(theme_);
  }
  theme_ = theme;
  if (theme) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgQuestDef.theme)
}
inline ::CMsgProtoDefID* CMsgQuestDef::release_theme() {
  _has_bits_[0] &= ~0x00000040u;
  ::CMsgProtoDefID* temp = theme_;
  theme_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgProtoDefID* CMsgQuestDef::unsafe_arena_release_theme() {
  // @@protoc_insertion_point(field_release:CMsgQuestDef.theme)
  _has_bits_[0] &= ~0x00000040u;
  ::CMsgProtoDefID* temp = theme_;
  theme_ = nullptr;
  return temp;
}
inline ::CMsgProtoDefID* CMsgQuestDef::_internal_mutable_theme() {
  _has_bits_[0] |= 0x00000040u;
  if (theme_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgProtoDefID>(GetArenaForAllocation());
    theme_ = p;
  }
  return theme_;
}
inline ::CMsgProtoDefID* CMsgQuestDef::mutable_theme() {
  // @@protoc_insertion_point(field_mutable:CMsgQuestDef.theme)
  return _internal_mutable_theme();
}
inline void CMsgQuestDef::set_allocated_theme(::CMsgProtoDefID* theme) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete theme_;
  }
  if (theme) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgProtoDefID>::GetOwningArena(theme);
    if (message_arena != submessage_arena) {
      theme = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, theme, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  theme_ = theme;
  // @@protoc_insertion_point(field_set_allocated:CMsgQuestDef.theme)
}

// repeated string loaner_names = 15 [(.display_name) = "Loaners", (.comment) = "Names of items to give as loaners"];
inline int CMsgQuestDef::_internal_loaner_names_size() const {
  return loaner_names_.size();
}
inline int CMsgQuestDef::loaner_names_size() const {
  return _internal_loaner_names_size();
}
inline void CMsgQuestDef::clear_loaner_names() {
  loaner_names_.Clear();
}
inline std::string* CMsgQuestDef::add_loaner_names() {
  // @@protoc_insertion_point(field_add_mutable:CMsgQuestDef.loaner_names)
  return _internal_add_loaner_names();
}
inline const std::string& CMsgQuestDef::_internal_loaner_names(int index) const {
  return loaner_names_.Get(index);
}
inline const std::string& CMsgQuestDef::loaner_names(int index) const {
  // @@protoc_insertion_point(field_get:CMsgQuestDef.loaner_names)
  return _internal_loaner_names(index);
}
inline std::string* CMsgQuestDef::mutable_loaner_names(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgQuestDef.loaner_names)
  return loaner_names_.Mutable(index);
}
inline void CMsgQuestDef::set_loaner_names(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:CMsgQuestDef.loaner_names)
  loaner_names_.Mutable(index)->assign(value);
}
inline void CMsgQuestDef::set_loaner_names(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:CMsgQuestDef.loaner_names)
  loaner_names_.Mutable(index)->assign(std::move(value));
}
inline void CMsgQuestDef::set_loaner_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  loaner_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgQuestDef.loaner_names)
}
inline void CMsgQuestDef::set_loaner_names(int index, const char* value, size_t size) {
  loaner_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgQuestDef.loaner_names)
}
inline std::string* CMsgQuestDef::_internal_add_loaner_names() {
  return loaner_names_.Add();
}
inline void CMsgQuestDef::add_loaner_names(const std::string& value) {
  loaner_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CMsgQuestDef.loaner_names)
}
inline void CMsgQuestDef::add_loaner_names(std::string&& value) {
  loaner_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CMsgQuestDef.loaner_names)
}
inline void CMsgQuestDef::add_loaner_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  loaner_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CMsgQuestDef.loaner_names)
}
inline void CMsgQuestDef::add_loaner_names(const char* value, size_t size) {
  loaner_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CMsgQuestDef.loaner_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CMsgQuestDef::loaner_names() const {
  // @@protoc_insertion_point(field_list:CMsgQuestDef.loaner_names)
  return loaner_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CMsgQuestDef::mutable_loaner_names() {
  // @@protoc_insertion_point(field_mutable_list:CMsgQuestDef.loaner_names)
  return &loaner_names_;
}

// repeated .CMsgQuestDef.ObjectiveInstance objectives = 16;
inline int CMsgQuestDef::_internal_objectives_size() const {
  return objectives_.size();
}
inline int CMsgQuestDef::objectives_size() const {
  return _internal_objectives_size();
}
inline void CMsgQuestDef::clear_objectives() {
  objectives_.Clear();
}
inline ::CMsgQuestDef_ObjectiveInstance* CMsgQuestDef::mutable_objectives(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgQuestDef.objectives)
  return objectives_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgQuestDef_ObjectiveInstance >*
CMsgQuestDef::mutable_objectives() {
  // @@protoc_insertion_point(field_mutable_list:CMsgQuestDef.objectives)
  return &objectives_;
}
inline const ::CMsgQuestDef_ObjectiveInstance& CMsgQuestDef::_internal_objectives(int index) const {
  return objectives_.Get(index);
}
inline const ::CMsgQuestDef_ObjectiveInstance& CMsgQuestDef::objectives(int index) const {
  // @@protoc_insertion_point(field_get:CMsgQuestDef.objectives)
  return _internal_objectives(index);
}
inline ::CMsgQuestDef_ObjectiveInstance* CMsgQuestDef::_internal_add_objectives() {
  return objectives_.Add();
}
inline ::CMsgQuestDef_ObjectiveInstance* CMsgQuestDef::add_objectives() {
  // @@protoc_insertion_point(field_add:CMsgQuestDef.objectives)
  return _internal_add_objectives();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgQuestDef_ObjectiveInstance >&
CMsgQuestDef::objectives() const {
  // @@protoc_insertion_point(field_list:CMsgQuestDef.objectives)
  return objectives_;
}

// repeated string map = 17 [(.display_name) = "Maps Modifier", (.comment) = "If set, the player must be on one of the listed maps to get credit."];
inline int CMsgQuestDef::_internal_map_size() const {
  return map_.size();
}
inline int CMsgQuestDef::map_size() const {
  return _internal_map_size();
}
inline void CMsgQuestDef::clear_map() {
  map_.Clear();
}
inline std::string* CMsgQuestDef::add_map() {
  // @@protoc_insertion_point(field_add_mutable:CMsgQuestDef.map)
  return _internal_add_map();
}
inline const std::string& CMsgQuestDef::_internal_map(int index) const {
  return map_.Get(index);
}
inline const std::string& CMsgQuestDef::map(int index) const {
  // @@protoc_insertion_point(field_get:CMsgQuestDef.map)
  return _internal_map(index);
}
inline std::string* CMsgQuestDef::mutable_map(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgQuestDef.map)
  return map_.Mutable(index);
}
inline void CMsgQuestDef::set_map(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:CMsgQuestDef.map)
  map_.Mutable(index)->assign(value);
}
inline void CMsgQuestDef::set_map(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:CMsgQuestDef.map)
  map_.Mutable(index)->assign(std::move(value));
}
inline void CMsgQuestDef::set_map(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  map_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgQuestDef.map)
}
inline void CMsgQuestDef::set_map(int index, const char* value, size_t size) {
  map_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgQuestDef.map)
}
inline std::string* CMsgQuestDef::_internal_add_map() {
  return map_.Add();
}
inline void CMsgQuestDef::add_map(const std::string& value) {
  map_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CMsgQuestDef.map)
}
inline void CMsgQuestDef::add_map(std::string&& value) {
  map_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CMsgQuestDef.map)
}
inline void CMsgQuestDef::add_map(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  map_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CMsgQuestDef.map)
}
inline void CMsgQuestDef::add_map(const char* value, size_t size) {
  map_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CMsgQuestDef.map)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CMsgQuestDef::map() const {
  // @@protoc_insertion_point(field_list:CMsgQuestDef.map)
  return map_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CMsgQuestDef::mutable_map() {
  // @@protoc_insertion_point(field_mutable_list:CMsgQuestDef.map)
  return &map_;
}

// -------------------------------------------------------------------

// CMsgQuestMapStoreItem

// required .CMsgProtoDefHeader header = 1;
inline bool CMsgQuestMapStoreItem::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool CMsgQuestMapStoreItem::has_header() const {
  return _internal_has_header();
}
inline void CMsgQuestMapStoreItem::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::CMsgProtoDefHeader& CMsgQuestMapStoreItem::_internal_header() const {
  const ::CMsgProtoDefHeader* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgProtoDefHeader&>(
      ::_CMsgProtoDefHeader_default_instance_);
}
inline const ::CMsgProtoDefHeader& CMsgQuestMapStoreItem::header() const {
  // @@protoc_insertion_point(field_get:CMsgQuestMapStoreItem.header)
  return _internal_header();
}
inline void CMsgQuestMapStoreItem::unsafe_arena_set_allocated_header(
    ::CMsgProtoDefHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgQuestMapStoreItem.header)
}
inline ::CMsgProtoDefHeader* CMsgQuestMapStoreItem::release_header() {
  _has_bits_[0] &= ~0x00000004u;
  ::CMsgProtoDefHeader* temp = header_;
  header_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgProtoDefHeader* CMsgQuestMapStoreItem::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:CMsgQuestMapStoreItem.header)
  _has_bits_[0] &= ~0x00000004u;
  ::CMsgProtoDefHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::CMsgProtoDefHeader* CMsgQuestMapStoreItem::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000004u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgProtoDefHeader>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::CMsgProtoDefHeader* CMsgQuestMapStoreItem::mutable_header() {
  // @@protoc_insertion_point(field_mutable:CMsgQuestMapStoreItem.header)
  return _internal_mutable_header();
}
inline void CMsgQuestMapStoreItem::set_allocated_header(::CMsgProtoDefHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgProtoDefHeader>::GetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:CMsgQuestMapStoreItem.header)
}

// optional string item_name = 2;
inline bool CMsgQuestMapStoreItem::_internal_has_item_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgQuestMapStoreItem::has_item_name() const {
  return _internal_has_item_name();
}
inline void CMsgQuestMapStoreItem::clear_item_name() {
  item_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgQuestMapStoreItem::item_name() const {
  // @@protoc_insertion_point(field_get:CMsgQuestMapStoreItem.item_name)
  return _internal_item_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgQuestMapStoreItem::set_item_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 item_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgQuestMapStoreItem.item_name)
}
inline std::string* CMsgQuestMapStoreItem::mutable_item_name() {
  // @@protoc_insertion_point(field_mutable:CMsgQuestMapStoreItem.item_name)
  return _internal_mutable_item_name();
}
inline const std::string& CMsgQuestMapStoreItem::_internal_item_name() const {
  return item_name_.Get();
}
inline void CMsgQuestMapStoreItem::_internal_set_item_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  item_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgQuestMapStoreItem::_internal_mutable_item_name() {
  _has_bits_[0] |= 0x00000001u;
  return item_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgQuestMapStoreItem::release_item_name() {
  // @@protoc_insertion_point(field_release:CMsgQuestMapStoreItem.item_name)
  if (!_internal_has_item_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return item_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CMsgQuestMapStoreItem::set_allocated_item_name(std::string* item_name) {
  if (item_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  item_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), item_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CMsgQuestMapStoreItem.item_name)
}

// optional string reward_lootlist_name = 6 [(.display_name) = "Reward Lootlist", (.comment) = "The name of the lootlist to roll as a reward"];
inline bool CMsgQuestMapStoreItem::_internal_has_reward_lootlist_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgQuestMapStoreItem::has_reward_lootlist_name() const {
  return _internal_has_reward_lootlist_name();
}
inline void CMsgQuestMapStoreItem::clear_reward_lootlist_name() {
  reward_lootlist_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgQuestMapStoreItem::reward_lootlist_name() const {
  // @@protoc_insertion_point(field_get:CMsgQuestMapStoreItem.reward_lootlist_name)
  return _internal_reward_lootlist_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgQuestMapStoreItem::set_reward_lootlist_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 reward_lootlist_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgQuestMapStoreItem.reward_lootlist_name)
}
inline std::string* CMsgQuestMapStoreItem::mutable_reward_lootlist_name() {
  // @@protoc_insertion_point(field_mutable:CMsgQuestMapStoreItem.reward_lootlist_name)
  return _internal_mutable_reward_lootlist_name();
}
inline const std::string& CMsgQuestMapStoreItem::_internal_reward_lootlist_name() const {
  return reward_lootlist_name_.Get();
}
inline void CMsgQuestMapStoreItem::_internal_set_reward_lootlist_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  reward_lootlist_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgQuestMapStoreItem::_internal_mutable_reward_lootlist_name() {
  _has_bits_[0] |= 0x00000002u;
  return reward_lootlist_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgQuestMapStoreItem::release_reward_lootlist_name() {
  // @@protoc_insertion_point(field_release:CMsgQuestMapStoreItem.reward_lootlist_name)
  if (!_internal_has_reward_lootlist_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return reward_lootlist_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CMsgQuestMapStoreItem::set_allocated_reward_lootlist_name(std::string* reward_lootlist_name) {
  if (reward_lootlist_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  reward_lootlist_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reward_lootlist_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CMsgQuestMapStoreItem.reward_lootlist_name)
}

// optional .CMsgVarField price = 3 [(.var_field_type) = VAR_TYPE_SINT32];
inline bool CMsgQuestMapStoreItem::_internal_has_price() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || price_ != nullptr);
  return value;
}
inline bool CMsgQuestMapStoreItem::has_price() const {
  return _internal_has_price();
}
inline void CMsgQuestMapStoreItem::clear_price() {
  if (price_ != nullptr) price_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::CMsgVarField& CMsgQuestMapStoreItem::_internal_price() const {
  const ::CMsgVarField* p = price_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgVarField&>(
      ::_CMsgVarField_default_instance_);
}
inline const ::CMsgVarField& CMsgQuestMapStoreItem::price() const {
  // @@protoc_insertion_point(field_get:CMsgQuestMapStoreItem.price)
  return _internal_price();
}
inline void CMsgQuestMapStoreItem::unsafe_arena_set_allocated_price(
    ::CMsgVarField* price) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(price_);
  }
  price_ = price;
  if (price) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgQuestMapStoreItem.price)
}
inline ::CMsgVarField* CMsgQuestMapStoreItem::release_price() {
  _has_bits_[0] &= ~0x00000008u;
  ::CMsgVarField* temp = price_;
  price_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgVarField* CMsgQuestMapStoreItem::unsafe_arena_release_price() {
  // @@protoc_insertion_point(field_release:CMsgQuestMapStoreItem.price)
  _has_bits_[0] &= ~0x00000008u;
  ::CMsgVarField* temp = price_;
  price_ = nullptr;
  return temp;
}
inline ::CMsgVarField* CMsgQuestMapStoreItem::_internal_mutable_price() {
  _has_bits_[0] |= 0x00000008u;
  if (price_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgVarField>(GetArenaForAllocation());
    price_ = p;
  }
  return price_;
}
inline ::CMsgVarField* CMsgQuestMapStoreItem::mutable_price() {
  // @@protoc_insertion_point(field_mutable:CMsgQuestMapStoreItem.price)
  return _internal_mutable_price();
}
inline void CMsgQuestMapStoreItem::set_allocated_price(::CMsgVarField* price) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete price_;
  }
  if (price) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgVarField>::GetOwningArena(price);
    if (message_arena != submessage_arena) {
      price = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, price, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  price_ = price;
  // @@protoc_insertion_point(field_set_allocated:CMsgQuestMapStoreItem.price)
}

// optional uint32 purchase_limit = 4 [(.display_name) = "Purchase Limit", (.comment) = "How many times this reward can be purchased"];
inline bool CMsgQuestMapStoreItem::_internal_has_purchase_limit() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgQuestMapStoreItem::has_purchase_limit() const {
  return _internal_has_purchase_limit();
}
inline void CMsgQuestMapStoreItem::clear_purchase_limit() {
  purchase_limit_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgQuestMapStoreItem::_internal_purchase_limit() const {
  return purchase_limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgQuestMapStoreItem::purchase_limit() const {
  // @@protoc_insertion_point(field_get:CMsgQuestMapStoreItem.purchase_limit)
  return _internal_purchase_limit();
}
inline void CMsgQuestMapStoreItem::_internal_set_purchase_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  purchase_limit_ = value;
}
inline void CMsgQuestMapStoreItem::set_purchase_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_purchase_limit(value);
  // @@protoc_insertion_point(field_set:CMsgQuestMapStoreItem.purchase_limit)
}

// optional uint32 sort_group = 5 [(.display_name) = "Sort group", (.comment) = "Sort by this group, then alhpabetically"];
inline bool CMsgQuestMapStoreItem::_internal_has_sort_group() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgQuestMapStoreItem::has_sort_group() const {
  return _internal_has_sort_group();
}
inline void CMsgQuestMapStoreItem::clear_sort_group() {
  sort_group_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgQuestMapStoreItem::_internal_sort_group() const {
  return sort_group_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgQuestMapStoreItem::sort_group() const {
  // @@protoc_insertion_point(field_get:CMsgQuestMapStoreItem.sort_group)
  return _internal_sort_group();
}
inline void CMsgQuestMapStoreItem::_internal_set_sort_group(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  sort_group_ = value;
}
inline void CMsgQuestMapStoreItem::set_sort_group(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sort_group(value);
  // @@protoc_insertion_point(field_set:CMsgQuestMapStoreItem.sort_group)
}

// -------------------------------------------------------------------

// CMsgQuestMapRegionDef_RegionLink

// required .CMsgProtoDefID target_region_defid = 1 [(.valid_type) = DEF_TYPE_QUEST_MAP_REGION];
inline bool CMsgQuestMapRegionDef_RegionLink::_internal_has_target_region_defid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || target_region_defid_ != nullptr);
  return value;
}
inline bool CMsgQuestMapRegionDef_RegionLink::has_target_region_defid() const {
  return _internal_has_target_region_defid();
}
inline void CMsgQuestMapRegionDef_RegionLink::clear_target_region_defid() {
  if (target_region_defid_ != nullptr) target_region_defid_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgProtoDefID& CMsgQuestMapRegionDef_RegionLink::_internal_target_region_defid() const {
  const ::CMsgProtoDefID* p = target_region_defid_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgProtoDefID&>(
      ::_CMsgProtoDefID_default_instance_);
}
inline const ::CMsgProtoDefID& CMsgQuestMapRegionDef_RegionLink::target_region_defid() const {
  // @@protoc_insertion_point(field_get:CMsgQuestMapRegionDef.RegionLink.target_region_defid)
  return _internal_target_region_defid();
}
inline void CMsgQuestMapRegionDef_RegionLink::unsafe_arena_set_allocated_target_region_defid(
    ::CMsgProtoDefID* target_region_defid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_region_defid_);
  }
  target_region_defid_ = target_region_defid;
  if (target_region_defid) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgQuestMapRegionDef.RegionLink.target_region_defid)
}
inline ::CMsgProtoDefID* CMsgQuestMapRegionDef_RegionLink::release_target_region_defid() {
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgProtoDefID* temp = target_region_defid_;
  target_region_defid_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgProtoDefID* CMsgQuestMapRegionDef_RegionLink::unsafe_arena_release_target_region_defid() {
  // @@protoc_insertion_point(field_release:CMsgQuestMapRegionDef.RegionLink.target_region_defid)
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgProtoDefID* temp = target_region_defid_;
  target_region_defid_ = nullptr;
  return temp;
}
inline ::CMsgProtoDefID* CMsgQuestMapRegionDef_RegionLink::_internal_mutable_target_region_defid() {
  _has_bits_[0] |= 0x00000001u;
  if (target_region_defid_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgProtoDefID>(GetArenaForAllocation());
    target_region_defid_ = p;
  }
  return target_region_defid_;
}
inline ::CMsgProtoDefID* CMsgQuestMapRegionDef_RegionLink::mutable_target_region_defid() {
  // @@protoc_insertion_point(field_mutable:CMsgQuestMapRegionDef.RegionLink.target_region_defid)
  return _internal_mutable_target_region_defid();
}
inline void CMsgQuestMapRegionDef_RegionLink::set_allocated_target_region_defid(::CMsgProtoDefID* target_region_defid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete target_region_defid_;
  }
  if (target_region_defid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgProtoDefID>::GetOwningArena(target_region_defid);
    if (message_arena != submessage_arena) {
      target_region_defid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target_region_defid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  target_region_defid_ = target_region_defid;
  // @@protoc_insertion_point(field_set_allocated:CMsgQuestMapRegionDef.RegionLink.target_region_defid)
}

// optional uint32 xpos = 2;
inline bool CMsgQuestMapRegionDef_RegionLink::_internal_has_xpos() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgQuestMapRegionDef_RegionLink::has_xpos() const {
  return _internal_has_xpos();
}
inline void CMsgQuestMapRegionDef_RegionLink::clear_xpos() {
  xpos_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgQuestMapRegionDef_RegionLink::_internal_xpos() const {
  return xpos_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgQuestMapRegionDef_RegionLink::xpos() const {
  // @@protoc_insertion_point(field_get:CMsgQuestMapRegionDef.RegionLink.xpos)
  return _internal_xpos();
}
inline void CMsgQuestMapRegionDef_RegionLink::_internal_set_xpos(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  xpos_ = value;
}
inline void CMsgQuestMapRegionDef_RegionLink::set_xpos(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_xpos(value);
  // @@protoc_insertion_point(field_set:CMsgQuestMapRegionDef.RegionLink.xpos)
}

// optional uint32 ypos = 3;
inline bool CMsgQuestMapRegionDef_RegionLink::_internal_has_ypos() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgQuestMapRegionDef_RegionLink::has_ypos() const {
  return _internal_has_ypos();
}
inline void CMsgQuestMapRegionDef_RegionLink::clear_ypos() {
  ypos_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgQuestMapRegionDef_RegionLink::_internal_ypos() const {
  return ypos_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgQuestMapRegionDef_RegionLink::ypos() const {
  // @@protoc_insertion_point(field_get:CMsgQuestMapRegionDef.RegionLink.ypos)
  return _internal_ypos();
}
inline void CMsgQuestMapRegionDef_RegionLink::_internal_set_ypos(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  ypos_ = value;
}
inline void CMsgQuestMapRegionDef_RegionLink::set_ypos(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ypos(value);
  // @@protoc_insertion_point(field_set:CMsgQuestMapRegionDef.RegionLink.ypos)
}

// -------------------------------------------------------------------

// CMsgQuestMapRegionDef

// required .CMsgProtoDefHeader header = 1;
inline bool CMsgQuestMapRegionDef::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool CMsgQuestMapRegionDef::has_header() const {
  return _internal_has_header();
}
inline void CMsgQuestMapRegionDef::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::CMsgProtoDefHeader& CMsgQuestMapRegionDef::_internal_header() const {
  const ::CMsgProtoDefHeader* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgProtoDefHeader&>(
      ::_CMsgProtoDefHeader_default_instance_);
}
inline const ::CMsgProtoDefHeader& CMsgQuestMapRegionDef::header() const {
  // @@protoc_insertion_point(field_get:CMsgQuestMapRegionDef.header)
  return _internal_header();
}
inline void CMsgQuestMapRegionDef::unsafe_arena_set_allocated_header(
    ::CMsgProtoDefHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgQuestMapRegionDef.header)
}
inline ::CMsgProtoDefHeader* CMsgQuestMapRegionDef::release_header() {
  _has_bits_[0] &= ~0x00000004u;
  ::CMsgProtoDefHeader* temp = header_;
  header_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgProtoDefHeader* CMsgQuestMapRegionDef::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:CMsgQuestMapRegionDef.header)
  _has_bits_[0] &= ~0x00000004u;
  ::CMsgProtoDefHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::CMsgProtoDefHeader* CMsgQuestMapRegionDef::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000004u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgProtoDefHeader>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::CMsgProtoDefHeader* CMsgQuestMapRegionDef::mutable_header() {
  // @@protoc_insertion_point(field_mutable:CMsgQuestMapRegionDef.header)
  return _internal_mutable_header();
}
inline void CMsgQuestMapRegionDef::set_allocated_header(::CMsgProtoDefHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgProtoDefHeader>::GetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:CMsgQuestMapRegionDef.header)
}

// optional string name = 2 [(.localized) = true];
inline bool CMsgQuestMapRegionDef::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgQuestMapRegionDef::has_name() const {
  return _internal_has_name();
}
inline void CMsgQuestMapRegionDef::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgQuestMapRegionDef::name() const {
  // @@protoc_insertion_point(field_get:CMsgQuestMapRegionDef.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgQuestMapRegionDef::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgQuestMapRegionDef.name)
}
inline std::string* CMsgQuestMapRegionDef::mutable_name() {
  // @@protoc_insertion_point(field_mutable:CMsgQuestMapRegionDef.name)
  return _internal_mutable_name();
}
inline const std::string& CMsgQuestMapRegionDef::_internal_name() const {
  return name_.Get();
}
inline void CMsgQuestMapRegionDef::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgQuestMapRegionDef::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgQuestMapRegionDef::release_name() {
  // @@protoc_insertion_point(field_release:CMsgQuestMapRegionDef.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CMsgQuestMapRegionDef::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CMsgQuestMapRegionDef.name)
}

// optional string resfile = 3;
inline bool CMsgQuestMapRegionDef::_internal_has_resfile() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgQuestMapRegionDef::has_resfile() const {
  return _internal_has_resfile();
}
inline void CMsgQuestMapRegionDef::clear_resfile() {
  resfile_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgQuestMapRegionDef::resfile() const {
  // @@protoc_insertion_point(field_get:CMsgQuestMapRegionDef.resfile)
  return _internal_resfile();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgQuestMapRegionDef::set_resfile(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 resfile_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgQuestMapRegionDef.resfile)
}
inline std::string* CMsgQuestMapRegionDef::mutable_resfile() {
  // @@protoc_insertion_point(field_mutable:CMsgQuestMapRegionDef.resfile)
  return _internal_mutable_resfile();
}
inline const std::string& CMsgQuestMapRegionDef::_internal_resfile() const {
  return resfile_.Get();
}
inline void CMsgQuestMapRegionDef::_internal_set_resfile(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  resfile_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgQuestMapRegionDef::_internal_mutable_resfile() {
  _has_bits_[0] |= 0x00000002u;
  return resfile_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgQuestMapRegionDef::release_resfile() {
  // @@protoc_insertion_point(field_release:CMsgQuestMapRegionDef.resfile)
  if (!_internal_has_resfile()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return resfile_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CMsgQuestMapRegionDef::set_allocated_resfile(std::string* resfile) {
  if (resfile != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  resfile_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), resfile,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CMsgQuestMapRegionDef.resfile)
}

// repeated .CMsgQuestMapRegionDef.RegionLink links = 4;
inline int CMsgQuestMapRegionDef::_internal_links_size() const {
  return links_.size();
}
inline int CMsgQuestMapRegionDef::links_size() const {
  return _internal_links_size();
}
inline void CMsgQuestMapRegionDef::clear_links() {
  links_.Clear();
}
inline ::CMsgQuestMapRegionDef_RegionLink* CMsgQuestMapRegionDef::mutable_links(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgQuestMapRegionDef.links)
  return links_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgQuestMapRegionDef_RegionLink >*
CMsgQuestMapRegionDef::mutable_links() {
  // @@protoc_insertion_point(field_mutable_list:CMsgQuestMapRegionDef.links)
  return &links_;
}
inline const ::CMsgQuestMapRegionDef_RegionLink& CMsgQuestMapRegionDef::_internal_links(int index) const {
  return links_.Get(index);
}
inline const ::CMsgQuestMapRegionDef_RegionLink& CMsgQuestMapRegionDef::links(int index) const {
  // @@protoc_insertion_point(field_get:CMsgQuestMapRegionDef.links)
  return _internal_links(index);
}
inline ::CMsgQuestMapRegionDef_RegionLink* CMsgQuestMapRegionDef::_internal_add_links() {
  return links_.Add();
}
inline ::CMsgQuestMapRegionDef_RegionLink* CMsgQuestMapRegionDef::add_links() {
  // @@protoc_insertion_point(field_add:CMsgQuestMapRegionDef.links)
  return _internal_add_links();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgQuestMapRegionDef_RegionLink >&
CMsgQuestMapRegionDef::links() const {
  // @@protoc_insertion_point(field_list:CMsgQuestMapRegionDef.links)
  return links_;
}

// optional .CMsgProtoDefID return_link = 5 [(.valid_type) = DEF_TYPE_QUEST_MAP_REGION, (.display_name) = "Return Link", (.comment) = "Which link we go to when right-clicking in this region"];
inline bool CMsgQuestMapRegionDef::_internal_has_return_link() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || return_link_ != nullptr);
  return value;
}
inline bool CMsgQuestMapRegionDef::has_return_link() const {
  return _internal_has_return_link();
}
inline void CMsgQuestMapRegionDef::clear_return_link() {
  if (return_link_ != nullptr) return_link_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::CMsgProtoDefID& CMsgQuestMapRegionDef::_internal_return_link() const {
  const ::CMsgProtoDefID* p = return_link_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgProtoDefID&>(
      ::_CMsgProtoDefID_default_instance_);
}
inline const ::CMsgProtoDefID& CMsgQuestMapRegionDef::return_link() const {
  // @@protoc_insertion_point(field_get:CMsgQuestMapRegionDef.return_link)
  return _internal_return_link();
}
inline void CMsgQuestMapRegionDef::unsafe_arena_set_allocated_return_link(
    ::CMsgProtoDefID* return_link) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(return_link_);
  }
  return_link_ = return_link;
  if (return_link) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgQuestMapRegionDef.return_link)
}
inline ::CMsgProtoDefID* CMsgQuestMapRegionDef::release_return_link() {
  _has_bits_[0] &= ~0x00000008u;
  ::CMsgProtoDefID* temp = return_link_;
  return_link_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgProtoDefID* CMsgQuestMapRegionDef::unsafe_arena_release_return_link() {
  // @@protoc_insertion_point(field_release:CMsgQuestMapRegionDef.return_link)
  _has_bits_[0] &= ~0x00000008u;
  ::CMsgProtoDefID* temp = return_link_;
  return_link_ = nullptr;
  return temp;
}
inline ::CMsgProtoDefID* CMsgQuestMapRegionDef::_internal_mutable_return_link() {
  _has_bits_[0] |= 0x00000008u;
  if (return_link_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgProtoDefID>(GetArenaForAllocation());
    return_link_ = p;
  }
  return return_link_;
}
inline ::CMsgProtoDefID* CMsgQuestMapRegionDef::mutable_return_link() {
  // @@protoc_insertion_point(field_mutable:CMsgQuestMapRegionDef.return_link)
  return _internal_mutable_return_link();
}
inline void CMsgQuestMapRegionDef::set_allocated_return_link(::CMsgProtoDefID* return_link) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete return_link_;
  }
  if (return_link) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgProtoDefID>::GetOwningArena(return_link);
    if (message_arena != submessage_arena) {
      return_link = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, return_link, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  return_link_ = return_link;
  // @@protoc_insertion_point(field_set_allocated:CMsgQuestMapRegionDef.return_link)
}

// optional float radio_freq = 6 [(.display_name) = "Radio Freq.", (.comment) = "Where the radio tuner goes on the CYOA PDA when this region is selection"];
inline bool CMsgQuestMapRegionDef::_internal_has_radio_freq() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgQuestMapRegionDef::has_radio_freq() const {
  return _internal_has_radio_freq();
}
inline void CMsgQuestMapRegionDef::clear_radio_freq() {
  radio_freq_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float CMsgQuestMapRegionDef::_internal_radio_freq() const {
  return radio_freq_;
}
inline float CMsgQuestMapRegionDef::radio_freq() const {
  // @@protoc_insertion_point(field_get:CMsgQuestMapRegionDef.radio_freq)
  return _internal_radio_freq();
}
inline void CMsgQuestMapRegionDef::_internal_set_radio_freq(float value) {
  _has_bits_[0] |= 0x00000020u;
  radio_freq_ = value;
}
inline void CMsgQuestMapRegionDef::set_radio_freq(float value) {
  _internal_set_radio_freq(value);
  // @@protoc_insertion_point(field_set:CMsgQuestMapRegionDef.radio_freq)
}

// optional float zoom_scale = 7 [(.display_name) = "Zoom Scale", (.comment) = "How zoomed in this panel should be.  Affects the scale of the map grid lines and node link dashed lines"];
inline bool CMsgQuestMapRegionDef::_internal_has_zoom_scale() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgQuestMapRegionDef::has_zoom_scale() const {
  return _internal_has_zoom_scale();
}
inline void CMsgQuestMapRegionDef::clear_zoom_scale() {
  zoom_scale_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float CMsgQuestMapRegionDef::_internal_zoom_scale() const {
  return zoom_scale_;
}
inline float CMsgQuestMapRegionDef::zoom_scale() const {
  // @@protoc_insertion_point(field_get:CMsgQuestMapRegionDef.zoom_scale)
  return _internal_zoom_scale();
}
inline void CMsgQuestMapRegionDef::_internal_set_zoom_scale(float value) {
  _has_bits_[0] |= 0x00000040u;
  zoom_scale_ = value;
}
inline void CMsgQuestMapRegionDef::set_zoom_scale(float value) {
  _internal_set_zoom_scale(value);
  // @@protoc_insertion_point(field_set:CMsgQuestMapRegionDef.zoom_scale)
}

// optional .CMsgProtoDefID star_type = 8 [(.valid_type) = DEF_TYPE_QUEST_MAP_STAR_TYPE, (.display_name) = "Star Type", (.comment) = "What stars (if any) the nodes within use to unlock"];
inline bool CMsgQuestMapRegionDef::_internal_has_star_type() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || star_type_ != nullptr);
  return value;
}
inline bool CMsgQuestMapRegionDef::has_star_type() const {
  return _internal_has_star_type();
}
inline void CMsgQuestMapRegionDef::clear_star_type() {
  if (star_type_ != nullptr) star_type_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::CMsgProtoDefID& CMsgQuestMapRegionDef::_internal_star_type() const {
  const ::CMsgProtoDefID* p = star_type_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgProtoDefID&>(
      ::_CMsgProtoDefID_default_instance_);
}
inline const ::CMsgProtoDefID& CMsgQuestMapRegionDef::star_type() const {
  // @@protoc_insertion_point(field_get:CMsgQuestMapRegionDef.star_type)
  return _internal_star_type();
}
inline void CMsgQuestMapRegionDef::unsafe_arena_set_allocated_star_type(
    ::CMsgProtoDefID* star_type) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(star_type_);
  }
  star_type_ = star_type;
  if (star_type) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgQuestMapRegionDef.star_type)
}
inline ::CMsgProtoDefID* CMsgQuestMapRegionDef::release_star_type() {
  _has_bits_[0] &= ~0x00000010u;
  ::CMsgProtoDefID* temp = star_type_;
  star_type_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgProtoDefID* CMsgQuestMapRegionDef::unsafe_arena_release_star_type() {
  // @@protoc_insertion_point(field_release:CMsgQuestMapRegionDef.star_type)
  _has_bits_[0] &= ~0x00000010u;
  ::CMsgProtoDefID* temp = star_type_;
  star_type_ = nullptr;
  return temp;
}
inline ::CMsgProtoDefID* CMsgQuestMapRegionDef::_internal_mutable_star_type() {
  _has_bits_[0] |= 0x00000010u;
  if (star_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgProtoDefID>(GetArenaForAllocation());
    star_type_ = p;
  }
  return star_type_;
}
inline ::CMsgProtoDefID* CMsgQuestMapRegionDef::mutable_star_type() {
  // @@protoc_insertion_point(field_mutable:CMsgQuestMapRegionDef.star_type)
  return _internal_mutable_star_type();
}
inline void CMsgQuestMapRegionDef::set_allocated_star_type(::CMsgProtoDefID* star_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete star_type_;
  }
  if (star_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgProtoDefID>::GetOwningArena(star_type);
    if (message_arena != submessage_arena) {
      star_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, star_type, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  star_type_ = star_type;
  // @@protoc_insertion_point(field_set_allocated:CMsgQuestMapRegionDef.star_type)
}

// -------------------------------------------------------------------

// CMsgVarField

// optional string variable = 1 [(.merging_key_field) = true];
inline bool CMsgVarField::_internal_has_variable() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgVarField::has_variable() const {
  return _internal_has_variable();
}
inline void CMsgVarField::clear_variable() {
  variable_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgVarField::variable() const {
  // @@protoc_insertion_point(field_get:CMsgVarField.variable)
  return _internal_variable();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgVarField::set_variable(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 variable_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgVarField.variable)
}
inline std::string* CMsgVarField::mutable_variable() {
  // @@protoc_insertion_point(field_mutable:CMsgVarField.variable)
  return _internal_mutable_variable();
}
inline const std::string& CMsgVarField::_internal_variable() const {
  return variable_.Get();
}
inline void CMsgVarField::_internal_set_variable(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  variable_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgVarField::_internal_mutable_variable() {
  _has_bits_[0] |= 0x00000001u;
  return variable_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgVarField::release_variable() {
  // @@protoc_insertion_point(field_release:CMsgVarField.variable)
  if (!_internal_has_variable()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return variable_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CMsgVarField::set_allocated_variable(std::string* variable) {
  if (variable != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  variable_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), variable,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CMsgVarField.variable)
}

// float float = 2;
inline bool CMsgVarField::_internal_has_float_() const {
  return value_case() == kFloat;
}
inline bool CMsgVarField::has_float_() const {
  return _internal_has_float_();
}
inline void CMsgVarField::set_has_float_() {
  _oneof_case_[0] = kFloat;
}
inline void CMsgVarField::clear_float_() {
  if (_internal_has_float_()) {
    value_.float__ = 0;
    clear_has_value();
  }
}
inline float CMsgVarField::_internal_float_() const {
  if (_internal_has_float_()) {
    return value_.float__;
  }
  return 0;
}
inline void CMsgVarField::_internal_set_float_(float value) {
  if (!_internal_has_float_()) {
    clear_value();
    set_has_float_();
  }
  value_.float__ = value;
}
inline float CMsgVarField::float_() const {
  // @@protoc_insertion_point(field_get:CMsgVarField.float)
  return _internal_float_();
}
inline void CMsgVarField::set_float_(float value) {
  _internal_set_float_(value);
  // @@protoc_insertion_point(field_set:CMsgVarField.float)
}

// double double = 3;
inline bool CMsgVarField::_internal_has_double_() const {
  return value_case() == kDouble;
}
inline bool CMsgVarField::has_double_() const {
  return _internal_has_double_();
}
inline void CMsgVarField::set_has_double_() {
  _oneof_case_[0] = kDouble;
}
inline void CMsgVarField::clear_double_() {
  if (_internal_has_double_()) {
    value_.double__ = 0;
    clear_has_value();
  }
}
inline double CMsgVarField::_internal_double_() const {
  if (_internal_has_double_()) {
    return value_.double__;
  }
  return 0;
}
inline void CMsgVarField::_internal_set_double_(double value) {
  if (!_internal_has_double_()) {
    clear_value();
    set_has_double_();
  }
  value_.double__ = value;
}
inline double CMsgVarField::double_() const {
  // @@protoc_insertion_point(field_get:CMsgVarField.double)
  return _internal_double_();
}
inline void CMsgVarField::set_double_(double value) {
  _internal_set_double_(value);
  // @@protoc_insertion_point(field_set:CMsgVarField.double)
}

// uint32 uint32 = 4;
inline bool CMsgVarField::_internal_has_uint32() const {
  return value_case() == kUint32;
}
inline bool CMsgVarField::has_uint32() const {
  return _internal_has_uint32();
}
inline void CMsgVarField::set_has_uint32() {
  _oneof_case_[0] = kUint32;
}
inline void CMsgVarField::clear_uint32() {
  if (_internal_has_uint32()) {
    value_.uint32_ = 0u;
    clear_has_value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgVarField::_internal_uint32() const {
  if (_internal_has_uint32()) {
    return value_.uint32_;
  }
  return 0u;
}
inline void CMsgVarField::_internal_set_uint32(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_uint32()) {
    clear_value();
    set_has_uint32();
  }
  value_.uint32_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgVarField::uint32() const {
  // @@protoc_insertion_point(field_get:CMsgVarField.uint32)
  return _internal_uint32();
}
inline void CMsgVarField::set_uint32(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uint32(value);
  // @@protoc_insertion_point(field_set:CMsgVarField.uint32)
}

// uint64 uint64 = 5;
inline bool CMsgVarField::_internal_has_uint64() const {
  return value_case() == kUint64;
}
inline bool CMsgVarField::has_uint64() const {
  return _internal_has_uint64();
}
inline void CMsgVarField::set_has_uint64() {
  _oneof_case_[0] = kUint64;
}
inline void CMsgVarField::clear_uint64() {
  if (_internal_has_uint64()) {
    value_.uint64_ = uint64_t{0u};
    clear_has_value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgVarField::_internal_uint64() const {
  if (_internal_has_uint64()) {
    return value_.uint64_;
  }
  return uint64_t{0u};
}
inline void CMsgVarField::_internal_set_uint64(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  if (!_internal_has_uint64()) {
    clear_value();
    set_has_uint64();
  }
  value_.uint64_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgVarField::uint64() const {
  // @@protoc_insertion_point(field_get:CMsgVarField.uint64)
  return _internal_uint64();
}
inline void CMsgVarField::set_uint64(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_uint64(value);
  // @@protoc_insertion_point(field_set:CMsgVarField.uint64)
}

// sint32 sint32 = 6;
inline bool CMsgVarField::_internal_has_sint32() const {
  return value_case() == kSint32;
}
inline bool CMsgVarField::has_sint32() const {
  return _internal_has_sint32();
}
inline void CMsgVarField::set_has_sint32() {
  _oneof_case_[0] = kSint32;
}
inline void CMsgVarField::clear_sint32() {
  if (_internal_has_sint32()) {
    value_.sint32_ = 0;
    clear_has_value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgVarField::_internal_sint32() const {
  if (_internal_has_sint32()) {
    return value_.sint32_;
  }
  return 0;
}
inline void CMsgVarField::_internal_set_sint32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_sint32()) {
    clear_value();
    set_has_sint32();
  }
  value_.sint32_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgVarField::sint32() const {
  // @@protoc_insertion_point(field_get:CMsgVarField.sint32)
  return _internal_sint32();
}
inline void CMsgVarField::set_sint32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sint32(value);
  // @@protoc_insertion_point(field_set:CMsgVarField.sint32)
}

// sint64 sint64 = 7;
inline bool CMsgVarField::_internal_has_sint64() const {
  return value_case() == kSint64;
}
inline bool CMsgVarField::has_sint64() const {
  return _internal_has_sint64();
}
inline void CMsgVarField::set_has_sint64() {
  _oneof_case_[0] = kSint64;
}
inline void CMsgVarField::clear_sint64() {
  if (_internal_has_sint64()) {
    value_.sint64_ = int64_t{0};
    clear_has_value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CMsgVarField::_internal_sint64() const {
  if (_internal_has_sint64()) {
    return value_.sint64_;
  }
  return int64_t{0};
}
inline void CMsgVarField::_internal_set_sint64(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_sint64()) {
    clear_value();
    set_has_sint64();
  }
  value_.sint64_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CMsgVarField::sint64() const {
  // @@protoc_insertion_point(field_get:CMsgVarField.sint64)
  return _internal_sint64();
}
inline void CMsgVarField::set_sint64(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_sint64(value);
  // @@protoc_insertion_point(field_set:CMsgVarField.sint64)
}

// bool bool = 8;
inline bool CMsgVarField::_internal_has_bool_() const {
  return value_case() == kBool;
}
inline bool CMsgVarField::has_bool_() const {
  return _internal_has_bool_();
}
inline void CMsgVarField::set_has_bool_() {
  _oneof_case_[0] = kBool;
}
inline void CMsgVarField::clear_bool_() {
  if (_internal_has_bool_()) {
    value_.bool__ = false;
    clear_has_value();
  }
}
inline bool CMsgVarField::_internal_bool_() const {
  if (_internal_has_bool_()) {
    return value_.bool__;
  }
  return false;
}
inline void CMsgVarField::_internal_set_bool_(bool value) {
  if (!_internal_has_bool_()) {
    clear_value();
    set_has_bool_();
  }
  value_.bool__ = value;
}
inline bool CMsgVarField::bool_() const {
  // @@protoc_insertion_point(field_get:CMsgVarField.bool)
  return _internal_bool_();
}
inline void CMsgVarField::set_bool_(bool value) {
  _internal_set_bool_(value);
  // @@protoc_insertion_point(field_set:CMsgVarField.bool)
}

// string string = 9;
inline bool CMsgVarField::_internal_has_string() const {
  return value_case() == kString;
}
inline bool CMsgVarField::has_string() const {
  return _internal_has_string();
}
inline void CMsgVarField::set_has_string() {
  _oneof_case_[0] = kString;
}
inline void CMsgVarField::clear_string() {
  if (_internal_has_string()) {
    value_.string_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_value();
  }
}
inline const std::string& CMsgVarField::string() const {
  // @@protoc_insertion_point(field_get:CMsgVarField.string)
  return _internal_string();
}
template <typename ArgT0, typename... ArgT>
inline void CMsgVarField::set_string(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_string()) {
    clear_value();
    set_has_string();
    value_.string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgVarField.string)
}
inline std::string* CMsgVarField::mutable_string() {
  // @@protoc_insertion_point(field_mutable:CMsgVarField.string)
  return _internal_mutable_string();
}
inline const std::string& CMsgVarField::_internal_string() const {
  if (_internal_has_string()) {
    return value_.string_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void CMsgVarField::_internal_set_string(const std::string& value) {
  if (!_internal_has_string()) {
    clear_value();
    set_has_string();
    value_.string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgVarField::_internal_mutable_string() {
  if (!_internal_has_string()) {
    clear_value();
    set_has_string();
    value_.string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return value_.string_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgVarField::release_string() {
  // @@protoc_insertion_point(field_release:CMsgVarField.string)
  if (_internal_has_string()) {
    clear_has_value();
    return value_.string_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void CMsgVarField::set_allocated_string(std::string* string) {
  if (has_value()) {
    clear_value();
  }
  if (string != nullptr) {
    set_has_string();
    value_.string_.UnsafeSetDefault(string);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(string);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgVarField.string)
}

inline bool CMsgVarField::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void CMsgVarField::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline CMsgVarField::ValueCase CMsgVarField::value_case() const {
  return CMsgVarField::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// CMsgQuestMapStarType

// required .CMsgProtoDefHeader header = 1;
inline bool CMsgQuestMapStarType::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool CMsgQuestMapStarType::has_header() const {
  return _internal_has_header();
}
inline void CMsgQuestMapStarType::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::CMsgProtoDefHeader& CMsgQuestMapStarType::_internal_header() const {
  const ::CMsgProtoDefHeader* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgProtoDefHeader&>(
      ::_CMsgProtoDefHeader_default_instance_);
}
inline const ::CMsgProtoDefHeader& CMsgQuestMapStarType::header() const {
  // @@protoc_insertion_point(field_get:CMsgQuestMapStarType.header)
  return _internal_header();
}
inline void CMsgQuestMapStarType::unsafe_arena_set_allocated_header(
    ::CMsgProtoDefHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgQuestMapStarType.header)
}
inline ::CMsgProtoDefHeader* CMsgQuestMapStarType::release_header() {
  _has_bits_[0] &= ~0x00000002u;
  ::CMsgProtoDefHeader* temp = header_;
  header_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgProtoDefHeader* CMsgQuestMapStarType::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:CMsgQuestMapStarType.header)
  _has_bits_[0] &= ~0x00000002u;
  ::CMsgProtoDefHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::CMsgProtoDefHeader* CMsgQuestMapStarType::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000002u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgProtoDefHeader>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::CMsgProtoDefHeader* CMsgQuestMapStarType::mutable_header() {
  // @@protoc_insertion_point(field_mutable:CMsgQuestMapStarType.header)
  return _internal_mutable_header();
}
inline void CMsgQuestMapStarType::set_allocated_header(::CMsgProtoDefHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgProtoDefHeader>::GetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:CMsgQuestMapStarType.header)
}

// optional string name = 2 [(.localized) = true, (.display_name) = "Type Name"];
inline bool CMsgQuestMapStarType::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgQuestMapStarType::has_name() const {
  return _internal_has_name();
}
inline void CMsgQuestMapStarType::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgQuestMapStarType::name() const {
  // @@protoc_insertion_point(field_get:CMsgQuestMapStarType.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgQuestMapStarType::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgQuestMapStarType.name)
}
inline std::string* CMsgQuestMapStarType::mutable_name() {
  // @@protoc_insertion_point(field_mutable:CMsgQuestMapStarType.name)
  return _internal_mutable_name();
}
inline const std::string& CMsgQuestMapStarType::_internal_name() const {
  return name_.Get();
}
inline void CMsgQuestMapStarType::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgQuestMapStarType::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgQuestMapStarType::release_name() {
  // @@protoc_insertion_point(field_release:CMsgQuestMapStarType.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CMsgQuestMapStarType::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CMsgQuestMapStarType.name)
}

// -------------------------------------------------------------------

// CMsgQuestMapNodeDef

// required .CMsgProtoDefHeader header = 1;
inline bool CMsgQuestMapNodeDef::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool CMsgQuestMapNodeDef::has_header() const {
  return _internal_has_header();
}
inline void CMsgQuestMapNodeDef::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::CMsgProtoDefHeader& CMsgQuestMapNodeDef::_internal_header() const {
  const ::CMsgProtoDefHeader* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgProtoDefHeader&>(
      ::_CMsgProtoDefHeader_default_instance_);
}
inline const ::CMsgProtoDefHeader& CMsgQuestMapNodeDef::header() const {
  // @@protoc_insertion_point(field_get:CMsgQuestMapNodeDef.header)
  return _internal_header();
}
inline void CMsgQuestMapNodeDef::unsafe_arena_set_allocated_header(
    ::CMsgProtoDefHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgQuestMapNodeDef.header)
}
inline ::CMsgProtoDefHeader* CMsgQuestMapNodeDef::release_header() {
  _has_bits_[0] &= ~0x00000010u;
  ::CMsgProtoDefHeader* temp = header_;
  header_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgProtoDefHeader* CMsgQuestMapNodeDef::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:CMsgQuestMapNodeDef.header)
  _has_bits_[0] &= ~0x00000010u;
  ::CMsgProtoDefHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::CMsgProtoDefHeader* CMsgQuestMapNodeDef::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000010u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgProtoDefHeader>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::CMsgProtoDefHeader* CMsgQuestMapNodeDef::mutable_header() {
  // @@protoc_insertion_point(field_mutable:CMsgQuestMapNodeDef.header)
  return _internal_mutable_header();
}
inline void CMsgQuestMapNodeDef::set_allocated_header(::CMsgProtoDefHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgProtoDefHeader>::GetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:CMsgQuestMapNodeDef.header)
}

// optional string name_loctoken = 4 [(.localized) = true, (.display_name) = "Node Name", (.comment) = "The name of this node"];
inline bool CMsgQuestMapNodeDef::_internal_has_name_loctoken() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgQuestMapNodeDef::has_name_loctoken() const {
  return _internal_has_name_loctoken();
}
inline void CMsgQuestMapNodeDef::clear_name_loctoken() {
  name_loctoken_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgQuestMapNodeDef::name_loctoken() const {
  // @@protoc_insertion_point(field_get:CMsgQuestMapNodeDef.name_loctoken)
  return _internal_name_loctoken();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgQuestMapNodeDef::set_name_loctoken(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_loctoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgQuestMapNodeDef.name_loctoken)
}
inline std::string* CMsgQuestMapNodeDef::mutable_name_loctoken() {
  // @@protoc_insertion_point(field_mutable:CMsgQuestMapNodeDef.name_loctoken)
  return _internal_mutable_name_loctoken();
}
inline const std::string& CMsgQuestMapNodeDef::_internal_name_loctoken() const {
  return name_loctoken_.Get();
}
inline void CMsgQuestMapNodeDef::_internal_set_name_loctoken(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_loctoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgQuestMapNodeDef::_internal_mutable_name_loctoken() {
  _has_bits_[0] |= 0x00000001u;
  return name_loctoken_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgQuestMapNodeDef::release_name_loctoken() {
  // @@protoc_insertion_point(field_release:CMsgQuestMapNodeDef.name_loctoken)
  if (!_internal_has_name_loctoken()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_loctoken_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CMsgQuestMapNodeDef::set_allocated_name_loctoken(std::string* name_loctoken) {
  if (name_loctoken != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_loctoken_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name_loctoken,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CMsgQuestMapNodeDef.name_loctoken)
}

// optional float x_pos = 6 [(.display_name) = "Map X Pos", (.comment) = "X position on the quest map"];
inline bool CMsgQuestMapNodeDef::_internal_has_x_pos() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgQuestMapNodeDef::has_x_pos() const {
  return _internal_has_x_pos();
}
inline void CMsgQuestMapNodeDef::clear_x_pos() {
  x_pos_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline float CMsgQuestMapNodeDef::_internal_x_pos() const {
  return x_pos_;
}
inline float CMsgQuestMapNodeDef::x_pos() const {
  // @@protoc_insertion_point(field_get:CMsgQuestMapNodeDef.x_pos)
  return _internal_x_pos();
}
inline void CMsgQuestMapNodeDef::_internal_set_x_pos(float value) {
  _has_bits_[0] |= 0x00000100u;
  x_pos_ = value;
}
inline void CMsgQuestMapNodeDef::set_x_pos(float value) {
  _internal_set_x_pos(value);
  // @@protoc_insertion_point(field_set:CMsgQuestMapNodeDef.x_pos)
}

// optional float y_pos = 7 [(.display_name) = "Map Y Pos", (.comment) = "Y position on the quest map"];
inline bool CMsgQuestMapNodeDef::_internal_has_y_pos() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgQuestMapNodeDef::has_y_pos() const {
  return _internal_has_y_pos();
}
inline void CMsgQuestMapNodeDef::clear_y_pos() {
  y_pos_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline float CMsgQuestMapNodeDef::_internal_y_pos() const {
  return y_pos_;
}
inline float CMsgQuestMapNodeDef::y_pos() const {
  // @@protoc_insertion_point(field_get:CMsgQuestMapNodeDef.y_pos)
  return _internal_y_pos();
}
inline void CMsgQuestMapNodeDef::_internal_set_y_pos(float value) {
  _has_bits_[0] |= 0x00000200u;
  y_pos_ = value;
}
inline void CMsgQuestMapNodeDef::set_y_pos(float value) {
  _internal_set_y_pos(value);
  // @@protoc_insertion_point(field_set:CMsgQuestMapNodeDef.y_pos)
}

// optional .CMsgQuestMapNodeCondition condition = 9 [(.display_name) = "Conditions", (.comment) = "Logic to unlock this node. Can be nested with logic"];
inline bool CMsgQuestMapNodeDef::_internal_has_condition() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || condition_ != nullptr);
  return value;
}
inline bool CMsgQuestMapNodeDef::has_condition() const {
  return _internal_has_condition();
}
inline void CMsgQuestMapNodeDef::clear_condition() {
  if (condition_ != nullptr) condition_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::CMsgQuestMapNodeCondition& CMsgQuestMapNodeDef::_internal_condition() const {
  const ::CMsgQuestMapNodeCondition* p = condition_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgQuestMapNodeCondition&>(
      ::_CMsgQuestMapNodeCondition_default_instance_);
}
inline const ::CMsgQuestMapNodeCondition& CMsgQuestMapNodeDef::condition() const {
  // @@protoc_insertion_point(field_get:CMsgQuestMapNodeDef.condition)
  return _internal_condition();
}
inline void CMsgQuestMapNodeDef::unsafe_arena_set_allocated_condition(
    ::CMsgQuestMapNodeCondition* condition) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(condition_);
  }
  condition_ = condition;
  if (condition) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgQuestMapNodeDef.condition)
}
inline ::CMsgQuestMapNodeCondition* CMsgQuestMapNodeDef::release_condition() {
  _has_bits_[0] &= ~0x00000020u;
  ::CMsgQuestMapNodeCondition* temp = condition_;
  condition_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgQuestMapNodeCondition* CMsgQuestMapNodeDef::unsafe_arena_release_condition() {
  // @@protoc_insertion_point(field_release:CMsgQuestMapNodeDef.condition)
  _has_bits_[0] &= ~0x00000020u;
  ::CMsgQuestMapNodeCondition* temp = condition_;
  condition_ = nullptr;
  return temp;
}
inline ::CMsgQuestMapNodeCondition* CMsgQuestMapNodeDef::_internal_mutable_condition() {
  _has_bits_[0] |= 0x00000020u;
  if (condition_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgQuestMapNodeCondition>(GetArenaForAllocation());
    condition_ = p;
  }
  return condition_;
}
inline ::CMsgQuestMapNodeCondition* CMsgQuestMapNodeDef::mutable_condition() {
  // @@protoc_insertion_point(field_mutable:CMsgQuestMapNodeDef.condition)
  return _internal_mutable_condition();
}
inline void CMsgQuestMapNodeDef::set_allocated_condition(::CMsgQuestMapNodeCondition* condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete condition_;
  }
  if (condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgQuestMapNodeCondition>::GetOwningArena(condition);
    if (message_arena != submessage_arena) {
      condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, condition, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  condition_ = condition;
  // @@protoc_insertion_point(field_set_allocated:CMsgQuestMapNodeDef.condition)
}

// optional .CMsgProtoDefID owning_region = 10 [(.valid_type) = DEF_TYPE_QUEST_MAP_REGION, (.display_name) = "Region", (.comment) = "Which region in the map this node shows up in"];
inline bool CMsgQuestMapNodeDef::_internal_has_owning_region() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || owning_region_ != nullptr);
  return value;
}
inline bool CMsgQuestMapNodeDef::has_owning_region() const {
  return _internal_has_owning_region();
}
inline void CMsgQuestMapNodeDef::clear_owning_region() {
  if (owning_region_ != nullptr) owning_region_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::CMsgProtoDefID& CMsgQuestMapNodeDef::_internal_owning_region() const {
  const ::CMsgProtoDefID* p = owning_region_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgProtoDefID&>(
      ::_CMsgProtoDefID_default_instance_);
}
inline const ::CMsgProtoDefID& CMsgQuestMapNodeDef::owning_region() const {
  // @@protoc_insertion_point(field_get:CMsgQuestMapNodeDef.owning_region)
  return _internal_owning_region();
}
inline void CMsgQuestMapNodeDef::unsafe_arena_set_allocated_owning_region(
    ::CMsgProtoDefID* owning_region) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(owning_region_);
  }
  owning_region_ = owning_region;
  if (owning_region) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgQuestMapNodeDef.owning_region)
}
inline ::CMsgProtoDefID* CMsgQuestMapNodeDef::release_owning_region() {
  _has_bits_[0] &= ~0x00000040u;
  ::CMsgProtoDefID* temp = owning_region_;
  owning_region_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgProtoDefID* CMsgQuestMapNodeDef::unsafe_arena_release_owning_region() {
  // @@protoc_insertion_point(field_release:CMsgQuestMapNodeDef.owning_region)
  _has_bits_[0] &= ~0x00000040u;
  ::CMsgProtoDefID* temp = owning_region_;
  owning_region_ = nullptr;
  return temp;
}
inline ::CMsgProtoDefID* CMsgQuestMapNodeDef::_internal_mutable_owning_region() {
  _has_bits_[0] |= 0x00000040u;
  if (owning_region_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgProtoDefID>(GetArenaForAllocation());
    owning_region_ = p;
  }
  return owning_region_;
}
inline ::CMsgProtoDefID* CMsgQuestMapNodeDef::mutable_owning_region() {
  // @@protoc_insertion_point(field_mutable:CMsgQuestMapNodeDef.owning_region)
  return _internal_mutable_owning_region();
}
inline void CMsgQuestMapNodeDef::set_allocated_owning_region(::CMsgProtoDefID* owning_region) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete owning_region_;
  }
  if (owning_region) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgProtoDefID>::GetOwningArena(owning_region);
    if (message_arena != submessage_arena) {
      owning_region = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, owning_region, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  owning_region_ = owning_region;
  // @@protoc_insertion_point(field_set_allocated:CMsgQuestMapNodeDef.owning_region)
}

// repeated .CMsgProtoDefID quest_options = 11 [(.valid_type) = DEF_TYPE_QUEST, (.display_name) = "Offered Quests", (.comment) = "Which quests this node offers.", (.max_count) = 3];
inline int CMsgQuestMapNodeDef::_internal_quest_options_size() const {
  return quest_options_.size();
}
inline int CMsgQuestMapNodeDef::quest_options_size() const {
  return _internal_quest_options_size();
}
inline void CMsgQuestMapNodeDef::clear_quest_options() {
  quest_options_.Clear();
}
inline ::CMsgProtoDefID* CMsgQuestMapNodeDef::mutable_quest_options(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgQuestMapNodeDef.quest_options)
  return quest_options_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgProtoDefID >*
CMsgQuestMapNodeDef::mutable_quest_options() {
  // @@protoc_insertion_point(field_mutable_list:CMsgQuestMapNodeDef.quest_options)
  return &quest_options_;
}
inline const ::CMsgProtoDefID& CMsgQuestMapNodeDef::_internal_quest_options(int index) const {
  return quest_options_.Get(index);
}
inline const ::CMsgProtoDefID& CMsgQuestMapNodeDef::quest_options(int index) const {
  // @@protoc_insertion_point(field_get:CMsgQuestMapNodeDef.quest_options)
  return _internal_quest_options(index);
}
inline ::CMsgProtoDefID* CMsgQuestMapNodeDef::_internal_add_quest_options() {
  return quest_options_.Add();
}
inline ::CMsgProtoDefID* CMsgQuestMapNodeDef::add_quest_options() {
  // @@protoc_insertion_point(field_add:CMsgQuestMapNodeDef.quest_options)
  return _internal_add_quest_options();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgProtoDefID >&
CMsgQuestMapNodeDef::quest_options() const {
  // @@protoc_insertion_point(field_list:CMsgQuestMapNodeDef.quest_options)
  return quest_options_;
}

// optional string associated_operation = 16 [(.display_name) = "Associated Operation", (.comment) = "Operation this node is associated with"];
inline bool CMsgQuestMapNodeDef::_internal_has_associated_operation() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgQuestMapNodeDef::has_associated_operation() const {
  return _internal_has_associated_operation();
}
inline void CMsgQuestMapNodeDef::clear_associated_operation() {
  associated_operation_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgQuestMapNodeDef::associated_operation() const {
  // @@protoc_insertion_point(field_get:CMsgQuestMapNodeDef.associated_operation)
  return _internal_associated_operation();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgQuestMapNodeDef::set_associated_operation(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 associated_operation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgQuestMapNodeDef.associated_operation)
}
inline std::string* CMsgQuestMapNodeDef::mutable_associated_operation() {
  // @@protoc_insertion_point(field_mutable:CMsgQuestMapNodeDef.associated_operation)
  return _internal_mutable_associated_operation();
}
inline const std::string& CMsgQuestMapNodeDef::_internal_associated_operation() const {
  return associated_operation_.Get();
}
inline void CMsgQuestMapNodeDef::_internal_set_associated_operation(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  associated_operation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgQuestMapNodeDef::_internal_mutable_associated_operation() {
  _has_bits_[0] |= 0x00000002u;
  return associated_operation_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgQuestMapNodeDef::release_associated_operation() {
  // @@protoc_insertion_point(field_release:CMsgQuestMapNodeDef.associated_operation)
  if (!_internal_has_associated_operation()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return associated_operation_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CMsgQuestMapNodeDef::set_allocated_associated_operation(std::string* associated_operation) {
  if (associated_operation != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  associated_operation_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), associated_operation,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CMsgQuestMapNodeDef.associated_operation)
}

// optional string reward_item_name = 18 [(.display_name) = "Reward Item", (.comment) = "The name of an item to give as a reward"];
inline bool CMsgQuestMapNodeDef::_internal_has_reward_item_name() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgQuestMapNodeDef::has_reward_item_name() const {
  return _internal_has_reward_item_name();
}
inline void CMsgQuestMapNodeDef::clear_reward_item_name() {
  reward_item_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CMsgQuestMapNodeDef::reward_item_name() const {
  // @@protoc_insertion_point(field_get:CMsgQuestMapNodeDef.reward_item_name)
  return _internal_reward_item_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgQuestMapNodeDef::set_reward_item_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 reward_item_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgQuestMapNodeDef.reward_item_name)
}
inline std::string* CMsgQuestMapNodeDef::mutable_reward_item_name() {
  // @@protoc_insertion_point(field_mutable:CMsgQuestMapNodeDef.reward_item_name)
  return _internal_mutable_reward_item_name();
}
inline const std::string& CMsgQuestMapNodeDef::_internal_reward_item_name() const {
  return reward_item_name_.Get();
}
inline void CMsgQuestMapNodeDef::_internal_set_reward_item_name(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  reward_item_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgQuestMapNodeDef::_internal_mutable_reward_item_name() {
  _has_bits_[0] |= 0x00000004u;
  return reward_item_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgQuestMapNodeDef::release_reward_item_name() {
  // @@protoc_insertion_point(field_release:CMsgQuestMapNodeDef.reward_item_name)
  if (!_internal_has_reward_item_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return reward_item_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CMsgQuestMapNodeDef::set_allocated_reward_item_name(std::string* reward_item_name) {
  if (reward_item_name != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  reward_item_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reward_item_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CMsgQuestMapNodeDef.reward_item_name)
}

// optional string reward_lootlist_name = 22 [(.display_name) = "Reward Lootlist", (.comment) = "The name of the lootlist to roll as a reward"];
inline bool CMsgQuestMapNodeDef::_internal_has_reward_lootlist_name() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgQuestMapNodeDef::has_reward_lootlist_name() const {
  return _internal_has_reward_lootlist_name();
}
inline void CMsgQuestMapNodeDef::clear_reward_lootlist_name() {
  reward_lootlist_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CMsgQuestMapNodeDef::reward_lootlist_name() const {
  // @@protoc_insertion_point(field_get:CMsgQuestMapNodeDef.reward_lootlist_name)
  return _internal_reward_lootlist_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgQuestMapNodeDef::set_reward_lootlist_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 reward_lootlist_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgQuestMapNodeDef.reward_lootlist_name)
}
inline std::string* CMsgQuestMapNodeDef::mutable_reward_lootlist_name() {
  // @@protoc_insertion_point(field_mutable:CMsgQuestMapNodeDef.reward_lootlist_name)
  return _internal_mutable_reward_lootlist_name();
}
inline const std::string& CMsgQuestMapNodeDef::_internal_reward_lootlist_name() const {
  return reward_lootlist_name_.Get();
}
inline void CMsgQuestMapNodeDef::_internal_set_reward_lootlist_name(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  reward_lootlist_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgQuestMapNodeDef::_internal_mutable_reward_lootlist_name() {
  _has_bits_[0] |= 0x00000008u;
  return reward_lootlist_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgQuestMapNodeDef::release_reward_lootlist_name() {
  // @@protoc_insertion_point(field_release:CMsgQuestMapNodeDef.reward_lootlist_name)
  if (!_internal_has_reward_lootlist_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return reward_lootlist_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CMsgQuestMapNodeDef::set_allocated_reward_lootlist_name(std::string* reward_lootlist_name) {
  if (reward_lootlist_name != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  reward_lootlist_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reward_lootlist_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CMsgQuestMapNodeDef.reward_lootlist_name)
}

// optional .ENodeCashReward cash_reward = 19 [default = CASH_REWARD_NONE, (.display_name) = "Cash Reward", (.comment) = "How much cash to give when completing the primary objective"];
inline bool CMsgQuestMapNodeDef::_internal_has_cash_reward() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgQuestMapNodeDef::has_cash_reward() const {
  return _internal_has_cash_reward();
}
inline void CMsgQuestMapNodeDef::clear_cash_reward() {
  cash_reward_ = 1;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::ENodeCashReward CMsgQuestMapNodeDef::_internal_cash_reward() const {
  return static_cast< ::ENodeCashReward >(cash_reward_);
}
inline ::ENodeCashReward CMsgQuestMapNodeDef::cash_reward() const {
  // @@protoc_insertion_point(field_get:CMsgQuestMapNodeDef.cash_reward)
  return _internal_cash_reward();
}
inline void CMsgQuestMapNodeDef::_internal_set_cash_reward(::ENodeCashReward value) {
  assert(::ENodeCashReward_IsValid(value));
  _has_bits_[0] |= 0x00000400u;
  cash_reward_ = value;
}
inline void CMsgQuestMapNodeDef::set_cash_reward(::ENodeCashReward value) {
  _internal_set_cash_reward(value);
  // @@protoc_insertion_point(field_set:CMsgQuestMapNodeDef.cash_reward)
}

// optional .CMsgProtoDefID star_type = 20 [(.valid_type) = DEF_TYPE_QUEST_MAP_STAR_TYPE, (.display_name) = "Star Type", (.comment) = "Which type of star this node uses"];
inline bool CMsgQuestMapNodeDef::_internal_has_star_type() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || star_type_ != nullptr);
  return value;
}
inline bool CMsgQuestMapNodeDef::has_star_type() const {
  return _internal_has_star_type();
}
inline void CMsgQuestMapNodeDef::clear_star_type() {
  if (star_type_ != nullptr) star_type_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::CMsgProtoDefID& CMsgQuestMapNodeDef::_internal_star_type() const {
  const ::CMsgProtoDefID* p = star_type_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgProtoDefID&>(
      ::_CMsgProtoDefID_default_instance_);
}
inline const ::CMsgProtoDefID& CMsgQuestMapNodeDef::star_type() const {
  // @@protoc_insertion_point(field_get:CMsgQuestMapNodeDef.star_type)
  return _internal_star_type();
}
inline void CMsgQuestMapNodeDef::unsafe_arena_set_allocated_star_type(
    ::CMsgProtoDefID* star_type) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(star_type_);
  }
  star_type_ = star_type;
  if (star_type) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgQuestMapNodeDef.star_type)
}
inline ::CMsgProtoDefID* CMsgQuestMapNodeDef::release_star_type() {
  _has_bits_[0] &= ~0x00000080u;
  ::CMsgProtoDefID* temp = star_type_;
  star_type_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgProtoDefID* CMsgQuestMapNodeDef::unsafe_arena_release_star_type() {
  // @@protoc_insertion_point(field_release:CMsgQuestMapNodeDef.star_type)
  _has_bits_[0] &= ~0x00000080u;
  ::CMsgProtoDefID* temp = star_type_;
  star_type_ = nullptr;
  return temp;
}
inline ::CMsgProtoDefID* CMsgQuestMapNodeDef::_internal_mutable_star_type() {
  _has_bits_[0] |= 0x00000080u;
  if (star_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgProtoDefID>(GetArenaForAllocation());
    star_type_ = p;
  }
  return star_type_;
}
inline ::CMsgProtoDefID* CMsgQuestMapNodeDef::mutable_star_type() {
  // @@protoc_insertion_point(field_mutable:CMsgQuestMapNodeDef.star_type)
  return _internal_mutable_star_type();
}
inline void CMsgQuestMapNodeDef::set_allocated_star_type(::CMsgProtoDefID* star_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete star_type_;
  }
  if (star_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgProtoDefID>::GetOwningArena(star_type);
    if (message_arena != submessage_arena) {
      star_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, star_type, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  star_type_ = star_type;
  // @@protoc_insertion_point(field_set_allocated:CMsgQuestMapNodeDef.star_type)
}

// optional uint32 stars_to_unlock = 21 [default = 1, (.display_name) = "Stars to Unlock", (.comment) = "Numbers of stars it costs to unlock"];
inline bool CMsgQuestMapNodeDef::_internal_has_stars_to_unlock() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CMsgQuestMapNodeDef::has_stars_to_unlock() const {
  return _internal_has_stars_to_unlock();
}
inline void CMsgQuestMapNodeDef::clear_stars_to_unlock() {
  stars_to_unlock_ = 1u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgQuestMapNodeDef::_internal_stars_to_unlock() const {
  return stars_to_unlock_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgQuestMapNodeDef::stars_to_unlock() const {
  // @@protoc_insertion_point(field_get:CMsgQuestMapNodeDef.stars_to_unlock)
  return _internal_stars_to_unlock();
}
inline void CMsgQuestMapNodeDef::_internal_set_stars_to_unlock(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  stars_to_unlock_ = value;
}
inline void CMsgQuestMapNodeDef::set_stars_to_unlock(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_stars_to_unlock(value);
  // @@protoc_insertion_point(field_set:CMsgQuestMapNodeDef.stars_to_unlock)
}

// -------------------------------------------------------------------

// CMsgPaintKit_Variables

// required .CMsgProtoDefHeader header = 1;
inline bool CMsgPaintKit_Variables::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool CMsgPaintKit_Variables::has_header() const {
  return _internal_has_header();
}
inline void CMsgPaintKit_Variables::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgProtoDefHeader& CMsgPaintKit_Variables::_internal_header() const {
  const ::CMsgProtoDefHeader* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgProtoDefHeader&>(
      ::_CMsgProtoDefHeader_default_instance_);
}
inline const ::CMsgProtoDefHeader& CMsgPaintKit_Variables::header() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Variables.header)
  return _internal_header();
}
inline void CMsgPaintKit_Variables::unsafe_arena_set_allocated_header(
    ::CMsgProtoDefHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPaintKit_Variables.header)
}
inline ::CMsgProtoDefHeader* CMsgPaintKit_Variables::release_header() {
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgProtoDefHeader* temp = header_;
  header_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgProtoDefHeader* CMsgPaintKit_Variables::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:CMsgPaintKit_Variables.header)
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgProtoDefHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::CMsgProtoDefHeader* CMsgPaintKit_Variables::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000001u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgProtoDefHeader>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::CMsgProtoDefHeader* CMsgPaintKit_Variables::mutable_header() {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Variables.header)
  return _internal_mutable_header();
}
inline void CMsgPaintKit_Variables::set_allocated_header(::CMsgProtoDefHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgProtoDefHeader>::GetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Variables.header)
}

// -------------------------------------------------------------------

// CMsgPaintKit_Operation_TextureStage

// optional .CMsgVarField texture = 1 [(.var_field_type) = VAR_TYPE_STRING];
inline bool CMsgPaintKit_Operation_TextureStage::_internal_has_texture() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || texture_ != nullptr);
  return value;
}
inline bool CMsgPaintKit_Operation_TextureStage::has_texture() const {
  return _internal_has_texture();
}
inline void CMsgPaintKit_Operation_TextureStage::clear_texture() {
  if (texture_ != nullptr) texture_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgVarField& CMsgPaintKit_Operation_TextureStage::_internal_texture() const {
  const ::CMsgVarField* p = texture_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgVarField&>(
      ::_CMsgVarField_default_instance_);
}
inline const ::CMsgVarField& CMsgPaintKit_Operation_TextureStage::texture() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Operation_TextureStage.texture)
  return _internal_texture();
}
inline void CMsgPaintKit_Operation_TextureStage::unsafe_arena_set_allocated_texture(
    ::CMsgVarField* texture) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(texture_);
  }
  texture_ = texture;
  if (texture) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPaintKit_Operation_TextureStage.texture)
}
inline ::CMsgVarField* CMsgPaintKit_Operation_TextureStage::release_texture() {
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgVarField* temp = texture_;
  texture_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_TextureStage::unsafe_arena_release_texture() {
  // @@protoc_insertion_point(field_release:CMsgPaintKit_Operation_TextureStage.texture)
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgVarField* temp = texture_;
  texture_ = nullptr;
  return temp;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_TextureStage::_internal_mutable_texture() {
  _has_bits_[0] |= 0x00000001u;
  if (texture_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgVarField>(GetArenaForAllocation());
    texture_ = p;
  }
  return texture_;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_TextureStage::mutable_texture() {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Operation_TextureStage.texture)
  return _internal_mutable_texture();
}
inline void CMsgPaintKit_Operation_TextureStage::set_allocated_texture(::CMsgVarField* texture) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete texture_;
  }
  if (texture) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgVarField>::GetOwningArena(texture);
    if (message_arena != submessage_arena) {
      texture = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, texture, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  texture_ = texture;
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Operation_TextureStage.texture)
}

// optional .CMsgVarField texture_red = 2 [(.var_field_type) = VAR_TYPE_STRING];
inline bool CMsgPaintKit_Operation_TextureStage::_internal_has_texture_red() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || texture_red_ != nullptr);
  return value;
}
inline bool CMsgPaintKit_Operation_TextureStage::has_texture_red() const {
  return _internal_has_texture_red();
}
inline void CMsgPaintKit_Operation_TextureStage::clear_texture_red() {
  if (texture_red_ != nullptr) texture_red_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::CMsgVarField& CMsgPaintKit_Operation_TextureStage::_internal_texture_red() const {
  const ::CMsgVarField* p = texture_red_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgVarField&>(
      ::_CMsgVarField_default_instance_);
}
inline const ::CMsgVarField& CMsgPaintKit_Operation_TextureStage::texture_red() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Operation_TextureStage.texture_red)
  return _internal_texture_red();
}
inline void CMsgPaintKit_Operation_TextureStage::unsafe_arena_set_allocated_texture_red(
    ::CMsgVarField* texture_red) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(texture_red_);
  }
  texture_red_ = texture_red;
  if (texture_red) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPaintKit_Operation_TextureStage.texture_red)
}
inline ::CMsgVarField* CMsgPaintKit_Operation_TextureStage::release_texture_red() {
  _has_bits_[0] &= ~0x00000002u;
  ::CMsgVarField* temp = texture_red_;
  texture_red_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_TextureStage::unsafe_arena_release_texture_red() {
  // @@protoc_insertion_point(field_release:CMsgPaintKit_Operation_TextureStage.texture_red)
  _has_bits_[0] &= ~0x00000002u;
  ::CMsgVarField* temp = texture_red_;
  texture_red_ = nullptr;
  return temp;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_TextureStage::_internal_mutable_texture_red() {
  _has_bits_[0] |= 0x00000002u;
  if (texture_red_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgVarField>(GetArenaForAllocation());
    texture_red_ = p;
  }
  return texture_red_;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_TextureStage::mutable_texture_red() {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Operation_TextureStage.texture_red)
  return _internal_mutable_texture_red();
}
inline void CMsgPaintKit_Operation_TextureStage::set_allocated_texture_red(::CMsgVarField* texture_red) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete texture_red_;
  }
  if (texture_red) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgVarField>::GetOwningArena(texture_red);
    if (message_arena != submessage_arena) {
      texture_red = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, texture_red, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  texture_red_ = texture_red;
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Operation_TextureStage.texture_red)
}

// optional .CMsgVarField texture_blue = 3 [(.var_field_type) = VAR_TYPE_STRING];
inline bool CMsgPaintKit_Operation_TextureStage::_internal_has_texture_blue() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || texture_blue_ != nullptr);
  return value;
}
inline bool CMsgPaintKit_Operation_TextureStage::has_texture_blue() const {
  return _internal_has_texture_blue();
}
inline void CMsgPaintKit_Operation_TextureStage::clear_texture_blue() {
  if (texture_blue_ != nullptr) texture_blue_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::CMsgVarField& CMsgPaintKit_Operation_TextureStage::_internal_texture_blue() const {
  const ::CMsgVarField* p = texture_blue_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgVarField&>(
      ::_CMsgVarField_default_instance_);
}
inline const ::CMsgVarField& CMsgPaintKit_Operation_TextureStage::texture_blue() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Operation_TextureStage.texture_blue)
  return _internal_texture_blue();
}
inline void CMsgPaintKit_Operation_TextureStage::unsafe_arena_set_allocated_texture_blue(
    ::CMsgVarField* texture_blue) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(texture_blue_);
  }
  texture_blue_ = texture_blue;
  if (texture_blue) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPaintKit_Operation_TextureStage.texture_blue)
}
inline ::CMsgVarField* CMsgPaintKit_Operation_TextureStage::release_texture_blue() {
  _has_bits_[0] &= ~0x00000004u;
  ::CMsgVarField* temp = texture_blue_;
  texture_blue_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_TextureStage::unsafe_arena_release_texture_blue() {
  // @@protoc_insertion_point(field_release:CMsgPaintKit_Operation_TextureStage.texture_blue)
  _has_bits_[0] &= ~0x00000004u;
  ::CMsgVarField* temp = texture_blue_;
  texture_blue_ = nullptr;
  return temp;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_TextureStage::_internal_mutable_texture_blue() {
  _has_bits_[0] |= 0x00000004u;
  if (texture_blue_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgVarField>(GetArenaForAllocation());
    texture_blue_ = p;
  }
  return texture_blue_;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_TextureStage::mutable_texture_blue() {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Operation_TextureStage.texture_blue)
  return _internal_mutable_texture_blue();
}
inline void CMsgPaintKit_Operation_TextureStage::set_allocated_texture_blue(::CMsgVarField* texture_blue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete texture_blue_;
  }
  if (texture_blue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgVarField>::GetOwningArena(texture_blue);
    if (message_arena != submessage_arena) {
      texture_blue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, texture_blue, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  texture_blue_ = texture_blue;
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Operation_TextureStage.texture_blue)
}

// optional .CMsgVarField adjust_black = 4 [(.var_field_type) = VAR_TYPE_STRING];
inline bool CMsgPaintKit_Operation_TextureStage::_internal_has_adjust_black() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || adjust_black_ != nullptr);
  return value;
}
inline bool CMsgPaintKit_Operation_TextureStage::has_adjust_black() const {
  return _internal_has_adjust_black();
}
inline void CMsgPaintKit_Operation_TextureStage::clear_adjust_black() {
  if (adjust_black_ != nullptr) adjust_black_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::CMsgVarField& CMsgPaintKit_Operation_TextureStage::_internal_adjust_black() const {
  const ::CMsgVarField* p = adjust_black_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgVarField&>(
      ::_CMsgVarField_default_instance_);
}
inline const ::CMsgVarField& CMsgPaintKit_Operation_TextureStage::adjust_black() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Operation_TextureStage.adjust_black)
  return _internal_adjust_black();
}
inline void CMsgPaintKit_Operation_TextureStage::unsafe_arena_set_allocated_adjust_black(
    ::CMsgVarField* adjust_black) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(adjust_black_);
  }
  adjust_black_ = adjust_black;
  if (adjust_black) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPaintKit_Operation_TextureStage.adjust_black)
}
inline ::CMsgVarField* CMsgPaintKit_Operation_TextureStage::release_adjust_black() {
  _has_bits_[0] &= ~0x00000008u;
  ::CMsgVarField* temp = adjust_black_;
  adjust_black_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_TextureStage::unsafe_arena_release_adjust_black() {
  // @@protoc_insertion_point(field_release:CMsgPaintKit_Operation_TextureStage.adjust_black)
  _has_bits_[0] &= ~0x00000008u;
  ::CMsgVarField* temp = adjust_black_;
  adjust_black_ = nullptr;
  return temp;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_TextureStage::_internal_mutable_adjust_black() {
  _has_bits_[0] |= 0x00000008u;
  if (adjust_black_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgVarField>(GetArenaForAllocation());
    adjust_black_ = p;
  }
  return adjust_black_;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_TextureStage::mutable_adjust_black() {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Operation_TextureStage.adjust_black)
  return _internal_mutable_adjust_black();
}
inline void CMsgPaintKit_Operation_TextureStage::set_allocated_adjust_black(::CMsgVarField* adjust_black) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete adjust_black_;
  }
  if (adjust_black) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgVarField>::GetOwningArena(adjust_black);
    if (message_arena != submessage_arena) {
      adjust_black = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, adjust_black, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  adjust_black_ = adjust_black;
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Operation_TextureStage.adjust_black)
}

// optional .CMsgVarField adjust_offset = 5 [(.var_field_type) = VAR_TYPE_STRING];
inline bool CMsgPaintKit_Operation_TextureStage::_internal_has_adjust_offset() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || adjust_offset_ != nullptr);
  return value;
}
inline bool CMsgPaintKit_Operation_TextureStage::has_adjust_offset() const {
  return _internal_has_adjust_offset();
}
inline void CMsgPaintKit_Operation_TextureStage::clear_adjust_offset() {
  if (adjust_offset_ != nullptr) adjust_offset_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::CMsgVarField& CMsgPaintKit_Operation_TextureStage::_internal_adjust_offset() const {
  const ::CMsgVarField* p = adjust_offset_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgVarField&>(
      ::_CMsgVarField_default_instance_);
}
inline const ::CMsgVarField& CMsgPaintKit_Operation_TextureStage::adjust_offset() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Operation_TextureStage.adjust_offset)
  return _internal_adjust_offset();
}
inline void CMsgPaintKit_Operation_TextureStage::unsafe_arena_set_allocated_adjust_offset(
    ::CMsgVarField* adjust_offset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(adjust_offset_);
  }
  adjust_offset_ = adjust_offset;
  if (adjust_offset) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPaintKit_Operation_TextureStage.adjust_offset)
}
inline ::CMsgVarField* CMsgPaintKit_Operation_TextureStage::release_adjust_offset() {
  _has_bits_[0] &= ~0x00000010u;
  ::CMsgVarField* temp = adjust_offset_;
  adjust_offset_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_TextureStage::unsafe_arena_release_adjust_offset() {
  // @@protoc_insertion_point(field_release:CMsgPaintKit_Operation_TextureStage.adjust_offset)
  _has_bits_[0] &= ~0x00000010u;
  ::CMsgVarField* temp = adjust_offset_;
  adjust_offset_ = nullptr;
  return temp;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_TextureStage::_internal_mutable_adjust_offset() {
  _has_bits_[0] |= 0x00000010u;
  if (adjust_offset_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgVarField>(GetArenaForAllocation());
    adjust_offset_ = p;
  }
  return adjust_offset_;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_TextureStage::mutable_adjust_offset() {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Operation_TextureStage.adjust_offset)
  return _internal_mutable_adjust_offset();
}
inline void CMsgPaintKit_Operation_TextureStage::set_allocated_adjust_offset(::CMsgVarField* adjust_offset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete adjust_offset_;
  }
  if (adjust_offset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgVarField>::GetOwningArena(adjust_offset);
    if (message_arena != submessage_arena) {
      adjust_offset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, adjust_offset, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  adjust_offset_ = adjust_offset;
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Operation_TextureStage.adjust_offset)
}

// optional .CMsgVarField adjust_gamma = 6 [(.var_field_type) = VAR_TYPE_STRING];
inline bool CMsgPaintKit_Operation_TextureStage::_internal_has_adjust_gamma() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || adjust_gamma_ != nullptr);
  return value;
}
inline bool CMsgPaintKit_Operation_TextureStage::has_adjust_gamma() const {
  return _internal_has_adjust_gamma();
}
inline void CMsgPaintKit_Operation_TextureStage::clear_adjust_gamma() {
  if (adjust_gamma_ != nullptr) adjust_gamma_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::CMsgVarField& CMsgPaintKit_Operation_TextureStage::_internal_adjust_gamma() const {
  const ::CMsgVarField* p = adjust_gamma_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgVarField&>(
      ::_CMsgVarField_default_instance_);
}
inline const ::CMsgVarField& CMsgPaintKit_Operation_TextureStage::adjust_gamma() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Operation_TextureStage.adjust_gamma)
  return _internal_adjust_gamma();
}
inline void CMsgPaintKit_Operation_TextureStage::unsafe_arena_set_allocated_adjust_gamma(
    ::CMsgVarField* adjust_gamma) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(adjust_gamma_);
  }
  adjust_gamma_ = adjust_gamma;
  if (adjust_gamma) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPaintKit_Operation_TextureStage.adjust_gamma)
}
inline ::CMsgVarField* CMsgPaintKit_Operation_TextureStage::release_adjust_gamma() {
  _has_bits_[0] &= ~0x00000020u;
  ::CMsgVarField* temp = adjust_gamma_;
  adjust_gamma_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_TextureStage::unsafe_arena_release_adjust_gamma() {
  // @@protoc_insertion_point(field_release:CMsgPaintKit_Operation_TextureStage.adjust_gamma)
  _has_bits_[0] &= ~0x00000020u;
  ::CMsgVarField* temp = adjust_gamma_;
  adjust_gamma_ = nullptr;
  return temp;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_TextureStage::_internal_mutable_adjust_gamma() {
  _has_bits_[0] |= 0x00000020u;
  if (adjust_gamma_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgVarField>(GetArenaForAllocation());
    adjust_gamma_ = p;
  }
  return adjust_gamma_;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_TextureStage::mutable_adjust_gamma() {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Operation_TextureStage.adjust_gamma)
  return _internal_mutable_adjust_gamma();
}
inline void CMsgPaintKit_Operation_TextureStage::set_allocated_adjust_gamma(::CMsgVarField* adjust_gamma) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete adjust_gamma_;
  }
  if (adjust_gamma) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgVarField>::GetOwningArena(adjust_gamma);
    if (message_arena != submessage_arena) {
      adjust_gamma = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, adjust_gamma, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  adjust_gamma_ = adjust_gamma;
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Operation_TextureStage.adjust_gamma)
}

// optional .CMsgVarField rotation = 7 [(.var_field_type) = VAR_TYPE_STRING];
inline bool CMsgPaintKit_Operation_TextureStage::_internal_has_rotation() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || rotation_ != nullptr);
  return value;
}
inline bool CMsgPaintKit_Operation_TextureStage::has_rotation() const {
  return _internal_has_rotation();
}
inline void CMsgPaintKit_Operation_TextureStage::clear_rotation() {
  if (rotation_ != nullptr) rotation_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::CMsgVarField& CMsgPaintKit_Operation_TextureStage::_internal_rotation() const {
  const ::CMsgVarField* p = rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgVarField&>(
      ::_CMsgVarField_default_instance_);
}
inline const ::CMsgVarField& CMsgPaintKit_Operation_TextureStage::rotation() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Operation_TextureStage.rotation)
  return _internal_rotation();
}
inline void CMsgPaintKit_Operation_TextureStage::unsafe_arena_set_allocated_rotation(
    ::CMsgVarField* rotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rotation_);
  }
  rotation_ = rotation;
  if (rotation) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPaintKit_Operation_TextureStage.rotation)
}
inline ::CMsgVarField* CMsgPaintKit_Operation_TextureStage::release_rotation() {
  _has_bits_[0] &= ~0x00000040u;
  ::CMsgVarField* temp = rotation_;
  rotation_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_TextureStage::unsafe_arena_release_rotation() {
  // @@protoc_insertion_point(field_release:CMsgPaintKit_Operation_TextureStage.rotation)
  _has_bits_[0] &= ~0x00000040u;
  ::CMsgVarField* temp = rotation_;
  rotation_ = nullptr;
  return temp;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_TextureStage::_internal_mutable_rotation() {
  _has_bits_[0] |= 0x00000040u;
  if (rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgVarField>(GetArenaForAllocation());
    rotation_ = p;
  }
  return rotation_;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_TextureStage::mutable_rotation() {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Operation_TextureStage.rotation)
  return _internal_mutable_rotation();
}
inline void CMsgPaintKit_Operation_TextureStage::set_allocated_rotation(::CMsgVarField* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete rotation_;
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgVarField>::GetOwningArena(rotation);
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Operation_TextureStage.rotation)
}

// optional .CMsgVarField translate_u = 8 [(.var_field_type) = VAR_TYPE_STRING];
inline bool CMsgPaintKit_Operation_TextureStage::_internal_has_translate_u() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || translate_u_ != nullptr);
  return value;
}
inline bool CMsgPaintKit_Operation_TextureStage::has_translate_u() const {
  return _internal_has_translate_u();
}
inline void CMsgPaintKit_Operation_TextureStage::clear_translate_u() {
  if (translate_u_ != nullptr) translate_u_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::CMsgVarField& CMsgPaintKit_Operation_TextureStage::_internal_translate_u() const {
  const ::CMsgVarField* p = translate_u_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgVarField&>(
      ::_CMsgVarField_default_instance_);
}
inline const ::CMsgVarField& CMsgPaintKit_Operation_TextureStage::translate_u() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Operation_TextureStage.translate_u)
  return _internal_translate_u();
}
inline void CMsgPaintKit_Operation_TextureStage::unsafe_arena_set_allocated_translate_u(
    ::CMsgVarField* translate_u) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(translate_u_);
  }
  translate_u_ = translate_u;
  if (translate_u) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPaintKit_Operation_TextureStage.translate_u)
}
inline ::CMsgVarField* CMsgPaintKit_Operation_TextureStage::release_translate_u() {
  _has_bits_[0] &= ~0x00000080u;
  ::CMsgVarField* temp = translate_u_;
  translate_u_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_TextureStage::unsafe_arena_release_translate_u() {
  // @@protoc_insertion_point(field_release:CMsgPaintKit_Operation_TextureStage.translate_u)
  _has_bits_[0] &= ~0x00000080u;
  ::CMsgVarField* temp = translate_u_;
  translate_u_ = nullptr;
  return temp;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_TextureStage::_internal_mutable_translate_u() {
  _has_bits_[0] |= 0x00000080u;
  if (translate_u_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgVarField>(GetArenaForAllocation());
    translate_u_ = p;
  }
  return translate_u_;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_TextureStage::mutable_translate_u() {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Operation_TextureStage.translate_u)
  return _internal_mutable_translate_u();
}
inline void CMsgPaintKit_Operation_TextureStage::set_allocated_translate_u(::CMsgVarField* translate_u) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete translate_u_;
  }
  if (translate_u) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgVarField>::GetOwningArena(translate_u);
    if (message_arena != submessage_arena) {
      translate_u = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, translate_u, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  translate_u_ = translate_u;
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Operation_TextureStage.translate_u)
}

// optional .CMsgVarField translate_v = 9 [(.var_field_type) = VAR_TYPE_STRING];
inline bool CMsgPaintKit_Operation_TextureStage::_internal_has_translate_v() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || translate_v_ != nullptr);
  return value;
}
inline bool CMsgPaintKit_Operation_TextureStage::has_translate_v() const {
  return _internal_has_translate_v();
}
inline void CMsgPaintKit_Operation_TextureStage::clear_translate_v() {
  if (translate_v_ != nullptr) translate_v_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::CMsgVarField& CMsgPaintKit_Operation_TextureStage::_internal_translate_v() const {
  const ::CMsgVarField* p = translate_v_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgVarField&>(
      ::_CMsgVarField_default_instance_);
}
inline const ::CMsgVarField& CMsgPaintKit_Operation_TextureStage::translate_v() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Operation_TextureStage.translate_v)
  return _internal_translate_v();
}
inline void CMsgPaintKit_Operation_TextureStage::unsafe_arena_set_allocated_translate_v(
    ::CMsgVarField* translate_v) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(translate_v_);
  }
  translate_v_ = translate_v;
  if (translate_v) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPaintKit_Operation_TextureStage.translate_v)
}
inline ::CMsgVarField* CMsgPaintKit_Operation_TextureStage::release_translate_v() {
  _has_bits_[0] &= ~0x00000100u;
  ::CMsgVarField* temp = translate_v_;
  translate_v_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_TextureStage::unsafe_arena_release_translate_v() {
  // @@protoc_insertion_point(field_release:CMsgPaintKit_Operation_TextureStage.translate_v)
  _has_bits_[0] &= ~0x00000100u;
  ::CMsgVarField* temp = translate_v_;
  translate_v_ = nullptr;
  return temp;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_TextureStage::_internal_mutable_translate_v() {
  _has_bits_[0] |= 0x00000100u;
  if (translate_v_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgVarField>(GetArenaForAllocation());
    translate_v_ = p;
  }
  return translate_v_;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_TextureStage::mutable_translate_v() {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Operation_TextureStage.translate_v)
  return _internal_mutable_translate_v();
}
inline void CMsgPaintKit_Operation_TextureStage::set_allocated_translate_v(::CMsgVarField* translate_v) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete translate_v_;
  }
  if (translate_v) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgVarField>::GetOwningArena(translate_v);
    if (message_arena != submessage_arena) {
      translate_v = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, translate_v, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  translate_v_ = translate_v;
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Operation_TextureStage.translate_v)
}

// optional .CMsgVarField scale_uv = 10 [(.var_field_type) = VAR_TYPE_STRING];
inline bool CMsgPaintKit_Operation_TextureStage::_internal_has_scale_uv() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || scale_uv_ != nullptr);
  return value;
}
inline bool CMsgPaintKit_Operation_TextureStage::has_scale_uv() const {
  return _internal_has_scale_uv();
}
inline void CMsgPaintKit_Operation_TextureStage::clear_scale_uv() {
  if (scale_uv_ != nullptr) scale_uv_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
inline const ::CMsgVarField& CMsgPaintKit_Operation_TextureStage::_internal_scale_uv() const {
  const ::CMsgVarField* p = scale_uv_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgVarField&>(
      ::_CMsgVarField_default_instance_);
}
inline const ::CMsgVarField& CMsgPaintKit_Operation_TextureStage::scale_uv() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Operation_TextureStage.scale_uv)
  return _internal_scale_uv();
}
inline void CMsgPaintKit_Operation_TextureStage::unsafe_arena_set_allocated_scale_uv(
    ::CMsgVarField* scale_uv) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scale_uv_);
  }
  scale_uv_ = scale_uv;
  if (scale_uv) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPaintKit_Operation_TextureStage.scale_uv)
}
inline ::CMsgVarField* CMsgPaintKit_Operation_TextureStage::release_scale_uv() {
  _has_bits_[0] &= ~0x00000200u;
  ::CMsgVarField* temp = scale_uv_;
  scale_uv_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_TextureStage::unsafe_arena_release_scale_uv() {
  // @@protoc_insertion_point(field_release:CMsgPaintKit_Operation_TextureStage.scale_uv)
  _has_bits_[0] &= ~0x00000200u;
  ::CMsgVarField* temp = scale_uv_;
  scale_uv_ = nullptr;
  return temp;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_TextureStage::_internal_mutable_scale_uv() {
  _has_bits_[0] |= 0x00000200u;
  if (scale_uv_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgVarField>(GetArenaForAllocation());
    scale_uv_ = p;
  }
  return scale_uv_;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_TextureStage::mutable_scale_uv() {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Operation_TextureStage.scale_uv)
  return _internal_mutable_scale_uv();
}
inline void CMsgPaintKit_Operation_TextureStage::set_allocated_scale_uv(::CMsgVarField* scale_uv) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete scale_uv_;
  }
  if (scale_uv) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgVarField>::GetOwningArena(scale_uv);
    if (message_arena != submessage_arena) {
      scale_uv = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scale_uv, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  scale_uv_ = scale_uv;
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Operation_TextureStage.scale_uv)
}

// optional .CMsgVarField flip_u = 11 [(.var_field_type) = VAR_TYPE_STRING];
inline bool CMsgPaintKit_Operation_TextureStage::_internal_has_flip_u() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || flip_u_ != nullptr);
  return value;
}
inline bool CMsgPaintKit_Operation_TextureStage::has_flip_u() const {
  return _internal_has_flip_u();
}
inline void CMsgPaintKit_Operation_TextureStage::clear_flip_u() {
  if (flip_u_ != nullptr) flip_u_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
inline const ::CMsgVarField& CMsgPaintKit_Operation_TextureStage::_internal_flip_u() const {
  const ::CMsgVarField* p = flip_u_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgVarField&>(
      ::_CMsgVarField_default_instance_);
}
inline const ::CMsgVarField& CMsgPaintKit_Operation_TextureStage::flip_u() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Operation_TextureStage.flip_u)
  return _internal_flip_u();
}
inline void CMsgPaintKit_Operation_TextureStage::unsafe_arena_set_allocated_flip_u(
    ::CMsgVarField* flip_u) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(flip_u_);
  }
  flip_u_ = flip_u;
  if (flip_u) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPaintKit_Operation_TextureStage.flip_u)
}
inline ::CMsgVarField* CMsgPaintKit_Operation_TextureStage::release_flip_u() {
  _has_bits_[0] &= ~0x00000400u;
  ::CMsgVarField* temp = flip_u_;
  flip_u_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_TextureStage::unsafe_arena_release_flip_u() {
  // @@protoc_insertion_point(field_release:CMsgPaintKit_Operation_TextureStage.flip_u)
  _has_bits_[0] &= ~0x00000400u;
  ::CMsgVarField* temp = flip_u_;
  flip_u_ = nullptr;
  return temp;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_TextureStage::_internal_mutable_flip_u() {
  _has_bits_[0] |= 0x00000400u;
  if (flip_u_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgVarField>(GetArenaForAllocation());
    flip_u_ = p;
  }
  return flip_u_;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_TextureStage::mutable_flip_u() {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Operation_TextureStage.flip_u)
  return _internal_mutable_flip_u();
}
inline void CMsgPaintKit_Operation_TextureStage::set_allocated_flip_u(::CMsgVarField* flip_u) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete flip_u_;
  }
  if (flip_u) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgVarField>::GetOwningArena(flip_u);
    if (message_arena != submessage_arena) {
      flip_u = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, flip_u, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  flip_u_ = flip_u;
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Operation_TextureStage.flip_u)
}

// optional .CMsgVarField flip_v = 12 [(.var_field_type) = VAR_TYPE_STRING];
inline bool CMsgPaintKit_Operation_TextureStage::_internal_has_flip_v() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || flip_v_ != nullptr);
  return value;
}
inline bool CMsgPaintKit_Operation_TextureStage::has_flip_v() const {
  return _internal_has_flip_v();
}
inline void CMsgPaintKit_Operation_TextureStage::clear_flip_v() {
  if (flip_v_ != nullptr) flip_v_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
inline const ::CMsgVarField& CMsgPaintKit_Operation_TextureStage::_internal_flip_v() const {
  const ::CMsgVarField* p = flip_v_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgVarField&>(
      ::_CMsgVarField_default_instance_);
}
inline const ::CMsgVarField& CMsgPaintKit_Operation_TextureStage::flip_v() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Operation_TextureStage.flip_v)
  return _internal_flip_v();
}
inline void CMsgPaintKit_Operation_TextureStage::unsafe_arena_set_allocated_flip_v(
    ::CMsgVarField* flip_v) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(flip_v_);
  }
  flip_v_ = flip_v;
  if (flip_v) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPaintKit_Operation_TextureStage.flip_v)
}
inline ::CMsgVarField* CMsgPaintKit_Operation_TextureStage::release_flip_v() {
  _has_bits_[0] &= ~0x00000800u;
  ::CMsgVarField* temp = flip_v_;
  flip_v_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_TextureStage::unsafe_arena_release_flip_v() {
  // @@protoc_insertion_point(field_release:CMsgPaintKit_Operation_TextureStage.flip_v)
  _has_bits_[0] &= ~0x00000800u;
  ::CMsgVarField* temp = flip_v_;
  flip_v_ = nullptr;
  return temp;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_TextureStage::_internal_mutable_flip_v() {
  _has_bits_[0] |= 0x00000800u;
  if (flip_v_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgVarField>(GetArenaForAllocation());
    flip_v_ = p;
  }
  return flip_v_;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_TextureStage::mutable_flip_v() {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Operation_TextureStage.flip_v)
  return _internal_mutable_flip_v();
}
inline void CMsgPaintKit_Operation_TextureStage::set_allocated_flip_v(::CMsgVarField* flip_v) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete flip_v_;
  }
  if (flip_v) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgVarField>::GetOwningArena(flip_v);
    if (message_arena != submessage_arena) {
      flip_v = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, flip_v, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  flip_v_ = flip_v;
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Operation_TextureStage.flip_v)
}

// -------------------------------------------------------------------

// CMsgPaintKit_Operation_CombineStage

// optional .CMsgVarField adjust_black = 1 [(.var_field_type) = VAR_TYPE_STRING];
inline bool CMsgPaintKit_Operation_CombineStage::_internal_has_adjust_black() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || adjust_black_ != nullptr);
  return value;
}
inline bool CMsgPaintKit_Operation_CombineStage::has_adjust_black() const {
  return _internal_has_adjust_black();
}
inline void CMsgPaintKit_Operation_CombineStage::clear_adjust_black() {
  if (adjust_black_ != nullptr) adjust_black_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgVarField& CMsgPaintKit_Operation_CombineStage::_internal_adjust_black() const {
  const ::CMsgVarField* p = adjust_black_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgVarField&>(
      ::_CMsgVarField_default_instance_);
}
inline const ::CMsgVarField& CMsgPaintKit_Operation_CombineStage::adjust_black() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Operation_CombineStage.adjust_black)
  return _internal_adjust_black();
}
inline void CMsgPaintKit_Operation_CombineStage::unsafe_arena_set_allocated_adjust_black(
    ::CMsgVarField* adjust_black) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(adjust_black_);
  }
  adjust_black_ = adjust_black;
  if (adjust_black) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPaintKit_Operation_CombineStage.adjust_black)
}
inline ::CMsgVarField* CMsgPaintKit_Operation_CombineStage::release_adjust_black() {
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgVarField* temp = adjust_black_;
  adjust_black_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_CombineStage::unsafe_arena_release_adjust_black() {
  // @@protoc_insertion_point(field_release:CMsgPaintKit_Operation_CombineStage.adjust_black)
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgVarField* temp = adjust_black_;
  adjust_black_ = nullptr;
  return temp;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_CombineStage::_internal_mutable_adjust_black() {
  _has_bits_[0] |= 0x00000001u;
  if (adjust_black_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgVarField>(GetArenaForAllocation());
    adjust_black_ = p;
  }
  return adjust_black_;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_CombineStage::mutable_adjust_black() {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Operation_CombineStage.adjust_black)
  return _internal_mutable_adjust_black();
}
inline void CMsgPaintKit_Operation_CombineStage::set_allocated_adjust_black(::CMsgVarField* adjust_black) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete adjust_black_;
  }
  if (adjust_black) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgVarField>::GetOwningArena(adjust_black);
    if (message_arena != submessage_arena) {
      adjust_black = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, adjust_black, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  adjust_black_ = adjust_black;
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Operation_CombineStage.adjust_black)
}

// optional .CMsgVarField adjust_offset = 2 [(.var_field_type) = VAR_TYPE_STRING];
inline bool CMsgPaintKit_Operation_CombineStage::_internal_has_adjust_offset() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || adjust_offset_ != nullptr);
  return value;
}
inline bool CMsgPaintKit_Operation_CombineStage::has_adjust_offset() const {
  return _internal_has_adjust_offset();
}
inline void CMsgPaintKit_Operation_CombineStage::clear_adjust_offset() {
  if (adjust_offset_ != nullptr) adjust_offset_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::CMsgVarField& CMsgPaintKit_Operation_CombineStage::_internal_adjust_offset() const {
  const ::CMsgVarField* p = adjust_offset_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgVarField&>(
      ::_CMsgVarField_default_instance_);
}
inline const ::CMsgVarField& CMsgPaintKit_Operation_CombineStage::adjust_offset() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Operation_CombineStage.adjust_offset)
  return _internal_adjust_offset();
}
inline void CMsgPaintKit_Operation_CombineStage::unsafe_arena_set_allocated_adjust_offset(
    ::CMsgVarField* adjust_offset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(adjust_offset_);
  }
  adjust_offset_ = adjust_offset;
  if (adjust_offset) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPaintKit_Operation_CombineStage.adjust_offset)
}
inline ::CMsgVarField* CMsgPaintKit_Operation_CombineStage::release_adjust_offset() {
  _has_bits_[0] &= ~0x00000002u;
  ::CMsgVarField* temp = adjust_offset_;
  adjust_offset_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_CombineStage::unsafe_arena_release_adjust_offset() {
  // @@protoc_insertion_point(field_release:CMsgPaintKit_Operation_CombineStage.adjust_offset)
  _has_bits_[0] &= ~0x00000002u;
  ::CMsgVarField* temp = adjust_offset_;
  adjust_offset_ = nullptr;
  return temp;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_CombineStage::_internal_mutable_adjust_offset() {
  _has_bits_[0] |= 0x00000002u;
  if (adjust_offset_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgVarField>(GetArenaForAllocation());
    adjust_offset_ = p;
  }
  return adjust_offset_;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_CombineStage::mutable_adjust_offset() {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Operation_CombineStage.adjust_offset)
  return _internal_mutable_adjust_offset();
}
inline void CMsgPaintKit_Operation_CombineStage::set_allocated_adjust_offset(::CMsgVarField* adjust_offset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete adjust_offset_;
  }
  if (adjust_offset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgVarField>::GetOwningArena(adjust_offset);
    if (message_arena != submessage_arena) {
      adjust_offset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, adjust_offset, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  adjust_offset_ = adjust_offset;
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Operation_CombineStage.adjust_offset)
}

// optional .CMsgVarField adjust_gamma = 3 [(.var_field_type) = VAR_TYPE_STRING];
inline bool CMsgPaintKit_Operation_CombineStage::_internal_has_adjust_gamma() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || adjust_gamma_ != nullptr);
  return value;
}
inline bool CMsgPaintKit_Operation_CombineStage::has_adjust_gamma() const {
  return _internal_has_adjust_gamma();
}
inline void CMsgPaintKit_Operation_CombineStage::clear_adjust_gamma() {
  if (adjust_gamma_ != nullptr) adjust_gamma_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::CMsgVarField& CMsgPaintKit_Operation_CombineStage::_internal_adjust_gamma() const {
  const ::CMsgVarField* p = adjust_gamma_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgVarField&>(
      ::_CMsgVarField_default_instance_);
}
inline const ::CMsgVarField& CMsgPaintKit_Operation_CombineStage::adjust_gamma() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Operation_CombineStage.adjust_gamma)
  return _internal_adjust_gamma();
}
inline void CMsgPaintKit_Operation_CombineStage::unsafe_arena_set_allocated_adjust_gamma(
    ::CMsgVarField* adjust_gamma) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(adjust_gamma_);
  }
  adjust_gamma_ = adjust_gamma;
  if (adjust_gamma) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPaintKit_Operation_CombineStage.adjust_gamma)
}
inline ::CMsgVarField* CMsgPaintKit_Operation_CombineStage::release_adjust_gamma() {
  _has_bits_[0] &= ~0x00000004u;
  ::CMsgVarField* temp = adjust_gamma_;
  adjust_gamma_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_CombineStage::unsafe_arena_release_adjust_gamma() {
  // @@protoc_insertion_point(field_release:CMsgPaintKit_Operation_CombineStage.adjust_gamma)
  _has_bits_[0] &= ~0x00000004u;
  ::CMsgVarField* temp = adjust_gamma_;
  adjust_gamma_ = nullptr;
  return temp;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_CombineStage::_internal_mutable_adjust_gamma() {
  _has_bits_[0] |= 0x00000004u;
  if (adjust_gamma_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgVarField>(GetArenaForAllocation());
    adjust_gamma_ = p;
  }
  return adjust_gamma_;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_CombineStage::mutable_adjust_gamma() {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Operation_CombineStage.adjust_gamma)
  return _internal_mutable_adjust_gamma();
}
inline void CMsgPaintKit_Operation_CombineStage::set_allocated_adjust_gamma(::CMsgVarField* adjust_gamma) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete adjust_gamma_;
  }
  if (adjust_gamma) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgVarField>::GetOwningArena(adjust_gamma);
    if (message_arena != submessage_arena) {
      adjust_gamma = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, adjust_gamma, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  adjust_gamma_ = adjust_gamma;
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Operation_CombineStage.adjust_gamma)
}

// optional .CMsgVarField rotation = 4 [(.var_field_type) = VAR_TYPE_STRING];
inline bool CMsgPaintKit_Operation_CombineStage::_internal_has_rotation() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || rotation_ != nullptr);
  return value;
}
inline bool CMsgPaintKit_Operation_CombineStage::has_rotation() const {
  return _internal_has_rotation();
}
inline void CMsgPaintKit_Operation_CombineStage::clear_rotation() {
  if (rotation_ != nullptr) rotation_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::CMsgVarField& CMsgPaintKit_Operation_CombineStage::_internal_rotation() const {
  const ::CMsgVarField* p = rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgVarField&>(
      ::_CMsgVarField_default_instance_);
}
inline const ::CMsgVarField& CMsgPaintKit_Operation_CombineStage::rotation() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Operation_CombineStage.rotation)
  return _internal_rotation();
}
inline void CMsgPaintKit_Operation_CombineStage::unsafe_arena_set_allocated_rotation(
    ::CMsgVarField* rotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rotation_);
  }
  rotation_ = rotation;
  if (rotation) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPaintKit_Operation_CombineStage.rotation)
}
inline ::CMsgVarField* CMsgPaintKit_Operation_CombineStage::release_rotation() {
  _has_bits_[0] &= ~0x00000008u;
  ::CMsgVarField* temp = rotation_;
  rotation_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_CombineStage::unsafe_arena_release_rotation() {
  // @@protoc_insertion_point(field_release:CMsgPaintKit_Operation_CombineStage.rotation)
  _has_bits_[0] &= ~0x00000008u;
  ::CMsgVarField* temp = rotation_;
  rotation_ = nullptr;
  return temp;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_CombineStage::_internal_mutable_rotation() {
  _has_bits_[0] |= 0x00000008u;
  if (rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgVarField>(GetArenaForAllocation());
    rotation_ = p;
  }
  return rotation_;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_CombineStage::mutable_rotation() {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Operation_CombineStage.rotation)
  return _internal_mutable_rotation();
}
inline void CMsgPaintKit_Operation_CombineStage::set_allocated_rotation(::CMsgVarField* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete rotation_;
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgVarField>::GetOwningArena(rotation);
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Operation_CombineStage.rotation)
}

// optional .CMsgVarField translate_u = 5 [(.var_field_type) = VAR_TYPE_STRING];
inline bool CMsgPaintKit_Operation_CombineStage::_internal_has_translate_u() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || translate_u_ != nullptr);
  return value;
}
inline bool CMsgPaintKit_Operation_CombineStage::has_translate_u() const {
  return _internal_has_translate_u();
}
inline void CMsgPaintKit_Operation_CombineStage::clear_translate_u() {
  if (translate_u_ != nullptr) translate_u_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::CMsgVarField& CMsgPaintKit_Operation_CombineStage::_internal_translate_u() const {
  const ::CMsgVarField* p = translate_u_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgVarField&>(
      ::_CMsgVarField_default_instance_);
}
inline const ::CMsgVarField& CMsgPaintKit_Operation_CombineStage::translate_u() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Operation_CombineStage.translate_u)
  return _internal_translate_u();
}
inline void CMsgPaintKit_Operation_CombineStage::unsafe_arena_set_allocated_translate_u(
    ::CMsgVarField* translate_u) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(translate_u_);
  }
  translate_u_ = translate_u;
  if (translate_u) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPaintKit_Operation_CombineStage.translate_u)
}
inline ::CMsgVarField* CMsgPaintKit_Operation_CombineStage::release_translate_u() {
  _has_bits_[0] &= ~0x00000010u;
  ::CMsgVarField* temp = translate_u_;
  translate_u_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_CombineStage::unsafe_arena_release_translate_u() {
  // @@protoc_insertion_point(field_release:CMsgPaintKit_Operation_CombineStage.translate_u)
  _has_bits_[0] &= ~0x00000010u;
  ::CMsgVarField* temp = translate_u_;
  translate_u_ = nullptr;
  return temp;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_CombineStage::_internal_mutable_translate_u() {
  _has_bits_[0] |= 0x00000010u;
  if (translate_u_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgVarField>(GetArenaForAllocation());
    translate_u_ = p;
  }
  return translate_u_;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_CombineStage::mutable_translate_u() {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Operation_CombineStage.translate_u)
  return _internal_mutable_translate_u();
}
inline void CMsgPaintKit_Operation_CombineStage::set_allocated_translate_u(::CMsgVarField* translate_u) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete translate_u_;
  }
  if (translate_u) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgVarField>::GetOwningArena(translate_u);
    if (message_arena != submessage_arena) {
      translate_u = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, translate_u, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  translate_u_ = translate_u;
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Operation_CombineStage.translate_u)
}

// optional .CMsgVarField translate_v = 6 [(.var_field_type) = VAR_TYPE_STRING];
inline bool CMsgPaintKit_Operation_CombineStage::_internal_has_translate_v() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || translate_v_ != nullptr);
  return value;
}
inline bool CMsgPaintKit_Operation_CombineStage::has_translate_v() const {
  return _internal_has_translate_v();
}
inline void CMsgPaintKit_Operation_CombineStage::clear_translate_v() {
  if (translate_v_ != nullptr) translate_v_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::CMsgVarField& CMsgPaintKit_Operation_CombineStage::_internal_translate_v() const {
  const ::CMsgVarField* p = translate_v_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgVarField&>(
      ::_CMsgVarField_default_instance_);
}
inline const ::CMsgVarField& CMsgPaintKit_Operation_CombineStage::translate_v() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Operation_CombineStage.translate_v)
  return _internal_translate_v();
}
inline void CMsgPaintKit_Operation_CombineStage::unsafe_arena_set_allocated_translate_v(
    ::CMsgVarField* translate_v) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(translate_v_);
  }
  translate_v_ = translate_v;
  if (translate_v) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPaintKit_Operation_CombineStage.translate_v)
}
inline ::CMsgVarField* CMsgPaintKit_Operation_CombineStage::release_translate_v() {
  _has_bits_[0] &= ~0x00000020u;
  ::CMsgVarField* temp = translate_v_;
  translate_v_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_CombineStage::unsafe_arena_release_translate_v() {
  // @@protoc_insertion_point(field_release:CMsgPaintKit_Operation_CombineStage.translate_v)
  _has_bits_[0] &= ~0x00000020u;
  ::CMsgVarField* temp = translate_v_;
  translate_v_ = nullptr;
  return temp;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_CombineStage::_internal_mutable_translate_v() {
  _has_bits_[0] |= 0x00000020u;
  if (translate_v_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgVarField>(GetArenaForAllocation());
    translate_v_ = p;
  }
  return translate_v_;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_CombineStage::mutable_translate_v() {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Operation_CombineStage.translate_v)
  return _internal_mutable_translate_v();
}
inline void CMsgPaintKit_Operation_CombineStage::set_allocated_translate_v(::CMsgVarField* translate_v) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete translate_v_;
  }
  if (translate_v) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgVarField>::GetOwningArena(translate_v);
    if (message_arena != submessage_arena) {
      translate_v = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, translate_v, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  translate_v_ = translate_v;
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Operation_CombineStage.translate_v)
}

// optional .CMsgVarField scale_uv = 7 [(.var_field_type) = VAR_TYPE_STRING];
inline bool CMsgPaintKit_Operation_CombineStage::_internal_has_scale_uv() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || scale_uv_ != nullptr);
  return value;
}
inline bool CMsgPaintKit_Operation_CombineStage::has_scale_uv() const {
  return _internal_has_scale_uv();
}
inline void CMsgPaintKit_Operation_CombineStage::clear_scale_uv() {
  if (scale_uv_ != nullptr) scale_uv_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::CMsgVarField& CMsgPaintKit_Operation_CombineStage::_internal_scale_uv() const {
  const ::CMsgVarField* p = scale_uv_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgVarField&>(
      ::_CMsgVarField_default_instance_);
}
inline const ::CMsgVarField& CMsgPaintKit_Operation_CombineStage::scale_uv() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Operation_CombineStage.scale_uv)
  return _internal_scale_uv();
}
inline void CMsgPaintKit_Operation_CombineStage::unsafe_arena_set_allocated_scale_uv(
    ::CMsgVarField* scale_uv) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scale_uv_);
  }
  scale_uv_ = scale_uv;
  if (scale_uv) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPaintKit_Operation_CombineStage.scale_uv)
}
inline ::CMsgVarField* CMsgPaintKit_Operation_CombineStage::release_scale_uv() {
  _has_bits_[0] &= ~0x00000040u;
  ::CMsgVarField* temp = scale_uv_;
  scale_uv_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_CombineStage::unsafe_arena_release_scale_uv() {
  // @@protoc_insertion_point(field_release:CMsgPaintKit_Operation_CombineStage.scale_uv)
  _has_bits_[0] &= ~0x00000040u;
  ::CMsgVarField* temp = scale_uv_;
  scale_uv_ = nullptr;
  return temp;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_CombineStage::_internal_mutable_scale_uv() {
  _has_bits_[0] |= 0x00000040u;
  if (scale_uv_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgVarField>(GetArenaForAllocation());
    scale_uv_ = p;
  }
  return scale_uv_;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_CombineStage::mutable_scale_uv() {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Operation_CombineStage.scale_uv)
  return _internal_mutable_scale_uv();
}
inline void CMsgPaintKit_Operation_CombineStage::set_allocated_scale_uv(::CMsgVarField* scale_uv) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete scale_uv_;
  }
  if (scale_uv) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgVarField>::GetOwningArena(scale_uv);
    if (message_arena != submessage_arena) {
      scale_uv = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scale_uv, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  scale_uv_ = scale_uv;
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Operation_CombineStage.scale_uv)
}

// optional .CMsgVarField flip_u = 8 [(.var_field_type) = VAR_TYPE_STRING];
inline bool CMsgPaintKit_Operation_CombineStage::_internal_has_flip_u() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || flip_u_ != nullptr);
  return value;
}
inline bool CMsgPaintKit_Operation_CombineStage::has_flip_u() const {
  return _internal_has_flip_u();
}
inline void CMsgPaintKit_Operation_CombineStage::clear_flip_u() {
  if (flip_u_ != nullptr) flip_u_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::CMsgVarField& CMsgPaintKit_Operation_CombineStage::_internal_flip_u() const {
  const ::CMsgVarField* p = flip_u_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgVarField&>(
      ::_CMsgVarField_default_instance_);
}
inline const ::CMsgVarField& CMsgPaintKit_Operation_CombineStage::flip_u() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Operation_CombineStage.flip_u)
  return _internal_flip_u();
}
inline void CMsgPaintKit_Operation_CombineStage::unsafe_arena_set_allocated_flip_u(
    ::CMsgVarField* flip_u) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(flip_u_);
  }
  flip_u_ = flip_u;
  if (flip_u) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPaintKit_Operation_CombineStage.flip_u)
}
inline ::CMsgVarField* CMsgPaintKit_Operation_CombineStage::release_flip_u() {
  _has_bits_[0] &= ~0x00000080u;
  ::CMsgVarField* temp = flip_u_;
  flip_u_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_CombineStage::unsafe_arena_release_flip_u() {
  // @@protoc_insertion_point(field_release:CMsgPaintKit_Operation_CombineStage.flip_u)
  _has_bits_[0] &= ~0x00000080u;
  ::CMsgVarField* temp = flip_u_;
  flip_u_ = nullptr;
  return temp;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_CombineStage::_internal_mutable_flip_u() {
  _has_bits_[0] |= 0x00000080u;
  if (flip_u_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgVarField>(GetArenaForAllocation());
    flip_u_ = p;
  }
  return flip_u_;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_CombineStage::mutable_flip_u() {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Operation_CombineStage.flip_u)
  return _internal_mutable_flip_u();
}
inline void CMsgPaintKit_Operation_CombineStage::set_allocated_flip_u(::CMsgVarField* flip_u) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete flip_u_;
  }
  if (flip_u) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgVarField>::GetOwningArena(flip_u);
    if (message_arena != submessage_arena) {
      flip_u = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, flip_u, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  flip_u_ = flip_u;
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Operation_CombineStage.flip_u)
}

// optional .CMsgVarField flip_v = 9 [(.var_field_type) = VAR_TYPE_STRING];
inline bool CMsgPaintKit_Operation_CombineStage::_internal_has_flip_v() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || flip_v_ != nullptr);
  return value;
}
inline bool CMsgPaintKit_Operation_CombineStage::has_flip_v() const {
  return _internal_has_flip_v();
}
inline void CMsgPaintKit_Operation_CombineStage::clear_flip_v() {
  if (flip_v_ != nullptr) flip_v_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::CMsgVarField& CMsgPaintKit_Operation_CombineStage::_internal_flip_v() const {
  const ::CMsgVarField* p = flip_v_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgVarField&>(
      ::_CMsgVarField_default_instance_);
}
inline const ::CMsgVarField& CMsgPaintKit_Operation_CombineStage::flip_v() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Operation_CombineStage.flip_v)
  return _internal_flip_v();
}
inline void CMsgPaintKit_Operation_CombineStage::unsafe_arena_set_allocated_flip_v(
    ::CMsgVarField* flip_v) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(flip_v_);
  }
  flip_v_ = flip_v;
  if (flip_v) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPaintKit_Operation_CombineStage.flip_v)
}
inline ::CMsgVarField* CMsgPaintKit_Operation_CombineStage::release_flip_v() {
  _has_bits_[0] &= ~0x00000100u;
  ::CMsgVarField* temp = flip_v_;
  flip_v_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_CombineStage::unsafe_arena_release_flip_v() {
  // @@protoc_insertion_point(field_release:CMsgPaintKit_Operation_CombineStage.flip_v)
  _has_bits_[0] &= ~0x00000100u;
  ::CMsgVarField* temp = flip_v_;
  flip_v_ = nullptr;
  return temp;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_CombineStage::_internal_mutable_flip_v() {
  _has_bits_[0] |= 0x00000100u;
  if (flip_v_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgVarField>(GetArenaForAllocation());
    flip_v_ = p;
  }
  return flip_v_;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_CombineStage::mutable_flip_v() {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Operation_CombineStage.flip_v)
  return _internal_mutable_flip_v();
}
inline void CMsgPaintKit_Operation_CombineStage::set_allocated_flip_v(::CMsgVarField* flip_v) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete flip_v_;
  }
  if (flip_v) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgVarField>::GetOwningArena(flip_v);
    if (message_arena != submessage_arena) {
      flip_v = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, flip_v, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  flip_v_ = flip_v;
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Operation_CombineStage.flip_v)
}

// repeated .CMsgPaintKit_OperationNode operation_node = 11;
inline int CMsgPaintKit_Operation_CombineStage::_internal_operation_node_size() const {
  return operation_node_.size();
}
inline int CMsgPaintKit_Operation_CombineStage::operation_node_size() const {
  return _internal_operation_node_size();
}
inline void CMsgPaintKit_Operation_CombineStage::clear_operation_node() {
  operation_node_.Clear();
}
inline ::CMsgPaintKit_OperationNode* CMsgPaintKit_Operation_CombineStage::mutable_operation_node(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Operation_CombineStage.operation_node)
  return operation_node_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPaintKit_OperationNode >*
CMsgPaintKit_Operation_CombineStage::mutable_operation_node() {
  // @@protoc_insertion_point(field_mutable_list:CMsgPaintKit_Operation_CombineStage.operation_node)
  return &operation_node_;
}
inline const ::CMsgPaintKit_OperationNode& CMsgPaintKit_Operation_CombineStage::_internal_operation_node(int index) const {
  return operation_node_.Get(index);
}
inline const ::CMsgPaintKit_OperationNode& CMsgPaintKit_Operation_CombineStage::operation_node(int index) const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Operation_CombineStage.operation_node)
  return _internal_operation_node(index);
}
inline ::CMsgPaintKit_OperationNode* CMsgPaintKit_Operation_CombineStage::_internal_add_operation_node() {
  return operation_node_.Add();
}
inline ::CMsgPaintKit_OperationNode* CMsgPaintKit_Operation_CombineStage::add_operation_node() {
  // @@protoc_insertion_point(field_add:CMsgPaintKit_Operation_CombineStage.operation_node)
  return _internal_add_operation_node();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPaintKit_OperationNode >&
CMsgPaintKit_Operation_CombineStage::operation_node() const {
  // @@protoc_insertion_point(field_list:CMsgPaintKit_Operation_CombineStage.operation_node)
  return operation_node_;
}

// -------------------------------------------------------------------

// CMsgPaintKit_Operation_SelectStage

// optional .CMsgVarField groups = 1 [(.var_field_type) = VAR_TYPE_STRING];
inline bool CMsgPaintKit_Operation_SelectStage::_internal_has_groups() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || groups_ != nullptr);
  return value;
}
inline bool CMsgPaintKit_Operation_SelectStage::has_groups() const {
  return _internal_has_groups();
}
inline void CMsgPaintKit_Operation_SelectStage::clear_groups() {
  if (groups_ != nullptr) groups_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgVarField& CMsgPaintKit_Operation_SelectStage::_internal_groups() const {
  const ::CMsgVarField* p = groups_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgVarField&>(
      ::_CMsgVarField_default_instance_);
}
inline const ::CMsgVarField& CMsgPaintKit_Operation_SelectStage::groups() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Operation_SelectStage.groups)
  return _internal_groups();
}
inline void CMsgPaintKit_Operation_SelectStage::unsafe_arena_set_allocated_groups(
    ::CMsgVarField* groups) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(groups_);
  }
  groups_ = groups;
  if (groups) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPaintKit_Operation_SelectStage.groups)
}
inline ::CMsgVarField* CMsgPaintKit_Operation_SelectStage::release_groups() {
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgVarField* temp = groups_;
  groups_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_SelectStage::unsafe_arena_release_groups() {
  // @@protoc_insertion_point(field_release:CMsgPaintKit_Operation_SelectStage.groups)
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgVarField* temp = groups_;
  groups_ = nullptr;
  return temp;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_SelectStage::_internal_mutable_groups() {
  _has_bits_[0] |= 0x00000001u;
  if (groups_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgVarField>(GetArenaForAllocation());
    groups_ = p;
  }
  return groups_;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_SelectStage::mutable_groups() {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Operation_SelectStage.groups)
  return _internal_mutable_groups();
}
inline void CMsgPaintKit_Operation_SelectStage::set_allocated_groups(::CMsgVarField* groups) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete groups_;
  }
  if (groups) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgVarField>::GetOwningArena(groups);
    if (message_arena != submessage_arena) {
      groups = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, groups, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  groups_ = groups;
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Operation_SelectStage.groups)
}

// repeated .CMsgVarField select = 2 [(.max_count) = 16, (.var_field_type) = VAR_TYPE_STRING];
inline int CMsgPaintKit_Operation_SelectStage::_internal_select_size() const {
  return select_.size();
}
inline int CMsgPaintKit_Operation_SelectStage::select_size() const {
  return _internal_select_size();
}
inline void CMsgPaintKit_Operation_SelectStage::clear_select() {
  select_.Clear();
}
inline ::CMsgVarField* CMsgPaintKit_Operation_SelectStage::mutable_select(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Operation_SelectStage.select)
  return select_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgVarField >*
CMsgPaintKit_Operation_SelectStage::mutable_select() {
  // @@protoc_insertion_point(field_mutable_list:CMsgPaintKit_Operation_SelectStage.select)
  return &select_;
}
inline const ::CMsgVarField& CMsgPaintKit_Operation_SelectStage::_internal_select(int index) const {
  return select_.Get(index);
}
inline const ::CMsgVarField& CMsgPaintKit_Operation_SelectStage::select(int index) const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Operation_SelectStage.select)
  return _internal_select(index);
}
inline ::CMsgVarField* CMsgPaintKit_Operation_SelectStage::_internal_add_select() {
  return select_.Add();
}
inline ::CMsgVarField* CMsgPaintKit_Operation_SelectStage::add_select() {
  // @@protoc_insertion_point(field_add:CMsgPaintKit_Operation_SelectStage.select)
  return _internal_add_select();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgVarField >&
CMsgPaintKit_Operation_SelectStage::select() const {
  // @@protoc_insertion_point(field_list:CMsgPaintKit_Operation_SelectStage.select)
  return select_;
}

// -------------------------------------------------------------------

// CMsgPaintKit_Operation_Sticker

// optional .CMsgVarField base = 1 [(.comment) = "Name of the base file for the sticker (the albedo)", (.var_field_type) = VAR_TYPE_STRING];
inline bool CMsgPaintKit_Operation_Sticker::_internal_has_base() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || base_ != nullptr);
  return value;
}
inline bool CMsgPaintKit_Operation_Sticker::has_base() const {
  return _internal_has_base();
}
inline void CMsgPaintKit_Operation_Sticker::clear_base() {
  if (base_ != nullptr) base_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgVarField& CMsgPaintKit_Operation_Sticker::_internal_base() const {
  const ::CMsgVarField* p = base_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgVarField&>(
      ::_CMsgVarField_default_instance_);
}
inline const ::CMsgVarField& CMsgPaintKit_Operation_Sticker::base() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Operation_Sticker.base)
  return _internal_base();
}
inline void CMsgPaintKit_Operation_Sticker::unsafe_arena_set_allocated_base(
    ::CMsgVarField* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  base_ = base;
  if (base) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPaintKit_Operation_Sticker.base)
}
inline ::CMsgVarField* CMsgPaintKit_Operation_Sticker::release_base() {
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgVarField* temp = base_;
  base_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_Sticker::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:CMsgPaintKit_Operation_Sticker.base)
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgVarField* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_Sticker::_internal_mutable_base() {
  _has_bits_[0] |= 0x00000001u;
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgVarField>(GetArenaForAllocation());
    base_ = p;
  }
  return base_;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_Sticker::mutable_base() {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Operation_Sticker.base)
  return _internal_mutable_base();
}
inline void CMsgPaintKit_Operation_Sticker::set_allocated_base(::CMsgVarField* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgVarField>::GetOwningArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Operation_Sticker.base)
}

// optional .CMsgVarField weight = 2 [(.comment) = "Random likelihood this one is to be selected", (.var_field_type) = VAR_TYPE_STRING];
inline bool CMsgPaintKit_Operation_Sticker::_internal_has_weight() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || weight_ != nullptr);
  return value;
}
inline bool CMsgPaintKit_Operation_Sticker::has_weight() const {
  return _internal_has_weight();
}
inline void CMsgPaintKit_Operation_Sticker::clear_weight() {
  if (weight_ != nullptr) weight_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::CMsgVarField& CMsgPaintKit_Operation_Sticker::_internal_weight() const {
  const ::CMsgVarField* p = weight_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgVarField&>(
      ::_CMsgVarField_default_instance_);
}
inline const ::CMsgVarField& CMsgPaintKit_Operation_Sticker::weight() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Operation_Sticker.weight)
  return _internal_weight();
}
inline void CMsgPaintKit_Operation_Sticker::unsafe_arena_set_allocated_weight(
    ::CMsgVarField* weight) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(weight_);
  }
  weight_ = weight;
  if (weight) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPaintKit_Operation_Sticker.weight)
}
inline ::CMsgVarField* CMsgPaintKit_Operation_Sticker::release_weight() {
  _has_bits_[0] &= ~0x00000002u;
  ::CMsgVarField* temp = weight_;
  weight_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_Sticker::unsafe_arena_release_weight() {
  // @@protoc_insertion_point(field_release:CMsgPaintKit_Operation_Sticker.weight)
  _has_bits_[0] &= ~0x00000002u;
  ::CMsgVarField* temp = weight_;
  weight_ = nullptr;
  return temp;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_Sticker::_internal_mutable_weight() {
  _has_bits_[0] |= 0x00000002u;
  if (weight_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgVarField>(GetArenaForAllocation());
    weight_ = p;
  }
  return weight_;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_Sticker::mutable_weight() {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Operation_Sticker.weight)
  return _internal_mutable_weight();
}
inline void CMsgPaintKit_Operation_Sticker::set_allocated_weight(::CMsgVarField* weight) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete weight_;
  }
  if (weight) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgVarField>::GetOwningArena(weight);
    if (message_arena != submessage_arena) {
      weight = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, weight, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  weight_ = weight;
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Operation_Sticker.weight)
}

// optional .CMsgVarField spec = 3 [(.comment) = "Name of the specular file for the sticker, or if blank we will assume it is baseFilename + _spec + baseExtension", (.var_field_type) = VAR_TYPE_STRING];
inline bool CMsgPaintKit_Operation_Sticker::_internal_has_spec() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || spec_ != nullptr);
  return value;
}
inline bool CMsgPaintKit_Operation_Sticker::has_spec() const {
  return _internal_has_spec();
}
inline void CMsgPaintKit_Operation_Sticker::clear_spec() {
  if (spec_ != nullptr) spec_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::CMsgVarField& CMsgPaintKit_Operation_Sticker::_internal_spec() const {
  const ::CMsgVarField* p = spec_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgVarField&>(
      ::_CMsgVarField_default_instance_);
}
inline const ::CMsgVarField& CMsgPaintKit_Operation_Sticker::spec() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Operation_Sticker.spec)
  return _internal_spec();
}
inline void CMsgPaintKit_Operation_Sticker::unsafe_arena_set_allocated_spec(
    ::CMsgVarField* spec) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(spec_);
  }
  spec_ = spec;
  if (spec) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPaintKit_Operation_Sticker.spec)
}
inline ::CMsgVarField* CMsgPaintKit_Operation_Sticker::release_spec() {
  _has_bits_[0] &= ~0x00000004u;
  ::CMsgVarField* temp = spec_;
  spec_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_Sticker::unsafe_arena_release_spec() {
  // @@protoc_insertion_point(field_release:CMsgPaintKit_Operation_Sticker.spec)
  _has_bits_[0] &= ~0x00000004u;
  ::CMsgVarField* temp = spec_;
  spec_ = nullptr;
  return temp;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_Sticker::_internal_mutable_spec() {
  _has_bits_[0] |= 0x00000004u;
  if (spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgVarField>(GetArenaForAllocation());
    spec_ = p;
  }
  return spec_;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_Sticker::mutable_spec() {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Operation_Sticker.spec)
  return _internal_mutable_spec();
}
inline void CMsgPaintKit_Operation_Sticker::set_allocated_spec(::CMsgVarField* spec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete spec_;
  }
  if (spec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgVarField>::GetOwningArena(spec);
    if (message_arena != submessage_arena) {
      spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spec, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  spec_ = spec;
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Operation_Sticker.spec)
}

// -------------------------------------------------------------------

// CMsgPaintKit_Operation_StickerStage

// repeated .CMsgPaintKit_Operation_Sticker sticker = 1;
inline int CMsgPaintKit_Operation_StickerStage::_internal_sticker_size() const {
  return sticker_.size();
}
inline int CMsgPaintKit_Operation_StickerStage::sticker_size() const {
  return _internal_sticker_size();
}
inline void CMsgPaintKit_Operation_StickerStage::clear_sticker() {
  sticker_.Clear();
}
inline ::CMsgPaintKit_Operation_Sticker* CMsgPaintKit_Operation_StickerStage::mutable_sticker(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Operation_StickerStage.sticker)
  return sticker_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPaintKit_Operation_Sticker >*
CMsgPaintKit_Operation_StickerStage::mutable_sticker() {
  // @@protoc_insertion_point(field_mutable_list:CMsgPaintKit_Operation_StickerStage.sticker)
  return &sticker_;
}
inline const ::CMsgPaintKit_Operation_Sticker& CMsgPaintKit_Operation_StickerStage::_internal_sticker(int index) const {
  return sticker_.Get(index);
}
inline const ::CMsgPaintKit_Operation_Sticker& CMsgPaintKit_Operation_StickerStage::sticker(int index) const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Operation_StickerStage.sticker)
  return _internal_sticker(index);
}
inline ::CMsgPaintKit_Operation_Sticker* CMsgPaintKit_Operation_StickerStage::_internal_add_sticker() {
  return sticker_.Add();
}
inline ::CMsgPaintKit_Operation_Sticker* CMsgPaintKit_Operation_StickerStage::add_sticker() {
  // @@protoc_insertion_point(field_add:CMsgPaintKit_Operation_StickerStage.sticker)
  return _internal_add_sticker();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPaintKit_Operation_Sticker >&
CMsgPaintKit_Operation_StickerStage::sticker() const {
  // @@protoc_insertion_point(field_list:CMsgPaintKit_Operation_StickerStage.sticker)
  return sticker_;
}

// optional .CMsgVarField dest_tl = 2 [(.var_field_type) = VAR_TYPE_STRING];
inline bool CMsgPaintKit_Operation_StickerStage::_internal_has_dest_tl() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || dest_tl_ != nullptr);
  return value;
}
inline bool CMsgPaintKit_Operation_StickerStage::has_dest_tl() const {
  return _internal_has_dest_tl();
}
inline void CMsgPaintKit_Operation_StickerStage::clear_dest_tl() {
  if (dest_tl_ != nullptr) dest_tl_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgVarField& CMsgPaintKit_Operation_StickerStage::_internal_dest_tl() const {
  const ::CMsgVarField* p = dest_tl_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgVarField&>(
      ::_CMsgVarField_default_instance_);
}
inline const ::CMsgVarField& CMsgPaintKit_Operation_StickerStage::dest_tl() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Operation_StickerStage.dest_tl)
  return _internal_dest_tl();
}
inline void CMsgPaintKit_Operation_StickerStage::unsafe_arena_set_allocated_dest_tl(
    ::CMsgVarField* dest_tl) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dest_tl_);
  }
  dest_tl_ = dest_tl;
  if (dest_tl) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPaintKit_Operation_StickerStage.dest_tl)
}
inline ::CMsgVarField* CMsgPaintKit_Operation_StickerStage::release_dest_tl() {
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgVarField* temp = dest_tl_;
  dest_tl_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_StickerStage::unsafe_arena_release_dest_tl() {
  // @@protoc_insertion_point(field_release:CMsgPaintKit_Operation_StickerStage.dest_tl)
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgVarField* temp = dest_tl_;
  dest_tl_ = nullptr;
  return temp;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_StickerStage::_internal_mutable_dest_tl() {
  _has_bits_[0] |= 0x00000001u;
  if (dest_tl_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgVarField>(GetArenaForAllocation());
    dest_tl_ = p;
  }
  return dest_tl_;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_StickerStage::mutable_dest_tl() {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Operation_StickerStage.dest_tl)
  return _internal_mutable_dest_tl();
}
inline void CMsgPaintKit_Operation_StickerStage::set_allocated_dest_tl(::CMsgVarField* dest_tl) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete dest_tl_;
  }
  if (dest_tl) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgVarField>::GetOwningArena(dest_tl);
    if (message_arena != submessage_arena) {
      dest_tl = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dest_tl, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  dest_tl_ = dest_tl;
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Operation_StickerStage.dest_tl)
}

// optional .CMsgVarField dest_tr = 3 [(.var_field_type) = VAR_TYPE_STRING];
inline bool CMsgPaintKit_Operation_StickerStage::_internal_has_dest_tr() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || dest_tr_ != nullptr);
  return value;
}
inline bool CMsgPaintKit_Operation_StickerStage::has_dest_tr() const {
  return _internal_has_dest_tr();
}
inline void CMsgPaintKit_Operation_StickerStage::clear_dest_tr() {
  if (dest_tr_ != nullptr) dest_tr_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::CMsgVarField& CMsgPaintKit_Operation_StickerStage::_internal_dest_tr() const {
  const ::CMsgVarField* p = dest_tr_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgVarField&>(
      ::_CMsgVarField_default_instance_);
}
inline const ::CMsgVarField& CMsgPaintKit_Operation_StickerStage::dest_tr() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Operation_StickerStage.dest_tr)
  return _internal_dest_tr();
}
inline void CMsgPaintKit_Operation_StickerStage::unsafe_arena_set_allocated_dest_tr(
    ::CMsgVarField* dest_tr) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dest_tr_);
  }
  dest_tr_ = dest_tr;
  if (dest_tr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPaintKit_Operation_StickerStage.dest_tr)
}
inline ::CMsgVarField* CMsgPaintKit_Operation_StickerStage::release_dest_tr() {
  _has_bits_[0] &= ~0x00000002u;
  ::CMsgVarField* temp = dest_tr_;
  dest_tr_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_StickerStage::unsafe_arena_release_dest_tr() {
  // @@protoc_insertion_point(field_release:CMsgPaintKit_Operation_StickerStage.dest_tr)
  _has_bits_[0] &= ~0x00000002u;
  ::CMsgVarField* temp = dest_tr_;
  dest_tr_ = nullptr;
  return temp;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_StickerStage::_internal_mutable_dest_tr() {
  _has_bits_[0] |= 0x00000002u;
  if (dest_tr_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgVarField>(GetArenaForAllocation());
    dest_tr_ = p;
  }
  return dest_tr_;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_StickerStage::mutable_dest_tr() {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Operation_StickerStage.dest_tr)
  return _internal_mutable_dest_tr();
}
inline void CMsgPaintKit_Operation_StickerStage::set_allocated_dest_tr(::CMsgVarField* dest_tr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete dest_tr_;
  }
  if (dest_tr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgVarField>::GetOwningArena(dest_tr);
    if (message_arena != submessage_arena) {
      dest_tr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dest_tr, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  dest_tr_ = dest_tr;
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Operation_StickerStage.dest_tr)
}

// optional .CMsgVarField dest_bl = 4 [(.var_field_type) = VAR_TYPE_STRING];
inline bool CMsgPaintKit_Operation_StickerStage::_internal_has_dest_bl() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || dest_bl_ != nullptr);
  return value;
}
inline bool CMsgPaintKit_Operation_StickerStage::has_dest_bl() const {
  return _internal_has_dest_bl();
}
inline void CMsgPaintKit_Operation_StickerStage::clear_dest_bl() {
  if (dest_bl_ != nullptr) dest_bl_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::CMsgVarField& CMsgPaintKit_Operation_StickerStage::_internal_dest_bl() const {
  const ::CMsgVarField* p = dest_bl_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgVarField&>(
      ::_CMsgVarField_default_instance_);
}
inline const ::CMsgVarField& CMsgPaintKit_Operation_StickerStage::dest_bl() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Operation_StickerStage.dest_bl)
  return _internal_dest_bl();
}
inline void CMsgPaintKit_Operation_StickerStage::unsafe_arena_set_allocated_dest_bl(
    ::CMsgVarField* dest_bl) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dest_bl_);
  }
  dest_bl_ = dest_bl;
  if (dest_bl) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPaintKit_Operation_StickerStage.dest_bl)
}
inline ::CMsgVarField* CMsgPaintKit_Operation_StickerStage::release_dest_bl() {
  _has_bits_[0] &= ~0x00000004u;
  ::CMsgVarField* temp = dest_bl_;
  dest_bl_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_StickerStage::unsafe_arena_release_dest_bl() {
  // @@protoc_insertion_point(field_release:CMsgPaintKit_Operation_StickerStage.dest_bl)
  _has_bits_[0] &= ~0x00000004u;
  ::CMsgVarField* temp = dest_bl_;
  dest_bl_ = nullptr;
  return temp;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_StickerStage::_internal_mutable_dest_bl() {
  _has_bits_[0] |= 0x00000004u;
  if (dest_bl_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgVarField>(GetArenaForAllocation());
    dest_bl_ = p;
  }
  return dest_bl_;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_StickerStage::mutable_dest_bl() {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Operation_StickerStage.dest_bl)
  return _internal_mutable_dest_bl();
}
inline void CMsgPaintKit_Operation_StickerStage::set_allocated_dest_bl(::CMsgVarField* dest_bl) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete dest_bl_;
  }
  if (dest_bl) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgVarField>::GetOwningArena(dest_bl);
    if (message_arena != submessage_arena) {
      dest_bl = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dest_bl, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  dest_bl_ = dest_bl;
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Operation_StickerStage.dest_bl)
}

// optional .CMsgVarField adjust_black = 5 [(.var_field_type) = VAR_TYPE_STRING];
inline bool CMsgPaintKit_Operation_StickerStage::_internal_has_adjust_black() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || adjust_black_ != nullptr);
  return value;
}
inline bool CMsgPaintKit_Operation_StickerStage::has_adjust_black() const {
  return _internal_has_adjust_black();
}
inline void CMsgPaintKit_Operation_StickerStage::clear_adjust_black() {
  if (adjust_black_ != nullptr) adjust_black_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::CMsgVarField& CMsgPaintKit_Operation_StickerStage::_internal_adjust_black() const {
  const ::CMsgVarField* p = adjust_black_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgVarField&>(
      ::_CMsgVarField_default_instance_);
}
inline const ::CMsgVarField& CMsgPaintKit_Operation_StickerStage::adjust_black() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Operation_StickerStage.adjust_black)
  return _internal_adjust_black();
}
inline void CMsgPaintKit_Operation_StickerStage::unsafe_arena_set_allocated_adjust_black(
    ::CMsgVarField* adjust_black) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(adjust_black_);
  }
  adjust_black_ = adjust_black;
  if (adjust_black) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPaintKit_Operation_StickerStage.adjust_black)
}
inline ::CMsgVarField* CMsgPaintKit_Operation_StickerStage::release_adjust_black() {
  _has_bits_[0] &= ~0x00000008u;
  ::CMsgVarField* temp = adjust_black_;
  adjust_black_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_StickerStage::unsafe_arena_release_adjust_black() {
  // @@protoc_insertion_point(field_release:CMsgPaintKit_Operation_StickerStage.adjust_black)
  _has_bits_[0] &= ~0x00000008u;
  ::CMsgVarField* temp = adjust_black_;
  adjust_black_ = nullptr;
  return temp;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_StickerStage::_internal_mutable_adjust_black() {
  _has_bits_[0] |= 0x00000008u;
  if (adjust_black_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgVarField>(GetArenaForAllocation());
    adjust_black_ = p;
  }
  return adjust_black_;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_StickerStage::mutable_adjust_black() {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Operation_StickerStage.adjust_black)
  return _internal_mutable_adjust_black();
}
inline void CMsgPaintKit_Operation_StickerStage::set_allocated_adjust_black(::CMsgVarField* adjust_black) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete adjust_black_;
  }
  if (adjust_black) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgVarField>::GetOwningArena(adjust_black);
    if (message_arena != submessage_arena) {
      adjust_black = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, adjust_black, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  adjust_black_ = adjust_black;
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Operation_StickerStage.adjust_black)
}

// optional .CMsgVarField adjust_offset = 6 [(.var_field_type) = VAR_TYPE_STRING];
inline bool CMsgPaintKit_Operation_StickerStage::_internal_has_adjust_offset() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || adjust_offset_ != nullptr);
  return value;
}
inline bool CMsgPaintKit_Operation_StickerStage::has_adjust_offset() const {
  return _internal_has_adjust_offset();
}
inline void CMsgPaintKit_Operation_StickerStage::clear_adjust_offset() {
  if (adjust_offset_ != nullptr) adjust_offset_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::CMsgVarField& CMsgPaintKit_Operation_StickerStage::_internal_adjust_offset() const {
  const ::CMsgVarField* p = adjust_offset_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgVarField&>(
      ::_CMsgVarField_default_instance_);
}
inline const ::CMsgVarField& CMsgPaintKit_Operation_StickerStage::adjust_offset() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Operation_StickerStage.adjust_offset)
  return _internal_adjust_offset();
}
inline void CMsgPaintKit_Operation_StickerStage::unsafe_arena_set_allocated_adjust_offset(
    ::CMsgVarField* adjust_offset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(adjust_offset_);
  }
  adjust_offset_ = adjust_offset;
  if (adjust_offset) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPaintKit_Operation_StickerStage.adjust_offset)
}
inline ::CMsgVarField* CMsgPaintKit_Operation_StickerStage::release_adjust_offset() {
  _has_bits_[0] &= ~0x00000010u;
  ::CMsgVarField* temp = adjust_offset_;
  adjust_offset_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_StickerStage::unsafe_arena_release_adjust_offset() {
  // @@protoc_insertion_point(field_release:CMsgPaintKit_Operation_StickerStage.adjust_offset)
  _has_bits_[0] &= ~0x00000010u;
  ::CMsgVarField* temp = adjust_offset_;
  adjust_offset_ = nullptr;
  return temp;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_StickerStage::_internal_mutable_adjust_offset() {
  _has_bits_[0] |= 0x00000010u;
  if (adjust_offset_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgVarField>(GetArenaForAllocation());
    adjust_offset_ = p;
  }
  return adjust_offset_;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_StickerStage::mutable_adjust_offset() {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Operation_StickerStage.adjust_offset)
  return _internal_mutable_adjust_offset();
}
inline void CMsgPaintKit_Operation_StickerStage::set_allocated_adjust_offset(::CMsgVarField* adjust_offset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete adjust_offset_;
  }
  if (adjust_offset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgVarField>::GetOwningArena(adjust_offset);
    if (message_arena != submessage_arena) {
      adjust_offset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, adjust_offset, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  adjust_offset_ = adjust_offset;
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Operation_StickerStage.adjust_offset)
}

// optional .CMsgVarField adjust_gamma = 7 [(.var_field_type) = VAR_TYPE_STRING];
inline bool CMsgPaintKit_Operation_StickerStage::_internal_has_adjust_gamma() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || adjust_gamma_ != nullptr);
  return value;
}
inline bool CMsgPaintKit_Operation_StickerStage::has_adjust_gamma() const {
  return _internal_has_adjust_gamma();
}
inline void CMsgPaintKit_Operation_StickerStage::clear_adjust_gamma() {
  if (adjust_gamma_ != nullptr) adjust_gamma_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::CMsgVarField& CMsgPaintKit_Operation_StickerStage::_internal_adjust_gamma() const {
  const ::CMsgVarField* p = adjust_gamma_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgVarField&>(
      ::_CMsgVarField_default_instance_);
}
inline const ::CMsgVarField& CMsgPaintKit_Operation_StickerStage::adjust_gamma() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Operation_StickerStage.adjust_gamma)
  return _internal_adjust_gamma();
}
inline void CMsgPaintKit_Operation_StickerStage::unsafe_arena_set_allocated_adjust_gamma(
    ::CMsgVarField* adjust_gamma) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(adjust_gamma_);
  }
  adjust_gamma_ = adjust_gamma;
  if (adjust_gamma) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPaintKit_Operation_StickerStage.adjust_gamma)
}
inline ::CMsgVarField* CMsgPaintKit_Operation_StickerStage::release_adjust_gamma() {
  _has_bits_[0] &= ~0x00000020u;
  ::CMsgVarField* temp = adjust_gamma_;
  adjust_gamma_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_StickerStage::unsafe_arena_release_adjust_gamma() {
  // @@protoc_insertion_point(field_release:CMsgPaintKit_Operation_StickerStage.adjust_gamma)
  _has_bits_[0] &= ~0x00000020u;
  ::CMsgVarField* temp = adjust_gamma_;
  adjust_gamma_ = nullptr;
  return temp;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_StickerStage::_internal_mutable_adjust_gamma() {
  _has_bits_[0] |= 0x00000020u;
  if (adjust_gamma_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgVarField>(GetArenaForAllocation());
    adjust_gamma_ = p;
  }
  return adjust_gamma_;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_StickerStage::mutable_adjust_gamma() {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Operation_StickerStage.adjust_gamma)
  return _internal_mutable_adjust_gamma();
}
inline void CMsgPaintKit_Operation_StickerStage::set_allocated_adjust_gamma(::CMsgVarField* adjust_gamma) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete adjust_gamma_;
  }
  if (adjust_gamma) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgVarField>::GetOwningArena(adjust_gamma);
    if (message_arena != submessage_arena) {
      adjust_gamma = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, adjust_gamma, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  adjust_gamma_ = adjust_gamma;
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Operation_StickerStage.adjust_gamma)
}

// repeated .CMsgPaintKit_OperationNode operation_node = 9;
inline int CMsgPaintKit_Operation_StickerStage::_internal_operation_node_size() const {
  return operation_node_.size();
}
inline int CMsgPaintKit_Operation_StickerStage::operation_node_size() const {
  return _internal_operation_node_size();
}
inline void CMsgPaintKit_Operation_StickerStage::clear_operation_node() {
  operation_node_.Clear();
}
inline ::CMsgPaintKit_OperationNode* CMsgPaintKit_Operation_StickerStage::mutable_operation_node(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Operation_StickerStage.operation_node)
  return operation_node_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPaintKit_OperationNode >*
CMsgPaintKit_Operation_StickerStage::mutable_operation_node() {
  // @@protoc_insertion_point(field_mutable_list:CMsgPaintKit_Operation_StickerStage.operation_node)
  return &operation_node_;
}
inline const ::CMsgPaintKit_OperationNode& CMsgPaintKit_Operation_StickerStage::_internal_operation_node(int index) const {
  return operation_node_.Get(index);
}
inline const ::CMsgPaintKit_OperationNode& CMsgPaintKit_Operation_StickerStage::operation_node(int index) const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Operation_StickerStage.operation_node)
  return _internal_operation_node(index);
}
inline ::CMsgPaintKit_OperationNode* CMsgPaintKit_Operation_StickerStage::_internal_add_operation_node() {
  return operation_node_.Add();
}
inline ::CMsgPaintKit_OperationNode* CMsgPaintKit_Operation_StickerStage::add_operation_node() {
  // @@protoc_insertion_point(field_add:CMsgPaintKit_Operation_StickerStage.operation_node)
  return _internal_add_operation_node();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPaintKit_OperationNode >&
CMsgPaintKit_Operation_StickerStage::operation_node() const {
  // @@protoc_insertion_point(field_list:CMsgPaintKit_Operation_StickerStage.operation_node)
  return operation_node_;
}

// -------------------------------------------------------------------

// CMsgPaintKit_OperationStage

// .CMsgPaintKit_Operation_TextureStage texture_lookup = 1;
inline bool CMsgPaintKit_OperationStage::_internal_has_texture_lookup() const {
  return stage_case() == kTextureLookup;
}
inline bool CMsgPaintKit_OperationStage::has_texture_lookup() const {
  return _internal_has_texture_lookup();
}
inline void CMsgPaintKit_OperationStage::set_has_texture_lookup() {
  _oneof_case_[0] = kTextureLookup;
}
inline void CMsgPaintKit_OperationStage::clear_texture_lookup() {
  if (_internal_has_texture_lookup()) {
    if (GetArenaForAllocation() == nullptr) {
      delete stage_.texture_lookup_;
    }
    clear_has_stage();
  }
}
inline ::CMsgPaintKit_Operation_TextureStage* CMsgPaintKit_OperationStage::release_texture_lookup() {
  // @@protoc_insertion_point(field_release:CMsgPaintKit_OperationStage.texture_lookup)
  if (_internal_has_texture_lookup()) {
    clear_has_stage();
      ::CMsgPaintKit_Operation_TextureStage* temp = stage_.texture_lookup_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    stage_.texture_lookup_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CMsgPaintKit_Operation_TextureStage& CMsgPaintKit_OperationStage::_internal_texture_lookup() const {
  return _internal_has_texture_lookup()
      ? *stage_.texture_lookup_
      : reinterpret_cast< ::CMsgPaintKit_Operation_TextureStage&>(::_CMsgPaintKit_Operation_TextureStage_default_instance_);
}
inline const ::CMsgPaintKit_Operation_TextureStage& CMsgPaintKit_OperationStage::texture_lookup() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_OperationStage.texture_lookup)
  return _internal_texture_lookup();
}
inline ::CMsgPaintKit_Operation_TextureStage* CMsgPaintKit_OperationStage::unsafe_arena_release_texture_lookup() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CMsgPaintKit_OperationStage.texture_lookup)
  if (_internal_has_texture_lookup()) {
    clear_has_stage();
    ::CMsgPaintKit_Operation_TextureStage* temp = stage_.texture_lookup_;
    stage_.texture_lookup_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CMsgPaintKit_OperationStage::unsafe_arena_set_allocated_texture_lookup(::CMsgPaintKit_Operation_TextureStage* texture_lookup) {
  clear_stage();
  if (texture_lookup) {
    set_has_texture_lookup();
    stage_.texture_lookup_ = texture_lookup;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPaintKit_OperationStage.texture_lookup)
}
inline ::CMsgPaintKit_Operation_TextureStage* CMsgPaintKit_OperationStage::_internal_mutable_texture_lookup() {
  if (!_internal_has_texture_lookup()) {
    clear_stage();
    set_has_texture_lookup();
    stage_.texture_lookup_ = CreateMaybeMessage< ::CMsgPaintKit_Operation_TextureStage >(GetArenaForAllocation());
  }
  return stage_.texture_lookup_;
}
inline ::CMsgPaintKit_Operation_TextureStage* CMsgPaintKit_OperationStage::mutable_texture_lookup() {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_OperationStage.texture_lookup)
  return _internal_mutable_texture_lookup();
}

// .CMsgPaintKit_Operation_CombineStage combine_add = 2;
inline bool CMsgPaintKit_OperationStage::_internal_has_combine_add() const {
  return stage_case() == kCombineAdd;
}
inline bool CMsgPaintKit_OperationStage::has_combine_add() const {
  return _internal_has_combine_add();
}
inline void CMsgPaintKit_OperationStage::set_has_combine_add() {
  _oneof_case_[0] = kCombineAdd;
}
inline void CMsgPaintKit_OperationStage::clear_combine_add() {
  if (_internal_has_combine_add()) {
    if (GetArenaForAllocation() == nullptr) {
      delete stage_.combine_add_;
    }
    clear_has_stage();
  }
}
inline ::CMsgPaintKit_Operation_CombineStage* CMsgPaintKit_OperationStage::release_combine_add() {
  // @@protoc_insertion_point(field_release:CMsgPaintKit_OperationStage.combine_add)
  if (_internal_has_combine_add()) {
    clear_has_stage();
      ::CMsgPaintKit_Operation_CombineStage* temp = stage_.combine_add_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    stage_.combine_add_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CMsgPaintKit_Operation_CombineStage& CMsgPaintKit_OperationStage::_internal_combine_add() const {
  return _internal_has_combine_add()
      ? *stage_.combine_add_
      : reinterpret_cast< ::CMsgPaintKit_Operation_CombineStage&>(::_CMsgPaintKit_Operation_CombineStage_default_instance_);
}
inline const ::CMsgPaintKit_Operation_CombineStage& CMsgPaintKit_OperationStage::combine_add() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_OperationStage.combine_add)
  return _internal_combine_add();
}
inline ::CMsgPaintKit_Operation_CombineStage* CMsgPaintKit_OperationStage::unsafe_arena_release_combine_add() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CMsgPaintKit_OperationStage.combine_add)
  if (_internal_has_combine_add()) {
    clear_has_stage();
    ::CMsgPaintKit_Operation_CombineStage* temp = stage_.combine_add_;
    stage_.combine_add_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CMsgPaintKit_OperationStage::unsafe_arena_set_allocated_combine_add(::CMsgPaintKit_Operation_CombineStage* combine_add) {
  clear_stage();
  if (combine_add) {
    set_has_combine_add();
    stage_.combine_add_ = combine_add;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPaintKit_OperationStage.combine_add)
}
inline ::CMsgPaintKit_Operation_CombineStage* CMsgPaintKit_OperationStage::_internal_mutable_combine_add() {
  if (!_internal_has_combine_add()) {
    clear_stage();
    set_has_combine_add();
    stage_.combine_add_ = CreateMaybeMessage< ::CMsgPaintKit_Operation_CombineStage >(GetArenaForAllocation());
  }
  return stage_.combine_add_;
}
inline ::CMsgPaintKit_Operation_CombineStage* CMsgPaintKit_OperationStage::mutable_combine_add() {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_OperationStage.combine_add)
  return _internal_mutable_combine_add();
}

// .CMsgPaintKit_Operation_CombineStage combine_lerp = 3;
inline bool CMsgPaintKit_OperationStage::_internal_has_combine_lerp() const {
  return stage_case() == kCombineLerp;
}
inline bool CMsgPaintKit_OperationStage::has_combine_lerp() const {
  return _internal_has_combine_lerp();
}
inline void CMsgPaintKit_OperationStage::set_has_combine_lerp() {
  _oneof_case_[0] = kCombineLerp;
}
inline void CMsgPaintKit_OperationStage::clear_combine_lerp() {
  if (_internal_has_combine_lerp()) {
    if (GetArenaForAllocation() == nullptr) {
      delete stage_.combine_lerp_;
    }
    clear_has_stage();
  }
}
inline ::CMsgPaintKit_Operation_CombineStage* CMsgPaintKit_OperationStage::release_combine_lerp() {
  // @@protoc_insertion_point(field_release:CMsgPaintKit_OperationStage.combine_lerp)
  if (_internal_has_combine_lerp()) {
    clear_has_stage();
      ::CMsgPaintKit_Operation_CombineStage* temp = stage_.combine_lerp_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    stage_.combine_lerp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CMsgPaintKit_Operation_CombineStage& CMsgPaintKit_OperationStage::_internal_combine_lerp() const {
  return _internal_has_combine_lerp()
      ? *stage_.combine_lerp_
      : reinterpret_cast< ::CMsgPaintKit_Operation_CombineStage&>(::_CMsgPaintKit_Operation_CombineStage_default_instance_);
}
inline const ::CMsgPaintKit_Operation_CombineStage& CMsgPaintKit_OperationStage::combine_lerp() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_OperationStage.combine_lerp)
  return _internal_combine_lerp();
}
inline ::CMsgPaintKit_Operation_CombineStage* CMsgPaintKit_OperationStage::unsafe_arena_release_combine_lerp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CMsgPaintKit_OperationStage.combine_lerp)
  if (_internal_has_combine_lerp()) {
    clear_has_stage();
    ::CMsgPaintKit_Operation_CombineStage* temp = stage_.combine_lerp_;
    stage_.combine_lerp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CMsgPaintKit_OperationStage::unsafe_arena_set_allocated_combine_lerp(::CMsgPaintKit_Operation_CombineStage* combine_lerp) {
  clear_stage();
  if (combine_lerp) {
    set_has_combine_lerp();
    stage_.combine_lerp_ = combine_lerp;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPaintKit_OperationStage.combine_lerp)
}
inline ::CMsgPaintKit_Operation_CombineStage* CMsgPaintKit_OperationStage::_internal_mutable_combine_lerp() {
  if (!_internal_has_combine_lerp()) {
    clear_stage();
    set_has_combine_lerp();
    stage_.combine_lerp_ = CreateMaybeMessage< ::CMsgPaintKit_Operation_CombineStage >(GetArenaForAllocation());
  }
  return stage_.combine_lerp_;
}
inline ::CMsgPaintKit_Operation_CombineStage* CMsgPaintKit_OperationStage::mutable_combine_lerp() {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_OperationStage.combine_lerp)
  return _internal_mutable_combine_lerp();
}

// .CMsgPaintKit_Operation_CombineStage combine_multiply = 4;
inline bool CMsgPaintKit_OperationStage::_internal_has_combine_multiply() const {
  return stage_case() == kCombineMultiply;
}
inline bool CMsgPaintKit_OperationStage::has_combine_multiply() const {
  return _internal_has_combine_multiply();
}
inline void CMsgPaintKit_OperationStage::set_has_combine_multiply() {
  _oneof_case_[0] = kCombineMultiply;
}
inline void CMsgPaintKit_OperationStage::clear_combine_multiply() {
  if (_internal_has_combine_multiply()) {
    if (GetArenaForAllocation() == nullptr) {
      delete stage_.combine_multiply_;
    }
    clear_has_stage();
  }
}
inline ::CMsgPaintKit_Operation_CombineStage* CMsgPaintKit_OperationStage::release_combine_multiply() {
  // @@protoc_insertion_point(field_release:CMsgPaintKit_OperationStage.combine_multiply)
  if (_internal_has_combine_multiply()) {
    clear_has_stage();
      ::CMsgPaintKit_Operation_CombineStage* temp = stage_.combine_multiply_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    stage_.combine_multiply_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CMsgPaintKit_Operation_CombineStage& CMsgPaintKit_OperationStage::_internal_combine_multiply() const {
  return _internal_has_combine_multiply()
      ? *stage_.combine_multiply_
      : reinterpret_cast< ::CMsgPaintKit_Operation_CombineStage&>(::_CMsgPaintKit_Operation_CombineStage_default_instance_);
}
inline const ::CMsgPaintKit_Operation_CombineStage& CMsgPaintKit_OperationStage::combine_multiply() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_OperationStage.combine_multiply)
  return _internal_combine_multiply();
}
inline ::CMsgPaintKit_Operation_CombineStage* CMsgPaintKit_OperationStage::unsafe_arena_release_combine_multiply() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CMsgPaintKit_OperationStage.combine_multiply)
  if (_internal_has_combine_multiply()) {
    clear_has_stage();
    ::CMsgPaintKit_Operation_CombineStage* temp = stage_.combine_multiply_;
    stage_.combine_multiply_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CMsgPaintKit_OperationStage::unsafe_arena_set_allocated_combine_multiply(::CMsgPaintKit_Operation_CombineStage* combine_multiply) {
  clear_stage();
  if (combine_multiply) {
    set_has_combine_multiply();
    stage_.combine_multiply_ = combine_multiply;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPaintKit_OperationStage.combine_multiply)
}
inline ::CMsgPaintKit_Operation_CombineStage* CMsgPaintKit_OperationStage::_internal_mutable_combine_multiply() {
  if (!_internal_has_combine_multiply()) {
    clear_stage();
    set_has_combine_multiply();
    stage_.combine_multiply_ = CreateMaybeMessage< ::CMsgPaintKit_Operation_CombineStage >(GetArenaForAllocation());
  }
  return stage_.combine_multiply_;
}
inline ::CMsgPaintKit_Operation_CombineStage* CMsgPaintKit_OperationStage::mutable_combine_multiply() {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_OperationStage.combine_multiply)
  return _internal_mutable_combine_multiply();
}

// .CMsgPaintKit_Operation_SelectStage select = 5;
inline bool CMsgPaintKit_OperationStage::_internal_has_select() const {
  return stage_case() == kSelect;
}
inline bool CMsgPaintKit_OperationStage::has_select() const {
  return _internal_has_select();
}
inline void CMsgPaintKit_OperationStage::set_has_select() {
  _oneof_case_[0] = kSelect;
}
inline void CMsgPaintKit_OperationStage::clear_select() {
  if (_internal_has_select()) {
    if (GetArenaForAllocation() == nullptr) {
      delete stage_.select_;
    }
    clear_has_stage();
  }
}
inline ::CMsgPaintKit_Operation_SelectStage* CMsgPaintKit_OperationStage::release_select() {
  // @@protoc_insertion_point(field_release:CMsgPaintKit_OperationStage.select)
  if (_internal_has_select()) {
    clear_has_stage();
      ::CMsgPaintKit_Operation_SelectStage* temp = stage_.select_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    stage_.select_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CMsgPaintKit_Operation_SelectStage& CMsgPaintKit_OperationStage::_internal_select() const {
  return _internal_has_select()
      ? *stage_.select_
      : reinterpret_cast< ::CMsgPaintKit_Operation_SelectStage&>(::_CMsgPaintKit_Operation_SelectStage_default_instance_);
}
inline const ::CMsgPaintKit_Operation_SelectStage& CMsgPaintKit_OperationStage::select() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_OperationStage.select)
  return _internal_select();
}
inline ::CMsgPaintKit_Operation_SelectStage* CMsgPaintKit_OperationStage::unsafe_arena_release_select() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CMsgPaintKit_OperationStage.select)
  if (_internal_has_select()) {
    clear_has_stage();
    ::CMsgPaintKit_Operation_SelectStage* temp = stage_.select_;
    stage_.select_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CMsgPaintKit_OperationStage::unsafe_arena_set_allocated_select(::CMsgPaintKit_Operation_SelectStage* select) {
  clear_stage();
  if (select) {
    set_has_select();
    stage_.select_ = select;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPaintKit_OperationStage.select)
}
inline ::CMsgPaintKit_Operation_SelectStage* CMsgPaintKit_OperationStage::_internal_mutable_select() {
  if (!_internal_has_select()) {
    clear_stage();
    set_has_select();
    stage_.select_ = CreateMaybeMessage< ::CMsgPaintKit_Operation_SelectStage >(GetArenaForAllocation());
  }
  return stage_.select_;
}
inline ::CMsgPaintKit_Operation_SelectStage* CMsgPaintKit_OperationStage::mutable_select() {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_OperationStage.select)
  return _internal_mutable_select();
}

// .CMsgPaintKit_Operation_StickerStage apply_sticker = 6;
inline bool CMsgPaintKit_OperationStage::_internal_has_apply_sticker() const {
  return stage_case() == kApplySticker;
}
inline bool CMsgPaintKit_OperationStage::has_apply_sticker() const {
  return _internal_has_apply_sticker();
}
inline void CMsgPaintKit_OperationStage::set_has_apply_sticker() {
  _oneof_case_[0] = kApplySticker;
}
inline void CMsgPaintKit_OperationStage::clear_apply_sticker() {
  if (_internal_has_apply_sticker()) {
    if (GetArenaForAllocation() == nullptr) {
      delete stage_.apply_sticker_;
    }
    clear_has_stage();
  }
}
inline ::CMsgPaintKit_Operation_StickerStage* CMsgPaintKit_OperationStage::release_apply_sticker() {
  // @@protoc_insertion_point(field_release:CMsgPaintKit_OperationStage.apply_sticker)
  if (_internal_has_apply_sticker()) {
    clear_has_stage();
      ::CMsgPaintKit_Operation_StickerStage* temp = stage_.apply_sticker_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    stage_.apply_sticker_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CMsgPaintKit_Operation_StickerStage& CMsgPaintKit_OperationStage::_internal_apply_sticker() const {
  return _internal_has_apply_sticker()
      ? *stage_.apply_sticker_
      : reinterpret_cast< ::CMsgPaintKit_Operation_StickerStage&>(::_CMsgPaintKit_Operation_StickerStage_default_instance_);
}
inline const ::CMsgPaintKit_Operation_StickerStage& CMsgPaintKit_OperationStage::apply_sticker() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_OperationStage.apply_sticker)
  return _internal_apply_sticker();
}
inline ::CMsgPaintKit_Operation_StickerStage* CMsgPaintKit_OperationStage::unsafe_arena_release_apply_sticker() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CMsgPaintKit_OperationStage.apply_sticker)
  if (_internal_has_apply_sticker()) {
    clear_has_stage();
    ::CMsgPaintKit_Operation_StickerStage* temp = stage_.apply_sticker_;
    stage_.apply_sticker_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CMsgPaintKit_OperationStage::unsafe_arena_set_allocated_apply_sticker(::CMsgPaintKit_Operation_StickerStage* apply_sticker) {
  clear_stage();
  if (apply_sticker) {
    set_has_apply_sticker();
    stage_.apply_sticker_ = apply_sticker;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPaintKit_OperationStage.apply_sticker)
}
inline ::CMsgPaintKit_Operation_StickerStage* CMsgPaintKit_OperationStage::_internal_mutable_apply_sticker() {
  if (!_internal_has_apply_sticker()) {
    clear_stage();
    set_has_apply_sticker();
    stage_.apply_sticker_ = CreateMaybeMessage< ::CMsgPaintKit_Operation_StickerStage >(GetArenaForAllocation());
  }
  return stage_.apply_sticker_;
}
inline ::CMsgPaintKit_Operation_StickerStage* CMsgPaintKit_OperationStage::mutable_apply_sticker() {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_OperationStage.apply_sticker)
  return _internal_mutable_apply_sticker();
}

inline bool CMsgPaintKit_OperationStage::has_stage() const {
  return stage_case() != STAGE_NOT_SET;
}
inline void CMsgPaintKit_OperationStage::clear_has_stage() {
  _oneof_case_[0] = STAGE_NOT_SET;
}
inline CMsgPaintKit_OperationStage::StageCase CMsgPaintKit_OperationStage::stage_case() const {
  return CMsgPaintKit_OperationStage::StageCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// CMsgPaintKit_OperationNode

// .CMsgPaintKit_OperationStage stage = 1;
inline bool CMsgPaintKit_OperationNode::_internal_has_stage() const {
  return node_case() == kStage;
}
inline bool CMsgPaintKit_OperationNode::has_stage() const {
  return _internal_has_stage();
}
inline void CMsgPaintKit_OperationNode::set_has_stage() {
  _oneof_case_[0] = kStage;
}
inline void CMsgPaintKit_OperationNode::clear_stage() {
  if (_internal_has_stage()) {
    if (GetArenaForAllocation() == nullptr) {
      delete node_.stage_;
    }
    clear_has_node();
  }
}
inline ::CMsgPaintKit_OperationStage* CMsgPaintKit_OperationNode::release_stage() {
  // @@protoc_insertion_point(field_release:CMsgPaintKit_OperationNode.stage)
  if (_internal_has_stage()) {
    clear_has_node();
      ::CMsgPaintKit_OperationStage* temp = node_.stage_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    node_.stage_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CMsgPaintKit_OperationStage& CMsgPaintKit_OperationNode::_internal_stage() const {
  return _internal_has_stage()
      ? *node_.stage_
      : reinterpret_cast< ::CMsgPaintKit_OperationStage&>(::_CMsgPaintKit_OperationStage_default_instance_);
}
inline const ::CMsgPaintKit_OperationStage& CMsgPaintKit_OperationNode::stage() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_OperationNode.stage)
  return _internal_stage();
}
inline ::CMsgPaintKit_OperationStage* CMsgPaintKit_OperationNode::unsafe_arena_release_stage() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CMsgPaintKit_OperationNode.stage)
  if (_internal_has_stage()) {
    clear_has_node();
    ::CMsgPaintKit_OperationStage* temp = node_.stage_;
    node_.stage_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CMsgPaintKit_OperationNode::unsafe_arena_set_allocated_stage(::CMsgPaintKit_OperationStage* stage) {
  clear_node();
  if (stage) {
    set_has_stage();
    node_.stage_ = stage;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPaintKit_OperationNode.stage)
}
inline ::CMsgPaintKit_OperationStage* CMsgPaintKit_OperationNode::_internal_mutable_stage() {
  if (!_internal_has_stage()) {
    clear_node();
    set_has_stage();
    node_.stage_ = CreateMaybeMessage< ::CMsgPaintKit_OperationStage >(GetArenaForAllocation());
  }
  return node_.stage_;
}
inline ::CMsgPaintKit_OperationStage* CMsgPaintKit_OperationNode::mutable_stage() {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_OperationNode.stage)
  return _internal_mutable_stage();
}

// .CMsgProtoDefID operation_template = 2 [(.valid_type) = DEF_TYPE_PAINTKIT_OPERATION, (.inherit_reference_variables) = true];
inline bool CMsgPaintKit_OperationNode::_internal_has_operation_template() const {
  return node_case() == kOperationTemplate;
}
inline bool CMsgPaintKit_OperationNode::has_operation_template() const {
  return _internal_has_operation_template();
}
inline void CMsgPaintKit_OperationNode::set_has_operation_template() {
  _oneof_case_[0] = kOperationTemplate;
}
inline void CMsgPaintKit_OperationNode::clear_operation_template() {
  if (_internal_has_operation_template()) {
    if (GetArenaForAllocation() == nullptr) {
      delete node_.operation_template_;
    }
    clear_has_node();
  }
}
inline ::CMsgProtoDefID* CMsgPaintKit_OperationNode::release_operation_template() {
  // @@protoc_insertion_point(field_release:CMsgPaintKit_OperationNode.operation_template)
  if (_internal_has_operation_template()) {
    clear_has_node();
      ::CMsgProtoDefID* temp = node_.operation_template_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    node_.operation_template_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CMsgProtoDefID& CMsgPaintKit_OperationNode::_internal_operation_template() const {
  return _internal_has_operation_template()
      ? *node_.operation_template_
      : reinterpret_cast< ::CMsgProtoDefID&>(::_CMsgProtoDefID_default_instance_);
}
inline const ::CMsgProtoDefID& CMsgPaintKit_OperationNode::operation_template() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_OperationNode.operation_template)
  return _internal_operation_template();
}
inline ::CMsgProtoDefID* CMsgPaintKit_OperationNode::unsafe_arena_release_operation_template() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CMsgPaintKit_OperationNode.operation_template)
  if (_internal_has_operation_template()) {
    clear_has_node();
    ::CMsgProtoDefID* temp = node_.operation_template_;
    node_.operation_template_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CMsgPaintKit_OperationNode::unsafe_arena_set_allocated_operation_template(::CMsgProtoDefID* operation_template) {
  clear_node();
  if (operation_template) {
    set_has_operation_template();
    node_.operation_template_ = operation_template;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPaintKit_OperationNode.operation_template)
}
inline ::CMsgProtoDefID* CMsgPaintKit_OperationNode::_internal_mutable_operation_template() {
  if (!_internal_has_operation_template()) {
    clear_node();
    set_has_operation_template();
    node_.operation_template_ = CreateMaybeMessage< ::CMsgProtoDefID >(GetArenaForAllocation());
  }
  return node_.operation_template_;
}
inline ::CMsgProtoDefID* CMsgPaintKit_OperationNode::mutable_operation_template() {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_OperationNode.operation_template)
  return _internal_mutable_operation_template();
}

inline bool CMsgPaintKit_OperationNode::has_node() const {
  return node_case() != NODE_NOT_SET;
}
inline void CMsgPaintKit_OperationNode::clear_has_node() {
  _oneof_case_[0] = NODE_NOT_SET;
}
inline CMsgPaintKit_OperationNode::NodeCase CMsgPaintKit_OperationNode::node_case() const {
  return CMsgPaintKit_OperationNode::NodeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// CMsgPaintKit_Operation

// required .CMsgProtoDefHeader header = 1;
inline bool CMsgPaintKit_Operation::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool CMsgPaintKit_Operation::has_header() const {
  return _internal_has_header();
}
inline void CMsgPaintKit_Operation::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgProtoDefHeader& CMsgPaintKit_Operation::_internal_header() const {
  const ::CMsgProtoDefHeader* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgProtoDefHeader&>(
      ::_CMsgProtoDefHeader_default_instance_);
}
inline const ::CMsgProtoDefHeader& CMsgPaintKit_Operation::header() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Operation.header)
  return _internal_header();
}
inline void CMsgPaintKit_Operation::unsafe_arena_set_allocated_header(
    ::CMsgProtoDefHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPaintKit_Operation.header)
}
inline ::CMsgProtoDefHeader* CMsgPaintKit_Operation::release_header() {
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgProtoDefHeader* temp = header_;
  header_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgProtoDefHeader* CMsgPaintKit_Operation::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:CMsgPaintKit_Operation.header)
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgProtoDefHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::CMsgProtoDefHeader* CMsgPaintKit_Operation::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000001u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgProtoDefHeader>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::CMsgProtoDefHeader* CMsgPaintKit_Operation::mutable_header() {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Operation.header)
  return _internal_mutable_header();
}
inline void CMsgPaintKit_Operation::set_allocated_header(::CMsgProtoDefHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgProtoDefHeader>::GetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Operation.header)
}

// repeated .CMsgPaintKit_OperationNode operation_node = 2;
inline int CMsgPaintKit_Operation::_internal_operation_node_size() const {
  return operation_node_.size();
}
inline int CMsgPaintKit_Operation::operation_node_size() const {
  return _internal_operation_node_size();
}
inline void CMsgPaintKit_Operation::clear_operation_node() {
  operation_node_.Clear();
}
inline ::CMsgPaintKit_OperationNode* CMsgPaintKit_Operation::mutable_operation_node(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Operation.operation_node)
  return operation_node_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPaintKit_OperationNode >*
CMsgPaintKit_Operation::mutable_operation_node() {
  // @@protoc_insertion_point(field_mutable_list:CMsgPaintKit_Operation.operation_node)
  return &operation_node_;
}
inline const ::CMsgPaintKit_OperationNode& CMsgPaintKit_Operation::_internal_operation_node(int index) const {
  return operation_node_.Get(index);
}
inline const ::CMsgPaintKit_OperationNode& CMsgPaintKit_Operation::operation_node(int index) const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Operation.operation_node)
  return _internal_operation_node(index);
}
inline ::CMsgPaintKit_OperationNode* CMsgPaintKit_Operation::_internal_add_operation_node() {
  return operation_node_.Add();
}
inline ::CMsgPaintKit_OperationNode* CMsgPaintKit_Operation::add_operation_node() {
  // @@protoc_insertion_point(field_add:CMsgPaintKit_Operation.operation_node)
  return _internal_add_operation_node();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPaintKit_OperationNode >&
CMsgPaintKit_Operation::operation_node() const {
  // @@protoc_insertion_point(field_list:CMsgPaintKit_Operation.operation_node)
  return operation_node_;
}

// -------------------------------------------------------------------

// CMsgPaintKit_ItemDefinition_Definition

// optional .CMsgProtoDefID operation_template = 1 [(.valid_type) = DEF_TYPE_PAINTKIT_OPERATION];
inline bool CMsgPaintKit_ItemDefinition_Definition::_internal_has_operation_template() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || operation_template_ != nullptr);
  return value;
}
inline bool CMsgPaintKit_ItemDefinition_Definition::has_operation_template() const {
  return _internal_has_operation_template();
}
inline void CMsgPaintKit_ItemDefinition_Definition::clear_operation_template() {
  if (operation_template_ != nullptr) operation_template_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgProtoDefID& CMsgPaintKit_ItemDefinition_Definition::_internal_operation_template() const {
  const ::CMsgProtoDefID* p = operation_template_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgProtoDefID&>(
      ::_CMsgProtoDefID_default_instance_);
}
inline const ::CMsgProtoDefID& CMsgPaintKit_ItemDefinition_Definition::operation_template() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_ItemDefinition.Definition.operation_template)
  return _internal_operation_template();
}
inline void CMsgPaintKit_ItemDefinition_Definition::unsafe_arena_set_allocated_operation_template(
    ::CMsgProtoDefID* operation_template) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(operation_template_);
  }
  operation_template_ = operation_template;
  if (operation_template) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPaintKit_ItemDefinition.Definition.operation_template)
}
inline ::CMsgProtoDefID* CMsgPaintKit_ItemDefinition_Definition::release_operation_template() {
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgProtoDefID* temp = operation_template_;
  operation_template_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgProtoDefID* CMsgPaintKit_ItemDefinition_Definition::unsafe_arena_release_operation_template() {
  // @@protoc_insertion_point(field_release:CMsgPaintKit_ItemDefinition.Definition.operation_template)
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgProtoDefID* temp = operation_template_;
  operation_template_ = nullptr;
  return temp;
}
inline ::CMsgProtoDefID* CMsgPaintKit_ItemDefinition_Definition::_internal_mutable_operation_template() {
  _has_bits_[0] |= 0x00000001u;
  if (operation_template_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgProtoDefID>(GetArenaForAllocation());
    operation_template_ = p;
  }
  return operation_template_;
}
inline ::CMsgProtoDefID* CMsgPaintKit_ItemDefinition_Definition::mutable_operation_template() {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_ItemDefinition.Definition.operation_template)
  return _internal_mutable_operation_template();
}
inline void CMsgPaintKit_ItemDefinition_Definition::set_allocated_operation_template(::CMsgProtoDefID* operation_template) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete operation_template_;
  }
  if (operation_template) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgProtoDefID>::GetOwningArena(operation_template);
    if (message_arena != submessage_arena) {
      operation_template = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, operation_template, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  operation_template_ = operation_template;
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_ItemDefinition.Definition.operation_template)
}

// repeated .CMsgVarField variable = 2 [(.allow_add) = false, (.allow_delete) = false, (.var_field_type) = VAR_TYPE_STRING];
inline int CMsgPaintKit_ItemDefinition_Definition::_internal_variable_size() const {
  return variable_.size();
}
inline int CMsgPaintKit_ItemDefinition_Definition::variable_size() const {
  return _internal_variable_size();
}
inline void CMsgPaintKit_ItemDefinition_Definition::clear_variable() {
  variable_.Clear();
}
inline ::CMsgVarField* CMsgPaintKit_ItemDefinition_Definition::mutable_variable(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_ItemDefinition.Definition.variable)
  return variable_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgVarField >*
CMsgPaintKit_ItemDefinition_Definition::mutable_variable() {
  // @@protoc_insertion_point(field_mutable_list:CMsgPaintKit_ItemDefinition.Definition.variable)
  return &variable_;
}
inline const ::CMsgVarField& CMsgPaintKit_ItemDefinition_Definition::_internal_variable(int index) const {
  return variable_.Get(index);
}
inline const ::CMsgVarField& CMsgPaintKit_ItemDefinition_Definition::variable(int index) const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_ItemDefinition.Definition.variable)
  return _internal_variable(index);
}
inline ::CMsgVarField* CMsgPaintKit_ItemDefinition_Definition::_internal_add_variable() {
  return variable_.Add();
}
inline ::CMsgVarField* CMsgPaintKit_ItemDefinition_Definition::add_variable() {
  // @@protoc_insertion_point(field_add:CMsgPaintKit_ItemDefinition.Definition.variable)
  return _internal_add_variable();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgVarField >&
CMsgPaintKit_ItemDefinition_Definition::variable() const {
  // @@protoc_insertion_point(field_list:CMsgPaintKit_ItemDefinition.Definition.variable)
  return variable_;
}

// -------------------------------------------------------------------

// CMsgPaintKit_ItemDefinition

// required .CMsgProtoDefHeader header = 1;
inline bool CMsgPaintKit_ItemDefinition::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool CMsgPaintKit_ItemDefinition::has_header() const {
  return _internal_has_header();
}
inline void CMsgPaintKit_ItemDefinition::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgProtoDefHeader& CMsgPaintKit_ItemDefinition::_internal_header() const {
  const ::CMsgProtoDefHeader* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgProtoDefHeader&>(
      ::_CMsgProtoDefHeader_default_instance_);
}
inline const ::CMsgProtoDefHeader& CMsgPaintKit_ItemDefinition::header() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_ItemDefinition.header)
  return _internal_header();
}
inline void CMsgPaintKit_ItemDefinition::unsafe_arena_set_allocated_header(
    ::CMsgProtoDefHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPaintKit_ItemDefinition.header)
}
inline ::CMsgProtoDefHeader* CMsgPaintKit_ItemDefinition::release_header() {
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgProtoDefHeader* temp = header_;
  header_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgProtoDefHeader* CMsgPaintKit_ItemDefinition::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:CMsgPaintKit_ItemDefinition.header)
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgProtoDefHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::CMsgProtoDefHeader* CMsgPaintKit_ItemDefinition::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000001u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgProtoDefHeader>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::CMsgProtoDefHeader* CMsgPaintKit_ItemDefinition::mutable_header() {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_ItemDefinition.header)
  return _internal_mutable_header();
}
inline void CMsgPaintKit_ItemDefinition::set_allocated_header(::CMsgProtoDefHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgProtoDefHeader>::GetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_ItemDefinition.header)
}

// required uint32 item_definition_index = 2;
inline bool CMsgPaintKit_ItemDefinition::_internal_has_item_definition_index() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgPaintKit_ItemDefinition::has_item_definition_index() const {
  return _internal_has_item_definition_index();
}
inline void CMsgPaintKit_ItemDefinition::clear_item_definition_index() {
  item_definition_index_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgPaintKit_ItemDefinition::_internal_item_definition_index() const {
  return item_definition_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgPaintKit_ItemDefinition::item_definition_index() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_ItemDefinition.item_definition_index)
  return _internal_item_definition_index();
}
inline void CMsgPaintKit_ItemDefinition::_internal_set_item_definition_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  item_definition_index_ = value;
}
inline void CMsgPaintKit_ItemDefinition::set_item_definition_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_item_definition_index(value);
  // @@protoc_insertion_point(field_set:CMsgPaintKit_ItemDefinition.item_definition_index)
}

// optional .CMsgProtoDefID variable_template = 3 [(.valid_type) = DEF_TYPE_PAINTKIT_VARIABLES, (.inherit_reference_variables) = true];
inline bool CMsgPaintKit_ItemDefinition::_internal_has_variable_template() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || variable_template_ != nullptr);
  return value;
}
inline bool CMsgPaintKit_ItemDefinition::has_variable_template() const {
  return _internal_has_variable_template();
}
inline void CMsgPaintKit_ItemDefinition::clear_variable_template() {
  if (variable_template_ != nullptr) variable_template_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::CMsgProtoDefID& CMsgPaintKit_ItemDefinition::_internal_variable_template() const {
  const ::CMsgProtoDefID* p = variable_template_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgProtoDefID&>(
      ::_CMsgProtoDefID_default_instance_);
}
inline const ::CMsgProtoDefID& CMsgPaintKit_ItemDefinition::variable_template() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_ItemDefinition.variable_template)
  return _internal_variable_template();
}
inline void CMsgPaintKit_ItemDefinition::unsafe_arena_set_allocated_variable_template(
    ::CMsgProtoDefID* variable_template) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(variable_template_);
  }
  variable_template_ = variable_template;
  if (variable_template) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPaintKit_ItemDefinition.variable_template)
}
inline ::CMsgProtoDefID* CMsgPaintKit_ItemDefinition::release_variable_template() {
  _has_bits_[0] &= ~0x00000002u;
  ::CMsgProtoDefID* temp = variable_template_;
  variable_template_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgProtoDefID* CMsgPaintKit_ItemDefinition::unsafe_arena_release_variable_template() {
  // @@protoc_insertion_point(field_release:CMsgPaintKit_ItemDefinition.variable_template)
  _has_bits_[0] &= ~0x00000002u;
  ::CMsgProtoDefID* temp = variable_template_;
  variable_template_ = nullptr;
  return temp;
}
inline ::CMsgProtoDefID* CMsgPaintKit_ItemDefinition::_internal_mutable_variable_template() {
  _has_bits_[0] |= 0x00000002u;
  if (variable_template_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgProtoDefID>(GetArenaForAllocation());
    variable_template_ = p;
  }
  return variable_template_;
}
inline ::CMsgProtoDefID* CMsgPaintKit_ItemDefinition::mutable_variable_template() {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_ItemDefinition.variable_template)
  return _internal_mutable_variable_template();
}
inline void CMsgPaintKit_ItemDefinition::set_allocated_variable_template(::CMsgProtoDefID* variable_template) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete variable_template_;
  }
  if (variable_template) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgProtoDefID>::GetOwningArena(variable_template);
    if (message_arena != submessage_arena) {
      variable_template = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, variable_template, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  variable_template_ = variable_template;
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_ItemDefinition.variable_template)
}

// repeated .CMsgPaintKit_ItemDefinition.Definition definition = 4 [(.max_count) = 5];
inline int CMsgPaintKit_ItemDefinition::_internal_definition_size() const {
  return definition_.size();
}
inline int CMsgPaintKit_ItemDefinition::definition_size() const {
  return _internal_definition_size();
}
inline void CMsgPaintKit_ItemDefinition::clear_definition() {
  definition_.Clear();
}
inline ::CMsgPaintKit_ItemDefinition_Definition* CMsgPaintKit_ItemDefinition::mutable_definition(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_ItemDefinition.definition)
  return definition_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPaintKit_ItemDefinition_Definition >*
CMsgPaintKit_ItemDefinition::mutable_definition() {
  // @@protoc_insertion_point(field_mutable_list:CMsgPaintKit_ItemDefinition.definition)
  return &definition_;
}
inline const ::CMsgPaintKit_ItemDefinition_Definition& CMsgPaintKit_ItemDefinition::_internal_definition(int index) const {
  return definition_.Get(index);
}
inline const ::CMsgPaintKit_ItemDefinition_Definition& CMsgPaintKit_ItemDefinition::definition(int index) const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_ItemDefinition.definition)
  return _internal_definition(index);
}
inline ::CMsgPaintKit_ItemDefinition_Definition* CMsgPaintKit_ItemDefinition::_internal_add_definition() {
  return definition_.Add();
}
inline ::CMsgPaintKit_ItemDefinition_Definition* CMsgPaintKit_ItemDefinition::add_definition() {
  // @@protoc_insertion_point(field_add:CMsgPaintKit_ItemDefinition.definition)
  return _internal_add_definition();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPaintKit_ItemDefinition_Definition >&
CMsgPaintKit_ItemDefinition::definition() const {
  // @@protoc_insertion_point(field_list:CMsgPaintKit_ItemDefinition.definition)
  return definition_;
}

// -------------------------------------------------------------------

// CMsgPaintKit_Definition_Item_ItemData

// optional bool can_apply_paintkit = 2 [default = true];
inline bool CMsgPaintKit_Definition_Item_ItemData::_internal_has_can_apply_paintkit() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgPaintKit_Definition_Item_ItemData::has_can_apply_paintkit() const {
  return _internal_has_can_apply_paintkit();
}
inline void CMsgPaintKit_Definition_Item_ItemData::clear_can_apply_paintkit() {
  can_apply_paintkit_ = true;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CMsgPaintKit_Definition_Item_ItemData::_internal_can_apply_paintkit() const {
  return can_apply_paintkit_;
}
inline bool CMsgPaintKit_Definition_Item_ItemData::can_apply_paintkit() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.Item.ItemData.can_apply_paintkit)
  return _internal_can_apply_paintkit();
}
inline void CMsgPaintKit_Definition_Item_ItemData::_internal_set_can_apply_paintkit(bool value) {
  _has_bits_[0] |= 0x00000002u;
  can_apply_paintkit_ = value;
}
inline void CMsgPaintKit_Definition_Item_ItemData::set_can_apply_paintkit(bool value) {
  _internal_set_can_apply_paintkit(value);
  // @@protoc_insertion_point(field_set:CMsgPaintKit_Definition.Item.ItemData.can_apply_paintkit)
}

// optional string material_override = 3;
inline bool CMsgPaintKit_Definition_Item_ItemData::_internal_has_material_override() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgPaintKit_Definition_Item_ItemData::has_material_override() const {
  return _internal_has_material_override();
}
inline void CMsgPaintKit_Definition_Item_ItemData::clear_material_override() {
  material_override_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgPaintKit_Definition_Item_ItemData::material_override() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.Item.ItemData.material_override)
  return _internal_material_override();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgPaintKit_Definition_Item_ItemData::set_material_override(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 material_override_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgPaintKit_Definition.Item.ItemData.material_override)
}
inline std::string* CMsgPaintKit_Definition_Item_ItemData::mutable_material_override() {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.Item.ItemData.material_override)
  return _internal_mutable_material_override();
}
inline const std::string& CMsgPaintKit_Definition_Item_ItemData::_internal_material_override() const {
  return material_override_.Get();
}
inline void CMsgPaintKit_Definition_Item_ItemData::_internal_set_material_override(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  material_override_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgPaintKit_Definition_Item_ItemData::_internal_mutable_material_override() {
  _has_bits_[0] |= 0x00000001u;
  return material_override_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgPaintKit_Definition_Item_ItemData::release_material_override() {
  // @@protoc_insertion_point(field_release:CMsgPaintKit_Definition.Item.ItemData.material_override)
  if (!_internal_has_material_override()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return material_override_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CMsgPaintKit_Definition_Item_ItemData::set_allocated_material_override(std::string* material_override) {
  if (material_override != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  material_override_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), material_override,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Definition.Item.ItemData.material_override)
}

// repeated .CMsgVarField variable = 4 [(.allow_add) = false, (.allow_delete) = false, (.var_field_type) = VAR_TYPE_STRING];
inline int CMsgPaintKit_Definition_Item_ItemData::_internal_variable_size() const {
  return variable_.size();
}
inline int CMsgPaintKit_Definition_Item_ItemData::variable_size() const {
  return _internal_variable_size();
}
inline void CMsgPaintKit_Definition_Item_ItemData::clear_variable() {
  variable_.Clear();
}
inline ::CMsgVarField* CMsgPaintKit_Definition_Item_ItemData::mutable_variable(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.Item.ItemData.variable)
  return variable_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgVarField >*
CMsgPaintKit_Definition_Item_ItemData::mutable_variable() {
  // @@protoc_insertion_point(field_mutable_list:CMsgPaintKit_Definition.Item.ItemData.variable)
  return &variable_;
}
inline const ::CMsgVarField& CMsgPaintKit_Definition_Item_ItemData::_internal_variable(int index) const {
  return variable_.Get(index);
}
inline const ::CMsgVarField& CMsgPaintKit_Definition_Item_ItemData::variable(int index) const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.Item.ItemData.variable)
  return _internal_variable(index);
}
inline ::CMsgVarField* CMsgPaintKit_Definition_Item_ItemData::_internal_add_variable() {
  return variable_.Add();
}
inline ::CMsgVarField* CMsgPaintKit_Definition_Item_ItemData::add_variable() {
  // @@protoc_insertion_point(field_add:CMsgPaintKit_Definition.Item.ItemData.variable)
  return _internal_add_variable();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgVarField >&
CMsgPaintKit_Definition_Item_ItemData::variable() const {
  // @@protoc_insertion_point(field_list:CMsgPaintKit_Definition.Item.ItemData.variable)
  return variable_;
}

// -------------------------------------------------------------------

// CMsgPaintKit_Definition_Item

// required .CMsgProtoDefID item_definition_template = 1 [(.valid_type) = DEF_TYPE_PAINTKIT_ITEM_DEFINITION, (.panel_class_override) = "CPaintKitDefIdFieldProtoEditorField"];
inline bool CMsgPaintKit_Definition_Item::_internal_has_item_definition_template() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || item_definition_template_ != nullptr);
  return value;
}
inline bool CMsgPaintKit_Definition_Item::has_item_definition_template() const {
  return _internal_has_item_definition_template();
}
inline void CMsgPaintKit_Definition_Item::clear_item_definition_template() {
  if (item_definition_template_ != nullptr) item_definition_template_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgProtoDefID& CMsgPaintKit_Definition_Item::_internal_item_definition_template() const {
  const ::CMsgProtoDefID* p = item_definition_template_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgProtoDefID&>(
      ::_CMsgProtoDefID_default_instance_);
}
inline const ::CMsgProtoDefID& CMsgPaintKit_Definition_Item::item_definition_template() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.Item.item_definition_template)
  return _internal_item_definition_template();
}
inline void CMsgPaintKit_Definition_Item::unsafe_arena_set_allocated_item_definition_template(
    ::CMsgProtoDefID* item_definition_template) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(item_definition_template_);
  }
  item_definition_template_ = item_definition_template;
  if (item_definition_template) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPaintKit_Definition.Item.item_definition_template)
}
inline ::CMsgProtoDefID* CMsgPaintKit_Definition_Item::release_item_definition_template() {
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgProtoDefID* temp = item_definition_template_;
  item_definition_template_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgProtoDefID* CMsgPaintKit_Definition_Item::unsafe_arena_release_item_definition_template() {
  // @@protoc_insertion_point(field_release:CMsgPaintKit_Definition.Item.item_definition_template)
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgProtoDefID* temp = item_definition_template_;
  item_definition_template_ = nullptr;
  return temp;
}
inline ::CMsgProtoDefID* CMsgPaintKit_Definition_Item::_internal_mutable_item_definition_template() {
  _has_bits_[0] |= 0x00000001u;
  if (item_definition_template_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgProtoDefID>(GetArenaForAllocation());
    item_definition_template_ = p;
  }
  return item_definition_template_;
}
inline ::CMsgProtoDefID* CMsgPaintKit_Definition_Item::mutable_item_definition_template() {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.Item.item_definition_template)
  return _internal_mutable_item_definition_template();
}
inline void CMsgPaintKit_Definition_Item::set_allocated_item_definition_template(::CMsgProtoDefID* item_definition_template) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete item_definition_template_;
  }
  if (item_definition_template) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgProtoDefID>::GetOwningArena(item_definition_template);
    if (message_arena != submessage_arena) {
      item_definition_template = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item_definition_template, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  item_definition_template_ = item_definition_template;
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Definition.Item.item_definition_template)
}

// optional .CMsgPaintKit_Definition.Item.ItemData data = 5;
inline bool CMsgPaintKit_Definition_Item::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || data_ != nullptr);
  return value;
}
inline bool CMsgPaintKit_Definition_Item::has_data() const {
  return _internal_has_data();
}
inline void CMsgPaintKit_Definition_Item::clear_data() {
  if (data_ != nullptr) data_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::CMsgPaintKit_Definition_Item_ItemData& CMsgPaintKit_Definition_Item::_internal_data() const {
  const ::CMsgPaintKit_Definition_Item_ItemData* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgPaintKit_Definition_Item_ItemData&>(
      ::_CMsgPaintKit_Definition_Item_ItemData_default_instance_);
}
inline const ::CMsgPaintKit_Definition_Item_ItemData& CMsgPaintKit_Definition_Item::data() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.Item.data)
  return _internal_data();
}
inline void CMsgPaintKit_Definition_Item::unsafe_arena_set_allocated_data(
    ::CMsgPaintKit_Definition_Item_ItemData* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPaintKit_Definition.Item.data)
}
inline ::CMsgPaintKit_Definition_Item_ItemData* CMsgPaintKit_Definition_Item::release_data() {
  _has_bits_[0] &= ~0x00000002u;
  ::CMsgPaintKit_Definition_Item_ItemData* temp = data_;
  data_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgPaintKit_Definition_Item_ItemData* CMsgPaintKit_Definition_Item::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:CMsgPaintKit_Definition.Item.data)
  _has_bits_[0] &= ~0x00000002u;
  ::CMsgPaintKit_Definition_Item_ItemData* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::CMsgPaintKit_Definition_Item_ItemData* CMsgPaintKit_Definition_Item::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000002u;
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgPaintKit_Definition_Item_ItemData>(GetArenaForAllocation());
    data_ = p;
  }
  return data_;
}
inline ::CMsgPaintKit_Definition_Item_ItemData* CMsgPaintKit_Definition_Item::mutable_data() {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.Item.data)
  return _internal_mutable_data();
}
inline void CMsgPaintKit_Definition_Item::set_allocated_data(::CMsgPaintKit_Definition_Item_ItemData* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgPaintKit_Definition_Item_ItemData>::GetOwningArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Definition.Item.data)
}

// -------------------------------------------------------------------

// CMsgPaintKit_Definition

// required .CMsgProtoDefHeader header = 1;
inline bool CMsgPaintKit_Definition::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool CMsgPaintKit_Definition::has_header() const {
  return _internal_has_header();
}
inline void CMsgPaintKit_Definition::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::CMsgProtoDefHeader& CMsgPaintKit_Definition::_internal_header() const {
  const ::CMsgProtoDefHeader* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgProtoDefHeader&>(
      ::_CMsgProtoDefHeader_default_instance_);
}
inline const ::CMsgProtoDefHeader& CMsgPaintKit_Definition::header() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.header)
  return _internal_header();
}
inline void CMsgPaintKit_Definition::unsafe_arena_set_allocated_header(
    ::CMsgProtoDefHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPaintKit_Definition.header)
}
inline ::CMsgProtoDefHeader* CMsgPaintKit_Definition::release_header() {
  _has_bits_[0] &= ~0x00000002u;
  ::CMsgProtoDefHeader* temp = header_;
  header_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgProtoDefHeader* CMsgPaintKit_Definition::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:CMsgPaintKit_Definition.header)
  _has_bits_[0] &= ~0x00000002u;
  ::CMsgProtoDefHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::CMsgProtoDefHeader* CMsgPaintKit_Definition::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000002u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgProtoDefHeader>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::CMsgProtoDefHeader* CMsgPaintKit_Definition::mutable_header() {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.header)
  return _internal_mutable_header();
}
inline void CMsgPaintKit_Definition::set_allocated_header(::CMsgProtoDefHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgProtoDefHeader>::GetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Definition.header)
}

// optional string loc_desctoken = 2 [(.localized) = true];
inline bool CMsgPaintKit_Definition::_internal_has_loc_desctoken() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgPaintKit_Definition::has_loc_desctoken() const {
  return _internal_has_loc_desctoken();
}
inline void CMsgPaintKit_Definition::clear_loc_desctoken() {
  loc_desctoken_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgPaintKit_Definition::loc_desctoken() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.loc_desctoken)
  return _internal_loc_desctoken();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgPaintKit_Definition::set_loc_desctoken(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 loc_desctoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgPaintKit_Definition.loc_desctoken)
}
inline std::string* CMsgPaintKit_Definition::mutable_loc_desctoken() {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.loc_desctoken)
  return _internal_mutable_loc_desctoken();
}
inline const std::string& CMsgPaintKit_Definition::_internal_loc_desctoken() const {
  return loc_desctoken_.Get();
}
inline void CMsgPaintKit_Definition::_internal_set_loc_desctoken(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  loc_desctoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgPaintKit_Definition::_internal_mutable_loc_desctoken() {
  _has_bits_[0] |= 0x00000001u;
  return loc_desctoken_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgPaintKit_Definition::release_loc_desctoken() {
  // @@protoc_insertion_point(field_release:CMsgPaintKit_Definition.loc_desctoken)
  if (!_internal_has_loc_desctoken()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return loc_desctoken_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CMsgPaintKit_Definition::set_allocated_loc_desctoken(std::string* loc_desctoken) {
  if (loc_desctoken != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  loc_desctoken_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), loc_desctoken,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Definition.loc_desctoken)
}

// optional .CMsgProtoDefID operation_template = 3 [(.valid_type) = DEF_TYPE_PAINTKIT_OPERATION, (.comment) = "operation template which all items in the list will use unless there\'s operation_template specified in an item_definition", (.inherit_reference_variables) = true];
inline bool CMsgPaintKit_Definition::_internal_has_operation_template() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || operation_template_ != nullptr);
  return value;
}
inline bool CMsgPaintKit_Definition::has_operation_template() const {
  return _internal_has_operation_template();
}
inline void CMsgPaintKit_Definition::clear_operation_template() {
  if (operation_template_ != nullptr) operation_template_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::CMsgProtoDefID& CMsgPaintKit_Definition::_internal_operation_template() const {
  const ::CMsgProtoDefID* p = operation_template_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgProtoDefID&>(
      ::_CMsgProtoDefID_default_instance_);
}
inline const ::CMsgProtoDefID& CMsgPaintKit_Definition::operation_template() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.operation_template)
  return _internal_operation_template();
}
inline void CMsgPaintKit_Definition::unsafe_arena_set_allocated_operation_template(
    ::CMsgProtoDefID* operation_template) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(operation_template_);
  }
  operation_template_ = operation_template;
  if (operation_template) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPaintKit_Definition.operation_template)
}
inline ::CMsgProtoDefID* CMsgPaintKit_Definition::release_operation_template() {
  _has_bits_[0] &= ~0x00000004u;
  ::CMsgProtoDefID* temp = operation_template_;
  operation_template_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgProtoDefID* CMsgPaintKit_Definition::unsafe_arena_release_operation_template() {
  // @@protoc_insertion_point(field_release:CMsgPaintKit_Definition.operation_template)
  _has_bits_[0] &= ~0x00000004u;
  ::CMsgProtoDefID* temp = operation_template_;
  operation_template_ = nullptr;
  return temp;
}
inline ::CMsgProtoDefID* CMsgPaintKit_Definition::_internal_mutable_operation_template() {
  _has_bits_[0] |= 0x00000004u;
  if (operation_template_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgProtoDefID>(GetArenaForAllocation());
    operation_template_ = p;
  }
  return operation_template_;
}
inline ::CMsgProtoDefID* CMsgPaintKit_Definition::mutable_operation_template() {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.operation_template)
  return _internal_mutable_operation_template();
}
inline void CMsgPaintKit_Definition::set_allocated_operation_template(::CMsgProtoDefID* operation_template) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete operation_template_;
  }
  if (operation_template) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgProtoDefID>::GetOwningArena(operation_template);
    if (message_arena != submessage_arena) {
      operation_template = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, operation_template, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  operation_template_ = operation_template;
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Definition.operation_template)
}

// optional bool has_team_textures = 4;
inline bool CMsgPaintKit_Definition::_internal_has_has_team_textures() const {
  bool value = (_has_bits_[1] & 0x00010000u) != 0;
  return value;
}
inline bool CMsgPaintKit_Definition::has_has_team_textures() const {
  return _internal_has_has_team_textures();
}
inline void CMsgPaintKit_Definition::clear_has_team_textures() {
  has_team_textures_ = false;
  _has_bits_[1] &= ~0x00010000u;
}
inline bool CMsgPaintKit_Definition::_internal_has_team_textures() const {
  return has_team_textures_;
}
inline bool CMsgPaintKit_Definition::has_team_textures() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.has_team_textures)
  return _internal_has_team_textures();
}
inline void CMsgPaintKit_Definition::_internal_set_has_team_textures(bool value) {
  _has_bits_[1] |= 0x00010000u;
  has_team_textures_ = value;
}
inline void CMsgPaintKit_Definition::set_has_team_textures(bool value) {
  _internal_set_has_team_textures(value);
  // @@protoc_insertion_point(field_set:CMsgPaintKit_Definition.has_team_textures)
}

// repeated .CMsgPaintKit_Definition.Item item = 5;
inline int CMsgPaintKit_Definition::_internal_item_size() const {
  return item_.size();
}
inline int CMsgPaintKit_Definition::item_size() const {
  return _internal_item_size();
}
inline void CMsgPaintKit_Definition::clear_item() {
  item_.Clear();
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.item)
  return item_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPaintKit_Definition_Item >*
CMsgPaintKit_Definition::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:CMsgPaintKit_Definition.item)
  return &item_;
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::_internal_item(int index) const {
  return item_.Get(index);
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::item(int index) const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.item)
  return _internal_item(index);
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::_internal_add_item() {
  return item_.Add();
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::add_item() {
  // @@protoc_insertion_point(field_add:CMsgPaintKit_Definition.item)
  return _internal_add_item();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPaintKit_Definition_Item >&
CMsgPaintKit_Definition::item() const {
  // @@protoc_insertion_point(field_list:CMsgPaintKit_Definition.item)
  return item_;
}

// optional .CMsgPaintKit_Definition.Item paintkit_tool = 6;
inline bool CMsgPaintKit_Definition::_internal_has_paintkit_tool() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || paintkit_tool_ != nullptr);
  return value;
}
inline bool CMsgPaintKit_Definition::has_paintkit_tool() const {
  return _internal_has_paintkit_tool();
}
inline void CMsgPaintKit_Definition::clear_paintkit_tool() {
  if (paintkit_tool_ != nullptr) paintkit_tool_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::_internal_paintkit_tool() const {
  const ::CMsgPaintKit_Definition_Item* p = paintkit_tool_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgPaintKit_Definition_Item&>(
      ::_CMsgPaintKit_Definition_Item_default_instance_);
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::paintkit_tool() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.paintkit_tool)
  return _internal_paintkit_tool();
}
inline void CMsgPaintKit_Definition::unsafe_arena_set_allocated_paintkit_tool(
    ::CMsgPaintKit_Definition_Item* paintkit_tool) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(paintkit_tool_);
  }
  paintkit_tool_ = paintkit_tool;
  if (paintkit_tool) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPaintKit_Definition.paintkit_tool)
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::release_paintkit_tool() {
  _has_bits_[0] &= ~0x00000008u;
  ::CMsgPaintKit_Definition_Item* temp = paintkit_tool_;
  paintkit_tool_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::unsafe_arena_release_paintkit_tool() {
  // @@protoc_insertion_point(field_release:CMsgPaintKit_Definition.paintkit_tool)
  _has_bits_[0] &= ~0x00000008u;
  ::CMsgPaintKit_Definition_Item* temp = paintkit_tool_;
  paintkit_tool_ = nullptr;
  return temp;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::_internal_mutable_paintkit_tool() {
  _has_bits_[0] |= 0x00000008u;
  if (paintkit_tool_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgPaintKit_Definition_Item>(GetArenaForAllocation());
    paintkit_tool_ = p;
  }
  return paintkit_tool_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::mutable_paintkit_tool() {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.paintkit_tool)
  return _internal_mutable_paintkit_tool();
}
inline void CMsgPaintKit_Definition::set_allocated_paintkit_tool(::CMsgPaintKit_Definition_Item* paintkit_tool) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete paintkit_tool_;
  }
  if (paintkit_tool) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgPaintKit_Definition_Item>::GetOwningArena(paintkit_tool);
    if (message_arena != submessage_arena) {
      paintkit_tool = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, paintkit_tool, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  paintkit_tool_ = paintkit_tool;
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Definition.paintkit_tool)
}

// optional .CMsgPaintKit_Definition.Item flamethrower = 7;
inline bool CMsgPaintKit_Definition::_internal_has_flamethrower() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || flamethrower_ != nullptr);
  return value;
}
inline bool CMsgPaintKit_Definition::has_flamethrower() const {
  return _internal_has_flamethrower();
}
inline void CMsgPaintKit_Definition::clear_flamethrower() {
  if (flamethrower_ != nullptr) flamethrower_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::_internal_flamethrower() const {
  const ::CMsgPaintKit_Definition_Item* p = flamethrower_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgPaintKit_Definition_Item&>(
      ::_CMsgPaintKit_Definition_Item_default_instance_);
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::flamethrower() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.flamethrower)
  return _internal_flamethrower();
}
inline void CMsgPaintKit_Definition::unsafe_arena_set_allocated_flamethrower(
    ::CMsgPaintKit_Definition_Item* flamethrower) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(flamethrower_);
  }
  flamethrower_ = flamethrower;
  if (flamethrower) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPaintKit_Definition.flamethrower)
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::release_flamethrower() {
  _has_bits_[0] &= ~0x00000010u;
  ::CMsgPaintKit_Definition_Item* temp = flamethrower_;
  flamethrower_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::unsafe_arena_release_flamethrower() {
  // @@protoc_insertion_point(field_release:CMsgPaintKit_Definition.flamethrower)
  _has_bits_[0] &= ~0x00000010u;
  ::CMsgPaintKit_Definition_Item* temp = flamethrower_;
  flamethrower_ = nullptr;
  return temp;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::_internal_mutable_flamethrower() {
  _has_bits_[0] |= 0x00000010u;
  if (flamethrower_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgPaintKit_Definition_Item>(GetArenaForAllocation());
    flamethrower_ = p;
  }
  return flamethrower_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::mutable_flamethrower() {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.flamethrower)
  return _internal_mutable_flamethrower();
}
inline void CMsgPaintKit_Definition::set_allocated_flamethrower(::CMsgPaintKit_Definition_Item* flamethrower) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete flamethrower_;
  }
  if (flamethrower) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgPaintKit_Definition_Item>::GetOwningArena(flamethrower);
    if (message_arena != submessage_arena) {
      flamethrower = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, flamethrower, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  flamethrower_ = flamethrower;
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Definition.flamethrower)
}

// optional .CMsgPaintKit_Definition.Item grenadelauncher = 8;
inline bool CMsgPaintKit_Definition::_internal_has_grenadelauncher() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || grenadelauncher_ != nullptr);
  return value;
}
inline bool CMsgPaintKit_Definition::has_grenadelauncher() const {
  return _internal_has_grenadelauncher();
}
inline void CMsgPaintKit_Definition::clear_grenadelauncher() {
  if (grenadelauncher_ != nullptr) grenadelauncher_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::_internal_grenadelauncher() const {
  const ::CMsgPaintKit_Definition_Item* p = grenadelauncher_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgPaintKit_Definition_Item&>(
      ::_CMsgPaintKit_Definition_Item_default_instance_);
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::grenadelauncher() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.grenadelauncher)
  return _internal_grenadelauncher();
}
inline void CMsgPaintKit_Definition::unsafe_arena_set_allocated_grenadelauncher(
    ::CMsgPaintKit_Definition_Item* grenadelauncher) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(grenadelauncher_);
  }
  grenadelauncher_ = grenadelauncher;
  if (grenadelauncher) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPaintKit_Definition.grenadelauncher)
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::release_grenadelauncher() {
  _has_bits_[0] &= ~0x00000020u;
  ::CMsgPaintKit_Definition_Item* temp = grenadelauncher_;
  grenadelauncher_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::unsafe_arena_release_grenadelauncher() {
  // @@protoc_insertion_point(field_release:CMsgPaintKit_Definition.grenadelauncher)
  _has_bits_[0] &= ~0x00000020u;
  ::CMsgPaintKit_Definition_Item* temp = grenadelauncher_;
  grenadelauncher_ = nullptr;
  return temp;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::_internal_mutable_grenadelauncher() {
  _has_bits_[0] |= 0x00000020u;
  if (grenadelauncher_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgPaintKit_Definition_Item>(GetArenaForAllocation());
    grenadelauncher_ = p;
  }
  return grenadelauncher_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::mutable_grenadelauncher() {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.grenadelauncher)
  return _internal_mutable_grenadelauncher();
}
inline void CMsgPaintKit_Definition::set_allocated_grenadelauncher(::CMsgPaintKit_Definition_Item* grenadelauncher) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete grenadelauncher_;
  }
  if (grenadelauncher) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgPaintKit_Definition_Item>::GetOwningArena(grenadelauncher);
    if (message_arena != submessage_arena) {
      grenadelauncher = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, grenadelauncher, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  grenadelauncher_ = grenadelauncher;
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Definition.grenadelauncher)
}

// optional .CMsgPaintKit_Definition.Item knife = 9;
inline bool CMsgPaintKit_Definition::_internal_has_knife() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || knife_ != nullptr);
  return value;
}
inline bool CMsgPaintKit_Definition::has_knife() const {
  return _internal_has_knife();
}
inline void CMsgPaintKit_Definition::clear_knife() {
  if (knife_ != nullptr) knife_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::_internal_knife() const {
  const ::CMsgPaintKit_Definition_Item* p = knife_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgPaintKit_Definition_Item&>(
      ::_CMsgPaintKit_Definition_Item_default_instance_);
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::knife() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.knife)
  return _internal_knife();
}
inline void CMsgPaintKit_Definition::unsafe_arena_set_allocated_knife(
    ::CMsgPaintKit_Definition_Item* knife) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(knife_);
  }
  knife_ = knife;
  if (knife) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPaintKit_Definition.knife)
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::release_knife() {
  _has_bits_[0] &= ~0x00000040u;
  ::CMsgPaintKit_Definition_Item* temp = knife_;
  knife_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::unsafe_arena_release_knife() {
  // @@protoc_insertion_point(field_release:CMsgPaintKit_Definition.knife)
  _has_bits_[0] &= ~0x00000040u;
  ::CMsgPaintKit_Definition_Item* temp = knife_;
  knife_ = nullptr;
  return temp;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::_internal_mutable_knife() {
  _has_bits_[0] |= 0x00000040u;
  if (knife_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgPaintKit_Definition_Item>(GetArenaForAllocation());
    knife_ = p;
  }
  return knife_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::mutable_knife() {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.knife)
  return _internal_mutable_knife();
}
inline void CMsgPaintKit_Definition::set_allocated_knife(::CMsgPaintKit_Definition_Item* knife) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete knife_;
  }
  if (knife) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgPaintKit_Definition_Item>::GetOwningArena(knife);
    if (message_arena != submessage_arena) {
      knife = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, knife, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  knife_ = knife;
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Definition.knife)
}

// optional .CMsgPaintKit_Definition.Item medigun = 10;
inline bool CMsgPaintKit_Definition::_internal_has_medigun() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || medigun_ != nullptr);
  return value;
}
inline bool CMsgPaintKit_Definition::has_medigun() const {
  return _internal_has_medigun();
}
inline void CMsgPaintKit_Definition::clear_medigun() {
  if (medigun_ != nullptr) medigun_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::_internal_medigun() const {
  const ::CMsgPaintKit_Definition_Item* p = medigun_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgPaintKit_Definition_Item&>(
      ::_CMsgPaintKit_Definition_Item_default_instance_);
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::medigun() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.medigun)
  return _internal_medigun();
}
inline void CMsgPaintKit_Definition::unsafe_arena_set_allocated_medigun(
    ::CMsgPaintKit_Definition_Item* medigun) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(medigun_);
  }
  medigun_ = medigun;
  if (medigun) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPaintKit_Definition.medigun)
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::release_medigun() {
  _has_bits_[0] &= ~0x00000080u;
  ::CMsgPaintKit_Definition_Item* temp = medigun_;
  medigun_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::unsafe_arena_release_medigun() {
  // @@protoc_insertion_point(field_release:CMsgPaintKit_Definition.medigun)
  _has_bits_[0] &= ~0x00000080u;
  ::CMsgPaintKit_Definition_Item* temp = medigun_;
  medigun_ = nullptr;
  return temp;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::_internal_mutable_medigun() {
  _has_bits_[0] |= 0x00000080u;
  if (medigun_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgPaintKit_Definition_Item>(GetArenaForAllocation());
    medigun_ = p;
  }
  return medigun_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::mutable_medigun() {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.medigun)
  return _internal_mutable_medigun();
}
inline void CMsgPaintKit_Definition::set_allocated_medigun(::CMsgPaintKit_Definition_Item* medigun) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete medigun_;
  }
  if (medigun) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgPaintKit_Definition_Item>::GetOwningArena(medigun);
    if (message_arena != submessage_arena) {
      medigun = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, medigun, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  medigun_ = medigun;
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Definition.medigun)
}

// optional .CMsgPaintKit_Definition.Item minigun = 11;
inline bool CMsgPaintKit_Definition::_internal_has_minigun() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || minigun_ != nullptr);
  return value;
}
inline bool CMsgPaintKit_Definition::has_minigun() const {
  return _internal_has_minigun();
}
inline void CMsgPaintKit_Definition::clear_minigun() {
  if (minigun_ != nullptr) minigun_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::_internal_minigun() const {
  const ::CMsgPaintKit_Definition_Item* p = minigun_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgPaintKit_Definition_Item&>(
      ::_CMsgPaintKit_Definition_Item_default_instance_);
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::minigun() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.minigun)
  return _internal_minigun();
}
inline void CMsgPaintKit_Definition::unsafe_arena_set_allocated_minigun(
    ::CMsgPaintKit_Definition_Item* minigun) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(minigun_);
  }
  minigun_ = minigun;
  if (minigun) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPaintKit_Definition.minigun)
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::release_minigun() {
  _has_bits_[0] &= ~0x00000100u;
  ::CMsgPaintKit_Definition_Item* temp = minigun_;
  minigun_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::unsafe_arena_release_minigun() {
  // @@protoc_insertion_point(field_release:CMsgPaintKit_Definition.minigun)
  _has_bits_[0] &= ~0x00000100u;
  ::CMsgPaintKit_Definition_Item* temp = minigun_;
  minigun_ = nullptr;
  return temp;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::_internal_mutable_minigun() {
  _has_bits_[0] |= 0x00000100u;
  if (minigun_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgPaintKit_Definition_Item>(GetArenaForAllocation());
    minigun_ = p;
  }
  return minigun_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::mutable_minigun() {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.minigun)
  return _internal_mutable_minigun();
}
inline void CMsgPaintKit_Definition::set_allocated_minigun(::CMsgPaintKit_Definition_Item* minigun) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete minigun_;
  }
  if (minigun) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgPaintKit_Definition_Item>::GetOwningArena(minigun);
    if (message_arena != submessage_arena) {
      minigun = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, minigun, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  minigun_ = minigun;
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Definition.minigun)
}

// optional .CMsgPaintKit_Definition.Item pistol = 12;
inline bool CMsgPaintKit_Definition::_internal_has_pistol() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || pistol_ != nullptr);
  return value;
}
inline bool CMsgPaintKit_Definition::has_pistol() const {
  return _internal_has_pistol();
}
inline void CMsgPaintKit_Definition::clear_pistol() {
  if (pistol_ != nullptr) pistol_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::_internal_pistol() const {
  const ::CMsgPaintKit_Definition_Item* p = pistol_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgPaintKit_Definition_Item&>(
      ::_CMsgPaintKit_Definition_Item_default_instance_);
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::pistol() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.pistol)
  return _internal_pistol();
}
inline void CMsgPaintKit_Definition::unsafe_arena_set_allocated_pistol(
    ::CMsgPaintKit_Definition_Item* pistol) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pistol_);
  }
  pistol_ = pistol;
  if (pistol) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPaintKit_Definition.pistol)
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::release_pistol() {
  _has_bits_[0] &= ~0x00000200u;
  ::CMsgPaintKit_Definition_Item* temp = pistol_;
  pistol_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::unsafe_arena_release_pistol() {
  // @@protoc_insertion_point(field_release:CMsgPaintKit_Definition.pistol)
  _has_bits_[0] &= ~0x00000200u;
  ::CMsgPaintKit_Definition_Item* temp = pistol_;
  pistol_ = nullptr;
  return temp;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::_internal_mutable_pistol() {
  _has_bits_[0] |= 0x00000200u;
  if (pistol_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgPaintKit_Definition_Item>(GetArenaForAllocation());
    pistol_ = p;
  }
  return pistol_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::mutable_pistol() {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.pistol)
  return _internal_mutable_pistol();
}
inline void CMsgPaintKit_Definition::set_allocated_pistol(::CMsgPaintKit_Definition_Item* pistol) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete pistol_;
  }
  if (pistol) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgPaintKit_Definition_Item>::GetOwningArena(pistol);
    if (message_arena != submessage_arena) {
      pistol = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pistol, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  pistol_ = pistol;
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Definition.pistol)
}

// optional .CMsgPaintKit_Definition.Item revolver = 13;
inline bool CMsgPaintKit_Definition::_internal_has_revolver() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || revolver_ != nullptr);
  return value;
}
inline bool CMsgPaintKit_Definition::has_revolver() const {
  return _internal_has_revolver();
}
inline void CMsgPaintKit_Definition::clear_revolver() {
  if (revolver_ != nullptr) revolver_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::_internal_revolver() const {
  const ::CMsgPaintKit_Definition_Item* p = revolver_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgPaintKit_Definition_Item&>(
      ::_CMsgPaintKit_Definition_Item_default_instance_);
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::revolver() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.revolver)
  return _internal_revolver();
}
inline void CMsgPaintKit_Definition::unsafe_arena_set_allocated_revolver(
    ::CMsgPaintKit_Definition_Item* revolver) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(revolver_);
  }
  revolver_ = revolver;
  if (revolver) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPaintKit_Definition.revolver)
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::release_revolver() {
  _has_bits_[0] &= ~0x00000400u;
  ::CMsgPaintKit_Definition_Item* temp = revolver_;
  revolver_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::unsafe_arena_release_revolver() {
  // @@protoc_insertion_point(field_release:CMsgPaintKit_Definition.revolver)
  _has_bits_[0] &= ~0x00000400u;
  ::CMsgPaintKit_Definition_Item* temp = revolver_;
  revolver_ = nullptr;
  return temp;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::_internal_mutable_revolver() {
  _has_bits_[0] |= 0x00000400u;
  if (revolver_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgPaintKit_Definition_Item>(GetArenaForAllocation());
    revolver_ = p;
  }
  return revolver_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::mutable_revolver() {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.revolver)
  return _internal_mutable_revolver();
}
inline void CMsgPaintKit_Definition::set_allocated_revolver(::CMsgPaintKit_Definition_Item* revolver) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete revolver_;
  }
  if (revolver) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgPaintKit_Definition_Item>::GetOwningArena(revolver);
    if (message_arena != submessage_arena) {
      revolver = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, revolver, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  revolver_ = revolver;
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Definition.revolver)
}

// optional .CMsgPaintKit_Definition.Item rocketlauncher = 14;
inline bool CMsgPaintKit_Definition::_internal_has_rocketlauncher() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || rocketlauncher_ != nullptr);
  return value;
}
inline bool CMsgPaintKit_Definition::has_rocketlauncher() const {
  return _internal_has_rocketlauncher();
}
inline void CMsgPaintKit_Definition::clear_rocketlauncher() {
  if (rocketlauncher_ != nullptr) rocketlauncher_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::_internal_rocketlauncher() const {
  const ::CMsgPaintKit_Definition_Item* p = rocketlauncher_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgPaintKit_Definition_Item&>(
      ::_CMsgPaintKit_Definition_Item_default_instance_);
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::rocketlauncher() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.rocketlauncher)
  return _internal_rocketlauncher();
}
inline void CMsgPaintKit_Definition::unsafe_arena_set_allocated_rocketlauncher(
    ::CMsgPaintKit_Definition_Item* rocketlauncher) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rocketlauncher_);
  }
  rocketlauncher_ = rocketlauncher;
  if (rocketlauncher) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPaintKit_Definition.rocketlauncher)
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::release_rocketlauncher() {
  _has_bits_[0] &= ~0x00000800u;
  ::CMsgPaintKit_Definition_Item* temp = rocketlauncher_;
  rocketlauncher_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::unsafe_arena_release_rocketlauncher() {
  // @@protoc_insertion_point(field_release:CMsgPaintKit_Definition.rocketlauncher)
  _has_bits_[0] &= ~0x00000800u;
  ::CMsgPaintKit_Definition_Item* temp = rocketlauncher_;
  rocketlauncher_ = nullptr;
  return temp;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::_internal_mutable_rocketlauncher() {
  _has_bits_[0] |= 0x00000800u;
  if (rocketlauncher_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgPaintKit_Definition_Item>(GetArenaForAllocation());
    rocketlauncher_ = p;
  }
  return rocketlauncher_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::mutable_rocketlauncher() {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.rocketlauncher)
  return _internal_mutable_rocketlauncher();
}
inline void CMsgPaintKit_Definition::set_allocated_rocketlauncher(::CMsgPaintKit_Definition_Item* rocketlauncher) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete rocketlauncher_;
  }
  if (rocketlauncher) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgPaintKit_Definition_Item>::GetOwningArena(rocketlauncher);
    if (message_arena != submessage_arena) {
      rocketlauncher = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rocketlauncher, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  rocketlauncher_ = rocketlauncher;
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Definition.rocketlauncher)
}

// optional .CMsgPaintKit_Definition.Item scattergun = 15;
inline bool CMsgPaintKit_Definition::_internal_has_scattergun() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || scattergun_ != nullptr);
  return value;
}
inline bool CMsgPaintKit_Definition::has_scattergun() const {
  return _internal_has_scattergun();
}
inline void CMsgPaintKit_Definition::clear_scattergun() {
  if (scattergun_ != nullptr) scattergun_->Clear();
  _has_bits_[0] &= ~0x00001000u;
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::_internal_scattergun() const {
  const ::CMsgPaintKit_Definition_Item* p = scattergun_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgPaintKit_Definition_Item&>(
      ::_CMsgPaintKit_Definition_Item_default_instance_);
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::scattergun() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.scattergun)
  return _internal_scattergun();
}
inline void CMsgPaintKit_Definition::unsafe_arena_set_allocated_scattergun(
    ::CMsgPaintKit_Definition_Item* scattergun) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scattergun_);
  }
  scattergun_ = scattergun;
  if (scattergun) {
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPaintKit_Definition.scattergun)
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::release_scattergun() {
  _has_bits_[0] &= ~0x00001000u;
  ::CMsgPaintKit_Definition_Item* temp = scattergun_;
  scattergun_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::unsafe_arena_release_scattergun() {
  // @@protoc_insertion_point(field_release:CMsgPaintKit_Definition.scattergun)
  _has_bits_[0] &= ~0x00001000u;
  ::CMsgPaintKit_Definition_Item* temp = scattergun_;
  scattergun_ = nullptr;
  return temp;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::_internal_mutable_scattergun() {
  _has_bits_[0] |= 0x00001000u;
  if (scattergun_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgPaintKit_Definition_Item>(GetArenaForAllocation());
    scattergun_ = p;
  }
  return scattergun_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::mutable_scattergun() {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.scattergun)
  return _internal_mutable_scattergun();
}
inline void CMsgPaintKit_Definition::set_allocated_scattergun(::CMsgPaintKit_Definition_Item* scattergun) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete scattergun_;
  }
  if (scattergun) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgPaintKit_Definition_Item>::GetOwningArena(scattergun);
    if (message_arena != submessage_arena) {
      scattergun = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scattergun, submessage_arena);
    }
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  scattergun_ = scattergun;
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Definition.scattergun)
}

// optional .CMsgPaintKit_Definition.Item shotgun = 16;
inline bool CMsgPaintKit_Definition::_internal_has_shotgun() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  PROTOBUF_ASSUME(!value || shotgun_ != nullptr);
  return value;
}
inline bool CMsgPaintKit_Definition::has_shotgun() const {
  return _internal_has_shotgun();
}
inline void CMsgPaintKit_Definition::clear_shotgun() {
  if (shotgun_ != nullptr) shotgun_->Clear();
  _has_bits_[0] &= ~0x00002000u;
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::_internal_shotgun() const {
  const ::CMsgPaintKit_Definition_Item* p = shotgun_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgPaintKit_Definition_Item&>(
      ::_CMsgPaintKit_Definition_Item_default_instance_);
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::shotgun() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.shotgun)
  return _internal_shotgun();
}
inline void CMsgPaintKit_Definition::unsafe_arena_set_allocated_shotgun(
    ::CMsgPaintKit_Definition_Item* shotgun) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shotgun_);
  }
  shotgun_ = shotgun;
  if (shotgun) {
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPaintKit_Definition.shotgun)
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::release_shotgun() {
  _has_bits_[0] &= ~0x00002000u;
  ::CMsgPaintKit_Definition_Item* temp = shotgun_;
  shotgun_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::unsafe_arena_release_shotgun() {
  // @@protoc_insertion_point(field_release:CMsgPaintKit_Definition.shotgun)
  _has_bits_[0] &= ~0x00002000u;
  ::CMsgPaintKit_Definition_Item* temp = shotgun_;
  shotgun_ = nullptr;
  return temp;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::_internal_mutable_shotgun() {
  _has_bits_[0] |= 0x00002000u;
  if (shotgun_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgPaintKit_Definition_Item>(GetArenaForAllocation());
    shotgun_ = p;
  }
  return shotgun_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::mutable_shotgun() {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.shotgun)
  return _internal_mutable_shotgun();
}
inline void CMsgPaintKit_Definition::set_allocated_shotgun(::CMsgPaintKit_Definition_Item* shotgun) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete shotgun_;
  }
  if (shotgun) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgPaintKit_Definition_Item>::GetOwningArena(shotgun);
    if (message_arena != submessage_arena) {
      shotgun = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shotgun, submessage_arena);
    }
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  shotgun_ = shotgun;
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Definition.shotgun)
}

// optional .CMsgPaintKit_Definition.Item smg = 17;
inline bool CMsgPaintKit_Definition::_internal_has_smg() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  PROTOBUF_ASSUME(!value || smg_ != nullptr);
  return value;
}
inline bool CMsgPaintKit_Definition::has_smg() const {
  return _internal_has_smg();
}
inline void CMsgPaintKit_Definition::clear_smg() {
  if (smg_ != nullptr) smg_->Clear();
  _has_bits_[0] &= ~0x00004000u;
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::_internal_smg() const {
  const ::CMsgPaintKit_Definition_Item* p = smg_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgPaintKit_Definition_Item&>(
      ::_CMsgPaintKit_Definition_Item_default_instance_);
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::smg() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.smg)
  return _internal_smg();
}
inline void CMsgPaintKit_Definition::unsafe_arena_set_allocated_smg(
    ::CMsgPaintKit_Definition_Item* smg) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(smg_);
  }
  smg_ = smg;
  if (smg) {
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPaintKit_Definition.smg)
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::release_smg() {
  _has_bits_[0] &= ~0x00004000u;
  ::CMsgPaintKit_Definition_Item* temp = smg_;
  smg_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::unsafe_arena_release_smg() {
  // @@protoc_insertion_point(field_release:CMsgPaintKit_Definition.smg)
  _has_bits_[0] &= ~0x00004000u;
  ::CMsgPaintKit_Definition_Item* temp = smg_;
  smg_ = nullptr;
  return temp;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::_internal_mutable_smg() {
  _has_bits_[0] |= 0x00004000u;
  if (smg_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgPaintKit_Definition_Item>(GetArenaForAllocation());
    smg_ = p;
  }
  return smg_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::mutable_smg() {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.smg)
  return _internal_mutable_smg();
}
inline void CMsgPaintKit_Definition::set_allocated_smg(::CMsgPaintKit_Definition_Item* smg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete smg_;
  }
  if (smg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgPaintKit_Definition_Item>::GetOwningArena(smg);
    if (message_arena != submessage_arena) {
      smg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, smg, submessage_arena);
    }
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  smg_ = smg;
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Definition.smg)
}

// optional .CMsgPaintKit_Definition.Item sniperrifle = 18;
inline bool CMsgPaintKit_Definition::_internal_has_sniperrifle() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  PROTOBUF_ASSUME(!value || sniperrifle_ != nullptr);
  return value;
}
inline bool CMsgPaintKit_Definition::has_sniperrifle() const {
  return _internal_has_sniperrifle();
}
inline void CMsgPaintKit_Definition::clear_sniperrifle() {
  if (sniperrifle_ != nullptr) sniperrifle_->Clear();
  _has_bits_[0] &= ~0x00008000u;
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::_internal_sniperrifle() const {
  const ::CMsgPaintKit_Definition_Item* p = sniperrifle_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgPaintKit_Definition_Item&>(
      ::_CMsgPaintKit_Definition_Item_default_instance_);
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::sniperrifle() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.sniperrifle)
  return _internal_sniperrifle();
}
inline void CMsgPaintKit_Definition::unsafe_arena_set_allocated_sniperrifle(
    ::CMsgPaintKit_Definition_Item* sniperrifle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sniperrifle_);
  }
  sniperrifle_ = sniperrifle;
  if (sniperrifle) {
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPaintKit_Definition.sniperrifle)
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::release_sniperrifle() {
  _has_bits_[0] &= ~0x00008000u;
  ::CMsgPaintKit_Definition_Item* temp = sniperrifle_;
  sniperrifle_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::unsafe_arena_release_sniperrifle() {
  // @@protoc_insertion_point(field_release:CMsgPaintKit_Definition.sniperrifle)
  _has_bits_[0] &= ~0x00008000u;
  ::CMsgPaintKit_Definition_Item* temp = sniperrifle_;
  sniperrifle_ = nullptr;
  return temp;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::_internal_mutable_sniperrifle() {
  _has_bits_[0] |= 0x00008000u;
  if (sniperrifle_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgPaintKit_Definition_Item>(GetArenaForAllocation());
    sniperrifle_ = p;
  }
  return sniperrifle_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::mutable_sniperrifle() {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.sniperrifle)
  return _internal_mutable_sniperrifle();
}
inline void CMsgPaintKit_Definition::set_allocated_sniperrifle(::CMsgPaintKit_Definition_Item* sniperrifle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete sniperrifle_;
  }
  if (sniperrifle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgPaintKit_Definition_Item>::GetOwningArena(sniperrifle);
    if (message_arena != submessage_arena) {
      sniperrifle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sniperrifle, submessage_arena);
    }
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  sniperrifle_ = sniperrifle;
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Definition.sniperrifle)
}

// optional .CMsgPaintKit_Definition.Item stickybomb_launcher = 19;
inline bool CMsgPaintKit_Definition::_internal_has_stickybomb_launcher() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  PROTOBUF_ASSUME(!value || stickybomb_launcher_ != nullptr);
  return value;
}
inline bool CMsgPaintKit_Definition::has_stickybomb_launcher() const {
  return _internal_has_stickybomb_launcher();
}
inline void CMsgPaintKit_Definition::clear_stickybomb_launcher() {
  if (stickybomb_launcher_ != nullptr) stickybomb_launcher_->Clear();
  _has_bits_[0] &= ~0x00010000u;
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::_internal_stickybomb_launcher() const {
  const ::CMsgPaintKit_Definition_Item* p = stickybomb_launcher_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgPaintKit_Definition_Item&>(
      ::_CMsgPaintKit_Definition_Item_default_instance_);
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::stickybomb_launcher() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.stickybomb_launcher)
  return _internal_stickybomb_launcher();
}
inline void CMsgPaintKit_Definition::unsafe_arena_set_allocated_stickybomb_launcher(
    ::CMsgPaintKit_Definition_Item* stickybomb_launcher) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stickybomb_launcher_);
  }
  stickybomb_launcher_ = stickybomb_launcher;
  if (stickybomb_launcher) {
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPaintKit_Definition.stickybomb_launcher)
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::release_stickybomb_launcher() {
  _has_bits_[0] &= ~0x00010000u;
  ::CMsgPaintKit_Definition_Item* temp = stickybomb_launcher_;
  stickybomb_launcher_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::unsafe_arena_release_stickybomb_launcher() {
  // @@protoc_insertion_point(field_release:CMsgPaintKit_Definition.stickybomb_launcher)
  _has_bits_[0] &= ~0x00010000u;
  ::CMsgPaintKit_Definition_Item* temp = stickybomb_launcher_;
  stickybomb_launcher_ = nullptr;
  return temp;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::_internal_mutable_stickybomb_launcher() {
  _has_bits_[0] |= 0x00010000u;
  if (stickybomb_launcher_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgPaintKit_Definition_Item>(GetArenaForAllocation());
    stickybomb_launcher_ = p;
  }
  return stickybomb_launcher_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::mutable_stickybomb_launcher() {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.stickybomb_launcher)
  return _internal_mutable_stickybomb_launcher();
}
inline void CMsgPaintKit_Definition::set_allocated_stickybomb_launcher(::CMsgPaintKit_Definition_Item* stickybomb_launcher) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete stickybomb_launcher_;
  }
  if (stickybomb_launcher) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgPaintKit_Definition_Item>::GetOwningArena(stickybomb_launcher);
    if (message_arena != submessage_arena) {
      stickybomb_launcher = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stickybomb_launcher, submessage_arena);
    }
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  stickybomb_launcher_ = stickybomb_launcher;
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Definition.stickybomb_launcher)
}

// optional .CMsgPaintKit_Definition.Item ubersaw = 20;
inline bool CMsgPaintKit_Definition::_internal_has_ubersaw() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  PROTOBUF_ASSUME(!value || ubersaw_ != nullptr);
  return value;
}
inline bool CMsgPaintKit_Definition::has_ubersaw() const {
  return _internal_has_ubersaw();
}
inline void CMsgPaintKit_Definition::clear_ubersaw() {
  if (ubersaw_ != nullptr) ubersaw_->Clear();
  _has_bits_[0] &= ~0x00020000u;
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::_internal_ubersaw() const {
  const ::CMsgPaintKit_Definition_Item* p = ubersaw_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgPaintKit_Definition_Item&>(
      ::_CMsgPaintKit_Definition_Item_default_instance_);
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::ubersaw() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.ubersaw)
  return _internal_ubersaw();
}
inline void CMsgPaintKit_Definition::unsafe_arena_set_allocated_ubersaw(
    ::CMsgPaintKit_Definition_Item* ubersaw) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ubersaw_);
  }
  ubersaw_ = ubersaw;
  if (ubersaw) {
    _has_bits_[0] |= 0x00020000u;
  } else {
    _has_bits_[0] &= ~0x00020000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPaintKit_Definition.ubersaw)
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::release_ubersaw() {
  _has_bits_[0] &= ~0x00020000u;
  ::CMsgPaintKit_Definition_Item* temp = ubersaw_;
  ubersaw_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::unsafe_arena_release_ubersaw() {
  // @@protoc_insertion_point(field_release:CMsgPaintKit_Definition.ubersaw)
  _has_bits_[0] &= ~0x00020000u;
  ::CMsgPaintKit_Definition_Item* temp = ubersaw_;
  ubersaw_ = nullptr;
  return temp;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::_internal_mutable_ubersaw() {
  _has_bits_[0] |= 0x00020000u;
  if (ubersaw_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgPaintKit_Definition_Item>(GetArenaForAllocation());
    ubersaw_ = p;
  }
  return ubersaw_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::mutable_ubersaw() {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.ubersaw)
  return _internal_mutable_ubersaw();
}
inline void CMsgPaintKit_Definition::set_allocated_ubersaw(::CMsgPaintKit_Definition_Item* ubersaw) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete ubersaw_;
  }
  if (ubersaw) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgPaintKit_Definition_Item>::GetOwningArena(ubersaw);
    if (message_arena != submessage_arena) {
      ubersaw = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ubersaw, submessage_arena);
    }
    _has_bits_[0] |= 0x00020000u;
  } else {
    _has_bits_[0] &= ~0x00020000u;
  }
  ubersaw_ = ubersaw;
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Definition.ubersaw)
}

// optional .CMsgPaintKit_Definition.Item wrench = 21;
inline bool CMsgPaintKit_Definition::_internal_has_wrench() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  PROTOBUF_ASSUME(!value || wrench_ != nullptr);
  return value;
}
inline bool CMsgPaintKit_Definition::has_wrench() const {
  return _internal_has_wrench();
}
inline void CMsgPaintKit_Definition::clear_wrench() {
  if (wrench_ != nullptr) wrench_->Clear();
  _has_bits_[0] &= ~0x00040000u;
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::_internal_wrench() const {
  const ::CMsgPaintKit_Definition_Item* p = wrench_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgPaintKit_Definition_Item&>(
      ::_CMsgPaintKit_Definition_Item_default_instance_);
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::wrench() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.wrench)
  return _internal_wrench();
}
inline void CMsgPaintKit_Definition::unsafe_arena_set_allocated_wrench(
    ::CMsgPaintKit_Definition_Item* wrench) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(wrench_);
  }
  wrench_ = wrench;
  if (wrench) {
    _has_bits_[0] |= 0x00040000u;
  } else {
    _has_bits_[0] &= ~0x00040000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPaintKit_Definition.wrench)
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::release_wrench() {
  _has_bits_[0] &= ~0x00040000u;
  ::CMsgPaintKit_Definition_Item* temp = wrench_;
  wrench_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::unsafe_arena_release_wrench() {
  // @@protoc_insertion_point(field_release:CMsgPaintKit_Definition.wrench)
  _has_bits_[0] &= ~0x00040000u;
  ::CMsgPaintKit_Definition_Item* temp = wrench_;
  wrench_ = nullptr;
  return temp;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::_internal_mutable_wrench() {
  _has_bits_[0] |= 0x00040000u;
  if (wrench_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgPaintKit_Definition_Item>(GetArenaForAllocation());
    wrench_ = p;
  }
  return wrench_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::mutable_wrench() {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.wrench)
  return _internal_mutable_wrench();
}
inline void CMsgPaintKit_Definition::set_allocated_wrench(::CMsgPaintKit_Definition_Item* wrench) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete wrench_;
  }
  if (wrench) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgPaintKit_Definition_Item>::GetOwningArena(wrench);
    if (message_arena != submessage_arena) {
      wrench = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wrench, submessage_arena);
    }
    _has_bits_[0] |= 0x00040000u;
  } else {
    _has_bits_[0] &= ~0x00040000u;
  }
  wrench_ = wrench;
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Definition.wrench)
}

// optional .CMsgPaintKit_Definition.Item amputator = 22;
inline bool CMsgPaintKit_Definition::_internal_has_amputator() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  PROTOBUF_ASSUME(!value || amputator_ != nullptr);
  return value;
}
inline bool CMsgPaintKit_Definition::has_amputator() const {
  return _internal_has_amputator();
}
inline void CMsgPaintKit_Definition::clear_amputator() {
  if (amputator_ != nullptr) amputator_->Clear();
  _has_bits_[0] &= ~0x00080000u;
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::_internal_amputator() const {
  const ::CMsgPaintKit_Definition_Item* p = amputator_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgPaintKit_Definition_Item&>(
      ::_CMsgPaintKit_Definition_Item_default_instance_);
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::amputator() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.amputator)
  return _internal_amputator();
}
inline void CMsgPaintKit_Definition::unsafe_arena_set_allocated_amputator(
    ::CMsgPaintKit_Definition_Item* amputator) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(amputator_);
  }
  amputator_ = amputator;
  if (amputator) {
    _has_bits_[0] |= 0x00080000u;
  } else {
    _has_bits_[0] &= ~0x00080000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPaintKit_Definition.amputator)
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::release_amputator() {
  _has_bits_[0] &= ~0x00080000u;
  ::CMsgPaintKit_Definition_Item* temp = amputator_;
  amputator_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::unsafe_arena_release_amputator() {
  // @@protoc_insertion_point(field_release:CMsgPaintKit_Definition.amputator)
  _has_bits_[0] &= ~0x00080000u;
  ::CMsgPaintKit_Definition_Item* temp = amputator_;
  amputator_ = nullptr;
  return temp;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::_internal_mutable_amputator() {
  _has_bits_[0] |= 0x00080000u;
  if (amputator_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgPaintKit_Definition_Item>(GetArenaForAllocation());
    amputator_ = p;
  }
  return amputator_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::mutable_amputator() {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.amputator)
  return _internal_mutable_amputator();
}
inline void CMsgPaintKit_Definition::set_allocated_amputator(::CMsgPaintKit_Definition_Item* amputator) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete amputator_;
  }
  if (amputator) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgPaintKit_Definition_Item>::GetOwningArena(amputator);
    if (message_arena != submessage_arena) {
      amputator = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, amputator, submessage_arena);
    }
    _has_bits_[0] |= 0x00080000u;
  } else {
    _has_bits_[0] &= ~0x00080000u;
  }
  amputator_ = amputator;
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Definition.amputator)
}

// optional .CMsgPaintKit_Definition.Item atom_launcher = 23;
inline bool CMsgPaintKit_Definition::_internal_has_atom_launcher() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  PROTOBUF_ASSUME(!value || atom_launcher_ != nullptr);
  return value;
}
inline bool CMsgPaintKit_Definition::has_atom_launcher() const {
  return _internal_has_atom_launcher();
}
inline void CMsgPaintKit_Definition::clear_atom_launcher() {
  if (atom_launcher_ != nullptr) atom_launcher_->Clear();
  _has_bits_[0] &= ~0x00100000u;
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::_internal_atom_launcher() const {
  const ::CMsgPaintKit_Definition_Item* p = atom_launcher_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgPaintKit_Definition_Item&>(
      ::_CMsgPaintKit_Definition_Item_default_instance_);
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::atom_launcher() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.atom_launcher)
  return _internal_atom_launcher();
}
inline void CMsgPaintKit_Definition::unsafe_arena_set_allocated_atom_launcher(
    ::CMsgPaintKit_Definition_Item* atom_launcher) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(atom_launcher_);
  }
  atom_launcher_ = atom_launcher;
  if (atom_launcher) {
    _has_bits_[0] |= 0x00100000u;
  } else {
    _has_bits_[0] &= ~0x00100000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPaintKit_Definition.atom_launcher)
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::release_atom_launcher() {
  _has_bits_[0] &= ~0x00100000u;
  ::CMsgPaintKit_Definition_Item* temp = atom_launcher_;
  atom_launcher_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::unsafe_arena_release_atom_launcher() {
  // @@protoc_insertion_point(field_release:CMsgPaintKit_Definition.atom_launcher)
  _has_bits_[0] &= ~0x00100000u;
  ::CMsgPaintKit_Definition_Item* temp = atom_launcher_;
  atom_launcher_ = nullptr;
  return temp;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::_internal_mutable_atom_launcher() {
  _has_bits_[0] |= 0x00100000u;
  if (atom_launcher_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgPaintKit_Definition_Item>(GetArenaForAllocation());
    atom_launcher_ = p;
  }
  return atom_launcher_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::mutable_atom_launcher() {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.atom_launcher)
  return _internal_mutable_atom_launcher();
}
inline void CMsgPaintKit_Definition::set_allocated_atom_launcher(::CMsgPaintKit_Definition_Item* atom_launcher) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete atom_launcher_;
  }
  if (atom_launcher) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgPaintKit_Definition_Item>::GetOwningArena(atom_launcher);
    if (message_arena != submessage_arena) {
      atom_launcher = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, atom_launcher, submessage_arena);
    }
    _has_bits_[0] |= 0x00100000u;
  } else {
    _has_bits_[0] &= ~0x00100000u;
  }
  atom_launcher_ = atom_launcher;
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Definition.atom_launcher)
}

// optional .CMsgPaintKit_Definition.Item back_scratcher = 24;
inline bool CMsgPaintKit_Definition::_internal_has_back_scratcher() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  PROTOBUF_ASSUME(!value || back_scratcher_ != nullptr);
  return value;
}
inline bool CMsgPaintKit_Definition::has_back_scratcher() const {
  return _internal_has_back_scratcher();
}
inline void CMsgPaintKit_Definition::clear_back_scratcher() {
  if (back_scratcher_ != nullptr) back_scratcher_->Clear();
  _has_bits_[0] &= ~0x00200000u;
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::_internal_back_scratcher() const {
  const ::CMsgPaintKit_Definition_Item* p = back_scratcher_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgPaintKit_Definition_Item&>(
      ::_CMsgPaintKit_Definition_Item_default_instance_);
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::back_scratcher() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.back_scratcher)
  return _internal_back_scratcher();
}
inline void CMsgPaintKit_Definition::unsafe_arena_set_allocated_back_scratcher(
    ::CMsgPaintKit_Definition_Item* back_scratcher) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(back_scratcher_);
  }
  back_scratcher_ = back_scratcher;
  if (back_scratcher) {
    _has_bits_[0] |= 0x00200000u;
  } else {
    _has_bits_[0] &= ~0x00200000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPaintKit_Definition.back_scratcher)
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::release_back_scratcher() {
  _has_bits_[0] &= ~0x00200000u;
  ::CMsgPaintKit_Definition_Item* temp = back_scratcher_;
  back_scratcher_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::unsafe_arena_release_back_scratcher() {
  // @@protoc_insertion_point(field_release:CMsgPaintKit_Definition.back_scratcher)
  _has_bits_[0] &= ~0x00200000u;
  ::CMsgPaintKit_Definition_Item* temp = back_scratcher_;
  back_scratcher_ = nullptr;
  return temp;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::_internal_mutable_back_scratcher() {
  _has_bits_[0] |= 0x00200000u;
  if (back_scratcher_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgPaintKit_Definition_Item>(GetArenaForAllocation());
    back_scratcher_ = p;
  }
  return back_scratcher_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::mutable_back_scratcher() {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.back_scratcher)
  return _internal_mutable_back_scratcher();
}
inline void CMsgPaintKit_Definition::set_allocated_back_scratcher(::CMsgPaintKit_Definition_Item* back_scratcher) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete back_scratcher_;
  }
  if (back_scratcher) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgPaintKit_Definition_Item>::GetOwningArena(back_scratcher);
    if (message_arena != submessage_arena) {
      back_scratcher = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, back_scratcher, submessage_arena);
    }
    _has_bits_[0] |= 0x00200000u;
  } else {
    _has_bits_[0] &= ~0x00200000u;
  }
  back_scratcher_ = back_scratcher;
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Definition.back_scratcher)
}

// optional .CMsgPaintKit_Definition.Item battleaxe = 25;
inline bool CMsgPaintKit_Definition::_internal_has_battleaxe() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  PROTOBUF_ASSUME(!value || battleaxe_ != nullptr);
  return value;
}
inline bool CMsgPaintKit_Definition::has_battleaxe() const {
  return _internal_has_battleaxe();
}
inline void CMsgPaintKit_Definition::clear_battleaxe() {
  if (battleaxe_ != nullptr) battleaxe_->Clear();
  _has_bits_[0] &= ~0x00400000u;
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::_internal_battleaxe() const {
  const ::CMsgPaintKit_Definition_Item* p = battleaxe_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgPaintKit_Definition_Item&>(
      ::_CMsgPaintKit_Definition_Item_default_instance_);
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::battleaxe() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.battleaxe)
  return _internal_battleaxe();
}
inline void CMsgPaintKit_Definition::unsafe_arena_set_allocated_battleaxe(
    ::CMsgPaintKit_Definition_Item* battleaxe) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(battleaxe_);
  }
  battleaxe_ = battleaxe;
  if (battleaxe) {
    _has_bits_[0] |= 0x00400000u;
  } else {
    _has_bits_[0] &= ~0x00400000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPaintKit_Definition.battleaxe)
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::release_battleaxe() {
  _has_bits_[0] &= ~0x00400000u;
  ::CMsgPaintKit_Definition_Item* temp = battleaxe_;
  battleaxe_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::unsafe_arena_release_battleaxe() {
  // @@protoc_insertion_point(field_release:CMsgPaintKit_Definition.battleaxe)
  _has_bits_[0] &= ~0x00400000u;
  ::CMsgPaintKit_Definition_Item* temp = battleaxe_;
  battleaxe_ = nullptr;
  return temp;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::_internal_mutable_battleaxe() {
  _has_bits_[0] |= 0x00400000u;
  if (battleaxe_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgPaintKit_Definition_Item>(GetArenaForAllocation());
    battleaxe_ = p;
  }
  return battleaxe_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::mutable_battleaxe() {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.battleaxe)
  return _internal_mutable_battleaxe();
}
inline void CMsgPaintKit_Definition::set_allocated_battleaxe(::CMsgPaintKit_Definition_Item* battleaxe) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete battleaxe_;
  }
  if (battleaxe) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgPaintKit_Definition_Item>::GetOwningArena(battleaxe);
    if (message_arena != submessage_arena) {
      battleaxe = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, battleaxe, submessage_arena);
    }
    _has_bits_[0] |= 0x00400000u;
  } else {
    _has_bits_[0] &= ~0x00400000u;
  }
  battleaxe_ = battleaxe;
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Definition.battleaxe)
}

// optional .CMsgPaintKit_Definition.Item bazaar_sniper = 26;
inline bool CMsgPaintKit_Definition::_internal_has_bazaar_sniper() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  PROTOBUF_ASSUME(!value || bazaar_sniper_ != nullptr);
  return value;
}
inline bool CMsgPaintKit_Definition::has_bazaar_sniper() const {
  return _internal_has_bazaar_sniper();
}
inline void CMsgPaintKit_Definition::clear_bazaar_sniper() {
  if (bazaar_sniper_ != nullptr) bazaar_sniper_->Clear();
  _has_bits_[0] &= ~0x00800000u;
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::_internal_bazaar_sniper() const {
  const ::CMsgPaintKit_Definition_Item* p = bazaar_sniper_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgPaintKit_Definition_Item&>(
      ::_CMsgPaintKit_Definition_Item_default_instance_);
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::bazaar_sniper() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.bazaar_sniper)
  return _internal_bazaar_sniper();
}
inline void CMsgPaintKit_Definition::unsafe_arena_set_allocated_bazaar_sniper(
    ::CMsgPaintKit_Definition_Item* bazaar_sniper) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bazaar_sniper_);
  }
  bazaar_sniper_ = bazaar_sniper;
  if (bazaar_sniper) {
    _has_bits_[0] |= 0x00800000u;
  } else {
    _has_bits_[0] &= ~0x00800000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPaintKit_Definition.bazaar_sniper)
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::release_bazaar_sniper() {
  _has_bits_[0] &= ~0x00800000u;
  ::CMsgPaintKit_Definition_Item* temp = bazaar_sniper_;
  bazaar_sniper_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::unsafe_arena_release_bazaar_sniper() {
  // @@protoc_insertion_point(field_release:CMsgPaintKit_Definition.bazaar_sniper)
  _has_bits_[0] &= ~0x00800000u;
  ::CMsgPaintKit_Definition_Item* temp = bazaar_sniper_;
  bazaar_sniper_ = nullptr;
  return temp;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::_internal_mutable_bazaar_sniper() {
  _has_bits_[0] |= 0x00800000u;
  if (bazaar_sniper_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgPaintKit_Definition_Item>(GetArenaForAllocation());
    bazaar_sniper_ = p;
  }
  return bazaar_sniper_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::mutable_bazaar_sniper() {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.bazaar_sniper)
  return _internal_mutable_bazaar_sniper();
}
inline void CMsgPaintKit_Definition::set_allocated_bazaar_sniper(::CMsgPaintKit_Definition_Item* bazaar_sniper) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete bazaar_sniper_;
  }
  if (bazaar_sniper) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgPaintKit_Definition_Item>::GetOwningArena(bazaar_sniper);
    if (message_arena != submessage_arena) {
      bazaar_sniper = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bazaar_sniper, submessage_arena);
    }
    _has_bits_[0] |= 0x00800000u;
  } else {
    _has_bits_[0] &= ~0x00800000u;
  }
  bazaar_sniper_ = bazaar_sniper;
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Definition.bazaar_sniper)
}

// optional .CMsgPaintKit_Definition.Item blackbox = 27;
inline bool CMsgPaintKit_Definition::_internal_has_blackbox() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  PROTOBUF_ASSUME(!value || blackbox_ != nullptr);
  return value;
}
inline bool CMsgPaintKit_Definition::has_blackbox() const {
  return _internal_has_blackbox();
}
inline void CMsgPaintKit_Definition::clear_blackbox() {
  if (blackbox_ != nullptr) blackbox_->Clear();
  _has_bits_[0] &= ~0x01000000u;
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::_internal_blackbox() const {
  const ::CMsgPaintKit_Definition_Item* p = blackbox_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgPaintKit_Definition_Item&>(
      ::_CMsgPaintKit_Definition_Item_default_instance_);
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::blackbox() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.blackbox)
  return _internal_blackbox();
}
inline void CMsgPaintKit_Definition::unsafe_arena_set_allocated_blackbox(
    ::CMsgPaintKit_Definition_Item* blackbox) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(blackbox_);
  }
  blackbox_ = blackbox;
  if (blackbox) {
    _has_bits_[0] |= 0x01000000u;
  } else {
    _has_bits_[0] &= ~0x01000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPaintKit_Definition.blackbox)
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::release_blackbox() {
  _has_bits_[0] &= ~0x01000000u;
  ::CMsgPaintKit_Definition_Item* temp = blackbox_;
  blackbox_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::unsafe_arena_release_blackbox() {
  // @@protoc_insertion_point(field_release:CMsgPaintKit_Definition.blackbox)
  _has_bits_[0] &= ~0x01000000u;
  ::CMsgPaintKit_Definition_Item* temp = blackbox_;
  blackbox_ = nullptr;
  return temp;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::_internal_mutable_blackbox() {
  _has_bits_[0] |= 0x01000000u;
  if (blackbox_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgPaintKit_Definition_Item>(GetArenaForAllocation());
    blackbox_ = p;
  }
  return blackbox_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::mutable_blackbox() {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.blackbox)
  return _internal_mutable_blackbox();
}
inline void CMsgPaintKit_Definition::set_allocated_blackbox(::CMsgPaintKit_Definition_Item* blackbox) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete blackbox_;
  }
  if (blackbox) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgPaintKit_Definition_Item>::GetOwningArena(blackbox);
    if (message_arena != submessage_arena) {
      blackbox = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, blackbox, submessage_arena);
    }
    _has_bits_[0] |= 0x01000000u;
  } else {
    _has_bits_[0] &= ~0x01000000u;
  }
  blackbox_ = blackbox;
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Definition.blackbox)
}

// optional .CMsgPaintKit_Definition.Item claidheamohmor = 28;
inline bool CMsgPaintKit_Definition::_internal_has_claidheamohmor() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  PROTOBUF_ASSUME(!value || claidheamohmor_ != nullptr);
  return value;
}
inline bool CMsgPaintKit_Definition::has_claidheamohmor() const {
  return _internal_has_claidheamohmor();
}
inline void CMsgPaintKit_Definition::clear_claidheamohmor() {
  if (claidheamohmor_ != nullptr) claidheamohmor_->Clear();
  _has_bits_[0] &= ~0x02000000u;
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::_internal_claidheamohmor() const {
  const ::CMsgPaintKit_Definition_Item* p = claidheamohmor_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgPaintKit_Definition_Item&>(
      ::_CMsgPaintKit_Definition_Item_default_instance_);
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::claidheamohmor() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.claidheamohmor)
  return _internal_claidheamohmor();
}
inline void CMsgPaintKit_Definition::unsafe_arena_set_allocated_claidheamohmor(
    ::CMsgPaintKit_Definition_Item* claidheamohmor) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(claidheamohmor_);
  }
  claidheamohmor_ = claidheamohmor;
  if (claidheamohmor) {
    _has_bits_[0] |= 0x02000000u;
  } else {
    _has_bits_[0] &= ~0x02000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPaintKit_Definition.claidheamohmor)
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::release_claidheamohmor() {
  _has_bits_[0] &= ~0x02000000u;
  ::CMsgPaintKit_Definition_Item* temp = claidheamohmor_;
  claidheamohmor_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::unsafe_arena_release_claidheamohmor() {
  // @@protoc_insertion_point(field_release:CMsgPaintKit_Definition.claidheamohmor)
  _has_bits_[0] &= ~0x02000000u;
  ::CMsgPaintKit_Definition_Item* temp = claidheamohmor_;
  claidheamohmor_ = nullptr;
  return temp;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::_internal_mutable_claidheamohmor() {
  _has_bits_[0] |= 0x02000000u;
  if (claidheamohmor_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgPaintKit_Definition_Item>(GetArenaForAllocation());
    claidheamohmor_ = p;
  }
  return claidheamohmor_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::mutable_claidheamohmor() {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.claidheamohmor)
  return _internal_mutable_claidheamohmor();
}
inline void CMsgPaintKit_Definition::set_allocated_claidheamohmor(::CMsgPaintKit_Definition_Item* claidheamohmor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete claidheamohmor_;
  }
  if (claidheamohmor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgPaintKit_Definition_Item>::GetOwningArena(claidheamohmor);
    if (message_arena != submessage_arena) {
      claidheamohmor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, claidheamohmor, submessage_arena);
    }
    _has_bits_[0] |= 0x02000000u;
  } else {
    _has_bits_[0] &= ~0x02000000u;
  }
  claidheamohmor_ = claidheamohmor;
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Definition.claidheamohmor)
}

// optional .CMsgPaintKit_Definition.Item crusaders_crossbow = 29;
inline bool CMsgPaintKit_Definition::_internal_has_crusaders_crossbow() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  PROTOBUF_ASSUME(!value || crusaders_crossbow_ != nullptr);
  return value;
}
inline bool CMsgPaintKit_Definition::has_crusaders_crossbow() const {
  return _internal_has_crusaders_crossbow();
}
inline void CMsgPaintKit_Definition::clear_crusaders_crossbow() {
  if (crusaders_crossbow_ != nullptr) crusaders_crossbow_->Clear();
  _has_bits_[0] &= ~0x04000000u;
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::_internal_crusaders_crossbow() const {
  const ::CMsgPaintKit_Definition_Item* p = crusaders_crossbow_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgPaintKit_Definition_Item&>(
      ::_CMsgPaintKit_Definition_Item_default_instance_);
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::crusaders_crossbow() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.crusaders_crossbow)
  return _internal_crusaders_crossbow();
}
inline void CMsgPaintKit_Definition::unsafe_arena_set_allocated_crusaders_crossbow(
    ::CMsgPaintKit_Definition_Item* crusaders_crossbow) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(crusaders_crossbow_);
  }
  crusaders_crossbow_ = crusaders_crossbow;
  if (crusaders_crossbow) {
    _has_bits_[0] |= 0x04000000u;
  } else {
    _has_bits_[0] &= ~0x04000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPaintKit_Definition.crusaders_crossbow)
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::release_crusaders_crossbow() {
  _has_bits_[0] &= ~0x04000000u;
  ::CMsgPaintKit_Definition_Item* temp = crusaders_crossbow_;
  crusaders_crossbow_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::unsafe_arena_release_crusaders_crossbow() {
  // @@protoc_insertion_point(field_release:CMsgPaintKit_Definition.crusaders_crossbow)
  _has_bits_[0] &= ~0x04000000u;
  ::CMsgPaintKit_Definition_Item* temp = crusaders_crossbow_;
  crusaders_crossbow_ = nullptr;
  return temp;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::_internal_mutable_crusaders_crossbow() {
  _has_bits_[0] |= 0x04000000u;
  if (crusaders_crossbow_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgPaintKit_Definition_Item>(GetArenaForAllocation());
    crusaders_crossbow_ = p;
  }
  return crusaders_crossbow_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::mutable_crusaders_crossbow() {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.crusaders_crossbow)
  return _internal_mutable_crusaders_crossbow();
}
inline void CMsgPaintKit_Definition::set_allocated_crusaders_crossbow(::CMsgPaintKit_Definition_Item* crusaders_crossbow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete crusaders_crossbow_;
  }
  if (crusaders_crossbow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgPaintKit_Definition_Item>::GetOwningArena(crusaders_crossbow);
    if (message_arena != submessage_arena) {
      crusaders_crossbow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, crusaders_crossbow, submessage_arena);
    }
    _has_bits_[0] |= 0x04000000u;
  } else {
    _has_bits_[0] &= ~0x04000000u;
  }
  crusaders_crossbow_ = crusaders_crossbow;
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Definition.crusaders_crossbow)
}

// optional .CMsgPaintKit_Definition.Item degreaser = 30;
inline bool CMsgPaintKit_Definition::_internal_has_degreaser() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  PROTOBUF_ASSUME(!value || degreaser_ != nullptr);
  return value;
}
inline bool CMsgPaintKit_Definition::has_degreaser() const {
  return _internal_has_degreaser();
}
inline void CMsgPaintKit_Definition::clear_degreaser() {
  if (degreaser_ != nullptr) degreaser_->Clear();
  _has_bits_[0] &= ~0x08000000u;
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::_internal_degreaser() const {
  const ::CMsgPaintKit_Definition_Item* p = degreaser_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgPaintKit_Definition_Item&>(
      ::_CMsgPaintKit_Definition_Item_default_instance_);
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::degreaser() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.degreaser)
  return _internal_degreaser();
}
inline void CMsgPaintKit_Definition::unsafe_arena_set_allocated_degreaser(
    ::CMsgPaintKit_Definition_Item* degreaser) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(degreaser_);
  }
  degreaser_ = degreaser;
  if (degreaser) {
    _has_bits_[0] |= 0x08000000u;
  } else {
    _has_bits_[0] &= ~0x08000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPaintKit_Definition.degreaser)
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::release_degreaser() {
  _has_bits_[0] &= ~0x08000000u;
  ::CMsgPaintKit_Definition_Item* temp = degreaser_;
  degreaser_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::unsafe_arena_release_degreaser() {
  // @@protoc_insertion_point(field_release:CMsgPaintKit_Definition.degreaser)
  _has_bits_[0] &= ~0x08000000u;
  ::CMsgPaintKit_Definition_Item* temp = degreaser_;
  degreaser_ = nullptr;
  return temp;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::_internal_mutable_degreaser() {
  _has_bits_[0] |= 0x08000000u;
  if (degreaser_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgPaintKit_Definition_Item>(GetArenaForAllocation());
    degreaser_ = p;
  }
  return degreaser_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::mutable_degreaser() {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.degreaser)
  return _internal_mutable_degreaser();
}
inline void CMsgPaintKit_Definition::set_allocated_degreaser(::CMsgPaintKit_Definition_Item* degreaser) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete degreaser_;
  }
  if (degreaser) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgPaintKit_Definition_Item>::GetOwningArena(degreaser);
    if (message_arena != submessage_arena) {
      degreaser = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, degreaser, submessage_arena);
    }
    _has_bits_[0] |= 0x08000000u;
  } else {
    _has_bits_[0] &= ~0x08000000u;
  }
  degreaser_ = degreaser;
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Definition.degreaser)
}

// optional .CMsgPaintKit_Definition.Item demo_cannon = 31;
inline bool CMsgPaintKit_Definition::_internal_has_demo_cannon() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  PROTOBUF_ASSUME(!value || demo_cannon_ != nullptr);
  return value;
}
inline bool CMsgPaintKit_Definition::has_demo_cannon() const {
  return _internal_has_demo_cannon();
}
inline void CMsgPaintKit_Definition::clear_demo_cannon() {
  if (demo_cannon_ != nullptr) demo_cannon_->Clear();
  _has_bits_[0] &= ~0x10000000u;
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::_internal_demo_cannon() const {
  const ::CMsgPaintKit_Definition_Item* p = demo_cannon_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgPaintKit_Definition_Item&>(
      ::_CMsgPaintKit_Definition_Item_default_instance_);
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::demo_cannon() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.demo_cannon)
  return _internal_demo_cannon();
}
inline void CMsgPaintKit_Definition::unsafe_arena_set_allocated_demo_cannon(
    ::CMsgPaintKit_Definition_Item* demo_cannon) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(demo_cannon_);
  }
  demo_cannon_ = demo_cannon;
  if (demo_cannon) {
    _has_bits_[0] |= 0x10000000u;
  } else {
    _has_bits_[0] &= ~0x10000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPaintKit_Definition.demo_cannon)
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::release_demo_cannon() {
  _has_bits_[0] &= ~0x10000000u;
  ::CMsgPaintKit_Definition_Item* temp = demo_cannon_;
  demo_cannon_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::unsafe_arena_release_demo_cannon() {
  // @@protoc_insertion_point(field_release:CMsgPaintKit_Definition.demo_cannon)
  _has_bits_[0] &= ~0x10000000u;
  ::CMsgPaintKit_Definition_Item* temp = demo_cannon_;
  demo_cannon_ = nullptr;
  return temp;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::_internal_mutable_demo_cannon() {
  _has_bits_[0] |= 0x10000000u;
  if (demo_cannon_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgPaintKit_Definition_Item>(GetArenaForAllocation());
    demo_cannon_ = p;
  }
  return demo_cannon_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::mutable_demo_cannon() {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.demo_cannon)
  return _internal_mutable_demo_cannon();
}
inline void CMsgPaintKit_Definition::set_allocated_demo_cannon(::CMsgPaintKit_Definition_Item* demo_cannon) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete demo_cannon_;
  }
  if (demo_cannon) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgPaintKit_Definition_Item>::GetOwningArena(demo_cannon);
    if (message_arena != submessage_arena) {
      demo_cannon = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, demo_cannon, submessage_arena);
    }
    _has_bits_[0] |= 0x10000000u;
  } else {
    _has_bits_[0] &= ~0x10000000u;
  }
  demo_cannon_ = demo_cannon;
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Definition.demo_cannon)
}

// optional .CMsgPaintKit_Definition.Item demo_sultan_sword = 32;
inline bool CMsgPaintKit_Definition::_internal_has_demo_sultan_sword() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  PROTOBUF_ASSUME(!value || demo_sultan_sword_ != nullptr);
  return value;
}
inline bool CMsgPaintKit_Definition::has_demo_sultan_sword() const {
  return _internal_has_demo_sultan_sword();
}
inline void CMsgPaintKit_Definition::clear_demo_sultan_sword() {
  if (demo_sultan_sword_ != nullptr) demo_sultan_sword_->Clear();
  _has_bits_[0] &= ~0x20000000u;
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::_internal_demo_sultan_sword() const {
  const ::CMsgPaintKit_Definition_Item* p = demo_sultan_sword_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgPaintKit_Definition_Item&>(
      ::_CMsgPaintKit_Definition_Item_default_instance_);
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::demo_sultan_sword() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.demo_sultan_sword)
  return _internal_demo_sultan_sword();
}
inline void CMsgPaintKit_Definition::unsafe_arena_set_allocated_demo_sultan_sword(
    ::CMsgPaintKit_Definition_Item* demo_sultan_sword) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(demo_sultan_sword_);
  }
  demo_sultan_sword_ = demo_sultan_sword;
  if (demo_sultan_sword) {
    _has_bits_[0] |= 0x20000000u;
  } else {
    _has_bits_[0] &= ~0x20000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPaintKit_Definition.demo_sultan_sword)
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::release_demo_sultan_sword() {
  _has_bits_[0] &= ~0x20000000u;
  ::CMsgPaintKit_Definition_Item* temp = demo_sultan_sword_;
  demo_sultan_sword_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::unsafe_arena_release_demo_sultan_sword() {
  // @@protoc_insertion_point(field_release:CMsgPaintKit_Definition.demo_sultan_sword)
  _has_bits_[0] &= ~0x20000000u;
  ::CMsgPaintKit_Definition_Item* temp = demo_sultan_sword_;
  demo_sultan_sword_ = nullptr;
  return temp;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::_internal_mutable_demo_sultan_sword() {
  _has_bits_[0] |= 0x20000000u;
  if (demo_sultan_sword_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgPaintKit_Definition_Item>(GetArenaForAllocation());
    demo_sultan_sword_ = p;
  }
  return demo_sultan_sword_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::mutable_demo_sultan_sword() {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.demo_sultan_sword)
  return _internal_mutable_demo_sultan_sword();
}
inline void CMsgPaintKit_Definition::set_allocated_demo_sultan_sword(::CMsgPaintKit_Definition_Item* demo_sultan_sword) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete demo_sultan_sword_;
  }
  if (demo_sultan_sword) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgPaintKit_Definition_Item>::GetOwningArena(demo_sultan_sword);
    if (message_arena != submessage_arena) {
      demo_sultan_sword = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, demo_sultan_sword, submessage_arena);
    }
    _has_bits_[0] |= 0x20000000u;
  } else {
    _has_bits_[0] &= ~0x20000000u;
  }
  demo_sultan_sword_ = demo_sultan_sword;
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Definition.demo_sultan_sword)
}

// optional .CMsgPaintKit_Definition.Item detonator = 33;
inline bool CMsgPaintKit_Definition::_internal_has_detonator() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  PROTOBUF_ASSUME(!value || detonator_ != nullptr);
  return value;
}
inline bool CMsgPaintKit_Definition::has_detonator() const {
  return _internal_has_detonator();
}
inline void CMsgPaintKit_Definition::clear_detonator() {
  if (detonator_ != nullptr) detonator_->Clear();
  _has_bits_[0] &= ~0x40000000u;
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::_internal_detonator() const {
  const ::CMsgPaintKit_Definition_Item* p = detonator_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgPaintKit_Definition_Item&>(
      ::_CMsgPaintKit_Definition_Item_default_instance_);
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::detonator() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.detonator)
  return _internal_detonator();
}
inline void CMsgPaintKit_Definition::unsafe_arena_set_allocated_detonator(
    ::CMsgPaintKit_Definition_Item* detonator) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(detonator_);
  }
  detonator_ = detonator;
  if (detonator) {
    _has_bits_[0] |= 0x40000000u;
  } else {
    _has_bits_[0] &= ~0x40000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPaintKit_Definition.detonator)
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::release_detonator() {
  _has_bits_[0] &= ~0x40000000u;
  ::CMsgPaintKit_Definition_Item* temp = detonator_;
  detonator_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::unsafe_arena_release_detonator() {
  // @@protoc_insertion_point(field_release:CMsgPaintKit_Definition.detonator)
  _has_bits_[0] &= ~0x40000000u;
  ::CMsgPaintKit_Definition_Item* temp = detonator_;
  detonator_ = nullptr;
  return temp;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::_internal_mutable_detonator() {
  _has_bits_[0] |= 0x40000000u;
  if (detonator_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgPaintKit_Definition_Item>(GetArenaForAllocation());
    detonator_ = p;
  }
  return detonator_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::mutable_detonator() {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.detonator)
  return _internal_mutable_detonator();
}
inline void CMsgPaintKit_Definition::set_allocated_detonator(::CMsgPaintKit_Definition_Item* detonator) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete detonator_;
  }
  if (detonator) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgPaintKit_Definition_Item>::GetOwningArena(detonator);
    if (message_arena != submessage_arena) {
      detonator = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, detonator, submessage_arena);
    }
    _has_bits_[0] |= 0x40000000u;
  } else {
    _has_bits_[0] &= ~0x40000000u;
  }
  detonator_ = detonator;
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Definition.detonator)
}

// optional .CMsgPaintKit_Definition.Item gatling_gun = 34;
inline bool CMsgPaintKit_Definition::_internal_has_gatling_gun() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  PROTOBUF_ASSUME(!value || gatling_gun_ != nullptr);
  return value;
}
inline bool CMsgPaintKit_Definition::has_gatling_gun() const {
  return _internal_has_gatling_gun();
}
inline void CMsgPaintKit_Definition::clear_gatling_gun() {
  if (gatling_gun_ != nullptr) gatling_gun_->Clear();
  _has_bits_[0] &= ~0x80000000u;
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::_internal_gatling_gun() const {
  const ::CMsgPaintKit_Definition_Item* p = gatling_gun_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgPaintKit_Definition_Item&>(
      ::_CMsgPaintKit_Definition_Item_default_instance_);
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::gatling_gun() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.gatling_gun)
  return _internal_gatling_gun();
}
inline void CMsgPaintKit_Definition::unsafe_arena_set_allocated_gatling_gun(
    ::CMsgPaintKit_Definition_Item* gatling_gun) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gatling_gun_);
  }
  gatling_gun_ = gatling_gun;
  if (gatling_gun) {
    _has_bits_[0] |= 0x80000000u;
  } else {
    _has_bits_[0] &= ~0x80000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPaintKit_Definition.gatling_gun)
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::release_gatling_gun() {
  _has_bits_[0] &= ~0x80000000u;
  ::CMsgPaintKit_Definition_Item* temp = gatling_gun_;
  gatling_gun_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::unsafe_arena_release_gatling_gun() {
  // @@protoc_insertion_point(field_release:CMsgPaintKit_Definition.gatling_gun)
  _has_bits_[0] &= ~0x80000000u;
  ::CMsgPaintKit_Definition_Item* temp = gatling_gun_;
  gatling_gun_ = nullptr;
  return temp;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::_internal_mutable_gatling_gun() {
  _has_bits_[0] |= 0x80000000u;
  if (gatling_gun_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgPaintKit_Definition_Item>(GetArenaForAllocation());
    gatling_gun_ = p;
  }
  return gatling_gun_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::mutable_gatling_gun() {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.gatling_gun)
  return _internal_mutable_gatling_gun();
}
inline void CMsgPaintKit_Definition::set_allocated_gatling_gun(::CMsgPaintKit_Definition_Item* gatling_gun) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete gatling_gun_;
  }
  if (gatling_gun) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgPaintKit_Definition_Item>::GetOwningArena(gatling_gun);
    if (message_arena != submessage_arena) {
      gatling_gun = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gatling_gun, submessage_arena);
    }
    _has_bits_[0] |= 0x80000000u;
  } else {
    _has_bits_[0] &= ~0x80000000u;
  }
  gatling_gun_ = gatling_gun;
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Definition.gatling_gun)
}

// optional .CMsgPaintKit_Definition.Item holymackerel = 35;
inline bool CMsgPaintKit_Definition::_internal_has_holymackerel() const {
  bool value = (_has_bits_[1] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || holymackerel_ != nullptr);
  return value;
}
inline bool CMsgPaintKit_Definition::has_holymackerel() const {
  return _internal_has_holymackerel();
}
inline void CMsgPaintKit_Definition::clear_holymackerel() {
  if (holymackerel_ != nullptr) holymackerel_->Clear();
  _has_bits_[1] &= ~0x00000001u;
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::_internal_holymackerel() const {
  const ::CMsgPaintKit_Definition_Item* p = holymackerel_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgPaintKit_Definition_Item&>(
      ::_CMsgPaintKit_Definition_Item_default_instance_);
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::holymackerel() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.holymackerel)
  return _internal_holymackerel();
}
inline void CMsgPaintKit_Definition::unsafe_arena_set_allocated_holymackerel(
    ::CMsgPaintKit_Definition_Item* holymackerel) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(holymackerel_);
  }
  holymackerel_ = holymackerel;
  if (holymackerel) {
    _has_bits_[1] |= 0x00000001u;
  } else {
    _has_bits_[1] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPaintKit_Definition.holymackerel)
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::release_holymackerel() {
  _has_bits_[1] &= ~0x00000001u;
  ::CMsgPaintKit_Definition_Item* temp = holymackerel_;
  holymackerel_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::unsafe_arena_release_holymackerel() {
  // @@protoc_insertion_point(field_release:CMsgPaintKit_Definition.holymackerel)
  _has_bits_[1] &= ~0x00000001u;
  ::CMsgPaintKit_Definition_Item* temp = holymackerel_;
  holymackerel_ = nullptr;
  return temp;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::_internal_mutable_holymackerel() {
  _has_bits_[1] |= 0x00000001u;
  if (holymackerel_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgPaintKit_Definition_Item>(GetArenaForAllocation());
    holymackerel_ = p;
  }
  return holymackerel_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::mutable_holymackerel() {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.holymackerel)
  return _internal_mutable_holymackerel();
}
inline void CMsgPaintKit_Definition::set_allocated_holymackerel(::CMsgPaintKit_Definition_Item* holymackerel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete holymackerel_;
  }
  if (holymackerel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgPaintKit_Definition_Item>::GetOwningArena(holymackerel);
    if (message_arena != submessage_arena) {
      holymackerel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, holymackerel, submessage_arena);
    }
    _has_bits_[1] |= 0x00000001u;
  } else {
    _has_bits_[1] &= ~0x00000001u;
  }
  holymackerel_ = holymackerel;
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Definition.holymackerel)
}

// optional .CMsgPaintKit_Definition.Item jag = 36;
inline bool CMsgPaintKit_Definition::_internal_has_jag() const {
  bool value = (_has_bits_[1] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || jag_ != nullptr);
  return value;
}
inline bool CMsgPaintKit_Definition::has_jag() const {
  return _internal_has_jag();
}
inline void CMsgPaintKit_Definition::clear_jag() {
  if (jag_ != nullptr) jag_->Clear();
  _has_bits_[1] &= ~0x00000002u;
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::_internal_jag() const {
  const ::CMsgPaintKit_Definition_Item* p = jag_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgPaintKit_Definition_Item&>(
      ::_CMsgPaintKit_Definition_Item_default_instance_);
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::jag() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.jag)
  return _internal_jag();
}
inline void CMsgPaintKit_Definition::unsafe_arena_set_allocated_jag(
    ::CMsgPaintKit_Definition_Item* jag) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(jag_);
  }
  jag_ = jag;
  if (jag) {
    _has_bits_[1] |= 0x00000002u;
  } else {
    _has_bits_[1] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPaintKit_Definition.jag)
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::release_jag() {
  _has_bits_[1] &= ~0x00000002u;
  ::CMsgPaintKit_Definition_Item* temp = jag_;
  jag_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::unsafe_arena_release_jag() {
  // @@protoc_insertion_point(field_release:CMsgPaintKit_Definition.jag)
  _has_bits_[1] &= ~0x00000002u;
  ::CMsgPaintKit_Definition_Item* temp = jag_;
  jag_ = nullptr;
  return temp;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::_internal_mutable_jag() {
  _has_bits_[1] |= 0x00000002u;
  if (jag_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgPaintKit_Definition_Item>(GetArenaForAllocation());
    jag_ = p;
  }
  return jag_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::mutable_jag() {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.jag)
  return _internal_mutable_jag();
}
inline void CMsgPaintKit_Definition::set_allocated_jag(::CMsgPaintKit_Definition_Item* jag) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete jag_;
  }
  if (jag) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgPaintKit_Definition_Item>::GetOwningArena(jag);
    if (message_arena != submessage_arena) {
      jag = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, jag, submessage_arena);
    }
    _has_bits_[1] |= 0x00000002u;
  } else {
    _has_bits_[1] &= ~0x00000002u;
  }
  jag_ = jag;
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Definition.jag)
}

// optional .CMsgPaintKit_Definition.Item lochnload = 37;
inline bool CMsgPaintKit_Definition::_internal_has_lochnload() const {
  bool value = (_has_bits_[1] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || lochnload_ != nullptr);
  return value;
}
inline bool CMsgPaintKit_Definition::has_lochnload() const {
  return _internal_has_lochnload();
}
inline void CMsgPaintKit_Definition::clear_lochnload() {
  if (lochnload_ != nullptr) lochnload_->Clear();
  _has_bits_[1] &= ~0x00000004u;
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::_internal_lochnload() const {
  const ::CMsgPaintKit_Definition_Item* p = lochnload_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgPaintKit_Definition_Item&>(
      ::_CMsgPaintKit_Definition_Item_default_instance_);
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::lochnload() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.lochnload)
  return _internal_lochnload();
}
inline void CMsgPaintKit_Definition::unsafe_arena_set_allocated_lochnload(
    ::CMsgPaintKit_Definition_Item* lochnload) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lochnload_);
  }
  lochnload_ = lochnload;
  if (lochnload) {
    _has_bits_[1] |= 0x00000004u;
  } else {
    _has_bits_[1] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPaintKit_Definition.lochnload)
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::release_lochnload() {
  _has_bits_[1] &= ~0x00000004u;
  ::CMsgPaintKit_Definition_Item* temp = lochnload_;
  lochnload_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::unsafe_arena_release_lochnload() {
  // @@protoc_insertion_point(field_release:CMsgPaintKit_Definition.lochnload)
  _has_bits_[1] &= ~0x00000004u;
  ::CMsgPaintKit_Definition_Item* temp = lochnload_;
  lochnload_ = nullptr;
  return temp;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::_internal_mutable_lochnload() {
  _has_bits_[1] |= 0x00000004u;
  if (lochnload_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgPaintKit_Definition_Item>(GetArenaForAllocation());
    lochnload_ = p;
  }
  return lochnload_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::mutable_lochnload() {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.lochnload)
  return _internal_mutable_lochnload();
}
inline void CMsgPaintKit_Definition::set_allocated_lochnload(::CMsgPaintKit_Definition_Item* lochnload) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete lochnload_;
  }
  if (lochnload) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgPaintKit_Definition_Item>::GetOwningArena(lochnload);
    if (message_arena != submessage_arena) {
      lochnload = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lochnload, submessage_arena);
    }
    _has_bits_[1] |= 0x00000004u;
  } else {
    _has_bits_[1] &= ~0x00000004u;
  }
  lochnload_ = lochnload;
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Definition.lochnload)
}

// optional .CMsgPaintKit_Definition.Item powerjack = 38;
inline bool CMsgPaintKit_Definition::_internal_has_powerjack() const {
  bool value = (_has_bits_[1] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || powerjack_ != nullptr);
  return value;
}
inline bool CMsgPaintKit_Definition::has_powerjack() const {
  return _internal_has_powerjack();
}
inline void CMsgPaintKit_Definition::clear_powerjack() {
  if (powerjack_ != nullptr) powerjack_->Clear();
  _has_bits_[1] &= ~0x00000008u;
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::_internal_powerjack() const {
  const ::CMsgPaintKit_Definition_Item* p = powerjack_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgPaintKit_Definition_Item&>(
      ::_CMsgPaintKit_Definition_Item_default_instance_);
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::powerjack() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.powerjack)
  return _internal_powerjack();
}
inline void CMsgPaintKit_Definition::unsafe_arena_set_allocated_powerjack(
    ::CMsgPaintKit_Definition_Item* powerjack) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(powerjack_);
  }
  powerjack_ = powerjack;
  if (powerjack) {
    _has_bits_[1] |= 0x00000008u;
  } else {
    _has_bits_[1] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPaintKit_Definition.powerjack)
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::release_powerjack() {
  _has_bits_[1] &= ~0x00000008u;
  ::CMsgPaintKit_Definition_Item* temp = powerjack_;
  powerjack_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::unsafe_arena_release_powerjack() {
  // @@protoc_insertion_point(field_release:CMsgPaintKit_Definition.powerjack)
  _has_bits_[1] &= ~0x00000008u;
  ::CMsgPaintKit_Definition_Item* temp = powerjack_;
  powerjack_ = nullptr;
  return temp;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::_internal_mutable_powerjack() {
  _has_bits_[1] |= 0x00000008u;
  if (powerjack_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgPaintKit_Definition_Item>(GetArenaForAllocation());
    powerjack_ = p;
  }
  return powerjack_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::mutable_powerjack() {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.powerjack)
  return _internal_mutable_powerjack();
}
inline void CMsgPaintKit_Definition::set_allocated_powerjack(::CMsgPaintKit_Definition_Item* powerjack) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete powerjack_;
  }
  if (powerjack) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgPaintKit_Definition_Item>::GetOwningArena(powerjack);
    if (message_arena != submessage_arena) {
      powerjack = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, powerjack, submessage_arena);
    }
    _has_bits_[1] |= 0x00000008u;
  } else {
    _has_bits_[1] &= ~0x00000008u;
  }
  powerjack_ = powerjack;
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Definition.powerjack)
}

// optional .CMsgPaintKit_Definition.Item quadball = 39;
inline bool CMsgPaintKit_Definition::_internal_has_quadball() const {
  bool value = (_has_bits_[1] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || quadball_ != nullptr);
  return value;
}
inline bool CMsgPaintKit_Definition::has_quadball() const {
  return _internal_has_quadball();
}
inline void CMsgPaintKit_Definition::clear_quadball() {
  if (quadball_ != nullptr) quadball_->Clear();
  _has_bits_[1] &= ~0x00000010u;
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::_internal_quadball() const {
  const ::CMsgPaintKit_Definition_Item* p = quadball_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgPaintKit_Definition_Item&>(
      ::_CMsgPaintKit_Definition_Item_default_instance_);
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::quadball() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.quadball)
  return _internal_quadball();
}
inline void CMsgPaintKit_Definition::unsafe_arena_set_allocated_quadball(
    ::CMsgPaintKit_Definition_Item* quadball) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(quadball_);
  }
  quadball_ = quadball;
  if (quadball) {
    _has_bits_[1] |= 0x00000010u;
  } else {
    _has_bits_[1] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPaintKit_Definition.quadball)
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::release_quadball() {
  _has_bits_[1] &= ~0x00000010u;
  ::CMsgPaintKit_Definition_Item* temp = quadball_;
  quadball_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::unsafe_arena_release_quadball() {
  // @@protoc_insertion_point(field_release:CMsgPaintKit_Definition.quadball)
  _has_bits_[1] &= ~0x00000010u;
  ::CMsgPaintKit_Definition_Item* temp = quadball_;
  quadball_ = nullptr;
  return temp;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::_internal_mutable_quadball() {
  _has_bits_[1] |= 0x00000010u;
  if (quadball_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgPaintKit_Definition_Item>(GetArenaForAllocation());
    quadball_ = p;
  }
  return quadball_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::mutable_quadball() {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.quadball)
  return _internal_mutable_quadball();
}
inline void CMsgPaintKit_Definition::set_allocated_quadball(::CMsgPaintKit_Definition_Item* quadball) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete quadball_;
  }
  if (quadball) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgPaintKit_Definition_Item>::GetOwningArena(quadball);
    if (message_arena != submessage_arena) {
      quadball = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, quadball, submessage_arena);
    }
    _has_bits_[1] |= 0x00000010u;
  } else {
    _has_bits_[1] &= ~0x00000010u;
  }
  quadball_ = quadball;
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Definition.quadball)
}

// optional .CMsgPaintKit_Definition.Item reserve_shooter = 40;
inline bool CMsgPaintKit_Definition::_internal_has_reserve_shooter() const {
  bool value = (_has_bits_[1] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || reserve_shooter_ != nullptr);
  return value;
}
inline bool CMsgPaintKit_Definition::has_reserve_shooter() const {
  return _internal_has_reserve_shooter();
}
inline void CMsgPaintKit_Definition::clear_reserve_shooter() {
  if (reserve_shooter_ != nullptr) reserve_shooter_->Clear();
  _has_bits_[1] &= ~0x00000020u;
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::_internal_reserve_shooter() const {
  const ::CMsgPaintKit_Definition_Item* p = reserve_shooter_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgPaintKit_Definition_Item&>(
      ::_CMsgPaintKit_Definition_Item_default_instance_);
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::reserve_shooter() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.reserve_shooter)
  return _internal_reserve_shooter();
}
inline void CMsgPaintKit_Definition::unsafe_arena_set_allocated_reserve_shooter(
    ::CMsgPaintKit_Definition_Item* reserve_shooter) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reserve_shooter_);
  }
  reserve_shooter_ = reserve_shooter;
  if (reserve_shooter) {
    _has_bits_[1] |= 0x00000020u;
  } else {
    _has_bits_[1] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPaintKit_Definition.reserve_shooter)
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::release_reserve_shooter() {
  _has_bits_[1] &= ~0x00000020u;
  ::CMsgPaintKit_Definition_Item* temp = reserve_shooter_;
  reserve_shooter_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::unsafe_arena_release_reserve_shooter() {
  // @@protoc_insertion_point(field_release:CMsgPaintKit_Definition.reserve_shooter)
  _has_bits_[1] &= ~0x00000020u;
  ::CMsgPaintKit_Definition_Item* temp = reserve_shooter_;
  reserve_shooter_ = nullptr;
  return temp;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::_internal_mutable_reserve_shooter() {
  _has_bits_[1] |= 0x00000020u;
  if (reserve_shooter_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgPaintKit_Definition_Item>(GetArenaForAllocation());
    reserve_shooter_ = p;
  }
  return reserve_shooter_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::mutable_reserve_shooter() {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.reserve_shooter)
  return _internal_mutable_reserve_shooter();
}
inline void CMsgPaintKit_Definition::set_allocated_reserve_shooter(::CMsgPaintKit_Definition_Item* reserve_shooter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reserve_shooter_;
  }
  if (reserve_shooter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgPaintKit_Definition_Item>::GetOwningArena(reserve_shooter);
    if (message_arena != submessage_arena) {
      reserve_shooter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reserve_shooter, submessage_arena);
    }
    _has_bits_[1] |= 0x00000020u;
  } else {
    _has_bits_[1] &= ~0x00000020u;
  }
  reserve_shooter_ = reserve_shooter;
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Definition.reserve_shooter)
}

// optional .CMsgPaintKit_Definition.Item riding_crop = 41;
inline bool CMsgPaintKit_Definition::_internal_has_riding_crop() const {
  bool value = (_has_bits_[1] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || riding_crop_ != nullptr);
  return value;
}
inline bool CMsgPaintKit_Definition::has_riding_crop() const {
  return _internal_has_riding_crop();
}
inline void CMsgPaintKit_Definition::clear_riding_crop() {
  if (riding_crop_ != nullptr) riding_crop_->Clear();
  _has_bits_[1] &= ~0x00000040u;
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::_internal_riding_crop() const {
  const ::CMsgPaintKit_Definition_Item* p = riding_crop_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgPaintKit_Definition_Item&>(
      ::_CMsgPaintKit_Definition_Item_default_instance_);
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::riding_crop() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.riding_crop)
  return _internal_riding_crop();
}
inline void CMsgPaintKit_Definition::unsafe_arena_set_allocated_riding_crop(
    ::CMsgPaintKit_Definition_Item* riding_crop) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(riding_crop_);
  }
  riding_crop_ = riding_crop;
  if (riding_crop) {
    _has_bits_[1] |= 0x00000040u;
  } else {
    _has_bits_[1] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPaintKit_Definition.riding_crop)
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::release_riding_crop() {
  _has_bits_[1] &= ~0x00000040u;
  ::CMsgPaintKit_Definition_Item* temp = riding_crop_;
  riding_crop_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::unsafe_arena_release_riding_crop() {
  // @@protoc_insertion_point(field_release:CMsgPaintKit_Definition.riding_crop)
  _has_bits_[1] &= ~0x00000040u;
  ::CMsgPaintKit_Definition_Item* temp = riding_crop_;
  riding_crop_ = nullptr;
  return temp;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::_internal_mutable_riding_crop() {
  _has_bits_[1] |= 0x00000040u;
  if (riding_crop_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgPaintKit_Definition_Item>(GetArenaForAllocation());
    riding_crop_ = p;
  }
  return riding_crop_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::mutable_riding_crop() {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.riding_crop)
  return _internal_mutable_riding_crop();
}
inline void CMsgPaintKit_Definition::set_allocated_riding_crop(::CMsgPaintKit_Definition_Item* riding_crop) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete riding_crop_;
  }
  if (riding_crop) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgPaintKit_Definition_Item>::GetOwningArena(riding_crop);
    if (message_arena != submessage_arena) {
      riding_crop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, riding_crop, submessage_arena);
    }
    _has_bits_[1] |= 0x00000040u;
  } else {
    _has_bits_[1] &= ~0x00000040u;
  }
  riding_crop_ = riding_crop;
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Definition.riding_crop)
}

// optional .CMsgPaintKit_Definition.Item russian_riot = 42;
inline bool CMsgPaintKit_Definition::_internal_has_russian_riot() const {
  bool value = (_has_bits_[1] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || russian_riot_ != nullptr);
  return value;
}
inline bool CMsgPaintKit_Definition::has_russian_riot() const {
  return _internal_has_russian_riot();
}
inline void CMsgPaintKit_Definition::clear_russian_riot() {
  if (russian_riot_ != nullptr) russian_riot_->Clear();
  _has_bits_[1] &= ~0x00000080u;
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::_internal_russian_riot() const {
  const ::CMsgPaintKit_Definition_Item* p = russian_riot_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgPaintKit_Definition_Item&>(
      ::_CMsgPaintKit_Definition_Item_default_instance_);
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::russian_riot() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.russian_riot)
  return _internal_russian_riot();
}
inline void CMsgPaintKit_Definition::unsafe_arena_set_allocated_russian_riot(
    ::CMsgPaintKit_Definition_Item* russian_riot) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(russian_riot_);
  }
  russian_riot_ = russian_riot;
  if (russian_riot) {
    _has_bits_[1] |= 0x00000080u;
  } else {
    _has_bits_[1] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPaintKit_Definition.russian_riot)
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::release_russian_riot() {
  _has_bits_[1] &= ~0x00000080u;
  ::CMsgPaintKit_Definition_Item* temp = russian_riot_;
  russian_riot_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::unsafe_arena_release_russian_riot() {
  // @@protoc_insertion_point(field_release:CMsgPaintKit_Definition.russian_riot)
  _has_bits_[1] &= ~0x00000080u;
  ::CMsgPaintKit_Definition_Item* temp = russian_riot_;
  russian_riot_ = nullptr;
  return temp;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::_internal_mutable_russian_riot() {
  _has_bits_[1] |= 0x00000080u;
  if (russian_riot_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgPaintKit_Definition_Item>(GetArenaForAllocation());
    russian_riot_ = p;
  }
  return russian_riot_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::mutable_russian_riot() {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.russian_riot)
  return _internal_mutable_russian_riot();
}
inline void CMsgPaintKit_Definition::set_allocated_russian_riot(::CMsgPaintKit_Definition_Item* russian_riot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete russian_riot_;
  }
  if (russian_riot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgPaintKit_Definition_Item>::GetOwningArena(russian_riot);
    if (message_arena != submessage_arena) {
      russian_riot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, russian_riot, submessage_arena);
    }
    _has_bits_[1] |= 0x00000080u;
  } else {
    _has_bits_[1] &= ~0x00000080u;
  }
  russian_riot_ = russian_riot;
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Definition.russian_riot)
}

// optional .CMsgPaintKit_Definition.Item scimitar = 43;
inline bool CMsgPaintKit_Definition::_internal_has_scimitar() const {
  bool value = (_has_bits_[1] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || scimitar_ != nullptr);
  return value;
}
inline bool CMsgPaintKit_Definition::has_scimitar() const {
  return _internal_has_scimitar();
}
inline void CMsgPaintKit_Definition::clear_scimitar() {
  if (scimitar_ != nullptr) scimitar_->Clear();
  _has_bits_[1] &= ~0x00000100u;
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::_internal_scimitar() const {
  const ::CMsgPaintKit_Definition_Item* p = scimitar_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgPaintKit_Definition_Item&>(
      ::_CMsgPaintKit_Definition_Item_default_instance_);
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::scimitar() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.scimitar)
  return _internal_scimitar();
}
inline void CMsgPaintKit_Definition::unsafe_arena_set_allocated_scimitar(
    ::CMsgPaintKit_Definition_Item* scimitar) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scimitar_);
  }
  scimitar_ = scimitar;
  if (scimitar) {
    _has_bits_[1] |= 0x00000100u;
  } else {
    _has_bits_[1] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPaintKit_Definition.scimitar)
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::release_scimitar() {
  _has_bits_[1] &= ~0x00000100u;
  ::CMsgPaintKit_Definition_Item* temp = scimitar_;
  scimitar_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::unsafe_arena_release_scimitar() {
  // @@protoc_insertion_point(field_release:CMsgPaintKit_Definition.scimitar)
  _has_bits_[1] &= ~0x00000100u;
  ::CMsgPaintKit_Definition_Item* temp = scimitar_;
  scimitar_ = nullptr;
  return temp;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::_internal_mutable_scimitar() {
  _has_bits_[1] |= 0x00000100u;
  if (scimitar_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgPaintKit_Definition_Item>(GetArenaForAllocation());
    scimitar_ = p;
  }
  return scimitar_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::mutable_scimitar() {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.scimitar)
  return _internal_mutable_scimitar();
}
inline void CMsgPaintKit_Definition::set_allocated_scimitar(::CMsgPaintKit_Definition_Item* scimitar) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete scimitar_;
  }
  if (scimitar) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgPaintKit_Definition_Item>::GetOwningArena(scimitar);
    if (message_arena != submessage_arena) {
      scimitar = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scimitar, submessage_arena);
    }
    _has_bits_[1] |= 0x00000100u;
  } else {
    _has_bits_[1] &= ~0x00000100u;
  }
  scimitar_ = scimitar;
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Definition.scimitar)
}

// optional .CMsgPaintKit_Definition.Item scorch_shot = 44;
inline bool CMsgPaintKit_Definition::_internal_has_scorch_shot() const {
  bool value = (_has_bits_[1] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || scorch_shot_ != nullptr);
  return value;
}
inline bool CMsgPaintKit_Definition::has_scorch_shot() const {
  return _internal_has_scorch_shot();
}
inline void CMsgPaintKit_Definition::clear_scorch_shot() {
  if (scorch_shot_ != nullptr) scorch_shot_->Clear();
  _has_bits_[1] &= ~0x00000200u;
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::_internal_scorch_shot() const {
  const ::CMsgPaintKit_Definition_Item* p = scorch_shot_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgPaintKit_Definition_Item&>(
      ::_CMsgPaintKit_Definition_Item_default_instance_);
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::scorch_shot() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.scorch_shot)
  return _internal_scorch_shot();
}
inline void CMsgPaintKit_Definition::unsafe_arena_set_allocated_scorch_shot(
    ::CMsgPaintKit_Definition_Item* scorch_shot) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scorch_shot_);
  }
  scorch_shot_ = scorch_shot;
  if (scorch_shot) {
    _has_bits_[1] |= 0x00000200u;
  } else {
    _has_bits_[1] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPaintKit_Definition.scorch_shot)
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::release_scorch_shot() {
  _has_bits_[1] &= ~0x00000200u;
  ::CMsgPaintKit_Definition_Item* temp = scorch_shot_;
  scorch_shot_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::unsafe_arena_release_scorch_shot() {
  // @@protoc_insertion_point(field_release:CMsgPaintKit_Definition.scorch_shot)
  _has_bits_[1] &= ~0x00000200u;
  ::CMsgPaintKit_Definition_Item* temp = scorch_shot_;
  scorch_shot_ = nullptr;
  return temp;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::_internal_mutable_scorch_shot() {
  _has_bits_[1] |= 0x00000200u;
  if (scorch_shot_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgPaintKit_Definition_Item>(GetArenaForAllocation());
    scorch_shot_ = p;
  }
  return scorch_shot_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::mutable_scorch_shot() {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.scorch_shot)
  return _internal_mutable_scorch_shot();
}
inline void CMsgPaintKit_Definition::set_allocated_scorch_shot(::CMsgPaintKit_Definition_Item* scorch_shot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete scorch_shot_;
  }
  if (scorch_shot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgPaintKit_Definition_Item>::GetOwningArena(scorch_shot);
    if (message_arena != submessage_arena) {
      scorch_shot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scorch_shot, submessage_arena);
    }
    _has_bits_[1] |= 0x00000200u;
  } else {
    _has_bits_[1] &= ~0x00000200u;
  }
  scorch_shot_ = scorch_shot;
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Definition.scorch_shot)
}

// optional .CMsgPaintKit_Definition.Item shortstop = 45;
inline bool CMsgPaintKit_Definition::_internal_has_shortstop() const {
  bool value = (_has_bits_[1] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || shortstop_ != nullptr);
  return value;
}
inline bool CMsgPaintKit_Definition::has_shortstop() const {
  return _internal_has_shortstop();
}
inline void CMsgPaintKit_Definition::clear_shortstop() {
  if (shortstop_ != nullptr) shortstop_->Clear();
  _has_bits_[1] &= ~0x00000400u;
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::_internal_shortstop() const {
  const ::CMsgPaintKit_Definition_Item* p = shortstop_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgPaintKit_Definition_Item&>(
      ::_CMsgPaintKit_Definition_Item_default_instance_);
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::shortstop() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.shortstop)
  return _internal_shortstop();
}
inline void CMsgPaintKit_Definition::unsafe_arena_set_allocated_shortstop(
    ::CMsgPaintKit_Definition_Item* shortstop) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shortstop_);
  }
  shortstop_ = shortstop;
  if (shortstop) {
    _has_bits_[1] |= 0x00000400u;
  } else {
    _has_bits_[1] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPaintKit_Definition.shortstop)
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::release_shortstop() {
  _has_bits_[1] &= ~0x00000400u;
  ::CMsgPaintKit_Definition_Item* temp = shortstop_;
  shortstop_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::unsafe_arena_release_shortstop() {
  // @@protoc_insertion_point(field_release:CMsgPaintKit_Definition.shortstop)
  _has_bits_[1] &= ~0x00000400u;
  ::CMsgPaintKit_Definition_Item* temp = shortstop_;
  shortstop_ = nullptr;
  return temp;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::_internal_mutable_shortstop() {
  _has_bits_[1] |= 0x00000400u;
  if (shortstop_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgPaintKit_Definition_Item>(GetArenaForAllocation());
    shortstop_ = p;
  }
  return shortstop_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::mutable_shortstop() {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.shortstop)
  return _internal_mutable_shortstop();
}
inline void CMsgPaintKit_Definition::set_allocated_shortstop(::CMsgPaintKit_Definition_Item* shortstop) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete shortstop_;
  }
  if (shortstop) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgPaintKit_Definition_Item>::GetOwningArena(shortstop);
    if (message_arena != submessage_arena) {
      shortstop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shortstop, submessage_arena);
    }
    _has_bits_[1] |= 0x00000400u;
  } else {
    _has_bits_[1] &= ~0x00000400u;
  }
  shortstop_ = shortstop;
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Definition.shortstop)
}

// optional .CMsgPaintKit_Definition.Item soda_popper = 46;
inline bool CMsgPaintKit_Definition::_internal_has_soda_popper() const {
  bool value = (_has_bits_[1] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || soda_popper_ != nullptr);
  return value;
}
inline bool CMsgPaintKit_Definition::has_soda_popper() const {
  return _internal_has_soda_popper();
}
inline void CMsgPaintKit_Definition::clear_soda_popper() {
  if (soda_popper_ != nullptr) soda_popper_->Clear();
  _has_bits_[1] &= ~0x00000800u;
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::_internal_soda_popper() const {
  const ::CMsgPaintKit_Definition_Item* p = soda_popper_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgPaintKit_Definition_Item&>(
      ::_CMsgPaintKit_Definition_Item_default_instance_);
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::soda_popper() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.soda_popper)
  return _internal_soda_popper();
}
inline void CMsgPaintKit_Definition::unsafe_arena_set_allocated_soda_popper(
    ::CMsgPaintKit_Definition_Item* soda_popper) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(soda_popper_);
  }
  soda_popper_ = soda_popper;
  if (soda_popper) {
    _has_bits_[1] |= 0x00000800u;
  } else {
    _has_bits_[1] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPaintKit_Definition.soda_popper)
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::release_soda_popper() {
  _has_bits_[1] &= ~0x00000800u;
  ::CMsgPaintKit_Definition_Item* temp = soda_popper_;
  soda_popper_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::unsafe_arena_release_soda_popper() {
  // @@protoc_insertion_point(field_release:CMsgPaintKit_Definition.soda_popper)
  _has_bits_[1] &= ~0x00000800u;
  ::CMsgPaintKit_Definition_Item* temp = soda_popper_;
  soda_popper_ = nullptr;
  return temp;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::_internal_mutable_soda_popper() {
  _has_bits_[1] |= 0x00000800u;
  if (soda_popper_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgPaintKit_Definition_Item>(GetArenaForAllocation());
    soda_popper_ = p;
  }
  return soda_popper_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::mutable_soda_popper() {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.soda_popper)
  return _internal_mutable_soda_popper();
}
inline void CMsgPaintKit_Definition::set_allocated_soda_popper(::CMsgPaintKit_Definition_Item* soda_popper) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete soda_popper_;
  }
  if (soda_popper) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgPaintKit_Definition_Item>::GetOwningArena(soda_popper);
    if (message_arena != submessage_arena) {
      soda_popper = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, soda_popper, submessage_arena);
    }
    _has_bits_[1] |= 0x00000800u;
  } else {
    _has_bits_[1] &= ~0x00000800u;
  }
  soda_popper_ = soda_popper;
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Definition.soda_popper)
}

// optional .CMsgPaintKit_Definition.Item tele_shotgun = 47;
inline bool CMsgPaintKit_Definition::_internal_has_tele_shotgun() const {
  bool value = (_has_bits_[1] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || tele_shotgun_ != nullptr);
  return value;
}
inline bool CMsgPaintKit_Definition::has_tele_shotgun() const {
  return _internal_has_tele_shotgun();
}
inline void CMsgPaintKit_Definition::clear_tele_shotgun() {
  if (tele_shotgun_ != nullptr) tele_shotgun_->Clear();
  _has_bits_[1] &= ~0x00001000u;
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::_internal_tele_shotgun() const {
  const ::CMsgPaintKit_Definition_Item* p = tele_shotgun_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgPaintKit_Definition_Item&>(
      ::_CMsgPaintKit_Definition_Item_default_instance_);
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::tele_shotgun() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.tele_shotgun)
  return _internal_tele_shotgun();
}
inline void CMsgPaintKit_Definition::unsafe_arena_set_allocated_tele_shotgun(
    ::CMsgPaintKit_Definition_Item* tele_shotgun) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tele_shotgun_);
  }
  tele_shotgun_ = tele_shotgun;
  if (tele_shotgun) {
    _has_bits_[1] |= 0x00001000u;
  } else {
    _has_bits_[1] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPaintKit_Definition.tele_shotgun)
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::release_tele_shotgun() {
  _has_bits_[1] &= ~0x00001000u;
  ::CMsgPaintKit_Definition_Item* temp = tele_shotgun_;
  tele_shotgun_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::unsafe_arena_release_tele_shotgun() {
  // @@protoc_insertion_point(field_release:CMsgPaintKit_Definition.tele_shotgun)
  _has_bits_[1] &= ~0x00001000u;
  ::CMsgPaintKit_Definition_Item* temp = tele_shotgun_;
  tele_shotgun_ = nullptr;
  return temp;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::_internal_mutable_tele_shotgun() {
  _has_bits_[1] |= 0x00001000u;
  if (tele_shotgun_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgPaintKit_Definition_Item>(GetArenaForAllocation());
    tele_shotgun_ = p;
  }
  return tele_shotgun_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::mutable_tele_shotgun() {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.tele_shotgun)
  return _internal_mutable_tele_shotgun();
}
inline void CMsgPaintKit_Definition::set_allocated_tele_shotgun(::CMsgPaintKit_Definition_Item* tele_shotgun) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete tele_shotgun_;
  }
  if (tele_shotgun) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgPaintKit_Definition_Item>::GetOwningArena(tele_shotgun);
    if (message_arena != submessage_arena) {
      tele_shotgun = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tele_shotgun, submessage_arena);
    }
    _has_bits_[1] |= 0x00001000u;
  } else {
    _has_bits_[1] &= ~0x00001000u;
  }
  tele_shotgun_ = tele_shotgun;
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Definition.tele_shotgun)
}

// optional .CMsgPaintKit_Definition.Item tomislav = 48;
inline bool CMsgPaintKit_Definition::_internal_has_tomislav() const {
  bool value = (_has_bits_[1] & 0x00002000u) != 0;
  PROTOBUF_ASSUME(!value || tomislav_ != nullptr);
  return value;
}
inline bool CMsgPaintKit_Definition::has_tomislav() const {
  return _internal_has_tomislav();
}
inline void CMsgPaintKit_Definition::clear_tomislav() {
  if (tomislav_ != nullptr) tomislav_->Clear();
  _has_bits_[1] &= ~0x00002000u;
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::_internal_tomislav() const {
  const ::CMsgPaintKit_Definition_Item* p = tomislav_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgPaintKit_Definition_Item&>(
      ::_CMsgPaintKit_Definition_Item_default_instance_);
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::tomislav() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.tomislav)
  return _internal_tomislav();
}
inline void CMsgPaintKit_Definition::unsafe_arena_set_allocated_tomislav(
    ::CMsgPaintKit_Definition_Item* tomislav) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tomislav_);
  }
  tomislav_ = tomislav;
  if (tomislav) {
    _has_bits_[1] |= 0x00002000u;
  } else {
    _has_bits_[1] &= ~0x00002000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPaintKit_Definition.tomislav)
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::release_tomislav() {
  _has_bits_[1] &= ~0x00002000u;
  ::CMsgPaintKit_Definition_Item* temp = tomislav_;
  tomislav_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::unsafe_arena_release_tomislav() {
  // @@protoc_insertion_point(field_release:CMsgPaintKit_Definition.tomislav)
  _has_bits_[1] &= ~0x00002000u;
  ::CMsgPaintKit_Definition_Item* temp = tomislav_;
  tomislav_ = nullptr;
  return temp;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::_internal_mutable_tomislav() {
  _has_bits_[1] |= 0x00002000u;
  if (tomislav_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgPaintKit_Definition_Item>(GetArenaForAllocation());
    tomislav_ = p;
  }
  return tomislav_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::mutable_tomislav() {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.tomislav)
  return _internal_mutable_tomislav();
}
inline void CMsgPaintKit_Definition::set_allocated_tomislav(::CMsgPaintKit_Definition_Item* tomislav) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete tomislav_;
  }
  if (tomislav) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgPaintKit_Definition_Item>::GetOwningArena(tomislav);
    if (message_arena != submessage_arena) {
      tomislav = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tomislav, submessage_arena);
    }
    _has_bits_[1] |= 0x00002000u;
  } else {
    _has_bits_[1] &= ~0x00002000u;
  }
  tomislav_ = tomislav;
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Definition.tomislav)
}

// optional .CMsgPaintKit_Definition.Item trenchgun = 49;
inline bool CMsgPaintKit_Definition::_internal_has_trenchgun() const {
  bool value = (_has_bits_[1] & 0x00004000u) != 0;
  PROTOBUF_ASSUME(!value || trenchgun_ != nullptr);
  return value;
}
inline bool CMsgPaintKit_Definition::has_trenchgun() const {
  return _internal_has_trenchgun();
}
inline void CMsgPaintKit_Definition::clear_trenchgun() {
  if (trenchgun_ != nullptr) trenchgun_->Clear();
  _has_bits_[1] &= ~0x00004000u;
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::_internal_trenchgun() const {
  const ::CMsgPaintKit_Definition_Item* p = trenchgun_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgPaintKit_Definition_Item&>(
      ::_CMsgPaintKit_Definition_Item_default_instance_);
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::trenchgun() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.trenchgun)
  return _internal_trenchgun();
}
inline void CMsgPaintKit_Definition::unsafe_arena_set_allocated_trenchgun(
    ::CMsgPaintKit_Definition_Item* trenchgun) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trenchgun_);
  }
  trenchgun_ = trenchgun;
  if (trenchgun) {
    _has_bits_[1] |= 0x00004000u;
  } else {
    _has_bits_[1] &= ~0x00004000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPaintKit_Definition.trenchgun)
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::release_trenchgun() {
  _has_bits_[1] &= ~0x00004000u;
  ::CMsgPaintKit_Definition_Item* temp = trenchgun_;
  trenchgun_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::unsafe_arena_release_trenchgun() {
  // @@protoc_insertion_point(field_release:CMsgPaintKit_Definition.trenchgun)
  _has_bits_[1] &= ~0x00004000u;
  ::CMsgPaintKit_Definition_Item* temp = trenchgun_;
  trenchgun_ = nullptr;
  return temp;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::_internal_mutable_trenchgun() {
  _has_bits_[1] |= 0x00004000u;
  if (trenchgun_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgPaintKit_Definition_Item>(GetArenaForAllocation());
    trenchgun_ = p;
  }
  return trenchgun_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::mutable_trenchgun() {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.trenchgun)
  return _internal_mutable_trenchgun();
}
inline void CMsgPaintKit_Definition::set_allocated_trenchgun(::CMsgPaintKit_Definition_Item* trenchgun) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete trenchgun_;
  }
  if (trenchgun) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgPaintKit_Definition_Item>::GetOwningArena(trenchgun);
    if (message_arena != submessage_arena) {
      trenchgun = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trenchgun, submessage_arena);
    }
    _has_bits_[1] |= 0x00004000u;
  } else {
    _has_bits_[1] &= ~0x00004000u;
  }
  trenchgun_ = trenchgun;
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Definition.trenchgun)
}

// optional .CMsgPaintKit_Definition.Item winger_pistol = 50;
inline bool CMsgPaintKit_Definition::_internal_has_winger_pistol() const {
  bool value = (_has_bits_[1] & 0x00008000u) != 0;
  PROTOBUF_ASSUME(!value || winger_pistol_ != nullptr);
  return value;
}
inline bool CMsgPaintKit_Definition::has_winger_pistol() const {
  return _internal_has_winger_pistol();
}
inline void CMsgPaintKit_Definition::clear_winger_pistol() {
  if (winger_pistol_ != nullptr) winger_pistol_->Clear();
  _has_bits_[1] &= ~0x00008000u;
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::_internal_winger_pistol() const {
  const ::CMsgPaintKit_Definition_Item* p = winger_pistol_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgPaintKit_Definition_Item&>(
      ::_CMsgPaintKit_Definition_Item_default_instance_);
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::winger_pistol() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.winger_pistol)
  return _internal_winger_pistol();
}
inline void CMsgPaintKit_Definition::unsafe_arena_set_allocated_winger_pistol(
    ::CMsgPaintKit_Definition_Item* winger_pistol) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(winger_pistol_);
  }
  winger_pistol_ = winger_pistol;
  if (winger_pistol) {
    _has_bits_[1] |= 0x00008000u;
  } else {
    _has_bits_[1] &= ~0x00008000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPaintKit_Definition.winger_pistol)
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::release_winger_pistol() {
  _has_bits_[1] &= ~0x00008000u;
  ::CMsgPaintKit_Definition_Item* temp = winger_pistol_;
  winger_pistol_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::unsafe_arena_release_winger_pistol() {
  // @@protoc_insertion_point(field_release:CMsgPaintKit_Definition.winger_pistol)
  _has_bits_[1] &= ~0x00008000u;
  ::CMsgPaintKit_Definition_Item* temp = winger_pistol_;
  winger_pistol_ = nullptr;
  return temp;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::_internal_mutable_winger_pistol() {
  _has_bits_[1] |= 0x00008000u;
  if (winger_pistol_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgPaintKit_Definition_Item>(GetArenaForAllocation());
    winger_pistol_ = p;
  }
  return winger_pistol_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::mutable_winger_pistol() {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.winger_pistol)
  return _internal_mutable_winger_pistol();
}
inline void CMsgPaintKit_Definition::set_allocated_winger_pistol(::CMsgPaintKit_Definition_Item* winger_pistol) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete winger_pistol_;
  }
  if (winger_pistol) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgPaintKit_Definition_Item>::GetOwningArena(winger_pistol);
    if (message_arena != submessage_arena) {
      winger_pistol = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, winger_pistol, submessage_arena);
    }
    _has_bits_[1] |= 0x00008000u;
  } else {
    _has_bits_[1] &= ~0x00008000u;
  }
  winger_pistol_ = winger_pistol;
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Definition.winger_pistol)
}

// -------------------------------------------------------------------

// CMsgQuestTheme_WeightedString

// optional string string = 1;
inline bool CMsgQuestTheme_WeightedString::_internal_has_string() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgQuestTheme_WeightedString::has_string() const {
  return _internal_has_string();
}
inline void CMsgQuestTheme_WeightedString::clear_string() {
  string_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgQuestTheme_WeightedString::string() const {
  // @@protoc_insertion_point(field_get:CMsgQuestTheme.WeightedString.string)
  return _internal_string();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgQuestTheme_WeightedString::set_string(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgQuestTheme.WeightedString.string)
}
inline std::string* CMsgQuestTheme_WeightedString::mutable_string() {
  // @@protoc_insertion_point(field_mutable:CMsgQuestTheme.WeightedString.string)
  return _internal_mutable_string();
}
inline const std::string& CMsgQuestTheme_WeightedString::_internal_string() const {
  return string_.Get();
}
inline void CMsgQuestTheme_WeightedString::_internal_set_string(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgQuestTheme_WeightedString::_internal_mutable_string() {
  _has_bits_[0] |= 0x00000001u;
  return string_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgQuestTheme_WeightedString::release_string() {
  // @@protoc_insertion_point(field_release:CMsgQuestTheme.WeightedString.string)
  if (!_internal_has_string()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return string_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CMsgQuestTheme_WeightedString::set_allocated_string(std::string* string) {
  if (string != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), string,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CMsgQuestTheme.WeightedString.string)
}

// optional uint32 weight = 2;
inline bool CMsgQuestTheme_WeightedString::_internal_has_weight() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgQuestTheme_WeightedString::has_weight() const {
  return _internal_has_weight();
}
inline void CMsgQuestTheme_WeightedString::clear_weight() {
  weight_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgQuestTheme_WeightedString::_internal_weight() const {
  return weight_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgQuestTheme_WeightedString::weight() const {
  // @@protoc_insertion_point(field_get:CMsgQuestTheme.WeightedString.weight)
  return _internal_weight();
}
inline void CMsgQuestTheme_WeightedString::_internal_set_weight(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  weight_ = value;
}
inline void CMsgQuestTheme_WeightedString::set_weight(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_weight(value);
  // @@protoc_insertion_point(field_set:CMsgQuestTheme.WeightedString.weight)
}

// -------------------------------------------------------------------

// CMsgQuestTheme_WeightedStringSet

// repeated .CMsgQuestTheme.WeightedString weighted_strings = 1;
inline int CMsgQuestTheme_WeightedStringSet::_internal_weighted_strings_size() const {
  return weighted_strings_.size();
}
inline int CMsgQuestTheme_WeightedStringSet::weighted_strings_size() const {
  return _internal_weighted_strings_size();
}
inline void CMsgQuestTheme_WeightedStringSet::clear_weighted_strings() {
  weighted_strings_.Clear();
}
inline ::CMsgQuestTheme_WeightedString* CMsgQuestTheme_WeightedStringSet::mutable_weighted_strings(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgQuestTheme.WeightedStringSet.weighted_strings)
  return weighted_strings_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgQuestTheme_WeightedString >*
CMsgQuestTheme_WeightedStringSet::mutable_weighted_strings() {
  // @@protoc_insertion_point(field_mutable_list:CMsgQuestTheme.WeightedStringSet.weighted_strings)
  return &weighted_strings_;
}
inline const ::CMsgQuestTheme_WeightedString& CMsgQuestTheme_WeightedStringSet::_internal_weighted_strings(int index) const {
  return weighted_strings_.Get(index);
}
inline const ::CMsgQuestTheme_WeightedString& CMsgQuestTheme_WeightedStringSet::weighted_strings(int index) const {
  // @@protoc_insertion_point(field_get:CMsgQuestTheme.WeightedStringSet.weighted_strings)
  return _internal_weighted_strings(index);
}
inline ::CMsgQuestTheme_WeightedString* CMsgQuestTheme_WeightedStringSet::_internal_add_weighted_strings() {
  return weighted_strings_.Add();
}
inline ::CMsgQuestTheme_WeightedString* CMsgQuestTheme_WeightedStringSet::add_weighted_strings() {
  // @@protoc_insertion_point(field_add:CMsgQuestTheme.WeightedStringSet.weighted_strings)
  return _internal_add_weighted_strings();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgQuestTheme_WeightedString >&
CMsgQuestTheme_WeightedStringSet::weighted_strings() const {
  // @@protoc_insertion_point(field_list:CMsgQuestTheme.WeightedStringSet.weighted_strings)
  return weighted_strings_;
}

// -------------------------------------------------------------------

// CMsgQuestTheme

// required .CMsgProtoDefHeader header = 1;
inline bool CMsgQuestTheme::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool CMsgQuestTheme::has_header() const {
  return _internal_has_header();
}
inline void CMsgQuestTheme::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::CMsgProtoDefHeader& CMsgQuestTheme::_internal_header() const {
  const ::CMsgProtoDefHeader* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgProtoDefHeader&>(
      ::_CMsgProtoDefHeader_default_instance_);
}
inline const ::CMsgProtoDefHeader& CMsgQuestTheme::header() const {
  // @@protoc_insertion_point(field_get:CMsgQuestTheme.header)
  return _internal_header();
}
inline void CMsgQuestTheme::unsafe_arena_set_allocated_header(
    ::CMsgProtoDefHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgQuestTheme.header)
}
inline ::CMsgProtoDefHeader* CMsgQuestTheme::release_header() {
  _has_bits_[0] &= ~0x00000040u;
  ::CMsgProtoDefHeader* temp = header_;
  header_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgProtoDefHeader* CMsgQuestTheme::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:CMsgQuestTheme.header)
  _has_bits_[0] &= ~0x00000040u;
  ::CMsgProtoDefHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::CMsgProtoDefHeader* CMsgQuestTheme::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000040u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgProtoDefHeader>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::CMsgProtoDefHeader* CMsgQuestTheme::mutable_header() {
  // @@protoc_insertion_point(field_mutable:CMsgQuestTheme.header)
  return _internal_mutable_header();
}
inline void CMsgQuestTheme::set_allocated_header(::CMsgProtoDefHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgProtoDefHeader>::GetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:CMsgQuestTheme.header)
}

// optional string notification_res = 2;
inline bool CMsgQuestTheme::_internal_has_notification_res() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgQuestTheme::has_notification_res() const {
  return _internal_has_notification_res();
}
inline void CMsgQuestTheme::clear_notification_res() {
  notification_res_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgQuestTheme::notification_res() const {
  // @@protoc_insertion_point(field_get:CMsgQuestTheme.notification_res)
  return _internal_notification_res();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgQuestTheme::set_notification_res(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 notification_res_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgQuestTheme.notification_res)
}
inline std::string* CMsgQuestTheme::mutable_notification_res() {
  // @@protoc_insertion_point(field_mutable:CMsgQuestTheme.notification_res)
  return _internal_mutable_notification_res();
}
inline const std::string& CMsgQuestTheme::_internal_notification_res() const {
  return notification_res_.Get();
}
inline void CMsgQuestTheme::_internal_set_notification_res(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  notification_res_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgQuestTheme::_internal_mutable_notification_res() {
  _has_bits_[0] |= 0x00000001u;
  return notification_res_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgQuestTheme::release_notification_res() {
  // @@protoc_insertion_point(field_release:CMsgQuestTheme.notification_res)
  if (!_internal_has_notification_res()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return notification_res_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CMsgQuestTheme::set_allocated_notification_res(std::string* notification_res) {
  if (notification_res != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  notification_res_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), notification_res,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CMsgQuestTheme.notification_res)
}

// optional string quest_item_res = 3;
inline bool CMsgQuestTheme::_internal_has_quest_item_res() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgQuestTheme::has_quest_item_res() const {
  return _internal_has_quest_item_res();
}
inline void CMsgQuestTheme::clear_quest_item_res() {
  quest_item_res_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgQuestTheme::quest_item_res() const {
  // @@protoc_insertion_point(field_get:CMsgQuestTheme.quest_item_res)
  return _internal_quest_item_res();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgQuestTheme::set_quest_item_res(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 quest_item_res_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgQuestTheme.quest_item_res)
}
inline std::string* CMsgQuestTheme::mutable_quest_item_res() {
  // @@protoc_insertion_point(field_mutable:CMsgQuestTheme.quest_item_res)
  return _internal_mutable_quest_item_res();
}
inline const std::string& CMsgQuestTheme::_internal_quest_item_res() const {
  return quest_item_res_.Get();
}
inline void CMsgQuestTheme::_internal_set_quest_item_res(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  quest_item_res_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgQuestTheme::_internal_mutable_quest_item_res() {
  _has_bits_[0] |= 0x00000002u;
  return quest_item_res_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgQuestTheme::release_quest_item_res() {
  // @@protoc_insertion_point(field_release:CMsgQuestTheme.quest_item_res)
  if (!_internal_has_quest_item_res()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return quest_item_res_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CMsgQuestTheme::set_allocated_quest_item_res(std::string* quest_item_res) {
  if (quest_item_res != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  quest_item_res_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), quest_item_res,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CMsgQuestTheme.quest_item_res)
}

// optional string in_game_tracker_res = 4;
inline bool CMsgQuestTheme::_internal_has_in_game_tracker_res() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgQuestTheme::has_in_game_tracker_res() const {
  return _internal_has_in_game_tracker_res();
}
inline void CMsgQuestTheme::clear_in_game_tracker_res() {
  in_game_tracker_res_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CMsgQuestTheme::in_game_tracker_res() const {
  // @@protoc_insertion_point(field_get:CMsgQuestTheme.in_game_tracker_res)
  return _internal_in_game_tracker_res();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgQuestTheme::set_in_game_tracker_res(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 in_game_tracker_res_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgQuestTheme.in_game_tracker_res)
}
inline std::string* CMsgQuestTheme::mutable_in_game_tracker_res() {
  // @@protoc_insertion_point(field_mutable:CMsgQuestTheme.in_game_tracker_res)
  return _internal_mutable_in_game_tracker_res();
}
inline const std::string& CMsgQuestTheme::_internal_in_game_tracker_res() const {
  return in_game_tracker_res_.Get();
}
inline void CMsgQuestTheme::_internal_set_in_game_tracker_res(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  in_game_tracker_res_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgQuestTheme::_internal_mutable_in_game_tracker_res() {
  _has_bits_[0] |= 0x00000004u;
  return in_game_tracker_res_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgQuestTheme::release_in_game_tracker_res() {
  // @@protoc_insertion_point(field_release:CMsgQuestTheme.in_game_tracker_res)
  if (!_internal_has_in_game_tracker_res()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return in_game_tracker_res_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CMsgQuestTheme::set_allocated_in_game_tracker_res(std::string* in_game_tracker_res) {
  if (in_game_tracker_res != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  in_game_tracker_res_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), in_game_tracker_res,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CMsgQuestTheme.in_game_tracker_res)
}

// repeated .CMsgQuestTheme.WeightedStringSet give_sounds = 5;
inline int CMsgQuestTheme::_internal_give_sounds_size() const {
  return give_sounds_.size();
}
inline int CMsgQuestTheme::give_sounds_size() const {
  return _internal_give_sounds_size();
}
inline void CMsgQuestTheme::clear_give_sounds() {
  give_sounds_.Clear();
}
inline ::CMsgQuestTheme_WeightedStringSet* CMsgQuestTheme::mutable_give_sounds(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgQuestTheme.give_sounds)
  return give_sounds_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgQuestTheme_WeightedStringSet >*
CMsgQuestTheme::mutable_give_sounds() {
  // @@protoc_insertion_point(field_mutable_list:CMsgQuestTheme.give_sounds)
  return &give_sounds_;
}
inline const ::CMsgQuestTheme_WeightedStringSet& CMsgQuestTheme::_internal_give_sounds(int index) const {
  return give_sounds_.Get(index);
}
inline const ::CMsgQuestTheme_WeightedStringSet& CMsgQuestTheme::give_sounds(int index) const {
  // @@protoc_insertion_point(field_get:CMsgQuestTheme.give_sounds)
  return _internal_give_sounds(index);
}
inline ::CMsgQuestTheme_WeightedStringSet* CMsgQuestTheme::_internal_add_give_sounds() {
  return give_sounds_.Add();
}
inline ::CMsgQuestTheme_WeightedStringSet* CMsgQuestTheme::add_give_sounds() {
  // @@protoc_insertion_point(field_add:CMsgQuestTheme.give_sounds)
  return _internal_add_give_sounds();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgQuestTheme_WeightedStringSet >&
CMsgQuestTheme::give_sounds() const {
  // @@protoc_insertion_point(field_list:CMsgQuestTheme.give_sounds)
  return give_sounds_;
}

// repeated .CMsgQuestTheme.WeightedStringSet complete_sounds = 6;
inline int CMsgQuestTheme::_internal_complete_sounds_size() const {
  return complete_sounds_.size();
}
inline int CMsgQuestTheme::complete_sounds_size() const {
  return _internal_complete_sounds_size();
}
inline void CMsgQuestTheme::clear_complete_sounds() {
  complete_sounds_.Clear();
}
inline ::CMsgQuestTheme_WeightedStringSet* CMsgQuestTheme::mutable_complete_sounds(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgQuestTheme.complete_sounds)
  return complete_sounds_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgQuestTheme_WeightedStringSet >*
CMsgQuestTheme::mutable_complete_sounds() {
  // @@protoc_insertion_point(field_mutable_list:CMsgQuestTheme.complete_sounds)
  return &complete_sounds_;
}
inline const ::CMsgQuestTheme_WeightedStringSet& CMsgQuestTheme::_internal_complete_sounds(int index) const {
  return complete_sounds_.Get(index);
}
inline const ::CMsgQuestTheme_WeightedStringSet& CMsgQuestTheme::complete_sounds(int index) const {
  // @@protoc_insertion_point(field_get:CMsgQuestTheme.complete_sounds)
  return _internal_complete_sounds(index);
}
inline ::CMsgQuestTheme_WeightedStringSet* CMsgQuestTheme::_internal_add_complete_sounds() {
  return complete_sounds_.Add();
}
inline ::CMsgQuestTheme_WeightedStringSet* CMsgQuestTheme::add_complete_sounds() {
  // @@protoc_insertion_point(field_add:CMsgQuestTheme.complete_sounds)
  return _internal_add_complete_sounds();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgQuestTheme_WeightedStringSet >&
CMsgQuestTheme::complete_sounds() const {
  // @@protoc_insertion_point(field_list:CMsgQuestTheme.complete_sounds)
  return complete_sounds_;
}

// repeated .CMsgQuestTheme.WeightedStringSet fully_complete_sounds = 7;
inline int CMsgQuestTheme::_internal_fully_complete_sounds_size() const {
  return fully_complete_sounds_.size();
}
inline int CMsgQuestTheme::fully_complete_sounds_size() const {
  return _internal_fully_complete_sounds_size();
}
inline void CMsgQuestTheme::clear_fully_complete_sounds() {
  fully_complete_sounds_.Clear();
}
inline ::CMsgQuestTheme_WeightedStringSet* CMsgQuestTheme::mutable_fully_complete_sounds(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgQuestTheme.fully_complete_sounds)
  return fully_complete_sounds_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgQuestTheme_WeightedStringSet >*
CMsgQuestTheme::mutable_fully_complete_sounds() {
  // @@protoc_insertion_point(field_mutable_list:CMsgQuestTheme.fully_complete_sounds)
  return &fully_complete_sounds_;
}
inline const ::CMsgQuestTheme_WeightedStringSet& CMsgQuestTheme::_internal_fully_complete_sounds(int index) const {
  return fully_complete_sounds_.Get(index);
}
inline const ::CMsgQuestTheme_WeightedStringSet& CMsgQuestTheme::fully_complete_sounds(int index) const {
  // @@protoc_insertion_point(field_get:CMsgQuestTheme.fully_complete_sounds)
  return _internal_fully_complete_sounds(index);
}
inline ::CMsgQuestTheme_WeightedStringSet* CMsgQuestTheme::_internal_add_fully_complete_sounds() {
  return fully_complete_sounds_.Add();
}
inline ::CMsgQuestTheme_WeightedStringSet* CMsgQuestTheme::add_fully_complete_sounds() {
  // @@protoc_insertion_point(field_add:CMsgQuestTheme.fully_complete_sounds)
  return _internal_add_fully_complete_sounds();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgQuestTheme_WeightedStringSet >&
CMsgQuestTheme::fully_complete_sounds() const {
  // @@protoc_insertion_point(field_list:CMsgQuestTheme.fully_complete_sounds)
  return fully_complete_sounds_;
}

// optional string reward_sound = 8;
inline bool CMsgQuestTheme::_internal_has_reward_sound() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgQuestTheme::has_reward_sound() const {
  return _internal_has_reward_sound();
}
inline void CMsgQuestTheme::clear_reward_sound() {
  reward_sound_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CMsgQuestTheme::reward_sound() const {
  // @@protoc_insertion_point(field_get:CMsgQuestTheme.reward_sound)
  return _internal_reward_sound();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgQuestTheme::set_reward_sound(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 reward_sound_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgQuestTheme.reward_sound)
}
inline std::string* CMsgQuestTheme::mutable_reward_sound() {
  // @@protoc_insertion_point(field_mutable:CMsgQuestTheme.reward_sound)
  return _internal_mutable_reward_sound();
}
inline const std::string& CMsgQuestTheme::_internal_reward_sound() const {
  return reward_sound_.Get();
}
inline void CMsgQuestTheme::_internal_set_reward_sound(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  reward_sound_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgQuestTheme::_internal_mutable_reward_sound() {
  _has_bits_[0] |= 0x00000008u;
  return reward_sound_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgQuestTheme::release_reward_sound() {
  // @@protoc_insertion_point(field_release:CMsgQuestTheme.reward_sound)
  if (!_internal_has_reward_sound()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return reward_sound_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CMsgQuestTheme::set_allocated_reward_sound(std::string* reward_sound) {
  if (reward_sound != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  reward_sound_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reward_sound,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CMsgQuestTheme.reward_sound)
}

// optional string discard_sound = 9;
inline bool CMsgQuestTheme::_internal_has_discard_sound() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgQuestTheme::has_discard_sound() const {
  return _internal_has_discard_sound();
}
inline void CMsgQuestTheme::clear_discard_sound() {
  discard_sound_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& CMsgQuestTheme::discard_sound() const {
  // @@protoc_insertion_point(field_get:CMsgQuestTheme.discard_sound)
  return _internal_discard_sound();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgQuestTheme::set_discard_sound(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000010u;
 discard_sound_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgQuestTheme.discard_sound)
}
inline std::string* CMsgQuestTheme::mutable_discard_sound() {
  // @@protoc_insertion_point(field_mutable:CMsgQuestTheme.discard_sound)
  return _internal_mutable_discard_sound();
}
inline const std::string& CMsgQuestTheme::_internal_discard_sound() const {
  return discard_sound_.Get();
}
inline void CMsgQuestTheme::_internal_set_discard_sound(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  discard_sound_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgQuestTheme::_internal_mutable_discard_sound() {
  _has_bits_[0] |= 0x00000010u;
  return discard_sound_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgQuestTheme::release_discard_sound() {
  // @@protoc_insertion_point(field_release:CMsgQuestTheme.discard_sound)
  if (!_internal_has_discard_sound()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return discard_sound_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CMsgQuestTheme::set_allocated_discard_sound(std::string* discard_sound) {
  if (discard_sound != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  discard_sound_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), discard_sound,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CMsgQuestTheme.discard_sound)
}

// optional string reveal_sound = 10;
inline bool CMsgQuestTheme::_internal_has_reveal_sound() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgQuestTheme::has_reveal_sound() const {
  return _internal_has_reveal_sound();
}
inline void CMsgQuestTheme::clear_reveal_sound() {
  reveal_sound_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& CMsgQuestTheme::reveal_sound() const {
  // @@protoc_insertion_point(field_get:CMsgQuestTheme.reveal_sound)
  return _internal_reveal_sound();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgQuestTheme::set_reveal_sound(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000020u;
 reveal_sound_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgQuestTheme.reveal_sound)
}
inline std::string* CMsgQuestTheme::mutable_reveal_sound() {
  // @@protoc_insertion_point(field_mutable:CMsgQuestTheme.reveal_sound)
  return _internal_mutable_reveal_sound();
}
inline const std::string& CMsgQuestTheme::_internal_reveal_sound() const {
  return reveal_sound_.Get();
}
inline void CMsgQuestTheme::_internal_set_reveal_sound(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  reveal_sound_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgQuestTheme::_internal_mutable_reveal_sound() {
  _has_bits_[0] |= 0x00000020u;
  return reveal_sound_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgQuestTheme::release_reveal_sound() {
  // @@protoc_insertion_point(field_release:CMsgQuestTheme.reveal_sound)
  if (!_internal_has_reveal_sound()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return reveal_sound_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CMsgQuestTheme::set_allocated_reveal_sound(std::string* reveal_sound) {
  if (reveal_sound != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  reveal_sound_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reveal_sound,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CMsgQuestTheme.reveal_sound)
}

// -------------------------------------------------------------------

// CMsgQuestMapNodeCondition_NodeState

// optional uint32 bonus_objectives_required = 1 [default = 0, (.display_name) = "Bonus Required", (.comment) = "Number of bonus objectives required, on top of the primary objective"];
inline bool CMsgQuestMapNodeCondition_NodeState::_internal_has_bonus_objectives_required() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgQuestMapNodeCondition_NodeState::has_bonus_objectives_required() const {
  return _internal_has_bonus_objectives_required();
}
inline void CMsgQuestMapNodeCondition_NodeState::clear_bonus_objectives_required() {
  bonus_objectives_required_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgQuestMapNodeCondition_NodeState::_internal_bonus_objectives_required() const {
  return bonus_objectives_required_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgQuestMapNodeCondition_NodeState::bonus_objectives_required() const {
  // @@protoc_insertion_point(field_get:CMsgQuestMapNodeCondition_NodeState.bonus_objectives_required)
  return _internal_bonus_objectives_required();
}
inline void CMsgQuestMapNodeCondition_NodeState::_internal_set_bonus_objectives_required(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  bonus_objectives_required_ = value;
}
inline void CMsgQuestMapNodeCondition_NodeState::set_bonus_objectives_required(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_bonus_objectives_required(value);
  // @@protoc_insertion_point(field_set:CMsgQuestMapNodeCondition_NodeState.bonus_objectives_required)
}

// required .CMsgProtoDefID target_node_defid = 2 [(.valid_type) = DEF_TYPE_QUEST_MAP_NODE, (.display_name) = "Target Node", (.comment) = "Which node is required to have the above number of medals"];
inline bool CMsgQuestMapNodeCondition_NodeState::_internal_has_target_node_defid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || target_node_defid_ != nullptr);
  return value;
}
inline bool CMsgQuestMapNodeCondition_NodeState::has_target_node_defid() const {
  return _internal_has_target_node_defid();
}
inline void CMsgQuestMapNodeCondition_NodeState::clear_target_node_defid() {
  if (target_node_defid_ != nullptr) target_node_defid_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgProtoDefID& CMsgQuestMapNodeCondition_NodeState::_internal_target_node_defid() const {
  const ::CMsgProtoDefID* p = target_node_defid_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgProtoDefID&>(
      ::_CMsgProtoDefID_default_instance_);
}
inline const ::CMsgProtoDefID& CMsgQuestMapNodeCondition_NodeState::target_node_defid() const {
  // @@protoc_insertion_point(field_get:CMsgQuestMapNodeCondition_NodeState.target_node_defid)
  return _internal_target_node_defid();
}
inline void CMsgQuestMapNodeCondition_NodeState::unsafe_arena_set_allocated_target_node_defid(
    ::CMsgProtoDefID* target_node_defid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_node_defid_);
  }
  target_node_defid_ = target_node_defid;
  if (target_node_defid) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgQuestMapNodeCondition_NodeState.target_node_defid)
}
inline ::CMsgProtoDefID* CMsgQuestMapNodeCondition_NodeState::release_target_node_defid() {
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgProtoDefID* temp = target_node_defid_;
  target_node_defid_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgProtoDefID* CMsgQuestMapNodeCondition_NodeState::unsafe_arena_release_target_node_defid() {
  // @@protoc_insertion_point(field_release:CMsgQuestMapNodeCondition_NodeState.target_node_defid)
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgProtoDefID* temp = target_node_defid_;
  target_node_defid_ = nullptr;
  return temp;
}
inline ::CMsgProtoDefID* CMsgQuestMapNodeCondition_NodeState::_internal_mutable_target_node_defid() {
  _has_bits_[0] |= 0x00000001u;
  if (target_node_defid_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgProtoDefID>(GetArenaForAllocation());
    target_node_defid_ = p;
  }
  return target_node_defid_;
}
inline ::CMsgProtoDefID* CMsgQuestMapNodeCondition_NodeState::mutable_target_node_defid() {
  // @@protoc_insertion_point(field_mutable:CMsgQuestMapNodeCondition_NodeState.target_node_defid)
  return _internal_mutable_target_node_defid();
}
inline void CMsgQuestMapNodeCondition_NodeState::set_allocated_target_node_defid(::CMsgProtoDefID* target_node_defid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete target_node_defid_;
  }
  if (target_node_defid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgProtoDefID>::GetOwningArena(target_node_defid);
    if (message_arena != submessage_arena) {
      target_node_defid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target_node_defid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  target_node_defid_ = target_node_defid;
  // @@protoc_insertion_point(field_set_allocated:CMsgQuestMapNodeCondition_NodeState.target_node_defid)
}

// -------------------------------------------------------------------

// CMsgQuestMapNodeCondition_Logic

// required .LogicalOperation operation = 1 [default = AND, (.display_name) = "Logic", (.comment) = "Logical operation"];
inline bool CMsgQuestMapNodeCondition_Logic::_internal_has_operation() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgQuestMapNodeCondition_Logic::has_operation() const {
  return _internal_has_operation();
}
inline void CMsgQuestMapNodeCondition_Logic::clear_operation() {
  operation_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::LogicalOperation CMsgQuestMapNodeCondition_Logic::_internal_operation() const {
  return static_cast< ::LogicalOperation >(operation_);
}
inline ::LogicalOperation CMsgQuestMapNodeCondition_Logic::operation() const {
  // @@protoc_insertion_point(field_get:CMsgQuestMapNodeCondition_Logic.operation)
  return _internal_operation();
}
inline void CMsgQuestMapNodeCondition_Logic::_internal_set_operation(::LogicalOperation value) {
  assert(::LogicalOperation_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  operation_ = value;
}
inline void CMsgQuestMapNodeCondition_Logic::set_operation(::LogicalOperation value) {
  _internal_set_operation(value);
  // @@protoc_insertion_point(field_set:CMsgQuestMapNodeCondition_Logic.operation)
}

// repeated .CMsgQuestMapNodeCondition sub_conditions = 2 [(.display_name) = "Operands", (.comment) = "Definitions to use in the logical operation"];
inline int CMsgQuestMapNodeCondition_Logic::_internal_sub_conditions_size() const {
  return sub_conditions_.size();
}
inline int CMsgQuestMapNodeCondition_Logic::sub_conditions_size() const {
  return _internal_sub_conditions_size();
}
inline void CMsgQuestMapNodeCondition_Logic::clear_sub_conditions() {
  sub_conditions_.Clear();
}
inline ::CMsgQuestMapNodeCondition* CMsgQuestMapNodeCondition_Logic::mutable_sub_conditions(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgQuestMapNodeCondition_Logic.sub_conditions)
  return sub_conditions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgQuestMapNodeCondition >*
CMsgQuestMapNodeCondition_Logic::mutable_sub_conditions() {
  // @@protoc_insertion_point(field_mutable_list:CMsgQuestMapNodeCondition_Logic.sub_conditions)
  return &sub_conditions_;
}
inline const ::CMsgQuestMapNodeCondition& CMsgQuestMapNodeCondition_Logic::_internal_sub_conditions(int index) const {
  return sub_conditions_.Get(index);
}
inline const ::CMsgQuestMapNodeCondition& CMsgQuestMapNodeCondition_Logic::sub_conditions(int index) const {
  // @@protoc_insertion_point(field_get:CMsgQuestMapNodeCondition_Logic.sub_conditions)
  return _internal_sub_conditions(index);
}
inline ::CMsgQuestMapNodeCondition* CMsgQuestMapNodeCondition_Logic::_internal_add_sub_conditions() {
  return sub_conditions_.Add();
}
inline ::CMsgQuestMapNodeCondition* CMsgQuestMapNodeCondition_Logic::add_sub_conditions() {
  // @@protoc_insertion_point(field_add:CMsgQuestMapNodeCondition_Logic.sub_conditions)
  return _internal_add_sub_conditions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgQuestMapNodeCondition >&
CMsgQuestMapNodeCondition_Logic::sub_conditions() const {
  // @@protoc_insertion_point(field_list:CMsgQuestMapNodeCondition_Logic.sub_conditions)
  return sub_conditions_;
}

// -------------------------------------------------------------------

// CMsgQuestMapNodeCondition

// .CMsgQuestMapNodeCondition_NodeState node_state = 1 [(.display_name) = "Node State Condition", (.comment) = "Returns true if a specific node has a required number of medals"];
inline bool CMsgQuestMapNodeCondition::_internal_has_node_state() const {
  return operation_case() == kNodeState;
}
inline bool CMsgQuestMapNodeCondition::has_node_state() const {
  return _internal_has_node_state();
}
inline void CMsgQuestMapNodeCondition::set_has_node_state() {
  _oneof_case_[0] = kNodeState;
}
inline void CMsgQuestMapNodeCondition::clear_node_state() {
  if (_internal_has_node_state()) {
    if (GetArenaForAllocation() == nullptr) {
      delete operation_.node_state_;
    }
    clear_has_operation();
  }
}
inline ::CMsgQuestMapNodeCondition_NodeState* CMsgQuestMapNodeCondition::release_node_state() {
  // @@protoc_insertion_point(field_release:CMsgQuestMapNodeCondition.node_state)
  if (_internal_has_node_state()) {
    clear_has_operation();
      ::CMsgQuestMapNodeCondition_NodeState* temp = operation_.node_state_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    operation_.node_state_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CMsgQuestMapNodeCondition_NodeState& CMsgQuestMapNodeCondition::_internal_node_state() const {
  return _internal_has_node_state()
      ? *operation_.node_state_
      : reinterpret_cast< ::CMsgQuestMapNodeCondition_NodeState&>(::_CMsgQuestMapNodeCondition_NodeState_default_instance_);
}
inline const ::CMsgQuestMapNodeCondition_NodeState& CMsgQuestMapNodeCondition::node_state() const {
  // @@protoc_insertion_point(field_get:CMsgQuestMapNodeCondition.node_state)
  return _internal_node_state();
}
inline ::CMsgQuestMapNodeCondition_NodeState* CMsgQuestMapNodeCondition::unsafe_arena_release_node_state() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CMsgQuestMapNodeCondition.node_state)
  if (_internal_has_node_state()) {
    clear_has_operation();
    ::CMsgQuestMapNodeCondition_NodeState* temp = operation_.node_state_;
    operation_.node_state_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CMsgQuestMapNodeCondition::unsafe_arena_set_allocated_node_state(::CMsgQuestMapNodeCondition_NodeState* node_state) {
  clear_operation();
  if (node_state) {
    set_has_node_state();
    operation_.node_state_ = node_state;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgQuestMapNodeCondition.node_state)
}
inline ::CMsgQuestMapNodeCondition_NodeState* CMsgQuestMapNodeCondition::_internal_mutable_node_state() {
  if (!_internal_has_node_state()) {
    clear_operation();
    set_has_node_state();
    operation_.node_state_ = CreateMaybeMessage< ::CMsgQuestMapNodeCondition_NodeState >(GetArenaForAllocation());
  }
  return operation_.node_state_;
}
inline ::CMsgQuestMapNodeCondition_NodeState* CMsgQuestMapNodeCondition::mutable_node_state() {
  // @@protoc_insertion_point(field_mutable:CMsgQuestMapNodeCondition.node_state)
  return _internal_mutable_node_state();
}

// .CMsgQuestMapNodeCondition_Logic logical = 2 [(.display_name) = "Logical Condition", (.comment) = "Performs a specified logical operation to all sub conditions"];
inline bool CMsgQuestMapNodeCondition::_internal_has_logical() const {
  return operation_case() == kLogical;
}
inline bool CMsgQuestMapNodeCondition::has_logical() const {
  return _internal_has_logical();
}
inline void CMsgQuestMapNodeCondition::set_has_logical() {
  _oneof_case_[0] = kLogical;
}
inline void CMsgQuestMapNodeCondition::clear_logical() {
  if (_internal_has_logical()) {
    if (GetArenaForAllocation() == nullptr) {
      delete operation_.logical_;
    }
    clear_has_operation();
  }
}
inline ::CMsgQuestMapNodeCondition_Logic* CMsgQuestMapNodeCondition::release_logical() {
  // @@protoc_insertion_point(field_release:CMsgQuestMapNodeCondition.logical)
  if (_internal_has_logical()) {
    clear_has_operation();
      ::CMsgQuestMapNodeCondition_Logic* temp = operation_.logical_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    operation_.logical_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CMsgQuestMapNodeCondition_Logic& CMsgQuestMapNodeCondition::_internal_logical() const {
  return _internal_has_logical()
      ? *operation_.logical_
      : reinterpret_cast< ::CMsgQuestMapNodeCondition_Logic&>(::_CMsgQuestMapNodeCondition_Logic_default_instance_);
}
inline const ::CMsgQuestMapNodeCondition_Logic& CMsgQuestMapNodeCondition::logical() const {
  // @@protoc_insertion_point(field_get:CMsgQuestMapNodeCondition.logical)
  return _internal_logical();
}
inline ::CMsgQuestMapNodeCondition_Logic* CMsgQuestMapNodeCondition::unsafe_arena_release_logical() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CMsgQuestMapNodeCondition.logical)
  if (_internal_has_logical()) {
    clear_has_operation();
    ::CMsgQuestMapNodeCondition_Logic* temp = operation_.logical_;
    operation_.logical_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CMsgQuestMapNodeCondition::unsafe_arena_set_allocated_logical(::CMsgQuestMapNodeCondition_Logic* logical) {
  clear_operation();
  if (logical) {
    set_has_logical();
    operation_.logical_ = logical;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgQuestMapNodeCondition.logical)
}
inline ::CMsgQuestMapNodeCondition_Logic* CMsgQuestMapNodeCondition::_internal_mutable_logical() {
  if (!_internal_has_logical()) {
    clear_operation();
    set_has_logical();
    operation_.logical_ = CreateMaybeMessage< ::CMsgQuestMapNodeCondition_Logic >(GetArenaForAllocation());
  }
  return operation_.logical_;
}
inline ::CMsgQuestMapNodeCondition_Logic* CMsgQuestMapNodeCondition::mutable_logical() {
  // @@protoc_insertion_point(field_mutable:CMsgQuestMapNodeCondition.logical)
  return _internal_mutable_logical();
}

inline bool CMsgQuestMapNodeCondition::has_operation() const {
  return operation_case() != OPERATION_NOT_SET;
}
inline void CMsgQuestMapNodeCondition::clear_has_operation() {
  _oneof_case_[0] = OPERATION_NOT_SET;
}
inline CMsgQuestMapNodeCondition::OperationCase CMsgQuestMapNodeCondition::operation_case() const {
  return CMsgQuestMapNodeCondition::OperationCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// CMsgHeaderOnly

// required .CMsgProtoDefHeader header = 1;
inline bool CMsgHeaderOnly::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool CMsgHeaderOnly::has_header() const {
  return _internal_has_header();
}
inline void CMsgHeaderOnly::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgProtoDefHeader& CMsgHeaderOnly::_internal_header() const {
  const ::CMsgProtoDefHeader* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgProtoDefHeader&>(
      ::_CMsgProtoDefHeader_default_instance_);
}
inline const ::CMsgProtoDefHeader& CMsgHeaderOnly::header() const {
  // @@protoc_insertion_point(field_get:CMsgHeaderOnly.header)
  return _internal_header();
}
inline void CMsgHeaderOnly::unsafe_arena_set_allocated_header(
    ::CMsgProtoDefHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgHeaderOnly.header)
}
inline ::CMsgProtoDefHeader* CMsgHeaderOnly::release_header() {
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgProtoDefHeader* temp = header_;
  header_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgProtoDefHeader* CMsgHeaderOnly::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:CMsgHeaderOnly.header)
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgProtoDefHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::CMsgProtoDefHeader* CMsgHeaderOnly::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000001u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgProtoDefHeader>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::CMsgProtoDefHeader* CMsgHeaderOnly::mutable_header() {
  // @@protoc_insertion_point(field_mutable:CMsgHeaderOnly.header)
  return _internal_mutable_header();
}
inline void CMsgHeaderOnly::set_allocated_header(::CMsgProtoDefHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgProtoDefHeader>::GetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:CMsgHeaderOnly.header)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::CMsgQuestObjectiveDef_ETF2GameModes> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgQuestObjectiveDef_ETF2GameModes>() {
  return ::CMsgQuestObjectiveDef_ETF2GameModes_descriptor();
}
template <> struct is_proto_enum< ::CMsgQuestObjectiveDef_ETF2Conditions> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgQuestObjectiveDef_ETF2Conditions>() {
  return ::CMsgQuestObjectiveDef_ETF2Conditions_descriptor();
}
template <> struct is_proto_enum< ::CMsgQuestObjectiveDef_ETF2Team> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgQuestObjectiveDef_ETF2Team>() {
  return ::CMsgQuestObjectiveDef_ETF2Team_descriptor();
}
template <> struct is_proto_enum< ::LogicalOperation> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LogicalOperation>() {
  return ::LogicalOperation_descriptor();
}
template <> struct is_proto_enum< ::EValueDefinitionSource> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EValueDefinitionSource>() {
  return ::EValueDefinitionSource_descriptor();
}
template <> struct is_proto_enum< ::ProtoDefTypes> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProtoDefTypes>() {
  return ::ProtoDefTypes_descriptor();
}
template <> struct is_proto_enum< ::EQuestPoints> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EQuestPoints>() {
  return ::EQuestPoints_descriptor();
}
template <> struct is_proto_enum< ::EVarFieldType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EVarFieldType>() {
  return ::EVarFieldType_descriptor();
}
template <> struct is_proto_enum< ::ENodeCashReward> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ENodeCashReward>() {
  return ::ENodeCashReward_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tf_5fproto_5fdef_5fmessages_2eproto
