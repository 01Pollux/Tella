// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tf_gcmessages.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tf_5fgcmessages_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tf_5fgcmessages_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "steammessages.pb.h"
#include "base_gcmessages.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tf_5fgcmessages_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tf_5fgcmessages_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[192]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tf_5fgcmessages_2eproto;
class CAttribute_DynamicRecipeComponent;
struct CAttribute_DynamicRecipeComponentDefaultTypeInternal;
extern CAttribute_DynamicRecipeComponentDefaultTypeInternal _CAttribute_DynamicRecipeComponent_default_instance_;
class CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT;
struct CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUTDefaultTypeInternal;
extern CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUTDefaultTypeInternal _CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT_default_instance_;
class CAttribute_ItemSlotCriteria;
struct CAttribute_ItemSlotCriteriaDefaultTypeInternal;
extern CAttribute_ItemSlotCriteriaDefaultTypeInternal _CAttribute_ItemSlotCriteria_default_instance_;
class CAttribute_String;
struct CAttribute_StringDefaultTypeInternal;
extern CAttribute_StringDefaultTypeInternal _CAttribute_String_default_instance_;
class CAttribute_WorldItemPlacement;
struct CAttribute_WorldItemPlacementDefaultTypeInternal;
extern CAttribute_WorldItemPlacementDefaultTypeInternal _CAttribute_WorldItemPlacement_default_instance_;
class CEconItemPreviewDataBlock;
struct CEconItemPreviewDataBlockDefaultTypeInternal;
extern CEconItemPreviewDataBlockDefaultTypeInternal _CEconItemPreviewDataBlock_default_instance_;
class CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate;
struct CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdateDefaultTypeInternal;
extern CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdateDefaultTypeInternal _CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate_default_instance_;
class CGCMsgGC_War_GlobalStatsResponse;
struct CGCMsgGC_War_GlobalStatsResponseDefaultTypeInternal;
extern CGCMsgGC_War_GlobalStatsResponseDefaultTypeInternal _CGCMsgGC_War_GlobalStatsResponse_default_instance_;
class CGCMsgGC_War_GlobalStatsResponse_SideScore;
struct CGCMsgGC_War_GlobalStatsResponse_SideScoreDefaultTypeInternal;
extern CGCMsgGC_War_GlobalStatsResponse_SideScoreDefaultTypeInternal _CGCMsgGC_War_GlobalStatsResponse_SideScore_default_instance_;
class CGCMsgGC_War_IndividualUpdate;
struct CGCMsgGC_War_IndividualUpdateDefaultTypeInternal;
extern CGCMsgGC_War_IndividualUpdateDefaultTypeInternal _CGCMsgGC_War_IndividualUpdate_default_instance_;
class CGCMsgGC_War_JoinWar;
struct CGCMsgGC_War_JoinWarDefaultTypeInternal;
extern CGCMsgGC_War_JoinWarDefaultTypeInternal _CGCMsgGC_War_JoinWar_default_instance_;
class CGCMsgGC_War_RequestGlobalStats;
struct CGCMsgGC_War_RequestGlobalStatsDefaultTypeInternal;
extern CGCMsgGC_War_RequestGlobalStatsDefaultTypeInternal _CGCMsgGC_War_RequestGlobalStats_default_instance_;
class CGCMsgTFHelloResponse;
struct CGCMsgTFHelloResponseDefaultTypeInternal;
extern CGCMsgTFHelloResponseDefaultTypeInternal _CGCMsgTFHelloResponse_default_instance_;
class CGCMsgTFSync;
struct CGCMsgTFSyncDefaultTypeInternal;
extern CGCMsgTFSyncDefaultTypeInternal _CGCMsgTFSync_default_instance_;
class CGCMsgTFSyncEx;
struct CGCMsgTFSyncExDefaultTypeInternal;
extern CGCMsgTFSyncExDefaultTypeInternal _CGCMsgTFSyncEx_default_instance_;
class CGCMsg_WorldItemPlacement_Update;
struct CGCMsg_WorldItemPlacement_UpdateDefaultTypeInternal;
extern CGCMsg_WorldItemPlacement_UpdateDefaultTypeInternal _CGCMsg_WorldItemPlacement_Update_default_instance_;
class CMsgAcceptLobbyInvite;
struct CMsgAcceptLobbyInviteDefaultTypeInternal;
extern CMsgAcceptLobbyInviteDefaultTypeInternal _CMsgAcceptLobbyInvite_default_instance_;
class CMsgAcceptLobbyInviteReply;
struct CMsgAcceptLobbyInviteReplyDefaultTypeInternal;
extern CMsgAcceptLobbyInviteReplyDefaultTypeInternal _CMsgAcceptLobbyInviteReply_default_instance_;
class CMsgAcknowledgeXP;
struct CMsgAcknowledgeXPDefaultTypeInternal;
extern CMsgAcknowledgeXPDefaultTypeInternal _CMsgAcknowledgeXP_default_instance_;
class CMsgConsumePaintkit;
struct CMsgConsumePaintkitDefaultTypeInternal;
extern CMsgConsumePaintkitDefaultTypeInternal _CMsgConsumePaintkit_default_instance_;
class CMsgExitMatchmaking;
struct CMsgExitMatchmakingDefaultTypeInternal;
extern CMsgExitMatchmakingDefaultTypeInternal _CMsgExitMatchmaking_default_instance_;
class CMsgGCChangeMatchPlayerTeamsRequest;
struct CMsgGCChangeMatchPlayerTeamsRequestDefaultTypeInternal;
extern CMsgGCChangeMatchPlayerTeamsRequestDefaultTypeInternal _CMsgGCChangeMatchPlayerTeamsRequest_default_instance_;
class CMsgGCChangeMatchPlayerTeamsRequest_Member;
struct CMsgGCChangeMatchPlayerTeamsRequest_MemberDefaultTypeInternal;
extern CMsgGCChangeMatchPlayerTeamsRequest_MemberDefaultTypeInternal _CMsgGCChangeMatchPlayerTeamsRequest_Member_default_instance_;
class CMsgGCChangeMatchPlayerTeamsResponse;
struct CMsgGCChangeMatchPlayerTeamsResponseDefaultTypeInternal;
extern CMsgGCChangeMatchPlayerTeamsResponseDefaultTypeInternal _CMsgGCChangeMatchPlayerTeamsResponse_default_instance_;
class CMsgGCDataCenterPing_Update;
struct CMsgGCDataCenterPing_UpdateDefaultTypeInternal;
extern CMsgGCDataCenterPing_UpdateDefaultTypeInternal _CMsgGCDataCenterPing_Update_default_instance_;
class CMsgGCDataCenterPing_Update_PingEntry;
struct CMsgGCDataCenterPing_Update_PingEntryDefaultTypeInternal;
extern CMsgGCDataCenterPing_Update_PingEntryDefaultTypeInternal _CMsgGCDataCenterPing_Update_PingEntry_default_instance_;
class CMsgGCDataCenterPopulation;
struct CMsgGCDataCenterPopulationDefaultTypeInternal;
extern CMsgGCDataCenterPopulationDefaultTypeInternal _CMsgGCDataCenterPopulation_default_instance_;
class CMsgGCMatchGroupDataCenterPopulation;
struct CMsgGCMatchGroupDataCenterPopulationDefaultTypeInternal;
extern CMsgGCMatchGroupDataCenterPopulationDefaultTypeInternal _CMsgGCMatchGroupDataCenterPopulation_default_instance_;
class CMsgGCMatchHistoryLoad;
struct CMsgGCMatchHistoryLoadDefaultTypeInternal;
extern CMsgGCMatchHistoryLoadDefaultTypeInternal _CMsgGCMatchHistoryLoad_default_instance_;
class CMsgGCMatchMakerStatsResponse;
struct CMsgGCMatchMakerStatsResponseDefaultTypeInternal;
extern CMsgGCMatchMakerStatsResponseDefaultTypeInternal _CMsgGCMatchMakerStatsResponse_default_instance_;
class CMsgGCNewMatchForLobbyRequest;
struct CMsgGCNewMatchForLobbyRequestDefaultTypeInternal;
extern CMsgGCNewMatchForLobbyRequestDefaultTypeInternal _CMsgGCNewMatchForLobbyRequest_default_instance_;
class CMsgGCNewMatchForLobbyResponse;
struct CMsgGCNewMatchForLobbyResponseDefaultTypeInternal;
extern CMsgGCNewMatchForLobbyResponseDefaultTypeInternal _CMsgGCNewMatchForLobbyResponse_default_instance_;
class CMsgGCNotification;
struct CMsgGCNotificationDefaultTypeInternal;
extern CMsgGCNotificationDefaultTypeInternal _CMsgGCNotification_default_instance_;
class CMsgGCNotificationQueue;
struct CMsgGCNotificationQueueDefaultTypeInternal;
extern CMsgGCNotificationQueueDefaultTypeInternal _CMsgGCNotificationQueue_default_instance_;
class CMsgGCQuestComplete_Debug;
struct CMsgGCQuestComplete_DebugDefaultTypeInternal;
extern CMsgGCQuestComplete_DebugDefaultTypeInternal _CMsgGCQuestComplete_Debug_default_instance_;
class CMsgGCQuestDevGive;
struct CMsgGCQuestDevGiveDefaultTypeInternal;
extern CMsgGCQuestDevGiveDefaultTypeInternal _CMsgGCQuestDevGive_default_instance_;
class CMsgGCQuestIdentify;
struct CMsgGCQuestIdentifyDefaultTypeInternal;
extern CMsgGCQuestIdentifyDefaultTypeInternal _CMsgGCQuestIdentify_default_instance_;
class CMsgGCQuestMapPurchaseReward;
struct CMsgGCQuestMapPurchaseRewardDefaultTypeInternal;
extern CMsgGCQuestMapPurchaseRewardDefaultTypeInternal _CMsgGCQuestMapPurchaseReward_default_instance_;
class CMsgGCQuestMapUnlockNode;
struct CMsgGCQuestMapUnlockNodeDefaultTypeInternal;
extern CMsgGCQuestMapUnlockNodeDefaultTypeInternal _CMsgGCQuestMapUnlockNode_default_instance_;
class CMsgGCQuestMap_Debug;
struct CMsgGCQuestMap_DebugDefaultTypeInternal;
extern CMsgGCQuestMap_DebugDefaultTypeInternal _CMsgGCQuestMap_Debug_default_instance_;
class CMsgGCQuestNodeTurnIn;
struct CMsgGCQuestNodeTurnInDefaultTypeInternal;
extern CMsgGCQuestNodeTurnInDefaultTypeInternal _CMsgGCQuestNodeTurnIn_default_instance_;
class CMsgGCQuestResponse;
struct CMsgGCQuestResponseDefaultTypeInternal;
extern CMsgGCQuestResponseDefaultTypeInternal _CMsgGCQuestResponse_default_instance_;
class CMsgGCRequestMatchMakerStats;
struct CMsgGCRequestMatchMakerStatsDefaultTypeInternal;
extern CMsgGCRequestMatchMakerStatsDefaultTypeInternal _CMsgGCRequestMatchMakerStats_default_instance_;
class CMsgGCSetDisablePartyQuestProgress;
struct CMsgGCSetDisablePartyQuestProgressDefaultTypeInternal;
extern CMsgGCSetDisablePartyQuestProgressDefaultTypeInternal _CMsgGCSetDisablePartyQuestProgress_default_instance_;
class CMsgGCSurveyRequest;
struct CMsgGCSurveyRequestDefaultTypeInternal;
extern CMsgGCSurveyRequestDefaultTypeInternal _CMsgGCSurveyRequest_default_instance_;
class CMsgGCSurveyResponse;
struct CMsgGCSurveyResponseDefaultTypeInternal;
extern CMsgGCSurveyResponseDefaultTypeInternal _CMsgGCSurveyResponse_default_instance_;
class CMsgGCTFSpecificItemBroadcast;
struct CMsgGCTFSpecificItemBroadcastDefaultTypeInternal;
extern CMsgGCTFSpecificItemBroadcastDefaultTypeInternal _CMsgGCTFSpecificItemBroadcast_default_instance_;
class CMsgGC_Client2GCEconPreviewDataBlockRequest;
struct CMsgGC_Client2GCEconPreviewDataBlockRequestDefaultTypeInternal;
extern CMsgGC_Client2GCEconPreviewDataBlockRequestDefaultTypeInternal _CMsgGC_Client2GCEconPreviewDataBlockRequest_default_instance_;
class CMsgGC_Client2GCEconPreviewDataBlockResponse;
struct CMsgGC_Client2GCEconPreviewDataBlockResponseDefaultTypeInternal;
extern CMsgGC_Client2GCEconPreviewDataBlockResponseDefaultTypeInternal _CMsgGC_Client2GCEconPreviewDataBlockResponse_default_instance_;
class CMsgGC_Client_UseServerModificationItem;
struct CMsgGC_Client_UseServerModificationItemDefaultTypeInternal;
extern CMsgGC_Client_UseServerModificationItemDefaultTypeInternal _CMsgGC_Client_UseServerModificationItem_default_instance_;
class CMsgGC_Client_UseServerModificationItem_Response;
struct CMsgGC_Client_UseServerModificationItem_ResponseDefaultTypeInternal;
extern CMsgGC_Client_UseServerModificationItem_ResponseDefaultTypeInternal _CMsgGC_Client_UseServerModificationItem_Response_default_instance_;
class CMsgGC_DailyCompetitiveStatsRollup;
struct CMsgGC_DailyCompetitiveStatsRollupDefaultTypeInternal;
extern CMsgGC_DailyCompetitiveStatsRollupDefaultTypeInternal _CMsgGC_DailyCompetitiveStatsRollup_default_instance_;
class CMsgGC_DailyCompetitiveStatsRollup_Response;
struct CMsgGC_DailyCompetitiveStatsRollup_ResponseDefaultTypeInternal;
extern CMsgGC_DailyCompetitiveStatsRollup_ResponseDefaultTypeInternal _CMsgGC_DailyCompetitiveStatsRollup_Response_default_instance_;
class CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry;
struct CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntryDefaultTypeInternal;
extern CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntryDefaultTypeInternal _CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry_default_instance_;
class CMsgGC_GameServer_AckPolicy;
struct CMsgGC_GameServer_AckPolicyDefaultTypeInternal;
extern CMsgGC_GameServer_AckPolicyDefaultTypeInternal _CMsgGC_GameServer_AckPolicy_default_instance_;
class CMsgGC_GameServer_AckPolicyResponse;
struct CMsgGC_GameServer_AckPolicyResponseDefaultTypeInternal;
extern CMsgGC_GameServer_AckPolicyResponseDefaultTypeInternal _CMsgGC_GameServer_AckPolicyResponse_default_instance_;
class CMsgGC_GameServer_AuthChallenge;
struct CMsgGC_GameServer_AuthChallengeDefaultTypeInternal;
extern CMsgGC_GameServer_AuthChallengeDefaultTypeInternal _CMsgGC_GameServer_AuthChallenge_default_instance_;
class CMsgGC_GameServer_AuthChallengeResponse;
struct CMsgGC_GameServer_AuthChallengeResponseDefaultTypeInternal;
extern CMsgGC_GameServer_AuthChallengeResponseDefaultTypeInternal _CMsgGC_GameServer_AuthChallengeResponse_default_instance_;
class CMsgGC_GameServer_AuthResult;
struct CMsgGC_GameServer_AuthResultDefaultTypeInternal;
extern CMsgGC_GameServer_AuthResultDefaultTypeInternal _CMsgGC_GameServer_AuthResult_default_instance_;
class CMsgGC_GameServer_CreateIdentity;
struct CMsgGC_GameServer_CreateIdentityDefaultTypeInternal;
extern CMsgGC_GameServer_CreateIdentityDefaultTypeInternal _CMsgGC_GameServer_CreateIdentity_default_instance_;
class CMsgGC_GameServer_CreateIdentityResponse;
struct CMsgGC_GameServer_CreateIdentityResponseDefaultTypeInternal;
extern CMsgGC_GameServer_CreateIdentityResponseDefaultTypeInternal _CMsgGC_GameServer_CreateIdentityResponse_default_instance_;
class CMsgGC_GameServer_LevelInfo;
struct CMsgGC_GameServer_LevelInfoDefaultTypeInternal;
extern CMsgGC_GameServer_LevelInfoDefaultTypeInternal _CMsgGC_GameServer_LevelInfo_default_instance_;
class CMsgGC_GameServer_List;
struct CMsgGC_GameServer_ListDefaultTypeInternal;
extern CMsgGC_GameServer_ListDefaultTypeInternal _CMsgGC_GameServer_List_default_instance_;
class CMsgGC_GameServer_ListResponse;
struct CMsgGC_GameServer_ListResponseDefaultTypeInternal;
extern CMsgGC_GameServer_ListResponseDefaultTypeInternal _CMsgGC_GameServer_ListResponse_default_instance_;
class CMsgGC_GameServer_ListResponse_GameServerIdentity;
struct CMsgGC_GameServer_ListResponse_GameServerIdentityDefaultTypeInternal;
extern CMsgGC_GameServer_ListResponse_GameServerIdentityDefaultTypeInternal _CMsgGC_GameServer_ListResponse_GameServerIdentity_default_instance_;
class CMsgGC_GameServer_ResetIdentity;
struct CMsgGC_GameServer_ResetIdentityDefaultTypeInternal;
extern CMsgGC_GameServer_ResetIdentityDefaultTypeInternal _CMsgGC_GameServer_ResetIdentity_default_instance_;
class CMsgGC_GameServer_ResetIdentityResponse;
struct CMsgGC_GameServer_ResetIdentityResponseDefaultTypeInternal;
extern CMsgGC_GameServer_ResetIdentityResponseDefaultTypeInternal _CMsgGC_GameServer_ResetIdentityResponse_default_instance_;
class CMsgGC_GameServer_ServerModificationItem;
struct CMsgGC_GameServer_ServerModificationItemDefaultTypeInternal;
extern CMsgGC_GameServer_ServerModificationItemDefaultTypeInternal _CMsgGC_GameServer_ServerModificationItem_default_instance_;
class CMsgGC_GameServer_ServerModificationItemExpired;
struct CMsgGC_GameServer_ServerModificationItemExpiredDefaultTypeInternal;
extern CMsgGC_GameServer_ServerModificationItemExpiredDefaultTypeInternal _CMsgGC_GameServer_ServerModificationItemExpired_default_instance_;
class CMsgGC_GameServer_UseServerModificationItem;
struct CMsgGC_GameServer_UseServerModificationItemDefaultTypeInternal;
extern CMsgGC_GameServer_UseServerModificationItemDefaultTypeInternal _CMsgGC_GameServer_UseServerModificationItem_default_instance_;
class CMsgGC_GameServer_UseServerModificationItem_Response;
struct CMsgGC_GameServer_UseServerModificationItem_ResponseDefaultTypeInternal;
extern CMsgGC_GameServer_UseServerModificationItem_ResponseDefaultTypeInternal _CMsgGC_GameServer_UseServerModificationItem_Response_default_instance_;
class CMsgGC_Halloween_GrantItem;
struct CMsgGC_Halloween_GrantItemDefaultTypeInternal;
extern CMsgGC_Halloween_GrantItemDefaultTypeInternal _CMsgGC_Halloween_GrantItem_default_instance_;
class CMsgGC_Halloween_GrantItemResponse;
struct CMsgGC_Halloween_GrantItemResponseDefaultTypeInternal;
extern CMsgGC_Halloween_GrantItemResponseDefaultTypeInternal _CMsgGC_Halloween_GrantItemResponse_default_instance_;
class CMsgGC_Halloween_ItemClaimed;
struct CMsgGC_Halloween_ItemClaimedDefaultTypeInternal;
extern CMsgGC_Halloween_ItemClaimedDefaultTypeInternal _CMsgGC_Halloween_ItemClaimed_default_instance_;
class CMsgGC_Halloween_ReservedItem;
struct CMsgGC_Halloween_ReservedItemDefaultTypeInternal;
extern CMsgGC_Halloween_ReservedItemDefaultTypeInternal _CMsgGC_Halloween_ReservedItem_default_instance_;
class CMsgGC_KickPlayerFromLobby;
struct CMsgGC_KickPlayerFromLobbyDefaultTypeInternal;
extern CMsgGC_KickPlayerFromLobbyDefaultTypeInternal _CMsgGC_KickPlayerFromLobby_default_instance_;
class CMsgGC_Match_Result;
struct CMsgGC_Match_ResultDefaultTypeInternal;
extern CMsgGC_Match_ResultDefaultTypeInternal _CMsgGC_Match_Result_default_instance_;
class CMsgGC_Match_ResultResponse;
struct CMsgGC_Match_ResultResponseDefaultTypeInternal;
extern CMsgGC_Match_ResultResponseDefaultTypeInternal _CMsgGC_Match_ResultResponse_default_instance_;
class CMsgGC_Match_Result_Player;
struct CMsgGC_Match_Result_PlayerDefaultTypeInternal;
extern CMsgGC_Match_Result_PlayerDefaultTypeInternal _CMsgGC_Match_Result_Player_default_instance_;
class CMsgGC_PickupItemEligibility_Query;
struct CMsgGC_PickupItemEligibility_QueryDefaultTypeInternal;
extern CMsgGC_PickupItemEligibility_QueryDefaultTypeInternal _CMsgGC_PickupItemEligibility_Query_default_instance_;
class CMsgGC_PickupItemEligibility_QueryResponse;
struct CMsgGC_PickupItemEligibility_QueryResponseDefaultTypeInternal;
extern CMsgGC_PickupItemEligibility_QueryResponseDefaultTypeInternal _CMsgGC_PickupItemEligibility_QueryResponse_default_instance_;
class CMsgGC_ReportPlayer;
struct CMsgGC_ReportPlayerDefaultTypeInternal;
extern CMsgGC_ReportPlayerDefaultTypeInternal _CMsgGC_ReportPlayer_default_instance_;
class CMsgGC_TFVoteKickPlayerRequest;
struct CMsgGC_TFVoteKickPlayerRequestDefaultTypeInternal;
extern CMsgGC_TFVoteKickPlayerRequestDefaultTypeInternal _CMsgGC_TFVoteKickPlayerRequest_default_instance_;
class CMsgGC_VoteKickPlayerRequestResponse;
struct CMsgGC_VoteKickPlayerRequestResponseDefaultTypeInternal;
extern CMsgGC_VoteKickPlayerRequestResponseDefaultTypeInternal _CMsgGC_VoteKickPlayerRequestResponse_default_instance_;
class CMsgGameServerKickingLobby;
struct CMsgGameServerKickingLobbyDefaultTypeInternal;
extern CMsgGameServerKickingLobbyDefaultTypeInternal _CMsgGameServerKickingLobby_default_instance_;
class CMsgGameServerKickingLobbyResponse;
struct CMsgGameServerKickingLobbyResponseDefaultTypeInternal;
extern CMsgGameServerKickingLobbyResponseDefaultTypeInternal _CMsgGameServerKickingLobbyResponse_default_instance_;
class CMsgGameServerMatchmakingStatus;
struct CMsgGameServerMatchmakingStatusDefaultTypeInternal;
extern CMsgGameServerMatchmakingStatusDefaultTypeInternal _CMsgGameServerMatchmakingStatus_default_instance_;
class CMsgGameServerMatchmakingStatus_Player;
struct CMsgGameServerMatchmakingStatus_PlayerDefaultTypeInternal;
extern CMsgGameServerMatchmakingStatus_PlayerDefaultTypeInternal _CMsgGameServerMatchmakingStatus_Player_default_instance_;
class CMsgHalloween_Merasmus2012;
struct CMsgHalloween_Merasmus2012DefaultTypeInternal;
extern CMsgHalloween_Merasmus2012DefaultTypeInternal _CMsgHalloween_Merasmus2012_default_instance_;
class CMsgHalloween_ServerBossEvent;
struct CMsgHalloween_ServerBossEventDefaultTypeInternal;
extern CMsgHalloween_ServerBossEventDefaultTypeInternal _CMsgHalloween_ServerBossEvent_default_instance_;
class CMsgKickedFromMatchmakingQueue;
struct CMsgKickedFromMatchmakingQueueDefaultTypeInternal;
extern CMsgKickedFromMatchmakingQueueDefaultTypeInternal _CMsgKickedFromMatchmakingQueue_default_instance_;
class CMsgLeaveGameAndPrepareToJoinParty;
struct CMsgLeaveGameAndPrepareToJoinPartyDefaultTypeInternal;
extern CMsgLeaveGameAndPrepareToJoinPartyDefaultTypeInternal _CMsgLeaveGameAndPrepareToJoinParty_default_instance_;
class CMsgMatchmakingProgress;
struct CMsgMatchmakingProgressDefaultTypeInternal;
extern CMsgMatchmakingProgressDefaultTypeInternal _CMsgMatchmakingProgress_default_instance_;
class CMsgMatchmakingSearchCountRequest;
struct CMsgMatchmakingSearchCountRequestDefaultTypeInternal;
extern CMsgMatchmakingSearchCountRequestDefaultTypeInternal _CMsgMatchmakingSearchCountRequest_default_instance_;
class CMsgMatchmakingSearchCountResponse;
struct CMsgMatchmakingSearchCountResponseDefaultTypeInternal;
extern CMsgMatchmakingSearchCountResponseDefaultTypeInternal _CMsgMatchmakingSearchCountResponse_default_instance_;
class CMsgMvMMannUpVictoryReply;
struct CMsgMvMMannUpVictoryReplyDefaultTypeInternal;
extern CMsgMvMMannUpVictoryReplyDefaultTypeInternal _CMsgMvMMannUpVictoryReply_default_instance_;
class CMsgMvMVictory;
struct CMsgMvMVictoryDefaultTypeInternal;
extern CMsgMvMVictoryDefaultTypeInternal _CMsgMvMVictory_default_instance_;
class CMsgMvMVictoryInfo;
struct CMsgMvMVictoryInfoDefaultTypeInternal;
extern CMsgMvMVictoryInfoDefaultTypeInternal _CMsgMvMVictoryInfo_default_instance_;
class CMsgMvMVictoryInfo_Item;
struct CMsgMvMVictoryInfo_ItemDefaultTypeInternal;
extern CMsgMvMVictoryInfo_ItemDefaultTypeInternal _CMsgMvMVictoryInfo_Item_default_instance_;
class CMsgMvMVictoryInfo_Player;
struct CMsgMvMVictoryInfo_PlayerDefaultTypeInternal;
extern CMsgMvMVictoryInfo_PlayerDefaultTypeInternal _CMsgMvMVictoryInfo_Player_default_instance_;
class CMsgMvMVictory_Player;
struct CMsgMvMVictory_PlayerDefaultTypeInternal;
extern CMsgMvMVictory_PlayerDefaultTypeInternal _CMsgMvMVictory_Player_default_instance_;
class CMsgNotificationAcknowledge;
struct CMsgNotificationAcknowledgeDefaultTypeInternal;
extern CMsgNotificationAcknowledgeDefaultTypeInternal _CMsgNotificationAcknowledge_default_instance_;
class CMsgNotificationAcknowledgeReply;
struct CMsgNotificationAcknowledgeReplyDefaultTypeInternal;
extern CMsgNotificationAcknowledgeReplyDefaultTypeInternal _CMsgNotificationAcknowledgeReply_default_instance_;
class CMsgPainkitDevGrant;
struct CMsgPainkitDevGrantDefaultTypeInternal;
extern CMsgPainkitDevGrantDefaultTypeInternal _CMsgPainkitDevGrant_default_instance_;
class CMsgPartyChatMsg;
struct CMsgPartyChatMsgDefaultTypeInternal;
extern CMsgPartyChatMsgDefaultTypeInternal _CMsgPartyChatMsg_default_instance_;
class CMsgPartyClearOtherPartyRequest;
struct CMsgPartyClearOtherPartyRequestDefaultTypeInternal;
extern CMsgPartyClearOtherPartyRequestDefaultTypeInternal _CMsgPartyClearOtherPartyRequest_default_instance_;
class CMsgPartyClearOtherPartyRequestResponse;
struct CMsgPartyClearOtherPartyRequestResponseDefaultTypeInternal;
extern CMsgPartyClearOtherPartyRequestResponseDefaultTypeInternal _CMsgPartyClearOtherPartyRequestResponse_default_instance_;
class CMsgPartyClearPendingPlayer;
struct CMsgPartyClearPendingPlayerDefaultTypeInternal;
extern CMsgPartyClearPendingPlayerDefaultTypeInternal _CMsgPartyClearPendingPlayer_default_instance_;
class CMsgPartyClearPendingPlayerResponse;
struct CMsgPartyClearPendingPlayerResponseDefaultTypeInternal;
extern CMsgPartyClearPendingPlayerResponseDefaultTypeInternal _CMsgPartyClearPendingPlayerResponse_default_instance_;
class CMsgPartyInvitePlayer;
struct CMsgPartyInvitePlayerDefaultTypeInternal;
extern CMsgPartyInvitePlayerDefaultTypeInternal _CMsgPartyInvitePlayer_default_instance_;
class CMsgPartyKickMember;
struct CMsgPartyKickMemberDefaultTypeInternal;
extern CMsgPartyKickMemberDefaultTypeInternal _CMsgPartyKickMember_default_instance_;
class CMsgPartyPromoteToLeader;
struct CMsgPartyPromoteToLeaderDefaultTypeInternal;
extern CMsgPartyPromoteToLeaderDefaultTypeInternal _CMsgPartyPromoteToLeader_default_instance_;
class CMsgPartyQueueForMatch;
struct CMsgPartyQueueForMatchDefaultTypeInternal;
extern CMsgPartyQueueForMatchDefaultTypeInternal _CMsgPartyQueueForMatch_default_instance_;
class CMsgPartyQueueForMatchResponse;
struct CMsgPartyQueueForMatchResponseDefaultTypeInternal;
extern CMsgPartyQueueForMatchResponseDefaultTypeInternal _CMsgPartyQueueForMatchResponse_default_instance_;
class CMsgPartyQueueForStandby;
struct CMsgPartyQueueForStandbyDefaultTypeInternal;
extern CMsgPartyQueueForStandbyDefaultTypeInternal _CMsgPartyQueueForStandby_default_instance_;
class CMsgPartyQueueForStandbyResponse;
struct CMsgPartyQueueForStandbyResponseDefaultTypeInternal;
extern CMsgPartyQueueForStandbyResponseDefaultTypeInternal _CMsgPartyQueueForStandbyResponse_default_instance_;
class CMsgPartyRemoveFromQueue;
struct CMsgPartyRemoveFromQueueDefaultTypeInternal;
extern CMsgPartyRemoveFromQueueDefaultTypeInternal _CMsgPartyRemoveFromQueue_default_instance_;
class CMsgPartyRemoveFromQueueResponse;
struct CMsgPartyRemoveFromQueueResponseDefaultTypeInternal;
extern CMsgPartyRemoveFromQueueResponseDefaultTypeInternal _CMsgPartyRemoveFromQueueResponse_default_instance_;
class CMsgPartyRemoveFromStandbyQueue;
struct CMsgPartyRemoveFromStandbyQueueDefaultTypeInternal;
extern CMsgPartyRemoveFromStandbyQueueDefaultTypeInternal _CMsgPartyRemoveFromStandbyQueue_default_instance_;
class CMsgPartyRemoveFromStandbyQueueResponse;
struct CMsgPartyRemoveFromStandbyQueueResponseDefaultTypeInternal;
extern CMsgPartyRemoveFromStandbyQueueResponseDefaultTypeInternal _CMsgPartyRemoveFromStandbyQueueResponse_default_instance_;
class CMsgPartyRequestJoinPlayer;
struct CMsgPartyRequestJoinPlayerDefaultTypeInternal;
extern CMsgPartyRequestJoinPlayerDefaultTypeInternal _CMsgPartyRequestJoinPlayer_default_instance_;
class CMsgPartySendChat;
struct CMsgPartySendChatDefaultTypeInternal;
extern CMsgPartySendChatDefaultTypeInternal _CMsgPartySendChat_default_instance_;
class CMsgPartySetOptions;
struct CMsgPartySetOptionsDefaultTypeInternal;
extern CMsgPartySetOptionsDefaultTypeInternal _CMsgPartySetOptions_default_instance_;
class CMsgPartySetOptionsResponse;
struct CMsgPartySetOptionsResponseDefaultTypeInternal;
extern CMsgPartySetOptionsResponseDefaultTypeInternal _CMsgPartySetOptionsResponse_default_instance_;
class CMsgPlayerLeftMatch;
struct CMsgPlayerLeftMatchDefaultTypeInternal;
extern CMsgPlayerLeftMatchDefaultTypeInternal _CMsgPlayerLeftMatch_default_instance_;
class CMsgPlayerLeftMatchResponse;
struct CMsgPlayerLeftMatchResponseDefaultTypeInternal;
extern CMsgPlayerLeftMatchResponseDefaultTypeInternal _CMsgPlayerLeftMatchResponse_default_instance_;
class CMsgPlayerVoteKickedAfterLeavingMatchResponse;
struct CMsgPlayerVoteKickedAfterLeavingMatchResponseDefaultTypeInternal;
extern CMsgPlayerVoteKickedAfterLeavingMatchResponseDefaultTypeInternal _CMsgPlayerVoteKickedAfterLeavingMatchResponse_default_instance_;
class CMsgProcessMatchVoteKick;
struct CMsgProcessMatchVoteKickDefaultTypeInternal;
extern CMsgProcessMatchVoteKickDefaultTypeInternal _CMsgProcessMatchVoteKick_default_instance_;
class CMsgProcessMatchVoteKickResponse;
struct CMsgProcessMatchVoteKickResponseDefaultTypeInternal;
extern CMsgProcessMatchVoteKickResponseDefaultTypeInternal _CMsgProcessMatchVoteKickResponse_default_instance_;
class CMsgProcessMatchVoteKick_Vote;
struct CMsgProcessMatchVoteKick_VoteDefaultTypeInternal;
extern CMsgProcessMatchVoteKick_VoteDefaultTypeInternal _CMsgProcessMatchVoteKick_Vote_default_instance_;
class CMsgQuestProgressReport;
struct CMsgQuestProgressReportDefaultTypeInternal;
extern CMsgQuestProgressReportDefaultTypeInternal _CMsgQuestProgressReport_default_instance_;
class CMsgReplaySubmitContestEntry;
struct CMsgReplaySubmitContestEntryDefaultTypeInternal;
extern CMsgReplaySubmitContestEntryDefaultTypeInternal _CMsgReplaySubmitContestEntry_default_instance_;
class CMsgReplaySubmitContestEntryResponse;
struct CMsgReplaySubmitContestEntryResponseDefaultTypeInternal;
extern CMsgReplaySubmitContestEntryResponseDefaultTypeInternal _CMsgReplaySubmitContestEntryResponse_default_instance_;
class CMsgSaxxyAwarded;
struct CMsgSaxxyAwardedDefaultTypeInternal;
extern CMsgSaxxyAwardedDefaultTypeInternal _CMsgSaxxyAwarded_default_instance_;
class CMsgSetItemSlotAttribute;
struct CMsgSetItemSlotAttributeDefaultTypeInternal;
extern CMsgSetItemSlotAttributeDefaultTypeInternal _CMsgSetItemSlotAttribute_default_instance_;
class CMsgTFClientInit;
struct CMsgTFClientInitDefaultTypeInternal;
extern CMsgTFClientInitDefaultTypeInternal _CMsgTFClientInit_default_instance_;
class CMsgTFCoaching_AddToCoaches;
struct CMsgTFCoaching_AddToCoachesDefaultTypeInternal;
extern CMsgTFCoaching_AddToCoachesDefaultTypeInternal _CMsgTFCoaching_AddToCoaches_default_instance_;
class CMsgTFCoaching_AskCoach;
struct CMsgTFCoaching_AskCoachDefaultTypeInternal;
extern CMsgTFCoaching_AskCoachDefaultTypeInternal _CMsgTFCoaching_AskCoach_default_instance_;
class CMsgTFCoaching_AskCoachResponse;
struct CMsgTFCoaching_AskCoachResponseDefaultTypeInternal;
extern CMsgTFCoaching_AskCoachResponseDefaultTypeInternal _CMsgTFCoaching_AskCoachResponse_default_instance_;
class CMsgTFCoaching_CoachJoinGame;
struct CMsgTFCoaching_CoachJoinGameDefaultTypeInternal;
extern CMsgTFCoaching_CoachJoinGameDefaultTypeInternal _CMsgTFCoaching_CoachJoinGame_default_instance_;
class CMsgTFCoaching_CoachJoined;
struct CMsgTFCoaching_CoachJoinedDefaultTypeInternal;
extern CMsgTFCoaching_CoachJoinedDefaultTypeInternal _CMsgTFCoaching_CoachJoined_default_instance_;
class CMsgTFCoaching_CoachJoining;
struct CMsgTFCoaching_CoachJoiningDefaultTypeInternal;
extern CMsgTFCoaching_CoachJoiningDefaultTypeInternal _CMsgTFCoaching_CoachJoining_default_instance_;
class CMsgTFCoaching_FindCoach;
struct CMsgTFCoaching_FindCoachDefaultTypeInternal;
extern CMsgTFCoaching_FindCoachDefaultTypeInternal _CMsgTFCoaching_FindCoach_default_instance_;
class CMsgTFCoaching_FindCoachResponse;
struct CMsgTFCoaching_FindCoachResponseDefaultTypeInternal;
extern CMsgTFCoaching_FindCoachResponseDefaultTypeInternal _CMsgTFCoaching_FindCoachResponse_default_instance_;
class CMsgTFCoaching_LikeCurrentCoach;
struct CMsgTFCoaching_LikeCurrentCoachDefaultTypeInternal;
extern CMsgTFCoaching_LikeCurrentCoachDefaultTypeInternal _CMsgTFCoaching_LikeCurrentCoach_default_instance_;
class CMsgTFCoaching_RemoveCurrentCoach;
struct CMsgTFCoaching_RemoveCurrentCoachDefaultTypeInternal;
extern CMsgTFCoaching_RemoveCurrentCoachDefaultTypeInternal _CMsgTFCoaching_RemoveCurrentCoach_default_instance_;
class CMsgTFCoaching_RemoveFromCoaches;
struct CMsgTFCoaching_RemoveFromCoachesDefaultTypeInternal;
extern CMsgTFCoaching_RemoveFromCoachesDefaultTypeInternal _CMsgTFCoaching_RemoveFromCoaches_default_instance_;
class CMsgTFFreeTrialChooseMostHelpfulFriend;
struct CMsgTFFreeTrialChooseMostHelpfulFriendDefaultTypeInternal;
extern CMsgTFFreeTrialChooseMostHelpfulFriendDefaultTypeInternal _CMsgTFFreeTrialChooseMostHelpfulFriend_default_instance_;
class CMsgTFFreeTrialConvertedToPremium;
struct CMsgTFFreeTrialConvertedToPremiumDefaultTypeInternal;
extern CMsgTFFreeTrialConvertedToPremiumDefaultTypeInternal _CMsgTFFreeTrialConvertedToPremium_default_instance_;
class CMsgTFGoldenWrenchBroadcast;
struct CMsgTFGoldenWrenchBroadcastDefaultTypeInternal;
extern CMsgTFGoldenWrenchBroadcastDefaultTypeInternal _CMsgTFGoldenWrenchBroadcast_default_instance_;
class CMsgTFQuickplay_PlayerJoining;
struct CMsgTFQuickplay_PlayerJoiningDefaultTypeInternal;
extern CMsgTFQuickplay_PlayerJoiningDefaultTypeInternal _CMsgTFQuickplay_PlayerJoining_default_instance_;
class CMsgTFQuickplay_ScoreServers;
struct CMsgTFQuickplay_ScoreServersDefaultTypeInternal;
extern CMsgTFQuickplay_ScoreServersDefaultTypeInternal _CMsgTFQuickplay_ScoreServers_default_instance_;
class CMsgTFQuickplay_ScoreServersResponse;
struct CMsgTFQuickplay_ScoreServersResponseDefaultTypeInternal;
extern CMsgTFQuickplay_ScoreServersResponseDefaultTypeInternal _CMsgTFQuickplay_ScoreServersResponse_default_instance_;
class CMsgTFQuickplay_ScoreServersResponse_ServerInfo;
struct CMsgTFQuickplay_ScoreServersResponse_ServerInfoDefaultTypeInternal;
extern CMsgTFQuickplay_ScoreServersResponse_ServerInfoDefaultTypeInternal _CMsgTFQuickplay_ScoreServersResponse_ServerInfo_default_instance_;
class CMsgTFQuickplay_ScoreServers_ServerInfo;
struct CMsgTFQuickplay_ScoreServers_ServerInfoDefaultTypeInternal;
extern CMsgTFQuickplay_ScoreServers_ServerInfoDefaultTypeInternal _CMsgTFQuickplay_ScoreServers_ServerInfo_default_instance_;
class CMsgTFRequestTF2Friends;
struct CMsgTFRequestTF2FriendsDefaultTypeInternal;
extern CMsgTFRequestTF2FriendsDefaultTypeInternal _CMsgTFRequestTF2Friends_default_instance_;
class CMsgTFRequestTF2FriendsResponse;
struct CMsgTFRequestTF2FriendsResponseDefaultTypeInternal;
extern CMsgTFRequestTF2FriendsResponseDefaultTypeInternal _CMsgTFRequestTF2FriendsResponse_default_instance_;
class CMsgTFSaxxyBroadcast;
struct CMsgTFSaxxyBroadcastDefaultTypeInternal;
extern CMsgTFSaxxyBroadcastDefaultTypeInternal _CMsgTFSaxxyBroadcast_default_instance_;
class CMsgTFThankedBySomeone;
struct CMsgTFThankedBySomeoneDefaultTypeInternal;
extern CMsgTFThankedBySomeoneDefaultTypeInternal _CMsgTFThankedBySomeone_default_instance_;
class CMsgTFThankedSomeone;
struct CMsgTFThankedSomeoneDefaultTypeInternal;
extern CMsgTFThankedSomeoneDefaultTypeInternal _CMsgTFThankedSomeone_default_instance_;
class CMsgTFWorldStatus;
struct CMsgTFWorldStatusDefaultTypeInternal;
extern CMsgTFWorldStatusDefaultTypeInternal _CMsgTFWorldStatus_default_instance_;
class CMsgTFXPSource;
struct CMsgTFXPSourceDefaultTypeInternal;
extern CMsgTFXPSourceDefaultTypeInternal _CMsgTFXPSource_default_instance_;
class CMsgTFXPSourceBreakdown;
struct CMsgTFXPSourceBreakdownDefaultTypeInternal;
extern CMsgTFXPSourceBreakdownDefaultTypeInternal _CMsgTFXPSourceBreakdown_default_instance_;
class CMsgUpdateHalloweenMerasmusLootLevel;
struct CMsgUpdateHalloweenMerasmusLootLevelDefaultTypeInternal;
extern CMsgUpdateHalloweenMerasmusLootLevelDefaultTypeInternal _CMsgUpdateHalloweenMerasmusLootLevel_default_instance_;
class CMsgUpdateHalloweenMerasmusLootLevel_Player;
struct CMsgUpdateHalloweenMerasmusLootLevel_PlayerDefaultTypeInternal;
extern CMsgUpdateHalloweenMerasmusLootLevel_PlayerDefaultTypeInternal _CMsgUpdateHalloweenMerasmusLootLevel_Player_default_instance_;
class CReplayCachedContestData;
struct CReplayCachedContestDataDefaultTypeInternal;
extern CReplayCachedContestDataDefaultTypeInternal _CReplayCachedContestData_default_instance_;
class CSOQuest;
struct CSOQuestDefaultTypeInternal;
extern CSOQuestDefaultTypeInternal _CSOQuest_default_instance_;
class CSOQuestMapNode;
struct CSOQuestMapNodeDefaultTypeInternal;
extern CSOQuestMapNodeDefaultTypeInternal _CSOQuestMapNode_default_instance_;
class CSOQuestMapRewardPurchase;
struct CSOQuestMapRewardPurchaseDefaultTypeInternal;
extern CSOQuestMapRewardPurchaseDefaultTypeInternal _CSOQuestMapRewardPurchase_default_instance_;
class CSOTFDuelSummary;
struct CSOTFDuelSummaryDefaultTypeInternal;
extern CSOTFDuelSummaryDefaultTypeInternal _CSOTFDuelSummary_default_instance_;
class CSOTFGameServerLobby;
struct CSOTFGameServerLobbyDefaultTypeInternal;
extern CSOTFGameServerLobbyDefaultTypeInternal _CSOTFGameServerLobby_default_instance_;
class CSOTFLadderPlayerStats;
struct CSOTFLadderPlayerStatsDefaultTypeInternal;
extern CSOTFLadderPlayerStatsDefaultTypeInternal _CSOTFLadderPlayerStats_default_instance_;
class CSOTFMapContribution;
struct CSOTFMapContributionDefaultTypeInternal;
extern CSOTFMapContributionDefaultTypeInternal _CSOTFMapContribution_default_instance_;
class CSOTFMatchResultPlayerStats;
struct CSOTFMatchResultPlayerStatsDefaultTypeInternal;
extern CSOTFMatchResultPlayerStatsDefaultTypeInternal _CSOTFMatchResultPlayerStats_default_instance_;
class CSOTFParty;
struct CSOTFPartyDefaultTypeInternal;
extern CSOTFPartyDefaultTypeInternal _CSOTFParty_default_instance_;
class CSOTFPartyInvite;
struct CSOTFPartyInviteDefaultTypeInternal;
extern CSOTFPartyInviteDefaultTypeInternal _CSOTFPartyInvite_default_instance_;
class CSOTFPartyInvite_PartyMember;
struct CSOTFPartyInvite_PartyMemberDefaultTypeInternal;
extern CSOTFPartyInvite_PartyMemberDefaultTypeInternal _CSOTFPartyInvite_PartyMember_default_instance_;
class CSOTFPartyMember;
struct CSOTFPartyMemberDefaultTypeInternal;
extern CSOTFPartyMemberDefaultTypeInternal _CSOTFPartyMember_default_instance_;
class CSOTFPartyMember_Activity;
struct CSOTFPartyMember_ActivityDefaultTypeInternal;
extern CSOTFPartyMember_ActivityDefaultTypeInternal _CSOTFPartyMember_Activity_default_instance_;
class CSOTFParty_QueueEntry;
struct CSOTFParty_QueueEntryDefaultTypeInternal;
extern CSOTFParty_QueueEntryDefaultTypeInternal _CSOTFParty_QueueEntry_default_instance_;
class CSOTFPlayerInfo;
struct CSOTFPlayerInfoDefaultTypeInternal;
extern CSOTFPlayerInfoDefaultTypeInternal _CSOTFPlayerInfo_default_instance_;
class CSOTFRatingData;
struct CSOTFRatingDataDefaultTypeInternal;
extern CSOTFRatingDataDefaultTypeInternal _CSOTFRatingData_default_instance_;
class CSOWarData;
struct CSOWarDataDefaultTypeInternal;
extern CSOWarDataDefaultTypeInternal _CSOWarData_default_instance_;
class CTFCasualMatchCriteria;
struct CTFCasualMatchCriteriaDefaultTypeInternal;
extern CTFCasualMatchCriteriaDefaultTypeInternal _CTFCasualMatchCriteria_default_instance_;
class CTFGroupMatchCriteriaProto;
struct CTFGroupMatchCriteriaProtoDefaultTypeInternal;
extern CTFGroupMatchCriteriaProtoDefaultTypeInternal _CTFGroupMatchCriteriaProto_default_instance_;
class CTFLobbyInviteProto;
struct CTFLobbyInviteProtoDefaultTypeInternal;
extern CTFLobbyInviteProtoDefaultTypeInternal _CTFLobbyInviteProto_default_instance_;
class CTFLobbyPlayerProto;
struct CTFLobbyPlayerProtoDefaultTypeInternal;
extern CTFLobbyPlayerProtoDefaultTypeInternal _CTFLobbyPlayerProto_default_instance_;
class CTFPartyOptions;
struct CTFPartyOptionsDefaultTypeInternal;
extern CTFPartyOptionsDefaultTypeInternal _CTFPartyOptions_default_instance_;
class CTFPerPlayerMatchCriteriaProto;
struct CTFPerPlayerMatchCriteriaProtoDefaultTypeInternal;
extern CTFPerPlayerMatchCriteriaProtoDefaultTypeInternal _CTFPerPlayerMatchCriteriaProto_default_instance_;
class GCQuestStrangeEvent;
struct GCQuestStrangeEventDefaultTypeInternal;
extern GCQuestStrangeEventDefaultTypeInternal _GCQuestStrangeEvent_default_instance_;
class TFPendingPartyMember;
struct TFPendingPartyMemberDefaultTypeInternal;
extern TFPendingPartyMemberDefaultTypeInternal _TFPendingPartyMember_default_instance_;
class TFSyncedMMUIState;
struct TFSyncedMMUIStateDefaultTypeInternal;
extern TFSyncedMMUIStateDefaultTypeInternal _TFSyncedMMUIState_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CAttribute_DynamicRecipeComponent* Arena::CreateMaybeMessage<::CAttribute_DynamicRecipeComponent>(Arena*);
template<> ::CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT* Arena::CreateMaybeMessage<::CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT>(Arena*);
template<> ::CAttribute_ItemSlotCriteria* Arena::CreateMaybeMessage<::CAttribute_ItemSlotCriteria>(Arena*);
template<> ::CAttribute_String* Arena::CreateMaybeMessage<::CAttribute_String>(Arena*);
template<> ::CAttribute_WorldItemPlacement* Arena::CreateMaybeMessage<::CAttribute_WorldItemPlacement>(Arena*);
template<> ::CEconItemPreviewDataBlock* Arena::CreateMaybeMessage<::CEconItemPreviewDataBlock>(Arena*);
template<> ::CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate* Arena::CreateMaybeMessage<::CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate>(Arena*);
template<> ::CGCMsgGC_War_GlobalStatsResponse* Arena::CreateMaybeMessage<::CGCMsgGC_War_GlobalStatsResponse>(Arena*);
template<> ::CGCMsgGC_War_GlobalStatsResponse_SideScore* Arena::CreateMaybeMessage<::CGCMsgGC_War_GlobalStatsResponse_SideScore>(Arena*);
template<> ::CGCMsgGC_War_IndividualUpdate* Arena::CreateMaybeMessage<::CGCMsgGC_War_IndividualUpdate>(Arena*);
template<> ::CGCMsgGC_War_JoinWar* Arena::CreateMaybeMessage<::CGCMsgGC_War_JoinWar>(Arena*);
template<> ::CGCMsgGC_War_RequestGlobalStats* Arena::CreateMaybeMessage<::CGCMsgGC_War_RequestGlobalStats>(Arena*);
template<> ::CGCMsgTFHelloResponse* Arena::CreateMaybeMessage<::CGCMsgTFHelloResponse>(Arena*);
template<> ::CGCMsgTFSync* Arena::CreateMaybeMessage<::CGCMsgTFSync>(Arena*);
template<> ::CGCMsgTFSyncEx* Arena::CreateMaybeMessage<::CGCMsgTFSyncEx>(Arena*);
template<> ::CGCMsg_WorldItemPlacement_Update* Arena::CreateMaybeMessage<::CGCMsg_WorldItemPlacement_Update>(Arena*);
template<> ::CMsgAcceptLobbyInvite* Arena::CreateMaybeMessage<::CMsgAcceptLobbyInvite>(Arena*);
template<> ::CMsgAcceptLobbyInviteReply* Arena::CreateMaybeMessage<::CMsgAcceptLobbyInviteReply>(Arena*);
template<> ::CMsgAcknowledgeXP* Arena::CreateMaybeMessage<::CMsgAcknowledgeXP>(Arena*);
template<> ::CMsgConsumePaintkit* Arena::CreateMaybeMessage<::CMsgConsumePaintkit>(Arena*);
template<> ::CMsgExitMatchmaking* Arena::CreateMaybeMessage<::CMsgExitMatchmaking>(Arena*);
template<> ::CMsgGCChangeMatchPlayerTeamsRequest* Arena::CreateMaybeMessage<::CMsgGCChangeMatchPlayerTeamsRequest>(Arena*);
template<> ::CMsgGCChangeMatchPlayerTeamsRequest_Member* Arena::CreateMaybeMessage<::CMsgGCChangeMatchPlayerTeamsRequest_Member>(Arena*);
template<> ::CMsgGCChangeMatchPlayerTeamsResponse* Arena::CreateMaybeMessage<::CMsgGCChangeMatchPlayerTeamsResponse>(Arena*);
template<> ::CMsgGCDataCenterPing_Update* Arena::CreateMaybeMessage<::CMsgGCDataCenterPing_Update>(Arena*);
template<> ::CMsgGCDataCenterPing_Update_PingEntry* Arena::CreateMaybeMessage<::CMsgGCDataCenterPing_Update_PingEntry>(Arena*);
template<> ::CMsgGCDataCenterPopulation* Arena::CreateMaybeMessage<::CMsgGCDataCenterPopulation>(Arena*);
template<> ::CMsgGCMatchGroupDataCenterPopulation* Arena::CreateMaybeMessage<::CMsgGCMatchGroupDataCenterPopulation>(Arena*);
template<> ::CMsgGCMatchHistoryLoad* Arena::CreateMaybeMessage<::CMsgGCMatchHistoryLoad>(Arena*);
template<> ::CMsgGCMatchMakerStatsResponse* Arena::CreateMaybeMessage<::CMsgGCMatchMakerStatsResponse>(Arena*);
template<> ::CMsgGCNewMatchForLobbyRequest* Arena::CreateMaybeMessage<::CMsgGCNewMatchForLobbyRequest>(Arena*);
template<> ::CMsgGCNewMatchForLobbyResponse* Arena::CreateMaybeMessage<::CMsgGCNewMatchForLobbyResponse>(Arena*);
template<> ::CMsgGCNotification* Arena::CreateMaybeMessage<::CMsgGCNotification>(Arena*);
template<> ::CMsgGCNotificationQueue* Arena::CreateMaybeMessage<::CMsgGCNotificationQueue>(Arena*);
template<> ::CMsgGCQuestComplete_Debug* Arena::CreateMaybeMessage<::CMsgGCQuestComplete_Debug>(Arena*);
template<> ::CMsgGCQuestDevGive* Arena::CreateMaybeMessage<::CMsgGCQuestDevGive>(Arena*);
template<> ::CMsgGCQuestIdentify* Arena::CreateMaybeMessage<::CMsgGCQuestIdentify>(Arena*);
template<> ::CMsgGCQuestMapPurchaseReward* Arena::CreateMaybeMessage<::CMsgGCQuestMapPurchaseReward>(Arena*);
template<> ::CMsgGCQuestMapUnlockNode* Arena::CreateMaybeMessage<::CMsgGCQuestMapUnlockNode>(Arena*);
template<> ::CMsgGCQuestMap_Debug* Arena::CreateMaybeMessage<::CMsgGCQuestMap_Debug>(Arena*);
template<> ::CMsgGCQuestNodeTurnIn* Arena::CreateMaybeMessage<::CMsgGCQuestNodeTurnIn>(Arena*);
template<> ::CMsgGCQuestResponse* Arena::CreateMaybeMessage<::CMsgGCQuestResponse>(Arena*);
template<> ::CMsgGCRequestMatchMakerStats* Arena::CreateMaybeMessage<::CMsgGCRequestMatchMakerStats>(Arena*);
template<> ::CMsgGCSetDisablePartyQuestProgress* Arena::CreateMaybeMessage<::CMsgGCSetDisablePartyQuestProgress>(Arena*);
template<> ::CMsgGCSurveyRequest* Arena::CreateMaybeMessage<::CMsgGCSurveyRequest>(Arena*);
template<> ::CMsgGCSurveyResponse* Arena::CreateMaybeMessage<::CMsgGCSurveyResponse>(Arena*);
template<> ::CMsgGCTFSpecificItemBroadcast* Arena::CreateMaybeMessage<::CMsgGCTFSpecificItemBroadcast>(Arena*);
template<> ::CMsgGC_Client2GCEconPreviewDataBlockRequest* Arena::CreateMaybeMessage<::CMsgGC_Client2GCEconPreviewDataBlockRequest>(Arena*);
template<> ::CMsgGC_Client2GCEconPreviewDataBlockResponse* Arena::CreateMaybeMessage<::CMsgGC_Client2GCEconPreviewDataBlockResponse>(Arena*);
template<> ::CMsgGC_Client_UseServerModificationItem* Arena::CreateMaybeMessage<::CMsgGC_Client_UseServerModificationItem>(Arena*);
template<> ::CMsgGC_Client_UseServerModificationItem_Response* Arena::CreateMaybeMessage<::CMsgGC_Client_UseServerModificationItem_Response>(Arena*);
template<> ::CMsgGC_DailyCompetitiveStatsRollup* Arena::CreateMaybeMessage<::CMsgGC_DailyCompetitiveStatsRollup>(Arena*);
template<> ::CMsgGC_DailyCompetitiveStatsRollup_Response* Arena::CreateMaybeMessage<::CMsgGC_DailyCompetitiveStatsRollup_Response>(Arena*);
template<> ::CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry* Arena::CreateMaybeMessage<::CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry>(Arena*);
template<> ::CMsgGC_GameServer_AckPolicy* Arena::CreateMaybeMessage<::CMsgGC_GameServer_AckPolicy>(Arena*);
template<> ::CMsgGC_GameServer_AckPolicyResponse* Arena::CreateMaybeMessage<::CMsgGC_GameServer_AckPolicyResponse>(Arena*);
template<> ::CMsgGC_GameServer_AuthChallenge* Arena::CreateMaybeMessage<::CMsgGC_GameServer_AuthChallenge>(Arena*);
template<> ::CMsgGC_GameServer_AuthChallengeResponse* Arena::CreateMaybeMessage<::CMsgGC_GameServer_AuthChallengeResponse>(Arena*);
template<> ::CMsgGC_GameServer_AuthResult* Arena::CreateMaybeMessage<::CMsgGC_GameServer_AuthResult>(Arena*);
template<> ::CMsgGC_GameServer_CreateIdentity* Arena::CreateMaybeMessage<::CMsgGC_GameServer_CreateIdentity>(Arena*);
template<> ::CMsgGC_GameServer_CreateIdentityResponse* Arena::CreateMaybeMessage<::CMsgGC_GameServer_CreateIdentityResponse>(Arena*);
template<> ::CMsgGC_GameServer_LevelInfo* Arena::CreateMaybeMessage<::CMsgGC_GameServer_LevelInfo>(Arena*);
template<> ::CMsgGC_GameServer_List* Arena::CreateMaybeMessage<::CMsgGC_GameServer_List>(Arena*);
template<> ::CMsgGC_GameServer_ListResponse* Arena::CreateMaybeMessage<::CMsgGC_GameServer_ListResponse>(Arena*);
template<> ::CMsgGC_GameServer_ListResponse_GameServerIdentity* Arena::CreateMaybeMessage<::CMsgGC_GameServer_ListResponse_GameServerIdentity>(Arena*);
template<> ::CMsgGC_GameServer_ResetIdentity* Arena::CreateMaybeMessage<::CMsgGC_GameServer_ResetIdentity>(Arena*);
template<> ::CMsgGC_GameServer_ResetIdentityResponse* Arena::CreateMaybeMessage<::CMsgGC_GameServer_ResetIdentityResponse>(Arena*);
template<> ::CMsgGC_GameServer_ServerModificationItem* Arena::CreateMaybeMessage<::CMsgGC_GameServer_ServerModificationItem>(Arena*);
template<> ::CMsgGC_GameServer_ServerModificationItemExpired* Arena::CreateMaybeMessage<::CMsgGC_GameServer_ServerModificationItemExpired>(Arena*);
template<> ::CMsgGC_GameServer_UseServerModificationItem* Arena::CreateMaybeMessage<::CMsgGC_GameServer_UseServerModificationItem>(Arena*);
template<> ::CMsgGC_GameServer_UseServerModificationItem_Response* Arena::CreateMaybeMessage<::CMsgGC_GameServer_UseServerModificationItem_Response>(Arena*);
template<> ::CMsgGC_Halloween_GrantItem* Arena::CreateMaybeMessage<::CMsgGC_Halloween_GrantItem>(Arena*);
template<> ::CMsgGC_Halloween_GrantItemResponse* Arena::CreateMaybeMessage<::CMsgGC_Halloween_GrantItemResponse>(Arena*);
template<> ::CMsgGC_Halloween_ItemClaimed* Arena::CreateMaybeMessage<::CMsgGC_Halloween_ItemClaimed>(Arena*);
template<> ::CMsgGC_Halloween_ReservedItem* Arena::CreateMaybeMessage<::CMsgGC_Halloween_ReservedItem>(Arena*);
template<> ::CMsgGC_KickPlayerFromLobby* Arena::CreateMaybeMessage<::CMsgGC_KickPlayerFromLobby>(Arena*);
template<> ::CMsgGC_Match_Result* Arena::CreateMaybeMessage<::CMsgGC_Match_Result>(Arena*);
template<> ::CMsgGC_Match_ResultResponse* Arena::CreateMaybeMessage<::CMsgGC_Match_ResultResponse>(Arena*);
template<> ::CMsgGC_Match_Result_Player* Arena::CreateMaybeMessage<::CMsgGC_Match_Result_Player>(Arena*);
template<> ::CMsgGC_PickupItemEligibility_Query* Arena::CreateMaybeMessage<::CMsgGC_PickupItemEligibility_Query>(Arena*);
template<> ::CMsgGC_PickupItemEligibility_QueryResponse* Arena::CreateMaybeMessage<::CMsgGC_PickupItemEligibility_QueryResponse>(Arena*);
template<> ::CMsgGC_ReportPlayer* Arena::CreateMaybeMessage<::CMsgGC_ReportPlayer>(Arena*);
template<> ::CMsgGC_TFVoteKickPlayerRequest* Arena::CreateMaybeMessage<::CMsgGC_TFVoteKickPlayerRequest>(Arena*);
template<> ::CMsgGC_VoteKickPlayerRequestResponse* Arena::CreateMaybeMessage<::CMsgGC_VoteKickPlayerRequestResponse>(Arena*);
template<> ::CMsgGameServerKickingLobby* Arena::CreateMaybeMessage<::CMsgGameServerKickingLobby>(Arena*);
template<> ::CMsgGameServerKickingLobbyResponse* Arena::CreateMaybeMessage<::CMsgGameServerKickingLobbyResponse>(Arena*);
template<> ::CMsgGameServerMatchmakingStatus* Arena::CreateMaybeMessage<::CMsgGameServerMatchmakingStatus>(Arena*);
template<> ::CMsgGameServerMatchmakingStatus_Player* Arena::CreateMaybeMessage<::CMsgGameServerMatchmakingStatus_Player>(Arena*);
template<> ::CMsgHalloween_Merasmus2012* Arena::CreateMaybeMessage<::CMsgHalloween_Merasmus2012>(Arena*);
template<> ::CMsgHalloween_ServerBossEvent* Arena::CreateMaybeMessage<::CMsgHalloween_ServerBossEvent>(Arena*);
template<> ::CMsgKickedFromMatchmakingQueue* Arena::CreateMaybeMessage<::CMsgKickedFromMatchmakingQueue>(Arena*);
template<> ::CMsgLeaveGameAndPrepareToJoinParty* Arena::CreateMaybeMessage<::CMsgLeaveGameAndPrepareToJoinParty>(Arena*);
template<> ::CMsgMatchmakingProgress* Arena::CreateMaybeMessage<::CMsgMatchmakingProgress>(Arena*);
template<> ::CMsgMatchmakingSearchCountRequest* Arena::CreateMaybeMessage<::CMsgMatchmakingSearchCountRequest>(Arena*);
template<> ::CMsgMatchmakingSearchCountResponse* Arena::CreateMaybeMessage<::CMsgMatchmakingSearchCountResponse>(Arena*);
template<> ::CMsgMvMMannUpVictoryReply* Arena::CreateMaybeMessage<::CMsgMvMMannUpVictoryReply>(Arena*);
template<> ::CMsgMvMVictory* Arena::CreateMaybeMessage<::CMsgMvMVictory>(Arena*);
template<> ::CMsgMvMVictoryInfo* Arena::CreateMaybeMessage<::CMsgMvMVictoryInfo>(Arena*);
template<> ::CMsgMvMVictoryInfo_Item* Arena::CreateMaybeMessage<::CMsgMvMVictoryInfo_Item>(Arena*);
template<> ::CMsgMvMVictoryInfo_Player* Arena::CreateMaybeMessage<::CMsgMvMVictoryInfo_Player>(Arena*);
template<> ::CMsgMvMVictory_Player* Arena::CreateMaybeMessage<::CMsgMvMVictory_Player>(Arena*);
template<> ::CMsgNotificationAcknowledge* Arena::CreateMaybeMessage<::CMsgNotificationAcknowledge>(Arena*);
template<> ::CMsgNotificationAcknowledgeReply* Arena::CreateMaybeMessage<::CMsgNotificationAcknowledgeReply>(Arena*);
template<> ::CMsgPainkitDevGrant* Arena::CreateMaybeMessage<::CMsgPainkitDevGrant>(Arena*);
template<> ::CMsgPartyChatMsg* Arena::CreateMaybeMessage<::CMsgPartyChatMsg>(Arena*);
template<> ::CMsgPartyClearOtherPartyRequest* Arena::CreateMaybeMessage<::CMsgPartyClearOtherPartyRequest>(Arena*);
template<> ::CMsgPartyClearOtherPartyRequestResponse* Arena::CreateMaybeMessage<::CMsgPartyClearOtherPartyRequestResponse>(Arena*);
template<> ::CMsgPartyClearPendingPlayer* Arena::CreateMaybeMessage<::CMsgPartyClearPendingPlayer>(Arena*);
template<> ::CMsgPartyClearPendingPlayerResponse* Arena::CreateMaybeMessage<::CMsgPartyClearPendingPlayerResponse>(Arena*);
template<> ::CMsgPartyInvitePlayer* Arena::CreateMaybeMessage<::CMsgPartyInvitePlayer>(Arena*);
template<> ::CMsgPartyKickMember* Arena::CreateMaybeMessage<::CMsgPartyKickMember>(Arena*);
template<> ::CMsgPartyPromoteToLeader* Arena::CreateMaybeMessage<::CMsgPartyPromoteToLeader>(Arena*);
template<> ::CMsgPartyQueueForMatch* Arena::CreateMaybeMessage<::CMsgPartyQueueForMatch>(Arena*);
template<> ::CMsgPartyQueueForMatchResponse* Arena::CreateMaybeMessage<::CMsgPartyQueueForMatchResponse>(Arena*);
template<> ::CMsgPartyQueueForStandby* Arena::CreateMaybeMessage<::CMsgPartyQueueForStandby>(Arena*);
template<> ::CMsgPartyQueueForStandbyResponse* Arena::CreateMaybeMessage<::CMsgPartyQueueForStandbyResponse>(Arena*);
template<> ::CMsgPartyRemoveFromQueue* Arena::CreateMaybeMessage<::CMsgPartyRemoveFromQueue>(Arena*);
template<> ::CMsgPartyRemoveFromQueueResponse* Arena::CreateMaybeMessage<::CMsgPartyRemoveFromQueueResponse>(Arena*);
template<> ::CMsgPartyRemoveFromStandbyQueue* Arena::CreateMaybeMessage<::CMsgPartyRemoveFromStandbyQueue>(Arena*);
template<> ::CMsgPartyRemoveFromStandbyQueueResponse* Arena::CreateMaybeMessage<::CMsgPartyRemoveFromStandbyQueueResponse>(Arena*);
template<> ::CMsgPartyRequestJoinPlayer* Arena::CreateMaybeMessage<::CMsgPartyRequestJoinPlayer>(Arena*);
template<> ::CMsgPartySendChat* Arena::CreateMaybeMessage<::CMsgPartySendChat>(Arena*);
template<> ::CMsgPartySetOptions* Arena::CreateMaybeMessage<::CMsgPartySetOptions>(Arena*);
template<> ::CMsgPartySetOptionsResponse* Arena::CreateMaybeMessage<::CMsgPartySetOptionsResponse>(Arena*);
template<> ::CMsgPlayerLeftMatch* Arena::CreateMaybeMessage<::CMsgPlayerLeftMatch>(Arena*);
template<> ::CMsgPlayerLeftMatchResponse* Arena::CreateMaybeMessage<::CMsgPlayerLeftMatchResponse>(Arena*);
template<> ::CMsgPlayerVoteKickedAfterLeavingMatchResponse* Arena::CreateMaybeMessage<::CMsgPlayerVoteKickedAfterLeavingMatchResponse>(Arena*);
template<> ::CMsgProcessMatchVoteKick* Arena::CreateMaybeMessage<::CMsgProcessMatchVoteKick>(Arena*);
template<> ::CMsgProcessMatchVoteKickResponse* Arena::CreateMaybeMessage<::CMsgProcessMatchVoteKickResponse>(Arena*);
template<> ::CMsgProcessMatchVoteKick_Vote* Arena::CreateMaybeMessage<::CMsgProcessMatchVoteKick_Vote>(Arena*);
template<> ::CMsgQuestProgressReport* Arena::CreateMaybeMessage<::CMsgQuestProgressReport>(Arena*);
template<> ::CMsgReplaySubmitContestEntry* Arena::CreateMaybeMessage<::CMsgReplaySubmitContestEntry>(Arena*);
template<> ::CMsgReplaySubmitContestEntryResponse* Arena::CreateMaybeMessage<::CMsgReplaySubmitContestEntryResponse>(Arena*);
template<> ::CMsgSaxxyAwarded* Arena::CreateMaybeMessage<::CMsgSaxxyAwarded>(Arena*);
template<> ::CMsgSetItemSlotAttribute* Arena::CreateMaybeMessage<::CMsgSetItemSlotAttribute>(Arena*);
template<> ::CMsgTFClientInit* Arena::CreateMaybeMessage<::CMsgTFClientInit>(Arena*);
template<> ::CMsgTFCoaching_AddToCoaches* Arena::CreateMaybeMessage<::CMsgTFCoaching_AddToCoaches>(Arena*);
template<> ::CMsgTFCoaching_AskCoach* Arena::CreateMaybeMessage<::CMsgTFCoaching_AskCoach>(Arena*);
template<> ::CMsgTFCoaching_AskCoachResponse* Arena::CreateMaybeMessage<::CMsgTFCoaching_AskCoachResponse>(Arena*);
template<> ::CMsgTFCoaching_CoachJoinGame* Arena::CreateMaybeMessage<::CMsgTFCoaching_CoachJoinGame>(Arena*);
template<> ::CMsgTFCoaching_CoachJoined* Arena::CreateMaybeMessage<::CMsgTFCoaching_CoachJoined>(Arena*);
template<> ::CMsgTFCoaching_CoachJoining* Arena::CreateMaybeMessage<::CMsgTFCoaching_CoachJoining>(Arena*);
template<> ::CMsgTFCoaching_FindCoach* Arena::CreateMaybeMessage<::CMsgTFCoaching_FindCoach>(Arena*);
template<> ::CMsgTFCoaching_FindCoachResponse* Arena::CreateMaybeMessage<::CMsgTFCoaching_FindCoachResponse>(Arena*);
template<> ::CMsgTFCoaching_LikeCurrentCoach* Arena::CreateMaybeMessage<::CMsgTFCoaching_LikeCurrentCoach>(Arena*);
template<> ::CMsgTFCoaching_RemoveCurrentCoach* Arena::CreateMaybeMessage<::CMsgTFCoaching_RemoveCurrentCoach>(Arena*);
template<> ::CMsgTFCoaching_RemoveFromCoaches* Arena::CreateMaybeMessage<::CMsgTFCoaching_RemoveFromCoaches>(Arena*);
template<> ::CMsgTFFreeTrialChooseMostHelpfulFriend* Arena::CreateMaybeMessage<::CMsgTFFreeTrialChooseMostHelpfulFriend>(Arena*);
template<> ::CMsgTFFreeTrialConvertedToPremium* Arena::CreateMaybeMessage<::CMsgTFFreeTrialConvertedToPremium>(Arena*);
template<> ::CMsgTFGoldenWrenchBroadcast* Arena::CreateMaybeMessage<::CMsgTFGoldenWrenchBroadcast>(Arena*);
template<> ::CMsgTFQuickplay_PlayerJoining* Arena::CreateMaybeMessage<::CMsgTFQuickplay_PlayerJoining>(Arena*);
template<> ::CMsgTFQuickplay_ScoreServers* Arena::CreateMaybeMessage<::CMsgTFQuickplay_ScoreServers>(Arena*);
template<> ::CMsgTFQuickplay_ScoreServersResponse* Arena::CreateMaybeMessage<::CMsgTFQuickplay_ScoreServersResponse>(Arena*);
template<> ::CMsgTFQuickplay_ScoreServersResponse_ServerInfo* Arena::CreateMaybeMessage<::CMsgTFQuickplay_ScoreServersResponse_ServerInfo>(Arena*);
template<> ::CMsgTFQuickplay_ScoreServers_ServerInfo* Arena::CreateMaybeMessage<::CMsgTFQuickplay_ScoreServers_ServerInfo>(Arena*);
template<> ::CMsgTFRequestTF2Friends* Arena::CreateMaybeMessage<::CMsgTFRequestTF2Friends>(Arena*);
template<> ::CMsgTFRequestTF2FriendsResponse* Arena::CreateMaybeMessage<::CMsgTFRequestTF2FriendsResponse>(Arena*);
template<> ::CMsgTFSaxxyBroadcast* Arena::CreateMaybeMessage<::CMsgTFSaxxyBroadcast>(Arena*);
template<> ::CMsgTFThankedBySomeone* Arena::CreateMaybeMessage<::CMsgTFThankedBySomeone>(Arena*);
template<> ::CMsgTFThankedSomeone* Arena::CreateMaybeMessage<::CMsgTFThankedSomeone>(Arena*);
template<> ::CMsgTFWorldStatus* Arena::CreateMaybeMessage<::CMsgTFWorldStatus>(Arena*);
template<> ::CMsgTFXPSource* Arena::CreateMaybeMessage<::CMsgTFXPSource>(Arena*);
template<> ::CMsgTFXPSourceBreakdown* Arena::CreateMaybeMessage<::CMsgTFXPSourceBreakdown>(Arena*);
template<> ::CMsgUpdateHalloweenMerasmusLootLevel* Arena::CreateMaybeMessage<::CMsgUpdateHalloweenMerasmusLootLevel>(Arena*);
template<> ::CMsgUpdateHalloweenMerasmusLootLevel_Player* Arena::CreateMaybeMessage<::CMsgUpdateHalloweenMerasmusLootLevel_Player>(Arena*);
template<> ::CReplayCachedContestData* Arena::CreateMaybeMessage<::CReplayCachedContestData>(Arena*);
template<> ::CSOQuest* Arena::CreateMaybeMessage<::CSOQuest>(Arena*);
template<> ::CSOQuestMapNode* Arena::CreateMaybeMessage<::CSOQuestMapNode>(Arena*);
template<> ::CSOQuestMapRewardPurchase* Arena::CreateMaybeMessage<::CSOQuestMapRewardPurchase>(Arena*);
template<> ::CSOTFDuelSummary* Arena::CreateMaybeMessage<::CSOTFDuelSummary>(Arena*);
template<> ::CSOTFGameServerLobby* Arena::CreateMaybeMessage<::CSOTFGameServerLobby>(Arena*);
template<> ::CSOTFLadderPlayerStats* Arena::CreateMaybeMessage<::CSOTFLadderPlayerStats>(Arena*);
template<> ::CSOTFMapContribution* Arena::CreateMaybeMessage<::CSOTFMapContribution>(Arena*);
template<> ::CSOTFMatchResultPlayerStats* Arena::CreateMaybeMessage<::CSOTFMatchResultPlayerStats>(Arena*);
template<> ::CSOTFParty* Arena::CreateMaybeMessage<::CSOTFParty>(Arena*);
template<> ::CSOTFPartyInvite* Arena::CreateMaybeMessage<::CSOTFPartyInvite>(Arena*);
template<> ::CSOTFPartyInvite_PartyMember* Arena::CreateMaybeMessage<::CSOTFPartyInvite_PartyMember>(Arena*);
template<> ::CSOTFPartyMember* Arena::CreateMaybeMessage<::CSOTFPartyMember>(Arena*);
template<> ::CSOTFPartyMember_Activity* Arena::CreateMaybeMessage<::CSOTFPartyMember_Activity>(Arena*);
template<> ::CSOTFParty_QueueEntry* Arena::CreateMaybeMessage<::CSOTFParty_QueueEntry>(Arena*);
template<> ::CSOTFPlayerInfo* Arena::CreateMaybeMessage<::CSOTFPlayerInfo>(Arena*);
template<> ::CSOTFRatingData* Arena::CreateMaybeMessage<::CSOTFRatingData>(Arena*);
template<> ::CSOWarData* Arena::CreateMaybeMessage<::CSOWarData>(Arena*);
template<> ::CTFCasualMatchCriteria* Arena::CreateMaybeMessage<::CTFCasualMatchCriteria>(Arena*);
template<> ::CTFGroupMatchCriteriaProto* Arena::CreateMaybeMessage<::CTFGroupMatchCriteriaProto>(Arena*);
template<> ::CTFLobbyInviteProto* Arena::CreateMaybeMessage<::CTFLobbyInviteProto>(Arena*);
template<> ::CTFLobbyPlayerProto* Arena::CreateMaybeMessage<::CTFLobbyPlayerProto>(Arena*);
template<> ::CTFPartyOptions* Arena::CreateMaybeMessage<::CTFPartyOptions>(Arena*);
template<> ::CTFPerPlayerMatchCriteriaProto* Arena::CreateMaybeMessage<::CTFPerPlayerMatchCriteriaProto>(Arena*);
template<> ::GCQuestStrangeEvent* Arena::CreateMaybeMessage<::GCQuestStrangeEvent>(Arena*);
template<> ::TFPendingPartyMember* Arena::CreateMaybeMessage<::TFPendingPartyMember>(Arena*);
template<> ::TFSyncedMMUIState* Arena::CreateMaybeMessage<::TFSyncedMMUIState>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum CMsgGC_GameServer_CreateIdentityResponse_EStatus : int {
  CMsgGC_GameServer_CreateIdentityResponse_EStatus_kStatus_GenericFailure = 0,
  CMsgGC_GameServer_CreateIdentityResponse_EStatus_kStatus_TooMany = -1,
  CMsgGC_GameServer_CreateIdentityResponse_EStatus_kStatus_NoPrivs = -2,
  CMsgGC_GameServer_CreateIdentityResponse_EStatus_kStatus_Created = 1
};
bool CMsgGC_GameServer_CreateIdentityResponse_EStatus_IsValid(int value);
constexpr CMsgGC_GameServer_CreateIdentityResponse_EStatus CMsgGC_GameServer_CreateIdentityResponse_EStatus_EStatus_MIN = CMsgGC_GameServer_CreateIdentityResponse_EStatus_kStatus_NoPrivs;
constexpr CMsgGC_GameServer_CreateIdentityResponse_EStatus CMsgGC_GameServer_CreateIdentityResponse_EStatus_EStatus_MAX = CMsgGC_GameServer_CreateIdentityResponse_EStatus_kStatus_Created;
constexpr int CMsgGC_GameServer_CreateIdentityResponse_EStatus_EStatus_ARRAYSIZE = CMsgGC_GameServer_CreateIdentityResponse_EStatus_EStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgGC_GameServer_CreateIdentityResponse_EStatus_descriptor();
template<typename T>
inline const std::string& CMsgGC_GameServer_CreateIdentityResponse_EStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgGC_GameServer_CreateIdentityResponse_EStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgGC_GameServer_CreateIdentityResponse_EStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgGC_GameServer_CreateIdentityResponse_EStatus_descriptor(), enum_t_value);
}
inline bool CMsgGC_GameServer_CreateIdentityResponse_EStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgGC_GameServer_CreateIdentityResponse_EStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgGC_GameServer_CreateIdentityResponse_EStatus>(
    CMsgGC_GameServer_CreateIdentityResponse_EStatus_descriptor(), name, value);
}
enum CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse : int {
  CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse_kServerModificationItemResponse_AlreadyInUse = 1,
  CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse_kServerModificationItemResponse_NotOnAuthenticatedServer = 2,
  CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse_kServerModificationItemResponse_ServerReject = 3,
  CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse_kServerModificationItemResponse_InternalError = 4,
  CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse_kServerModificationItemResponse_EventAlreadyActive = 5
};
bool CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse_IsValid(int value);
constexpr CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse_EServerModificationItemResponse_MIN = CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse_kServerModificationItemResponse_AlreadyInUse;
constexpr CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse_EServerModificationItemResponse_MAX = CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse_kServerModificationItemResponse_EventAlreadyActive;
constexpr int CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse_EServerModificationItemResponse_ARRAYSIZE = CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse_EServerModificationItemResponse_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse_descriptor();
template<typename T>
inline const std::string& CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse_descriptor(), enum_t_value);
}
inline bool CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse>(
    CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse_descriptor(), name, value);
}
enum CMsgGC_GameServer_UseServerModificationItem_Response_EServerModificationItemServerResponse : int {
  CMsgGC_GameServer_UseServerModificationItem_Response_EServerModificationItemServerResponse_kServerModificationItemServerResponse_Accepted = 1,
  CMsgGC_GameServer_UseServerModificationItem_Response_EServerModificationItemServerResponse_kServerModificationItemServerResponse_NoVoteCalled = 2,
  CMsgGC_GameServer_UseServerModificationItem_Response_EServerModificationItemServerResponse_kServerModificationItemServerResponse_VoteFailed = 3
};
bool CMsgGC_GameServer_UseServerModificationItem_Response_EServerModificationItemServerResponse_IsValid(int value);
constexpr CMsgGC_GameServer_UseServerModificationItem_Response_EServerModificationItemServerResponse CMsgGC_GameServer_UseServerModificationItem_Response_EServerModificationItemServerResponse_EServerModificationItemServerResponse_MIN = CMsgGC_GameServer_UseServerModificationItem_Response_EServerModificationItemServerResponse_kServerModificationItemServerResponse_Accepted;
constexpr CMsgGC_GameServer_UseServerModificationItem_Response_EServerModificationItemServerResponse CMsgGC_GameServer_UseServerModificationItem_Response_EServerModificationItemServerResponse_EServerModificationItemServerResponse_MAX = CMsgGC_GameServer_UseServerModificationItem_Response_EServerModificationItemServerResponse_kServerModificationItemServerResponse_VoteFailed;
constexpr int CMsgGC_GameServer_UseServerModificationItem_Response_EServerModificationItemServerResponse_EServerModificationItemServerResponse_ARRAYSIZE = CMsgGC_GameServer_UseServerModificationItem_Response_EServerModificationItemServerResponse_EServerModificationItemServerResponse_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgGC_GameServer_UseServerModificationItem_Response_EServerModificationItemServerResponse_descriptor();
template<typename T>
inline const std::string& CMsgGC_GameServer_UseServerModificationItem_Response_EServerModificationItemServerResponse_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgGC_GameServer_UseServerModificationItem_Response_EServerModificationItemServerResponse>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgGC_GameServer_UseServerModificationItem_Response_EServerModificationItemServerResponse_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgGC_GameServer_UseServerModificationItem_Response_EServerModificationItemServerResponse_descriptor(), enum_t_value);
}
inline bool CMsgGC_GameServer_UseServerModificationItem_Response_EServerModificationItemServerResponse_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgGC_GameServer_UseServerModificationItem_Response_EServerModificationItemServerResponse* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgGC_GameServer_UseServerModificationItem_Response_EServerModificationItemServerResponse>(
    CMsgGC_GameServer_UseServerModificationItem_Response_EServerModificationItemServerResponse_descriptor(), name, value);
}
enum TFPendingPartyMember_EType : int {
  TFPendingPartyMember_EType_Invited = 0,
  TFPendingPartyMember_EType_RequestedToJoin = 1
};
bool TFPendingPartyMember_EType_IsValid(int value);
constexpr TFPendingPartyMember_EType TFPendingPartyMember_EType_EType_MIN = TFPendingPartyMember_EType_Invited;
constexpr TFPendingPartyMember_EType TFPendingPartyMember_EType_EType_MAX = TFPendingPartyMember_EType_RequestedToJoin;
constexpr int TFPendingPartyMember_EType_EType_ARRAYSIZE = TFPendingPartyMember_EType_EType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TFPendingPartyMember_EType_descriptor();
template<typename T>
inline const std::string& TFPendingPartyMember_EType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TFPendingPartyMember_EType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TFPendingPartyMember_EType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TFPendingPartyMember_EType_descriptor(), enum_t_value);
}
inline bool TFPendingPartyMember_EType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TFPendingPartyMember_EType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TFPendingPartyMember_EType>(
    TFPendingPartyMember_EType_descriptor(), name, value);
}
enum CSOTFPartyInvite_Type : int {
  CSOTFPartyInvite_Type_PENDING_INVITE = 1,
  CSOTFPartyInvite_Type_PENDING_JOIN_REQUEST = 2
};
bool CSOTFPartyInvite_Type_IsValid(int value);
constexpr CSOTFPartyInvite_Type CSOTFPartyInvite_Type_Type_MIN = CSOTFPartyInvite_Type_PENDING_INVITE;
constexpr CSOTFPartyInvite_Type CSOTFPartyInvite_Type_Type_MAX = CSOTFPartyInvite_Type_PENDING_JOIN_REQUEST;
constexpr int CSOTFPartyInvite_Type_Type_ARRAYSIZE = CSOTFPartyInvite_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CSOTFPartyInvite_Type_descriptor();
template<typename T>
inline const std::string& CSOTFPartyInvite_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CSOTFPartyInvite_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CSOTFPartyInvite_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CSOTFPartyInvite_Type_descriptor(), enum_t_value);
}
inline bool CSOTFPartyInvite_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CSOTFPartyInvite_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CSOTFPartyInvite_Type>(
    CSOTFPartyInvite_Type_descriptor(), name, value);
}
enum CTFLobbyPlayerProto_ConnectState : int {
  CTFLobbyPlayerProto_ConnectState_INVALID = 0,
  CTFLobbyPlayerProto_ConnectState_RESERVATION_PENDING = 1,
  CTFLobbyPlayerProto_ConnectState_RESERVED = 2,
  CTFLobbyPlayerProto_ConnectState_CONNECTED = 3,
  CTFLobbyPlayerProto_ConnectState_DISCONNECTED = 5
};
bool CTFLobbyPlayerProto_ConnectState_IsValid(int value);
constexpr CTFLobbyPlayerProto_ConnectState CTFLobbyPlayerProto_ConnectState_ConnectState_MIN = CTFLobbyPlayerProto_ConnectState_INVALID;
constexpr CTFLobbyPlayerProto_ConnectState CTFLobbyPlayerProto_ConnectState_ConnectState_MAX = CTFLobbyPlayerProto_ConnectState_DISCONNECTED;
constexpr int CTFLobbyPlayerProto_ConnectState_ConnectState_ARRAYSIZE = CTFLobbyPlayerProto_ConnectState_ConnectState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CTFLobbyPlayerProto_ConnectState_descriptor();
template<typename T>
inline const std::string& CTFLobbyPlayerProto_ConnectState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CTFLobbyPlayerProto_ConnectState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CTFLobbyPlayerProto_ConnectState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CTFLobbyPlayerProto_ConnectState_descriptor(), enum_t_value);
}
inline bool CTFLobbyPlayerProto_ConnectState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CTFLobbyPlayerProto_ConnectState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CTFLobbyPlayerProto_ConnectState>(
    CTFLobbyPlayerProto_ConnectState_descriptor(), name, value);
}
enum CTFLobbyPlayerProto_Type : int {
  CTFLobbyPlayerProto_Type_INVALID_PLAYER = 0,
  CTFLobbyPlayerProto_Type_MATCH_PLAYER = 1,
  CTFLobbyPlayerProto_Type_STANDBY_PLAYER = 2,
  CTFLobbyPlayerProto_Type_OBSERVING_PLAYER = 3
};
bool CTFLobbyPlayerProto_Type_IsValid(int value);
constexpr CTFLobbyPlayerProto_Type CTFLobbyPlayerProto_Type_Type_MIN = CTFLobbyPlayerProto_Type_INVALID_PLAYER;
constexpr CTFLobbyPlayerProto_Type CTFLobbyPlayerProto_Type_Type_MAX = CTFLobbyPlayerProto_Type_OBSERVING_PLAYER;
constexpr int CTFLobbyPlayerProto_Type_Type_ARRAYSIZE = CTFLobbyPlayerProto_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CTFLobbyPlayerProto_Type_descriptor();
template<typename T>
inline const std::string& CTFLobbyPlayerProto_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CTFLobbyPlayerProto_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CTFLobbyPlayerProto_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CTFLobbyPlayerProto_Type_descriptor(), enum_t_value);
}
inline bool CTFLobbyPlayerProto_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CTFLobbyPlayerProto_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CTFLobbyPlayerProto_Type>(
    CTFLobbyPlayerProto_Type_descriptor(), name, value);
}
enum CSOTFGameServerLobby_State : int {
  CSOTFGameServerLobby_State_UNKNOWN = 0,
  CSOTFGameServerLobby_State_SERVERSETUP = 1,
  CSOTFGameServerLobby_State_RUN = 2
};
bool CSOTFGameServerLobby_State_IsValid(int value);
constexpr CSOTFGameServerLobby_State CSOTFGameServerLobby_State_State_MIN = CSOTFGameServerLobby_State_UNKNOWN;
constexpr CSOTFGameServerLobby_State CSOTFGameServerLobby_State_State_MAX = CSOTFGameServerLobby_State_RUN;
constexpr int CSOTFGameServerLobby_State_State_ARRAYSIZE = CSOTFGameServerLobby_State_State_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CSOTFGameServerLobby_State_descriptor();
template<typename T>
inline const std::string& CSOTFGameServerLobby_State_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CSOTFGameServerLobby_State>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CSOTFGameServerLobby_State_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CSOTFGameServerLobby_State_descriptor(), enum_t_value);
}
inline bool CSOTFGameServerLobby_State_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CSOTFGameServerLobby_State* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CSOTFGameServerLobby_State>(
    CSOTFGameServerLobby_State_descriptor(), name, value);
}
enum CSOTFGameServerLobby_WarMatch : int {
  CSOTFGameServerLobby_WarMatch_NOPE = 0,
  CSOTFGameServerLobby_WarMatch_INVADERS_ARE_PYRO = 1,
  CSOTFGameServerLobby_WarMatch_INVADERS_ARE_HEAVY = 2
};
bool CSOTFGameServerLobby_WarMatch_IsValid(int value);
constexpr CSOTFGameServerLobby_WarMatch CSOTFGameServerLobby_WarMatch_WarMatch_MIN = CSOTFGameServerLobby_WarMatch_NOPE;
constexpr CSOTFGameServerLobby_WarMatch CSOTFGameServerLobby_WarMatch_WarMatch_MAX = CSOTFGameServerLobby_WarMatch_INVADERS_ARE_HEAVY;
constexpr int CSOTFGameServerLobby_WarMatch_WarMatch_ARRAYSIZE = CSOTFGameServerLobby_WarMatch_WarMatch_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CSOTFGameServerLobby_WarMatch_descriptor();
template<typename T>
inline const std::string& CSOTFGameServerLobby_WarMatch_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CSOTFGameServerLobby_WarMatch>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CSOTFGameServerLobby_WarMatch_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CSOTFGameServerLobby_WarMatch_descriptor(), enum_t_value);
}
inline bool CSOTFGameServerLobby_WarMatch_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CSOTFGameServerLobby_WarMatch* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CSOTFGameServerLobby_WarMatch>(
    CSOTFGameServerLobby_WarMatch_descriptor(), name, value);
}
enum CMsgGameServerMatchmakingStatus_PlayerConnectState : int {
  CMsgGameServerMatchmakingStatus_PlayerConnectState_INVALID = 0,
  CMsgGameServerMatchmakingStatus_PlayerConnectState_CONNECTED = 1,
  CMsgGameServerMatchmakingStatus_PlayerConnectState_RESERVED = 2
};
bool CMsgGameServerMatchmakingStatus_PlayerConnectState_IsValid(int value);
constexpr CMsgGameServerMatchmakingStatus_PlayerConnectState CMsgGameServerMatchmakingStatus_PlayerConnectState_PlayerConnectState_MIN = CMsgGameServerMatchmakingStatus_PlayerConnectState_INVALID;
constexpr CMsgGameServerMatchmakingStatus_PlayerConnectState CMsgGameServerMatchmakingStatus_PlayerConnectState_PlayerConnectState_MAX = CMsgGameServerMatchmakingStatus_PlayerConnectState_RESERVED;
constexpr int CMsgGameServerMatchmakingStatus_PlayerConnectState_PlayerConnectState_ARRAYSIZE = CMsgGameServerMatchmakingStatus_PlayerConnectState_PlayerConnectState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgGameServerMatchmakingStatus_PlayerConnectState_descriptor();
template<typename T>
inline const std::string& CMsgGameServerMatchmakingStatus_PlayerConnectState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgGameServerMatchmakingStatus_PlayerConnectState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgGameServerMatchmakingStatus_PlayerConnectState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgGameServerMatchmakingStatus_PlayerConnectState_descriptor(), enum_t_value);
}
inline bool CMsgGameServerMatchmakingStatus_PlayerConnectState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgGameServerMatchmakingStatus_PlayerConnectState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgGameServerMatchmakingStatus_PlayerConnectState>(
    CMsgGameServerMatchmakingStatus_PlayerConnectState_descriptor(), name, value);
}
enum CMsgGameServerMatchmakingStatus_Event : int {
  CMsgGameServerMatchmakingStatus_Event_None = 0,
  CMsgGameServerMatchmakingStatus_Event_MvMVictory = 1,
  CMsgGameServerMatchmakingStatus_Event_MvMDefeat = 2,
  CMsgGameServerMatchmakingStatus_Event_AcknowledgePlayers = 3
};
bool CMsgGameServerMatchmakingStatus_Event_IsValid(int value);
constexpr CMsgGameServerMatchmakingStatus_Event CMsgGameServerMatchmakingStatus_Event_Event_MIN = CMsgGameServerMatchmakingStatus_Event_None;
constexpr CMsgGameServerMatchmakingStatus_Event CMsgGameServerMatchmakingStatus_Event_Event_MAX = CMsgGameServerMatchmakingStatus_Event_AcknowledgePlayers;
constexpr int CMsgGameServerMatchmakingStatus_Event_Event_ARRAYSIZE = CMsgGameServerMatchmakingStatus_Event_Event_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgGameServerMatchmakingStatus_Event_descriptor();
template<typename T>
inline const std::string& CMsgGameServerMatchmakingStatus_Event_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgGameServerMatchmakingStatus_Event>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgGameServerMatchmakingStatus_Event_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgGameServerMatchmakingStatus_Event_descriptor(), enum_t_value);
}
inline bool CMsgGameServerMatchmakingStatus_Event_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgGameServerMatchmakingStatus_Event* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgGameServerMatchmakingStatus_Event>(
    CMsgGameServerMatchmakingStatus_Event_descriptor(), name, value);
}
enum CMsgMvMVictoryInfo_GrantReason : int {
  CMsgMvMVictoryInfo_GrantReason_INVALID = 0,
  CMsgMvMVictoryInfo_GrantReason_BADGE_LEVELED = 1,
  CMsgMvMVictoryInfo_GrantReason_SQUAD_SURPLUS = 2,
  CMsgMvMVictoryInfo_GrantReason_MANN_UP = 3,
  CMsgMvMVictoryInfo_GrantReason_HELP_A_NOOB = 4
};
bool CMsgMvMVictoryInfo_GrantReason_IsValid(int value);
constexpr CMsgMvMVictoryInfo_GrantReason CMsgMvMVictoryInfo_GrantReason_GrantReason_MIN = CMsgMvMVictoryInfo_GrantReason_INVALID;
constexpr CMsgMvMVictoryInfo_GrantReason CMsgMvMVictoryInfo_GrantReason_GrantReason_MAX = CMsgMvMVictoryInfo_GrantReason_HELP_A_NOOB;
constexpr int CMsgMvMVictoryInfo_GrantReason_GrantReason_ARRAYSIZE = CMsgMvMVictoryInfo_GrantReason_GrantReason_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgMvMVictoryInfo_GrantReason_descriptor();
template<typename T>
inline const std::string& CMsgMvMVictoryInfo_GrantReason_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgMvMVictoryInfo_GrantReason>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgMvMVictoryInfo_GrantReason_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgMvMVictoryInfo_GrantReason_descriptor(), enum_t_value);
}
inline bool CMsgMvMVictoryInfo_GrantReason_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgMvMVictoryInfo_GrantReason* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgMvMVictoryInfo_GrantReason>(
    CMsgMvMVictoryInfo_GrantReason_descriptor(), name, value);
}
enum CMsgTFXPSource_XPSourceType : int {
  CMsgTFXPSource_XPSourceType_SOURCE_SCORE = 0,
  CMsgTFXPSource_XPSourceType_SOURCE_OBJECTIVE_BONUS = 1,
  CMsgTFXPSource_XPSourceType_SOURCE_COMPLETED_MATCH = 2,
  CMsgTFXPSource_XPSourceType_SOURCE_COMPETITIVE_ABANDON = 3,
  CMsgTFXPSource_XPSourceType_SOURCE_COMPETITIVE_WIN = 4,
  CMsgTFXPSource_XPSourceType_SOURCE_COMPETITIVE_LOSS = 5,
  CMsgTFXPSource_XPSourceType_SOURCE_AUTOBALANCE_BONUS = 6,
  CMsgTFXPSource_XPSourceType_SOURCE_PRESTIGE_BONUS = 7
};
bool CMsgTFXPSource_XPSourceType_IsValid(int value);
constexpr CMsgTFXPSource_XPSourceType CMsgTFXPSource_XPSourceType_XPSourceType_MIN = CMsgTFXPSource_XPSourceType_SOURCE_SCORE;
constexpr CMsgTFXPSource_XPSourceType CMsgTFXPSource_XPSourceType_XPSourceType_MAX = CMsgTFXPSource_XPSourceType_SOURCE_PRESTIGE_BONUS;
constexpr int CMsgTFXPSource_XPSourceType_XPSourceType_ARRAYSIZE = CMsgTFXPSource_XPSourceType_XPSourceType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgTFXPSource_XPSourceType_descriptor();
template<typename T>
inline const std::string& CMsgTFXPSource_XPSourceType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgTFXPSource_XPSourceType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgTFXPSource_XPSourceType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgTFXPSource_XPSourceType_descriptor(), enum_t_value);
}
inline bool CMsgTFXPSource_XPSourceType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgTFXPSource_XPSourceType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgTFXPSource_XPSourceType>(
    CMsgTFXPSource_XPSourceType_descriptor(), name, value);
}
enum CMsgGCNotification_NotificationType : int {
  CMsgGCNotification_NotificationType_NOTIFICATION_REPORTED_PLAYER_BANNED = 0,
  CMsgGCNotification_NotificationType_NOTIFICATION_CUSTOM_STRING = 1,
  CMsgGCNotification_NotificationType_NOTIFICATION_MM_BAN_DUE_TO_EXCESSIVE_REPORTS = 2,
  CMsgGCNotification_NotificationType_NOTIFICATION_REPORTED_PLAYER_WAS_BANNED = 3,
  CMsgGCNotification_NotificationType_NOTIFICATION_SUPPORT_MESSAGE = 4,
  CMsgGCNotification_NotificationType_NOTIFICATION_NUM_TYPES = 5
};
bool CMsgGCNotification_NotificationType_IsValid(int value);
constexpr CMsgGCNotification_NotificationType CMsgGCNotification_NotificationType_NotificationType_MIN = CMsgGCNotification_NotificationType_NOTIFICATION_REPORTED_PLAYER_BANNED;
constexpr CMsgGCNotification_NotificationType CMsgGCNotification_NotificationType_NotificationType_MAX = CMsgGCNotification_NotificationType_NOTIFICATION_NUM_TYPES;
constexpr int CMsgGCNotification_NotificationType_NotificationType_ARRAYSIZE = CMsgGCNotification_NotificationType_NotificationType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgGCNotification_NotificationType_descriptor();
template<typename T>
inline const std::string& CMsgGCNotification_NotificationType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgGCNotification_NotificationType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgGCNotification_NotificationType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgGCNotification_NotificationType_descriptor(), enum_t_value);
}
inline bool CMsgGCNotification_NotificationType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgGCNotification_NotificationType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgGCNotification_NotificationType>(
    CMsgGCNotification_NotificationType_descriptor(), name, value);
}
enum CMsgGC_Match_Result_Status : int {
  CMsgGC_Match_Result_Status_MATCH_SUCCEEDED = 0,
  CMsgGC_Match_Result_Status_MATCH_FAILED_GC = 1,
  CMsgGC_Match_Result_Status_MATCH_FAILED_TRUSTED = 2,
  CMsgGC_Match_Result_Status_MATCH_FAILED_ABANDON = 3,
  CMsgGC_Match_Result_Status_MATCH_FAILED_UNKNOWN = 5,
  CMsgGC_Match_Result_Status_MATCH_FAILED_TIMEOUT = 6,
  CMsgGC_Match_Result_Status_MATCH_FINISHED_ABANDON = 7
};
bool CMsgGC_Match_Result_Status_IsValid(int value);
constexpr CMsgGC_Match_Result_Status CMsgGC_Match_Result_Status_Status_MIN = CMsgGC_Match_Result_Status_MATCH_SUCCEEDED;
constexpr CMsgGC_Match_Result_Status CMsgGC_Match_Result_Status_Status_MAX = CMsgGC_Match_Result_Status_MATCH_FINISHED_ABANDON;
constexpr int CMsgGC_Match_Result_Status_Status_ARRAYSIZE = CMsgGC_Match_Result_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgGC_Match_Result_Status_descriptor();
template<typename T>
inline const std::string& CMsgGC_Match_Result_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgGC_Match_Result_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgGC_Match_Result_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgGC_Match_Result_Status_descriptor(), enum_t_value);
}
inline bool CMsgGC_Match_Result_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgGC_Match_Result_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgGC_Match_Result_Status>(
    CMsgGC_Match_Result_Status_descriptor(), name, value);
}
enum CMsgGC_ReportPlayer_EReason : int {
  CMsgGC_ReportPlayer_EReason_kReason_INVALID = 0,
  CMsgGC_ReportPlayer_EReason_kReason_CHEATING = 1,
  CMsgGC_ReportPlayer_EReason_kReason_IDLE = 2,
  CMsgGC_ReportPlayer_EReason_kReason_HARASSMENT = 3,
  CMsgGC_ReportPlayer_EReason_kReason_GRIEFING = 4,
  CMsgGC_ReportPlayer_EReason_kReason_COUNT = 5
};
bool CMsgGC_ReportPlayer_EReason_IsValid(int value);
constexpr CMsgGC_ReportPlayer_EReason CMsgGC_ReportPlayer_EReason_EReason_MIN = CMsgGC_ReportPlayer_EReason_kReason_INVALID;
constexpr CMsgGC_ReportPlayer_EReason CMsgGC_ReportPlayer_EReason_EReason_MAX = CMsgGC_ReportPlayer_EReason_kReason_COUNT;
constexpr int CMsgGC_ReportPlayer_EReason_EReason_ARRAYSIZE = CMsgGC_ReportPlayer_EReason_EReason_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgGC_ReportPlayer_EReason_descriptor();
template<typename T>
inline const std::string& CMsgGC_ReportPlayer_EReason_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgGC_ReportPlayer_EReason>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgGC_ReportPlayer_EReason_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgGC_ReportPlayer_EReason_descriptor(), enum_t_value);
}
inline bool CMsgGC_ReportPlayer_EReason_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgGC_ReportPlayer_EReason* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgGC_ReportPlayer_EReason>(
    CMsgGC_ReportPlayer_EReason_descriptor(), name, value);
}
enum CMsgGCDataCenterPing_Update_Status : int {
  CMsgGCDataCenterPing_Update_Status_Invalid = 0,
  CMsgGCDataCenterPing_Update_Status_Normal = 1,
  CMsgGCDataCenterPing_Update_Status_Unreachable = 2,
  CMsgGCDataCenterPing_Update_Status_FallbackToDCPing = 3
};
bool CMsgGCDataCenterPing_Update_Status_IsValid(int value);
constexpr CMsgGCDataCenterPing_Update_Status CMsgGCDataCenterPing_Update_Status_Status_MIN = CMsgGCDataCenterPing_Update_Status_Invalid;
constexpr CMsgGCDataCenterPing_Update_Status CMsgGCDataCenterPing_Update_Status_Status_MAX = CMsgGCDataCenterPing_Update_Status_FallbackToDCPing;
constexpr int CMsgGCDataCenterPing_Update_Status_Status_ARRAYSIZE = CMsgGCDataCenterPing_Update_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgGCDataCenterPing_Update_Status_descriptor();
template<typename T>
inline const std::string& CMsgGCDataCenterPing_Update_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgGCDataCenterPing_Update_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgGCDataCenterPing_Update_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgGCDataCenterPing_Update_Status_descriptor(), enum_t_value);
}
inline bool CMsgGCDataCenterPing_Update_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgGCDataCenterPing_Update_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgGCDataCenterPing_Update_Status>(
    CMsgGCDataCenterPing_Update_Status_descriptor(), name, value);
}
enum ETFGCMsg : int {
  k_EMsgGCReportWarKill = 5001,
  k_EMsgGCKickPlayer_DEPRECATED = 5020,
  k_EMsgGCStartedTraining_DEPRECATED = 5021,
  k_EMsgGCFreeTrial_ChooseMostHelpfulFriend = 5022,
  k_EMsgGCRequestTF2Friends = 5023,
  k_EMsgGCRequestTF2FriendsResponse = 5024,
  k_EMsgGCReplay_SubmitContestEntry = 5026,
  k_EMsgGCReplay_SubmitContestEntryResponse = 5027,
  k_EMsgGCSaxxy_Awarded = 5029,
  k_EMsgGCFreeTrial_ThankedBySomeone = 5028,
  k_EMsgGCFreeTrial_ThankedSomeone = 5030,
  k_EMsgGCFreeTrial_ConvertedToPremium = 5031,
  k_EMsgGCMeetThePyroSilliness_BananaCraft_DEPRECATED = 5032,
  k_EMsgGCMVMARG_HighFiveSuccessResponse_DEPRECATED = 5033,
  k_EMsgGCMVMARG_HighFiveOnClient_DEPRECATED = 5034,
  k_EMsgGCCoaching_AddToCoaches = 5200,
  k_EMsgGCCoaching_AddToCoachesResponse = 5201,
  k_EMsgGCCoaching_RemoveFromCoaches = 5202,
  k_EMsgGCCoaching_RemoveFromCoachesResponse = 5203,
  k_EMsgGCCoaching_FindCoach = 5204,
  k_EMsgGCCoaching_FindCoachResponse = 5205,
  k_EMsgGCCoaching_AskCoach = 5206,
  k_EMsgGCCoaching_AskCoachResponse = 5207,
  k_EMsgGCCoaching_CoachJoinGame = 5208,
  k_EMsgGCCoaching_CoachJoining = 5209,
  k_EMsgGCCoaching_CoachJoined = 5210,
  k_EMsgGCCoaching_LikeCurrentCoach = 5211,
  k_EMsgGCCoaching_RemoveCurrentCoach = 5212,
  k_EMsgGCCoaching_AlreadyRatedCoach = 5213,
  k_EMsgGC_Duel_Request = 5500,
  k_EMsgGC_Duel_Response = 5501,
  k_EMsgGC_Duel_Results = 5502,
  k_EMsgGC_Duel_Status = 5503,
  k_EMsgGC_Halloween_ReservedItem_DEPRECATED = 5600,
  k_EMsgGC_Halloween_GrantItem_DEPRECATED = 5601,
  k_EMsgGC_Halloween_GrantItemResponse_DEPRECATED = 5604,
  k_EMsgGC_Halloween_Cheat_QueryResponse_DEPRECATED = 5605,
  k_EMsgGC_Halloween_ItemClaimed_DEPRECATED = 5606,
  k_EMsgGC_Halloween_ReservedItem = 5607,
  k_EMsgGC_Halloween_GrantItem = 5608,
  k_EMsgGC_Halloween_GrantItemResponse = 5609,
  k_EMsgGC_Halloween_Cheat_QueryResponse_DEPRECATED_2 = 5610,
  k_EMsgGC_Halloween_ItemClaimed_DEPRECATED_2 = 5611,
  k_EMsgGC_Halloween_ServerBossEvent = 5612,
  k_EMsgGC_Halloween_Merasmus2012 = 5613,
  k_EMsgGC_Halloween_UpdateMerasmusLootLevel = 5614,
  k_EMsgGC_GameServer_LevelInfo = 5700,
  k_EMsgGC_GameServer_AuthChallenge = 5701,
  k_EMsgGC_GameServer_AuthChallengeResponse = 5702,
  k_EMsgGC_GameServer_CreateIdentity = 5703,
  k_EMsgGC_GameServer_CreateIdentityResponse = 5704,
  k_EMsgGC_GameServer_List = 5705,
  k_EMsgGC_GameServer_ListResponse = 5706,
  k_EMsgGC_GameServer_AuthResult = 5707,
  k_EMsgGC_GameServer_ResetIdentity = 5708,
  k_EMsgGC_GameServer_ResetIdentityResponse = 5709,
  k_EMsgGC_Client_UseServerModificationItem = 5710,
  k_EMsgGC_Client_UseServerModificationItem_Response = 5711,
  k_EMsgGC_GameServer_UseServerModificationItem = 5712,
  k_EMsgGC_GameServer_UseServerModificationItem_Response = 5713,
  k_EMsgGC_GameServer_ServerModificationItemExpired = 5714,
  k_EMsgGC_GameServer_ModificationItemState = 5715,
  k_EMsgGC_GameServer_AckPolicy = 5716,
  k_EMsgGC_GameServer_AckPolicyResponse = 5717,
  k_EMsgGC_QP_ScoreServers = 5800,
  k_EMsgGC_QP_ScoreServersResponse = 5801,
  k_EMsgGC_QP_PlayerJoining = 5802,
  k_EMsgGC_PickupItemEligibility_Query_DEPRECATED = 6000,
  k_EMsgGC_PickupItemEligibility_Query_DEPRECATED_2 = 6001,
  k_EMsgGC_IncrementKillCountAttribute_DEPRECATED = 6100,
  k_EMsgGC_IncrementKillCountResponse_DEPRECATED = 6101,
  k_EMsgGCAbandonCurrentGame = 6235,
  k_EMsgForceSOCacheResend = 6237,
  k_EMsgGCRequestChatChannelList = 6260,
  k_EMsgGCRequestChatChannelListResponse = 6261,
  k_EMsgGCReadyUp = 6270,
  k_EMsgGCKickedFromMatchmakingQueue = 6271,
  k_EMsgGCLeaverDetected = 6272,
  k_EMsgGCLeaverDetectedResponse = 6287,
  k_EMsgGCExitMatchmaking = 6289,
  k_EMsgGCMatchmakingProgress = 6293,
  k_EMsgGCMvMVictoryInfo = 6294,
  k_EMsgGCGameServerMatchmakingStatus = 6295,
  k_EMsgGCMvMVictory = 6297,
  k_EMsgGCMvMVictoryReply = 6298,
  k_EMsgGCGameServerKickingLobby = 6299,
  k_EMsgGCLeaveGameAndPrepareToJoinParty = 6300,
  k_EMsgGC_UpdatePeriodicEvent = 6400,
  k_EMsgGC_DuckLeaderboard_IndividualUpdate = 6401,
  k_EMsgGC_Client2GCEconPreviewDataBlockRequest = 6402,
  k_EMsgGC_Client2GCEconPreviewDataBlockResponse = 6403,
  k_EMsgGC_ClientVerificationChallenge = 6500,
  k_EMsgGC_ClientVerificationChallengeResponse = 6501,
  k_EMsgGC_ClientVerificationVerboseResponse = 6502,
  k_EMsgGC_ClientSetItemSlotAttribute = 6503,
  k_EMsgGC_War_IndividualUpdate = 6505,
  k_EMsgGC_War_JoinWar = 6506,
  k_EMsgGC_War_RequestGlobalStats = 6507,
  k_EMsgGC_War_GlobalStatsResponse = 6508,
  k_EMsgGC_WorldItemPlacement_Attribute = 6510,
  k_EMsgGC_WorldItemPlacement_Update = 6511,
  k_EMsgGC_Match_Result = 6512,
  k_EMsgGCVoteKickPlayerRequest = 6513,
  k_EMsgGCVoteKickPlayerRequestResponse = 6514,
  k_EMsgGC_DailyCompetitiveStatsRollup = 6516,
  k_EMsgGC_DailyCompetitiveStatsRollup_Response = 6517,
  k_EMsgGC_WorldStatusBroadcast = 6518,
  k_EMsgGC_ReportPlayer = 6519,
  k_EMsgGC_Match_ResultResponse = 6520,
  k_EMsgGCGameServerKickingLobbyResponse = 6521,
  k_EMsgGCPlayerLeftMatch = 6522,
  k_EMsgGCPlayerLeftMatchResponse = 6523,
  k_EMsgGCRequestMatchMakerStats = 6524,
  k_EMsgGCMatchMakerStatsResponse = 6525,
  k_EMsgGCMatchHistoryLoad = 6526,
  k_EMsgGC_AcknowledgeXP = 6527,
  k_EMsgGCDataCenterPing_Update = 6528,
  k_EMsgGC_NotificationAcknowledge = 6529,
  k_EMsgGC_NotificationAcknowledgeReply = 6530,
  k_EMsgGC_KickPlayerFromLobby = 6531,
  k_EMsgGC_SurveyQuestionRequest = 6534,
  k_EMsgGC_SurveyQuestionResponse = 6535,
  k_EMsgGC_TFClientInit = 6536,
  k_EMsgGC_NewMatchForLobbyRequest = 6537,
  k_EMsgGC_NewMatchForLobbyResponse = 6538,
  k_EMsgGC_ChangeMatchPlayerTeamsRequest = 6539,
  k_EMsgGC_ChangeMatchPlayerTeamsResponse = 6540,
  k_EMsgGC_QuestIdentify = 6541,
  k_EMsgGC_QuestDevGive = 6542,
  k_EMsgGCQuestComplete_Debug = 6544,
  k_EMsgGC_QuestMapDebug = 6545,
  k_EMsgGC_QuestMapUnlockNode = 6547,
  k_EMsgGC_QuestMapPurchaseReward = 6549,
  k_EMsgGC_SetDisablePartyQuestProgress = 6550,
  k_EMsgGCQuestProgressReport = 6553,
  k_EMsgGCParty_SetOptions = 6554,
  k_EMsgGCParty_SetOptionsResponse = 6555,
  k_EMsgGCParty_QueueForMatch = 6556,
  k_EMsgGCParty_QueueForMatchResponse = 6557,
  k_EMsgGCParty_RemoveFromQueue = 6558,
  k_EMsgGCParty_RemoveFromQueueResponse = 6559,
  k_EMsgGCParty_InvitePlayer = 6560,
  k_EMsgGCParty_RequestJoinPlayer = 6561,
  k_EMsgGCParty_SendChat = 6562,
  k_EMsgGCParty_ChatMsg = 6563,
  k_EMsgGCQuestNodeTurnIn = 6564,
  k_EMsgGCConsumePaintKit = 6565,
  k_EMsgGC_Painkit_DevGrant = 6566,
  k_EMsgGCParty_QueueForStandby = 6567,
  k_EMsgGCParty_QueueForStandbyResponse = 6568,
  k_EMsgGCParty_RemoveFromStandbyQueue = 6569,
  k_EMsgGCParty_RemoveFromStandbyQueueResponse = 6570,
  k_EMsgGCParty_ClearPendingPlayer = 6571,
  k_EMsgGCParty_ClearPendingPlayerResponse = 6572,
  k_EMsgGCParty_ClearOtherPartyRequest = 6573,
  k_EMsgGCParty_ClearOtherPartyRequestResponse = 6574,
  k_EMsgGCParty_PromoteToLeader = 6575,
  k_EMsgGCParty_KickMember = 6576,
  k_EMsgGCQuestStrangeEvent = 6577,
  k_EMsgGC_AcceptLobbyInvite = 6578,
  k_EMsgGC_AcceptLobbyInviteReply = 6579,
  k_EMsgGC_ProcessMatchVoteKick = 6581,
  k_EMsgGC_ProcessMatchVoteKickResponse = 6582,
  k_EMsgGCDev_GrantWarKill = 10001
};
bool ETFGCMsg_IsValid(int value);
constexpr ETFGCMsg ETFGCMsg_MIN = k_EMsgGCReportWarKill;
constexpr ETFGCMsg ETFGCMsg_MAX = k_EMsgGCDev_GrantWarKill;
constexpr int ETFGCMsg_ARRAYSIZE = ETFGCMsg_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ETFGCMsg_descriptor();
template<typename T>
inline const std::string& ETFGCMsg_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ETFGCMsg>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ETFGCMsg_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ETFGCMsg_descriptor(), enum_t_value);
}
inline bool ETFGCMsg_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ETFGCMsg* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ETFGCMsg>(
    ETFGCMsg_descriptor(), name, value);
}
enum EServerModificationItemType : int {
  kGameServerModificationItem_Halloween = 1
};
bool EServerModificationItemType_IsValid(int value);
constexpr EServerModificationItemType EServerModificationItemType_MIN = kGameServerModificationItem_Halloween;
constexpr EServerModificationItemType EServerModificationItemType_MAX = kGameServerModificationItem_Halloween;
constexpr int EServerModificationItemType_ARRAYSIZE = EServerModificationItemType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EServerModificationItemType_descriptor();
template<typename T>
inline const std::string& EServerModificationItemType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EServerModificationItemType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EServerModificationItemType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EServerModificationItemType_descriptor(), enum_t_value);
}
inline bool EServerModificationItemType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EServerModificationItemType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EServerModificationItemType>(
    EServerModificationItemType_descriptor(), name, value);
}
enum ETFSyncedMMMenuStep : int {
  k_eTFSyncedMMMenuStep_Invalid = -1,
  k_eTFSyncedMMMenuStep_None = 0,
  k_eTFSyncedMMMenuStep_Configuring_Mode = 1,
  k_eTFSyncedMMMenuStep_MvM_Selecting_Mode = 2,
  k_eTFSyncedMMMenuStep_MvM_Selecting_Tour = 3,
  k_eTFSyncedMMMenuStep_MvM_Selecting_Missions = 4
};
bool ETFSyncedMMMenuStep_IsValid(int value);
constexpr ETFSyncedMMMenuStep ETFSyncedMMMenuStep_MIN = k_eTFSyncedMMMenuStep_Invalid;
constexpr ETFSyncedMMMenuStep ETFSyncedMMMenuStep_MAX = k_eTFSyncedMMMenuStep_MvM_Selecting_Missions;
constexpr int ETFSyncedMMMenuStep_ARRAYSIZE = ETFSyncedMMMenuStep_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ETFSyncedMMMenuStep_descriptor();
template<typename T>
inline const std::string& ETFSyncedMMMenuStep_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ETFSyncedMMMenuStep>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ETFSyncedMMMenuStep_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ETFSyncedMMMenuStep_descriptor(), enum_t_value);
}
inline bool ETFSyncedMMMenuStep_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ETFSyncedMMMenuStep* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ETFSyncedMMMenuStep>(
    ETFSyncedMMMenuStep_descriptor(), name, value);
}
enum ETFMatchGroup : int {
  k_eTFMatchGroup_Invalid = -1,
  k_eTFMatchGroup_MvM_Practice = 0,
  k_eTFMatchGroup_MvM_MannUp = 1,
  k_eTFMatchGroup_First = 0,
  k_eTFMatchGroup_MvM_Default = 0,
  k_eTFMatchGroup_MvM_First = 0,
  k_eTFMatchGroup_MvM_Last = 1,
  k_eTFMatchGroup_Ladder_6v6 = 2,
  k_eTFMatchGroup_Ladder_9v9 = 3,
  k_eTFMatchGroup_Ladder_12v12 = 4,
  k_eTFMatchGroup_Ladder_Default = 2,
  k_eTFMatchGroup_Ladder_First = 2,
  k_eTFMatchGroup_Ladder_Last = 4,
  k_eTFMatchGroup_Casual_6v6 = 5,
  k_eTFMatchGroup_Casual_9v9 = 6,
  k_eTFMatchGroup_Casual_12v12 = 7,
  k_eTFMatchGroup_Casual_Default = 7,
  k_eTFMatchGroup_Casual_First = 5,
  k_eTFMatchGroup_Casual_Last = 7,
  k_eTFMatchGroup_Event_Placeholder = 8,
  k_eTFMatchGroup_Event_Default = 8,
  k_eTFMatchGroup_Event_First = 8,
  k_eTFMatchGroup_Event_Last = 8
};
bool ETFMatchGroup_IsValid(int value);
constexpr ETFMatchGroup ETFMatchGroup_MIN = k_eTFMatchGroup_Invalid;
constexpr ETFMatchGroup ETFMatchGroup_MAX = k_eTFMatchGroup_Event_Placeholder;
constexpr int ETFMatchGroup_ARRAYSIZE = ETFMatchGroup_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ETFMatchGroup_descriptor();
template<typename T>
inline const std::string& ETFMatchGroup_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ETFMatchGroup>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ETFMatchGroup_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ETFMatchGroup_descriptor(), enum_t_value);
}
inline bool ETFMatchGroup_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ETFMatchGroup* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ETFMatchGroup>(
    ETFMatchGroup_descriptor(), name, value);
}
enum ETFPartyChatType : int {
  k_eTFPartyChatType_Invalid = 0,
  k_eTFPartyChatType_MemberChat = 1,
  k_eTFPartyChatType_Synthetic_MemberJoin = 1000,
  k_eTFPartyChatType_Synthetic_MemberLeave = 1001,
  k_eTFPartyChatType_Synthetic_SendFailed = 1002,
  k_eTFPartyChatType_Synthetic_MemberOnline = 1003,
  k_eTFPartyChatType_Synthetic_MemberOffline = 1004
};
bool ETFPartyChatType_IsValid(int value);
constexpr ETFPartyChatType ETFPartyChatType_MIN = k_eTFPartyChatType_Invalid;
constexpr ETFPartyChatType ETFPartyChatType_MAX = k_eTFPartyChatType_Synthetic_MemberOffline;
constexpr int ETFPartyChatType_ARRAYSIZE = ETFPartyChatType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ETFPartyChatType_descriptor();
template<typename T>
inline const std::string& ETFPartyChatType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ETFPartyChatType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ETFPartyChatType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ETFPartyChatType_descriptor(), enum_t_value);
}
inline bool ETFPartyChatType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ETFPartyChatType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ETFPartyChatType>(
    ETFPartyChatType_descriptor(), name, value);
}
enum TF_GC_GameState : int {
  TF_GC_GAMESTATE_STATE_INIT = 0,
  TF_GC_GAMESTATE_WAIT_FOR_PLAYERS_TO_LOAD = 1,
  TF_GC_GAMESTATE_STRATEGY_TIME = 3,
  TF_GC_GAMESTATE_GAME_IN_PROGRESS = 5,
  TF_GC_GAMESTATE_POST_GAME = 6,
  TF_GC_GAMESTATE_DISCONNECT = 7,
  TF_GC_GAMESTATE_LAST = 8
};
bool TF_GC_GameState_IsValid(int value);
constexpr TF_GC_GameState TF_GC_GameState_MIN = TF_GC_GAMESTATE_STATE_INIT;
constexpr TF_GC_GameState TF_GC_GameState_MAX = TF_GC_GAMESTATE_LAST;
constexpr int TF_GC_GameState_ARRAYSIZE = TF_GC_GameState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TF_GC_GameState_descriptor();
template<typename T>
inline const std::string& TF_GC_GameState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TF_GC_GameState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TF_GC_GameState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TF_GC_GameState_descriptor(), enum_t_value);
}
inline bool TF_GC_GameState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TF_GC_GameState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TF_GC_GameState>(
    TF_GC_GameState_descriptor(), name, value);
}
enum TF_GC_TEAM : int {
  TF_GC_TEAM_DEFENDERS = 0,
  TF_GC_TEAM_INVADERS = 1,
  TF_GC_TEAM_BROADCASTER = 2,
  TF_GC_TEAM_SPECTATOR = 3,
  TF_GC_TEAM_PLAYER_POOL = 4,
  TF_GC_TEAM_NOTEAM = 5
};
bool TF_GC_TEAM_IsValid(int value);
constexpr TF_GC_TEAM TF_GC_TEAM_MIN = TF_GC_TEAM_DEFENDERS;
constexpr TF_GC_TEAM TF_GC_TEAM_MAX = TF_GC_TEAM_NOTEAM;
constexpr int TF_GC_TEAM_ARRAYSIZE = TF_GC_TEAM_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TF_GC_TEAM_descriptor();
template<typename T>
inline const std::string& TF_GC_TEAM_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TF_GC_TEAM>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TF_GC_TEAM_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TF_GC_TEAM_descriptor(), enum_t_value);
}
inline bool TF_GC_TEAM_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TF_GC_TEAM* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TF_GC_TEAM>(
    TF_GC_TEAM_descriptor(), name, value);
}
enum TFMatchLeaveReason : int {
  TFMatchLeaveReason_UNSPECIFIED = 0,
  TFMatchLeaveReason_VOTE_KICK = 1,
  TFMatchLeaveReason_IDLE = 2,
  TFMatchLeaveReason_ADMIN_KICK = 3,
  TFMatchLeaveReason_AWOL = 4,
  TFMatchLeaveReason_NO_SHOW = 5,
  TFMatchLeaveReason_GC_REMOVED = 6
};
bool TFMatchLeaveReason_IsValid(int value);
constexpr TFMatchLeaveReason TFMatchLeaveReason_MIN = TFMatchLeaveReason_UNSPECIFIED;
constexpr TFMatchLeaveReason TFMatchLeaveReason_MAX = TFMatchLeaveReason_GC_REMOVED;
constexpr int TFMatchLeaveReason_ARRAYSIZE = TFMatchLeaveReason_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TFMatchLeaveReason_descriptor();
template<typename T>
inline const std::string& TFMatchLeaveReason_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TFMatchLeaveReason>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TFMatchLeaveReason_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TFMatchLeaveReason_descriptor(), enum_t_value);
}
inline bool TFMatchLeaveReason_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TFMatchLeaveReason* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TFMatchLeaveReason>(
    TFMatchLeaveReason_descriptor(), name, value);
}
enum TFVoteKickReason : int {
  TFVoteKickReason_Other = 0,
  TFVoteKickReason_Cheating = 1,
  TFVoteKickReason_Idle = 2,
  TFVoteKickReason_Scamming = 3
};
bool TFVoteKickReason_IsValid(int value);
constexpr TFVoteKickReason TFVoteKickReason_MIN = TFVoteKickReason_Other;
constexpr TFVoteKickReason TFVoteKickReason_MAX = TFVoteKickReason_Scamming;
constexpr int TFVoteKickReason_ARRAYSIZE = TFVoteKickReason_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TFVoteKickReason_descriptor();
template<typename T>
inline const std::string& TFVoteKickReason_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TFVoteKickReason>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TFVoteKickReason_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TFVoteKickReason_descriptor(), enum_t_value);
}
inline bool TFVoteKickReason_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TFVoteKickReason* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TFVoteKickReason>(
    TFVoteKickReason_descriptor(), name, value);
}
enum ServerMatchmakingState : int {
  ServerMatchmakingState_INVALID = 0,
  ServerMatchmakingState_NOT_PARTICIPATING = 1,
  ServerMatchmakingState_EMPTY = 2,
  ServerMatchmakingState_ACTIVE_MATCH_REQUESTING_LATE_JOIN = 3,
  ServerMatchmakingState_ACTIVE_MATCH = 4
};
bool ServerMatchmakingState_IsValid(int value);
constexpr ServerMatchmakingState ServerMatchmakingState_MIN = ServerMatchmakingState_INVALID;
constexpr ServerMatchmakingState ServerMatchmakingState_MAX = ServerMatchmakingState_ACTIVE_MATCH;
constexpr int ServerMatchmakingState_ARRAYSIZE = ServerMatchmakingState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServerMatchmakingState_descriptor();
template<typename T>
inline const std::string& ServerMatchmakingState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ServerMatchmakingState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ServerMatchmakingState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ServerMatchmakingState_descriptor(), enum_t_value);
}
inline bool ServerMatchmakingState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ServerMatchmakingState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ServerMatchmakingState>(
    ServerMatchmakingState_descriptor(), name, value);
}
enum SurveyQuestionType : int {
  QUESTION_MATCH_QUALITY = 0,
  QUESTION_MAP_QUALITY = 1,
  QUESTION_COMP_INQUIRY = 2,
  QUESTION_CASUAL_INQUIRY = 3,
  QUESTION_RANDOM_CRIT = 4
};
bool SurveyQuestionType_IsValid(int value);
constexpr SurveyQuestionType SurveyQuestionType_MIN = QUESTION_MATCH_QUALITY;
constexpr SurveyQuestionType SurveyQuestionType_MAX = QUESTION_RANDOM_CRIT;
constexpr int SurveyQuestionType_ARRAYSIZE = SurveyQuestionType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SurveyQuestionType_descriptor();
template<typename T>
inline const std::string& SurveyQuestionType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SurveyQuestionType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SurveyQuestionType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SurveyQuestionType_descriptor(), enum_t_value);
}
inline bool SurveyQuestionType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SurveyQuestionType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SurveyQuestionType>(
    SurveyQuestionType_descriptor(), name, value);
}
// ===================================================================

class CMsgTFGoldenWrenchBroadcast final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgTFGoldenWrenchBroadcast) */ {
 public:
  inline CMsgTFGoldenWrenchBroadcast() : CMsgTFGoldenWrenchBroadcast(nullptr) {}
  ~CMsgTFGoldenWrenchBroadcast() override;
  explicit constexpr CMsgTFGoldenWrenchBroadcast(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgTFGoldenWrenchBroadcast(const CMsgTFGoldenWrenchBroadcast& from);
  CMsgTFGoldenWrenchBroadcast(CMsgTFGoldenWrenchBroadcast&& from) noexcept
    : CMsgTFGoldenWrenchBroadcast() {
    *this = ::std::move(from);
  }

  inline CMsgTFGoldenWrenchBroadcast& operator=(const CMsgTFGoldenWrenchBroadcast& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgTFGoldenWrenchBroadcast& operator=(CMsgTFGoldenWrenchBroadcast&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgTFGoldenWrenchBroadcast& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgTFGoldenWrenchBroadcast* internal_default_instance() {
    return reinterpret_cast<const CMsgTFGoldenWrenchBroadcast*>(
               &_CMsgTFGoldenWrenchBroadcast_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CMsgTFGoldenWrenchBroadcast& a, CMsgTFGoldenWrenchBroadcast& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgTFGoldenWrenchBroadcast* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgTFGoldenWrenchBroadcast* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgTFGoldenWrenchBroadcast* New() const final {
    return new CMsgTFGoldenWrenchBroadcast();
  }

  CMsgTFGoldenWrenchBroadcast* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgTFGoldenWrenchBroadcast>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgTFGoldenWrenchBroadcast& from);
  void MergeFrom(const CMsgTFGoldenWrenchBroadcast& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgTFGoldenWrenchBroadcast* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgTFGoldenWrenchBroadcast";
  }
  protected:
  explicit CMsgTFGoldenWrenchBroadcast(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserNameFieldNumber = 3,
    kWrenchNumberFieldNumber = 1,
    kDeletedFieldNumber = 2,
  };
  // optional string user_name = 3;
  bool has_user_name() const;
  private:
  bool _internal_has_user_name() const;
  public:
  void clear_user_name();
  const std::string& user_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_user_name();
  void set_allocated_user_name(std::string* user_name);
  private:
  const std::string& _internal_user_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_name(const std::string& value);
  std::string* _internal_mutable_user_name();
  public:

  // optional int32 wrench_number = 1;
  bool has_wrench_number() const;
  private:
  bool _internal_has_wrench_number() const;
  public:
  void clear_wrench_number();
  ::PROTOBUF_NAMESPACE_ID::int32 wrench_number() const;
  void set_wrench_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_wrench_number() const;
  void _internal_set_wrench_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool deleted = 2;
  bool has_deleted() const;
  private:
  bool _internal_has_deleted() const;
  public:
  void clear_deleted();
  bool deleted() const;
  void set_deleted(bool value);
  private:
  bool _internal_deleted() const;
  void _internal_set_deleted(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgTFGoldenWrenchBroadcast)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 wrench_number_;
  bool deleted_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgTFSaxxyBroadcast final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgTFSaxxyBroadcast) */ {
 public:
  inline CMsgTFSaxxyBroadcast() : CMsgTFSaxxyBroadcast(nullptr) {}
  ~CMsgTFSaxxyBroadcast() override;
  explicit constexpr CMsgTFSaxxyBroadcast(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgTFSaxxyBroadcast(const CMsgTFSaxxyBroadcast& from);
  CMsgTFSaxxyBroadcast(CMsgTFSaxxyBroadcast&& from) noexcept
    : CMsgTFSaxxyBroadcast() {
    *this = ::std::move(from);
  }

  inline CMsgTFSaxxyBroadcast& operator=(const CMsgTFSaxxyBroadcast& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgTFSaxxyBroadcast& operator=(CMsgTFSaxxyBroadcast&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgTFSaxxyBroadcast& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgTFSaxxyBroadcast* internal_default_instance() {
    return reinterpret_cast<const CMsgTFSaxxyBroadcast*>(
               &_CMsgTFSaxxyBroadcast_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CMsgTFSaxxyBroadcast& a, CMsgTFSaxxyBroadcast& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgTFSaxxyBroadcast* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgTFSaxxyBroadcast* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgTFSaxxyBroadcast* New() const final {
    return new CMsgTFSaxxyBroadcast();
  }

  CMsgTFSaxxyBroadcast* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgTFSaxxyBroadcast>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgTFSaxxyBroadcast& from);
  void MergeFrom(const CMsgTFSaxxyBroadcast& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgTFSaxxyBroadcast* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgTFSaxxyBroadcast";
  }
  protected:
  explicit CMsgTFSaxxyBroadcast(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserNameFieldNumber = 2,
    kCategoryNumberFieldNumber = 1,
  };
  // optional string user_name = 2;
  bool has_user_name() const;
  private:
  bool _internal_has_user_name() const;
  public:
  void clear_user_name();
  const std::string& user_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_user_name();
  void set_allocated_user_name(std::string* user_name);
  private:
  const std::string& _internal_user_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_name(const std::string& value);
  std::string* _internal_mutable_user_name();
  public:

  // optional int32 category_number = 1;
  bool has_category_number() const;
  private:
  bool _internal_has_category_number() const;
  public:
  void clear_category_number();
  ::PROTOBUF_NAMESPACE_ID::int32 category_number() const;
  void set_category_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_category_number() const;
  void _internal_set_category_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgTFSaxxyBroadcast)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 category_number_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCTFSpecificItemBroadcast final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCTFSpecificItemBroadcast) */ {
 public:
  inline CMsgGCTFSpecificItemBroadcast() : CMsgGCTFSpecificItemBroadcast(nullptr) {}
  ~CMsgGCTFSpecificItemBroadcast() override;
  explicit constexpr CMsgGCTFSpecificItemBroadcast(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCTFSpecificItemBroadcast(const CMsgGCTFSpecificItemBroadcast& from);
  CMsgGCTFSpecificItemBroadcast(CMsgGCTFSpecificItemBroadcast&& from) noexcept
    : CMsgGCTFSpecificItemBroadcast() {
    *this = ::std::move(from);
  }

  inline CMsgGCTFSpecificItemBroadcast& operator=(const CMsgGCTFSpecificItemBroadcast& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCTFSpecificItemBroadcast& operator=(CMsgGCTFSpecificItemBroadcast&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCTFSpecificItemBroadcast& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCTFSpecificItemBroadcast* internal_default_instance() {
    return reinterpret_cast<const CMsgGCTFSpecificItemBroadcast*>(
               &_CMsgGCTFSpecificItemBroadcast_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CMsgGCTFSpecificItemBroadcast& a, CMsgGCTFSpecificItemBroadcast& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCTFSpecificItemBroadcast* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCTFSpecificItemBroadcast* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCTFSpecificItemBroadcast* New() const final {
    return new CMsgGCTFSpecificItemBroadcast();
  }

  CMsgGCTFSpecificItemBroadcast* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCTFSpecificItemBroadcast>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgGCTFSpecificItemBroadcast& from);
  void MergeFrom(const CMsgGCTFSpecificItemBroadcast& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCTFSpecificItemBroadcast* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCTFSpecificItemBroadcast";
  }
  protected:
  explicit CMsgGCTFSpecificItemBroadcast(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserNameFieldNumber = 3,
    kItemDefIndexFieldNumber = 1,
    kWasDestructionFieldNumber = 2,
  };
  // optional string user_name = 3;
  bool has_user_name() const;
  private:
  bool _internal_has_user_name() const;
  public:
  void clear_user_name();
  const std::string& user_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_user_name();
  void set_allocated_user_name(std::string* user_name);
  private:
  const std::string& _internal_user_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_name(const std::string& value);
  std::string* _internal_mutable_user_name();
  public:

  // optional uint32 item_def_index = 1;
  bool has_item_def_index() const;
  private:
  bool _internal_has_item_def_index() const;
  public:
  void clear_item_def_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 item_def_index() const;
  void set_item_def_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_item_def_index() const;
  void _internal_set_item_def_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool was_destruction = 2;
  bool has_was_destruction() const;
  private:
  bool _internal_has_was_destruction() const;
  public:
  void clear_was_destruction();
  bool was_destruction() const;
  void set_was_destruction(bool value);
  private:
  bool _internal_was_destruction() const;
  void _internal_set_was_destruction(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCTFSpecificItemBroadcast)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 item_def_index_;
  bool was_destruction_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgTFWorldStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgTFWorldStatus) */ {
 public:
  inline CMsgTFWorldStatus() : CMsgTFWorldStatus(nullptr) {}
  ~CMsgTFWorldStatus() override;
  explicit constexpr CMsgTFWorldStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgTFWorldStatus(const CMsgTFWorldStatus& from);
  CMsgTFWorldStatus(CMsgTFWorldStatus&& from) noexcept
    : CMsgTFWorldStatus() {
    *this = ::std::move(from);
  }

  inline CMsgTFWorldStatus& operator=(const CMsgTFWorldStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgTFWorldStatus& operator=(CMsgTFWorldStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgTFWorldStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgTFWorldStatus* internal_default_instance() {
    return reinterpret_cast<const CMsgTFWorldStatus*>(
               &_CMsgTFWorldStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CMsgTFWorldStatus& a, CMsgTFWorldStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgTFWorldStatus* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgTFWorldStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgTFWorldStatus* New() const final {
    return new CMsgTFWorldStatus();
  }

  CMsgTFWorldStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgTFWorldStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgTFWorldStatus& from);
  void MergeFrom(const CMsgTFWorldStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgTFWorldStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgTFWorldStatus";
  }
  protected:
  explicit CMsgTFWorldStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDisabledMatchGroupsFieldNumber = 5,
    kBetaStressTestEventActiveFieldNumber = 1,
    kEventExpireTimeFieldNumber = 3,
    kActiveClientVersionFieldNumber = 4,
    kEventMatchGroupFieldNumber = 2,
  };
  // repeated .ETFMatchGroup disabled_match_groups = 5;
  int disabled_match_groups_size() const;
  private:
  int _internal_disabled_match_groups_size() const;
  public:
  void clear_disabled_match_groups();
  private:
  ::ETFMatchGroup _internal_disabled_match_groups(int index) const;
  void _internal_add_disabled_match_groups(::ETFMatchGroup value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_disabled_match_groups();
  public:
  ::ETFMatchGroup disabled_match_groups(int index) const;
  void set_disabled_match_groups(int index, ::ETFMatchGroup value);
  void add_disabled_match_groups(::ETFMatchGroup value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& disabled_match_groups() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_disabled_match_groups();

  // optional bool beta_stress_test_event_active = 1 [default = false];
  bool has_beta_stress_test_event_active() const;
  private:
  bool _internal_has_beta_stress_test_event_active() const;
  public:
  void clear_beta_stress_test_event_active();
  bool beta_stress_test_event_active() const;
  void set_beta_stress_test_event_active(bool value);
  private:
  bool _internal_beta_stress_test_event_active() const;
  void _internal_set_beta_stress_test_event_active(bool value);
  public:

  // optional fixed32 event_expire_time = 3 [default = 0];
  bool has_event_expire_time() const;
  private:
  bool _internal_has_event_expire_time() const;
  public:
  void clear_event_expire_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 event_expire_time() const;
  void set_event_expire_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_event_expire_time() const;
  void _internal_set_event_expire_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 active_client_version = 4;
  bool has_active_client_version() const;
  private:
  bool _internal_has_active_client_version() const;
  public:
  void clear_active_client_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 active_client_version() const;
  void set_active_client_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_active_client_version() const;
  void _internal_set_active_client_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .ETFMatchGroup event_match_group = 2 [default = k_eTFMatchGroup_Invalid];
  bool has_event_match_group() const;
  private:
  bool _internal_has_event_match_group() const;
  public:
  void clear_event_match_group();
  ::ETFMatchGroup event_match_group() const;
  void set_event_match_group(::ETFMatchGroup value);
  private:
  ::ETFMatchGroup _internal_event_match_group() const;
  void _internal_set_event_match_group(::ETFMatchGroup value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgTFWorldStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> disabled_match_groups_;
  bool beta_stress_test_event_active_;
  ::PROTOBUF_NAMESPACE_ID::uint32 event_expire_time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 active_client_version_;
  int event_match_group_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CSOTFDuelSummary final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSOTFDuelSummary) */ {
 public:
  inline CSOTFDuelSummary() : CSOTFDuelSummary(nullptr) {}
  ~CSOTFDuelSummary() override;
  explicit constexpr CSOTFDuelSummary(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSOTFDuelSummary(const CSOTFDuelSummary& from);
  CSOTFDuelSummary(CSOTFDuelSummary&& from) noexcept
    : CSOTFDuelSummary() {
    *this = ::std::move(from);
  }

  inline CSOTFDuelSummary& operator=(const CSOTFDuelSummary& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSOTFDuelSummary& operator=(CSOTFDuelSummary&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSOTFDuelSummary& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSOTFDuelSummary* internal_default_instance() {
    return reinterpret_cast<const CSOTFDuelSummary*>(
               &_CSOTFDuelSummary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CSOTFDuelSummary& a, CSOTFDuelSummary& b) {
    a.Swap(&b);
  }
  inline void Swap(CSOTFDuelSummary* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSOTFDuelSummary* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSOTFDuelSummary* New() const final {
    return new CSOTFDuelSummary();
  }

  CSOTFDuelSummary* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSOTFDuelSummary>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSOTFDuelSummary& from);
  void MergeFrom(const CSOTFDuelSummary& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSOTFDuelSummary* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSOTFDuelSummary";
  }
  protected:
  explicit CSOTFDuelSummary(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
    kDuelWinsFieldNumber = 2,
    kDuelLossesFieldNumber = 3,
    kLastDuelAccountIdFieldNumber = 4,
    kLastDuelTimestampFieldNumber = 5,
    kLastDuelStatusFieldNumber = 6,
  };
  // optional uint32 account_id = 1 [(.key_field) = true];
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id() const;
  void set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_account_id() const;
  void _internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 duel_wins = 2;
  bool has_duel_wins() const;
  private:
  bool _internal_has_duel_wins() const;
  public:
  void clear_duel_wins();
  ::PROTOBUF_NAMESPACE_ID::uint32 duel_wins() const;
  void set_duel_wins(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_duel_wins() const;
  void _internal_set_duel_wins(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 duel_losses = 3;
  bool has_duel_losses() const;
  private:
  bool _internal_has_duel_losses() const;
  public:
  void clear_duel_losses();
  ::PROTOBUF_NAMESPACE_ID::uint32 duel_losses() const;
  void set_duel_losses(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_duel_losses() const;
  void _internal_set_duel_losses(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 last_duel_account_id = 4;
  bool has_last_duel_account_id() const;
  private:
  bool _internal_has_last_duel_account_id() const;
  public:
  void clear_last_duel_account_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 last_duel_account_id() const;
  void set_last_duel_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_last_duel_account_id() const;
  void _internal_set_last_duel_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 last_duel_timestamp = 5;
  bool has_last_duel_timestamp() const;
  private:
  bool _internal_has_last_duel_timestamp() const;
  public:
  void clear_last_duel_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint32 last_duel_timestamp() const;
  void set_last_duel_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_last_duel_timestamp() const;
  void _internal_set_last_duel_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 last_duel_status = 6;
  bool has_last_duel_status() const;
  private:
  bool _internal_has_last_duel_status() const;
  public:
  void clear_last_duel_status();
  ::PROTOBUF_NAMESPACE_ID::uint32 last_duel_status() const;
  void set_last_duel_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_last_duel_status() const;
  void _internal_set_last_duel_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CSOTFDuelSummary)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 duel_wins_;
  ::PROTOBUF_NAMESPACE_ID::uint32 duel_losses_;
  ::PROTOBUF_NAMESPACE_ID::uint32 last_duel_account_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 last_duel_timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint32 last_duel_status_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CSOTFMapContribution final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSOTFMapContribution) */ {
 public:
  inline CSOTFMapContribution() : CSOTFMapContribution(nullptr) {}
  ~CSOTFMapContribution() override;
  explicit constexpr CSOTFMapContribution(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSOTFMapContribution(const CSOTFMapContribution& from);
  CSOTFMapContribution(CSOTFMapContribution&& from) noexcept
    : CSOTFMapContribution() {
    *this = ::std::move(from);
  }

  inline CSOTFMapContribution& operator=(const CSOTFMapContribution& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSOTFMapContribution& operator=(CSOTFMapContribution&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSOTFMapContribution& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSOTFMapContribution* internal_default_instance() {
    return reinterpret_cast<const CSOTFMapContribution*>(
               &_CSOTFMapContribution_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CSOTFMapContribution& a, CSOTFMapContribution& b) {
    a.Swap(&b);
  }
  inline void Swap(CSOTFMapContribution* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSOTFMapContribution* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSOTFMapContribution* New() const final {
    return new CSOTFMapContribution();
  }

  CSOTFMapContribution* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSOTFMapContribution>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSOTFMapContribution& from);
  void MergeFrom(const CSOTFMapContribution& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSOTFMapContribution* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSOTFMapContribution";
  }
  protected:
  explicit CSOTFMapContribution(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
    kDefIndexFieldNumber = 2,
    kContributionLevelFieldNumber = 3,
  };
  // optional uint32 account_id = 1 [(.key_field) = true];
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id() const;
  void set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_account_id() const;
  void _internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 def_index = 2 [(.key_field) = true];
  bool has_def_index() const;
  private:
  bool _internal_has_def_index() const;
  public:
  void clear_def_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 def_index() const;
  void set_def_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_def_index() const;
  void _internal_set_def_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 contribution_level = 3;
  bool has_contribution_level() const;
  private:
  bool _internal_has_contribution_level() const;
  public:
  void clear_contribution_level();
  ::PROTOBUF_NAMESPACE_ID::uint32 contribution_level() const;
  void set_contribution_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_contribution_level() const;
  void _internal_set_contribution_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CSOTFMapContribution)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 def_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 contribution_level_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgTFFreeTrialChooseMostHelpfulFriend final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgTFFreeTrialChooseMostHelpfulFriend) */ {
 public:
  inline CMsgTFFreeTrialChooseMostHelpfulFriend() : CMsgTFFreeTrialChooseMostHelpfulFriend(nullptr) {}
  ~CMsgTFFreeTrialChooseMostHelpfulFriend() override;
  explicit constexpr CMsgTFFreeTrialChooseMostHelpfulFriend(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgTFFreeTrialChooseMostHelpfulFriend(const CMsgTFFreeTrialChooseMostHelpfulFriend& from);
  CMsgTFFreeTrialChooseMostHelpfulFriend(CMsgTFFreeTrialChooseMostHelpfulFriend&& from) noexcept
    : CMsgTFFreeTrialChooseMostHelpfulFriend() {
    *this = ::std::move(from);
  }

  inline CMsgTFFreeTrialChooseMostHelpfulFriend& operator=(const CMsgTFFreeTrialChooseMostHelpfulFriend& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgTFFreeTrialChooseMostHelpfulFriend& operator=(CMsgTFFreeTrialChooseMostHelpfulFriend&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgTFFreeTrialChooseMostHelpfulFriend& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgTFFreeTrialChooseMostHelpfulFriend* internal_default_instance() {
    return reinterpret_cast<const CMsgTFFreeTrialChooseMostHelpfulFriend*>(
               &_CMsgTFFreeTrialChooseMostHelpfulFriend_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CMsgTFFreeTrialChooseMostHelpfulFriend& a, CMsgTFFreeTrialChooseMostHelpfulFriend& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgTFFreeTrialChooseMostHelpfulFriend* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgTFFreeTrialChooseMostHelpfulFriend* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgTFFreeTrialChooseMostHelpfulFriend* New() const final {
    return new CMsgTFFreeTrialChooseMostHelpfulFriend();
  }

  CMsgTFFreeTrialChooseMostHelpfulFriend* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgTFFreeTrialChooseMostHelpfulFriend>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgTFFreeTrialChooseMostHelpfulFriend& from);
  void MergeFrom(const CMsgTFFreeTrialChooseMostHelpfulFriend& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgTFFreeTrialChooseMostHelpfulFriend* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgTFFreeTrialChooseMostHelpfulFriend";
  }
  protected:
  explicit CMsgTFFreeTrialChooseMostHelpfulFriend(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFriendFieldNumber = 1,
  };
  // optional uint32 account_id_friend = 1;
  bool has_account_id_friend() const;
  private:
  bool _internal_has_account_id_friend() const;
  public:
  void clear_account_id_friend();
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id_friend() const;
  void set_account_id_friend(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_account_id_friend() const;
  void _internal_set_account_id_friend(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgTFFreeTrialChooseMostHelpfulFriend)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id_friend_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgTFRequestTF2Friends final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgTFRequestTF2Friends) */ {
 public:
  inline CMsgTFRequestTF2Friends() : CMsgTFRequestTF2Friends(nullptr) {}
  ~CMsgTFRequestTF2Friends() override;
  explicit constexpr CMsgTFRequestTF2Friends(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgTFRequestTF2Friends(const CMsgTFRequestTF2Friends& from);
  CMsgTFRequestTF2Friends(CMsgTFRequestTF2Friends&& from) noexcept
    : CMsgTFRequestTF2Friends() {
    *this = ::std::move(from);
  }

  inline CMsgTFRequestTF2Friends& operator=(const CMsgTFRequestTF2Friends& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgTFRequestTF2Friends& operator=(CMsgTFRequestTF2Friends&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgTFRequestTF2Friends& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgTFRequestTF2Friends* internal_default_instance() {
    return reinterpret_cast<const CMsgTFRequestTF2Friends*>(
               &_CMsgTFRequestTF2Friends_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CMsgTFRequestTF2Friends& a, CMsgTFRequestTF2Friends& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgTFRequestTF2Friends* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgTFRequestTF2Friends* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgTFRequestTF2Friends* New() const final {
    return new CMsgTFRequestTF2Friends();
  }

  CMsgTFRequestTF2Friends* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgTFRequestTF2Friends>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgTFRequestTF2Friends& from);
  void MergeFrom(const CMsgTFRequestTF2Friends& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgTFRequestTF2Friends* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgTFRequestTF2Friends";
  }
  protected:
  explicit CMsgTFRequestTF2Friends(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdsFieldNumber = 1,
  };
  // repeated uint32 account_ids = 1;
  int account_ids_size() const;
  private:
  int _internal_account_ids_size() const;
  public:
  void clear_account_ids();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_account_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_account_ids() const;
  void _internal_add_account_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_account_ids();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 account_ids(int index) const;
  void set_account_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_account_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      account_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_account_ids();

  // @@protoc_insertion_point(class_scope:CMsgTFRequestTF2Friends)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > account_ids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgTFRequestTF2FriendsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgTFRequestTF2FriendsResponse) */ {
 public:
  inline CMsgTFRequestTF2FriendsResponse() : CMsgTFRequestTF2FriendsResponse(nullptr) {}
  ~CMsgTFRequestTF2FriendsResponse() override;
  explicit constexpr CMsgTFRequestTF2FriendsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgTFRequestTF2FriendsResponse(const CMsgTFRequestTF2FriendsResponse& from);
  CMsgTFRequestTF2FriendsResponse(CMsgTFRequestTF2FriendsResponse&& from) noexcept
    : CMsgTFRequestTF2FriendsResponse() {
    *this = ::std::move(from);
  }

  inline CMsgTFRequestTF2FriendsResponse& operator=(const CMsgTFRequestTF2FriendsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgTFRequestTF2FriendsResponse& operator=(CMsgTFRequestTF2FriendsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgTFRequestTF2FriendsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgTFRequestTF2FriendsResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgTFRequestTF2FriendsResponse*>(
               &_CMsgTFRequestTF2FriendsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CMsgTFRequestTF2FriendsResponse& a, CMsgTFRequestTF2FriendsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgTFRequestTF2FriendsResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgTFRequestTF2FriendsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgTFRequestTF2FriendsResponse* New() const final {
    return new CMsgTFRequestTF2FriendsResponse();
  }

  CMsgTFRequestTF2FriendsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgTFRequestTF2FriendsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgTFRequestTF2FriendsResponse& from);
  void MergeFrom(const CMsgTFRequestTF2FriendsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgTFRequestTF2FriendsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgTFRequestTF2FriendsResponse";
  }
  protected:
  explicit CMsgTFRequestTF2FriendsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdsFieldNumber = 1,
  };
  // repeated uint32 account_ids = 1;
  int account_ids_size() const;
  private:
  int _internal_account_ids_size() const;
  public:
  void clear_account_ids();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_account_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_account_ids() const;
  void _internal_add_account_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_account_ids();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 account_ids(int index) const;
  void set_account_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_account_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      account_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_account_ids();

  // @@protoc_insertion_point(class_scope:CMsgTFRequestTF2FriendsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > account_ids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CSOTFPlayerInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSOTFPlayerInfo) */ {
 public:
  inline CSOTFPlayerInfo() : CSOTFPlayerInfo(nullptr) {}
  ~CSOTFPlayerInfo() override;
  explicit constexpr CSOTFPlayerInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSOTFPlayerInfo(const CSOTFPlayerInfo& from);
  CSOTFPlayerInfo(CSOTFPlayerInfo&& from) noexcept
    : CSOTFPlayerInfo() {
    *this = ::std::move(from);
  }

  inline CSOTFPlayerInfo& operator=(const CSOTFPlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSOTFPlayerInfo& operator=(CSOTFPlayerInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSOTFPlayerInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSOTFPlayerInfo* internal_default_instance() {
    return reinterpret_cast<const CSOTFPlayerInfo*>(
               &_CSOTFPlayerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CSOTFPlayerInfo& a, CSOTFPlayerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CSOTFPlayerInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSOTFPlayerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSOTFPlayerInfo* New() const final {
    return new CSOTFPlayerInfo();
  }

  CSOTFPlayerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSOTFPlayerInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSOTFPlayerInfo& from);
  void MergeFrom(const CSOTFPlayerInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSOTFPlayerInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSOTFPlayerInfo";
  }
  protected:
  explicit CSOTFPlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumNewUsersHelpedFieldNumber = 1,
  };
  // optional uint32 num_new_users_helped = 1;
  bool has_num_new_users_helped() const;
  private:
  bool _internal_has_num_new_users_helped() const;
  public:
  void clear_num_new_users_helped();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_new_users_helped() const;
  void set_num_new_users_helped(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_new_users_helped() const;
  void _internal_set_num_new_users_helped(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CSOTFPlayerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_new_users_helped_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgTFThankedBySomeone final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgTFThankedBySomeone) */ {
 public:
  inline CMsgTFThankedBySomeone() : CMsgTFThankedBySomeone(nullptr) {}
  ~CMsgTFThankedBySomeone() override;
  explicit constexpr CMsgTFThankedBySomeone(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgTFThankedBySomeone(const CMsgTFThankedBySomeone& from);
  CMsgTFThankedBySomeone(CMsgTFThankedBySomeone&& from) noexcept
    : CMsgTFThankedBySomeone() {
    *this = ::std::move(from);
  }

  inline CMsgTFThankedBySomeone& operator=(const CMsgTFThankedBySomeone& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgTFThankedBySomeone& operator=(CMsgTFThankedBySomeone&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgTFThankedBySomeone& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgTFThankedBySomeone* internal_default_instance() {
    return reinterpret_cast<const CMsgTFThankedBySomeone*>(
               &_CMsgTFThankedBySomeone_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CMsgTFThankedBySomeone& a, CMsgTFThankedBySomeone& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgTFThankedBySomeone* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgTFThankedBySomeone* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgTFThankedBySomeone* New() const final {
    return new CMsgTFThankedBySomeone();
  }

  CMsgTFThankedBySomeone* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgTFThankedBySomeone>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgTFThankedBySomeone& from);
  void MergeFrom(const CMsgTFThankedBySomeone& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgTFThankedBySomeone* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgTFThankedBySomeone";
  }
  protected:
  explicit CMsgTFThankedBySomeone(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kThankerSteamIdFieldNumber = 1,
  };
  // optional uint64 thanker_steam_id = 1;
  bool has_thanker_steam_id() const;
  private:
  bool _internal_has_thanker_steam_id() const;
  public:
  void clear_thanker_steam_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 thanker_steam_id() const;
  void set_thanker_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_thanker_steam_id() const;
  void _internal_set_thanker_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgTFThankedBySomeone)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 thanker_steam_id_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgTFThankedSomeone final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgTFThankedSomeone) */ {
 public:
  inline CMsgTFThankedSomeone() : CMsgTFThankedSomeone(nullptr) {}
  ~CMsgTFThankedSomeone() override;
  explicit constexpr CMsgTFThankedSomeone(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgTFThankedSomeone(const CMsgTFThankedSomeone& from);
  CMsgTFThankedSomeone(CMsgTFThankedSomeone&& from) noexcept
    : CMsgTFThankedSomeone() {
    *this = ::std::move(from);
  }

  inline CMsgTFThankedSomeone& operator=(const CMsgTFThankedSomeone& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgTFThankedSomeone& operator=(CMsgTFThankedSomeone&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgTFThankedSomeone& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgTFThankedSomeone* internal_default_instance() {
    return reinterpret_cast<const CMsgTFThankedSomeone*>(
               &_CMsgTFThankedSomeone_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CMsgTFThankedSomeone& a, CMsgTFThankedSomeone& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgTFThankedSomeone* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgTFThankedSomeone* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgTFThankedSomeone* New() const final {
    return new CMsgTFThankedSomeone();
  }

  CMsgTFThankedSomeone* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgTFThankedSomeone>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgTFThankedSomeone& from);
  void MergeFrom(const CMsgTFThankedSomeone& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgTFThankedSomeone* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgTFThankedSomeone";
  }
  protected:
  explicit CMsgTFThankedSomeone(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgTFThankedSomeone)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgTFFreeTrialConvertedToPremium final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgTFFreeTrialConvertedToPremium) */ {
 public:
  inline CMsgTFFreeTrialConvertedToPremium() : CMsgTFFreeTrialConvertedToPremium(nullptr) {}
  ~CMsgTFFreeTrialConvertedToPremium() override;
  explicit constexpr CMsgTFFreeTrialConvertedToPremium(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgTFFreeTrialConvertedToPremium(const CMsgTFFreeTrialConvertedToPremium& from);
  CMsgTFFreeTrialConvertedToPremium(CMsgTFFreeTrialConvertedToPremium&& from) noexcept
    : CMsgTFFreeTrialConvertedToPremium() {
    *this = ::std::move(from);
  }

  inline CMsgTFFreeTrialConvertedToPremium& operator=(const CMsgTFFreeTrialConvertedToPremium& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgTFFreeTrialConvertedToPremium& operator=(CMsgTFFreeTrialConvertedToPremium&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgTFFreeTrialConvertedToPremium& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgTFFreeTrialConvertedToPremium* internal_default_instance() {
    return reinterpret_cast<const CMsgTFFreeTrialConvertedToPremium*>(
               &_CMsgTFFreeTrialConvertedToPremium_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CMsgTFFreeTrialConvertedToPremium& a, CMsgTFFreeTrialConvertedToPremium& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgTFFreeTrialConvertedToPremium* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgTFFreeTrialConvertedToPremium* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgTFFreeTrialConvertedToPremium* New() const final {
    return new CMsgTFFreeTrialConvertedToPremium();
  }

  CMsgTFFreeTrialConvertedToPremium* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgTFFreeTrialConvertedToPremium>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgTFFreeTrialConvertedToPremium& from);
  void MergeFrom(const CMsgTFFreeTrialConvertedToPremium& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgTFFreeTrialConvertedToPremium* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgTFFreeTrialConvertedToPremium";
  }
  protected:
  explicit CMsgTFFreeTrialConvertedToPremium(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgTFFreeTrialConvertedToPremium)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgSaxxyAwarded final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSaxxyAwarded) */ {
 public:
  inline CMsgSaxxyAwarded() : CMsgSaxxyAwarded(nullptr) {}
  ~CMsgSaxxyAwarded() override;
  explicit constexpr CMsgSaxxyAwarded(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSaxxyAwarded(const CMsgSaxxyAwarded& from);
  CMsgSaxxyAwarded(CMsgSaxxyAwarded&& from) noexcept
    : CMsgSaxxyAwarded() {
    *this = ::std::move(from);
  }

  inline CMsgSaxxyAwarded& operator=(const CMsgSaxxyAwarded& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSaxxyAwarded& operator=(CMsgSaxxyAwarded&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSaxxyAwarded& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSaxxyAwarded* internal_default_instance() {
    return reinterpret_cast<const CMsgSaxxyAwarded*>(
               &_CMsgSaxxyAwarded_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CMsgSaxxyAwarded& a, CMsgSaxxyAwarded& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSaxxyAwarded* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSaxxyAwarded* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgSaxxyAwarded* New() const final {
    return new CMsgSaxxyAwarded();
  }

  CMsgSaxxyAwarded* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgSaxxyAwarded>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgSaxxyAwarded& from);
  void MergeFrom(const CMsgSaxxyAwarded& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSaxxyAwarded* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSaxxyAwarded";
  }
  protected:
  explicit CMsgSaxxyAwarded(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWinnerNamesFieldNumber = 2,
    kCategoryFieldNumber = 1,
  };
  // repeated string winner_names = 2;
  int winner_names_size() const;
  private:
  int _internal_winner_names_size() const;
  public:
  void clear_winner_names();
  const std::string& winner_names(int index) const;
  std::string* mutable_winner_names(int index);
  void set_winner_names(int index, const std::string& value);
  void set_winner_names(int index, std::string&& value);
  void set_winner_names(int index, const char* value);
  void set_winner_names(int index, const char* value, size_t size);
  std::string* add_winner_names();
  void add_winner_names(const std::string& value);
  void add_winner_names(std::string&& value);
  void add_winner_names(const char* value);
  void add_winner_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& winner_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_winner_names();
  private:
  const std::string& _internal_winner_names(int index) const;
  std::string* _internal_add_winner_names();
  public:

  // optional uint32 category = 1;
  bool has_category() const;
  private:
  bool _internal_has_category() const;
  public:
  void clear_category();
  ::PROTOBUF_NAMESPACE_ID::uint32 category() const;
  void set_category(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_category() const;
  void _internal_set_category(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSaxxyAwarded)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> winner_names_;
  ::PROTOBUF_NAMESPACE_ID::uint32 category_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgReplaySubmitContestEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgReplaySubmitContestEntry) */ {
 public:
  inline CMsgReplaySubmitContestEntry() : CMsgReplaySubmitContestEntry(nullptr) {}
  ~CMsgReplaySubmitContestEntry() override;
  explicit constexpr CMsgReplaySubmitContestEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgReplaySubmitContestEntry(const CMsgReplaySubmitContestEntry& from);
  CMsgReplaySubmitContestEntry(CMsgReplaySubmitContestEntry&& from) noexcept
    : CMsgReplaySubmitContestEntry() {
    *this = ::std::move(from);
  }

  inline CMsgReplaySubmitContestEntry& operator=(const CMsgReplaySubmitContestEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgReplaySubmitContestEntry& operator=(CMsgReplaySubmitContestEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgReplaySubmitContestEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgReplaySubmitContestEntry* internal_default_instance() {
    return reinterpret_cast<const CMsgReplaySubmitContestEntry*>(
               &_CMsgReplaySubmitContestEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(CMsgReplaySubmitContestEntry& a, CMsgReplaySubmitContestEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgReplaySubmitContestEntry* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgReplaySubmitContestEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgReplaySubmitContestEntry* New() const final {
    return new CMsgReplaySubmitContestEntry();
  }

  CMsgReplaySubmitContestEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgReplaySubmitContestEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgReplaySubmitContestEntry& from);
  void MergeFrom(const CMsgReplaySubmitContestEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgReplaySubmitContestEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgReplaySubmitContestEntry";
  }
  protected:
  explicit CMsgReplaySubmitContestEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kYoutubeUrlFieldNumber = 1,
    kCategoryFieldNumber = 2,
  };
  // optional string youtube_url = 1;
  bool has_youtube_url() const;
  private:
  bool _internal_has_youtube_url() const;
  public:
  void clear_youtube_url();
  const std::string& youtube_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_youtube_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_youtube_url();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_youtube_url();
  void set_allocated_youtube_url(std::string* youtube_url);
  private:
  const std::string& _internal_youtube_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_youtube_url(const std::string& value);
  std::string* _internal_mutable_youtube_url();
  public:

  // optional uint32 category = 2;
  bool has_category() const;
  private:
  bool _internal_has_category() const;
  public:
  void clear_category();
  ::PROTOBUF_NAMESPACE_ID::uint32 category() const;
  void set_category(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_category() const;
  void _internal_set_category(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgReplaySubmitContestEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr youtube_url_;
  ::PROTOBUF_NAMESPACE_ID::uint32 category_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgReplaySubmitContestEntryResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgReplaySubmitContestEntryResponse) */ {
 public:
  inline CMsgReplaySubmitContestEntryResponse() : CMsgReplaySubmitContestEntryResponse(nullptr) {}
  ~CMsgReplaySubmitContestEntryResponse() override;
  explicit constexpr CMsgReplaySubmitContestEntryResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgReplaySubmitContestEntryResponse(const CMsgReplaySubmitContestEntryResponse& from);
  CMsgReplaySubmitContestEntryResponse(CMsgReplaySubmitContestEntryResponse&& from) noexcept
    : CMsgReplaySubmitContestEntryResponse() {
    *this = ::std::move(from);
  }

  inline CMsgReplaySubmitContestEntryResponse& operator=(const CMsgReplaySubmitContestEntryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgReplaySubmitContestEntryResponse& operator=(CMsgReplaySubmitContestEntryResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgReplaySubmitContestEntryResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgReplaySubmitContestEntryResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgReplaySubmitContestEntryResponse*>(
               &_CMsgReplaySubmitContestEntryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(CMsgReplaySubmitContestEntryResponse& a, CMsgReplaySubmitContestEntryResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgReplaySubmitContestEntryResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgReplaySubmitContestEntryResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgReplaySubmitContestEntryResponse* New() const final {
    return new CMsgReplaySubmitContestEntryResponse();
  }

  CMsgReplaySubmitContestEntryResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgReplaySubmitContestEntryResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgReplaySubmitContestEntryResponse& from);
  void MergeFrom(const CMsgReplaySubmitContestEntryResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgReplaySubmitContestEntryResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgReplaySubmitContestEntryResponse";
  }
  protected:
  explicit CMsgReplaySubmitContestEntryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // optional bool success = 1;
  bool has_success() const;
  private:
  bool _internal_has_success() const;
  public:
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgReplaySubmitContestEntryResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool success_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CReplayCachedContestData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CReplayCachedContestData) */ {
 public:
  inline CReplayCachedContestData() : CReplayCachedContestData(nullptr) {}
  ~CReplayCachedContestData() override;
  explicit constexpr CReplayCachedContestData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CReplayCachedContestData(const CReplayCachedContestData& from);
  CReplayCachedContestData(CReplayCachedContestData&& from) noexcept
    : CReplayCachedContestData() {
    *this = ::std::move(from);
  }

  inline CReplayCachedContestData& operator=(const CReplayCachedContestData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CReplayCachedContestData& operator=(CReplayCachedContestData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CReplayCachedContestData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CReplayCachedContestData* internal_default_instance() {
    return reinterpret_cast<const CReplayCachedContestData*>(
               &_CReplayCachedContestData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(CReplayCachedContestData& a, CReplayCachedContestData& b) {
    a.Swap(&b);
  }
  inline void Swap(CReplayCachedContestData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CReplayCachedContestData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CReplayCachedContestData* New() const final {
    return new CReplayCachedContestData();
  }

  CReplayCachedContestData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CReplayCachedContestData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CReplayCachedContestData& from);
  void MergeFrom(const CReplayCachedContestData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CReplayCachedContestData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CReplayCachedContestData";
  }
  protected:
  explicit CReplayCachedContestData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVideoEntryIdsFieldNumber = 3,
    kTimestampFieldNumber = 1,
    kNumVotesLastDayFieldNumber = 2,
    kNumFlagsLastDayFieldNumber = 4,
  };
  // repeated uint32 video_entry_ids = 3;
  int video_entry_ids_size() const;
  private:
  int _internal_video_entry_ids_size() const;
  public:
  void clear_video_entry_ids();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_video_entry_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_video_entry_ids() const;
  void _internal_add_video_entry_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_video_entry_ids();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 video_entry_ids(int index) const;
  void set_video_entry_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_video_entry_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      video_entry_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_video_entry_ids();

  // optional fixed32 timestamp = 1;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint32 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 num_votes_last_day = 2;
  bool has_num_votes_last_day() const;
  private:
  bool _internal_has_num_votes_last_day() const;
  public:
  void clear_num_votes_last_day();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_votes_last_day() const;
  void set_num_votes_last_day(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_votes_last_day() const;
  void _internal_set_num_votes_last_day(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 num_flags_last_day = 4;
  bool has_num_flags_last_day() const;
  private:
  bool _internal_has_num_flags_last_day() const;
  public:
  void clear_num_flags_last_day();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_flags_last_day() const;
  void set_num_flags_last_day(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_flags_last_day() const;
  void _internal_set_num_flags_last_day(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CReplayCachedContestData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > video_entry_ids_;
  ::PROTOBUF_NAMESPACE_ID::uint32 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_votes_last_day_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_flags_last_day_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgTFCoaching_AddToCoaches final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgTFCoaching_AddToCoaches) */ {
 public:
  inline CMsgTFCoaching_AddToCoaches() : CMsgTFCoaching_AddToCoaches(nullptr) {}
  ~CMsgTFCoaching_AddToCoaches() override;
  explicit constexpr CMsgTFCoaching_AddToCoaches(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgTFCoaching_AddToCoaches(const CMsgTFCoaching_AddToCoaches& from);
  CMsgTFCoaching_AddToCoaches(CMsgTFCoaching_AddToCoaches&& from) noexcept
    : CMsgTFCoaching_AddToCoaches() {
    *this = ::std::move(from);
  }

  inline CMsgTFCoaching_AddToCoaches& operator=(const CMsgTFCoaching_AddToCoaches& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgTFCoaching_AddToCoaches& operator=(CMsgTFCoaching_AddToCoaches&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgTFCoaching_AddToCoaches& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgTFCoaching_AddToCoaches* internal_default_instance() {
    return reinterpret_cast<const CMsgTFCoaching_AddToCoaches*>(
               &_CMsgTFCoaching_AddToCoaches_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(CMsgTFCoaching_AddToCoaches& a, CMsgTFCoaching_AddToCoaches& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgTFCoaching_AddToCoaches* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgTFCoaching_AddToCoaches* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgTFCoaching_AddToCoaches* New() const final {
    return new CMsgTFCoaching_AddToCoaches();
  }

  CMsgTFCoaching_AddToCoaches* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgTFCoaching_AddToCoaches>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgTFCoaching_AddToCoaches& from);
  void MergeFrom(const CMsgTFCoaching_AddToCoaches& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgTFCoaching_AddToCoaches* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgTFCoaching_AddToCoaches";
  }
  protected:
  explicit CMsgTFCoaching_AddToCoaches(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgTFCoaching_AddToCoaches)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgTFCoaching_RemoveFromCoaches final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgTFCoaching_RemoveFromCoaches) */ {
 public:
  inline CMsgTFCoaching_RemoveFromCoaches() : CMsgTFCoaching_RemoveFromCoaches(nullptr) {}
  ~CMsgTFCoaching_RemoveFromCoaches() override;
  explicit constexpr CMsgTFCoaching_RemoveFromCoaches(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgTFCoaching_RemoveFromCoaches(const CMsgTFCoaching_RemoveFromCoaches& from);
  CMsgTFCoaching_RemoveFromCoaches(CMsgTFCoaching_RemoveFromCoaches&& from) noexcept
    : CMsgTFCoaching_RemoveFromCoaches() {
    *this = ::std::move(from);
  }

  inline CMsgTFCoaching_RemoveFromCoaches& operator=(const CMsgTFCoaching_RemoveFromCoaches& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgTFCoaching_RemoveFromCoaches& operator=(CMsgTFCoaching_RemoveFromCoaches&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgTFCoaching_RemoveFromCoaches& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgTFCoaching_RemoveFromCoaches* internal_default_instance() {
    return reinterpret_cast<const CMsgTFCoaching_RemoveFromCoaches*>(
               &_CMsgTFCoaching_RemoveFromCoaches_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(CMsgTFCoaching_RemoveFromCoaches& a, CMsgTFCoaching_RemoveFromCoaches& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgTFCoaching_RemoveFromCoaches* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgTFCoaching_RemoveFromCoaches* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgTFCoaching_RemoveFromCoaches* New() const final {
    return new CMsgTFCoaching_RemoveFromCoaches();
  }

  CMsgTFCoaching_RemoveFromCoaches* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgTFCoaching_RemoveFromCoaches>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgTFCoaching_RemoveFromCoaches& from);
  void MergeFrom(const CMsgTFCoaching_RemoveFromCoaches& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgTFCoaching_RemoveFromCoaches* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgTFCoaching_RemoveFromCoaches";
  }
  protected:
  explicit CMsgTFCoaching_RemoveFromCoaches(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgTFCoaching_RemoveFromCoaches)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgTFCoaching_FindCoach final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgTFCoaching_FindCoach) */ {
 public:
  inline CMsgTFCoaching_FindCoach() : CMsgTFCoaching_FindCoach(nullptr) {}
  ~CMsgTFCoaching_FindCoach() override;
  explicit constexpr CMsgTFCoaching_FindCoach(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgTFCoaching_FindCoach(const CMsgTFCoaching_FindCoach& from);
  CMsgTFCoaching_FindCoach(CMsgTFCoaching_FindCoach&& from) noexcept
    : CMsgTFCoaching_FindCoach() {
    *this = ::std::move(from);
  }

  inline CMsgTFCoaching_FindCoach& operator=(const CMsgTFCoaching_FindCoach& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgTFCoaching_FindCoach& operator=(CMsgTFCoaching_FindCoach&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgTFCoaching_FindCoach& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgTFCoaching_FindCoach* internal_default_instance() {
    return reinterpret_cast<const CMsgTFCoaching_FindCoach*>(
               &_CMsgTFCoaching_FindCoach_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(CMsgTFCoaching_FindCoach& a, CMsgTFCoaching_FindCoach& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgTFCoaching_FindCoach* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgTFCoaching_FindCoach* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgTFCoaching_FindCoach* New() const final {
    return new CMsgTFCoaching_FindCoach();
  }

  CMsgTFCoaching_FindCoach* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgTFCoaching_FindCoach>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgTFCoaching_FindCoach& from);
  void MergeFrom(const CMsgTFCoaching_FindCoach& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgTFCoaching_FindCoach* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgTFCoaching_FindCoach";
  }
  protected:
  explicit CMsgTFCoaching_FindCoach(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFriendAsCoachFieldNumber = 1,
  };
  // optional uint32 account_id_friend_as_coach = 1;
  bool has_account_id_friend_as_coach() const;
  private:
  bool _internal_has_account_id_friend_as_coach() const;
  public:
  void clear_account_id_friend_as_coach();
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id_friend_as_coach() const;
  void set_account_id_friend_as_coach(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_account_id_friend_as_coach() const;
  void _internal_set_account_id_friend_as_coach(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgTFCoaching_FindCoach)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id_friend_as_coach_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgTFCoaching_FindCoachResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgTFCoaching_FindCoachResponse) */ {
 public:
  inline CMsgTFCoaching_FindCoachResponse() : CMsgTFCoaching_FindCoachResponse(nullptr) {}
  ~CMsgTFCoaching_FindCoachResponse() override;
  explicit constexpr CMsgTFCoaching_FindCoachResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgTFCoaching_FindCoachResponse(const CMsgTFCoaching_FindCoachResponse& from);
  CMsgTFCoaching_FindCoachResponse(CMsgTFCoaching_FindCoachResponse&& from) noexcept
    : CMsgTFCoaching_FindCoachResponse() {
    *this = ::std::move(from);
  }

  inline CMsgTFCoaching_FindCoachResponse& operator=(const CMsgTFCoaching_FindCoachResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgTFCoaching_FindCoachResponse& operator=(CMsgTFCoaching_FindCoachResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgTFCoaching_FindCoachResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgTFCoaching_FindCoachResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgTFCoaching_FindCoachResponse*>(
               &_CMsgTFCoaching_FindCoachResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(CMsgTFCoaching_FindCoachResponse& a, CMsgTFCoaching_FindCoachResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgTFCoaching_FindCoachResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgTFCoaching_FindCoachResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgTFCoaching_FindCoachResponse* New() const final {
    return new CMsgTFCoaching_FindCoachResponse();
  }

  CMsgTFCoaching_FindCoachResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgTFCoaching_FindCoachResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgTFCoaching_FindCoachResponse& from);
  void MergeFrom(const CMsgTFCoaching_FindCoachResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgTFCoaching_FindCoachResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgTFCoaching_FindCoachResponse";
  }
  protected:
  explicit CMsgTFCoaching_FindCoachResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCoachNameFieldNumber = 3,
    kFoundCoachFieldNumber = 1,
    kNumLikesFieldNumber = 2,
  };
  // optional string coach_name = 3;
  bool has_coach_name() const;
  private:
  bool _internal_has_coach_name() const;
  public:
  void clear_coach_name();
  const std::string& coach_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_coach_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_coach_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_coach_name();
  void set_allocated_coach_name(std::string* coach_name);
  private:
  const std::string& _internal_coach_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_coach_name(const std::string& value);
  std::string* _internal_mutable_coach_name();
  public:

  // optional bool found_coach = 1;
  bool has_found_coach() const;
  private:
  bool _internal_has_found_coach() const;
  public:
  void clear_found_coach();
  bool found_coach() const;
  void set_found_coach(bool value);
  private:
  bool _internal_found_coach() const;
  void _internal_set_found_coach(bool value);
  public:

  // optional uint32 num_likes = 2;
  bool has_num_likes() const;
  private:
  bool _internal_has_num_likes() const;
  public:
  void clear_num_likes();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_likes() const;
  void set_num_likes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_likes() const;
  void _internal_set_num_likes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgTFCoaching_FindCoachResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr coach_name_;
  bool found_coach_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_likes_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgTFCoaching_AskCoach final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgTFCoaching_AskCoach) */ {
 public:
  inline CMsgTFCoaching_AskCoach() : CMsgTFCoaching_AskCoach(nullptr) {}
  ~CMsgTFCoaching_AskCoach() override;
  explicit constexpr CMsgTFCoaching_AskCoach(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgTFCoaching_AskCoach(const CMsgTFCoaching_AskCoach& from);
  CMsgTFCoaching_AskCoach(CMsgTFCoaching_AskCoach&& from) noexcept
    : CMsgTFCoaching_AskCoach() {
    *this = ::std::move(from);
  }

  inline CMsgTFCoaching_AskCoach& operator=(const CMsgTFCoaching_AskCoach& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgTFCoaching_AskCoach& operator=(CMsgTFCoaching_AskCoach&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgTFCoaching_AskCoach& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgTFCoaching_AskCoach* internal_default_instance() {
    return reinterpret_cast<const CMsgTFCoaching_AskCoach*>(
               &_CMsgTFCoaching_AskCoach_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(CMsgTFCoaching_AskCoach& a, CMsgTFCoaching_AskCoach& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgTFCoaching_AskCoach* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgTFCoaching_AskCoach* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgTFCoaching_AskCoach* New() const final {
    return new CMsgTFCoaching_AskCoach();
  }

  CMsgTFCoaching_AskCoach* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgTFCoaching_AskCoach>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgTFCoaching_AskCoach& from);
  void MergeFrom(const CMsgTFCoaching_AskCoach& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgTFCoaching_AskCoach* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgTFCoaching_AskCoach";
  }
  protected:
  explicit CMsgTFCoaching_AskCoach(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdStudentFieldNumber = 1,
    kStudentIsFriendFieldNumber = 2,
  };
  // optional uint32 account_id_student = 1;
  bool has_account_id_student() const;
  private:
  bool _internal_has_account_id_student() const;
  public:
  void clear_account_id_student();
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id_student() const;
  void set_account_id_student(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_account_id_student() const;
  void _internal_set_account_id_student(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool student_is_friend = 2;
  bool has_student_is_friend() const;
  private:
  bool _internal_has_student_is_friend() const;
  public:
  void clear_student_is_friend();
  bool student_is_friend() const;
  void set_student_is_friend(bool value);
  private:
  bool _internal_student_is_friend() const;
  void _internal_set_student_is_friend(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgTFCoaching_AskCoach)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id_student_;
  bool student_is_friend_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgTFCoaching_AskCoachResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgTFCoaching_AskCoachResponse) */ {
 public:
  inline CMsgTFCoaching_AskCoachResponse() : CMsgTFCoaching_AskCoachResponse(nullptr) {}
  ~CMsgTFCoaching_AskCoachResponse() override;
  explicit constexpr CMsgTFCoaching_AskCoachResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgTFCoaching_AskCoachResponse(const CMsgTFCoaching_AskCoachResponse& from);
  CMsgTFCoaching_AskCoachResponse(CMsgTFCoaching_AskCoachResponse&& from) noexcept
    : CMsgTFCoaching_AskCoachResponse() {
    *this = ::std::move(from);
  }

  inline CMsgTFCoaching_AskCoachResponse& operator=(const CMsgTFCoaching_AskCoachResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgTFCoaching_AskCoachResponse& operator=(CMsgTFCoaching_AskCoachResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgTFCoaching_AskCoachResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgTFCoaching_AskCoachResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgTFCoaching_AskCoachResponse*>(
               &_CMsgTFCoaching_AskCoachResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(CMsgTFCoaching_AskCoachResponse& a, CMsgTFCoaching_AskCoachResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgTFCoaching_AskCoachResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgTFCoaching_AskCoachResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgTFCoaching_AskCoachResponse* New() const final {
    return new CMsgTFCoaching_AskCoachResponse();
  }

  CMsgTFCoaching_AskCoachResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgTFCoaching_AskCoachResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgTFCoaching_AskCoachResponse& from);
  void MergeFrom(const CMsgTFCoaching_AskCoachResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgTFCoaching_AskCoachResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgTFCoaching_AskCoachResponse";
  }
  protected:
  explicit CMsgTFCoaching_AskCoachResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAcceptCoachingAssignmentFieldNumber = 1,
  };
  // optional bool accept_coaching_assignment = 1;
  bool has_accept_coaching_assignment() const;
  private:
  bool _internal_has_accept_coaching_assignment() const;
  public:
  void clear_accept_coaching_assignment();
  bool accept_coaching_assignment() const;
  void set_accept_coaching_assignment(bool value);
  private:
  bool _internal_accept_coaching_assignment() const;
  void _internal_set_accept_coaching_assignment(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgTFCoaching_AskCoachResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool accept_coaching_assignment_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgTFCoaching_CoachJoinGame final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgTFCoaching_CoachJoinGame) */ {
 public:
  inline CMsgTFCoaching_CoachJoinGame() : CMsgTFCoaching_CoachJoinGame(nullptr) {}
  ~CMsgTFCoaching_CoachJoinGame() override;
  explicit constexpr CMsgTFCoaching_CoachJoinGame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgTFCoaching_CoachJoinGame(const CMsgTFCoaching_CoachJoinGame& from);
  CMsgTFCoaching_CoachJoinGame(CMsgTFCoaching_CoachJoinGame&& from) noexcept
    : CMsgTFCoaching_CoachJoinGame() {
    *this = ::std::move(from);
  }

  inline CMsgTFCoaching_CoachJoinGame& operator=(const CMsgTFCoaching_CoachJoinGame& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgTFCoaching_CoachJoinGame& operator=(CMsgTFCoaching_CoachJoinGame&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgTFCoaching_CoachJoinGame& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgTFCoaching_CoachJoinGame* internal_default_instance() {
    return reinterpret_cast<const CMsgTFCoaching_CoachJoinGame*>(
               &_CMsgTFCoaching_CoachJoinGame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(CMsgTFCoaching_CoachJoinGame& a, CMsgTFCoaching_CoachJoinGame& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgTFCoaching_CoachJoinGame* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgTFCoaching_CoachJoinGame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgTFCoaching_CoachJoinGame* New() const final {
    return new CMsgTFCoaching_CoachJoinGame();
  }

  CMsgTFCoaching_CoachJoinGame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgTFCoaching_CoachJoinGame>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgTFCoaching_CoachJoinGame& from);
  void MergeFrom(const CMsgTFCoaching_CoachJoinGame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgTFCoaching_CoachJoinGame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgTFCoaching_CoachJoinGame";
  }
  protected:
  explicit CMsgTFCoaching_CoachJoinGame(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJoinGameFieldNumber = 1,
    kServerAddressFieldNumber = 2,
    kServerPortFieldNumber = 3,
    kAccountIdStudentFieldNumber = 4,
  };
  // optional bool join_game = 1;
  bool has_join_game() const;
  private:
  bool _internal_has_join_game() const;
  public:
  void clear_join_game();
  bool join_game() const;
  void set_join_game(bool value);
  private:
  bool _internal_join_game() const;
  void _internal_set_join_game(bool value);
  public:

  // optional uint32 server_address = 2;
  bool has_server_address() const;
  private:
  bool _internal_has_server_address() const;
  public:
  void clear_server_address();
  ::PROTOBUF_NAMESPACE_ID::uint32 server_address() const;
  void set_server_address(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_server_address() const;
  void _internal_set_server_address(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 server_port = 3;
  bool has_server_port() const;
  private:
  bool _internal_has_server_port() const;
  public:
  void clear_server_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 server_port() const;
  void set_server_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_server_port() const;
  void _internal_set_server_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 account_id_student = 4;
  bool has_account_id_student() const;
  private:
  bool _internal_has_account_id_student() const;
  public:
  void clear_account_id_student();
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id_student() const;
  void set_account_id_student(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_account_id_student() const;
  void _internal_set_account_id_student(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgTFCoaching_CoachJoinGame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool join_game_;
  ::PROTOBUF_NAMESPACE_ID::uint32 server_address_;
  ::PROTOBUF_NAMESPACE_ID::uint32 server_port_;
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id_student_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgTFCoaching_CoachJoining final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgTFCoaching_CoachJoining) */ {
 public:
  inline CMsgTFCoaching_CoachJoining() : CMsgTFCoaching_CoachJoining(nullptr) {}
  ~CMsgTFCoaching_CoachJoining() override;
  explicit constexpr CMsgTFCoaching_CoachJoining(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgTFCoaching_CoachJoining(const CMsgTFCoaching_CoachJoining& from);
  CMsgTFCoaching_CoachJoining(CMsgTFCoaching_CoachJoining&& from) noexcept
    : CMsgTFCoaching_CoachJoining() {
    *this = ::std::move(from);
  }

  inline CMsgTFCoaching_CoachJoining& operator=(const CMsgTFCoaching_CoachJoining& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgTFCoaching_CoachJoining& operator=(CMsgTFCoaching_CoachJoining&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgTFCoaching_CoachJoining& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgTFCoaching_CoachJoining* internal_default_instance() {
    return reinterpret_cast<const CMsgTFCoaching_CoachJoining*>(
               &_CMsgTFCoaching_CoachJoining_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(CMsgTFCoaching_CoachJoining& a, CMsgTFCoaching_CoachJoining& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgTFCoaching_CoachJoining* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgTFCoaching_CoachJoining* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgTFCoaching_CoachJoining* New() const final {
    return new CMsgTFCoaching_CoachJoining();
  }

  CMsgTFCoaching_CoachJoining* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgTFCoaching_CoachJoining>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgTFCoaching_CoachJoining& from);
  void MergeFrom(const CMsgTFCoaching_CoachJoining& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgTFCoaching_CoachJoining* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgTFCoaching_CoachJoining";
  }
  protected:
  explicit CMsgTFCoaching_CoachJoining(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdCoachFieldNumber = 1,
    kAccountIdStudentFieldNumber = 2,
  };
  // optional uint32 account_id_coach = 1;
  bool has_account_id_coach() const;
  private:
  bool _internal_has_account_id_coach() const;
  public:
  void clear_account_id_coach();
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id_coach() const;
  void set_account_id_coach(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_account_id_coach() const;
  void _internal_set_account_id_coach(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 account_id_student = 2;
  bool has_account_id_student() const;
  private:
  bool _internal_has_account_id_student() const;
  public:
  void clear_account_id_student();
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id_student() const;
  void set_account_id_student(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_account_id_student() const;
  void _internal_set_account_id_student(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgTFCoaching_CoachJoining)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id_coach_;
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id_student_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgTFCoaching_CoachJoined final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgTFCoaching_CoachJoined) */ {
 public:
  inline CMsgTFCoaching_CoachJoined() : CMsgTFCoaching_CoachJoined(nullptr) {}
  ~CMsgTFCoaching_CoachJoined() override;
  explicit constexpr CMsgTFCoaching_CoachJoined(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgTFCoaching_CoachJoined(const CMsgTFCoaching_CoachJoined& from);
  CMsgTFCoaching_CoachJoined(CMsgTFCoaching_CoachJoined&& from) noexcept
    : CMsgTFCoaching_CoachJoined() {
    *this = ::std::move(from);
  }

  inline CMsgTFCoaching_CoachJoined& operator=(const CMsgTFCoaching_CoachJoined& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgTFCoaching_CoachJoined& operator=(CMsgTFCoaching_CoachJoined&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgTFCoaching_CoachJoined& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgTFCoaching_CoachJoined* internal_default_instance() {
    return reinterpret_cast<const CMsgTFCoaching_CoachJoined*>(
               &_CMsgTFCoaching_CoachJoined_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(CMsgTFCoaching_CoachJoined& a, CMsgTFCoaching_CoachJoined& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgTFCoaching_CoachJoined* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgTFCoaching_CoachJoined* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgTFCoaching_CoachJoined* New() const final {
    return new CMsgTFCoaching_CoachJoined();
  }

  CMsgTFCoaching_CoachJoined* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgTFCoaching_CoachJoined>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgTFCoaching_CoachJoined& from);
  void MergeFrom(const CMsgTFCoaching_CoachJoined& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgTFCoaching_CoachJoined* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgTFCoaching_CoachJoined";
  }
  protected:
  explicit CMsgTFCoaching_CoachJoined(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdCoachFieldNumber = 1,
  };
  // optional uint32 account_id_coach = 1;
  bool has_account_id_coach() const;
  private:
  bool _internal_has_account_id_coach() const;
  public:
  void clear_account_id_coach();
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id_coach() const;
  void set_account_id_coach(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_account_id_coach() const;
  void _internal_set_account_id_coach(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgTFCoaching_CoachJoined)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id_coach_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgTFCoaching_LikeCurrentCoach final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgTFCoaching_LikeCurrentCoach) */ {
 public:
  inline CMsgTFCoaching_LikeCurrentCoach() : CMsgTFCoaching_LikeCurrentCoach(nullptr) {}
  ~CMsgTFCoaching_LikeCurrentCoach() override;
  explicit constexpr CMsgTFCoaching_LikeCurrentCoach(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgTFCoaching_LikeCurrentCoach(const CMsgTFCoaching_LikeCurrentCoach& from);
  CMsgTFCoaching_LikeCurrentCoach(CMsgTFCoaching_LikeCurrentCoach&& from) noexcept
    : CMsgTFCoaching_LikeCurrentCoach() {
    *this = ::std::move(from);
  }

  inline CMsgTFCoaching_LikeCurrentCoach& operator=(const CMsgTFCoaching_LikeCurrentCoach& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgTFCoaching_LikeCurrentCoach& operator=(CMsgTFCoaching_LikeCurrentCoach&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgTFCoaching_LikeCurrentCoach& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgTFCoaching_LikeCurrentCoach* internal_default_instance() {
    return reinterpret_cast<const CMsgTFCoaching_LikeCurrentCoach*>(
               &_CMsgTFCoaching_LikeCurrentCoach_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(CMsgTFCoaching_LikeCurrentCoach& a, CMsgTFCoaching_LikeCurrentCoach& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgTFCoaching_LikeCurrentCoach* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgTFCoaching_LikeCurrentCoach* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgTFCoaching_LikeCurrentCoach* New() const final {
    return new CMsgTFCoaching_LikeCurrentCoach();
  }

  CMsgTFCoaching_LikeCurrentCoach* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgTFCoaching_LikeCurrentCoach>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgTFCoaching_LikeCurrentCoach& from);
  void MergeFrom(const CMsgTFCoaching_LikeCurrentCoach& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgTFCoaching_LikeCurrentCoach* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgTFCoaching_LikeCurrentCoach";
  }
  protected:
  explicit CMsgTFCoaching_LikeCurrentCoach(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLikeCoachFieldNumber = 1,
  };
  // optional bool like_coach = 1;
  bool has_like_coach() const;
  private:
  bool _internal_has_like_coach() const;
  public:
  void clear_like_coach();
  bool like_coach() const;
  void set_like_coach(bool value);
  private:
  bool _internal_like_coach() const;
  void _internal_set_like_coach(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgTFCoaching_LikeCurrentCoach)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool like_coach_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgTFCoaching_RemoveCurrentCoach final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgTFCoaching_RemoveCurrentCoach) */ {
 public:
  inline CMsgTFCoaching_RemoveCurrentCoach() : CMsgTFCoaching_RemoveCurrentCoach(nullptr) {}
  ~CMsgTFCoaching_RemoveCurrentCoach() override;
  explicit constexpr CMsgTFCoaching_RemoveCurrentCoach(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgTFCoaching_RemoveCurrentCoach(const CMsgTFCoaching_RemoveCurrentCoach& from);
  CMsgTFCoaching_RemoveCurrentCoach(CMsgTFCoaching_RemoveCurrentCoach&& from) noexcept
    : CMsgTFCoaching_RemoveCurrentCoach() {
    *this = ::std::move(from);
  }

  inline CMsgTFCoaching_RemoveCurrentCoach& operator=(const CMsgTFCoaching_RemoveCurrentCoach& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgTFCoaching_RemoveCurrentCoach& operator=(CMsgTFCoaching_RemoveCurrentCoach&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgTFCoaching_RemoveCurrentCoach& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgTFCoaching_RemoveCurrentCoach* internal_default_instance() {
    return reinterpret_cast<const CMsgTFCoaching_RemoveCurrentCoach*>(
               &_CMsgTFCoaching_RemoveCurrentCoach_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(CMsgTFCoaching_RemoveCurrentCoach& a, CMsgTFCoaching_RemoveCurrentCoach& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgTFCoaching_RemoveCurrentCoach* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgTFCoaching_RemoveCurrentCoach* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgTFCoaching_RemoveCurrentCoach* New() const final {
    return new CMsgTFCoaching_RemoveCurrentCoach();
  }

  CMsgTFCoaching_RemoveCurrentCoach* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgTFCoaching_RemoveCurrentCoach>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgTFCoaching_RemoveCurrentCoach& from);
  void MergeFrom(const CMsgTFCoaching_RemoveCurrentCoach& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgTFCoaching_RemoveCurrentCoach* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgTFCoaching_RemoveCurrentCoach";
  }
  protected:
  explicit CMsgTFCoaching_RemoveCurrentCoach(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdCoachFieldNumber = 1,
  };
  // optional uint32 account_id_coach = 1;
  bool has_account_id_coach() const;
  private:
  bool _internal_has_account_id_coach() const;
  public:
  void clear_account_id_coach();
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id_coach() const;
  void set_account_id_coach(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_account_id_coach() const;
  void _internal_set_account_id_coach(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgTFCoaching_RemoveCurrentCoach)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id_coach_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgTFQuickplay_ScoreServers_ServerInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgTFQuickplay_ScoreServers.ServerInfo) */ {
 public:
  inline CMsgTFQuickplay_ScoreServers_ServerInfo() : CMsgTFQuickplay_ScoreServers_ServerInfo(nullptr) {}
  ~CMsgTFQuickplay_ScoreServers_ServerInfo() override;
  explicit constexpr CMsgTFQuickplay_ScoreServers_ServerInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgTFQuickplay_ScoreServers_ServerInfo(const CMsgTFQuickplay_ScoreServers_ServerInfo& from);
  CMsgTFQuickplay_ScoreServers_ServerInfo(CMsgTFQuickplay_ScoreServers_ServerInfo&& from) noexcept
    : CMsgTFQuickplay_ScoreServers_ServerInfo() {
    *this = ::std::move(from);
  }

  inline CMsgTFQuickplay_ScoreServers_ServerInfo& operator=(const CMsgTFQuickplay_ScoreServers_ServerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgTFQuickplay_ScoreServers_ServerInfo& operator=(CMsgTFQuickplay_ScoreServers_ServerInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgTFQuickplay_ScoreServers_ServerInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgTFQuickplay_ScoreServers_ServerInfo* internal_default_instance() {
    return reinterpret_cast<const CMsgTFQuickplay_ScoreServers_ServerInfo*>(
               &_CMsgTFQuickplay_ScoreServers_ServerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(CMsgTFQuickplay_ScoreServers_ServerInfo& a, CMsgTFQuickplay_ScoreServers_ServerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgTFQuickplay_ScoreServers_ServerInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgTFQuickplay_ScoreServers_ServerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgTFQuickplay_ScoreServers_ServerInfo* New() const final {
    return new CMsgTFQuickplay_ScoreServers_ServerInfo();
  }

  CMsgTFQuickplay_ScoreServers_ServerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgTFQuickplay_ScoreServers_ServerInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgTFQuickplay_ScoreServers_ServerInfo& from);
  void MergeFrom(const CMsgTFQuickplay_ScoreServers_ServerInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgTFQuickplay_ScoreServers_ServerInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgTFQuickplay_ScoreServers.ServerInfo";
  }
  protected:
  explicit CMsgTFQuickplay_ScoreServers_ServerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerAddressFieldNumber = 1,
    kServerPortFieldNumber = 2,
    kSteamIdFieldNumber = 4,
    kNumUsersFieldNumber = 3,
    kMaxUsersFieldNumber = 5,
    kUserScoreFieldNumber = 6,
  };
  // optional uint32 server_address = 1;
  bool has_server_address() const;
  private:
  bool _internal_has_server_address() const;
  public:
  void clear_server_address();
  ::PROTOBUF_NAMESPACE_ID::uint32 server_address() const;
  void set_server_address(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_server_address() const;
  void _internal_set_server_address(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 server_port = 2;
  bool has_server_port() const;
  private:
  bool _internal_has_server_port() const;
  public:
  void clear_server_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 server_port() const;
  void set_server_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_server_port() const;
  void _internal_set_server_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 steam_id = 4;
  bool has_steam_id() const;
  private:
  bool _internal_has_steam_id() const;
  public:
  void clear_steam_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 steam_id() const;
  void set_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_steam_id() const;
  void _internal_set_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 num_users = 3;
  bool has_num_users() const;
  private:
  bool _internal_has_num_users() const;
  public:
  void clear_num_users();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_users() const;
  void set_num_users(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_users() const;
  void _internal_set_num_users(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 max_users = 5;
  bool has_max_users() const;
  private:
  bool _internal_has_max_users() const;
  public:
  void clear_max_users();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_users() const;
  void set_max_users(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_users() const;
  void _internal_set_max_users(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float user_score = 6;
  bool has_user_score() const;
  private:
  bool _internal_has_user_score() const;
  public:
  void clear_user_score();
  float user_score() const;
  void set_user_score(float value);
  private:
  float _internal_user_score() const;
  void _internal_set_user_score(float value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgTFQuickplay_ScoreServers.ServerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 server_address_;
  ::PROTOBUF_NAMESPACE_ID::uint32 server_port_;
  ::PROTOBUF_NAMESPACE_ID::uint64 steam_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_users_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_users_;
  float user_score_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgTFQuickplay_ScoreServers final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgTFQuickplay_ScoreServers) */ {
 public:
  inline CMsgTFQuickplay_ScoreServers() : CMsgTFQuickplay_ScoreServers(nullptr) {}
  ~CMsgTFQuickplay_ScoreServers() override;
  explicit constexpr CMsgTFQuickplay_ScoreServers(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgTFQuickplay_ScoreServers(const CMsgTFQuickplay_ScoreServers& from);
  CMsgTFQuickplay_ScoreServers(CMsgTFQuickplay_ScoreServers&& from) noexcept
    : CMsgTFQuickplay_ScoreServers() {
    *this = ::std::move(from);
  }

  inline CMsgTFQuickplay_ScoreServers& operator=(const CMsgTFQuickplay_ScoreServers& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgTFQuickplay_ScoreServers& operator=(CMsgTFQuickplay_ScoreServers&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgTFQuickplay_ScoreServers& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgTFQuickplay_ScoreServers* internal_default_instance() {
    return reinterpret_cast<const CMsgTFQuickplay_ScoreServers*>(
               &_CMsgTFQuickplay_ScoreServers_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(CMsgTFQuickplay_ScoreServers& a, CMsgTFQuickplay_ScoreServers& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgTFQuickplay_ScoreServers* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgTFQuickplay_ScoreServers* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgTFQuickplay_ScoreServers* New() const final {
    return new CMsgTFQuickplay_ScoreServers();
  }

  CMsgTFQuickplay_ScoreServers* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgTFQuickplay_ScoreServers>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgTFQuickplay_ScoreServers& from);
  void MergeFrom(const CMsgTFQuickplay_ScoreServers& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgTFQuickplay_ScoreServers* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgTFQuickplay_ScoreServers";
  }
  protected:
  explicit CMsgTFQuickplay_ScoreServers(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgTFQuickplay_ScoreServers_ServerInfo ServerInfo;

  // accessors -------------------------------------------------------

  enum : int {
    kServersFieldNumber = 1,
  };
  // repeated .CMsgTFQuickplay_ScoreServers.ServerInfo servers = 1;
  int servers_size() const;
  private:
  int _internal_servers_size() const;
  public:
  void clear_servers();
  ::CMsgTFQuickplay_ScoreServers_ServerInfo* mutable_servers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgTFQuickplay_ScoreServers_ServerInfo >*
      mutable_servers();
  private:
  const ::CMsgTFQuickplay_ScoreServers_ServerInfo& _internal_servers(int index) const;
  ::CMsgTFQuickplay_ScoreServers_ServerInfo* _internal_add_servers();
  public:
  const ::CMsgTFQuickplay_ScoreServers_ServerInfo& servers(int index) const;
  ::CMsgTFQuickplay_ScoreServers_ServerInfo* add_servers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgTFQuickplay_ScoreServers_ServerInfo >&
      servers() const;

  // @@protoc_insertion_point(class_scope:CMsgTFQuickplay_ScoreServers)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgTFQuickplay_ScoreServers_ServerInfo > servers_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgTFQuickplay_ScoreServersResponse_ServerInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgTFQuickplay_ScoreServersResponse.ServerInfo) */ {
 public:
  inline CMsgTFQuickplay_ScoreServersResponse_ServerInfo() : CMsgTFQuickplay_ScoreServersResponse_ServerInfo(nullptr) {}
  ~CMsgTFQuickplay_ScoreServersResponse_ServerInfo() override;
  explicit constexpr CMsgTFQuickplay_ScoreServersResponse_ServerInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgTFQuickplay_ScoreServersResponse_ServerInfo(const CMsgTFQuickplay_ScoreServersResponse_ServerInfo& from);
  CMsgTFQuickplay_ScoreServersResponse_ServerInfo(CMsgTFQuickplay_ScoreServersResponse_ServerInfo&& from) noexcept
    : CMsgTFQuickplay_ScoreServersResponse_ServerInfo() {
    *this = ::std::move(from);
  }

  inline CMsgTFQuickplay_ScoreServersResponse_ServerInfo& operator=(const CMsgTFQuickplay_ScoreServersResponse_ServerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgTFQuickplay_ScoreServersResponse_ServerInfo& operator=(CMsgTFQuickplay_ScoreServersResponse_ServerInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgTFQuickplay_ScoreServersResponse_ServerInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgTFQuickplay_ScoreServersResponse_ServerInfo* internal_default_instance() {
    return reinterpret_cast<const CMsgTFQuickplay_ScoreServersResponse_ServerInfo*>(
               &_CMsgTFQuickplay_ScoreServersResponse_ServerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(CMsgTFQuickplay_ScoreServersResponse_ServerInfo& a, CMsgTFQuickplay_ScoreServersResponse_ServerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgTFQuickplay_ScoreServersResponse_ServerInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgTFQuickplay_ScoreServersResponse_ServerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgTFQuickplay_ScoreServersResponse_ServerInfo* New() const final {
    return new CMsgTFQuickplay_ScoreServersResponse_ServerInfo();
  }

  CMsgTFQuickplay_ScoreServersResponse_ServerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgTFQuickplay_ScoreServersResponse_ServerInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgTFQuickplay_ScoreServersResponse_ServerInfo& from);
  void MergeFrom(const CMsgTFQuickplay_ScoreServersResponse_ServerInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgTFQuickplay_ScoreServersResponse_ServerInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgTFQuickplay_ScoreServersResponse.ServerInfo";
  }
  protected:
  explicit CMsgTFQuickplay_ScoreServersResponse_ServerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerAddressFieldNumber = 1,
    kServerPortFieldNumber = 2,
    kSteamIdFieldNumber = 4,
    kTotalScoreFieldNumber = 3,
    kOptionsScoreFieldNumber = 5,
  };
  // optional uint32 server_address = 1;
  bool has_server_address() const;
  private:
  bool _internal_has_server_address() const;
  public:
  void clear_server_address();
  ::PROTOBUF_NAMESPACE_ID::uint32 server_address() const;
  void set_server_address(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_server_address() const;
  void _internal_set_server_address(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 server_port = 2;
  bool has_server_port() const;
  private:
  bool _internal_has_server_port() const;
  public:
  void clear_server_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 server_port() const;
  void set_server_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_server_port() const;
  void _internal_set_server_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 steam_id = 4;
  bool has_steam_id() const;
  private:
  bool _internal_has_steam_id() const;
  public:
  void clear_steam_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 steam_id() const;
  void set_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_steam_id() const;
  void _internal_set_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional float total_score = 3;
  bool has_total_score() const;
  private:
  bool _internal_has_total_score() const;
  public:
  void clear_total_score();
  float total_score() const;
  void set_total_score(float value);
  private:
  float _internal_total_score() const;
  void _internal_set_total_score(float value);
  public:

  // optional uint32 options_score = 5;
  bool has_options_score() const;
  private:
  bool _internal_has_options_score() const;
  public:
  void clear_options_score();
  ::PROTOBUF_NAMESPACE_ID::uint32 options_score() const;
  void set_options_score(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_options_score() const;
  void _internal_set_options_score(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgTFQuickplay_ScoreServersResponse.ServerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 server_address_;
  ::PROTOBUF_NAMESPACE_ID::uint32 server_port_;
  ::PROTOBUF_NAMESPACE_ID::uint64 steam_id_;
  float total_score_;
  ::PROTOBUF_NAMESPACE_ID::uint32 options_score_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgTFQuickplay_ScoreServersResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgTFQuickplay_ScoreServersResponse) */ {
 public:
  inline CMsgTFQuickplay_ScoreServersResponse() : CMsgTFQuickplay_ScoreServersResponse(nullptr) {}
  ~CMsgTFQuickplay_ScoreServersResponse() override;
  explicit constexpr CMsgTFQuickplay_ScoreServersResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgTFQuickplay_ScoreServersResponse(const CMsgTFQuickplay_ScoreServersResponse& from);
  CMsgTFQuickplay_ScoreServersResponse(CMsgTFQuickplay_ScoreServersResponse&& from) noexcept
    : CMsgTFQuickplay_ScoreServersResponse() {
    *this = ::std::move(from);
  }

  inline CMsgTFQuickplay_ScoreServersResponse& operator=(const CMsgTFQuickplay_ScoreServersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgTFQuickplay_ScoreServersResponse& operator=(CMsgTFQuickplay_ScoreServersResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgTFQuickplay_ScoreServersResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgTFQuickplay_ScoreServersResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgTFQuickplay_ScoreServersResponse*>(
               &_CMsgTFQuickplay_ScoreServersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(CMsgTFQuickplay_ScoreServersResponse& a, CMsgTFQuickplay_ScoreServersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgTFQuickplay_ScoreServersResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgTFQuickplay_ScoreServersResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgTFQuickplay_ScoreServersResponse* New() const final {
    return new CMsgTFQuickplay_ScoreServersResponse();
  }

  CMsgTFQuickplay_ScoreServersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgTFQuickplay_ScoreServersResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgTFQuickplay_ScoreServersResponse& from);
  void MergeFrom(const CMsgTFQuickplay_ScoreServersResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgTFQuickplay_ScoreServersResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgTFQuickplay_ScoreServersResponse";
  }
  protected:
  explicit CMsgTFQuickplay_ScoreServersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgTFQuickplay_ScoreServersResponse_ServerInfo ServerInfo;

  // accessors -------------------------------------------------------

  enum : int {
    kServersFieldNumber = 1,
  };
  // repeated .CMsgTFQuickplay_ScoreServersResponse.ServerInfo servers = 1;
  int servers_size() const;
  private:
  int _internal_servers_size() const;
  public:
  void clear_servers();
  ::CMsgTFQuickplay_ScoreServersResponse_ServerInfo* mutable_servers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgTFQuickplay_ScoreServersResponse_ServerInfo >*
      mutable_servers();
  private:
  const ::CMsgTFQuickplay_ScoreServersResponse_ServerInfo& _internal_servers(int index) const;
  ::CMsgTFQuickplay_ScoreServersResponse_ServerInfo* _internal_add_servers();
  public:
  const ::CMsgTFQuickplay_ScoreServersResponse_ServerInfo& servers(int index) const;
  ::CMsgTFQuickplay_ScoreServersResponse_ServerInfo* add_servers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgTFQuickplay_ScoreServersResponse_ServerInfo >&
      servers() const;

  // @@protoc_insertion_point(class_scope:CMsgTFQuickplay_ScoreServersResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgTFQuickplay_ScoreServersResponse_ServerInfo > servers_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgTFQuickplay_PlayerJoining final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgTFQuickplay_PlayerJoining) */ {
 public:
  inline CMsgTFQuickplay_PlayerJoining() : CMsgTFQuickplay_PlayerJoining(nullptr) {}
  ~CMsgTFQuickplay_PlayerJoining() override;
  explicit constexpr CMsgTFQuickplay_PlayerJoining(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgTFQuickplay_PlayerJoining(const CMsgTFQuickplay_PlayerJoining& from);
  CMsgTFQuickplay_PlayerJoining(CMsgTFQuickplay_PlayerJoining&& from) noexcept
    : CMsgTFQuickplay_PlayerJoining() {
    *this = ::std::move(from);
  }

  inline CMsgTFQuickplay_PlayerJoining& operator=(const CMsgTFQuickplay_PlayerJoining& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgTFQuickplay_PlayerJoining& operator=(CMsgTFQuickplay_PlayerJoining&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgTFQuickplay_PlayerJoining& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgTFQuickplay_PlayerJoining* internal_default_instance() {
    return reinterpret_cast<const CMsgTFQuickplay_PlayerJoining*>(
               &_CMsgTFQuickplay_PlayerJoining_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(CMsgTFQuickplay_PlayerJoining& a, CMsgTFQuickplay_PlayerJoining& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgTFQuickplay_PlayerJoining* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgTFQuickplay_PlayerJoining* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgTFQuickplay_PlayerJoining* New() const final {
    return new CMsgTFQuickplay_PlayerJoining();
  }

  CMsgTFQuickplay_PlayerJoining* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgTFQuickplay_PlayerJoining>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgTFQuickplay_PlayerJoining& from);
  void MergeFrom(const CMsgTFQuickplay_PlayerJoining& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgTFQuickplay_PlayerJoining* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgTFQuickplay_PlayerJoining";
  }
  protected:
  explicit CMsgTFQuickplay_PlayerJoining(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
  };
  // optional uint32 account_id = 1;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id() const;
  void set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_account_id() const;
  void _internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgTFQuickplay_PlayerJoining)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGC_GameServer_LevelInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGC_GameServer_LevelInfo) */ {
 public:
  inline CMsgGC_GameServer_LevelInfo() : CMsgGC_GameServer_LevelInfo(nullptr) {}
  ~CMsgGC_GameServer_LevelInfo() override;
  explicit constexpr CMsgGC_GameServer_LevelInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGC_GameServer_LevelInfo(const CMsgGC_GameServer_LevelInfo& from);
  CMsgGC_GameServer_LevelInfo(CMsgGC_GameServer_LevelInfo&& from) noexcept
    : CMsgGC_GameServer_LevelInfo() {
    *this = ::std::move(from);
  }

  inline CMsgGC_GameServer_LevelInfo& operator=(const CMsgGC_GameServer_LevelInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGC_GameServer_LevelInfo& operator=(CMsgGC_GameServer_LevelInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGC_GameServer_LevelInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGC_GameServer_LevelInfo* internal_default_instance() {
    return reinterpret_cast<const CMsgGC_GameServer_LevelInfo*>(
               &_CMsgGC_GameServer_LevelInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(CMsgGC_GameServer_LevelInfo& a, CMsgGC_GameServer_LevelInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGC_GameServer_LevelInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGC_GameServer_LevelInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGC_GameServer_LevelInfo* New() const final {
    return new CMsgGC_GameServer_LevelInfo();
  }

  CMsgGC_GameServer_LevelInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGC_GameServer_LevelInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgGC_GameServer_LevelInfo& from);
  void MergeFrom(const CMsgGC_GameServer_LevelInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGC_GameServer_LevelInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGC_GameServer_LevelInfo";
  }
  protected:
  explicit CMsgGC_GameServer_LevelInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLevelNameFieldNumber = 2,
    kLevelLoadedFieldNumber = 1,
  };
  // optional string level_name = 2;
  bool has_level_name() const;
  private:
  bool _internal_has_level_name() const;
  public:
  void clear_level_name();
  const std::string& level_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_level_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_level_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_level_name();
  void set_allocated_level_name(std::string* level_name);
  private:
  const std::string& _internal_level_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_level_name(const std::string& value);
  std::string* _internal_mutable_level_name();
  public:

  // optional bool level_loaded = 1;
  bool has_level_loaded() const;
  private:
  bool _internal_has_level_loaded() const;
  public:
  void clear_level_loaded();
  bool level_loaded() const;
  void set_level_loaded(bool value);
  private:
  bool _internal_level_loaded() const;
  void _internal_set_level_loaded(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGC_GameServer_LevelInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr level_name_;
  bool level_loaded_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGC_GameServer_AuthChallenge final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGC_GameServer_AuthChallenge) */ {
 public:
  inline CMsgGC_GameServer_AuthChallenge() : CMsgGC_GameServer_AuthChallenge(nullptr) {}
  ~CMsgGC_GameServer_AuthChallenge() override;
  explicit constexpr CMsgGC_GameServer_AuthChallenge(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGC_GameServer_AuthChallenge(const CMsgGC_GameServer_AuthChallenge& from);
  CMsgGC_GameServer_AuthChallenge(CMsgGC_GameServer_AuthChallenge&& from) noexcept
    : CMsgGC_GameServer_AuthChallenge() {
    *this = ::std::move(from);
  }

  inline CMsgGC_GameServer_AuthChallenge& operator=(const CMsgGC_GameServer_AuthChallenge& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGC_GameServer_AuthChallenge& operator=(CMsgGC_GameServer_AuthChallenge&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGC_GameServer_AuthChallenge& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGC_GameServer_AuthChallenge* internal_default_instance() {
    return reinterpret_cast<const CMsgGC_GameServer_AuthChallenge*>(
               &_CMsgGC_GameServer_AuthChallenge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(CMsgGC_GameServer_AuthChallenge& a, CMsgGC_GameServer_AuthChallenge& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGC_GameServer_AuthChallenge* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGC_GameServer_AuthChallenge* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGC_GameServer_AuthChallenge* New() const final {
    return new CMsgGC_GameServer_AuthChallenge();
  }

  CMsgGC_GameServer_AuthChallenge* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGC_GameServer_AuthChallenge>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgGC_GameServer_AuthChallenge& from);
  void MergeFrom(const CMsgGC_GameServer_AuthChallenge& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGC_GameServer_AuthChallenge* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGC_GameServer_AuthChallenge";
  }
  protected:
  explicit CMsgGC_GameServer_AuthChallenge(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChallengeStringFieldNumber = 1,
  };
  // optional string challenge_string = 1;
  bool has_challenge_string() const;
  private:
  bool _internal_has_challenge_string() const;
  public:
  void clear_challenge_string();
  const std::string& challenge_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_challenge_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_challenge_string();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_challenge_string();
  void set_allocated_challenge_string(std::string* challenge_string);
  private:
  const std::string& _internal_challenge_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_challenge_string(const std::string& value);
  std::string* _internal_mutable_challenge_string();
  public:

  // @@protoc_insertion_point(class_scope:CMsgGC_GameServer_AuthChallenge)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr challenge_string_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGC_GameServer_AuthResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGC_GameServer_AuthResult) */ {
 public:
  inline CMsgGC_GameServer_AuthResult() : CMsgGC_GameServer_AuthResult(nullptr) {}
  ~CMsgGC_GameServer_AuthResult() override;
  explicit constexpr CMsgGC_GameServer_AuthResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGC_GameServer_AuthResult(const CMsgGC_GameServer_AuthResult& from);
  CMsgGC_GameServer_AuthResult(CMsgGC_GameServer_AuthResult&& from) noexcept
    : CMsgGC_GameServer_AuthResult() {
    *this = ::std::move(from);
  }

  inline CMsgGC_GameServer_AuthResult& operator=(const CMsgGC_GameServer_AuthResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGC_GameServer_AuthResult& operator=(CMsgGC_GameServer_AuthResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGC_GameServer_AuthResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGC_GameServer_AuthResult* internal_default_instance() {
    return reinterpret_cast<const CMsgGC_GameServer_AuthResult*>(
               &_CMsgGC_GameServer_AuthResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(CMsgGC_GameServer_AuthResult& a, CMsgGC_GameServer_AuthResult& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGC_GameServer_AuthResult* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGC_GameServer_AuthResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGC_GameServer_AuthResult* New() const final {
    return new CMsgGC_GameServer_AuthResult();
  }

  CMsgGC_GameServer_AuthResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGC_GameServer_AuthResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgGC_GameServer_AuthResult& from);
  void MergeFrom(const CMsgGC_GameServer_AuthResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGC_GameServer_AuthResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGC_GameServer_AuthResult";
  }
  protected:
  explicit CMsgGC_GameServer_AuthResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 5,
    kGameServerStandingFieldNumber = 2,
    kAuthenticatedFieldNumber = 1,
    kIsValveServerFieldNumber = 4,
    kGameServerStandingTrendFieldNumber = 3,
  };
  // optional string message = 5;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // optional int32 game_server_standing = 2;
  bool has_game_server_standing() const;
  private:
  bool _internal_has_game_server_standing() const;
  public:
  void clear_game_server_standing();
  ::PROTOBUF_NAMESPACE_ID::int32 game_server_standing() const;
  void set_game_server_standing(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_game_server_standing() const;
  void _internal_set_game_server_standing(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool authenticated = 1;
  bool has_authenticated() const;
  private:
  bool _internal_has_authenticated() const;
  public:
  void clear_authenticated();
  bool authenticated() const;
  void set_authenticated(bool value);
  private:
  bool _internal_authenticated() const;
  void _internal_set_authenticated(bool value);
  public:

  // optional bool is_valve_server = 4;
  bool has_is_valve_server() const;
  private:
  bool _internal_has_is_valve_server() const;
  public:
  void clear_is_valve_server();
  bool is_valve_server() const;
  void set_is_valve_server(bool value);
  private:
  bool _internal_is_valve_server() const;
  void _internal_set_is_valve_server(bool value);
  public:

  // optional int32 game_server_standing_trend = 3;
  bool has_game_server_standing_trend() const;
  private:
  bool _internal_has_game_server_standing_trend() const;
  public:
  void clear_game_server_standing_trend();
  ::PROTOBUF_NAMESPACE_ID::int32 game_server_standing_trend() const;
  void set_game_server_standing_trend(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_game_server_standing_trend() const;
  void _internal_set_game_server_standing_trend(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGC_GameServer_AuthResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::int32 game_server_standing_;
  bool authenticated_;
  bool is_valve_server_;
  ::PROTOBUF_NAMESPACE_ID::int32 game_server_standing_trend_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGC_GameServer_AuthChallengeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGC_GameServer_AuthChallengeResponse) */ {
 public:
  inline CMsgGC_GameServer_AuthChallengeResponse() : CMsgGC_GameServer_AuthChallengeResponse(nullptr) {}
  ~CMsgGC_GameServer_AuthChallengeResponse() override;
  explicit constexpr CMsgGC_GameServer_AuthChallengeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGC_GameServer_AuthChallengeResponse(const CMsgGC_GameServer_AuthChallengeResponse& from);
  CMsgGC_GameServer_AuthChallengeResponse(CMsgGC_GameServer_AuthChallengeResponse&& from) noexcept
    : CMsgGC_GameServer_AuthChallengeResponse() {
    *this = ::std::move(from);
  }

  inline CMsgGC_GameServer_AuthChallengeResponse& operator=(const CMsgGC_GameServer_AuthChallengeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGC_GameServer_AuthChallengeResponse& operator=(CMsgGC_GameServer_AuthChallengeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGC_GameServer_AuthChallengeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGC_GameServer_AuthChallengeResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgGC_GameServer_AuthChallengeResponse*>(
               &_CMsgGC_GameServer_AuthChallengeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(CMsgGC_GameServer_AuthChallengeResponse& a, CMsgGC_GameServer_AuthChallengeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGC_GameServer_AuthChallengeResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGC_GameServer_AuthChallengeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGC_GameServer_AuthChallengeResponse* New() const final {
    return new CMsgGC_GameServer_AuthChallengeResponse();
  }

  CMsgGC_GameServer_AuthChallengeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGC_GameServer_AuthChallengeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgGC_GameServer_AuthChallengeResponse& from);
  void MergeFrom(const CMsgGC_GameServer_AuthChallengeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGC_GameServer_AuthChallengeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGC_GameServer_AuthChallengeResponse";
  }
  protected:
  explicit CMsgGC_GameServer_AuthChallengeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHashedChallengeStringFieldNumber = 2,
    kGameServerAccountIdFieldNumber = 1,
  };
  // optional bytes hashed_challenge_string = 2;
  bool has_hashed_challenge_string() const;
  private:
  bool _internal_has_hashed_challenge_string() const;
  public:
  void clear_hashed_challenge_string();
  const std::string& hashed_challenge_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hashed_challenge_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hashed_challenge_string();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_hashed_challenge_string();
  void set_allocated_hashed_challenge_string(std::string* hashed_challenge_string);
  private:
  const std::string& _internal_hashed_challenge_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hashed_challenge_string(const std::string& value);
  std::string* _internal_mutable_hashed_challenge_string();
  public:

  // optional uint32 game_server_account_id = 1;
  bool has_game_server_account_id() const;
  private:
  bool _internal_has_game_server_account_id() const;
  public:
  void clear_game_server_account_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 game_server_account_id() const;
  void set_game_server_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_game_server_account_id() const;
  void _internal_set_game_server_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGC_GameServer_AuthChallengeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hashed_challenge_string_;
  ::PROTOBUF_NAMESPACE_ID::uint32 game_server_account_id_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGC_GameServer_CreateIdentity final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGC_GameServer_CreateIdentity) */ {
 public:
  inline CMsgGC_GameServer_CreateIdentity() : CMsgGC_GameServer_CreateIdentity(nullptr) {}
  ~CMsgGC_GameServer_CreateIdentity() override;
  explicit constexpr CMsgGC_GameServer_CreateIdentity(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGC_GameServer_CreateIdentity(const CMsgGC_GameServer_CreateIdentity& from);
  CMsgGC_GameServer_CreateIdentity(CMsgGC_GameServer_CreateIdentity&& from) noexcept
    : CMsgGC_GameServer_CreateIdentity() {
    *this = ::std::move(from);
  }

  inline CMsgGC_GameServer_CreateIdentity& operator=(const CMsgGC_GameServer_CreateIdentity& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGC_GameServer_CreateIdentity& operator=(CMsgGC_GameServer_CreateIdentity&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGC_GameServer_CreateIdentity& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGC_GameServer_CreateIdentity* internal_default_instance() {
    return reinterpret_cast<const CMsgGC_GameServer_CreateIdentity*>(
               &_CMsgGC_GameServer_CreateIdentity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(CMsgGC_GameServer_CreateIdentity& a, CMsgGC_GameServer_CreateIdentity& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGC_GameServer_CreateIdentity* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGC_GameServer_CreateIdentity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGC_GameServer_CreateIdentity* New() const final {
    return new CMsgGC_GameServer_CreateIdentity();
  }

  CMsgGC_GameServer_CreateIdentity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGC_GameServer_CreateIdentity>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgGC_GameServer_CreateIdentity& from);
  void MergeFrom(const CMsgGC_GameServer_CreateIdentity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGC_GameServer_CreateIdentity* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGC_GameServer_CreateIdentity";
  }
  protected:
  explicit CMsgGC_GameServer_CreateIdentity(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
  };
  // optional uint32 account_id = 1;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id() const;
  void set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_account_id() const;
  void _internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGC_GameServer_CreateIdentity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGC_GameServer_CreateIdentityResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGC_GameServer_CreateIdentityResponse) */ {
 public:
  inline CMsgGC_GameServer_CreateIdentityResponse() : CMsgGC_GameServer_CreateIdentityResponse(nullptr) {}
  ~CMsgGC_GameServer_CreateIdentityResponse() override;
  explicit constexpr CMsgGC_GameServer_CreateIdentityResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGC_GameServer_CreateIdentityResponse(const CMsgGC_GameServer_CreateIdentityResponse& from);
  CMsgGC_GameServer_CreateIdentityResponse(CMsgGC_GameServer_CreateIdentityResponse&& from) noexcept
    : CMsgGC_GameServer_CreateIdentityResponse() {
    *this = ::std::move(from);
  }

  inline CMsgGC_GameServer_CreateIdentityResponse& operator=(const CMsgGC_GameServer_CreateIdentityResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGC_GameServer_CreateIdentityResponse& operator=(CMsgGC_GameServer_CreateIdentityResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGC_GameServer_CreateIdentityResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGC_GameServer_CreateIdentityResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgGC_GameServer_CreateIdentityResponse*>(
               &_CMsgGC_GameServer_CreateIdentityResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(CMsgGC_GameServer_CreateIdentityResponse& a, CMsgGC_GameServer_CreateIdentityResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGC_GameServer_CreateIdentityResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGC_GameServer_CreateIdentityResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGC_GameServer_CreateIdentityResponse* New() const final {
    return new CMsgGC_GameServer_CreateIdentityResponse();
  }

  CMsgGC_GameServer_CreateIdentityResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGC_GameServer_CreateIdentityResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgGC_GameServer_CreateIdentityResponse& from);
  void MergeFrom(const CMsgGC_GameServer_CreateIdentityResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGC_GameServer_CreateIdentityResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGC_GameServer_CreateIdentityResponse";
  }
  protected:
  explicit CMsgGC_GameServer_CreateIdentityResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgGC_GameServer_CreateIdentityResponse_EStatus EStatus;
  static constexpr EStatus kStatus_GenericFailure =
    CMsgGC_GameServer_CreateIdentityResponse_EStatus_kStatus_GenericFailure;
  static constexpr EStatus kStatus_TooMany =
    CMsgGC_GameServer_CreateIdentityResponse_EStatus_kStatus_TooMany;
  static constexpr EStatus kStatus_NoPrivs =
    CMsgGC_GameServer_CreateIdentityResponse_EStatus_kStatus_NoPrivs;
  static constexpr EStatus kStatus_Created =
    CMsgGC_GameServer_CreateIdentityResponse_EStatus_kStatus_Created;
  static inline bool EStatus_IsValid(int value) {
    return CMsgGC_GameServer_CreateIdentityResponse_EStatus_IsValid(value);
  }
  static constexpr EStatus EStatus_MIN =
    CMsgGC_GameServer_CreateIdentityResponse_EStatus_EStatus_MIN;
  static constexpr EStatus EStatus_MAX =
    CMsgGC_GameServer_CreateIdentityResponse_EStatus_EStatus_MAX;
  static constexpr int EStatus_ARRAYSIZE =
    CMsgGC_GameServer_CreateIdentityResponse_EStatus_EStatus_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EStatus_descriptor() {
    return CMsgGC_GameServer_CreateIdentityResponse_EStatus_descriptor();
  }
  template<typename T>
  static inline const std::string& EStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EStatus_Name.");
    return CMsgGC_GameServer_CreateIdentityResponse_EStatus_Name(enum_t_value);
  }
  static inline bool EStatus_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EStatus* value) {
    return CMsgGC_GameServer_CreateIdentityResponse_EStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kGameServerIdentityTokenFieldNumber = 3,
    kAccountCreatedFieldNumber = 1,
    kGameServerAccountIdFieldNumber = 2,
    kStatusFieldNumber = 4,
  };
  // optional string game_server_identity_token = 3;
  bool has_game_server_identity_token() const;
  private:
  bool _internal_has_game_server_identity_token() const;
  public:
  void clear_game_server_identity_token();
  const std::string& game_server_identity_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_game_server_identity_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_game_server_identity_token();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_game_server_identity_token();
  void set_allocated_game_server_identity_token(std::string* game_server_identity_token);
  private:
  const std::string& _internal_game_server_identity_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_game_server_identity_token(const std::string& value);
  std::string* _internal_mutable_game_server_identity_token();
  public:

  // optional bool account_created = 1;
  bool has_account_created() const;
  private:
  bool _internal_has_account_created() const;
  public:
  void clear_account_created();
  bool account_created() const;
  void set_account_created(bool value);
  private:
  bool _internal_account_created() const;
  void _internal_set_account_created(bool value);
  public:

  // optional uint32 game_server_account_id = 2;
  bool has_game_server_account_id() const;
  private:
  bool _internal_has_game_server_account_id() const;
  public:
  void clear_game_server_account_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 game_server_account_id() const;
  void set_game_server_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_game_server_account_id() const;
  void _internal_set_game_server_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .CMsgGC_GameServer_CreateIdentityResponse.EStatus status = 4 [default = kStatus_GenericFailure];
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::CMsgGC_GameServer_CreateIdentityResponse_EStatus status() const;
  void set_status(::CMsgGC_GameServer_CreateIdentityResponse_EStatus value);
  private:
  ::CMsgGC_GameServer_CreateIdentityResponse_EStatus _internal_status() const;
  void _internal_set_status(::CMsgGC_GameServer_CreateIdentityResponse_EStatus value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGC_GameServer_CreateIdentityResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr game_server_identity_token_;
  bool account_created_;
  ::PROTOBUF_NAMESPACE_ID::uint32 game_server_account_id_;
  int status_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGC_GameServer_List final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGC_GameServer_List) */ {
 public:
  inline CMsgGC_GameServer_List() : CMsgGC_GameServer_List(nullptr) {}
  ~CMsgGC_GameServer_List() override;
  explicit constexpr CMsgGC_GameServer_List(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGC_GameServer_List(const CMsgGC_GameServer_List& from);
  CMsgGC_GameServer_List(CMsgGC_GameServer_List&& from) noexcept
    : CMsgGC_GameServer_List() {
    *this = ::std::move(from);
  }

  inline CMsgGC_GameServer_List& operator=(const CMsgGC_GameServer_List& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGC_GameServer_List& operator=(CMsgGC_GameServer_List&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGC_GameServer_List& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGC_GameServer_List* internal_default_instance() {
    return reinterpret_cast<const CMsgGC_GameServer_List*>(
               &_CMsgGC_GameServer_List_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(CMsgGC_GameServer_List& a, CMsgGC_GameServer_List& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGC_GameServer_List* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGC_GameServer_List* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGC_GameServer_List* New() const final {
    return new CMsgGC_GameServer_List();
  }

  CMsgGC_GameServer_List* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGC_GameServer_List>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgGC_GameServer_List& from);
  void MergeFrom(const CMsgGC_GameServer_List& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGC_GameServer_List* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGC_GameServer_List";
  }
  protected:
  explicit CMsgGC_GameServer_List(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
  };
  // optional uint32 account_id = 1;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id() const;
  void set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_account_id() const;
  void _internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGC_GameServer_List)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGC_GameServer_ListResponse_GameServerIdentity final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGC_GameServer_ListResponse.GameServerIdentity) */ {
 public:
  inline CMsgGC_GameServer_ListResponse_GameServerIdentity() : CMsgGC_GameServer_ListResponse_GameServerIdentity(nullptr) {}
  ~CMsgGC_GameServer_ListResponse_GameServerIdentity() override;
  explicit constexpr CMsgGC_GameServer_ListResponse_GameServerIdentity(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGC_GameServer_ListResponse_GameServerIdentity(const CMsgGC_GameServer_ListResponse_GameServerIdentity& from);
  CMsgGC_GameServer_ListResponse_GameServerIdentity(CMsgGC_GameServer_ListResponse_GameServerIdentity&& from) noexcept
    : CMsgGC_GameServer_ListResponse_GameServerIdentity() {
    *this = ::std::move(from);
  }

  inline CMsgGC_GameServer_ListResponse_GameServerIdentity& operator=(const CMsgGC_GameServer_ListResponse_GameServerIdentity& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGC_GameServer_ListResponse_GameServerIdentity& operator=(CMsgGC_GameServer_ListResponse_GameServerIdentity&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGC_GameServer_ListResponse_GameServerIdentity& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGC_GameServer_ListResponse_GameServerIdentity* internal_default_instance() {
    return reinterpret_cast<const CMsgGC_GameServer_ListResponse_GameServerIdentity*>(
               &_CMsgGC_GameServer_ListResponse_GameServerIdentity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(CMsgGC_GameServer_ListResponse_GameServerIdentity& a, CMsgGC_GameServer_ListResponse_GameServerIdentity& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGC_GameServer_ListResponse_GameServerIdentity* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGC_GameServer_ListResponse_GameServerIdentity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGC_GameServer_ListResponse_GameServerIdentity* New() const final {
    return new CMsgGC_GameServer_ListResponse_GameServerIdentity();
  }

  CMsgGC_GameServer_ListResponse_GameServerIdentity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGC_GameServer_ListResponse_GameServerIdentity>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgGC_GameServer_ListResponse_GameServerIdentity& from);
  void MergeFrom(const CMsgGC_GameServer_ListResponse_GameServerIdentity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGC_GameServer_ListResponse_GameServerIdentity* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGC_GameServer_ListResponse.GameServerIdentity";
  }
  protected:
  explicit CMsgGC_GameServer_ListResponse_GameServerIdentity(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameServerIdentityTokenFieldNumber = 2,
    kGameServerAccountIdFieldNumber = 1,
    kGameServerStandingFieldNumber = 3,
    kGameServerStandingTrendFieldNumber = 4,
  };
  // optional string game_server_identity_token = 2;
  bool has_game_server_identity_token() const;
  private:
  bool _internal_has_game_server_identity_token() const;
  public:
  void clear_game_server_identity_token();
  const std::string& game_server_identity_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_game_server_identity_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_game_server_identity_token();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_game_server_identity_token();
  void set_allocated_game_server_identity_token(std::string* game_server_identity_token);
  private:
  const std::string& _internal_game_server_identity_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_game_server_identity_token(const std::string& value);
  std::string* _internal_mutable_game_server_identity_token();
  public:

  // optional uint32 game_server_account_id = 1;
  bool has_game_server_account_id() const;
  private:
  bool _internal_has_game_server_account_id() const;
  public:
  void clear_game_server_account_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 game_server_account_id() const;
  void set_game_server_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_game_server_account_id() const;
  void _internal_set_game_server_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 game_server_standing = 3;
  bool has_game_server_standing() const;
  private:
  bool _internal_has_game_server_standing() const;
  public:
  void clear_game_server_standing();
  ::PROTOBUF_NAMESPACE_ID::int32 game_server_standing() const;
  void set_game_server_standing(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_game_server_standing() const;
  void _internal_set_game_server_standing(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 game_server_standing_trend = 4;
  bool has_game_server_standing_trend() const;
  private:
  bool _internal_has_game_server_standing_trend() const;
  public:
  void clear_game_server_standing_trend();
  ::PROTOBUF_NAMESPACE_ID::int32 game_server_standing_trend() const;
  void set_game_server_standing_trend(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_game_server_standing_trend() const;
  void _internal_set_game_server_standing_trend(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGC_GameServer_ListResponse.GameServerIdentity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr game_server_identity_token_;
  ::PROTOBUF_NAMESPACE_ID::uint32 game_server_account_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 game_server_standing_;
  ::PROTOBUF_NAMESPACE_ID::int32 game_server_standing_trend_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGC_GameServer_ListResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGC_GameServer_ListResponse) */ {
 public:
  inline CMsgGC_GameServer_ListResponse() : CMsgGC_GameServer_ListResponse(nullptr) {}
  ~CMsgGC_GameServer_ListResponse() override;
  explicit constexpr CMsgGC_GameServer_ListResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGC_GameServer_ListResponse(const CMsgGC_GameServer_ListResponse& from);
  CMsgGC_GameServer_ListResponse(CMsgGC_GameServer_ListResponse&& from) noexcept
    : CMsgGC_GameServer_ListResponse() {
    *this = ::std::move(from);
  }

  inline CMsgGC_GameServer_ListResponse& operator=(const CMsgGC_GameServer_ListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGC_GameServer_ListResponse& operator=(CMsgGC_GameServer_ListResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGC_GameServer_ListResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGC_GameServer_ListResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgGC_GameServer_ListResponse*>(
               &_CMsgGC_GameServer_ListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(CMsgGC_GameServer_ListResponse& a, CMsgGC_GameServer_ListResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGC_GameServer_ListResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGC_GameServer_ListResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGC_GameServer_ListResponse* New() const final {
    return new CMsgGC_GameServer_ListResponse();
  }

  CMsgGC_GameServer_ListResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGC_GameServer_ListResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgGC_GameServer_ListResponse& from);
  void MergeFrom(const CMsgGC_GameServer_ListResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGC_GameServer_ListResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGC_GameServer_ListResponse";
  }
  protected:
  explicit CMsgGC_GameServer_ListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgGC_GameServer_ListResponse_GameServerIdentity GameServerIdentity;

  // accessors -------------------------------------------------------

  enum : int {
    kOwnedGameServersFieldNumber = 1,
  };
  // repeated .CMsgGC_GameServer_ListResponse.GameServerIdentity owned_game_servers = 1;
  int owned_game_servers_size() const;
  private:
  int _internal_owned_game_servers_size() const;
  public:
  void clear_owned_game_servers();
  ::CMsgGC_GameServer_ListResponse_GameServerIdentity* mutable_owned_game_servers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGC_GameServer_ListResponse_GameServerIdentity >*
      mutable_owned_game_servers();
  private:
  const ::CMsgGC_GameServer_ListResponse_GameServerIdentity& _internal_owned_game_servers(int index) const;
  ::CMsgGC_GameServer_ListResponse_GameServerIdentity* _internal_add_owned_game_servers();
  public:
  const ::CMsgGC_GameServer_ListResponse_GameServerIdentity& owned_game_servers(int index) const;
  ::CMsgGC_GameServer_ListResponse_GameServerIdentity* add_owned_game_servers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGC_GameServer_ListResponse_GameServerIdentity >&
      owned_game_servers() const;

  // @@protoc_insertion_point(class_scope:CMsgGC_GameServer_ListResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGC_GameServer_ListResponse_GameServerIdentity > owned_game_servers_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGC_GameServer_ResetIdentity final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGC_GameServer_ResetIdentity) */ {
 public:
  inline CMsgGC_GameServer_ResetIdentity() : CMsgGC_GameServer_ResetIdentity(nullptr) {}
  ~CMsgGC_GameServer_ResetIdentity() override;
  explicit constexpr CMsgGC_GameServer_ResetIdentity(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGC_GameServer_ResetIdentity(const CMsgGC_GameServer_ResetIdentity& from);
  CMsgGC_GameServer_ResetIdentity(CMsgGC_GameServer_ResetIdentity&& from) noexcept
    : CMsgGC_GameServer_ResetIdentity() {
    *this = ::std::move(from);
  }

  inline CMsgGC_GameServer_ResetIdentity& operator=(const CMsgGC_GameServer_ResetIdentity& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGC_GameServer_ResetIdentity& operator=(CMsgGC_GameServer_ResetIdentity&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGC_GameServer_ResetIdentity& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGC_GameServer_ResetIdentity* internal_default_instance() {
    return reinterpret_cast<const CMsgGC_GameServer_ResetIdentity*>(
               &_CMsgGC_GameServer_ResetIdentity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(CMsgGC_GameServer_ResetIdentity& a, CMsgGC_GameServer_ResetIdentity& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGC_GameServer_ResetIdentity* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGC_GameServer_ResetIdentity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGC_GameServer_ResetIdentity* New() const final {
    return new CMsgGC_GameServer_ResetIdentity();
  }

  CMsgGC_GameServer_ResetIdentity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGC_GameServer_ResetIdentity>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgGC_GameServer_ResetIdentity& from);
  void MergeFrom(const CMsgGC_GameServer_ResetIdentity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGC_GameServer_ResetIdentity* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGC_GameServer_ResetIdentity";
  }
  protected:
  explicit CMsgGC_GameServer_ResetIdentity(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameServerAccountIdFieldNumber = 1,
  };
  // optional uint32 game_server_account_id = 1;
  bool has_game_server_account_id() const;
  private:
  bool _internal_has_game_server_account_id() const;
  public:
  void clear_game_server_account_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 game_server_account_id() const;
  void set_game_server_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_game_server_account_id() const;
  void _internal_set_game_server_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGC_GameServer_ResetIdentity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 game_server_account_id_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGC_GameServer_ResetIdentityResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGC_GameServer_ResetIdentityResponse) */ {
 public:
  inline CMsgGC_GameServer_ResetIdentityResponse() : CMsgGC_GameServer_ResetIdentityResponse(nullptr) {}
  ~CMsgGC_GameServer_ResetIdentityResponse() override;
  explicit constexpr CMsgGC_GameServer_ResetIdentityResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGC_GameServer_ResetIdentityResponse(const CMsgGC_GameServer_ResetIdentityResponse& from);
  CMsgGC_GameServer_ResetIdentityResponse(CMsgGC_GameServer_ResetIdentityResponse&& from) noexcept
    : CMsgGC_GameServer_ResetIdentityResponse() {
    *this = ::std::move(from);
  }

  inline CMsgGC_GameServer_ResetIdentityResponse& operator=(const CMsgGC_GameServer_ResetIdentityResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGC_GameServer_ResetIdentityResponse& operator=(CMsgGC_GameServer_ResetIdentityResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGC_GameServer_ResetIdentityResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGC_GameServer_ResetIdentityResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgGC_GameServer_ResetIdentityResponse*>(
               &_CMsgGC_GameServer_ResetIdentityResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(CMsgGC_GameServer_ResetIdentityResponse& a, CMsgGC_GameServer_ResetIdentityResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGC_GameServer_ResetIdentityResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGC_GameServer_ResetIdentityResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGC_GameServer_ResetIdentityResponse* New() const final {
    return new CMsgGC_GameServer_ResetIdentityResponse();
  }

  CMsgGC_GameServer_ResetIdentityResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGC_GameServer_ResetIdentityResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgGC_GameServer_ResetIdentityResponse& from);
  void MergeFrom(const CMsgGC_GameServer_ResetIdentityResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGC_GameServer_ResetIdentityResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGC_GameServer_ResetIdentityResponse";
  }
  protected:
  explicit CMsgGC_GameServer_ResetIdentityResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameServerIdentityTokenFieldNumber = 3,
    kGameServerIdentityTokenResetFieldNumber = 1,
    kGameServerAccountIdFieldNumber = 2,
  };
  // optional string game_server_identity_token = 3;
  bool has_game_server_identity_token() const;
  private:
  bool _internal_has_game_server_identity_token() const;
  public:
  void clear_game_server_identity_token();
  const std::string& game_server_identity_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_game_server_identity_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_game_server_identity_token();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_game_server_identity_token();
  void set_allocated_game_server_identity_token(std::string* game_server_identity_token);
  private:
  const std::string& _internal_game_server_identity_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_game_server_identity_token(const std::string& value);
  std::string* _internal_mutable_game_server_identity_token();
  public:

  // optional bool game_server_identity_token_reset = 1;
  bool has_game_server_identity_token_reset() const;
  private:
  bool _internal_has_game_server_identity_token_reset() const;
  public:
  void clear_game_server_identity_token_reset();
  bool game_server_identity_token_reset() const;
  void set_game_server_identity_token_reset(bool value);
  private:
  bool _internal_game_server_identity_token_reset() const;
  void _internal_set_game_server_identity_token_reset(bool value);
  public:

  // optional uint32 game_server_account_id = 2;
  bool has_game_server_account_id() const;
  private:
  bool _internal_has_game_server_account_id() const;
  public:
  void clear_game_server_account_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 game_server_account_id() const;
  void set_game_server_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_game_server_account_id() const;
  void _internal_set_game_server_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGC_GameServer_ResetIdentityResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr game_server_identity_token_;
  bool game_server_identity_token_reset_;
  ::PROTOBUF_NAMESPACE_ID::uint32 game_server_account_id_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGC_GameServer_AckPolicy final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGC_GameServer_AckPolicy) */ {
 public:
  inline CMsgGC_GameServer_AckPolicy() : CMsgGC_GameServer_AckPolicy(nullptr) {}
  ~CMsgGC_GameServer_AckPolicy() override;
  explicit constexpr CMsgGC_GameServer_AckPolicy(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGC_GameServer_AckPolicy(const CMsgGC_GameServer_AckPolicy& from);
  CMsgGC_GameServer_AckPolicy(CMsgGC_GameServer_AckPolicy&& from) noexcept
    : CMsgGC_GameServer_AckPolicy() {
    *this = ::std::move(from);
  }

  inline CMsgGC_GameServer_AckPolicy& operator=(const CMsgGC_GameServer_AckPolicy& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGC_GameServer_AckPolicy& operator=(CMsgGC_GameServer_AckPolicy&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGC_GameServer_AckPolicy& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGC_GameServer_AckPolicy* internal_default_instance() {
    return reinterpret_cast<const CMsgGC_GameServer_AckPolicy*>(
               &_CMsgGC_GameServer_AckPolicy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(CMsgGC_GameServer_AckPolicy& a, CMsgGC_GameServer_AckPolicy& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGC_GameServer_AckPolicy* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGC_GameServer_AckPolicy* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGC_GameServer_AckPolicy* New() const final {
    return new CMsgGC_GameServer_AckPolicy();
  }

  CMsgGC_GameServer_AckPolicy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGC_GameServer_AckPolicy>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgGC_GameServer_AckPolicy& from);
  void MergeFrom(const CMsgGC_GameServer_AckPolicy& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGC_GameServer_AckPolicy* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGC_GameServer_AckPolicy";
  }
  protected:
  explicit CMsgGC_GameServer_AckPolicy(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgGC_GameServer_AckPolicy)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGC_GameServer_AckPolicyResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGC_GameServer_AckPolicyResponse) */ {
 public:
  inline CMsgGC_GameServer_AckPolicyResponse() : CMsgGC_GameServer_AckPolicyResponse(nullptr) {}
  ~CMsgGC_GameServer_AckPolicyResponse() override;
  explicit constexpr CMsgGC_GameServer_AckPolicyResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGC_GameServer_AckPolicyResponse(const CMsgGC_GameServer_AckPolicyResponse& from);
  CMsgGC_GameServer_AckPolicyResponse(CMsgGC_GameServer_AckPolicyResponse&& from) noexcept
    : CMsgGC_GameServer_AckPolicyResponse() {
    *this = ::std::move(from);
  }

  inline CMsgGC_GameServer_AckPolicyResponse& operator=(const CMsgGC_GameServer_AckPolicyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGC_GameServer_AckPolicyResponse& operator=(CMsgGC_GameServer_AckPolicyResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGC_GameServer_AckPolicyResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGC_GameServer_AckPolicyResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgGC_GameServer_AckPolicyResponse*>(
               &_CMsgGC_GameServer_AckPolicyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(CMsgGC_GameServer_AckPolicyResponse& a, CMsgGC_GameServer_AckPolicyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGC_GameServer_AckPolicyResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGC_GameServer_AckPolicyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGC_GameServer_AckPolicyResponse* New() const final {
    return new CMsgGC_GameServer_AckPolicyResponse();
  }

  CMsgGC_GameServer_AckPolicyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGC_GameServer_AckPolicyResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgGC_GameServer_AckPolicyResponse& from);
  void MergeFrom(const CMsgGC_GameServer_AckPolicyResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGC_GameServer_AckPolicyResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGC_GameServer_AckPolicyResponse";
  }
  protected:
  explicit CMsgGC_GameServer_AckPolicyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // optional string message = 2;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // optional uint32 result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::uint32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGC_GameServer_AckPolicyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::uint32 result_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGC_Client_UseServerModificationItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGC_Client_UseServerModificationItem) */ {
 public:
  inline CMsgGC_Client_UseServerModificationItem() : CMsgGC_Client_UseServerModificationItem(nullptr) {}
  ~CMsgGC_Client_UseServerModificationItem() override;
  explicit constexpr CMsgGC_Client_UseServerModificationItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGC_Client_UseServerModificationItem(const CMsgGC_Client_UseServerModificationItem& from);
  CMsgGC_Client_UseServerModificationItem(CMsgGC_Client_UseServerModificationItem&& from) noexcept
    : CMsgGC_Client_UseServerModificationItem() {
    *this = ::std::move(from);
  }

  inline CMsgGC_Client_UseServerModificationItem& operator=(const CMsgGC_Client_UseServerModificationItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGC_Client_UseServerModificationItem& operator=(CMsgGC_Client_UseServerModificationItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGC_Client_UseServerModificationItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGC_Client_UseServerModificationItem* internal_default_instance() {
    return reinterpret_cast<const CMsgGC_Client_UseServerModificationItem*>(
               &_CMsgGC_Client_UseServerModificationItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(CMsgGC_Client_UseServerModificationItem& a, CMsgGC_Client_UseServerModificationItem& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGC_Client_UseServerModificationItem* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGC_Client_UseServerModificationItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGC_Client_UseServerModificationItem* New() const final {
    return new CMsgGC_Client_UseServerModificationItem();
  }

  CMsgGC_Client_UseServerModificationItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGC_Client_UseServerModificationItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgGC_Client_UseServerModificationItem& from);
  void MergeFrom(const CMsgGC_Client_UseServerModificationItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGC_Client_UseServerModificationItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGC_Client_UseServerModificationItem";
  }
  protected:
  explicit CMsgGC_Client_UseServerModificationItem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemIdFieldNumber = 1,
  };
  // optional uint64 item_id = 1;
  bool has_item_id() const;
  private:
  bool _internal_has_item_id() const;
  public:
  void clear_item_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 item_id() const;
  void set_item_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_item_id() const;
  void _internal_set_item_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGC_Client_UseServerModificationItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 item_id_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGC_Client_UseServerModificationItem_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGC_Client_UseServerModificationItem_Response) */ {
 public:
  inline CMsgGC_Client_UseServerModificationItem_Response() : CMsgGC_Client_UseServerModificationItem_Response(nullptr) {}
  ~CMsgGC_Client_UseServerModificationItem_Response() override;
  explicit constexpr CMsgGC_Client_UseServerModificationItem_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGC_Client_UseServerModificationItem_Response(const CMsgGC_Client_UseServerModificationItem_Response& from);
  CMsgGC_Client_UseServerModificationItem_Response(CMsgGC_Client_UseServerModificationItem_Response&& from) noexcept
    : CMsgGC_Client_UseServerModificationItem_Response() {
    *this = ::std::move(from);
  }

  inline CMsgGC_Client_UseServerModificationItem_Response& operator=(const CMsgGC_Client_UseServerModificationItem_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGC_Client_UseServerModificationItem_Response& operator=(CMsgGC_Client_UseServerModificationItem_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGC_Client_UseServerModificationItem_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGC_Client_UseServerModificationItem_Response* internal_default_instance() {
    return reinterpret_cast<const CMsgGC_Client_UseServerModificationItem_Response*>(
               &_CMsgGC_Client_UseServerModificationItem_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(CMsgGC_Client_UseServerModificationItem_Response& a, CMsgGC_Client_UseServerModificationItem_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGC_Client_UseServerModificationItem_Response* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGC_Client_UseServerModificationItem_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGC_Client_UseServerModificationItem_Response* New() const final {
    return new CMsgGC_Client_UseServerModificationItem_Response();
  }

  CMsgGC_Client_UseServerModificationItem_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGC_Client_UseServerModificationItem_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgGC_Client_UseServerModificationItem_Response& from);
  void MergeFrom(const CMsgGC_Client_UseServerModificationItem_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGC_Client_UseServerModificationItem_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGC_Client_UseServerModificationItem_Response";
  }
  protected:
  explicit CMsgGC_Client_UseServerModificationItem_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse EServerModificationItemResponse;
  static constexpr EServerModificationItemResponse kServerModificationItemResponse_AlreadyInUse =
    CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse_kServerModificationItemResponse_AlreadyInUse;
  static constexpr EServerModificationItemResponse kServerModificationItemResponse_NotOnAuthenticatedServer =
    CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse_kServerModificationItemResponse_NotOnAuthenticatedServer;
  static constexpr EServerModificationItemResponse kServerModificationItemResponse_ServerReject =
    CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse_kServerModificationItemResponse_ServerReject;
  static constexpr EServerModificationItemResponse kServerModificationItemResponse_InternalError =
    CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse_kServerModificationItemResponse_InternalError;
  static constexpr EServerModificationItemResponse kServerModificationItemResponse_EventAlreadyActive =
    CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse_kServerModificationItemResponse_EventAlreadyActive;
  static inline bool EServerModificationItemResponse_IsValid(int value) {
    return CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse_IsValid(value);
  }
  static constexpr EServerModificationItemResponse EServerModificationItemResponse_MIN =
    CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse_EServerModificationItemResponse_MIN;
  static constexpr EServerModificationItemResponse EServerModificationItemResponse_MAX =
    CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse_EServerModificationItemResponse_MAX;
  static constexpr int EServerModificationItemResponse_ARRAYSIZE =
    CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse_EServerModificationItemResponse_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EServerModificationItemResponse_descriptor() {
    return CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse_descriptor();
  }
  template<typename T>
  static inline const std::string& EServerModificationItemResponse_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EServerModificationItemResponse>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EServerModificationItemResponse_Name.");
    return CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse_Name(enum_t_value);
  }
  static inline bool EServerModificationItemResponse_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EServerModificationItemResponse* value) {
    return CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResponseCodeFieldNumber = 1,
  };
  // optional .CMsgGC_Client_UseServerModificationItem_Response.EServerModificationItemResponse response_code = 1 [default = kServerModificationItemResponse_AlreadyInUse];
  bool has_response_code() const;
  private:
  bool _internal_has_response_code() const;
  public:
  void clear_response_code();
  ::CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse response_code() const;
  void set_response_code(::CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse value);
  private:
  ::CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse _internal_response_code() const;
  void _internal_set_response_code(::CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGC_Client_UseServerModificationItem_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int response_code_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGC_GameServer_UseServerModificationItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGC_GameServer_UseServerModificationItem) */ {
 public:
  inline CMsgGC_GameServer_UseServerModificationItem() : CMsgGC_GameServer_UseServerModificationItem(nullptr) {}
  ~CMsgGC_GameServer_UseServerModificationItem() override;
  explicit constexpr CMsgGC_GameServer_UseServerModificationItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGC_GameServer_UseServerModificationItem(const CMsgGC_GameServer_UseServerModificationItem& from);
  CMsgGC_GameServer_UseServerModificationItem(CMsgGC_GameServer_UseServerModificationItem&& from) noexcept
    : CMsgGC_GameServer_UseServerModificationItem() {
    *this = ::std::move(from);
  }

  inline CMsgGC_GameServer_UseServerModificationItem& operator=(const CMsgGC_GameServer_UseServerModificationItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGC_GameServer_UseServerModificationItem& operator=(CMsgGC_GameServer_UseServerModificationItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGC_GameServer_UseServerModificationItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGC_GameServer_UseServerModificationItem* internal_default_instance() {
    return reinterpret_cast<const CMsgGC_GameServer_UseServerModificationItem*>(
               &_CMsgGC_GameServer_UseServerModificationItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(CMsgGC_GameServer_UseServerModificationItem& a, CMsgGC_GameServer_UseServerModificationItem& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGC_GameServer_UseServerModificationItem* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGC_GameServer_UseServerModificationItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGC_GameServer_UseServerModificationItem* New() const final {
    return new CMsgGC_GameServer_UseServerModificationItem();
  }

  CMsgGC_GameServer_UseServerModificationItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGC_GameServer_UseServerModificationItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgGC_GameServer_UseServerModificationItem& from);
  void MergeFrom(const CMsgGC_GameServer_UseServerModificationItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGC_GameServer_UseServerModificationItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGC_GameServer_UseServerModificationItem";
  }
  protected:
  explicit CMsgGC_GameServer_UseServerModificationItem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModificationTypeFieldNumber = 1,
  };
  // optional .EServerModificationItemType modification_type = 1 [default = kGameServerModificationItem_Halloween];
  bool has_modification_type() const;
  private:
  bool _internal_has_modification_type() const;
  public:
  void clear_modification_type();
  ::EServerModificationItemType modification_type() const;
  void set_modification_type(::EServerModificationItemType value);
  private:
  ::EServerModificationItemType _internal_modification_type() const;
  void _internal_set_modification_type(::EServerModificationItemType value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGC_GameServer_UseServerModificationItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int modification_type_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGC_GameServer_UseServerModificationItem_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGC_GameServer_UseServerModificationItem_Response) */ {
 public:
  inline CMsgGC_GameServer_UseServerModificationItem_Response() : CMsgGC_GameServer_UseServerModificationItem_Response(nullptr) {}
  ~CMsgGC_GameServer_UseServerModificationItem_Response() override;
  explicit constexpr CMsgGC_GameServer_UseServerModificationItem_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGC_GameServer_UseServerModificationItem_Response(const CMsgGC_GameServer_UseServerModificationItem_Response& from);
  CMsgGC_GameServer_UseServerModificationItem_Response(CMsgGC_GameServer_UseServerModificationItem_Response&& from) noexcept
    : CMsgGC_GameServer_UseServerModificationItem_Response() {
    *this = ::std::move(from);
  }

  inline CMsgGC_GameServer_UseServerModificationItem_Response& operator=(const CMsgGC_GameServer_UseServerModificationItem_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGC_GameServer_UseServerModificationItem_Response& operator=(CMsgGC_GameServer_UseServerModificationItem_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGC_GameServer_UseServerModificationItem_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGC_GameServer_UseServerModificationItem_Response* internal_default_instance() {
    return reinterpret_cast<const CMsgGC_GameServer_UseServerModificationItem_Response*>(
               &_CMsgGC_GameServer_UseServerModificationItem_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(CMsgGC_GameServer_UseServerModificationItem_Response& a, CMsgGC_GameServer_UseServerModificationItem_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGC_GameServer_UseServerModificationItem_Response* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGC_GameServer_UseServerModificationItem_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGC_GameServer_UseServerModificationItem_Response* New() const final {
    return new CMsgGC_GameServer_UseServerModificationItem_Response();
  }

  CMsgGC_GameServer_UseServerModificationItem_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGC_GameServer_UseServerModificationItem_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgGC_GameServer_UseServerModificationItem_Response& from);
  void MergeFrom(const CMsgGC_GameServer_UseServerModificationItem_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGC_GameServer_UseServerModificationItem_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGC_GameServer_UseServerModificationItem_Response";
  }
  protected:
  explicit CMsgGC_GameServer_UseServerModificationItem_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgGC_GameServer_UseServerModificationItem_Response_EServerModificationItemServerResponse EServerModificationItemServerResponse;
  static constexpr EServerModificationItemServerResponse kServerModificationItemServerResponse_Accepted =
    CMsgGC_GameServer_UseServerModificationItem_Response_EServerModificationItemServerResponse_kServerModificationItemServerResponse_Accepted;
  static constexpr EServerModificationItemServerResponse kServerModificationItemServerResponse_NoVoteCalled =
    CMsgGC_GameServer_UseServerModificationItem_Response_EServerModificationItemServerResponse_kServerModificationItemServerResponse_NoVoteCalled;
  static constexpr EServerModificationItemServerResponse kServerModificationItemServerResponse_VoteFailed =
    CMsgGC_GameServer_UseServerModificationItem_Response_EServerModificationItemServerResponse_kServerModificationItemServerResponse_VoteFailed;
  static inline bool EServerModificationItemServerResponse_IsValid(int value) {
    return CMsgGC_GameServer_UseServerModificationItem_Response_EServerModificationItemServerResponse_IsValid(value);
  }
  static constexpr EServerModificationItemServerResponse EServerModificationItemServerResponse_MIN =
    CMsgGC_GameServer_UseServerModificationItem_Response_EServerModificationItemServerResponse_EServerModificationItemServerResponse_MIN;
  static constexpr EServerModificationItemServerResponse EServerModificationItemServerResponse_MAX =
    CMsgGC_GameServer_UseServerModificationItem_Response_EServerModificationItemServerResponse_EServerModificationItemServerResponse_MAX;
  static constexpr int EServerModificationItemServerResponse_ARRAYSIZE =
    CMsgGC_GameServer_UseServerModificationItem_Response_EServerModificationItemServerResponse_EServerModificationItemServerResponse_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EServerModificationItemServerResponse_descriptor() {
    return CMsgGC_GameServer_UseServerModificationItem_Response_EServerModificationItemServerResponse_descriptor();
  }
  template<typename T>
  static inline const std::string& EServerModificationItemServerResponse_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EServerModificationItemServerResponse>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EServerModificationItemServerResponse_Name.");
    return CMsgGC_GameServer_UseServerModificationItem_Response_EServerModificationItemServerResponse_Name(enum_t_value);
  }
  static inline bool EServerModificationItemServerResponse_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EServerModificationItemServerResponse* value) {
    return CMsgGC_GameServer_UseServerModificationItem_Response_EServerModificationItemServerResponse_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kModificationTypeFieldNumber = 1,
    kServerResponseCodeFieldNumber = 2,
  };
  // optional .EServerModificationItemType modification_type = 1 [default = kGameServerModificationItem_Halloween];
  bool has_modification_type() const;
  private:
  bool _internal_has_modification_type() const;
  public:
  void clear_modification_type();
  ::EServerModificationItemType modification_type() const;
  void set_modification_type(::EServerModificationItemType value);
  private:
  ::EServerModificationItemType _internal_modification_type() const;
  void _internal_set_modification_type(::EServerModificationItemType value);
  public:

  // optional .CMsgGC_GameServer_UseServerModificationItem_Response.EServerModificationItemServerResponse server_response_code = 2 [default = kServerModificationItemServerResponse_Accepted];
  bool has_server_response_code() const;
  private:
  bool _internal_has_server_response_code() const;
  public:
  void clear_server_response_code();
  ::CMsgGC_GameServer_UseServerModificationItem_Response_EServerModificationItemServerResponse server_response_code() const;
  void set_server_response_code(::CMsgGC_GameServer_UseServerModificationItem_Response_EServerModificationItemServerResponse value);
  private:
  ::CMsgGC_GameServer_UseServerModificationItem_Response_EServerModificationItemServerResponse _internal_server_response_code() const;
  void _internal_set_server_response_code(::CMsgGC_GameServer_UseServerModificationItem_Response_EServerModificationItemServerResponse value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGC_GameServer_UseServerModificationItem_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int modification_type_;
  int server_response_code_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGC_GameServer_ServerModificationItemExpired final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGC_GameServer_ServerModificationItemExpired) */ {
 public:
  inline CMsgGC_GameServer_ServerModificationItemExpired() : CMsgGC_GameServer_ServerModificationItemExpired(nullptr) {}
  ~CMsgGC_GameServer_ServerModificationItemExpired() override;
  explicit constexpr CMsgGC_GameServer_ServerModificationItemExpired(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGC_GameServer_ServerModificationItemExpired(const CMsgGC_GameServer_ServerModificationItemExpired& from);
  CMsgGC_GameServer_ServerModificationItemExpired(CMsgGC_GameServer_ServerModificationItemExpired&& from) noexcept
    : CMsgGC_GameServer_ServerModificationItemExpired() {
    *this = ::std::move(from);
  }

  inline CMsgGC_GameServer_ServerModificationItemExpired& operator=(const CMsgGC_GameServer_ServerModificationItemExpired& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGC_GameServer_ServerModificationItemExpired& operator=(CMsgGC_GameServer_ServerModificationItemExpired&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGC_GameServer_ServerModificationItemExpired& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGC_GameServer_ServerModificationItemExpired* internal_default_instance() {
    return reinterpret_cast<const CMsgGC_GameServer_ServerModificationItemExpired*>(
               &_CMsgGC_GameServer_ServerModificationItemExpired_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(CMsgGC_GameServer_ServerModificationItemExpired& a, CMsgGC_GameServer_ServerModificationItemExpired& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGC_GameServer_ServerModificationItemExpired* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGC_GameServer_ServerModificationItemExpired* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGC_GameServer_ServerModificationItemExpired* New() const final {
    return new CMsgGC_GameServer_ServerModificationItemExpired();
  }

  CMsgGC_GameServer_ServerModificationItemExpired* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGC_GameServer_ServerModificationItemExpired>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgGC_GameServer_ServerModificationItemExpired& from);
  void MergeFrom(const CMsgGC_GameServer_ServerModificationItemExpired& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGC_GameServer_ServerModificationItemExpired* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGC_GameServer_ServerModificationItemExpired";
  }
  protected:
  explicit CMsgGC_GameServer_ServerModificationItemExpired(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModificationTypeFieldNumber = 1,
  };
  // optional .EServerModificationItemType modification_type = 1 [default = kGameServerModificationItem_Halloween];
  bool has_modification_type() const;
  private:
  bool _internal_has_modification_type() const;
  public:
  void clear_modification_type();
  ::EServerModificationItemType modification_type() const;
  void set_modification_type(::EServerModificationItemType value);
  private:
  ::EServerModificationItemType _internal_modification_type() const;
  void _internal_set_modification_type(::EServerModificationItemType value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGC_GameServer_ServerModificationItemExpired)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int modification_type_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGC_GameServer_ServerModificationItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGC_GameServer_ServerModificationItem) */ {
 public:
  inline CMsgGC_GameServer_ServerModificationItem() : CMsgGC_GameServer_ServerModificationItem(nullptr) {}
  ~CMsgGC_GameServer_ServerModificationItem() override;
  explicit constexpr CMsgGC_GameServer_ServerModificationItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGC_GameServer_ServerModificationItem(const CMsgGC_GameServer_ServerModificationItem& from);
  CMsgGC_GameServer_ServerModificationItem(CMsgGC_GameServer_ServerModificationItem&& from) noexcept
    : CMsgGC_GameServer_ServerModificationItem() {
    *this = ::std::move(from);
  }

  inline CMsgGC_GameServer_ServerModificationItem& operator=(const CMsgGC_GameServer_ServerModificationItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGC_GameServer_ServerModificationItem& operator=(CMsgGC_GameServer_ServerModificationItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGC_GameServer_ServerModificationItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGC_GameServer_ServerModificationItem* internal_default_instance() {
    return reinterpret_cast<const CMsgGC_GameServer_ServerModificationItem*>(
               &_CMsgGC_GameServer_ServerModificationItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(CMsgGC_GameServer_ServerModificationItem& a, CMsgGC_GameServer_ServerModificationItem& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGC_GameServer_ServerModificationItem* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGC_GameServer_ServerModificationItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGC_GameServer_ServerModificationItem* New() const final {
    return new CMsgGC_GameServer_ServerModificationItem();
  }

  CMsgGC_GameServer_ServerModificationItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGC_GameServer_ServerModificationItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgGC_GameServer_ServerModificationItem& from);
  void MergeFrom(const CMsgGC_GameServer_ServerModificationItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGC_GameServer_ServerModificationItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGC_GameServer_ServerModificationItem";
  }
  protected:
  explicit CMsgGC_GameServer_ServerModificationItem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActiveFieldNumber = 2,
    kModificationTypeFieldNumber = 1,
  };
  // optional bool active = 2;
  bool has_active() const;
  private:
  bool _internal_has_active() const;
  public:
  void clear_active();
  bool active() const;
  void set_active(bool value);
  private:
  bool _internal_active() const;
  void _internal_set_active(bool value);
  public:

  // optional .EServerModificationItemType modification_type = 1 [default = kGameServerModificationItem_Halloween];
  bool has_modification_type() const;
  private:
  bool _internal_has_modification_type() const;
  public:
  void clear_modification_type();
  ::EServerModificationItemType modification_type() const;
  void set_modification_type(::EServerModificationItemType value);
  private:
  ::EServerModificationItemType _internal_modification_type() const;
  void _internal_set_modification_type(::EServerModificationItemType value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGC_GameServer_ServerModificationItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool active_;
  int modification_type_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGC_Halloween_ReservedItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGC_Halloween_ReservedItem) */ {
 public:
  inline CMsgGC_Halloween_ReservedItem() : CMsgGC_Halloween_ReservedItem(nullptr) {}
  ~CMsgGC_Halloween_ReservedItem() override;
  explicit constexpr CMsgGC_Halloween_ReservedItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGC_Halloween_ReservedItem(const CMsgGC_Halloween_ReservedItem& from);
  CMsgGC_Halloween_ReservedItem(CMsgGC_Halloween_ReservedItem&& from) noexcept
    : CMsgGC_Halloween_ReservedItem() {
    *this = ::std::move(from);
  }

  inline CMsgGC_Halloween_ReservedItem& operator=(const CMsgGC_Halloween_ReservedItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGC_Halloween_ReservedItem& operator=(CMsgGC_Halloween_ReservedItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGC_Halloween_ReservedItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGC_Halloween_ReservedItem* internal_default_instance() {
    return reinterpret_cast<const CMsgGC_Halloween_ReservedItem*>(
               &_CMsgGC_Halloween_ReservedItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(CMsgGC_Halloween_ReservedItem& a, CMsgGC_Halloween_ReservedItem& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGC_Halloween_ReservedItem* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGC_Halloween_ReservedItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGC_Halloween_ReservedItem* New() const final {
    return new CMsgGC_Halloween_ReservedItem();
  }

  CMsgGC_Halloween_ReservedItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGC_Halloween_ReservedItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgGC_Halloween_ReservedItem& from);
  void MergeFrom(const CMsgGC_Halloween_ReservedItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGC_Halloween_ReservedItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGC_Halloween_ReservedItem";
  }
  protected:
  explicit CMsgGC_Halloween_ReservedItem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kSpawnMetaInfoFieldNumber = 7,
  };
  // repeated float x = 1;
  int x_size() const;
  private:
  int _internal_x_size() const;
  public:
  void clear_x();
  private:
  float _internal_x(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_x() const;
  void _internal_add_x(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_x();
  public:
  float x(int index) const;
  void set_x(int index, float value);
  void add_x(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      x() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_x();

  // repeated float y = 2;
  int y_size() const;
  private:
  int _internal_y_size() const;
  public:
  void clear_y();
  private:
  float _internal_y(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_y() const;
  void _internal_add_y(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_y();
  public:
  float y(int index) const;
  void set_y(int index, float value);
  void add_y(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      y() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_y();

  // repeated float z = 3;
  int z_size() const;
  private:
  int _internal_z_size() const;
  public:
  void clear_z();
  private:
  float _internal_z(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_z() const;
  void _internal_add_z(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_z();
  public:
  float z(int index) const;
  void set_z(int index, float value);
  void add_z(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      z() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_z();

  // optional uint32 spawn_meta_info = 7;
  bool has_spawn_meta_info() const;
  private:
  bool _internal_has_spawn_meta_info() const;
  public:
  void clear_spawn_meta_info();
  ::PROTOBUF_NAMESPACE_ID::uint32 spawn_meta_info() const;
  void set_spawn_meta_info(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_spawn_meta_info() const;
  void _internal_set_spawn_meta_info(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGC_Halloween_ReservedItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > x_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > y_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > z_;
  ::PROTOBUF_NAMESPACE_ID::uint32 spawn_meta_info_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGC_Halloween_GrantItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGC_Halloween_GrantItem) */ {
 public:
  inline CMsgGC_Halloween_GrantItem() : CMsgGC_Halloween_GrantItem(nullptr) {}
  ~CMsgGC_Halloween_GrantItem() override;
  explicit constexpr CMsgGC_Halloween_GrantItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGC_Halloween_GrantItem(const CMsgGC_Halloween_GrantItem& from);
  CMsgGC_Halloween_GrantItem(CMsgGC_Halloween_GrantItem&& from) noexcept
    : CMsgGC_Halloween_GrantItem() {
    *this = ::std::move(from);
  }

  inline CMsgGC_Halloween_GrantItem& operator=(const CMsgGC_Halloween_GrantItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGC_Halloween_GrantItem& operator=(CMsgGC_Halloween_GrantItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGC_Halloween_GrantItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGC_Halloween_GrantItem* internal_default_instance() {
    return reinterpret_cast<const CMsgGC_Halloween_GrantItem*>(
               &_CMsgGC_Halloween_GrantItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(CMsgGC_Halloween_GrantItem& a, CMsgGC_Halloween_GrantItem& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGC_Halloween_GrantItem* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGC_Halloween_GrantItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGC_Halloween_GrantItem* New() const final {
    return new CMsgGC_Halloween_GrantItem();
  }

  CMsgGC_Halloween_GrantItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGC_Halloween_GrantItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgGC_Halloween_GrantItem& from);
  void MergeFrom(const CMsgGC_Halloween_GrantItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGC_Halloween_GrantItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGC_Halloween_GrantItem";
  }
  protected:
  explicit CMsgGC_Halloween_GrantItem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecipientAccountIdFieldNumber = 1,
    kLevelIdFieldNumber = 2,
    kFlaggedFieldNumber = 3,
  };
  // optional uint32 recipient_account_id = 1;
  bool has_recipient_account_id() const;
  private:
  bool _internal_has_recipient_account_id() const;
  public:
  void clear_recipient_account_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 recipient_account_id() const;
  void set_recipient_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_recipient_account_id() const;
  void _internal_set_recipient_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 level_id = 2;
  bool has_level_id() const;
  private:
  bool _internal_has_level_id() const;
  public:
  void clear_level_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 level_id() const;
  void set_level_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_level_id() const;
  void _internal_set_level_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool flagged = 3;
  bool has_flagged() const;
  private:
  bool _internal_has_flagged() const;
  public:
  void clear_flagged();
  bool flagged() const;
  void set_flagged(bool value);
  private:
  bool _internal_flagged() const;
  void _internal_set_flagged(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGC_Halloween_GrantItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 recipient_account_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 level_id_;
  bool flagged_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGC_Halloween_GrantItemResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGC_Halloween_GrantItemResponse) */ {
 public:
  inline CMsgGC_Halloween_GrantItemResponse() : CMsgGC_Halloween_GrantItemResponse(nullptr) {}
  ~CMsgGC_Halloween_GrantItemResponse() override;
  explicit constexpr CMsgGC_Halloween_GrantItemResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGC_Halloween_GrantItemResponse(const CMsgGC_Halloween_GrantItemResponse& from);
  CMsgGC_Halloween_GrantItemResponse(CMsgGC_Halloween_GrantItemResponse&& from) noexcept
    : CMsgGC_Halloween_GrantItemResponse() {
    *this = ::std::move(from);
  }

  inline CMsgGC_Halloween_GrantItemResponse& operator=(const CMsgGC_Halloween_GrantItemResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGC_Halloween_GrantItemResponse& operator=(CMsgGC_Halloween_GrantItemResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGC_Halloween_GrantItemResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGC_Halloween_GrantItemResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgGC_Halloween_GrantItemResponse*>(
               &_CMsgGC_Halloween_GrantItemResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(CMsgGC_Halloween_GrantItemResponse& a, CMsgGC_Halloween_GrantItemResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGC_Halloween_GrantItemResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGC_Halloween_GrantItemResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGC_Halloween_GrantItemResponse* New() const final {
    return new CMsgGC_Halloween_GrantItemResponse();
  }

  CMsgGC_Halloween_GrantItemResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGC_Halloween_GrantItemResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgGC_Halloween_GrantItemResponse& from);
  void MergeFrom(const CMsgGC_Halloween_GrantItemResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGC_Halloween_GrantItemResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGC_Halloween_GrantItemResponse";
  }
  protected:
  explicit CMsgGC_Halloween_GrantItemResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecipientAccountIdFieldNumber = 1,
  };
  // optional uint32 recipient_account_id = 1;
  bool has_recipient_account_id() const;
  private:
  bool _internal_has_recipient_account_id() const;
  public:
  void clear_recipient_account_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 recipient_account_id() const;
  void set_recipient_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_recipient_account_id() const;
  void _internal_set_recipient_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGC_Halloween_GrantItemResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 recipient_account_id_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGC_Halloween_ItemClaimed final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGC_Halloween_ItemClaimed) */ {
 public:
  inline CMsgGC_Halloween_ItemClaimed() : CMsgGC_Halloween_ItemClaimed(nullptr) {}
  ~CMsgGC_Halloween_ItemClaimed() override;
  explicit constexpr CMsgGC_Halloween_ItemClaimed(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGC_Halloween_ItemClaimed(const CMsgGC_Halloween_ItemClaimed& from);
  CMsgGC_Halloween_ItemClaimed(CMsgGC_Halloween_ItemClaimed&& from) noexcept
    : CMsgGC_Halloween_ItemClaimed() {
    *this = ::std::move(from);
  }

  inline CMsgGC_Halloween_ItemClaimed& operator=(const CMsgGC_Halloween_ItemClaimed& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGC_Halloween_ItemClaimed& operator=(CMsgGC_Halloween_ItemClaimed&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGC_Halloween_ItemClaimed& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGC_Halloween_ItemClaimed* internal_default_instance() {
    return reinterpret_cast<const CMsgGC_Halloween_ItemClaimed*>(
               &_CMsgGC_Halloween_ItemClaimed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(CMsgGC_Halloween_ItemClaimed& a, CMsgGC_Halloween_ItemClaimed& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGC_Halloween_ItemClaimed* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGC_Halloween_ItemClaimed* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGC_Halloween_ItemClaimed* New() const final {
    return new CMsgGC_Halloween_ItemClaimed();
  }

  CMsgGC_Halloween_ItemClaimed* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGC_Halloween_ItemClaimed>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgGC_Halloween_ItemClaimed& from);
  void MergeFrom(const CMsgGC_Halloween_ItemClaimed& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGC_Halloween_ItemClaimed* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGC_Halloween_ItemClaimed";
  }
  protected:
  explicit CMsgGC_Halloween_ItemClaimed(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgGC_Halloween_ItemClaimed)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGC_PickupItemEligibility_Query final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGC_PickupItemEligibility_Query) */ {
 public:
  inline CMsgGC_PickupItemEligibility_Query() : CMsgGC_PickupItemEligibility_Query(nullptr) {}
  ~CMsgGC_PickupItemEligibility_Query() override;
  explicit constexpr CMsgGC_PickupItemEligibility_Query(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGC_PickupItemEligibility_Query(const CMsgGC_PickupItemEligibility_Query& from);
  CMsgGC_PickupItemEligibility_Query(CMsgGC_PickupItemEligibility_Query&& from) noexcept
    : CMsgGC_PickupItemEligibility_Query() {
    *this = ::std::move(from);
  }

  inline CMsgGC_PickupItemEligibility_Query& operator=(const CMsgGC_PickupItemEligibility_Query& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGC_PickupItemEligibility_Query& operator=(CMsgGC_PickupItemEligibility_Query&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGC_PickupItemEligibility_Query& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGC_PickupItemEligibility_Query* internal_default_instance() {
    return reinterpret_cast<const CMsgGC_PickupItemEligibility_Query*>(
               &_CMsgGC_PickupItemEligibility_Query_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(CMsgGC_PickupItemEligibility_Query& a, CMsgGC_PickupItemEligibility_Query& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGC_PickupItemEligibility_Query* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGC_PickupItemEligibility_Query* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGC_PickupItemEligibility_Query* New() const final {
    return new CMsgGC_PickupItemEligibility_Query();
  }

  CMsgGC_PickupItemEligibility_Query* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGC_PickupItemEligibility_Query>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgGC_PickupItemEligibility_Query& from);
  void MergeFrom(const CMsgGC_PickupItemEligibility_Query& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGC_PickupItemEligibility_Query* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGC_PickupItemEligibility_Query";
  }
  protected:
  explicit CMsgGC_PickupItemEligibility_Query(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
    kSecondsAgoFieldNumber = 2,
  };
  // optional uint32 account_id = 1;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id() const;
  void set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_account_id() const;
  void _internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 seconds_ago = 2;
  bool has_seconds_ago() const;
  private:
  bool _internal_has_seconds_ago() const;
  public:
  void clear_seconds_ago();
  ::PROTOBUF_NAMESPACE_ID::uint32 seconds_ago() const;
  void set_seconds_ago(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_seconds_ago() const;
  void _internal_set_seconds_ago(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGC_PickupItemEligibility_Query)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 seconds_ago_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGC_PickupItemEligibility_QueryResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGC_PickupItemEligibility_QueryResponse) */ {
 public:
  inline CMsgGC_PickupItemEligibility_QueryResponse() : CMsgGC_PickupItemEligibility_QueryResponse(nullptr) {}
  ~CMsgGC_PickupItemEligibility_QueryResponse() override;
  explicit constexpr CMsgGC_PickupItemEligibility_QueryResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGC_PickupItemEligibility_QueryResponse(const CMsgGC_PickupItemEligibility_QueryResponse& from);
  CMsgGC_PickupItemEligibility_QueryResponse(CMsgGC_PickupItemEligibility_QueryResponse&& from) noexcept
    : CMsgGC_PickupItemEligibility_QueryResponse() {
    *this = ::std::move(from);
  }

  inline CMsgGC_PickupItemEligibility_QueryResponse& operator=(const CMsgGC_PickupItemEligibility_QueryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGC_PickupItemEligibility_QueryResponse& operator=(CMsgGC_PickupItemEligibility_QueryResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGC_PickupItemEligibility_QueryResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGC_PickupItemEligibility_QueryResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgGC_PickupItemEligibility_QueryResponse*>(
               &_CMsgGC_PickupItemEligibility_QueryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(CMsgGC_PickupItemEligibility_QueryResponse& a, CMsgGC_PickupItemEligibility_QueryResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGC_PickupItemEligibility_QueryResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGC_PickupItemEligibility_QueryResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGC_PickupItemEligibility_QueryResponse* New() const final {
    return new CMsgGC_PickupItemEligibility_QueryResponse();
  }

  CMsgGC_PickupItemEligibility_QueryResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGC_PickupItemEligibility_QueryResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgGC_PickupItemEligibility_QueryResponse& from);
  void MergeFrom(const CMsgGC_PickupItemEligibility_QueryResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGC_PickupItemEligibility_QueryResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGC_PickupItemEligibility_QueryResponse";
  }
  protected:
  explicit CMsgGC_PickupItemEligibility_QueryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
    kWasEligibleFieldNumber = 2,
    kLevelIdFieldNumber = 3,
  };
  // optional uint32 account_id = 1;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id() const;
  void set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_account_id() const;
  void _internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool was_eligible = 2;
  bool has_was_eligible() const;
  private:
  bool _internal_has_was_eligible() const;
  public:
  void clear_was_eligible();
  bool was_eligible() const;
  void set_was_eligible(bool value);
  private:
  bool _internal_was_eligible() const;
  void _internal_set_was_eligible(bool value);
  public:

  // optional uint32 level_id = 3;
  bool has_level_id() const;
  private:
  bool _internal_has_level_id() const;
  public:
  void clear_level_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 level_id() const;
  void set_level_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_level_id() const;
  void _internal_set_level_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGC_PickupItemEligibility_QueryResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id_;
  bool was_eligible_;
  ::PROTOBUF_NAMESPACE_ID::uint32 level_id_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CSOTFPartyMember_Activity final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSOTFPartyMember.Activity) */ {
 public:
  inline CSOTFPartyMember_Activity() : CSOTFPartyMember_Activity(nullptr) {}
  ~CSOTFPartyMember_Activity() override;
  explicit constexpr CSOTFPartyMember_Activity(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSOTFPartyMember_Activity(const CSOTFPartyMember_Activity& from);
  CSOTFPartyMember_Activity(CSOTFPartyMember_Activity&& from) noexcept
    : CSOTFPartyMember_Activity() {
    *this = ::std::move(from);
  }

  inline CSOTFPartyMember_Activity& operator=(const CSOTFPartyMember_Activity& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSOTFPartyMember_Activity& operator=(CSOTFPartyMember_Activity&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSOTFPartyMember_Activity& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSOTFPartyMember_Activity* internal_default_instance() {
    return reinterpret_cast<const CSOTFPartyMember_Activity*>(
               &_CSOTFPartyMember_Activity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(CSOTFPartyMember_Activity& a, CSOTFPartyMember_Activity& b) {
    a.Swap(&b);
  }
  inline void Swap(CSOTFPartyMember_Activity* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSOTFPartyMember_Activity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSOTFPartyMember_Activity* New() const final {
    return new CSOTFPartyMember_Activity();
  }

  CSOTFPartyMember_Activity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSOTFPartyMember_Activity>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSOTFPartyMember_Activity& from);
  void MergeFrom(const CSOTFPartyMember_Activity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSOTFPartyMember_Activity* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSOTFPartyMember.Activity";
  }
  protected:
  explicit CSOTFPartyMember_Activity(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLobbyIdFieldNumber = 1,
    kMultiqueueBlockedFieldNumber = 3,
    kOnlineFieldNumber = 4,
    kClientVersionFieldNumber = 5,
    kLobbyMatchGroupFieldNumber = 2,
  };
  // optional fixed64 lobby_id = 1;
  bool has_lobby_id() const;
  private:
  bool _internal_has_lobby_id() const;
  public:
  void clear_lobby_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 lobby_id() const;
  void set_lobby_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_lobby_id() const;
  void _internal_set_lobby_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional bool multiqueue_blocked = 3;
  bool has_multiqueue_blocked() const;
  private:
  bool _internal_has_multiqueue_blocked() const;
  public:
  void clear_multiqueue_blocked();
  bool multiqueue_blocked() const;
  void set_multiqueue_blocked(bool value);
  private:
  bool _internal_multiqueue_blocked() const;
  void _internal_set_multiqueue_blocked(bool value);
  public:

  // optional bool online = 4;
  bool has_online() const;
  private:
  bool _internal_has_online() const;
  public:
  void clear_online();
  bool online() const;
  void set_online(bool value);
  private:
  bool _internal_online() const;
  void _internal_set_online(bool value);
  public:

  // optional uint32 client_version = 5;
  bool has_client_version() const;
  private:
  bool _internal_has_client_version() const;
  public:
  void clear_client_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 client_version() const;
  void set_client_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_client_version() const;
  void _internal_set_client_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .ETFMatchGroup lobby_match_group = 2 [default = k_eTFMatchGroup_Invalid];
  bool has_lobby_match_group() const;
  private:
  bool _internal_has_lobby_match_group() const;
  public:
  void clear_lobby_match_group();
  ::ETFMatchGroup lobby_match_group() const;
  void set_lobby_match_group(::ETFMatchGroup value);
  private:
  ::ETFMatchGroup _internal_lobby_match_group() const;
  void _internal_set_lobby_match_group(::ETFMatchGroup value);
  public:

  // @@protoc_insertion_point(class_scope:CSOTFPartyMember.Activity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 lobby_id_;
  bool multiqueue_blocked_;
  bool online_;
  ::PROTOBUF_NAMESPACE_ID::uint32 client_version_;
  int lobby_match_group_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CSOTFPartyMember final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSOTFPartyMember) */ {
 public:
  inline CSOTFPartyMember() : CSOTFPartyMember(nullptr) {}
  ~CSOTFPartyMember() override;
  explicit constexpr CSOTFPartyMember(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSOTFPartyMember(const CSOTFPartyMember& from);
  CSOTFPartyMember(CSOTFPartyMember&& from) noexcept
    : CSOTFPartyMember() {
    *this = ::std::move(from);
  }

  inline CSOTFPartyMember& operator=(const CSOTFPartyMember& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSOTFPartyMember& operator=(CSOTFPartyMember&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSOTFPartyMember& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSOTFPartyMember* internal_default_instance() {
    return reinterpret_cast<const CSOTFPartyMember*>(
               &_CSOTFPartyMember_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(CSOTFPartyMember& a, CSOTFPartyMember& b) {
    a.Swap(&b);
  }
  inline void Swap(CSOTFPartyMember* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSOTFPartyMember* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSOTFPartyMember* New() const final {
    return new CSOTFPartyMember();
  }

  CSOTFPartyMember* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSOTFPartyMember>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSOTFPartyMember& from);
  void MergeFrom(const CSOTFPartyMember& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSOTFPartyMember* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSOTFPartyMember";
  }
  protected:
  explicit CSOTFPartyMember(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CSOTFPartyMember_Activity Activity;

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerCriteriaFieldNumber = 16,
    kActivityFieldNumber = 17,
    kCompletedMissionsFieldNumber = 3,
    kBadgeLevelFieldNumber = 4,
    kOwnsTicketFieldNumber = 2,
    kCompetitiveAccessFieldNumber = 9,
    kCasualBannedFieldNumber = 18,
    kRankedBannedFieldNumber = 19,
    kExperienceFieldNumber = 14,
    kCasualLowPriorityFieldNumber = 20,
    kRankedLowPriorityFieldNumber = 21,
    kLobbyStandbyFieldNumber = 22,
  };
  // optional .CTFPerPlayerMatchCriteriaProto player_criteria = 16;
  bool has_player_criteria() const;
  private:
  bool _internal_has_player_criteria() const;
  public:
  void clear_player_criteria();
  const ::CTFPerPlayerMatchCriteriaProto& player_criteria() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CTFPerPlayerMatchCriteriaProto* release_player_criteria();
  ::CTFPerPlayerMatchCriteriaProto* mutable_player_criteria();
  void set_allocated_player_criteria(::CTFPerPlayerMatchCriteriaProto* player_criteria);
  private:
  const ::CTFPerPlayerMatchCriteriaProto& _internal_player_criteria() const;
  ::CTFPerPlayerMatchCriteriaProto* _internal_mutable_player_criteria();
  public:
  void unsafe_arena_set_allocated_player_criteria(
      ::CTFPerPlayerMatchCriteriaProto* player_criteria);
  ::CTFPerPlayerMatchCriteriaProto* unsafe_arena_release_player_criteria();

  // optional .CSOTFPartyMember.Activity activity = 17;
  bool has_activity() const;
  private:
  bool _internal_has_activity() const;
  public:
  void clear_activity();
  const ::CSOTFPartyMember_Activity& activity() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CSOTFPartyMember_Activity* release_activity();
  ::CSOTFPartyMember_Activity* mutable_activity();
  void set_allocated_activity(::CSOTFPartyMember_Activity* activity);
  private:
  const ::CSOTFPartyMember_Activity& _internal_activity() const;
  ::CSOTFPartyMember_Activity* _internal_mutable_activity();
  public:
  void unsafe_arena_set_allocated_activity(
      ::CSOTFPartyMember_Activity* activity);
  ::CSOTFPartyMember_Activity* unsafe_arena_release_activity();

  // optional uint32 completed_missions = 3;
  bool has_completed_missions() const;
  private:
  bool _internal_has_completed_missions() const;
  public:
  void clear_completed_missions();
  ::PROTOBUF_NAMESPACE_ID::uint32 completed_missions() const;
  void set_completed_missions(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_completed_missions() const;
  void _internal_set_completed_missions(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 badge_level = 4;
  bool has_badge_level() const;
  private:
  bool _internal_has_badge_level() const;
  public:
  void clear_badge_level();
  ::PROTOBUF_NAMESPACE_ID::uint32 badge_level() const;
  void set_badge_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_badge_level() const;
  void _internal_set_badge_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool owns_ticket = 2;
  bool has_owns_ticket() const;
  private:
  bool _internal_has_owns_ticket() const;
  public:
  void clear_owns_ticket();
  bool owns_ticket() const;
  void set_owns_ticket(bool value);
  private:
  bool _internal_owns_ticket() const;
  void _internal_set_owns_ticket(bool value);
  public:

  // optional bool competitive_access = 9;
  bool has_competitive_access() const;
  private:
  bool _internal_has_competitive_access() const;
  public:
  void clear_competitive_access();
  bool competitive_access() const;
  void set_competitive_access(bool value);
  private:
  bool _internal_competitive_access() const;
  void _internal_set_competitive_access(bool value);
  public:

  // optional bool casual_banned = 18;
  bool has_casual_banned() const;
  private:
  bool _internal_has_casual_banned() const;
  public:
  void clear_casual_banned();
  bool casual_banned() const;
  void set_casual_banned(bool value);
  private:
  bool _internal_casual_banned() const;
  void _internal_set_casual_banned(bool value);
  public:

  // optional bool ranked_banned = 19;
  bool has_ranked_banned() const;
  private:
  bool _internal_has_ranked_banned() const;
  public:
  void clear_ranked_banned();
  bool ranked_banned() const;
  void set_ranked_banned(bool value);
  private:
  bool _internal_ranked_banned() const;
  void _internal_set_ranked_banned(bool value);
  public:

  // optional uint32 experience = 14;
  bool has_experience() const;
  private:
  bool _internal_has_experience() const;
  public:
  void clear_experience();
  ::PROTOBUF_NAMESPACE_ID::uint32 experience() const;
  void set_experience(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_experience() const;
  void _internal_set_experience(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool casual_low_priority = 20;
  bool has_casual_low_priority() const;
  private:
  bool _internal_has_casual_low_priority() const;
  public:
  void clear_casual_low_priority();
  bool casual_low_priority() const;
  void set_casual_low_priority(bool value);
  private:
  bool _internal_casual_low_priority() const;
  void _internal_set_casual_low_priority(bool value);
  public:

  // optional bool ranked_low_priority = 21;
  bool has_ranked_low_priority() const;
  private:
  bool _internal_has_ranked_low_priority() const;
  public:
  void clear_ranked_low_priority();
  bool ranked_low_priority() const;
  void set_ranked_low_priority(bool value);
  private:
  bool _internal_ranked_low_priority() const;
  void _internal_set_ranked_low_priority(bool value);
  public:

  // optional bool lobby_standby = 22;
  bool has_lobby_standby() const;
  private:
  bool _internal_has_lobby_standby() const;
  public:
  void clear_lobby_standby();
  bool lobby_standby() const;
  void set_lobby_standby(bool value);
  private:
  bool _internal_lobby_standby() const;
  void _internal_set_lobby_standby(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CSOTFPartyMember)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CTFPerPlayerMatchCriteriaProto* player_criteria_;
  ::CSOTFPartyMember_Activity* activity_;
  ::PROTOBUF_NAMESPACE_ID::uint32 completed_missions_;
  ::PROTOBUF_NAMESPACE_ID::uint32 badge_level_;
  bool owns_ticket_;
  bool competitive_access_;
  bool casual_banned_;
  bool ranked_banned_;
  ::PROTOBUF_NAMESPACE_ID::uint32 experience_;
  bool casual_low_priority_;
  bool ranked_low_priority_;
  bool lobby_standby_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class TFPendingPartyMember final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TFPendingPartyMember) */ {
 public:
  inline TFPendingPartyMember() : TFPendingPartyMember(nullptr) {}
  ~TFPendingPartyMember() override;
  explicit constexpr TFPendingPartyMember(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TFPendingPartyMember(const TFPendingPartyMember& from);
  TFPendingPartyMember(TFPendingPartyMember&& from) noexcept
    : TFPendingPartyMember() {
    *this = ::std::move(from);
  }

  inline TFPendingPartyMember& operator=(const TFPendingPartyMember& from) {
    CopyFrom(from);
    return *this;
  }
  inline TFPendingPartyMember& operator=(TFPendingPartyMember&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TFPendingPartyMember& default_instance() {
    return *internal_default_instance();
  }
  static inline const TFPendingPartyMember* internal_default_instance() {
    return reinterpret_cast<const TFPendingPartyMember*>(
               &_TFPendingPartyMember_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(TFPendingPartyMember& a, TFPendingPartyMember& b) {
    a.Swap(&b);
  }
  inline void Swap(TFPendingPartyMember* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TFPendingPartyMember* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TFPendingPartyMember* New() const final {
    return new TFPendingPartyMember();
  }

  TFPendingPartyMember* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TFPendingPartyMember>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TFPendingPartyMember& from);
  void MergeFrom(const TFPendingPartyMember& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TFPendingPartyMember* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TFPendingPartyMember";
  }
  protected:
  explicit TFPendingPartyMember(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TFPendingPartyMember_EType EType;
  static constexpr EType Invited =
    TFPendingPartyMember_EType_Invited;
  static constexpr EType RequestedToJoin =
    TFPendingPartyMember_EType_RequestedToJoin;
  static inline bool EType_IsValid(int value) {
    return TFPendingPartyMember_EType_IsValid(value);
  }
  static constexpr EType EType_MIN =
    TFPendingPartyMember_EType_EType_MIN;
  static constexpr EType EType_MAX =
    TFPendingPartyMember_EType_EType_MAX;
  static constexpr int EType_ARRAYSIZE =
    TFPendingPartyMember_EType_EType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EType_descriptor() {
    return TFPendingPartyMember_EType_descriptor();
  }
  template<typename T>
  static inline const std::string& EType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EType_Name.");
    return TFPendingPartyMember_EType_Name(enum_t_value);
  }
  static inline bool EType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EType* value) {
    return TFPendingPartyMember_EType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSteamidFieldNumber = 1,
    kInviterFieldNumber = 3,
    kTypeFieldNumber = 2,
  };
  // optional fixed64 steamid = 1;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  ::PROTOBUF_NAMESPACE_ID::uint64 steamid() const;
  void set_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_steamid() const;
  void _internal_set_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional fixed64 inviter = 3;
  bool has_inviter() const;
  private:
  bool _internal_has_inviter() const;
  public:
  void clear_inviter();
  ::PROTOBUF_NAMESPACE_ID::uint64 inviter() const;
  void set_inviter(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_inviter() const;
  void _internal_set_inviter(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional .TFPendingPartyMember.EType type = 2 [default = Invited];
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::TFPendingPartyMember_EType type() const;
  void set_type(::TFPendingPartyMember_EType value);
  private:
  ::TFPendingPartyMember_EType _internal_type() const;
  void _internal_set_type(::TFPendingPartyMember_EType value);
  public:

  // @@protoc_insertion_point(class_scope:TFPendingPartyMember)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 steamid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 inviter_;
  int type_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class TFSyncedMMUIState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TFSyncedMMUIState) */ {
 public:
  inline TFSyncedMMUIState() : TFSyncedMMUIState(nullptr) {}
  ~TFSyncedMMUIState() override;
  explicit constexpr TFSyncedMMUIState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TFSyncedMMUIState(const TFSyncedMMUIState& from);
  TFSyncedMMUIState(TFSyncedMMUIState&& from) noexcept
    : TFSyncedMMUIState() {
    *this = ::std::move(from);
  }

  inline TFSyncedMMUIState& operator=(const TFSyncedMMUIState& from) {
    CopyFrom(from);
    return *this;
  }
  inline TFSyncedMMUIState& operator=(TFSyncedMMUIState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TFSyncedMMUIState& default_instance() {
    return *internal_default_instance();
  }
  static inline const TFSyncedMMUIState* internal_default_instance() {
    return reinterpret_cast<const TFSyncedMMUIState*>(
               &_TFSyncedMMUIState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(TFSyncedMMUIState& a, TFSyncedMMUIState& b) {
    a.Swap(&b);
  }
  inline void Swap(TFSyncedMMUIState* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TFSyncedMMUIState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TFSyncedMMUIState* New() const final {
    return new TFSyncedMMUIState();
  }

  TFSyncedMMUIState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TFSyncedMMUIState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TFSyncedMMUIState& from);
  void MergeFrom(const TFSyncedMMUIState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TFSyncedMMUIState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TFSyncedMMUIState";
  }
  protected:
  explicit TFSyncedMMUIState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMenuStepFieldNumber = 1,
    kMatchGroupFieldNumber = 2,
  };
  // optional .ETFSyncedMMMenuStep menu_step = 1 [default = k_eTFSyncedMMMenuStep_None];
  bool has_menu_step() const;
  private:
  bool _internal_has_menu_step() const;
  public:
  void clear_menu_step();
  ::ETFSyncedMMMenuStep menu_step() const;
  void set_menu_step(::ETFSyncedMMMenuStep value);
  private:
  ::ETFSyncedMMMenuStep _internal_menu_step() const;
  void _internal_set_menu_step(::ETFSyncedMMMenuStep value);
  public:

  // optional .ETFMatchGroup match_group = 2 [default = k_eTFMatchGroup_Invalid];
  bool has_match_group() const;
  private:
  bool _internal_has_match_group() const;
  public:
  void clear_match_group();
  ::ETFMatchGroup match_group() const;
  void set_match_group(::ETFMatchGroup value);
  private:
  ::ETFMatchGroup _internal_match_group() const;
  void _internal_set_match_group(::ETFMatchGroup value);
  public:

  // @@protoc_insertion_point(class_scope:TFSyncedMMUIState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int menu_step_;
  int match_group_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CTFGroupMatchCriteriaProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CTFGroupMatchCriteriaProto) */ {
 public:
  inline CTFGroupMatchCriteriaProto() : CTFGroupMatchCriteriaProto(nullptr) {}
  ~CTFGroupMatchCriteriaProto() override;
  explicit constexpr CTFGroupMatchCriteriaProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CTFGroupMatchCriteriaProto(const CTFGroupMatchCriteriaProto& from);
  CTFGroupMatchCriteriaProto(CTFGroupMatchCriteriaProto&& from) noexcept
    : CTFGroupMatchCriteriaProto() {
    *this = ::std::move(from);
  }

  inline CTFGroupMatchCriteriaProto& operator=(const CTFGroupMatchCriteriaProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline CTFGroupMatchCriteriaProto& operator=(CTFGroupMatchCriteriaProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CTFGroupMatchCriteriaProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const CTFGroupMatchCriteriaProto* internal_default_instance() {
    return reinterpret_cast<const CTFGroupMatchCriteriaProto*>(
               &_CTFGroupMatchCriteriaProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(CTFGroupMatchCriteriaProto& a, CTFGroupMatchCriteriaProto& b) {
    a.Swap(&b);
  }
  inline void Swap(CTFGroupMatchCriteriaProto* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CTFGroupMatchCriteriaProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CTFGroupMatchCriteriaProto* New() const final {
    return new CTFGroupMatchCriteriaProto();
  }

  CTFGroupMatchCriteriaProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CTFGroupMatchCriteriaProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CTFGroupMatchCriteriaProto& from);
  void MergeFrom(const CTFGroupMatchCriteriaProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CTFGroupMatchCriteriaProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CTFGroupMatchCriteriaProto";
  }
  protected:
  explicit CTFGroupMatchCriteriaProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMvmMannupMissionsFieldNumber = 15,
    kMvmBootcampMissionsFieldNumber = 16,
    kMvmMannupTourFieldNumber = 10,
    kCasualCriteriaFieldNumber = 12,
    kLateJoinOkFieldNumber = 5,
    kCustomPingToleranceFieldNumber = 13,
  };
  // repeated string mvm_mannup_missions = 15;
  int mvm_mannup_missions_size() const;
  private:
  int _internal_mvm_mannup_missions_size() const;
  public:
  void clear_mvm_mannup_missions();
  const std::string& mvm_mannup_missions(int index) const;
  std::string* mutable_mvm_mannup_missions(int index);
  void set_mvm_mannup_missions(int index, const std::string& value);
  void set_mvm_mannup_missions(int index, std::string&& value);
  void set_mvm_mannup_missions(int index, const char* value);
  void set_mvm_mannup_missions(int index, const char* value, size_t size);
  std::string* add_mvm_mannup_missions();
  void add_mvm_mannup_missions(const std::string& value);
  void add_mvm_mannup_missions(std::string&& value);
  void add_mvm_mannup_missions(const char* value);
  void add_mvm_mannup_missions(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& mvm_mannup_missions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_mvm_mannup_missions();
  private:
  const std::string& _internal_mvm_mannup_missions(int index) const;
  std::string* _internal_add_mvm_mannup_missions();
  public:

  // repeated string mvm_bootcamp_missions = 16;
  int mvm_bootcamp_missions_size() const;
  private:
  int _internal_mvm_bootcamp_missions_size() const;
  public:
  void clear_mvm_bootcamp_missions();
  const std::string& mvm_bootcamp_missions(int index) const;
  std::string* mutable_mvm_bootcamp_missions(int index);
  void set_mvm_bootcamp_missions(int index, const std::string& value);
  void set_mvm_bootcamp_missions(int index, std::string&& value);
  void set_mvm_bootcamp_missions(int index, const char* value);
  void set_mvm_bootcamp_missions(int index, const char* value, size_t size);
  std::string* add_mvm_bootcamp_missions();
  void add_mvm_bootcamp_missions(const std::string& value);
  void add_mvm_bootcamp_missions(std::string&& value);
  void add_mvm_bootcamp_missions(const char* value);
  void add_mvm_bootcamp_missions(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& mvm_bootcamp_missions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_mvm_bootcamp_missions();
  private:
  const std::string& _internal_mvm_bootcamp_missions(int index) const;
  std::string* _internal_add_mvm_bootcamp_missions();
  public:

  // optional string mvm_mannup_tour = 10;
  bool has_mvm_mannup_tour() const;
  private:
  bool _internal_has_mvm_mannup_tour() const;
  public:
  void clear_mvm_mannup_tour();
  const std::string& mvm_mannup_tour() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mvm_mannup_tour(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mvm_mannup_tour();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_mvm_mannup_tour();
  void set_allocated_mvm_mannup_tour(std::string* mvm_mannup_tour);
  private:
  const std::string& _internal_mvm_mannup_tour() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mvm_mannup_tour(const std::string& value);
  std::string* _internal_mutable_mvm_mannup_tour();
  public:

  // optional .CTFCasualMatchCriteria casual_criteria = 12;
  bool has_casual_criteria() const;
  private:
  bool _internal_has_casual_criteria() const;
  public:
  void clear_casual_criteria();
  const ::CTFCasualMatchCriteria& casual_criteria() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CTFCasualMatchCriteria* release_casual_criteria();
  ::CTFCasualMatchCriteria* mutable_casual_criteria();
  void set_allocated_casual_criteria(::CTFCasualMatchCriteria* casual_criteria);
  private:
  const ::CTFCasualMatchCriteria& _internal_casual_criteria() const;
  ::CTFCasualMatchCriteria* _internal_mutable_casual_criteria();
  public:
  void unsafe_arena_set_allocated_casual_criteria(
      ::CTFCasualMatchCriteria* casual_criteria);
  ::CTFCasualMatchCriteria* unsafe_arena_release_casual_criteria();

  // optional bool late_join_ok = 5;
  bool has_late_join_ok() const;
  private:
  bool _internal_has_late_join_ok() const;
  public:
  void clear_late_join_ok();
  bool late_join_ok() const;
  void set_late_join_ok(bool value);
  private:
  bool _internal_late_join_ok() const;
  void _internal_set_late_join_ok(bool value);
  public:

  // optional uint32 custom_ping_tolerance = 13 [default = 0];
  bool has_custom_ping_tolerance() const;
  private:
  bool _internal_has_custom_ping_tolerance() const;
  public:
  void clear_custom_ping_tolerance();
  ::PROTOBUF_NAMESPACE_ID::uint32 custom_ping_tolerance() const;
  void set_custom_ping_tolerance(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_custom_ping_tolerance() const;
  void _internal_set_custom_ping_tolerance(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CTFGroupMatchCriteriaProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> mvm_mannup_missions_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> mvm_bootcamp_missions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mvm_mannup_tour_;
  ::CTFCasualMatchCriteria* casual_criteria_;
  bool late_join_ok_;
  ::PROTOBUF_NAMESPACE_ID::uint32 custom_ping_tolerance_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CTFCasualMatchCriteria final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CTFCasualMatchCriteria) */ {
 public:
  inline CTFCasualMatchCriteria() : CTFCasualMatchCriteria(nullptr) {}
  ~CTFCasualMatchCriteria() override;
  explicit constexpr CTFCasualMatchCriteria(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CTFCasualMatchCriteria(const CTFCasualMatchCriteria& from);
  CTFCasualMatchCriteria(CTFCasualMatchCriteria&& from) noexcept
    : CTFCasualMatchCriteria() {
    *this = ::std::move(from);
  }

  inline CTFCasualMatchCriteria& operator=(const CTFCasualMatchCriteria& from) {
    CopyFrom(from);
    return *this;
  }
  inline CTFCasualMatchCriteria& operator=(CTFCasualMatchCriteria&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CTFCasualMatchCriteria& default_instance() {
    return *internal_default_instance();
  }
  static inline const CTFCasualMatchCriteria* internal_default_instance() {
    return reinterpret_cast<const CTFCasualMatchCriteria*>(
               &_CTFCasualMatchCriteria_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(CTFCasualMatchCriteria& a, CTFCasualMatchCriteria& b) {
    a.Swap(&b);
  }
  inline void Swap(CTFCasualMatchCriteria* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CTFCasualMatchCriteria* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CTFCasualMatchCriteria* New() const final {
    return new CTFCasualMatchCriteria();
  }

  CTFCasualMatchCriteria* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CTFCasualMatchCriteria>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CTFCasualMatchCriteria& from);
  void MergeFrom(const CTFCasualMatchCriteria& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CTFCasualMatchCriteria* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CTFCasualMatchCriteria";
  }
  protected:
  explicit CTFCasualMatchCriteria(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSelectedMapsBitsFieldNumber = 3,
  };
  // repeated fixed32 selected_maps_bits = 3;
  int selected_maps_bits_size() const;
  private:
  int _internal_selected_maps_bits_size() const;
  public:
  void clear_selected_maps_bits();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_selected_maps_bits(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_selected_maps_bits() const;
  void _internal_add_selected_maps_bits(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_selected_maps_bits();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 selected_maps_bits(int index) const;
  void set_selected_maps_bits(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_selected_maps_bits(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      selected_maps_bits() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_selected_maps_bits();

  // @@protoc_insertion_point(class_scope:CTFCasualMatchCriteria)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > selected_maps_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CTFPerPlayerMatchCriteriaProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CTFPerPlayerMatchCriteriaProto) */ {
 public:
  inline CTFPerPlayerMatchCriteriaProto() : CTFPerPlayerMatchCriteriaProto(nullptr) {}
  ~CTFPerPlayerMatchCriteriaProto() override;
  explicit constexpr CTFPerPlayerMatchCriteriaProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CTFPerPlayerMatchCriteriaProto(const CTFPerPlayerMatchCriteriaProto& from);
  CTFPerPlayerMatchCriteriaProto(CTFPerPlayerMatchCriteriaProto&& from) noexcept
    : CTFPerPlayerMatchCriteriaProto() {
    *this = ::std::move(from);
  }

  inline CTFPerPlayerMatchCriteriaProto& operator=(const CTFPerPlayerMatchCriteriaProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline CTFPerPlayerMatchCriteriaProto& operator=(CTFPerPlayerMatchCriteriaProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CTFPerPlayerMatchCriteriaProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const CTFPerPlayerMatchCriteriaProto* internal_default_instance() {
    return reinterpret_cast<const CTFPerPlayerMatchCriteriaProto*>(
               &_CTFPerPlayerMatchCriteriaProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(CTFPerPlayerMatchCriteriaProto& a, CTFPerPlayerMatchCriteriaProto& b) {
    a.Swap(&b);
  }
  inline void Swap(CTFPerPlayerMatchCriteriaProto* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CTFPerPlayerMatchCriteriaProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CTFPerPlayerMatchCriteriaProto* New() const final {
    return new CTFPerPlayerMatchCriteriaProto();
  }

  CTFPerPlayerMatchCriteriaProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CTFPerPlayerMatchCriteriaProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CTFPerPlayerMatchCriteriaProto& from);
  void MergeFrom(const CTFPerPlayerMatchCriteriaProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CTFPerPlayerMatchCriteriaProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CTFPerPlayerMatchCriteriaProto";
  }
  protected:
  explicit CTFPerPlayerMatchCriteriaProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMvmSquadSurplusFieldNumber = 1,
  };
  // optional bool mvm_squad_surplus = 1;
  bool has_mvm_squad_surplus() const;
  private:
  bool _internal_has_mvm_squad_surplus() const;
  public:
  void clear_mvm_squad_surplus();
  bool mvm_squad_surplus() const;
  void set_mvm_squad_surplus(bool value);
  private:
  bool _internal_mvm_squad_surplus() const;
  void _internal_set_mvm_squad_surplus(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CTFPerPlayerMatchCriteriaProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool mvm_squad_surplus_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CTFPartyOptions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CTFPartyOptions) */ {
 public:
  inline CTFPartyOptions() : CTFPartyOptions(nullptr) {}
  ~CTFPartyOptions() override;
  explicit constexpr CTFPartyOptions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CTFPartyOptions(const CTFPartyOptions& from);
  CTFPartyOptions(CTFPartyOptions&& from) noexcept
    : CTFPartyOptions() {
    *this = ::std::move(from);
  }

  inline CTFPartyOptions& operator=(const CTFPartyOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline CTFPartyOptions& operator=(CTFPartyOptions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CTFPartyOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const CTFPartyOptions* internal_default_instance() {
    return reinterpret_cast<const CTFPartyOptions*>(
               &_CTFPartyOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(CTFPartyOptions& a, CTFPartyOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(CTFPartyOptions* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CTFPartyOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CTFPartyOptions* New() const final {
    return new CTFPartyOptions();
  }

  CTFPartyOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CTFPartyOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CTFPartyOptions& from);
  void MergeFrom(const CTFPartyOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CTFPartyOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CTFPartyOptions";
  }
  protected:
  explicit CTFPartyOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupCriteriaFieldNumber = 2,
    kPlayerCriteriaFieldNumber = 3,
    kPlayerUistateFieldNumber = 5,
    kOverwriteExistingFieldNumber = 1,
  };
  // optional .CTFGroupMatchCriteriaProto group_criteria = 2;
  bool has_group_criteria() const;
  private:
  bool _internal_has_group_criteria() const;
  public:
  void clear_group_criteria();
  const ::CTFGroupMatchCriteriaProto& group_criteria() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CTFGroupMatchCriteriaProto* release_group_criteria();
  ::CTFGroupMatchCriteriaProto* mutable_group_criteria();
  void set_allocated_group_criteria(::CTFGroupMatchCriteriaProto* group_criteria);
  private:
  const ::CTFGroupMatchCriteriaProto& _internal_group_criteria() const;
  ::CTFGroupMatchCriteriaProto* _internal_mutable_group_criteria();
  public:
  void unsafe_arena_set_allocated_group_criteria(
      ::CTFGroupMatchCriteriaProto* group_criteria);
  ::CTFGroupMatchCriteriaProto* unsafe_arena_release_group_criteria();

  // optional .CTFPerPlayerMatchCriteriaProto player_criteria = 3;
  bool has_player_criteria() const;
  private:
  bool _internal_has_player_criteria() const;
  public:
  void clear_player_criteria();
  const ::CTFPerPlayerMatchCriteriaProto& player_criteria() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CTFPerPlayerMatchCriteriaProto* release_player_criteria();
  ::CTFPerPlayerMatchCriteriaProto* mutable_player_criteria();
  void set_allocated_player_criteria(::CTFPerPlayerMatchCriteriaProto* player_criteria);
  private:
  const ::CTFPerPlayerMatchCriteriaProto& _internal_player_criteria() const;
  ::CTFPerPlayerMatchCriteriaProto* _internal_mutable_player_criteria();
  public:
  void unsafe_arena_set_allocated_player_criteria(
      ::CTFPerPlayerMatchCriteriaProto* player_criteria);
  ::CTFPerPlayerMatchCriteriaProto* unsafe_arena_release_player_criteria();

  // optional .TFSyncedMMUIState player_uistate = 5;
  bool has_player_uistate() const;
  private:
  bool _internal_has_player_uistate() const;
  public:
  void clear_player_uistate();
  const ::TFSyncedMMUIState& player_uistate() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TFSyncedMMUIState* release_player_uistate();
  ::TFSyncedMMUIState* mutable_player_uistate();
  void set_allocated_player_uistate(::TFSyncedMMUIState* player_uistate);
  private:
  const ::TFSyncedMMUIState& _internal_player_uistate() const;
  ::TFSyncedMMUIState* _internal_mutable_player_uistate();
  public:
  void unsafe_arena_set_allocated_player_uistate(
      ::TFSyncedMMUIState* player_uistate);
  ::TFSyncedMMUIState* unsafe_arena_release_player_uistate();

  // optional bool overwrite_existing = 1;
  bool has_overwrite_existing() const;
  private:
  bool _internal_has_overwrite_existing() const;
  public:
  void clear_overwrite_existing();
  bool overwrite_existing() const;
  void set_overwrite_existing(bool value);
  private:
  bool _internal_overwrite_existing() const;
  void _internal_set_overwrite_existing(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CTFPartyOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CTFGroupMatchCriteriaProto* group_criteria_;
  ::CTFPerPlayerMatchCriteriaProto* player_criteria_;
  ::TFSyncedMMUIState* player_uistate_;
  bool overwrite_existing_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgPartySetOptions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgPartySetOptions) */ {
 public:
  inline CMsgPartySetOptions() : CMsgPartySetOptions(nullptr) {}
  ~CMsgPartySetOptions() override;
  explicit constexpr CMsgPartySetOptions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgPartySetOptions(const CMsgPartySetOptions& from);
  CMsgPartySetOptions(CMsgPartySetOptions&& from) noexcept
    : CMsgPartySetOptions() {
    *this = ::std::move(from);
  }

  inline CMsgPartySetOptions& operator=(const CMsgPartySetOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgPartySetOptions& operator=(CMsgPartySetOptions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgPartySetOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgPartySetOptions* internal_default_instance() {
    return reinterpret_cast<const CMsgPartySetOptions*>(
               &_CMsgPartySetOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(CMsgPartySetOptions& a, CMsgPartySetOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgPartySetOptions* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgPartySetOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgPartySetOptions* New() const final {
    return new CMsgPartySetOptions();
  }

  CMsgPartySetOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgPartySetOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgPartySetOptions& from);
  void MergeFrom(const CMsgPartySetOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgPartySetOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgPartySetOptions";
  }
  protected:
  explicit CMsgPartySetOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOptionsFieldNumber = 2,
    kPartyIdFieldNumber = 1,
  };
  // optional .CTFPartyOptions options = 2;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::CTFPartyOptions& options() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CTFPartyOptions* release_options();
  ::CTFPartyOptions* mutable_options();
  void set_allocated_options(::CTFPartyOptions* options);
  private:
  const ::CTFPartyOptions& _internal_options() const;
  ::CTFPartyOptions* _internal_mutable_options();
  public:
  void unsafe_arena_set_allocated_options(
      ::CTFPartyOptions* options);
  ::CTFPartyOptions* unsafe_arena_release_options();

  // optional fixed64 party_id = 1;
  bool has_party_id() const;
  private:
  bool _internal_has_party_id() const;
  public:
  void clear_party_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 party_id() const;
  void set_party_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_party_id() const;
  void _internal_set_party_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgPartySetOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CTFPartyOptions* options_;
  ::PROTOBUF_NAMESPACE_ID::uint64 party_id_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgPartySetOptionsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgPartySetOptionsResponse) */ {
 public:
  inline CMsgPartySetOptionsResponse() : CMsgPartySetOptionsResponse(nullptr) {}
  ~CMsgPartySetOptionsResponse() override;
  explicit constexpr CMsgPartySetOptionsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgPartySetOptionsResponse(const CMsgPartySetOptionsResponse& from);
  CMsgPartySetOptionsResponse(CMsgPartySetOptionsResponse&& from) noexcept
    : CMsgPartySetOptionsResponse() {
    *this = ::std::move(from);
  }

  inline CMsgPartySetOptionsResponse& operator=(const CMsgPartySetOptionsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgPartySetOptionsResponse& operator=(CMsgPartySetOptionsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgPartySetOptionsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgPartySetOptionsResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgPartySetOptionsResponse*>(
               &_CMsgPartySetOptionsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(CMsgPartySetOptionsResponse& a, CMsgPartySetOptionsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgPartySetOptionsResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgPartySetOptionsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgPartySetOptionsResponse* New() const final {
    return new CMsgPartySetOptionsResponse();
  }

  CMsgPartySetOptionsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgPartySetOptionsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgPartySetOptionsResponse& from);
  void MergeFrom(const CMsgPartySetOptionsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgPartySetOptionsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgPartySetOptionsResponse";
  }
  protected:
  explicit CMsgPartySetOptionsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgPartySetOptionsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgPartyQueueForMatch final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgPartyQueueForMatch) */ {
 public:
  inline CMsgPartyQueueForMatch() : CMsgPartyQueueForMatch(nullptr) {}
  ~CMsgPartyQueueForMatch() override;
  explicit constexpr CMsgPartyQueueForMatch(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgPartyQueueForMatch(const CMsgPartyQueueForMatch& from);
  CMsgPartyQueueForMatch(CMsgPartyQueueForMatch&& from) noexcept
    : CMsgPartyQueueForMatch() {
    *this = ::std::move(from);
  }

  inline CMsgPartyQueueForMatch& operator=(const CMsgPartyQueueForMatch& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgPartyQueueForMatch& operator=(CMsgPartyQueueForMatch&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgPartyQueueForMatch& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgPartyQueueForMatch* internal_default_instance() {
    return reinterpret_cast<const CMsgPartyQueueForMatch*>(
               &_CMsgPartyQueueForMatch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(CMsgPartyQueueForMatch& a, CMsgPartyQueueForMatch& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgPartyQueueForMatch* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgPartyQueueForMatch* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgPartyQueueForMatch* New() const final {
    return new CMsgPartyQueueForMatch();
  }

  CMsgPartyQueueForMatch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgPartyQueueForMatch>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgPartyQueueForMatch& from);
  void MergeFrom(const CMsgPartyQueueForMatch& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgPartyQueueForMatch* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgPartyQueueForMatch";
  }
  protected:
  explicit CMsgPartyQueueForMatch(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFinalOptionsFieldNumber = 2,
    kPartyIdFieldNumber = 1,
    kMatchGroupFieldNumber = 3,
  };
  // optional .CTFPartyOptions final_options = 2;
  bool has_final_options() const;
  private:
  bool _internal_has_final_options() const;
  public:
  void clear_final_options();
  const ::CTFPartyOptions& final_options() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CTFPartyOptions* release_final_options();
  ::CTFPartyOptions* mutable_final_options();
  void set_allocated_final_options(::CTFPartyOptions* final_options);
  private:
  const ::CTFPartyOptions& _internal_final_options() const;
  ::CTFPartyOptions* _internal_mutable_final_options();
  public:
  void unsafe_arena_set_allocated_final_options(
      ::CTFPartyOptions* final_options);
  ::CTFPartyOptions* unsafe_arena_release_final_options();

  // optional fixed64 party_id = 1;
  bool has_party_id() const;
  private:
  bool _internal_has_party_id() const;
  public:
  void clear_party_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 party_id() const;
  void set_party_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_party_id() const;
  void _internal_set_party_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional .ETFMatchGroup match_group = 3 [default = k_eTFMatchGroup_Invalid];
  bool has_match_group() const;
  private:
  bool _internal_has_match_group() const;
  public:
  void clear_match_group();
  ::ETFMatchGroup match_group() const;
  void set_match_group(::ETFMatchGroup value);
  private:
  ::ETFMatchGroup _internal_match_group() const;
  void _internal_set_match_group(::ETFMatchGroup value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgPartyQueueForMatch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CTFPartyOptions* final_options_;
  ::PROTOBUF_NAMESPACE_ID::uint64 party_id_;
  int match_group_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgPartyQueueForMatchResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgPartyQueueForMatchResponse) */ {
 public:
  inline CMsgPartyQueueForMatchResponse() : CMsgPartyQueueForMatchResponse(nullptr) {}
  ~CMsgPartyQueueForMatchResponse() override;
  explicit constexpr CMsgPartyQueueForMatchResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgPartyQueueForMatchResponse(const CMsgPartyQueueForMatchResponse& from);
  CMsgPartyQueueForMatchResponse(CMsgPartyQueueForMatchResponse&& from) noexcept
    : CMsgPartyQueueForMatchResponse() {
    *this = ::std::move(from);
  }

  inline CMsgPartyQueueForMatchResponse& operator=(const CMsgPartyQueueForMatchResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgPartyQueueForMatchResponse& operator=(CMsgPartyQueueForMatchResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgPartyQueueForMatchResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgPartyQueueForMatchResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgPartyQueueForMatchResponse*>(
               &_CMsgPartyQueueForMatchResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(CMsgPartyQueueForMatchResponse& a, CMsgPartyQueueForMatchResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgPartyQueueForMatchResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgPartyQueueForMatchResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgPartyQueueForMatchResponse* New() const final {
    return new CMsgPartyQueueForMatchResponse();
  }

  CMsgPartyQueueForMatchResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgPartyQueueForMatchResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgPartyQueueForMatchResponse& from);
  void MergeFrom(const CMsgPartyQueueForMatchResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgPartyQueueForMatchResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgPartyQueueForMatchResponse";
  }
  protected:
  explicit CMsgPartyQueueForMatchResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgPartyQueueForMatchResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgPartyQueueForStandby final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgPartyQueueForStandby) */ {
 public:
  inline CMsgPartyQueueForStandby() : CMsgPartyQueueForStandby(nullptr) {}
  ~CMsgPartyQueueForStandby() override;
  explicit constexpr CMsgPartyQueueForStandby(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgPartyQueueForStandby(const CMsgPartyQueueForStandby& from);
  CMsgPartyQueueForStandby(CMsgPartyQueueForStandby&& from) noexcept
    : CMsgPartyQueueForStandby() {
    *this = ::std::move(from);
  }

  inline CMsgPartyQueueForStandby& operator=(const CMsgPartyQueueForStandby& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgPartyQueueForStandby& operator=(CMsgPartyQueueForStandby&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgPartyQueueForStandby& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgPartyQueueForStandby* internal_default_instance() {
    return reinterpret_cast<const CMsgPartyQueueForStandby*>(
               &_CMsgPartyQueueForStandby_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(CMsgPartyQueueForStandby& a, CMsgPartyQueueForStandby& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgPartyQueueForStandby* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgPartyQueueForStandby* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgPartyQueueForStandby* New() const final {
    return new CMsgPartyQueueForStandby();
  }

  CMsgPartyQueueForStandby* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgPartyQueueForStandby>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgPartyQueueForStandby& from);
  void MergeFrom(const CMsgPartyQueueForStandby& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgPartyQueueForStandby* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgPartyQueueForStandby";
  }
  protected:
  explicit CMsgPartyQueueForStandby(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartyIdFieldNumber = 1,
    kPartyLobbyIdFieldNumber = 2,
  };
  // optional fixed64 party_id = 1;
  bool has_party_id() const;
  private:
  bool _internal_has_party_id() const;
  public:
  void clear_party_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 party_id() const;
  void set_party_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_party_id() const;
  void _internal_set_party_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional fixed64 party_lobby_id = 2;
  bool has_party_lobby_id() const;
  private:
  bool _internal_has_party_lobby_id() const;
  public:
  void clear_party_lobby_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 party_lobby_id() const;
  void set_party_lobby_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_party_lobby_id() const;
  void _internal_set_party_lobby_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgPartyQueueForStandby)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 party_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 party_lobby_id_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgPartyQueueForStandbyResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgPartyQueueForStandbyResponse) */ {
 public:
  inline CMsgPartyQueueForStandbyResponse() : CMsgPartyQueueForStandbyResponse(nullptr) {}
  ~CMsgPartyQueueForStandbyResponse() override;
  explicit constexpr CMsgPartyQueueForStandbyResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgPartyQueueForStandbyResponse(const CMsgPartyQueueForStandbyResponse& from);
  CMsgPartyQueueForStandbyResponse(CMsgPartyQueueForStandbyResponse&& from) noexcept
    : CMsgPartyQueueForStandbyResponse() {
    *this = ::std::move(from);
  }

  inline CMsgPartyQueueForStandbyResponse& operator=(const CMsgPartyQueueForStandbyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgPartyQueueForStandbyResponse& operator=(CMsgPartyQueueForStandbyResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgPartyQueueForStandbyResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgPartyQueueForStandbyResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgPartyQueueForStandbyResponse*>(
               &_CMsgPartyQueueForStandbyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(CMsgPartyQueueForStandbyResponse& a, CMsgPartyQueueForStandbyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgPartyQueueForStandbyResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgPartyQueueForStandbyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgPartyQueueForStandbyResponse* New() const final {
    return new CMsgPartyQueueForStandbyResponse();
  }

  CMsgPartyQueueForStandbyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgPartyQueueForStandbyResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgPartyQueueForStandbyResponse& from);
  void MergeFrom(const CMsgPartyQueueForStandbyResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgPartyQueueForStandbyResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgPartyQueueForStandbyResponse";
  }
  protected:
  explicit CMsgPartyQueueForStandbyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgPartyQueueForStandbyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgPartyRemoveFromQueue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgPartyRemoveFromQueue) */ {
 public:
  inline CMsgPartyRemoveFromQueue() : CMsgPartyRemoveFromQueue(nullptr) {}
  ~CMsgPartyRemoveFromQueue() override;
  explicit constexpr CMsgPartyRemoveFromQueue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgPartyRemoveFromQueue(const CMsgPartyRemoveFromQueue& from);
  CMsgPartyRemoveFromQueue(CMsgPartyRemoveFromQueue&& from) noexcept
    : CMsgPartyRemoveFromQueue() {
    *this = ::std::move(from);
  }

  inline CMsgPartyRemoveFromQueue& operator=(const CMsgPartyRemoveFromQueue& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgPartyRemoveFromQueue& operator=(CMsgPartyRemoveFromQueue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgPartyRemoveFromQueue& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgPartyRemoveFromQueue* internal_default_instance() {
    return reinterpret_cast<const CMsgPartyRemoveFromQueue*>(
               &_CMsgPartyRemoveFromQueue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(CMsgPartyRemoveFromQueue& a, CMsgPartyRemoveFromQueue& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgPartyRemoveFromQueue* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgPartyRemoveFromQueue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgPartyRemoveFromQueue* New() const final {
    return new CMsgPartyRemoveFromQueue();
  }

  CMsgPartyRemoveFromQueue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgPartyRemoveFromQueue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgPartyRemoveFromQueue& from);
  void MergeFrom(const CMsgPartyRemoveFromQueue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgPartyRemoveFromQueue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgPartyRemoveFromQueue";
  }
  protected:
  explicit CMsgPartyRemoveFromQueue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartyIdFieldNumber = 1,
    kMatchGroupFieldNumber = 2,
  };
  // optional fixed64 party_id = 1;
  bool has_party_id() const;
  private:
  bool _internal_has_party_id() const;
  public:
  void clear_party_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 party_id() const;
  void set_party_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_party_id() const;
  void _internal_set_party_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional .ETFMatchGroup match_group = 2 [default = k_eTFMatchGroup_Invalid];
  bool has_match_group() const;
  private:
  bool _internal_has_match_group() const;
  public:
  void clear_match_group();
  ::ETFMatchGroup match_group() const;
  void set_match_group(::ETFMatchGroup value);
  private:
  ::ETFMatchGroup _internal_match_group() const;
  void _internal_set_match_group(::ETFMatchGroup value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgPartyRemoveFromQueue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 party_id_;
  int match_group_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgPartyRemoveFromQueueResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgPartyRemoveFromQueueResponse) */ {
 public:
  inline CMsgPartyRemoveFromQueueResponse() : CMsgPartyRemoveFromQueueResponse(nullptr) {}
  ~CMsgPartyRemoveFromQueueResponse() override;
  explicit constexpr CMsgPartyRemoveFromQueueResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgPartyRemoveFromQueueResponse(const CMsgPartyRemoveFromQueueResponse& from);
  CMsgPartyRemoveFromQueueResponse(CMsgPartyRemoveFromQueueResponse&& from) noexcept
    : CMsgPartyRemoveFromQueueResponse() {
    *this = ::std::move(from);
  }

  inline CMsgPartyRemoveFromQueueResponse& operator=(const CMsgPartyRemoveFromQueueResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgPartyRemoveFromQueueResponse& operator=(CMsgPartyRemoveFromQueueResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgPartyRemoveFromQueueResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgPartyRemoveFromQueueResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgPartyRemoveFromQueueResponse*>(
               &_CMsgPartyRemoveFromQueueResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(CMsgPartyRemoveFromQueueResponse& a, CMsgPartyRemoveFromQueueResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgPartyRemoveFromQueueResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgPartyRemoveFromQueueResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgPartyRemoveFromQueueResponse* New() const final {
    return new CMsgPartyRemoveFromQueueResponse();
  }

  CMsgPartyRemoveFromQueueResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgPartyRemoveFromQueueResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgPartyRemoveFromQueueResponse& from);
  void MergeFrom(const CMsgPartyRemoveFromQueueResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgPartyRemoveFromQueueResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgPartyRemoveFromQueueResponse";
  }
  protected:
  explicit CMsgPartyRemoveFromQueueResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgPartyRemoveFromQueueResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgPartyRemoveFromStandbyQueue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgPartyRemoveFromStandbyQueue) */ {
 public:
  inline CMsgPartyRemoveFromStandbyQueue() : CMsgPartyRemoveFromStandbyQueue(nullptr) {}
  ~CMsgPartyRemoveFromStandbyQueue() override;
  explicit constexpr CMsgPartyRemoveFromStandbyQueue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgPartyRemoveFromStandbyQueue(const CMsgPartyRemoveFromStandbyQueue& from);
  CMsgPartyRemoveFromStandbyQueue(CMsgPartyRemoveFromStandbyQueue&& from) noexcept
    : CMsgPartyRemoveFromStandbyQueue() {
    *this = ::std::move(from);
  }

  inline CMsgPartyRemoveFromStandbyQueue& operator=(const CMsgPartyRemoveFromStandbyQueue& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgPartyRemoveFromStandbyQueue& operator=(CMsgPartyRemoveFromStandbyQueue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgPartyRemoveFromStandbyQueue& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgPartyRemoveFromStandbyQueue* internal_default_instance() {
    return reinterpret_cast<const CMsgPartyRemoveFromStandbyQueue*>(
               &_CMsgPartyRemoveFromStandbyQueue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  friend void swap(CMsgPartyRemoveFromStandbyQueue& a, CMsgPartyRemoveFromStandbyQueue& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgPartyRemoveFromStandbyQueue* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgPartyRemoveFromStandbyQueue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgPartyRemoveFromStandbyQueue* New() const final {
    return new CMsgPartyRemoveFromStandbyQueue();
  }

  CMsgPartyRemoveFromStandbyQueue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgPartyRemoveFromStandbyQueue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgPartyRemoveFromStandbyQueue& from);
  void MergeFrom(const CMsgPartyRemoveFromStandbyQueue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgPartyRemoveFromStandbyQueue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgPartyRemoveFromStandbyQueue";
  }
  protected:
  explicit CMsgPartyRemoveFromStandbyQueue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartyIdFieldNumber = 1,
  };
  // optional fixed64 party_id = 1;
  bool has_party_id() const;
  private:
  bool _internal_has_party_id() const;
  public:
  void clear_party_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 party_id() const;
  void set_party_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_party_id() const;
  void _internal_set_party_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgPartyRemoveFromStandbyQueue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 party_id_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgPartyRemoveFromStandbyQueueResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgPartyRemoveFromStandbyQueueResponse) */ {
 public:
  inline CMsgPartyRemoveFromStandbyQueueResponse() : CMsgPartyRemoveFromStandbyQueueResponse(nullptr) {}
  ~CMsgPartyRemoveFromStandbyQueueResponse() override;
  explicit constexpr CMsgPartyRemoveFromStandbyQueueResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgPartyRemoveFromStandbyQueueResponse(const CMsgPartyRemoveFromStandbyQueueResponse& from);
  CMsgPartyRemoveFromStandbyQueueResponse(CMsgPartyRemoveFromStandbyQueueResponse&& from) noexcept
    : CMsgPartyRemoveFromStandbyQueueResponse() {
    *this = ::std::move(from);
  }

  inline CMsgPartyRemoveFromStandbyQueueResponse& operator=(const CMsgPartyRemoveFromStandbyQueueResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgPartyRemoveFromStandbyQueueResponse& operator=(CMsgPartyRemoveFromStandbyQueueResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgPartyRemoveFromStandbyQueueResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgPartyRemoveFromStandbyQueueResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgPartyRemoveFromStandbyQueueResponse*>(
               &_CMsgPartyRemoveFromStandbyQueueResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  friend void swap(CMsgPartyRemoveFromStandbyQueueResponse& a, CMsgPartyRemoveFromStandbyQueueResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgPartyRemoveFromStandbyQueueResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgPartyRemoveFromStandbyQueueResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgPartyRemoveFromStandbyQueueResponse* New() const final {
    return new CMsgPartyRemoveFromStandbyQueueResponse();
  }

  CMsgPartyRemoveFromStandbyQueueResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgPartyRemoveFromStandbyQueueResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgPartyRemoveFromStandbyQueueResponse& from);
  void MergeFrom(const CMsgPartyRemoveFromStandbyQueueResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgPartyRemoveFromStandbyQueueResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgPartyRemoveFromStandbyQueueResponse";
  }
  protected:
  explicit CMsgPartyRemoveFromStandbyQueueResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgPartyRemoveFromStandbyQueueResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgPartyInvitePlayer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgPartyInvitePlayer) */ {
 public:
  inline CMsgPartyInvitePlayer() : CMsgPartyInvitePlayer(nullptr) {}
  ~CMsgPartyInvitePlayer() override;
  explicit constexpr CMsgPartyInvitePlayer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgPartyInvitePlayer(const CMsgPartyInvitePlayer& from);
  CMsgPartyInvitePlayer(CMsgPartyInvitePlayer&& from) noexcept
    : CMsgPartyInvitePlayer() {
    *this = ::std::move(from);
  }

  inline CMsgPartyInvitePlayer& operator=(const CMsgPartyInvitePlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgPartyInvitePlayer& operator=(CMsgPartyInvitePlayer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgPartyInvitePlayer& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgPartyInvitePlayer* internal_default_instance() {
    return reinterpret_cast<const CMsgPartyInvitePlayer*>(
               &_CMsgPartyInvitePlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  friend void swap(CMsgPartyInvitePlayer& a, CMsgPartyInvitePlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgPartyInvitePlayer* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgPartyInvitePlayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgPartyInvitePlayer* New() const final {
    return new CMsgPartyInvitePlayer();
  }

  CMsgPartyInvitePlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgPartyInvitePlayer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgPartyInvitePlayer& from);
  void MergeFrom(const CMsgPartyInvitePlayer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgPartyInvitePlayer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgPartyInvitePlayer";
  }
  protected:
  explicit CMsgPartyInvitePlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartyIdFieldNumber = 1,
    kPlayerIdFieldNumber = 2,
    kExpectingRequestToJoinFieldNumber = 3,
  };
  // optional fixed64 party_id = 1;
  bool has_party_id() const;
  private:
  bool _internal_has_party_id() const;
  public:
  void clear_party_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 party_id() const;
  void set_party_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_party_id() const;
  void _internal_set_party_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional fixed64 player_id = 2;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 player_id() const;
  void set_player_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_player_id() const;
  void _internal_set_player_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional bool expecting_request_to_join = 3;
  bool has_expecting_request_to_join() const;
  private:
  bool _internal_has_expecting_request_to_join() const;
  public:
  void clear_expecting_request_to_join();
  bool expecting_request_to_join() const;
  void set_expecting_request_to_join(bool value);
  private:
  bool _internal_expecting_request_to_join() const;
  void _internal_set_expecting_request_to_join(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgPartyInvitePlayer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 party_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 player_id_;
  bool expecting_request_to_join_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgPartyRequestJoinPlayer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgPartyRequestJoinPlayer) */ {
 public:
  inline CMsgPartyRequestJoinPlayer() : CMsgPartyRequestJoinPlayer(nullptr) {}
  ~CMsgPartyRequestJoinPlayer() override;
  explicit constexpr CMsgPartyRequestJoinPlayer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgPartyRequestJoinPlayer(const CMsgPartyRequestJoinPlayer& from);
  CMsgPartyRequestJoinPlayer(CMsgPartyRequestJoinPlayer&& from) noexcept
    : CMsgPartyRequestJoinPlayer() {
    *this = ::std::move(from);
  }

  inline CMsgPartyRequestJoinPlayer& operator=(const CMsgPartyRequestJoinPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgPartyRequestJoinPlayer& operator=(CMsgPartyRequestJoinPlayer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgPartyRequestJoinPlayer& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgPartyRequestJoinPlayer* internal_default_instance() {
    return reinterpret_cast<const CMsgPartyRequestJoinPlayer*>(
               &_CMsgPartyRequestJoinPlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  friend void swap(CMsgPartyRequestJoinPlayer& a, CMsgPartyRequestJoinPlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgPartyRequestJoinPlayer* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgPartyRequestJoinPlayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgPartyRequestJoinPlayer* New() const final {
    return new CMsgPartyRequestJoinPlayer();
  }

  CMsgPartyRequestJoinPlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgPartyRequestJoinPlayer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgPartyRequestJoinPlayer& from);
  void MergeFrom(const CMsgPartyRequestJoinPlayer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgPartyRequestJoinPlayer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgPartyRequestJoinPlayer";
  }
  protected:
  explicit CMsgPartyRequestJoinPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrentPartyIdFieldNumber = 1,
    kJoinPlayerIdFieldNumber = 2,
    kJoinPartyIdFieldNumber = 3,
    kExpectingInviteFieldNumber = 4,
  };
  // optional fixed64 current_party_id = 1;
  bool has_current_party_id() const;
  private:
  bool _internal_has_current_party_id() const;
  public:
  void clear_current_party_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 current_party_id() const;
  void set_current_party_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_current_party_id() const;
  void _internal_set_current_party_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional fixed64 join_player_id = 2;
  bool has_join_player_id() const;
  private:
  bool _internal_has_join_player_id() const;
  public:
  void clear_join_player_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 join_player_id() const;
  void set_join_player_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_join_player_id() const;
  void _internal_set_join_player_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional fixed64 join_party_id = 3;
  bool has_join_party_id() const;
  private:
  bool _internal_has_join_party_id() const;
  public:
  void clear_join_party_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 join_party_id() const;
  void set_join_party_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_join_party_id() const;
  void _internal_set_join_party_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional bool expecting_invite = 4;
  bool has_expecting_invite() const;
  private:
  bool _internal_has_expecting_invite() const;
  public:
  void clear_expecting_invite();
  bool expecting_invite() const;
  void set_expecting_invite(bool value);
  private:
  bool _internal_expecting_invite() const;
  void _internal_set_expecting_invite(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgPartyRequestJoinPlayer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 current_party_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 join_player_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 join_party_id_;
  bool expecting_invite_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgPartyClearPendingPlayer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgPartyClearPendingPlayer) */ {
 public:
  inline CMsgPartyClearPendingPlayer() : CMsgPartyClearPendingPlayer(nullptr) {}
  ~CMsgPartyClearPendingPlayer() override;
  explicit constexpr CMsgPartyClearPendingPlayer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgPartyClearPendingPlayer(const CMsgPartyClearPendingPlayer& from);
  CMsgPartyClearPendingPlayer(CMsgPartyClearPendingPlayer&& from) noexcept
    : CMsgPartyClearPendingPlayer() {
    *this = ::std::move(from);
  }

  inline CMsgPartyClearPendingPlayer& operator=(const CMsgPartyClearPendingPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgPartyClearPendingPlayer& operator=(CMsgPartyClearPendingPlayer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgPartyClearPendingPlayer& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgPartyClearPendingPlayer* internal_default_instance() {
    return reinterpret_cast<const CMsgPartyClearPendingPlayer*>(
               &_CMsgPartyClearPendingPlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  friend void swap(CMsgPartyClearPendingPlayer& a, CMsgPartyClearPendingPlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgPartyClearPendingPlayer* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgPartyClearPendingPlayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgPartyClearPendingPlayer* New() const final {
    return new CMsgPartyClearPendingPlayer();
  }

  CMsgPartyClearPendingPlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgPartyClearPendingPlayer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgPartyClearPendingPlayer& from);
  void MergeFrom(const CMsgPartyClearPendingPlayer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgPartyClearPendingPlayer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgPartyClearPendingPlayer";
  }
  protected:
  explicit CMsgPartyClearPendingPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartyIdFieldNumber = 1,
    kPendingPlayerIdFieldNumber = 2,
  };
  // optional fixed64 party_id = 1;
  bool has_party_id() const;
  private:
  bool _internal_has_party_id() const;
  public:
  void clear_party_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 party_id() const;
  void set_party_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_party_id() const;
  void _internal_set_party_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional fixed64 pending_player_id = 2;
  bool has_pending_player_id() const;
  private:
  bool _internal_has_pending_player_id() const;
  public:
  void clear_pending_player_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 pending_player_id() const;
  void set_pending_player_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_pending_player_id() const;
  void _internal_set_pending_player_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgPartyClearPendingPlayer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 party_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 pending_player_id_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgPartyClearPendingPlayerResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgPartyClearPendingPlayerResponse) */ {
 public:
  inline CMsgPartyClearPendingPlayerResponse() : CMsgPartyClearPendingPlayerResponse(nullptr) {}
  ~CMsgPartyClearPendingPlayerResponse() override;
  explicit constexpr CMsgPartyClearPendingPlayerResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgPartyClearPendingPlayerResponse(const CMsgPartyClearPendingPlayerResponse& from);
  CMsgPartyClearPendingPlayerResponse(CMsgPartyClearPendingPlayerResponse&& from) noexcept
    : CMsgPartyClearPendingPlayerResponse() {
    *this = ::std::move(from);
  }

  inline CMsgPartyClearPendingPlayerResponse& operator=(const CMsgPartyClearPendingPlayerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgPartyClearPendingPlayerResponse& operator=(CMsgPartyClearPendingPlayerResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgPartyClearPendingPlayerResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgPartyClearPendingPlayerResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgPartyClearPendingPlayerResponse*>(
               &_CMsgPartyClearPendingPlayerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  friend void swap(CMsgPartyClearPendingPlayerResponse& a, CMsgPartyClearPendingPlayerResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgPartyClearPendingPlayerResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgPartyClearPendingPlayerResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgPartyClearPendingPlayerResponse* New() const final {
    return new CMsgPartyClearPendingPlayerResponse();
  }

  CMsgPartyClearPendingPlayerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgPartyClearPendingPlayerResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgPartyClearPendingPlayerResponse& from);
  void MergeFrom(const CMsgPartyClearPendingPlayerResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgPartyClearPendingPlayerResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgPartyClearPendingPlayerResponse";
  }
  protected:
  explicit CMsgPartyClearPendingPlayerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgPartyClearPendingPlayerResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgPartyClearOtherPartyRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgPartyClearOtherPartyRequest) */ {
 public:
  inline CMsgPartyClearOtherPartyRequest() : CMsgPartyClearOtherPartyRequest(nullptr) {}
  ~CMsgPartyClearOtherPartyRequest() override;
  explicit constexpr CMsgPartyClearOtherPartyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgPartyClearOtherPartyRequest(const CMsgPartyClearOtherPartyRequest& from);
  CMsgPartyClearOtherPartyRequest(CMsgPartyClearOtherPartyRequest&& from) noexcept
    : CMsgPartyClearOtherPartyRequest() {
    *this = ::std::move(from);
  }

  inline CMsgPartyClearOtherPartyRequest& operator=(const CMsgPartyClearOtherPartyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgPartyClearOtherPartyRequest& operator=(CMsgPartyClearOtherPartyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgPartyClearOtherPartyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgPartyClearOtherPartyRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgPartyClearOtherPartyRequest*>(
               &_CMsgPartyClearOtherPartyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  friend void swap(CMsgPartyClearOtherPartyRequest& a, CMsgPartyClearOtherPartyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgPartyClearOtherPartyRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgPartyClearOtherPartyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgPartyClearOtherPartyRequest* New() const final {
    return new CMsgPartyClearOtherPartyRequest();
  }

  CMsgPartyClearOtherPartyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgPartyClearOtherPartyRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgPartyClearOtherPartyRequest& from);
  void MergeFrom(const CMsgPartyClearOtherPartyRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgPartyClearOtherPartyRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgPartyClearOtherPartyRequest";
  }
  protected:
  explicit CMsgPartyClearOtherPartyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOtherPartyIdFieldNumber = 1,
  };
  // optional fixed64 other_party_id = 1;
  bool has_other_party_id() const;
  private:
  bool _internal_has_other_party_id() const;
  public:
  void clear_other_party_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 other_party_id() const;
  void set_other_party_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_other_party_id() const;
  void _internal_set_other_party_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgPartyClearOtherPartyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 other_party_id_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgPartyClearOtherPartyRequestResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgPartyClearOtherPartyRequestResponse) */ {
 public:
  inline CMsgPartyClearOtherPartyRequestResponse() : CMsgPartyClearOtherPartyRequestResponse(nullptr) {}
  ~CMsgPartyClearOtherPartyRequestResponse() override;
  explicit constexpr CMsgPartyClearOtherPartyRequestResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgPartyClearOtherPartyRequestResponse(const CMsgPartyClearOtherPartyRequestResponse& from);
  CMsgPartyClearOtherPartyRequestResponse(CMsgPartyClearOtherPartyRequestResponse&& from) noexcept
    : CMsgPartyClearOtherPartyRequestResponse() {
    *this = ::std::move(from);
  }

  inline CMsgPartyClearOtherPartyRequestResponse& operator=(const CMsgPartyClearOtherPartyRequestResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgPartyClearOtherPartyRequestResponse& operator=(CMsgPartyClearOtherPartyRequestResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgPartyClearOtherPartyRequestResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgPartyClearOtherPartyRequestResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgPartyClearOtherPartyRequestResponse*>(
               &_CMsgPartyClearOtherPartyRequestResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  friend void swap(CMsgPartyClearOtherPartyRequestResponse& a, CMsgPartyClearOtherPartyRequestResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgPartyClearOtherPartyRequestResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgPartyClearOtherPartyRequestResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgPartyClearOtherPartyRequestResponse* New() const final {
    return new CMsgPartyClearOtherPartyRequestResponse();
  }

  CMsgPartyClearOtherPartyRequestResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgPartyClearOtherPartyRequestResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgPartyClearOtherPartyRequestResponse& from);
  void MergeFrom(const CMsgPartyClearOtherPartyRequestResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgPartyClearOtherPartyRequestResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgPartyClearOtherPartyRequestResponse";
  }
  protected:
  explicit CMsgPartyClearOtherPartyRequestResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgPartyClearOtherPartyRequestResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgPartyPromoteToLeader final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgPartyPromoteToLeader) */ {
 public:
  inline CMsgPartyPromoteToLeader() : CMsgPartyPromoteToLeader(nullptr) {}
  ~CMsgPartyPromoteToLeader() override;
  explicit constexpr CMsgPartyPromoteToLeader(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgPartyPromoteToLeader(const CMsgPartyPromoteToLeader& from);
  CMsgPartyPromoteToLeader(CMsgPartyPromoteToLeader&& from) noexcept
    : CMsgPartyPromoteToLeader() {
    *this = ::std::move(from);
  }

  inline CMsgPartyPromoteToLeader& operator=(const CMsgPartyPromoteToLeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgPartyPromoteToLeader& operator=(CMsgPartyPromoteToLeader&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgPartyPromoteToLeader& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgPartyPromoteToLeader* internal_default_instance() {
    return reinterpret_cast<const CMsgPartyPromoteToLeader*>(
               &_CMsgPartyPromoteToLeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    82;

  friend void swap(CMsgPartyPromoteToLeader& a, CMsgPartyPromoteToLeader& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgPartyPromoteToLeader* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgPartyPromoteToLeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgPartyPromoteToLeader* New() const final {
    return new CMsgPartyPromoteToLeader();
  }

  CMsgPartyPromoteToLeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgPartyPromoteToLeader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgPartyPromoteToLeader& from);
  void MergeFrom(const CMsgPartyPromoteToLeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgPartyPromoteToLeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgPartyPromoteToLeader";
  }
  protected:
  explicit CMsgPartyPromoteToLeader(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartyIdFieldNumber = 1,
    kNewLeaderIdFieldNumber = 2,
  };
  // optional fixed64 party_id = 1;
  bool has_party_id() const;
  private:
  bool _internal_has_party_id() const;
  public:
  void clear_party_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 party_id() const;
  void set_party_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_party_id() const;
  void _internal_set_party_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional fixed64 new_leader_id = 2;
  bool has_new_leader_id() const;
  private:
  bool _internal_has_new_leader_id() const;
  public:
  void clear_new_leader_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 new_leader_id() const;
  void set_new_leader_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_new_leader_id() const;
  void _internal_set_new_leader_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgPartyPromoteToLeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 party_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 new_leader_id_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgPartyKickMember final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgPartyKickMember) */ {
 public:
  inline CMsgPartyKickMember() : CMsgPartyKickMember(nullptr) {}
  ~CMsgPartyKickMember() override;
  explicit constexpr CMsgPartyKickMember(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgPartyKickMember(const CMsgPartyKickMember& from);
  CMsgPartyKickMember(CMsgPartyKickMember&& from) noexcept
    : CMsgPartyKickMember() {
    *this = ::std::move(from);
  }

  inline CMsgPartyKickMember& operator=(const CMsgPartyKickMember& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgPartyKickMember& operator=(CMsgPartyKickMember&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgPartyKickMember& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgPartyKickMember* internal_default_instance() {
    return reinterpret_cast<const CMsgPartyKickMember*>(
               &_CMsgPartyKickMember_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    83;

  friend void swap(CMsgPartyKickMember& a, CMsgPartyKickMember& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgPartyKickMember* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgPartyKickMember* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgPartyKickMember* New() const final {
    return new CMsgPartyKickMember();
  }

  CMsgPartyKickMember* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgPartyKickMember>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgPartyKickMember& from);
  void MergeFrom(const CMsgPartyKickMember& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgPartyKickMember* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgPartyKickMember";
  }
  protected:
  explicit CMsgPartyKickMember(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartyIdFieldNumber = 1,
    kTargetIdFieldNumber = 2,
  };
  // optional fixed64 party_id = 1;
  bool has_party_id() const;
  private:
  bool _internal_has_party_id() const;
  public:
  void clear_party_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 party_id() const;
  void set_party_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_party_id() const;
  void _internal_set_party_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional fixed64 target_id = 2;
  bool has_target_id() const;
  private:
  bool _internal_has_target_id() const;
  public:
  void clear_target_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 target_id() const;
  void set_target_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_target_id() const;
  void _internal_set_target_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgPartyKickMember)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 party_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 target_id_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgPartySendChat final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgPartySendChat) */ {
 public:
  inline CMsgPartySendChat() : CMsgPartySendChat(nullptr) {}
  ~CMsgPartySendChat() override;
  explicit constexpr CMsgPartySendChat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgPartySendChat(const CMsgPartySendChat& from);
  CMsgPartySendChat(CMsgPartySendChat&& from) noexcept
    : CMsgPartySendChat() {
    *this = ::std::move(from);
  }

  inline CMsgPartySendChat& operator=(const CMsgPartySendChat& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgPartySendChat& operator=(CMsgPartySendChat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgPartySendChat& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgPartySendChat* internal_default_instance() {
    return reinterpret_cast<const CMsgPartySendChat*>(
               &_CMsgPartySendChat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    84;

  friend void swap(CMsgPartySendChat& a, CMsgPartySendChat& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgPartySendChat* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgPartySendChat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgPartySendChat* New() const final {
    return new CMsgPartySendChat();
  }

  CMsgPartySendChat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgPartySendChat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgPartySendChat& from);
  void MergeFrom(const CMsgPartySendChat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgPartySendChat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgPartySendChat";
  }
  protected:
  explicit CMsgPartySendChat(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kPartyIdFieldNumber = 1,
  };
  // optional string msg = 2;
  bool has_msg() const;
  private:
  bool _internal_has_msg() const;
  public:
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // optional fixed64 party_id = 1;
  bool has_party_id() const;
  private:
  bool _internal_has_party_id() const;
  public:
  void clear_party_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 party_id() const;
  void set_party_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_party_id() const;
  void _internal_set_party_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgPartySendChat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::uint64 party_id_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgPartyChatMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgPartyChatMsg) */ {
 public:
  inline CMsgPartyChatMsg() : CMsgPartyChatMsg(nullptr) {}
  ~CMsgPartyChatMsg() override;
  explicit constexpr CMsgPartyChatMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgPartyChatMsg(const CMsgPartyChatMsg& from);
  CMsgPartyChatMsg(CMsgPartyChatMsg&& from) noexcept
    : CMsgPartyChatMsg() {
    *this = ::std::move(from);
  }

  inline CMsgPartyChatMsg& operator=(const CMsgPartyChatMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgPartyChatMsg& operator=(CMsgPartyChatMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgPartyChatMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgPartyChatMsg* internal_default_instance() {
    return reinterpret_cast<const CMsgPartyChatMsg*>(
               &_CMsgPartyChatMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    85;

  friend void swap(CMsgPartyChatMsg& a, CMsgPartyChatMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgPartyChatMsg* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgPartyChatMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgPartyChatMsg* New() const final {
    return new CMsgPartyChatMsg();
  }

  CMsgPartyChatMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgPartyChatMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgPartyChatMsg& from);
  void MergeFrom(const CMsgPartyChatMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgPartyChatMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgPartyChatMsg";
  }
  protected:
  explicit CMsgPartyChatMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 3,
    kActorIdFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // optional string msg = 3;
  bool has_msg() const;
  private:
  bool _internal_has_msg() const;
  public:
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // optional fixed64 actor_id = 2;
  bool has_actor_id() const;
  private:
  bool _internal_has_actor_id() const;
  public:
  void clear_actor_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 actor_id() const;
  void set_actor_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_actor_id() const;
  void _internal_set_actor_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional .ETFPartyChatType type = 1 [default = k_eTFPartyChatType_Invalid];
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::ETFPartyChatType type() const;
  void set_type(::ETFPartyChatType value);
  private:
  ::ETFPartyChatType _internal_type() const;
  void _internal_set_type(::ETFPartyChatType value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgPartyChatMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::uint64 actor_id_;
  int type_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CSOTFParty_QueueEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSOTFParty.QueueEntry) */ {
 public:
  inline CSOTFParty_QueueEntry() : CSOTFParty_QueueEntry(nullptr) {}
  ~CSOTFParty_QueueEntry() override;
  explicit constexpr CSOTFParty_QueueEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSOTFParty_QueueEntry(const CSOTFParty_QueueEntry& from);
  CSOTFParty_QueueEntry(CSOTFParty_QueueEntry&& from) noexcept
    : CSOTFParty_QueueEntry() {
    *this = ::std::move(from);
  }

  inline CSOTFParty_QueueEntry& operator=(const CSOTFParty_QueueEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSOTFParty_QueueEntry& operator=(CSOTFParty_QueueEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSOTFParty_QueueEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSOTFParty_QueueEntry* internal_default_instance() {
    return reinterpret_cast<const CSOTFParty_QueueEntry*>(
               &_CSOTFParty_QueueEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    86;

  friend void swap(CSOTFParty_QueueEntry& a, CSOTFParty_QueueEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(CSOTFParty_QueueEntry* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSOTFParty_QueueEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSOTFParty_QueueEntry* New() const final {
    return new CSOTFParty_QueueEntry();
  }

  CSOTFParty_QueueEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSOTFParty_QueueEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSOTFParty_QueueEntry& from);
  void MergeFrom(const CSOTFParty_QueueEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSOTFParty_QueueEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSOTFParty.QueueEntry";
  }
  protected:
  explicit CSOTFParty_QueueEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueuedTimeFieldNumber = 2,
    kMatchGroupFieldNumber = 1,
  };
  // optional fixed32 queued_time = 2;
  bool has_queued_time() const;
  private:
  bool _internal_has_queued_time() const;
  public:
  void clear_queued_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 queued_time() const;
  void set_queued_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_queued_time() const;
  void _internal_set_queued_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .ETFMatchGroup match_group = 1 [default = k_eTFMatchGroup_Invalid];
  bool has_match_group() const;
  private:
  bool _internal_has_match_group() const;
  public:
  void clear_match_group();
  ::ETFMatchGroup match_group() const;
  void set_match_group(::ETFMatchGroup value);
  private:
  ::ETFMatchGroup _internal_match_group() const;
  void _internal_set_match_group(::ETFMatchGroup value);
  public:

  // @@protoc_insertion_point(class_scope:CSOTFParty.QueueEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 queued_time_;
  int match_group_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CSOTFParty final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSOTFParty) */ {
 public:
  inline CSOTFParty() : CSOTFParty(nullptr) {}
  ~CSOTFParty() override;
  explicit constexpr CSOTFParty(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSOTFParty(const CSOTFParty& from);
  CSOTFParty(CSOTFParty&& from) noexcept
    : CSOTFParty() {
    *this = ::std::move(from);
  }

  inline CSOTFParty& operator=(const CSOTFParty& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSOTFParty& operator=(CSOTFParty&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSOTFParty& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSOTFParty* internal_default_instance() {
    return reinterpret_cast<const CSOTFParty*>(
               &_CSOTFParty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    87;

  friend void swap(CSOTFParty& a, CSOTFParty& b) {
    a.Swap(&b);
  }
  inline void Swap(CSOTFParty* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSOTFParty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSOTFParty* New() const final {
    return new CSOTFParty();
  }

  CSOTFParty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSOTFParty>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSOTFParty& from);
  void MergeFrom(const CSOTFParty& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSOTFParty* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSOTFParty";
  }
  protected:
  explicit CSOTFParty(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CSOTFParty_QueueEntry QueueEntry;

  // accessors -------------------------------------------------------

  enum : int {
    kMemberIdsFieldNumber = 3,
    kMembersFieldNumber = 13,
    kPendingMembersFieldNumber = 39,
    kMatchmakingQueuesFieldNumber = 43,
    kGroupCriteriaFieldNumber = 37,
    kLeaderUiStateFieldNumber = 44,
    kPartyIdFieldNumber = 1,
    kLeaderIdFieldNumber = 2,
    kCasualBannedTimeFieldNumber = 18,
    kCasualLowPriorityTimeFieldNumber = 20,
    kAssociatedLobbyIdFieldNumber = 35,
    kRankedBannedTimeFieldNumber = 41,
    kRankedLowPriorityTimeFieldNumber = 42,
    kAssociatedLobbyMatchGroupFieldNumber = 40,
  };
  // repeated fixed64 member_ids = 3;
  int member_ids_size() const;
  private:
  int _internal_member_ids_size() const;
  public:
  void clear_member_ids();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_member_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_member_ids() const;
  void _internal_add_member_ids(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_member_ids();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 member_ids(int index) const;
  void set_member_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_member_ids(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      member_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_member_ids();

  // repeated .CSOTFPartyMember members = 13;
  int members_size() const;
  private:
  int _internal_members_size() const;
  public:
  void clear_members();
  ::CSOTFPartyMember* mutable_members(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSOTFPartyMember >*
      mutable_members();
  private:
  const ::CSOTFPartyMember& _internal_members(int index) const;
  ::CSOTFPartyMember* _internal_add_members();
  public:
  const ::CSOTFPartyMember& members(int index) const;
  ::CSOTFPartyMember* add_members();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSOTFPartyMember >&
      members() const;

  // repeated .TFPendingPartyMember pending_members = 39;
  int pending_members_size() const;
  private:
  int _internal_pending_members_size() const;
  public:
  void clear_pending_members();
  ::TFPendingPartyMember* mutable_pending_members(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TFPendingPartyMember >*
      mutable_pending_members();
  private:
  const ::TFPendingPartyMember& _internal_pending_members(int index) const;
  ::TFPendingPartyMember* _internal_add_pending_members();
  public:
  const ::TFPendingPartyMember& pending_members(int index) const;
  ::TFPendingPartyMember* add_pending_members();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TFPendingPartyMember >&
      pending_members() const;

  // repeated .CSOTFParty.QueueEntry matchmaking_queues = 43;
  int matchmaking_queues_size() const;
  private:
  int _internal_matchmaking_queues_size() const;
  public:
  void clear_matchmaking_queues();
  ::CSOTFParty_QueueEntry* mutable_matchmaking_queues(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSOTFParty_QueueEntry >*
      mutable_matchmaking_queues();
  private:
  const ::CSOTFParty_QueueEntry& _internal_matchmaking_queues(int index) const;
  ::CSOTFParty_QueueEntry* _internal_add_matchmaking_queues();
  public:
  const ::CSOTFParty_QueueEntry& matchmaking_queues(int index) const;
  ::CSOTFParty_QueueEntry* add_matchmaking_queues();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSOTFParty_QueueEntry >&
      matchmaking_queues() const;

  // optional .CTFGroupMatchCriteriaProto group_criteria = 37;
  bool has_group_criteria() const;
  private:
  bool _internal_has_group_criteria() const;
  public:
  void clear_group_criteria();
  const ::CTFGroupMatchCriteriaProto& group_criteria() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CTFGroupMatchCriteriaProto* release_group_criteria();
  ::CTFGroupMatchCriteriaProto* mutable_group_criteria();
  void set_allocated_group_criteria(::CTFGroupMatchCriteriaProto* group_criteria);
  private:
  const ::CTFGroupMatchCriteriaProto& _internal_group_criteria() const;
  ::CTFGroupMatchCriteriaProto* _internal_mutable_group_criteria();
  public:
  void unsafe_arena_set_allocated_group_criteria(
      ::CTFGroupMatchCriteriaProto* group_criteria);
  ::CTFGroupMatchCriteriaProto* unsafe_arena_release_group_criteria();

  // optional .TFSyncedMMUIState leader_ui_state = 44;
  bool has_leader_ui_state() const;
  private:
  bool _internal_has_leader_ui_state() const;
  public:
  void clear_leader_ui_state();
  const ::TFSyncedMMUIState& leader_ui_state() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TFSyncedMMUIState* release_leader_ui_state();
  ::TFSyncedMMUIState* mutable_leader_ui_state();
  void set_allocated_leader_ui_state(::TFSyncedMMUIState* leader_ui_state);
  private:
  const ::TFSyncedMMUIState& _internal_leader_ui_state() const;
  ::TFSyncedMMUIState* _internal_mutable_leader_ui_state();
  public:
  void unsafe_arena_set_allocated_leader_ui_state(
      ::TFSyncedMMUIState* leader_ui_state);
  ::TFSyncedMMUIState* unsafe_arena_release_leader_ui_state();

  // optional uint64 party_id = 1 [(.key_field) = true];
  bool has_party_id() const;
  private:
  bool _internal_has_party_id() const;
  public:
  void clear_party_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 party_id() const;
  void set_party_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_party_id() const;
  void _internal_set_party_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional fixed64 leader_id = 2;
  bool has_leader_id() const;
  private:
  bool _internal_has_leader_id() const;
  public:
  void clear_leader_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 leader_id() const;
  void set_leader_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_leader_id() const;
  void _internal_set_leader_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 casual_banned_time = 18;
  bool has_casual_banned_time() const;
  private:
  bool _internal_has_casual_banned_time() const;
  public:
  void clear_casual_banned_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 casual_banned_time() const;
  void set_casual_banned_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_casual_banned_time() const;
  void _internal_set_casual_banned_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 casual_low_priority_time = 20;
  bool has_casual_low_priority_time() const;
  private:
  bool _internal_has_casual_low_priority_time() const;
  public:
  void clear_casual_low_priority_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 casual_low_priority_time() const;
  void set_casual_low_priority_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_casual_low_priority_time() const;
  void _internal_set_casual_low_priority_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 associated_lobby_id = 35;
  bool has_associated_lobby_id() const;
  private:
  bool _internal_has_associated_lobby_id() const;
  public:
  void clear_associated_lobby_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 associated_lobby_id() const;
  void set_associated_lobby_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_associated_lobby_id() const;
  void _internal_set_associated_lobby_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 ranked_banned_time = 41;
  bool has_ranked_banned_time() const;
  private:
  bool _internal_has_ranked_banned_time() const;
  public:
  void clear_ranked_banned_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 ranked_banned_time() const;
  void set_ranked_banned_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ranked_banned_time() const;
  void _internal_set_ranked_banned_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 ranked_low_priority_time = 42;
  bool has_ranked_low_priority_time() const;
  private:
  bool _internal_has_ranked_low_priority_time() const;
  public:
  void clear_ranked_low_priority_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 ranked_low_priority_time() const;
  void set_ranked_low_priority_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ranked_low_priority_time() const;
  void _internal_set_ranked_low_priority_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .ETFMatchGroup associated_lobby_match_group = 40 [default = k_eTFMatchGroup_Invalid];
  bool has_associated_lobby_match_group() const;
  private:
  bool _internal_has_associated_lobby_match_group() const;
  public:
  void clear_associated_lobby_match_group();
  ::ETFMatchGroup associated_lobby_match_group() const;
  void set_associated_lobby_match_group(::ETFMatchGroup value);
  private:
  ::ETFMatchGroup _internal_associated_lobby_match_group() const;
  void _internal_set_associated_lobby_match_group(::ETFMatchGroup value);
  public:

  // @@protoc_insertion_point(class_scope:CSOTFParty)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > member_ids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSOTFPartyMember > members_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TFPendingPartyMember > pending_members_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSOTFParty_QueueEntry > matchmaking_queues_;
  ::CTFGroupMatchCriteriaProto* group_criteria_;
  ::TFSyncedMMUIState* leader_ui_state_;
  ::PROTOBUF_NAMESPACE_ID::uint64 party_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 leader_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 casual_banned_time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 casual_low_priority_time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 associated_lobby_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ranked_banned_time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ranked_low_priority_time_;
  int associated_lobby_match_group_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CSOTFPartyInvite_PartyMember final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSOTFPartyInvite.PartyMember) */ {
 public:
  inline CSOTFPartyInvite_PartyMember() : CSOTFPartyInvite_PartyMember(nullptr) {}
  ~CSOTFPartyInvite_PartyMember() override;
  explicit constexpr CSOTFPartyInvite_PartyMember(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSOTFPartyInvite_PartyMember(const CSOTFPartyInvite_PartyMember& from);
  CSOTFPartyInvite_PartyMember(CSOTFPartyInvite_PartyMember&& from) noexcept
    : CSOTFPartyInvite_PartyMember() {
    *this = ::std::move(from);
  }

  inline CSOTFPartyInvite_PartyMember& operator=(const CSOTFPartyInvite_PartyMember& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSOTFPartyInvite_PartyMember& operator=(CSOTFPartyInvite_PartyMember&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSOTFPartyInvite_PartyMember& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSOTFPartyInvite_PartyMember* internal_default_instance() {
    return reinterpret_cast<const CSOTFPartyInvite_PartyMember*>(
               &_CSOTFPartyInvite_PartyMember_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    88;

  friend void swap(CSOTFPartyInvite_PartyMember& a, CSOTFPartyInvite_PartyMember& b) {
    a.Swap(&b);
  }
  inline void Swap(CSOTFPartyInvite_PartyMember* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSOTFPartyInvite_PartyMember* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSOTFPartyInvite_PartyMember* New() const final {
    return new CSOTFPartyInvite_PartyMember();
  }

  CSOTFPartyInvite_PartyMember* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSOTFPartyInvite_PartyMember>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSOTFPartyInvite_PartyMember& from);
  void MergeFrom(const CSOTFPartyInvite_PartyMember& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSOTFPartyInvite_PartyMember* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSOTFPartyInvite.PartyMember";
  }
  protected:
  explicit CSOTFPartyInvite_PartyMember(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamidFieldNumber = 2,
  };
  // optional fixed64 steamid = 2;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  ::PROTOBUF_NAMESPACE_ID::uint64 steamid() const;
  void set_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_steamid() const;
  void _internal_set_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CSOTFPartyInvite.PartyMember)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 steamid_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CSOTFPartyInvite final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSOTFPartyInvite) */ {
 public:
  inline CSOTFPartyInvite() : CSOTFPartyInvite(nullptr) {}
  ~CSOTFPartyInvite() override;
  explicit constexpr CSOTFPartyInvite(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSOTFPartyInvite(const CSOTFPartyInvite& from);
  CSOTFPartyInvite(CSOTFPartyInvite&& from) noexcept
    : CSOTFPartyInvite() {
    *this = ::std::move(from);
  }

  inline CSOTFPartyInvite& operator=(const CSOTFPartyInvite& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSOTFPartyInvite& operator=(CSOTFPartyInvite&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSOTFPartyInvite& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSOTFPartyInvite* internal_default_instance() {
    return reinterpret_cast<const CSOTFPartyInvite*>(
               &_CSOTFPartyInvite_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    89;

  friend void swap(CSOTFPartyInvite& a, CSOTFPartyInvite& b) {
    a.Swap(&b);
  }
  inline void Swap(CSOTFPartyInvite* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSOTFPartyInvite* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSOTFPartyInvite* New() const final {
    return new CSOTFPartyInvite();
  }

  CSOTFPartyInvite* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSOTFPartyInvite>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSOTFPartyInvite& from);
  void MergeFrom(const CSOTFPartyInvite& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSOTFPartyInvite* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSOTFPartyInvite";
  }
  protected:
  explicit CSOTFPartyInvite(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CSOTFPartyInvite_PartyMember PartyMember;

  typedef CSOTFPartyInvite_Type Type;
  static constexpr Type PENDING_INVITE =
    CSOTFPartyInvite_Type_PENDING_INVITE;
  static constexpr Type PENDING_JOIN_REQUEST =
    CSOTFPartyInvite_Type_PENDING_JOIN_REQUEST;
  static inline bool Type_IsValid(int value) {
    return CSOTFPartyInvite_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    CSOTFPartyInvite_Type_Type_MIN;
  static constexpr Type Type_MAX =
    CSOTFPartyInvite_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    CSOTFPartyInvite_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return CSOTFPartyInvite_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return CSOTFPartyInvite_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return CSOTFPartyInvite_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMembersFieldNumber = 4,
    kGroupIdFieldNumber = 1,
    kInviterFieldNumber = 2,
    kTypeFieldNumber = 5,
  };
  // repeated .CSOTFPartyInvite.PartyMember members = 4;
  int members_size() const;
  private:
  int _internal_members_size() const;
  public:
  void clear_members();
  ::CSOTFPartyInvite_PartyMember* mutable_members(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSOTFPartyInvite_PartyMember >*
      mutable_members();
  private:
  const ::CSOTFPartyInvite_PartyMember& _internal_members(int index) const;
  ::CSOTFPartyInvite_PartyMember* _internal_add_members();
  public:
  const ::CSOTFPartyInvite_PartyMember& members(int index) const;
  ::CSOTFPartyInvite_PartyMember* add_members();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSOTFPartyInvite_PartyMember >&
      members() const;

  // optional uint64 group_id = 1 [(.key_field) = true];
  bool has_group_id() const;
  private:
  bool _internal_has_group_id() const;
  public:
  void clear_group_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 group_id() const;
  void set_group_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_group_id() const;
  void _internal_set_group_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional fixed64 inviter = 2;
  bool has_inviter() const;
  private:
  bool _internal_has_inviter() const;
  public:
  void clear_inviter();
  ::PROTOBUF_NAMESPACE_ID::uint64 inviter() const;
  void set_inviter(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_inviter() const;
  void _internal_set_inviter(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional .CSOTFPartyInvite.Type type = 5 [default = PENDING_INVITE];
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::CSOTFPartyInvite_Type type() const;
  void set_type(::CSOTFPartyInvite_Type value);
  private:
  ::CSOTFPartyInvite_Type _internal_type() const;
  void _internal_set_type(::CSOTFPartyInvite_Type value);
  public:

  // @@protoc_insertion_point(class_scope:CSOTFPartyInvite)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSOTFPartyInvite_PartyMember > members_;
  ::PROTOBUF_NAMESPACE_ID::uint64 group_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 inviter_;
  int type_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CTFLobbyPlayerProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CTFLobbyPlayerProto) */ {
 public:
  inline CTFLobbyPlayerProto() : CTFLobbyPlayerProto(nullptr) {}
  ~CTFLobbyPlayerProto() override;
  explicit constexpr CTFLobbyPlayerProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CTFLobbyPlayerProto(const CTFLobbyPlayerProto& from);
  CTFLobbyPlayerProto(CTFLobbyPlayerProto&& from) noexcept
    : CTFLobbyPlayerProto() {
    *this = ::std::move(from);
  }

  inline CTFLobbyPlayerProto& operator=(const CTFLobbyPlayerProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline CTFLobbyPlayerProto& operator=(CTFLobbyPlayerProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CTFLobbyPlayerProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const CTFLobbyPlayerProto* internal_default_instance() {
    return reinterpret_cast<const CTFLobbyPlayerProto*>(
               &_CTFLobbyPlayerProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    90;

  friend void swap(CTFLobbyPlayerProto& a, CTFLobbyPlayerProto& b) {
    a.Swap(&b);
  }
  inline void Swap(CTFLobbyPlayerProto* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CTFLobbyPlayerProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CTFLobbyPlayerProto* New() const final {
    return new CTFLobbyPlayerProto();
  }

  CTFLobbyPlayerProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CTFLobbyPlayerProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CTFLobbyPlayerProto& from);
  void MergeFrom(const CTFLobbyPlayerProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CTFLobbyPlayerProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CTFLobbyPlayerProto";
  }
  protected:
  explicit CTFLobbyPlayerProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CTFLobbyPlayerProto_ConnectState ConnectState;
  static constexpr ConnectState INVALID =
    CTFLobbyPlayerProto_ConnectState_INVALID;
  static constexpr ConnectState RESERVATION_PENDING =
    CTFLobbyPlayerProto_ConnectState_RESERVATION_PENDING;
  static constexpr ConnectState RESERVED =
    CTFLobbyPlayerProto_ConnectState_RESERVED;
  static constexpr ConnectState CONNECTED =
    CTFLobbyPlayerProto_ConnectState_CONNECTED;
  static constexpr ConnectState DISCONNECTED =
    CTFLobbyPlayerProto_ConnectState_DISCONNECTED;
  static inline bool ConnectState_IsValid(int value) {
    return CTFLobbyPlayerProto_ConnectState_IsValid(value);
  }
  static constexpr ConnectState ConnectState_MIN =
    CTFLobbyPlayerProto_ConnectState_ConnectState_MIN;
  static constexpr ConnectState ConnectState_MAX =
    CTFLobbyPlayerProto_ConnectState_ConnectState_MAX;
  static constexpr int ConnectState_ARRAYSIZE =
    CTFLobbyPlayerProto_ConnectState_ConnectState_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ConnectState_descriptor() {
    return CTFLobbyPlayerProto_ConnectState_descriptor();
  }
  template<typename T>
  static inline const std::string& ConnectState_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ConnectState>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ConnectState_Name.");
    return CTFLobbyPlayerProto_ConnectState_Name(enum_t_value);
  }
  static inline bool ConnectState_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ConnectState* value) {
    return CTFLobbyPlayerProto_ConnectState_Parse(name, value);
  }

  typedef CTFLobbyPlayerProto_Type Type;
  static constexpr Type INVALID_PLAYER =
    CTFLobbyPlayerProto_Type_INVALID_PLAYER;
  static constexpr Type MATCH_PLAYER =
    CTFLobbyPlayerProto_Type_MATCH_PLAYER;
  static constexpr Type STANDBY_PLAYER =
    CTFLobbyPlayerProto_Type_STANDBY_PLAYER;
  static constexpr Type OBSERVING_PLAYER =
    CTFLobbyPlayerProto_Type_OBSERVING_PLAYER;
  static inline bool Type_IsValid(int value) {
    return CTFLobbyPlayerProto_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    CTFLobbyPlayerProto_Type_Type_MIN;
  static constexpr Type Type_MAX =
    CTFLobbyPlayerProto_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    CTFLobbyPlayerProto_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return CTFLobbyPlayerProto_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return CTFLobbyPlayerProto_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return CTFLobbyPlayerProto_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 6,
    kIdFieldNumber = 1,
    kTeamFieldNumber = 3,
    kConnectStateFieldNumber = 13,
    kOriginalPartyIdFieldNumber = 12,
    kRankFieldNumber = 21,
    kBadgeLevelFieldNumber = 15,
    kLastConnectTimeFieldNumber = 17,
    kSquadSurplusFieldNumber = 14,
    kChatSuspensionFieldNumber = 23,
    kTypeFieldNumber = 19,
    kNormalizedRatingFieldNumber = 20,
    kNormalizedUncertaintyFieldNumber = 22,
  };
  // optional string name = 6;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional fixed64 id = 1 [(.key_field) = true];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional .TF_GC_TEAM team = 3 [default = TF_GC_TEAM_DEFENDERS];
  bool has_team() const;
  private:
  bool _internal_has_team() const;
  public:
  void clear_team();
  ::TF_GC_TEAM team() const;
  void set_team(::TF_GC_TEAM value);
  private:
  ::TF_GC_TEAM _internal_team() const;
  void _internal_set_team(::TF_GC_TEAM value);
  public:

  // optional .CTFLobbyPlayerProto.ConnectState connect_state = 13 [default = INVALID];
  bool has_connect_state() const;
  private:
  bool _internal_has_connect_state() const;
  public:
  void clear_connect_state();
  ::CTFLobbyPlayerProto_ConnectState connect_state() const;
  void set_connect_state(::CTFLobbyPlayerProto_ConnectState value);
  private:
  ::CTFLobbyPlayerProto_ConnectState _internal_connect_state() const;
  void _internal_set_connect_state(::CTFLobbyPlayerProto_ConnectState value);
  public:

  // optional uint64 original_party_id = 12;
  bool has_original_party_id() const;
  private:
  bool _internal_has_original_party_id() const;
  public:
  void clear_original_party_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 original_party_id() const;
  void set_original_party_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_original_party_id() const;
  void _internal_set_original_party_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 rank = 21;
  bool has_rank() const;
  private:
  bool _internal_has_rank() const;
  public:
  void clear_rank();
  ::PROTOBUF_NAMESPACE_ID::uint32 rank() const;
  void set_rank(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rank() const;
  void _internal_set_rank(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 badge_level = 15;
  bool has_badge_level() const;
  private:
  bool _internal_has_badge_level() const;
  public:
  void clear_badge_level();
  ::PROTOBUF_NAMESPACE_ID::uint32 badge_level() const;
  void set_badge_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_badge_level() const;
  void _internal_set_badge_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 last_connect_time = 17;
  bool has_last_connect_time() const;
  private:
  bool _internal_has_last_connect_time() const;
  public:
  void clear_last_connect_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 last_connect_time() const;
  void set_last_connect_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_last_connect_time() const;
  void _internal_set_last_connect_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool squad_surplus = 14;
  bool has_squad_surplus() const;
  private:
  bool _internal_has_squad_surplus() const;
  public:
  void clear_squad_surplus();
  bool squad_surplus() const;
  void set_squad_surplus(bool value);
  private:
  bool _internal_squad_surplus() const;
  void _internal_set_squad_surplus(bool value);
  public:

  // optional bool chat_suspension = 23;
  bool has_chat_suspension() const;
  private:
  bool _internal_has_chat_suspension() const;
  public:
  void clear_chat_suspension();
  bool chat_suspension() const;
  void set_chat_suspension(bool value);
  private:
  bool _internal_chat_suspension() const;
  void _internal_set_chat_suspension(bool value);
  public:

  // optional .CTFLobbyPlayerProto.Type type = 19 [default = INVALID_PLAYER];
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::CTFLobbyPlayerProto_Type type() const;
  void set_type(::CTFLobbyPlayerProto_Type value);
  private:
  ::CTFLobbyPlayerProto_Type _internal_type() const;
  void _internal_set_type(::CTFLobbyPlayerProto_Type value);
  public:

  // optional double normalized_rating = 20;
  bool has_normalized_rating() const;
  private:
  bool _internal_has_normalized_rating() const;
  public:
  void clear_normalized_rating();
  double normalized_rating() const;
  void set_normalized_rating(double value);
  private:
  double _internal_normalized_rating() const;
  void _internal_set_normalized_rating(double value);
  public:

  // optional double normalized_uncertainty = 22;
  bool has_normalized_uncertainty() const;
  private:
  bool _internal_has_normalized_uncertainty() const;
  public:
  void clear_normalized_uncertainty();
  double normalized_uncertainty() const;
  void set_normalized_uncertainty(double value);
  private:
  double _internal_normalized_uncertainty() const;
  void _internal_set_normalized_uncertainty(double value);
  public:

  // @@protoc_insertion_point(class_scope:CTFLobbyPlayerProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  int team_;
  int connect_state_;
  ::PROTOBUF_NAMESPACE_ID::uint64 original_party_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rank_;
  ::PROTOBUF_NAMESPACE_ID::uint32 badge_level_;
  ::PROTOBUF_NAMESPACE_ID::uint32 last_connect_time_;
  bool squad_surplus_;
  bool chat_suspension_;
  int type_;
  double normalized_rating_;
  double normalized_uncertainty_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CTFLobbyInviteProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CTFLobbyInviteProto) */ {
 public:
  inline CTFLobbyInviteProto() : CTFLobbyInviteProto(nullptr) {}
  ~CTFLobbyInviteProto() override;
  explicit constexpr CTFLobbyInviteProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CTFLobbyInviteProto(const CTFLobbyInviteProto& from);
  CTFLobbyInviteProto(CTFLobbyInviteProto&& from) noexcept
    : CTFLobbyInviteProto() {
    *this = ::std::move(from);
  }

  inline CTFLobbyInviteProto& operator=(const CTFLobbyInviteProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline CTFLobbyInviteProto& operator=(CTFLobbyInviteProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CTFLobbyInviteProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const CTFLobbyInviteProto* internal_default_instance() {
    return reinterpret_cast<const CTFLobbyInviteProto*>(
               &_CTFLobbyInviteProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    91;

  friend void swap(CTFLobbyInviteProto& a, CTFLobbyInviteProto& b) {
    a.Swap(&b);
  }
  inline void Swap(CTFLobbyInviteProto* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CTFLobbyInviteProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CTFLobbyInviteProto* New() const final {
    return new CTFLobbyInviteProto();
  }

  CTFLobbyInviteProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CTFLobbyInviteProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CTFLobbyInviteProto& from);
  void MergeFrom(const CTFLobbyInviteProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CTFLobbyInviteProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CTFLobbyInviteProto";
  }
  protected:
  explicit CTFLobbyInviteProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLobbyIdFieldNumber = 1,
    kMatchGroupFieldNumber = 2,
  };
  // optional fixed64 lobby_id = 1 [(.key_field) = true];
  bool has_lobby_id() const;
  private:
  bool _internal_has_lobby_id() const;
  public:
  void clear_lobby_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 lobby_id() const;
  void set_lobby_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_lobby_id() const;
  void _internal_set_lobby_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional .ETFMatchGroup match_group = 2 [default = k_eTFMatchGroup_Invalid];
  bool has_match_group() const;
  private:
  bool _internal_has_match_group() const;
  public:
  void clear_match_group();
  ::ETFMatchGroup match_group() const;
  void set_match_group(::ETFMatchGroup value);
  private:
  ::ETFMatchGroup _internal_match_group() const;
  void _internal_set_match_group(::ETFMatchGroup value);
  public:

  // @@protoc_insertion_point(class_scope:CTFLobbyInviteProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 lobby_id_;
  int match_group_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CSOTFGameServerLobby final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSOTFGameServerLobby) */ {
 public:
  inline CSOTFGameServerLobby() : CSOTFGameServerLobby(nullptr) {}
  ~CSOTFGameServerLobby() override;
  explicit constexpr CSOTFGameServerLobby(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSOTFGameServerLobby(const CSOTFGameServerLobby& from);
  CSOTFGameServerLobby(CSOTFGameServerLobby&& from) noexcept
    : CSOTFGameServerLobby() {
    *this = ::std::move(from);
  }

  inline CSOTFGameServerLobby& operator=(const CSOTFGameServerLobby& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSOTFGameServerLobby& operator=(CSOTFGameServerLobby&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSOTFGameServerLobby& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSOTFGameServerLobby* internal_default_instance() {
    return reinterpret_cast<const CSOTFGameServerLobby*>(
               &_CSOTFGameServerLobby_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    92;

  friend void swap(CSOTFGameServerLobby& a, CSOTFGameServerLobby& b) {
    a.Swap(&b);
  }
  inline void Swap(CSOTFGameServerLobby* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSOTFGameServerLobby* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSOTFGameServerLobby* New() const final {
    return new CSOTFGameServerLobby();
  }

  CSOTFGameServerLobby* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSOTFGameServerLobby>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSOTFGameServerLobby& from);
  void MergeFrom(const CSOTFGameServerLobby& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSOTFGameServerLobby* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSOTFGameServerLobby";
  }
  protected:
  explicit CSOTFGameServerLobby(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CSOTFGameServerLobby_State State;
  static constexpr State UNKNOWN =
    CSOTFGameServerLobby_State_UNKNOWN;
  static constexpr State SERVERSETUP =
    CSOTFGameServerLobby_State_SERVERSETUP;
  static constexpr State RUN =
    CSOTFGameServerLobby_State_RUN;
  static inline bool State_IsValid(int value) {
    return CSOTFGameServerLobby_State_IsValid(value);
  }
  static constexpr State State_MIN =
    CSOTFGameServerLobby_State_State_MIN;
  static constexpr State State_MAX =
    CSOTFGameServerLobby_State_State_MAX;
  static constexpr int State_ARRAYSIZE =
    CSOTFGameServerLobby_State_State_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  State_descriptor() {
    return CSOTFGameServerLobby_State_descriptor();
  }
  template<typename T>
  static inline const std::string& State_Name(T enum_t_value) {
    static_assert(::std::is_same<T, State>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function State_Name.");
    return CSOTFGameServerLobby_State_Name(enum_t_value);
  }
  static inline bool State_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      State* value) {
    return CSOTFGameServerLobby_State_Parse(name, value);
  }

  typedef CSOTFGameServerLobby_WarMatch WarMatch;
  static constexpr WarMatch NOPE =
    CSOTFGameServerLobby_WarMatch_NOPE;
  static constexpr WarMatch INVADERS_ARE_PYRO =
    CSOTFGameServerLobby_WarMatch_INVADERS_ARE_PYRO;
  static constexpr WarMatch INVADERS_ARE_HEAVY =
    CSOTFGameServerLobby_WarMatch_INVADERS_ARE_HEAVY;
  static inline bool WarMatch_IsValid(int value) {
    return CSOTFGameServerLobby_WarMatch_IsValid(value);
  }
  static constexpr WarMatch WarMatch_MIN =
    CSOTFGameServerLobby_WarMatch_WarMatch_MIN;
  static constexpr WarMatch WarMatch_MAX =
    CSOTFGameServerLobby_WarMatch_WarMatch_MAX;
  static constexpr int WarMatch_ARRAYSIZE =
    CSOTFGameServerLobby_WarMatch_WarMatch_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  WarMatch_descriptor() {
    return CSOTFGameServerLobby_WarMatch_descriptor();
  }
  template<typename T>
  static inline const std::string& WarMatch_Name(T enum_t_value) {
    static_assert(::std::is_same<T, WarMatch>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function WarMatch_Name.");
    return CSOTFGameServerLobby_WarMatch_Name(enum_t_value);
  }
  static inline bool WarMatch_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      WarMatch* value) {
    return CSOTFGameServerLobby_WarMatch_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMembersFieldNumber = 2,
    kNextMapsForVoteFieldNumber = 47,
    kPendingMembersFieldNumber = 49,
    kConnectFieldNumber = 5,
    kMapNameFieldNumber = 38,
    kMissionNameFieldNumber = 39,
    kMannupTourNameFieldNumber = 42,
    kLobbyIdFieldNumber = 1,
    kServerIdFieldNumber = 6,
    kStateFieldNumber = 4,
    kGameStateFieldNumber = 22,
    kLobbyMmVersionFieldNumber = 48,
    kMatchIdFieldNumber = 30,
    kInitialAverageMmRatingFieldNumber = 32,
    kFormedTimeFieldNumber = 36,
    kMatchGroupFieldNumber = 41,
    kFlagsFieldNumber = 43,
    kLateJoinEligibleFieldNumber = 44,
    kFixedMatchSizeFieldNumber = 45,
    kIsWarMatchFieldNumber = 46,
  };
  // repeated .CTFLobbyPlayerProto members = 2;
  int members_size() const;
  private:
  int _internal_members_size() const;
  public:
  void clear_members();
  ::CTFLobbyPlayerProto* mutable_members(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CTFLobbyPlayerProto >*
      mutable_members();
  private:
  const ::CTFLobbyPlayerProto& _internal_members(int index) const;
  ::CTFLobbyPlayerProto* _internal_add_members();
  public:
  const ::CTFLobbyPlayerProto& members(int index) const;
  ::CTFLobbyPlayerProto* add_members();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CTFLobbyPlayerProto >&
      members() const;

  // repeated uint32 next_maps_for_vote = 47;
  int next_maps_for_vote_size() const;
  private:
  int _internal_next_maps_for_vote_size() const;
  public:
  void clear_next_maps_for_vote();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_next_maps_for_vote(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_next_maps_for_vote() const;
  void _internal_add_next_maps_for_vote(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_next_maps_for_vote();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 next_maps_for_vote(int index) const;
  void set_next_maps_for_vote(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_next_maps_for_vote(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      next_maps_for_vote() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_next_maps_for_vote();

  // repeated .CTFLobbyPlayerProto pending_members = 49;
  int pending_members_size() const;
  private:
  int _internal_pending_members_size() const;
  public:
  void clear_pending_members();
  ::CTFLobbyPlayerProto* mutable_pending_members(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CTFLobbyPlayerProto >*
      mutable_pending_members();
  private:
  const ::CTFLobbyPlayerProto& _internal_pending_members(int index) const;
  ::CTFLobbyPlayerProto* _internal_add_pending_members();
  public:
  const ::CTFLobbyPlayerProto& pending_members(int index) const;
  ::CTFLobbyPlayerProto* add_pending_members();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CTFLobbyPlayerProto >&
      pending_members() const;

  // optional string connect = 5;
  bool has_connect() const;
  private:
  bool _internal_has_connect() const;
  public:
  void clear_connect();
  const std::string& connect() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_connect(ArgT0&& arg0, ArgT... args);
  std::string* mutable_connect();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_connect();
  void set_allocated_connect(std::string* connect);
  private:
  const std::string& _internal_connect() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_connect(const std::string& value);
  std::string* _internal_mutable_connect();
  public:

  // optional string map_name = 38;
  bool has_map_name() const;
  private:
  bool _internal_has_map_name() const;
  public:
  void clear_map_name();
  const std::string& map_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_map_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_map_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_map_name();
  void set_allocated_map_name(std::string* map_name);
  private:
  const std::string& _internal_map_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_map_name(const std::string& value);
  std::string* _internal_mutable_map_name();
  public:

  // optional string mission_name = 39;
  bool has_mission_name() const;
  private:
  bool _internal_has_mission_name() const;
  public:
  void clear_mission_name();
  const std::string& mission_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mission_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mission_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_mission_name();
  void set_allocated_mission_name(std::string* mission_name);
  private:
  const std::string& _internal_mission_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mission_name(const std::string& value);
  std::string* _internal_mutable_mission_name();
  public:

  // optional string mannup_tour_name = 42;
  bool has_mannup_tour_name() const;
  private:
  bool _internal_has_mannup_tour_name() const;
  public:
  void clear_mannup_tour_name();
  const std::string& mannup_tour_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mannup_tour_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mannup_tour_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_mannup_tour_name();
  void set_allocated_mannup_tour_name(std::string* mannup_tour_name);
  private:
  const std::string& _internal_mannup_tour_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mannup_tour_name(const std::string& value);
  std::string* _internal_mutable_mannup_tour_name();
  public:

  // optional uint64 lobby_id = 1 [(.key_field) = true];
  bool has_lobby_id() const;
  private:
  bool _internal_has_lobby_id() const;
  public:
  void clear_lobby_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 lobby_id() const;
  void set_lobby_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_lobby_id() const;
  void _internal_set_lobby_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional fixed64 server_id = 6 [default = 0];
  bool has_server_id() const;
  private:
  bool _internal_has_server_id() const;
  public:
  void clear_server_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 server_id() const;
  void set_server_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_server_id() const;
  void _internal_set_server_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional .CSOTFGameServerLobby.State state = 4 [default = UNKNOWN];
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  ::CSOTFGameServerLobby_State state() const;
  void set_state(::CSOTFGameServerLobby_State value);
  private:
  ::CSOTFGameServerLobby_State _internal_state() const;
  void _internal_set_state(::CSOTFGameServerLobby_State value);
  public:

  // optional .TF_GC_GameState game_state = 22 [default = TF_GC_GAMESTATE_STATE_INIT];
  bool has_game_state() const;
  private:
  bool _internal_has_game_state() const;
  public:
  void clear_game_state();
  ::TF_GC_GameState game_state() const;
  void set_game_state(::TF_GC_GameState value);
  private:
  ::TF_GC_GameState _internal_game_state() const;
  void _internal_set_game_state(::TF_GC_GameState value);
  public:

  // optional uint32 lobby_mm_version = 48;
  bool has_lobby_mm_version() const;
  private:
  bool _internal_has_lobby_mm_version() const;
  public:
  void clear_lobby_mm_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 lobby_mm_version() const;
  void set_lobby_mm_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_lobby_mm_version() const;
  void _internal_set_lobby_mm_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 match_id = 30 [default = 0];
  bool has_match_id() const;
  private:
  bool _internal_has_match_id() const;
  public:
  void clear_match_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 match_id() const;
  void set_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_match_id() const;
  void _internal_set_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional double initial_average_mm_rating = 32;
  bool has_initial_average_mm_rating() const;
  private:
  bool _internal_has_initial_average_mm_rating() const;
  public:
  void clear_initial_average_mm_rating();
  double initial_average_mm_rating() const;
  void set_initial_average_mm_rating(double value);
  private:
  double _internal_initial_average_mm_rating() const;
  void _internal_set_initial_average_mm_rating(double value);
  public:

  // optional uint32 formed_time = 36;
  bool has_formed_time() const;
  private:
  bool _internal_has_formed_time() const;
  public:
  void clear_formed_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 formed_time() const;
  void set_formed_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_formed_time() const;
  void _internal_set_formed_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 match_group = 41;
  bool has_match_group() const;
  private:
  bool _internal_has_match_group() const;
  public:
  void clear_match_group();
  ::PROTOBUF_NAMESPACE_ID::uint32 match_group() const;
  void set_match_group(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_match_group() const;
  void _internal_set_match_group(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 flags = 43;
  bool has_flags() const;
  private:
  bool _internal_has_flags() const;
  public:
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_flags() const;
  void _internal_set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool late_join_eligible = 44;
  bool has_late_join_eligible() const;
  private:
  bool _internal_has_late_join_eligible() const;
  public:
  void clear_late_join_eligible();
  bool late_join_eligible() const;
  void set_late_join_eligible(bool value);
  private:
  bool _internal_late_join_eligible() const;
  void _internal_set_late_join_eligible(bool value);
  public:

  // optional uint32 fixed_match_size = 45;
  bool has_fixed_match_size() const;
  private:
  bool _internal_has_fixed_match_size() const;
  public:
  void clear_fixed_match_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 fixed_match_size() const;
  void set_fixed_match_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fixed_match_size() const;
  void _internal_set_fixed_match_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .CSOTFGameServerLobby.WarMatch is_war_match = 46 [default = NOPE];
  bool has_is_war_match() const;
  private:
  bool _internal_has_is_war_match() const;
  public:
  void clear_is_war_match();
  ::CSOTFGameServerLobby_WarMatch is_war_match() const;
  void set_is_war_match(::CSOTFGameServerLobby_WarMatch value);
  private:
  ::CSOTFGameServerLobby_WarMatch _internal_is_war_match() const;
  void _internal_set_is_war_match(::CSOTFGameServerLobby_WarMatch value);
  public:

  // @@protoc_insertion_point(class_scope:CSOTFGameServerLobby)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CTFLobbyPlayerProto > members_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > next_maps_for_vote_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CTFLobbyPlayerProto > pending_members_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr connect_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr map_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mission_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mannup_tour_name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 lobby_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 server_id_;
  int state_;
  int game_state_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lobby_mm_version_;
  ::PROTOBUF_NAMESPACE_ID::uint64 match_id_;
  double initial_average_mm_rating_;
  ::PROTOBUF_NAMESPACE_ID::uint32 formed_time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 match_group_;
  ::PROTOBUF_NAMESPACE_ID::uint32 flags_;
  bool late_join_eligible_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fixed_match_size_;
  int is_war_match_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgExitMatchmaking final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgExitMatchmaking) */ {
 public:
  inline CMsgExitMatchmaking() : CMsgExitMatchmaking(nullptr) {}
  ~CMsgExitMatchmaking() override;
  explicit constexpr CMsgExitMatchmaking(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgExitMatchmaking(const CMsgExitMatchmaking& from);
  CMsgExitMatchmaking(CMsgExitMatchmaking&& from) noexcept
    : CMsgExitMatchmaking() {
    *this = ::std::move(from);
  }

  inline CMsgExitMatchmaking& operator=(const CMsgExitMatchmaking& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgExitMatchmaking& operator=(CMsgExitMatchmaking&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgExitMatchmaking& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgExitMatchmaking* internal_default_instance() {
    return reinterpret_cast<const CMsgExitMatchmaking*>(
               &_CMsgExitMatchmaking_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    93;

  friend void swap(CMsgExitMatchmaking& a, CMsgExitMatchmaking& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgExitMatchmaking* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgExitMatchmaking* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgExitMatchmaking* New() const final {
    return new CMsgExitMatchmaking();
  }

  CMsgExitMatchmaking* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgExitMatchmaking>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgExitMatchmaking& from);
  void MergeFrom(const CMsgExitMatchmaking& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgExitMatchmaking* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgExitMatchmaking";
  }
  protected:
  explicit CMsgExitMatchmaking(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartyIdFieldNumber = 2,
    kLobbyIdFieldNumber = 3,
    kExplicitAbandonFieldNumber = 1,
  };
  // optional uint64 party_id = 2;
  bool has_party_id() const;
  private:
  bool _internal_has_party_id() const;
  public:
  void clear_party_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 party_id() const;
  void set_party_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_party_id() const;
  void _internal_set_party_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 lobby_id = 3;
  bool has_lobby_id() const;
  private:
  bool _internal_has_lobby_id() const;
  public:
  void clear_lobby_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 lobby_id() const;
  void set_lobby_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_lobby_id() const;
  void _internal_set_lobby_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional bool explicit_abandon = 1;
  bool has_explicit_abandon() const;
  private:
  bool _internal_has_explicit_abandon() const;
  public:
  void clear_explicit_abandon();
  bool explicit_abandon() const;
  void set_explicit_abandon(bool value);
  private:
  bool _internal_explicit_abandon() const;
  void _internal_set_explicit_abandon(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgExitMatchmaking)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 party_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 lobby_id_;
  bool explicit_abandon_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgAcceptLobbyInvite final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgAcceptLobbyInvite) */ {
 public:
  inline CMsgAcceptLobbyInvite() : CMsgAcceptLobbyInvite(nullptr) {}
  ~CMsgAcceptLobbyInvite() override;
  explicit constexpr CMsgAcceptLobbyInvite(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgAcceptLobbyInvite(const CMsgAcceptLobbyInvite& from);
  CMsgAcceptLobbyInvite(CMsgAcceptLobbyInvite&& from) noexcept
    : CMsgAcceptLobbyInvite() {
    *this = ::std::move(from);
  }

  inline CMsgAcceptLobbyInvite& operator=(const CMsgAcceptLobbyInvite& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgAcceptLobbyInvite& operator=(CMsgAcceptLobbyInvite&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgAcceptLobbyInvite& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgAcceptLobbyInvite* internal_default_instance() {
    return reinterpret_cast<const CMsgAcceptLobbyInvite*>(
               &_CMsgAcceptLobbyInvite_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    94;

  friend void swap(CMsgAcceptLobbyInvite& a, CMsgAcceptLobbyInvite& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgAcceptLobbyInvite* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgAcceptLobbyInvite* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgAcceptLobbyInvite* New() const final {
    return new CMsgAcceptLobbyInvite();
  }

  CMsgAcceptLobbyInvite* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgAcceptLobbyInvite>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgAcceptLobbyInvite& from);
  void MergeFrom(const CMsgAcceptLobbyInvite& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgAcceptLobbyInvite* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgAcceptLobbyInvite";
  }
  protected:
  explicit CMsgAcceptLobbyInvite(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAbandoningInviteLobbyIdsFieldNumber = 3,
    kInvitedLobbyIdFieldNumber = 1,
    kAbandoningMatchIdFieldNumber = 2,
  };
  // repeated uint64 abandoning_invite_lobby_ids = 3;
  int abandoning_invite_lobby_ids_size() const;
  private:
  int _internal_abandoning_invite_lobby_ids_size() const;
  public:
  void clear_abandoning_invite_lobby_ids();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_abandoning_invite_lobby_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_abandoning_invite_lobby_ids() const;
  void _internal_add_abandoning_invite_lobby_ids(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_abandoning_invite_lobby_ids();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 abandoning_invite_lobby_ids(int index) const;
  void set_abandoning_invite_lobby_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_abandoning_invite_lobby_ids(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      abandoning_invite_lobby_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_abandoning_invite_lobby_ids();

  // optional uint64 invited_lobby_id = 1;
  bool has_invited_lobby_id() const;
  private:
  bool _internal_has_invited_lobby_id() const;
  public:
  void clear_invited_lobby_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 invited_lobby_id() const;
  void set_invited_lobby_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_invited_lobby_id() const;
  void _internal_set_invited_lobby_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 abandoning_match_id = 2;
  bool has_abandoning_match_id() const;
  private:
  bool _internal_has_abandoning_match_id() const;
  public:
  void clear_abandoning_match_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 abandoning_match_id() const;
  void set_abandoning_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_abandoning_match_id() const;
  void _internal_set_abandoning_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgAcceptLobbyInvite)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > abandoning_invite_lobby_ids_;
  ::PROTOBUF_NAMESPACE_ID::uint64 invited_lobby_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 abandoning_match_id_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgAcceptLobbyInviteReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgAcceptLobbyInviteReply) */ {
 public:
  inline CMsgAcceptLobbyInviteReply() : CMsgAcceptLobbyInviteReply(nullptr) {}
  ~CMsgAcceptLobbyInviteReply() override;
  explicit constexpr CMsgAcceptLobbyInviteReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgAcceptLobbyInviteReply(const CMsgAcceptLobbyInviteReply& from);
  CMsgAcceptLobbyInviteReply(CMsgAcceptLobbyInviteReply&& from) noexcept
    : CMsgAcceptLobbyInviteReply() {
    *this = ::std::move(from);
  }

  inline CMsgAcceptLobbyInviteReply& operator=(const CMsgAcceptLobbyInviteReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgAcceptLobbyInviteReply& operator=(CMsgAcceptLobbyInviteReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgAcceptLobbyInviteReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgAcceptLobbyInviteReply* internal_default_instance() {
    return reinterpret_cast<const CMsgAcceptLobbyInviteReply*>(
               &_CMsgAcceptLobbyInviteReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    95;

  friend void swap(CMsgAcceptLobbyInviteReply& a, CMsgAcceptLobbyInviteReply& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgAcceptLobbyInviteReply* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgAcceptLobbyInviteReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgAcceptLobbyInviteReply* New() const final {
    return new CMsgAcceptLobbyInviteReply();
  }

  CMsgAcceptLobbyInviteReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgAcceptLobbyInviteReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgAcceptLobbyInviteReply& from);
  void MergeFrom(const CMsgAcceptLobbyInviteReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgAcceptLobbyInviteReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgAcceptLobbyInviteReply";
  }
  protected:
  explicit CMsgAcceptLobbyInviteReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgAcceptLobbyInviteReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgMatchmakingSearchCountRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgMatchmakingSearchCountRequest) */ {
 public:
  inline CMsgMatchmakingSearchCountRequest() : CMsgMatchmakingSearchCountRequest(nullptr) {}
  ~CMsgMatchmakingSearchCountRequest() override;
  explicit constexpr CMsgMatchmakingSearchCountRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgMatchmakingSearchCountRequest(const CMsgMatchmakingSearchCountRequest& from);
  CMsgMatchmakingSearchCountRequest(CMsgMatchmakingSearchCountRequest&& from) noexcept
    : CMsgMatchmakingSearchCountRequest() {
    *this = ::std::move(from);
  }

  inline CMsgMatchmakingSearchCountRequest& operator=(const CMsgMatchmakingSearchCountRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgMatchmakingSearchCountRequest& operator=(CMsgMatchmakingSearchCountRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgMatchmakingSearchCountRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgMatchmakingSearchCountRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgMatchmakingSearchCountRequest*>(
               &_CMsgMatchmakingSearchCountRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    96;

  friend void swap(CMsgMatchmakingSearchCountRequest& a, CMsgMatchmakingSearchCountRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgMatchmakingSearchCountRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgMatchmakingSearchCountRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgMatchmakingSearchCountRequest* New() const final {
    return new CMsgMatchmakingSearchCountRequest();
  }

  CMsgMatchmakingSearchCountRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgMatchmakingSearchCountRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgMatchmakingSearchCountRequest& from);
  void MergeFrom(const CMsgMatchmakingSearchCountRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgMatchmakingSearchCountRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgMatchmakingSearchCountRequest";
  }
  protected:
  explicit CMsgMatchmakingSearchCountRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgMatchmakingSearchCountRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgMatchmakingSearchCountResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgMatchmakingSearchCountResponse) */ {
 public:
  inline CMsgMatchmakingSearchCountResponse() : CMsgMatchmakingSearchCountResponse(nullptr) {}
  ~CMsgMatchmakingSearchCountResponse() override;
  explicit constexpr CMsgMatchmakingSearchCountResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgMatchmakingSearchCountResponse(const CMsgMatchmakingSearchCountResponse& from);
  CMsgMatchmakingSearchCountResponse(CMsgMatchmakingSearchCountResponse&& from) noexcept
    : CMsgMatchmakingSearchCountResponse() {
    *this = ::std::move(from);
  }

  inline CMsgMatchmakingSearchCountResponse& operator=(const CMsgMatchmakingSearchCountResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgMatchmakingSearchCountResponse& operator=(CMsgMatchmakingSearchCountResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgMatchmakingSearchCountResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgMatchmakingSearchCountResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgMatchmakingSearchCountResponse*>(
               &_CMsgMatchmakingSearchCountResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    97;

  friend void swap(CMsgMatchmakingSearchCountResponse& a, CMsgMatchmakingSearchCountResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgMatchmakingSearchCountResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgMatchmakingSearchCountResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgMatchmakingSearchCountResponse* New() const final {
    return new CMsgMatchmakingSearchCountResponse();
  }

  CMsgMatchmakingSearchCountResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgMatchmakingSearchCountResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgMatchmakingSearchCountResponse& from);
  void MergeFrom(const CMsgMatchmakingSearchCountResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgMatchmakingSearchCountResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgMatchmakingSearchCountResponse";
  }
  protected:
  explicit CMsgMatchmakingSearchCountResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSearchingPlayersByGroupFieldNumber = 1,
  };
  // repeated uint32 searching_players_by_group = 1;
  int searching_players_by_group_size() const;
  private:
  int _internal_searching_players_by_group_size() const;
  public:
  void clear_searching_players_by_group();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_searching_players_by_group(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_searching_players_by_group() const;
  void _internal_add_searching_players_by_group(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_searching_players_by_group();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 searching_players_by_group(int index) const;
  void set_searching_players_by_group(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_searching_players_by_group(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      searching_players_by_group() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_searching_players_by_group();

  // @@protoc_insertion_point(class_scope:CMsgMatchmakingSearchCountResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > searching_players_by_group_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgKickedFromMatchmakingQueue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgKickedFromMatchmakingQueue) */ {
 public:
  inline CMsgKickedFromMatchmakingQueue() : CMsgKickedFromMatchmakingQueue(nullptr) {}
  ~CMsgKickedFromMatchmakingQueue() override;
  explicit constexpr CMsgKickedFromMatchmakingQueue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgKickedFromMatchmakingQueue(const CMsgKickedFromMatchmakingQueue& from);
  CMsgKickedFromMatchmakingQueue(CMsgKickedFromMatchmakingQueue&& from) noexcept
    : CMsgKickedFromMatchmakingQueue() {
    *this = ::std::move(from);
  }

  inline CMsgKickedFromMatchmakingQueue& operator=(const CMsgKickedFromMatchmakingQueue& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgKickedFromMatchmakingQueue& operator=(CMsgKickedFromMatchmakingQueue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgKickedFromMatchmakingQueue& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgKickedFromMatchmakingQueue* internal_default_instance() {
    return reinterpret_cast<const CMsgKickedFromMatchmakingQueue*>(
               &_CMsgKickedFromMatchmakingQueue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    98;

  friend void swap(CMsgKickedFromMatchmakingQueue& a, CMsgKickedFromMatchmakingQueue& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgKickedFromMatchmakingQueue* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgKickedFromMatchmakingQueue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgKickedFromMatchmakingQueue* New() const final {
    return new CMsgKickedFromMatchmakingQueue();
  }

  CMsgKickedFromMatchmakingQueue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgKickedFromMatchmakingQueue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgKickedFromMatchmakingQueue& from);
  void MergeFrom(const CMsgKickedFromMatchmakingQueue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgKickedFromMatchmakingQueue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgKickedFromMatchmakingQueue";
  }
  protected:
  explicit CMsgKickedFromMatchmakingQueue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgKickedFromMatchmakingQueue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGameServerMatchmakingStatus_Player final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGameServerMatchmakingStatus.Player) */ {
 public:
  inline CMsgGameServerMatchmakingStatus_Player() : CMsgGameServerMatchmakingStatus_Player(nullptr) {}
  ~CMsgGameServerMatchmakingStatus_Player() override;
  explicit constexpr CMsgGameServerMatchmakingStatus_Player(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGameServerMatchmakingStatus_Player(const CMsgGameServerMatchmakingStatus_Player& from);
  CMsgGameServerMatchmakingStatus_Player(CMsgGameServerMatchmakingStatus_Player&& from) noexcept
    : CMsgGameServerMatchmakingStatus_Player() {
    *this = ::std::move(from);
  }

  inline CMsgGameServerMatchmakingStatus_Player& operator=(const CMsgGameServerMatchmakingStatus_Player& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGameServerMatchmakingStatus_Player& operator=(CMsgGameServerMatchmakingStatus_Player&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGameServerMatchmakingStatus_Player& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGameServerMatchmakingStatus_Player* internal_default_instance() {
    return reinterpret_cast<const CMsgGameServerMatchmakingStatus_Player*>(
               &_CMsgGameServerMatchmakingStatus_Player_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    99;

  friend void swap(CMsgGameServerMatchmakingStatus_Player& a, CMsgGameServerMatchmakingStatus_Player& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGameServerMatchmakingStatus_Player* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGameServerMatchmakingStatus_Player* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGameServerMatchmakingStatus_Player* New() const final {
    return new CMsgGameServerMatchmakingStatus_Player();
  }

  CMsgGameServerMatchmakingStatus_Player* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGameServerMatchmakingStatus_Player>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgGameServerMatchmakingStatus_Player& from);
  void MergeFrom(const CMsgGameServerMatchmakingStatus_Player& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGameServerMatchmakingStatus_Player* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGameServerMatchmakingStatus.Player";
  }
  protected:
  explicit CMsgGameServerMatchmakingStatus_Player(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamIdFieldNumber = 1,
    kConnectStateFieldNumber = 2,
  };
  // optional fixed64 steam_id = 1;
  bool has_steam_id() const;
  private:
  bool _internal_has_steam_id() const;
  public:
  void clear_steam_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 steam_id() const;
  void set_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_steam_id() const;
  void _internal_set_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional .CMsgGameServerMatchmakingStatus.PlayerConnectState connect_state = 2 [default = INVALID];
  bool has_connect_state() const;
  private:
  bool _internal_has_connect_state() const;
  public:
  void clear_connect_state();
  ::CMsgGameServerMatchmakingStatus_PlayerConnectState connect_state() const;
  void set_connect_state(::CMsgGameServerMatchmakingStatus_PlayerConnectState value);
  private:
  ::CMsgGameServerMatchmakingStatus_PlayerConnectState _internal_connect_state() const;
  void _internal_set_connect_state(::CMsgGameServerMatchmakingStatus_PlayerConnectState value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGameServerMatchmakingStatus.Player)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 steam_id_;
  int connect_state_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGameServerMatchmakingStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGameServerMatchmakingStatus) */ {
 public:
  inline CMsgGameServerMatchmakingStatus() : CMsgGameServerMatchmakingStatus(nullptr) {}
  ~CMsgGameServerMatchmakingStatus() override;
  explicit constexpr CMsgGameServerMatchmakingStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGameServerMatchmakingStatus(const CMsgGameServerMatchmakingStatus& from);
  CMsgGameServerMatchmakingStatus(CMsgGameServerMatchmakingStatus&& from) noexcept
    : CMsgGameServerMatchmakingStatus() {
    *this = ::std::move(from);
  }

  inline CMsgGameServerMatchmakingStatus& operator=(const CMsgGameServerMatchmakingStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGameServerMatchmakingStatus& operator=(CMsgGameServerMatchmakingStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGameServerMatchmakingStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGameServerMatchmakingStatus* internal_default_instance() {
    return reinterpret_cast<const CMsgGameServerMatchmakingStatus*>(
               &_CMsgGameServerMatchmakingStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    100;

  friend void swap(CMsgGameServerMatchmakingStatus& a, CMsgGameServerMatchmakingStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGameServerMatchmakingStatus* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGameServerMatchmakingStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGameServerMatchmakingStatus* New() const final {
    return new CMsgGameServerMatchmakingStatus();
  }

  CMsgGameServerMatchmakingStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGameServerMatchmakingStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgGameServerMatchmakingStatus& from);
  void MergeFrom(const CMsgGameServerMatchmakingStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGameServerMatchmakingStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGameServerMatchmakingStatus";
  }
  protected:
  explicit CMsgGameServerMatchmakingStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgGameServerMatchmakingStatus_Player Player;

  typedef CMsgGameServerMatchmakingStatus_PlayerConnectState PlayerConnectState;
  static constexpr PlayerConnectState INVALID =
    CMsgGameServerMatchmakingStatus_PlayerConnectState_INVALID;
  static constexpr PlayerConnectState CONNECTED =
    CMsgGameServerMatchmakingStatus_PlayerConnectState_CONNECTED;
  static constexpr PlayerConnectState RESERVED =
    CMsgGameServerMatchmakingStatus_PlayerConnectState_RESERVED;
  static inline bool PlayerConnectState_IsValid(int value) {
    return CMsgGameServerMatchmakingStatus_PlayerConnectState_IsValid(value);
  }
  static constexpr PlayerConnectState PlayerConnectState_MIN =
    CMsgGameServerMatchmakingStatus_PlayerConnectState_PlayerConnectState_MIN;
  static constexpr PlayerConnectState PlayerConnectState_MAX =
    CMsgGameServerMatchmakingStatus_PlayerConnectState_PlayerConnectState_MAX;
  static constexpr int PlayerConnectState_ARRAYSIZE =
    CMsgGameServerMatchmakingStatus_PlayerConnectState_PlayerConnectState_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PlayerConnectState_descriptor() {
    return CMsgGameServerMatchmakingStatus_PlayerConnectState_descriptor();
  }
  template<typename T>
  static inline const std::string& PlayerConnectState_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PlayerConnectState>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PlayerConnectState_Name.");
    return CMsgGameServerMatchmakingStatus_PlayerConnectState_Name(enum_t_value);
  }
  static inline bool PlayerConnectState_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      PlayerConnectState* value) {
    return CMsgGameServerMatchmakingStatus_PlayerConnectState_Parse(name, value);
  }

  typedef CMsgGameServerMatchmakingStatus_Event Event;
  static constexpr Event None =
    CMsgGameServerMatchmakingStatus_Event_None;
  static constexpr Event MvMVictory =
    CMsgGameServerMatchmakingStatus_Event_MvMVictory;
  static constexpr Event MvMDefeat =
    CMsgGameServerMatchmakingStatus_Event_MvMDefeat;
  static constexpr Event AcknowledgePlayers =
    CMsgGameServerMatchmakingStatus_Event_AcknowledgePlayers;
  static inline bool Event_IsValid(int value) {
    return CMsgGameServerMatchmakingStatus_Event_IsValid(value);
  }
  static constexpr Event Event_MIN =
    CMsgGameServerMatchmakingStatus_Event_Event_MIN;
  static constexpr Event Event_MAX =
    CMsgGameServerMatchmakingStatus_Event_Event_MAX;
  static constexpr int Event_ARRAYSIZE =
    CMsgGameServerMatchmakingStatus_Event_Event_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Event_descriptor() {
    return CMsgGameServerMatchmakingStatus_Event_descriptor();
  }
  template<typename T>
  static inline const std::string& Event_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Event>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Event_Name.");
    return CMsgGameServerMatchmakingStatus_Event_Name(enum_t_value);
  }
  static inline bool Event_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Event* value) {
    return CMsgGameServerMatchmakingStatus_Event_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersFieldNumber = 13,
    kMapFieldNumber = 3,
    kTagsFieldNumber = 4,
    kMatchmakingStateFieldNumber = 1,
    kBotCountFieldNumber = 5,
    kNumSpectatorsFieldNumber = 6,
    kMaxPlayersFieldNumber = 7,
    kSlotsFreeFieldNumber = 8,
    kServerRegionFieldNumber = 9,
    kServerLoadavgFieldNumber = 10,
    kServerTrustedFieldNumber = 11,
    kServerDedicatedFieldNumber = 12,
    kGameStateFieldNumber = 14,
    kEventFieldNumber = 15,
    kStrictFieldNumber = 17,
    kMvmWaveFieldNumber = 18,
    kMvmCreditsAcquiredFieldNumber = 19,
    kMvmCreditsDroppedFieldNumber = 20,
    kLobbyMmVersionFieldNumber = 24,
    kServerVersionFieldNumber = 16,
    kMatchGroupFieldNumber = 23,
  };
  // repeated .CMsgGameServerMatchmakingStatus.Player players = 13;
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  ::CMsgGameServerMatchmakingStatus_Player* mutable_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameServerMatchmakingStatus_Player >*
      mutable_players();
  private:
  const ::CMsgGameServerMatchmakingStatus_Player& _internal_players(int index) const;
  ::CMsgGameServerMatchmakingStatus_Player* _internal_add_players();
  public:
  const ::CMsgGameServerMatchmakingStatus_Player& players(int index) const;
  ::CMsgGameServerMatchmakingStatus_Player* add_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameServerMatchmakingStatus_Player >&
      players() const;

  // optional string map = 3;
  bool has_map() const;
  private:
  bool _internal_has_map() const;
  public:
  void clear_map();
  const std::string& map() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_map(ArgT0&& arg0, ArgT... args);
  std::string* mutable_map();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_map();
  void set_allocated_map(std::string* map);
  private:
  const std::string& _internal_map() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_map(const std::string& value);
  std::string* _internal_mutable_map();
  public:

  // optional string tags = 4;
  bool has_tags() const;
  private:
  bool _internal_has_tags() const;
  public:
  void clear_tags();
  const std::string& tags() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tags(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tags();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_tags();
  void set_allocated_tags(std::string* tags);
  private:
  const std::string& _internal_tags() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tags(const std::string& value);
  std::string* _internal_mutable_tags();
  public:

  // optional .ServerMatchmakingState matchmaking_state = 1 [default = ServerMatchmakingState_INVALID];
  bool has_matchmaking_state() const;
  private:
  bool _internal_has_matchmaking_state() const;
  public:
  void clear_matchmaking_state();
  ::ServerMatchmakingState matchmaking_state() const;
  void set_matchmaking_state(::ServerMatchmakingState value);
  private:
  ::ServerMatchmakingState _internal_matchmaking_state() const;
  void _internal_set_matchmaking_state(::ServerMatchmakingState value);
  public:

  // optional uint32 bot_count = 5;
  bool has_bot_count() const;
  private:
  bool _internal_has_bot_count() const;
  public:
  void clear_bot_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 bot_count() const;
  void set_bot_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_bot_count() const;
  void _internal_set_bot_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 num_spectators = 6;
  bool has_num_spectators() const;
  private:
  bool _internal_has_num_spectators() const;
  public:
  void clear_num_spectators();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_spectators() const;
  void set_num_spectators(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_spectators() const;
  void _internal_set_num_spectators(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 max_players = 7;
  bool has_max_players() const;
  private:
  bool _internal_has_max_players() const;
  public:
  void clear_max_players();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_players() const;
  void set_max_players(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_players() const;
  void _internal_set_max_players(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 slots_free = 8;
  bool has_slots_free() const;
  private:
  bool _internal_has_slots_free() const;
  public:
  void clear_slots_free();
  ::PROTOBUF_NAMESPACE_ID::uint32 slots_free() const;
  void set_slots_free(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_slots_free() const;
  void _internal_set_slots_free(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 server_region = 9;
  bool has_server_region() const;
  private:
  bool _internal_has_server_region() const;
  public:
  void clear_server_region();
  ::PROTOBUF_NAMESPACE_ID::uint32 server_region() const;
  void set_server_region(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_server_region() const;
  void _internal_set_server_region(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float server_loadavg = 10;
  bool has_server_loadavg() const;
  private:
  bool _internal_has_server_loadavg() const;
  public:
  void clear_server_loadavg();
  float server_loadavg() const;
  void set_server_loadavg(float value);
  private:
  float _internal_server_loadavg() const;
  void _internal_set_server_loadavg(float value);
  public:

  // optional bool server_trusted = 11;
  bool has_server_trusted() const;
  private:
  bool _internal_has_server_trusted() const;
  public:
  void clear_server_trusted();
  bool server_trusted() const;
  void set_server_trusted(bool value);
  private:
  bool _internal_server_trusted() const;
  void _internal_set_server_trusted(bool value);
  public:

  // optional bool server_dedicated = 12;
  bool has_server_dedicated() const;
  private:
  bool _internal_has_server_dedicated() const;
  public:
  void clear_server_dedicated();
  bool server_dedicated() const;
  void set_server_dedicated(bool value);
  private:
  bool _internal_server_dedicated() const;
  void _internal_set_server_dedicated(bool value);
  public:

  // optional .TF_GC_GameState game_state = 14 [default = TF_GC_GAMESTATE_STATE_INIT];
  bool has_game_state() const;
  private:
  bool _internal_has_game_state() const;
  public:
  void clear_game_state();
  ::TF_GC_GameState game_state() const;
  void set_game_state(::TF_GC_GameState value);
  private:
  ::TF_GC_GameState _internal_game_state() const;
  void _internal_set_game_state(::TF_GC_GameState value);
  public:

  // optional .CMsgGameServerMatchmakingStatus.Event event = 15 [default = None];
  bool has_event() const;
  private:
  bool _internal_has_event() const;
  public:
  void clear_event();
  ::CMsgGameServerMatchmakingStatus_Event event() const;
  void set_event(::CMsgGameServerMatchmakingStatus_Event value);
  private:
  ::CMsgGameServerMatchmakingStatus_Event _internal_event() const;
  void _internal_set_event(::CMsgGameServerMatchmakingStatus_Event value);
  public:

  // optional uint32 strict = 17;
  bool has_strict() const;
  private:
  bool _internal_has_strict() const;
  public:
  void clear_strict();
  ::PROTOBUF_NAMESPACE_ID::uint32 strict() const;
  void set_strict(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_strict() const;
  void _internal_set_strict(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 mvm_wave = 18;
  bool has_mvm_wave() const;
  private:
  bool _internal_has_mvm_wave() const;
  public:
  void clear_mvm_wave();
  ::PROTOBUF_NAMESPACE_ID::uint32 mvm_wave() const;
  void set_mvm_wave(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mvm_wave() const;
  void _internal_set_mvm_wave(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 mvm_credits_acquired = 19;
  bool has_mvm_credits_acquired() const;
  private:
  bool _internal_has_mvm_credits_acquired() const;
  public:
  void clear_mvm_credits_acquired();
  ::PROTOBUF_NAMESPACE_ID::uint32 mvm_credits_acquired() const;
  void set_mvm_credits_acquired(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mvm_credits_acquired() const;
  void _internal_set_mvm_credits_acquired(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 mvm_credits_dropped = 20;
  bool has_mvm_credits_dropped() const;
  private:
  bool _internal_has_mvm_credits_dropped() const;
  public:
  void clear_mvm_credits_dropped();
  ::PROTOBUF_NAMESPACE_ID::uint32 mvm_credits_dropped() const;
  void set_mvm_credits_dropped(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mvm_credits_dropped() const;
  void _internal_set_mvm_credits_dropped(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 lobby_mm_version = 24;
  bool has_lobby_mm_version() const;
  private:
  bool _internal_has_lobby_mm_version() const;
  public:
  void clear_lobby_mm_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 lobby_mm_version() const;
  void set_lobby_mm_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_lobby_mm_version() const;
  void _internal_set_lobby_mm_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 server_version = 16 [default = 1225];
  bool has_server_version() const;
  private:
  bool _internal_has_server_version() const;
  public:
  void clear_server_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 server_version() const;
  void set_server_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_server_version() const;
  void _internal_set_server_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional sint32 match_group = 23 [default = -1];
  bool has_match_group() const;
  private:
  bool _internal_has_match_group() const;
  public:
  void clear_match_group();
  ::PROTOBUF_NAMESPACE_ID::int32 match_group() const;
  void set_match_group(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_match_group() const;
  void _internal_set_match_group(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGameServerMatchmakingStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameServerMatchmakingStatus_Player > players_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr map_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tags_;
  int matchmaking_state_;
  ::PROTOBUF_NAMESPACE_ID::uint32 bot_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_spectators_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_players_;
  ::PROTOBUF_NAMESPACE_ID::uint32 slots_free_;
  ::PROTOBUF_NAMESPACE_ID::uint32 server_region_;
  float server_loadavg_;
  bool server_trusted_;
  bool server_dedicated_;
  int game_state_;
  int event_;
  ::PROTOBUF_NAMESPACE_ID::uint32 strict_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mvm_wave_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mvm_credits_acquired_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mvm_credits_dropped_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lobby_mm_version_;
  ::PROTOBUF_NAMESPACE_ID::uint32 server_version_;
  ::PROTOBUF_NAMESPACE_ID::int32 match_group_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgMatchmakingProgress final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgMatchmakingProgress) */ {
 public:
  inline CMsgMatchmakingProgress() : CMsgMatchmakingProgress(nullptr) {}
  ~CMsgMatchmakingProgress() override;
  explicit constexpr CMsgMatchmakingProgress(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgMatchmakingProgress(const CMsgMatchmakingProgress& from);
  CMsgMatchmakingProgress(CMsgMatchmakingProgress&& from) noexcept
    : CMsgMatchmakingProgress() {
    *this = ::std::move(from);
  }

  inline CMsgMatchmakingProgress& operator=(const CMsgMatchmakingProgress& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgMatchmakingProgress& operator=(CMsgMatchmakingProgress&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgMatchmakingProgress& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgMatchmakingProgress* internal_default_instance() {
    return reinterpret_cast<const CMsgMatchmakingProgress*>(
               &_CMsgMatchmakingProgress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    101;

  friend void swap(CMsgMatchmakingProgress& a, CMsgMatchmakingProgress& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgMatchmakingProgress* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgMatchmakingProgress* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgMatchmakingProgress* New() const final {
    return new CMsgMatchmakingProgress();
  }

  CMsgMatchmakingProgress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgMatchmakingProgress>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgMatchmakingProgress& from);
  void MergeFrom(const CMsgMatchmakingProgress& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgMatchmakingProgress* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgMatchmakingProgress";
  }
  protected:
  explicit CMsgMatchmakingProgress(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrgencyPctFieldNumber = 1,
    kAvgWaitTimeNewFieldNumber = 4,
    kAvgWaitTimeJoinLateFieldNumber = 5,
    kYourWaitTimeFieldNumber = 6,
    kMatchingWorldwideSearchingPlayersFieldNumber = 8,
    kMatchingNearYouSearchingPlayersFieldNumber = 9,
    kTotalWorldwideSearchingPlayersFieldNumber = 13,
    kTotalNearYouSearchingPlayersFieldNumber = 14,
    kMatchingWorldwideActivePlayersFieldNumber = 15,
    kMatchingNearYouActivePlayersFieldNumber = 16,
    kTotalWorldwideActivePlayersFieldNumber = 17,
    kTotalNearYouActivePlayersFieldNumber = 18,
    kMatchingWorldwideEmptyGameserversFieldNumber = 19,
    kMatchingNearYouEmptyGameserversFieldNumber = 20,
    kTotalWorldwideEmptyGameserversFieldNumber = 21,
    kTotalNearYouEmptyGameserversFieldNumber = 22,
  };
  // optional uint32 urgency_pct = 1;
  bool has_urgency_pct() const;
  private:
  bool _internal_has_urgency_pct() const;
  public:
  void clear_urgency_pct();
  ::PROTOBUF_NAMESPACE_ID::uint32 urgency_pct() const;
  void set_urgency_pct(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_urgency_pct() const;
  void _internal_set_urgency_pct(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 avg_wait_time_new = 4;
  bool has_avg_wait_time_new() const;
  private:
  bool _internal_has_avg_wait_time_new() const;
  public:
  void clear_avg_wait_time_new();
  ::PROTOBUF_NAMESPACE_ID::uint32 avg_wait_time_new() const;
  void set_avg_wait_time_new(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_avg_wait_time_new() const;
  void _internal_set_avg_wait_time_new(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 avg_wait_time_join_late = 5;
  bool has_avg_wait_time_join_late() const;
  private:
  bool _internal_has_avg_wait_time_join_late() const;
  public:
  void clear_avg_wait_time_join_late();
  ::PROTOBUF_NAMESPACE_ID::uint32 avg_wait_time_join_late() const;
  void set_avg_wait_time_join_late(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_avg_wait_time_join_late() const;
  void _internal_set_avg_wait_time_join_late(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 your_wait_time = 6;
  bool has_your_wait_time() const;
  private:
  bool _internal_has_your_wait_time() const;
  public:
  void clear_your_wait_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 your_wait_time() const;
  void set_your_wait_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_your_wait_time() const;
  void _internal_set_your_wait_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 matching_worldwide_searching_players = 8;
  bool has_matching_worldwide_searching_players() const;
  private:
  bool _internal_has_matching_worldwide_searching_players() const;
  public:
  void clear_matching_worldwide_searching_players();
  ::PROTOBUF_NAMESPACE_ID::uint32 matching_worldwide_searching_players() const;
  void set_matching_worldwide_searching_players(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_matching_worldwide_searching_players() const;
  void _internal_set_matching_worldwide_searching_players(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 matching_near_you_searching_players = 9;
  bool has_matching_near_you_searching_players() const;
  private:
  bool _internal_has_matching_near_you_searching_players() const;
  public:
  void clear_matching_near_you_searching_players();
  ::PROTOBUF_NAMESPACE_ID::uint32 matching_near_you_searching_players() const;
  void set_matching_near_you_searching_players(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_matching_near_you_searching_players() const;
  void _internal_set_matching_near_you_searching_players(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 total_worldwide_searching_players = 13;
  bool has_total_worldwide_searching_players() const;
  private:
  bool _internal_has_total_worldwide_searching_players() const;
  public:
  void clear_total_worldwide_searching_players();
  ::PROTOBUF_NAMESPACE_ID::uint32 total_worldwide_searching_players() const;
  void set_total_worldwide_searching_players(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_total_worldwide_searching_players() const;
  void _internal_set_total_worldwide_searching_players(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 total_near_you_searching_players = 14;
  bool has_total_near_you_searching_players() const;
  private:
  bool _internal_has_total_near_you_searching_players() const;
  public:
  void clear_total_near_you_searching_players();
  ::PROTOBUF_NAMESPACE_ID::uint32 total_near_you_searching_players() const;
  void set_total_near_you_searching_players(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_total_near_you_searching_players() const;
  void _internal_set_total_near_you_searching_players(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 matching_worldwide_active_players = 15;
  bool has_matching_worldwide_active_players() const;
  private:
  bool _internal_has_matching_worldwide_active_players() const;
  public:
  void clear_matching_worldwide_active_players();
  ::PROTOBUF_NAMESPACE_ID::uint32 matching_worldwide_active_players() const;
  void set_matching_worldwide_active_players(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_matching_worldwide_active_players() const;
  void _internal_set_matching_worldwide_active_players(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 matching_near_you_active_players = 16;
  bool has_matching_near_you_active_players() const;
  private:
  bool _internal_has_matching_near_you_active_players() const;
  public:
  void clear_matching_near_you_active_players();
  ::PROTOBUF_NAMESPACE_ID::uint32 matching_near_you_active_players() const;
  void set_matching_near_you_active_players(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_matching_near_you_active_players() const;
  void _internal_set_matching_near_you_active_players(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 total_worldwide_active_players = 17;
  bool has_total_worldwide_active_players() const;
  private:
  bool _internal_has_total_worldwide_active_players() const;
  public:
  void clear_total_worldwide_active_players();
  ::PROTOBUF_NAMESPACE_ID::uint32 total_worldwide_active_players() const;
  void set_total_worldwide_active_players(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_total_worldwide_active_players() const;
  void _internal_set_total_worldwide_active_players(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 total_near_you_active_players = 18;
  bool has_total_near_you_active_players() const;
  private:
  bool _internal_has_total_near_you_active_players() const;
  public:
  void clear_total_near_you_active_players();
  ::PROTOBUF_NAMESPACE_ID::uint32 total_near_you_active_players() const;
  void set_total_near_you_active_players(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_total_near_you_active_players() const;
  void _internal_set_total_near_you_active_players(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 matching_worldwide_empty_gameservers = 19;
  bool has_matching_worldwide_empty_gameservers() const;
  private:
  bool _internal_has_matching_worldwide_empty_gameservers() const;
  public:
  void clear_matching_worldwide_empty_gameservers();
  ::PROTOBUF_NAMESPACE_ID::uint32 matching_worldwide_empty_gameservers() const;
  void set_matching_worldwide_empty_gameservers(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_matching_worldwide_empty_gameservers() const;
  void _internal_set_matching_worldwide_empty_gameservers(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 matching_near_you_empty_gameservers = 20;
  bool has_matching_near_you_empty_gameservers() const;
  private:
  bool _internal_has_matching_near_you_empty_gameservers() const;
  public:
  void clear_matching_near_you_empty_gameservers();
  ::PROTOBUF_NAMESPACE_ID::uint32 matching_near_you_empty_gameservers() const;
  void set_matching_near_you_empty_gameservers(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_matching_near_you_empty_gameservers() const;
  void _internal_set_matching_near_you_empty_gameservers(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 total_worldwide_empty_gameservers = 21;
  bool has_total_worldwide_empty_gameservers() const;
  private:
  bool _internal_has_total_worldwide_empty_gameservers() const;
  public:
  void clear_total_worldwide_empty_gameservers();
  ::PROTOBUF_NAMESPACE_ID::uint32 total_worldwide_empty_gameservers() const;
  void set_total_worldwide_empty_gameservers(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_total_worldwide_empty_gameservers() const;
  void _internal_set_total_worldwide_empty_gameservers(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 total_near_you_empty_gameservers = 22;
  bool has_total_near_you_empty_gameservers() const;
  private:
  bool _internal_has_total_near_you_empty_gameservers() const;
  public:
  void clear_total_near_you_empty_gameservers();
  ::PROTOBUF_NAMESPACE_ID::uint32 total_near_you_empty_gameservers() const;
  void set_total_near_you_empty_gameservers(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_total_near_you_empty_gameservers() const;
  void _internal_set_total_near_you_empty_gameservers(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgMatchmakingProgress)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 urgency_pct_;
  ::PROTOBUF_NAMESPACE_ID::uint32 avg_wait_time_new_;
  ::PROTOBUF_NAMESPACE_ID::uint32 avg_wait_time_join_late_;
  ::PROTOBUF_NAMESPACE_ID::uint32 your_wait_time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 matching_worldwide_searching_players_;
  ::PROTOBUF_NAMESPACE_ID::uint32 matching_near_you_searching_players_;
  ::PROTOBUF_NAMESPACE_ID::uint32 total_worldwide_searching_players_;
  ::PROTOBUF_NAMESPACE_ID::uint32 total_near_you_searching_players_;
  ::PROTOBUF_NAMESPACE_ID::uint32 matching_worldwide_active_players_;
  ::PROTOBUF_NAMESPACE_ID::uint32 matching_near_you_active_players_;
  ::PROTOBUF_NAMESPACE_ID::uint32 total_worldwide_active_players_;
  ::PROTOBUF_NAMESPACE_ID::uint32 total_near_you_active_players_;
  ::PROTOBUF_NAMESPACE_ID::uint32 matching_worldwide_empty_gameservers_;
  ::PROTOBUF_NAMESPACE_ID::uint32 matching_near_you_empty_gameservers_;
  ::PROTOBUF_NAMESPACE_ID::uint32 total_worldwide_empty_gameservers_;
  ::PROTOBUF_NAMESPACE_ID::uint32 total_near_you_empty_gameservers_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgMvMVictoryInfo_Item final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgMvMVictoryInfo.Item) */ {
 public:
  inline CMsgMvMVictoryInfo_Item() : CMsgMvMVictoryInfo_Item(nullptr) {}
  ~CMsgMvMVictoryInfo_Item() override;
  explicit constexpr CMsgMvMVictoryInfo_Item(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgMvMVictoryInfo_Item(const CMsgMvMVictoryInfo_Item& from);
  CMsgMvMVictoryInfo_Item(CMsgMvMVictoryInfo_Item&& from) noexcept
    : CMsgMvMVictoryInfo_Item() {
    *this = ::std::move(from);
  }

  inline CMsgMvMVictoryInfo_Item& operator=(const CMsgMvMVictoryInfo_Item& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgMvMVictoryInfo_Item& operator=(CMsgMvMVictoryInfo_Item&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgMvMVictoryInfo_Item& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgMvMVictoryInfo_Item* internal_default_instance() {
    return reinterpret_cast<const CMsgMvMVictoryInfo_Item*>(
               &_CMsgMvMVictoryInfo_Item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    102;

  friend void swap(CMsgMvMVictoryInfo_Item& a, CMsgMvMVictoryInfo_Item& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgMvMVictoryInfo_Item* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgMvMVictoryInfo_Item* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgMvMVictoryInfo_Item* New() const final {
    return new CMsgMvMVictoryInfo_Item();
  }

  CMsgMvMVictoryInfo_Item* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgMvMVictoryInfo_Item>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgMvMVictoryInfo_Item& from);
  void MergeFrom(const CMsgMvMVictoryInfo_Item& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgMvMVictoryInfo_Item* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgMvMVictoryInfo.Item";
  }
  protected:
  explicit CMsgMvMVictoryInfo_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemDataFieldNumber = 2,
    kSquadSurplusClaimerSteamIdFieldNumber = 3,
    kGrantReasonFieldNumber = 1,
  };
  // optional bytes item_data = 2;
  bool has_item_data() const;
  private:
  bool _internal_has_item_data() const;
  public:
  void clear_item_data();
  const std::string& item_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_item_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_item_data();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_item_data();
  void set_allocated_item_data(std::string* item_data);
  private:
  const std::string& _internal_item_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_item_data(const std::string& value);
  std::string* _internal_mutable_item_data();
  public:

  // optional fixed64 squad_surplus_claimer_steam_id = 3;
  bool has_squad_surplus_claimer_steam_id() const;
  private:
  bool _internal_has_squad_surplus_claimer_steam_id() const;
  public:
  void clear_squad_surplus_claimer_steam_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 squad_surplus_claimer_steam_id() const;
  void set_squad_surplus_claimer_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_squad_surplus_claimer_steam_id() const;
  void _internal_set_squad_surplus_claimer_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional .CMsgMvMVictoryInfo.GrantReason grant_reason = 1 [default = INVALID];
  bool has_grant_reason() const;
  private:
  bool _internal_has_grant_reason() const;
  public:
  void clear_grant_reason();
  ::CMsgMvMVictoryInfo_GrantReason grant_reason() const;
  void set_grant_reason(::CMsgMvMVictoryInfo_GrantReason value);
  private:
  ::CMsgMvMVictoryInfo_GrantReason _internal_grant_reason() const;
  void _internal_set_grant_reason(::CMsgMvMVictoryInfo_GrantReason value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgMvMVictoryInfo.Item)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr item_data_;
  ::PROTOBUF_NAMESPACE_ID::uint64 squad_surplus_claimer_steam_id_;
  int grant_reason_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgMvMVictoryInfo_Player final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgMvMVictoryInfo.Player) */ {
 public:
  inline CMsgMvMVictoryInfo_Player() : CMsgMvMVictoryInfo_Player(nullptr) {}
  ~CMsgMvMVictoryInfo_Player() override;
  explicit constexpr CMsgMvMVictoryInfo_Player(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgMvMVictoryInfo_Player(const CMsgMvMVictoryInfo_Player& from);
  CMsgMvMVictoryInfo_Player(CMsgMvMVictoryInfo_Player&& from) noexcept
    : CMsgMvMVictoryInfo_Player() {
    *this = ::std::move(from);
  }

  inline CMsgMvMVictoryInfo_Player& operator=(const CMsgMvMVictoryInfo_Player& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgMvMVictoryInfo_Player& operator=(CMsgMvMVictoryInfo_Player&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgMvMVictoryInfo_Player& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgMvMVictoryInfo_Player* internal_default_instance() {
    return reinterpret_cast<const CMsgMvMVictoryInfo_Player*>(
               &_CMsgMvMVictoryInfo_Player_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    103;

  friend void swap(CMsgMvMVictoryInfo_Player& a, CMsgMvMVictoryInfo_Player& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgMvMVictoryInfo_Player* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgMvMVictoryInfo_Player* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgMvMVictoryInfo_Player* New() const final {
    return new CMsgMvMVictoryInfo_Player();
  }

  CMsgMvMVictoryInfo_Player* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgMvMVictoryInfo_Player>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgMvMVictoryInfo_Player& from);
  void MergeFrom(const CMsgMvMVictoryInfo_Player& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgMvMVictoryInfo_Player* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgMvMVictoryInfo.Player";
  }
  protected:
  explicit CMsgMvMVictoryInfo_Player(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 8,
    kSteamIdFieldNumber = 1,
    kBadgeGrantedFieldNumber = 3,
    kBadgeProgressUpdatedFieldNumber = 4,
    kBadgeLeveledFieldNumber = 5,
    kVoucherMissingFieldNumber = 9,
    kBadgeLevelFieldNumber = 6,
    kBadgeProgressBitsFieldNumber = 7,
    kBadgePointsFieldNumber = 10,
  };
  // repeated .CMsgMvMVictoryInfo.Item items = 8;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::CMsgMvMVictoryInfo_Item* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgMvMVictoryInfo_Item >*
      mutable_items();
  private:
  const ::CMsgMvMVictoryInfo_Item& _internal_items(int index) const;
  ::CMsgMvMVictoryInfo_Item* _internal_add_items();
  public:
  const ::CMsgMvMVictoryInfo_Item& items(int index) const;
  ::CMsgMvMVictoryInfo_Item* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgMvMVictoryInfo_Item >&
      items() const;

  // optional fixed64 steam_id = 1;
  bool has_steam_id() const;
  private:
  bool _internal_has_steam_id() const;
  public:
  void clear_steam_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 steam_id() const;
  void set_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_steam_id() const;
  void _internal_set_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional bool badge_granted = 3;
  bool has_badge_granted() const;
  private:
  bool _internal_has_badge_granted() const;
  public:
  void clear_badge_granted();
  bool badge_granted() const;
  void set_badge_granted(bool value);
  private:
  bool _internal_badge_granted() const;
  void _internal_set_badge_granted(bool value);
  public:

  // optional bool badge_progress_updated = 4;
  bool has_badge_progress_updated() const;
  private:
  bool _internal_has_badge_progress_updated() const;
  public:
  void clear_badge_progress_updated();
  bool badge_progress_updated() const;
  void set_badge_progress_updated(bool value);
  private:
  bool _internal_badge_progress_updated() const;
  void _internal_set_badge_progress_updated(bool value);
  public:

  // optional bool badge_leveled = 5;
  bool has_badge_leveled() const;
  private:
  bool _internal_has_badge_leveled() const;
  public:
  void clear_badge_leveled();
  bool badge_leveled() const;
  void set_badge_leveled(bool value);
  private:
  bool _internal_badge_leveled() const;
  void _internal_set_badge_leveled(bool value);
  public:

  // optional bool voucher_missing = 9;
  bool has_voucher_missing() const;
  private:
  bool _internal_has_voucher_missing() const;
  public:
  void clear_voucher_missing();
  bool voucher_missing() const;
  void set_voucher_missing(bool value);
  private:
  bool _internal_voucher_missing() const;
  void _internal_set_voucher_missing(bool value);
  public:

  // optional uint32 badge_level = 6;
  bool has_badge_level() const;
  private:
  bool _internal_has_badge_level() const;
  public:
  void clear_badge_level();
  ::PROTOBUF_NAMESPACE_ID::uint32 badge_level() const;
  void set_badge_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_badge_level() const;
  void _internal_set_badge_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 badge_progress_bits = 7;
  bool has_badge_progress_bits() const;
  private:
  bool _internal_has_badge_progress_bits() const;
  public:
  void clear_badge_progress_bits();
  ::PROTOBUF_NAMESPACE_ID::uint32 badge_progress_bits() const;
  void set_badge_progress_bits(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_badge_progress_bits() const;
  void _internal_set_badge_progress_bits(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 badge_points = 10;
  bool has_badge_points() const;
  private:
  bool _internal_has_badge_points() const;
  public:
  void clear_badge_points();
  ::PROTOBUF_NAMESPACE_ID::uint32 badge_points() const;
  void set_badge_points(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_badge_points() const;
  void _internal_set_badge_points(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgMvMVictoryInfo.Player)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgMvMVictoryInfo_Item > items_;
  ::PROTOBUF_NAMESPACE_ID::uint64 steam_id_;
  bool badge_granted_;
  bool badge_progress_updated_;
  bool badge_leveled_;
  bool voucher_missing_;
  ::PROTOBUF_NAMESPACE_ID::uint32 badge_level_;
  ::PROTOBUF_NAMESPACE_ID::uint32 badge_progress_bits_;
  ::PROTOBUF_NAMESPACE_ID::uint32 badge_points_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgMvMVictoryInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgMvMVictoryInfo) */ {
 public:
  inline CMsgMvMVictoryInfo() : CMsgMvMVictoryInfo(nullptr) {}
  ~CMsgMvMVictoryInfo() override;
  explicit constexpr CMsgMvMVictoryInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgMvMVictoryInfo(const CMsgMvMVictoryInfo& from);
  CMsgMvMVictoryInfo(CMsgMvMVictoryInfo&& from) noexcept
    : CMsgMvMVictoryInfo() {
    *this = ::std::move(from);
  }

  inline CMsgMvMVictoryInfo& operator=(const CMsgMvMVictoryInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgMvMVictoryInfo& operator=(CMsgMvMVictoryInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgMvMVictoryInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgMvMVictoryInfo* internal_default_instance() {
    return reinterpret_cast<const CMsgMvMVictoryInfo*>(
               &_CMsgMvMVictoryInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    104;

  friend void swap(CMsgMvMVictoryInfo& a, CMsgMvMVictoryInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgMvMVictoryInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgMvMVictoryInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgMvMVictoryInfo* New() const final {
    return new CMsgMvMVictoryInfo();
  }

  CMsgMvMVictoryInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgMvMVictoryInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgMvMVictoryInfo& from);
  void MergeFrom(const CMsgMvMVictoryInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgMvMVictoryInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgMvMVictoryInfo";
  }
  protected:
  explicit CMsgMvMVictoryInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgMvMVictoryInfo_Item Item;
  typedef CMsgMvMVictoryInfo_Player Player;

  typedef CMsgMvMVictoryInfo_GrantReason GrantReason;
  static constexpr GrantReason INVALID =
    CMsgMvMVictoryInfo_GrantReason_INVALID;
  static constexpr GrantReason BADGE_LEVELED =
    CMsgMvMVictoryInfo_GrantReason_BADGE_LEVELED;
  static constexpr GrantReason SQUAD_SURPLUS =
    CMsgMvMVictoryInfo_GrantReason_SQUAD_SURPLUS;
  static constexpr GrantReason MANN_UP =
    CMsgMvMVictoryInfo_GrantReason_MANN_UP;
  static constexpr GrantReason HELP_A_NOOB =
    CMsgMvMVictoryInfo_GrantReason_HELP_A_NOOB;
  static inline bool GrantReason_IsValid(int value) {
    return CMsgMvMVictoryInfo_GrantReason_IsValid(value);
  }
  static constexpr GrantReason GrantReason_MIN =
    CMsgMvMVictoryInfo_GrantReason_GrantReason_MIN;
  static constexpr GrantReason GrantReason_MAX =
    CMsgMvMVictoryInfo_GrantReason_GrantReason_MAX;
  static constexpr int GrantReason_ARRAYSIZE =
    CMsgMvMVictoryInfo_GrantReason_GrantReason_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  GrantReason_descriptor() {
    return CMsgMvMVictoryInfo_GrantReason_descriptor();
  }
  template<typename T>
  static inline const std::string& GrantReason_Name(T enum_t_value) {
    static_assert(::std::is_same<T, GrantReason>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function GrantReason_Name.");
    return CMsgMvMVictoryInfo_GrantReason_Name(enum_t_value);
  }
  static inline bool GrantReason_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      GrantReason* value) {
    return CMsgMvMVictoryInfo_GrantReason_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersFieldNumber = 1,
    kTourNameFieldNumber = 2,
    kMissionNameFieldNumber = 3,
  };
  // repeated .CMsgMvMVictoryInfo.Player players = 1;
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  ::CMsgMvMVictoryInfo_Player* mutable_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgMvMVictoryInfo_Player >*
      mutable_players();
  private:
  const ::CMsgMvMVictoryInfo_Player& _internal_players(int index) const;
  ::CMsgMvMVictoryInfo_Player* _internal_add_players();
  public:
  const ::CMsgMvMVictoryInfo_Player& players(int index) const;
  ::CMsgMvMVictoryInfo_Player* add_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgMvMVictoryInfo_Player >&
      players() const;

  // optional string tour_name = 2;
  bool has_tour_name() const;
  private:
  bool _internal_has_tour_name() const;
  public:
  void clear_tour_name();
  const std::string& tour_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tour_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tour_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_tour_name();
  void set_allocated_tour_name(std::string* tour_name);
  private:
  const std::string& _internal_tour_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tour_name(const std::string& value);
  std::string* _internal_mutable_tour_name();
  public:

  // optional string mission_name = 3;
  bool has_mission_name() const;
  private:
  bool _internal_has_mission_name() const;
  public:
  void clear_mission_name();
  const std::string& mission_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mission_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mission_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_mission_name();
  void set_allocated_mission_name(std::string* mission_name);
  private:
  const std::string& _internal_mission_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mission_name(const std::string& value);
  std::string* _internal_mutable_mission_name();
  public:

  // @@protoc_insertion_point(class_scope:CMsgMvMVictoryInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgMvMVictoryInfo_Player > players_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tour_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mission_name_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CGCMsgTFHelloResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGCMsgTFHelloResponse) */ {
 public:
  inline CGCMsgTFHelloResponse() : CGCMsgTFHelloResponse(nullptr) {}
  ~CGCMsgTFHelloResponse() override;
  explicit constexpr CGCMsgTFHelloResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGCMsgTFHelloResponse(const CGCMsgTFHelloResponse& from);
  CGCMsgTFHelloResponse(CGCMsgTFHelloResponse&& from) noexcept
    : CGCMsgTFHelloResponse() {
    *this = ::std::move(from);
  }

  inline CGCMsgTFHelloResponse& operator=(const CGCMsgTFHelloResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGCMsgTFHelloResponse& operator=(CGCMsgTFHelloResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CGCMsgTFHelloResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGCMsgTFHelloResponse* internal_default_instance() {
    return reinterpret_cast<const CGCMsgTFHelloResponse*>(
               &_CGCMsgTFHelloResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    105;

  friend void swap(CGCMsgTFHelloResponse& a, CGCMsgTFHelloResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CGCMsgTFHelloResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGCMsgTFHelloResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGCMsgTFHelloResponse* New() const final {
    return new CGCMsgTFHelloResponse();
  }

  CGCMsgTFHelloResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGCMsgTFHelloResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGCMsgTFHelloResponse& from);
  void MergeFrom(const CGCMsgTFHelloResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGCMsgTFHelloResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGCMsgTFHelloResponse";
  }
  protected:
  explicit CGCMsgTFHelloResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionChecksumFieldNumber = 2,
    kVersionCheckFieldNumber = 1,
    kVersionVerboseFieldNumber = 3,
  };
  // repeated uint64 version_checksum = 2;
  int version_checksum_size() const;
  private:
  int _internal_version_checksum_size() const;
  public:
  void clear_version_checksum();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_version_checksum(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_version_checksum() const;
  void _internal_add_version_checksum(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_version_checksum();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 version_checksum(int index) const;
  void set_version_checksum(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_version_checksum(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      version_checksum() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_version_checksum();

  // optional uint32 version_check = 1;
  bool has_version_check() const;
  private:
  bool _internal_has_version_check() const;
  public:
  void clear_version_check();
  ::PROTOBUF_NAMESPACE_ID::uint32 version_check() const;
  void set_version_check(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_version_check() const;
  void _internal_set_version_check(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 version_verbose = 3;
  bool has_version_verbose() const;
  private:
  bool _internal_has_version_verbose() const;
  public:
  void clear_version_verbose();
  ::PROTOBUF_NAMESPACE_ID::uint32 version_verbose() const;
  void set_version_verbose(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_version_verbose() const;
  void _internal_set_version_verbose(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CGCMsgTFHelloResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > version_checksum_;
  ::PROTOBUF_NAMESPACE_ID::uint32 version_check_;
  ::PROTOBUF_NAMESPACE_ID::uint32 version_verbose_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CGCMsgTFSync final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGCMsgTFSync) */ {
 public:
  inline CGCMsgTFSync() : CGCMsgTFSync(nullptr) {}
  ~CGCMsgTFSync() override;
  explicit constexpr CGCMsgTFSync(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGCMsgTFSync(const CGCMsgTFSync& from);
  CGCMsgTFSync(CGCMsgTFSync&& from) noexcept
    : CGCMsgTFSync() {
    *this = ::std::move(from);
  }

  inline CGCMsgTFSync& operator=(const CGCMsgTFSync& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGCMsgTFSync& operator=(CGCMsgTFSync&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CGCMsgTFSync& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGCMsgTFSync* internal_default_instance() {
    return reinterpret_cast<const CGCMsgTFSync*>(
               &_CGCMsgTFSync_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    106;

  friend void swap(CGCMsgTFSync& a, CGCMsgTFSync& b) {
    a.Swap(&b);
  }
  inline void Swap(CGCMsgTFSync* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGCMsgTFSync* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGCMsgTFSync* New() const final {
    return new CGCMsgTFSync();
  }

  CGCMsgTFSync* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGCMsgTFSync>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGCMsgTFSync& from);
  void MergeFrom(const CGCMsgTFSync& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGCMsgTFSync* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGCMsgTFSync";
  }
  protected:
  explicit CGCMsgTFSync(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionChecksumFieldNumber = 1,
    kVersionChecksumExFieldNumber = 5,
    kVersionCheckFieldNumber = 2,
    kVersionCheckExFieldNumber = 3,
    kVersionCheckEx2FieldNumber = 4,
  };
  // optional bytes version_checksum = 1;
  bool has_version_checksum() const;
  private:
  bool _internal_has_version_checksum() const;
  public:
  void clear_version_checksum();
  const std::string& version_checksum() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version_checksum(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version_checksum();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_version_checksum();
  void set_allocated_version_checksum(std::string* version_checksum);
  private:
  const std::string& _internal_version_checksum() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version_checksum(const std::string& value);
  std::string* _internal_mutable_version_checksum();
  public:

  // optional bytes version_checksum_ex = 5;
  bool has_version_checksum_ex() const;
  private:
  bool _internal_has_version_checksum_ex() const;
  public:
  void clear_version_checksum_ex();
  const std::string& version_checksum_ex() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version_checksum_ex(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version_checksum_ex();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_version_checksum_ex();
  void set_allocated_version_checksum_ex(std::string* version_checksum_ex);
  private:
  const std::string& _internal_version_checksum_ex() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version_checksum_ex(const std::string& value);
  std::string* _internal_mutable_version_checksum_ex();
  public:

  // optional uint32 version_check = 2;
  bool has_version_check() const;
  private:
  bool _internal_has_version_check() const;
  public:
  void clear_version_check();
  ::PROTOBUF_NAMESPACE_ID::uint32 version_check() const;
  void set_version_check(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_version_check() const;
  void _internal_set_version_check(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 version_check_ex = 3;
  bool has_version_check_ex() const;
  private:
  bool _internal_has_version_check_ex() const;
  public:
  void clear_version_check_ex();
  ::PROTOBUF_NAMESPACE_ID::uint32 version_check_ex() const;
  void set_version_check_ex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_version_check_ex() const;
  void _internal_set_version_check_ex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 version_check_ex2 = 4;
  bool has_version_check_ex2() const;
  private:
  bool _internal_has_version_check_ex2() const;
  public:
  void clear_version_check_ex2();
  ::PROTOBUF_NAMESPACE_ID::uint32 version_check_ex2() const;
  void set_version_check_ex2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_version_check_ex2() const;
  void _internal_set_version_check_ex2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CGCMsgTFSync)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_checksum_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_checksum_ex_;
  ::PROTOBUF_NAMESPACE_ID::uint32 version_check_;
  ::PROTOBUF_NAMESPACE_ID::uint32 version_check_ex_;
  ::PROTOBUF_NAMESPACE_ID::uint32 version_check_ex2_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CGCMsgTFSyncEx final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGCMsgTFSyncEx) */ {
 public:
  inline CGCMsgTFSyncEx() : CGCMsgTFSyncEx(nullptr) {}
  ~CGCMsgTFSyncEx() override;
  explicit constexpr CGCMsgTFSyncEx(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGCMsgTFSyncEx(const CGCMsgTFSyncEx& from);
  CGCMsgTFSyncEx(CGCMsgTFSyncEx&& from) noexcept
    : CGCMsgTFSyncEx() {
    *this = ::std::move(from);
  }

  inline CGCMsgTFSyncEx& operator=(const CGCMsgTFSyncEx& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGCMsgTFSyncEx& operator=(CGCMsgTFSyncEx&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CGCMsgTFSyncEx& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGCMsgTFSyncEx* internal_default_instance() {
    return reinterpret_cast<const CGCMsgTFSyncEx*>(
               &_CGCMsgTFSyncEx_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    107;

  friend void swap(CGCMsgTFSyncEx& a, CGCMsgTFSyncEx& b) {
    a.Swap(&b);
  }
  inline void Swap(CGCMsgTFSyncEx* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGCMsgTFSyncEx* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGCMsgTFSyncEx* New() const final {
    return new CGCMsgTFSyncEx();
  }

  CGCMsgTFSyncEx* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGCMsgTFSyncEx>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGCMsgTFSyncEx& from);
  void MergeFrom(const CGCMsgTFSyncEx& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGCMsgTFSyncEx* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGCMsgTFSyncEx";
  }
  protected:
  explicit CGCMsgTFSyncEx(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionChecksumFieldNumber = 1,
    kVersionChecksumExFieldNumber = 2,
    kVersionCheckFieldNumber = 3,
  };
  // optional string version_checksum = 1;
  bool has_version_checksum() const;
  private:
  bool _internal_has_version_checksum() const;
  public:
  void clear_version_checksum();
  const std::string& version_checksum() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version_checksum(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version_checksum();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_version_checksum();
  void set_allocated_version_checksum(std::string* version_checksum);
  private:
  const std::string& _internal_version_checksum() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version_checksum(const std::string& value);
  std::string* _internal_mutable_version_checksum();
  public:

  // optional bytes version_checksum_ex = 2;
  bool has_version_checksum_ex() const;
  private:
  bool _internal_has_version_checksum_ex() const;
  public:
  void clear_version_checksum_ex();
  const std::string& version_checksum_ex() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version_checksum_ex(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version_checksum_ex();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_version_checksum_ex();
  void set_allocated_version_checksum_ex(std::string* version_checksum_ex);
  private:
  const std::string& _internal_version_checksum_ex() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version_checksum_ex(const std::string& value);
  std::string* _internal_mutable_version_checksum_ex();
  public:

  // optional uint32 version_check = 3;
  bool has_version_check() const;
  private:
  bool _internal_has_version_check() const;
  public:
  void clear_version_check();
  ::PROTOBUF_NAMESPACE_ID::uint32 version_check() const;
  void set_version_check(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_version_check() const;
  void _internal_set_version_check(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CGCMsgTFSyncEx)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_checksum_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_checksum_ex_;
  ::PROTOBUF_NAMESPACE_ID::uint32 version_check_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgMvMVictory_Player final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgMvMVictory.Player) */ {
 public:
  inline CMsgMvMVictory_Player() : CMsgMvMVictory_Player(nullptr) {}
  ~CMsgMvMVictory_Player() override;
  explicit constexpr CMsgMvMVictory_Player(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgMvMVictory_Player(const CMsgMvMVictory_Player& from);
  CMsgMvMVictory_Player(CMsgMvMVictory_Player&& from) noexcept
    : CMsgMvMVictory_Player() {
    *this = ::std::move(from);
  }

  inline CMsgMvMVictory_Player& operator=(const CMsgMvMVictory_Player& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgMvMVictory_Player& operator=(CMsgMvMVictory_Player&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgMvMVictory_Player& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgMvMVictory_Player* internal_default_instance() {
    return reinterpret_cast<const CMsgMvMVictory_Player*>(
               &_CMsgMvMVictory_Player_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    108;

  friend void swap(CMsgMvMVictory_Player& a, CMsgMvMVictory_Player& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgMvMVictory_Player* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgMvMVictory_Player* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgMvMVictory_Player* New() const final {
    return new CMsgMvMVictory_Player();
  }

  CMsgMvMVictory_Player* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgMvMVictory_Player>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgMvMVictory_Player& from);
  void MergeFrom(const CMsgMvMVictory_Player& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgMvMVictory_Player* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgMvMVictory.Player";
  }
  protected:
  explicit CMsgMvMVictory_Player(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamIdFieldNumber = 1,
    kSquadSurplusFieldNumber = 2,
  };
  // optional fixed64 steam_id = 1;
  bool has_steam_id() const;
  private:
  bool _internal_has_steam_id() const;
  public:
  void clear_steam_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 steam_id() const;
  void set_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_steam_id() const;
  void _internal_set_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional bool squad_surplus = 2;
  bool has_squad_surplus() const;
  private:
  bool _internal_has_squad_surplus() const;
  public:
  void clear_squad_surplus();
  bool squad_surplus() const;
  void set_squad_surplus(bool value);
  private:
  bool _internal_squad_surplus() const;
  void _internal_set_squad_surplus(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgMvMVictory.Player)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 steam_id_;
  bool squad_surplus_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgMvMVictory final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgMvMVictory) */ {
 public:
  inline CMsgMvMVictory() : CMsgMvMVictory(nullptr) {}
  ~CMsgMvMVictory() override;
  explicit constexpr CMsgMvMVictory(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgMvMVictory(const CMsgMvMVictory& from);
  CMsgMvMVictory(CMsgMvMVictory&& from) noexcept
    : CMsgMvMVictory() {
    *this = ::std::move(from);
  }

  inline CMsgMvMVictory& operator=(const CMsgMvMVictory& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgMvMVictory& operator=(CMsgMvMVictory&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgMvMVictory& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgMvMVictory* internal_default_instance() {
    return reinterpret_cast<const CMsgMvMVictory*>(
               &_CMsgMvMVictory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    109;

  friend void swap(CMsgMvMVictory& a, CMsgMvMVictory& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgMvMVictory* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgMvMVictory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgMvMVictory* New() const final {
    return new CMsgMvMVictory();
  }

  CMsgMvMVictory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgMvMVictory>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgMvMVictory& from);
  void MergeFrom(const CMsgMvMVictory& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgMvMVictory* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgMvMVictory";
  }
  protected:
  explicit CMsgMvMVictory(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgMvMVictory_Player Player;

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersFieldNumber = 2,
    kTourNameMannupFieldNumber = 5,
    kMissionNameFieldNumber = 6,
    kLegacyMissionIndexFieldNumber = 1,
    kEventTimeFieldNumber = 4,
    kLobbyIdFieldNumber = 3,
  };
  // repeated .CMsgMvMVictory.Player players = 2;
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  ::CMsgMvMVictory_Player* mutable_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgMvMVictory_Player >*
      mutable_players();
  private:
  const ::CMsgMvMVictory_Player& _internal_players(int index) const;
  ::CMsgMvMVictory_Player* _internal_add_players();
  public:
  const ::CMsgMvMVictory_Player& players(int index) const;
  ::CMsgMvMVictory_Player* add_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgMvMVictory_Player >&
      players() const;

  // optional string tour_name_mannup = 5;
  bool has_tour_name_mannup() const;
  private:
  bool _internal_has_tour_name_mannup() const;
  public:
  void clear_tour_name_mannup();
  const std::string& tour_name_mannup() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tour_name_mannup(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tour_name_mannup();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_tour_name_mannup();
  void set_allocated_tour_name_mannup(std::string* tour_name_mannup);
  private:
  const std::string& _internal_tour_name_mannup() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tour_name_mannup(const std::string& value);
  std::string* _internal_mutable_tour_name_mannup();
  public:

  // optional string mission_name = 6;
  bool has_mission_name() const;
  private:
  bool _internal_has_mission_name() const;
  public:
  void clear_mission_name();
  const std::string& mission_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mission_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mission_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_mission_name();
  void set_allocated_mission_name(std::string* mission_name);
  private:
  const std::string& _internal_mission_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mission_name(const std::string& value);
  std::string* _internal_mutable_mission_name();
  public:

  // optional uint32 legacy_mission_index = 1;
  bool has_legacy_mission_index() const;
  private:
  bool _internal_has_legacy_mission_index() const;
  public:
  void clear_legacy_mission_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 legacy_mission_index() const;
  void set_legacy_mission_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_legacy_mission_index() const;
  void _internal_set_legacy_mission_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional fixed32 event_time = 4;
  bool has_event_time() const;
  private:
  bool _internal_has_event_time() const;
  public:
  void clear_event_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 event_time() const;
  void set_event_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_event_time() const;
  void _internal_set_event_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 lobby_id = 3;
  bool has_lobby_id() const;
  private:
  bool _internal_has_lobby_id() const;
  public:
  void clear_lobby_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 lobby_id() const;
  void set_lobby_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_lobby_id() const;
  void _internal_set_lobby_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgMvMVictory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgMvMVictory_Player > players_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tour_name_mannup_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mission_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 legacy_mission_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 event_time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 lobby_id_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgMvMMannUpVictoryReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgMvMMannUpVictoryReply) */ {
 public:
  inline CMsgMvMMannUpVictoryReply() : CMsgMvMMannUpVictoryReply(nullptr) {}
  ~CMsgMvMMannUpVictoryReply() override;
  explicit constexpr CMsgMvMMannUpVictoryReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgMvMMannUpVictoryReply(const CMsgMvMMannUpVictoryReply& from);
  CMsgMvMMannUpVictoryReply(CMsgMvMMannUpVictoryReply&& from) noexcept
    : CMsgMvMMannUpVictoryReply() {
    *this = ::std::move(from);
  }

  inline CMsgMvMMannUpVictoryReply& operator=(const CMsgMvMMannUpVictoryReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgMvMMannUpVictoryReply& operator=(CMsgMvMMannUpVictoryReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgMvMMannUpVictoryReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgMvMMannUpVictoryReply* internal_default_instance() {
    return reinterpret_cast<const CMsgMvMMannUpVictoryReply*>(
               &_CMsgMvMMannUpVictoryReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    110;

  friend void swap(CMsgMvMMannUpVictoryReply& a, CMsgMvMMannUpVictoryReply& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgMvMMannUpVictoryReply* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgMvMMannUpVictoryReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgMvMMannUpVictoryReply* New() const final {
    return new CMsgMvMMannUpVictoryReply();
  }

  CMsgMvMMannUpVictoryReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgMvMMannUpVictoryReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgMvMMannUpVictoryReply& from);
  void MergeFrom(const CMsgMvMMannUpVictoryReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgMvMMannUpVictoryReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgMvMMannUpVictoryReply";
  }
  protected:
  explicit CMsgMvMMannUpVictoryReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgMvMMannUpVictoryReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGameServerKickingLobby final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGameServerKickingLobby) */ {
 public:
  inline CMsgGameServerKickingLobby() : CMsgGameServerKickingLobby(nullptr) {}
  ~CMsgGameServerKickingLobby() override;
  explicit constexpr CMsgGameServerKickingLobby(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGameServerKickingLobby(const CMsgGameServerKickingLobby& from);
  CMsgGameServerKickingLobby(CMsgGameServerKickingLobby&& from) noexcept
    : CMsgGameServerKickingLobby() {
    *this = ::std::move(from);
  }

  inline CMsgGameServerKickingLobby& operator=(const CMsgGameServerKickingLobby& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGameServerKickingLobby& operator=(CMsgGameServerKickingLobby&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGameServerKickingLobby& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGameServerKickingLobby* internal_default_instance() {
    return reinterpret_cast<const CMsgGameServerKickingLobby*>(
               &_CMsgGameServerKickingLobby_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    111;

  friend void swap(CMsgGameServerKickingLobby& a, CMsgGameServerKickingLobby& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGameServerKickingLobby* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGameServerKickingLobby* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGameServerKickingLobby* New() const final {
    return new CMsgGameServerKickingLobby();
  }

  CMsgGameServerKickingLobby* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGameServerKickingLobby>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgGameServerKickingLobby& from);
  void MergeFrom(const CMsgGameServerKickingLobby& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGameServerKickingLobby* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGameServerKickingLobby";
  }
  protected:
  explicit CMsgGameServerKickingLobby(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLobbyIdFieldNumber = 3,
    kMatchIdFieldNumber = 4,
  };
  // optional uint64 lobby_id = 3;
  bool has_lobby_id() const;
  private:
  bool _internal_has_lobby_id() const;
  public:
  void clear_lobby_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 lobby_id() const;
  void set_lobby_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_lobby_id() const;
  void _internal_set_lobby_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 match_id = 4;
  bool has_match_id() const;
  private:
  bool _internal_has_match_id() const;
  public:
  void clear_match_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 match_id() const;
  void set_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_match_id() const;
  void _internal_set_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGameServerKickingLobby)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 lobby_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 match_id_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGameServerKickingLobbyResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGameServerKickingLobbyResponse) */ {
 public:
  inline CMsgGameServerKickingLobbyResponse() : CMsgGameServerKickingLobbyResponse(nullptr) {}
  ~CMsgGameServerKickingLobbyResponse() override;
  explicit constexpr CMsgGameServerKickingLobbyResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGameServerKickingLobbyResponse(const CMsgGameServerKickingLobbyResponse& from);
  CMsgGameServerKickingLobbyResponse(CMsgGameServerKickingLobbyResponse&& from) noexcept
    : CMsgGameServerKickingLobbyResponse() {
    *this = ::std::move(from);
  }

  inline CMsgGameServerKickingLobbyResponse& operator=(const CMsgGameServerKickingLobbyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGameServerKickingLobbyResponse& operator=(CMsgGameServerKickingLobbyResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGameServerKickingLobbyResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGameServerKickingLobbyResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgGameServerKickingLobbyResponse*>(
               &_CMsgGameServerKickingLobbyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    112;

  friend void swap(CMsgGameServerKickingLobbyResponse& a, CMsgGameServerKickingLobbyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGameServerKickingLobbyResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGameServerKickingLobbyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGameServerKickingLobbyResponse* New() const final {
    return new CMsgGameServerKickingLobbyResponse();
  }

  CMsgGameServerKickingLobbyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGameServerKickingLobbyResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgGameServerKickingLobbyResponse& from);
  void MergeFrom(const CMsgGameServerKickingLobbyResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGameServerKickingLobbyResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGameServerKickingLobbyResponse";
  }
  protected:
  explicit CMsgGameServerKickingLobbyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgGameServerKickingLobbyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgLeaveGameAndPrepareToJoinParty final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgLeaveGameAndPrepareToJoinParty) */ {
 public:
  inline CMsgLeaveGameAndPrepareToJoinParty() : CMsgLeaveGameAndPrepareToJoinParty(nullptr) {}
  ~CMsgLeaveGameAndPrepareToJoinParty() override;
  explicit constexpr CMsgLeaveGameAndPrepareToJoinParty(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgLeaveGameAndPrepareToJoinParty(const CMsgLeaveGameAndPrepareToJoinParty& from);
  CMsgLeaveGameAndPrepareToJoinParty(CMsgLeaveGameAndPrepareToJoinParty&& from) noexcept
    : CMsgLeaveGameAndPrepareToJoinParty() {
    *this = ::std::move(from);
  }

  inline CMsgLeaveGameAndPrepareToJoinParty& operator=(const CMsgLeaveGameAndPrepareToJoinParty& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgLeaveGameAndPrepareToJoinParty& operator=(CMsgLeaveGameAndPrepareToJoinParty&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgLeaveGameAndPrepareToJoinParty& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgLeaveGameAndPrepareToJoinParty* internal_default_instance() {
    return reinterpret_cast<const CMsgLeaveGameAndPrepareToJoinParty*>(
               &_CMsgLeaveGameAndPrepareToJoinParty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    113;

  friend void swap(CMsgLeaveGameAndPrepareToJoinParty& a, CMsgLeaveGameAndPrepareToJoinParty& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgLeaveGameAndPrepareToJoinParty* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgLeaveGameAndPrepareToJoinParty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgLeaveGameAndPrepareToJoinParty* New() const final {
    return new CMsgLeaveGameAndPrepareToJoinParty();
  }

  CMsgLeaveGameAndPrepareToJoinParty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgLeaveGameAndPrepareToJoinParty>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgLeaveGameAndPrepareToJoinParty& from);
  void MergeFrom(const CMsgLeaveGameAndPrepareToJoinParty& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgLeaveGameAndPrepareToJoinParty* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgLeaveGameAndPrepareToJoinParty";
  }
  protected:
  explicit CMsgLeaveGameAndPrepareToJoinParty(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartyIdFieldNumber = 1,
  };
  // optional fixed64 party_id = 1;
  bool has_party_id() const;
  private:
  bool _internal_has_party_id() const;
  public:
  void clear_party_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 party_id() const;
  void set_party_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_party_id() const;
  void _internal_set_party_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgLeaveGameAndPrepareToJoinParty)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 party_id_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgPlayerLeftMatch final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgPlayerLeftMatch) */ {
 public:
  inline CMsgPlayerLeftMatch() : CMsgPlayerLeftMatch(nullptr) {}
  ~CMsgPlayerLeftMatch() override;
  explicit constexpr CMsgPlayerLeftMatch(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgPlayerLeftMatch(const CMsgPlayerLeftMatch& from);
  CMsgPlayerLeftMatch(CMsgPlayerLeftMatch&& from) noexcept
    : CMsgPlayerLeftMatch() {
    *this = ::std::move(from);
  }

  inline CMsgPlayerLeftMatch& operator=(const CMsgPlayerLeftMatch& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgPlayerLeftMatch& operator=(CMsgPlayerLeftMatch&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgPlayerLeftMatch& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgPlayerLeftMatch* internal_default_instance() {
    return reinterpret_cast<const CMsgPlayerLeftMatch*>(
               &_CMsgPlayerLeftMatch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    114;

  friend void swap(CMsgPlayerLeftMatch& a, CMsgPlayerLeftMatch& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgPlayerLeftMatch* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgPlayerLeftMatch* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgPlayerLeftMatch* New() const final {
    return new CMsgPlayerLeftMatch();
  }

  CMsgPlayerLeftMatch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgPlayerLeftMatch>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgPlayerLeftMatch& from);
  void MergeFrom(const CMsgPlayerLeftMatch& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgPlayerLeftMatch* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgPlayerLeftMatch";
  }
  protected:
  explicit CMsgPlayerLeftMatch(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpBreakdownFieldNumber = 6,
    kSteamIdFieldNumber = 1,
    kLeaveReasonFieldNumber = 2,
    kWasAbandonFieldNumber = 3,
    kLobbyIdFieldNumber = 4,
    kMatchIdFieldNumber = 5,
  };
  // repeated .CMsgTFXPSource xp_breakdown = 6;
  int xp_breakdown_size() const;
  private:
  int _internal_xp_breakdown_size() const;
  public:
  void clear_xp_breakdown();
  ::CMsgTFXPSource* mutable_xp_breakdown(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgTFXPSource >*
      mutable_xp_breakdown();
  private:
  const ::CMsgTFXPSource& _internal_xp_breakdown(int index) const;
  ::CMsgTFXPSource* _internal_add_xp_breakdown();
  public:
  const ::CMsgTFXPSource& xp_breakdown(int index) const;
  ::CMsgTFXPSource* add_xp_breakdown();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgTFXPSource >&
      xp_breakdown() const;

  // optional fixed64 steam_id = 1;
  bool has_steam_id() const;
  private:
  bool _internal_has_steam_id() const;
  public:
  void clear_steam_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 steam_id() const;
  void set_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_steam_id() const;
  void _internal_set_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional .TFMatchLeaveReason leave_reason = 2 [default = TFMatchLeaveReason_UNSPECIFIED];
  bool has_leave_reason() const;
  private:
  bool _internal_has_leave_reason() const;
  public:
  void clear_leave_reason();
  ::TFMatchLeaveReason leave_reason() const;
  void set_leave_reason(::TFMatchLeaveReason value);
  private:
  ::TFMatchLeaveReason _internal_leave_reason() const;
  void _internal_set_leave_reason(::TFMatchLeaveReason value);
  public:

  // optional bool was_abandon = 3;
  bool has_was_abandon() const;
  private:
  bool _internal_has_was_abandon() const;
  public:
  void clear_was_abandon();
  bool was_abandon() const;
  void set_was_abandon(bool value);
  private:
  bool _internal_was_abandon() const;
  void _internal_set_was_abandon(bool value);
  public:

  // optional uint64 lobby_id = 4;
  bool has_lobby_id() const;
  private:
  bool _internal_has_lobby_id() const;
  public:
  void clear_lobby_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 lobby_id() const;
  void set_lobby_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_lobby_id() const;
  void _internal_set_lobby_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 match_id = 5;
  bool has_match_id() const;
  private:
  bool _internal_has_match_id() const;
  public:
  void clear_match_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 match_id() const;
  void set_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_match_id() const;
  void _internal_set_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgPlayerLeftMatch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgTFXPSource > xp_breakdown_;
  ::PROTOBUF_NAMESPACE_ID::uint64 steam_id_;
  int leave_reason_;
  bool was_abandon_;
  ::PROTOBUF_NAMESPACE_ID::uint64 lobby_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 match_id_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgPlayerLeftMatchResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgPlayerLeftMatchResponse) */ {
 public:
  inline CMsgPlayerLeftMatchResponse() : CMsgPlayerLeftMatchResponse(nullptr) {}
  ~CMsgPlayerLeftMatchResponse() override;
  explicit constexpr CMsgPlayerLeftMatchResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgPlayerLeftMatchResponse(const CMsgPlayerLeftMatchResponse& from);
  CMsgPlayerLeftMatchResponse(CMsgPlayerLeftMatchResponse&& from) noexcept
    : CMsgPlayerLeftMatchResponse() {
    *this = ::std::move(from);
  }

  inline CMsgPlayerLeftMatchResponse& operator=(const CMsgPlayerLeftMatchResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgPlayerLeftMatchResponse& operator=(CMsgPlayerLeftMatchResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgPlayerLeftMatchResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgPlayerLeftMatchResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgPlayerLeftMatchResponse*>(
               &_CMsgPlayerLeftMatchResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    115;

  friend void swap(CMsgPlayerLeftMatchResponse& a, CMsgPlayerLeftMatchResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgPlayerLeftMatchResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgPlayerLeftMatchResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgPlayerLeftMatchResponse* New() const final {
    return new CMsgPlayerLeftMatchResponse();
  }

  CMsgPlayerLeftMatchResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgPlayerLeftMatchResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgPlayerLeftMatchResponse& from);
  void MergeFrom(const CMsgPlayerLeftMatchResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgPlayerLeftMatchResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgPlayerLeftMatchResponse";
  }
  protected:
  explicit CMsgPlayerLeftMatchResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgPlayerLeftMatchResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgProcessMatchVoteKick_Vote final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgProcessMatchVoteKick.Vote) */ {
 public:
  inline CMsgProcessMatchVoteKick_Vote() : CMsgProcessMatchVoteKick_Vote(nullptr) {}
  ~CMsgProcessMatchVoteKick_Vote() override;
  explicit constexpr CMsgProcessMatchVoteKick_Vote(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgProcessMatchVoteKick_Vote(const CMsgProcessMatchVoteKick_Vote& from);
  CMsgProcessMatchVoteKick_Vote(CMsgProcessMatchVoteKick_Vote&& from) noexcept
    : CMsgProcessMatchVoteKick_Vote() {
    *this = ::std::move(from);
  }

  inline CMsgProcessMatchVoteKick_Vote& operator=(const CMsgProcessMatchVoteKick_Vote& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgProcessMatchVoteKick_Vote& operator=(CMsgProcessMatchVoteKick_Vote&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgProcessMatchVoteKick_Vote& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgProcessMatchVoteKick_Vote* internal_default_instance() {
    return reinterpret_cast<const CMsgProcessMatchVoteKick_Vote*>(
               &_CMsgProcessMatchVoteKick_Vote_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    116;

  friend void swap(CMsgProcessMatchVoteKick_Vote& a, CMsgProcessMatchVoteKick_Vote& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgProcessMatchVoteKick_Vote* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgProcessMatchVoteKick_Vote* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgProcessMatchVoteKick_Vote* New() const final {
    return new CMsgProcessMatchVoteKick_Vote();
  }

  CMsgProcessMatchVoteKick_Vote* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgProcessMatchVoteKick_Vote>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgProcessMatchVoteKick_Vote& from);
  void MergeFrom(const CMsgProcessMatchVoteKick_Vote& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgProcessMatchVoteKick_Vote* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgProcessMatchVoteKick.Vote";
  }
  protected:
  explicit CMsgProcessMatchVoteKick_Vote(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamIdFieldNumber = 1,
    kVoteYayFieldNumber = 2,
  };
  // optional fixed64 steam_id = 1;
  bool has_steam_id() const;
  private:
  bool _internal_has_steam_id() const;
  public:
  void clear_steam_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 steam_id() const;
  void set_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_steam_id() const;
  void _internal_set_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional bool vote_yay = 2;
  bool has_vote_yay() const;
  private:
  bool _internal_has_vote_yay() const;
  public:
  void clear_vote_yay();
  bool vote_yay() const;
  void set_vote_yay(bool value);
  private:
  bool _internal_vote_yay() const;
  void _internal_set_vote_yay(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgProcessMatchVoteKick.Vote)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 steam_id_;
  bool vote_yay_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgProcessMatchVoteKick final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgProcessMatchVoteKick) */ {
 public:
  inline CMsgProcessMatchVoteKick() : CMsgProcessMatchVoteKick(nullptr) {}
  ~CMsgProcessMatchVoteKick() override;
  explicit constexpr CMsgProcessMatchVoteKick(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgProcessMatchVoteKick(const CMsgProcessMatchVoteKick& from);
  CMsgProcessMatchVoteKick(CMsgProcessMatchVoteKick&& from) noexcept
    : CMsgProcessMatchVoteKick() {
    *this = ::std::move(from);
  }

  inline CMsgProcessMatchVoteKick& operator=(const CMsgProcessMatchVoteKick& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgProcessMatchVoteKick& operator=(CMsgProcessMatchVoteKick&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgProcessMatchVoteKick& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgProcessMatchVoteKick* internal_default_instance() {
    return reinterpret_cast<const CMsgProcessMatchVoteKick*>(
               &_CMsgProcessMatchVoteKick_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    117;

  friend void swap(CMsgProcessMatchVoteKick& a, CMsgProcessMatchVoteKick& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgProcessMatchVoteKick* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgProcessMatchVoteKick* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgProcessMatchVoteKick* New() const final {
    return new CMsgProcessMatchVoteKick();
  }

  CMsgProcessMatchVoteKick* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgProcessMatchVoteKick>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgProcessMatchVoteKick& from);
  void MergeFrom(const CMsgProcessMatchVoteKick& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgProcessMatchVoteKick* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgProcessMatchVoteKick";
  }
  protected:
  explicit CMsgProcessMatchVoteKick(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgProcessMatchVoteKick_Vote Vote;

  // accessors -------------------------------------------------------

  enum : int {
    kVotesFieldNumber = 5,
    kMatchIdFieldNumber = 1,
    kInitiatorSteamIdFieldNumber = 2,
    kTargetSteamIdFieldNumber = 3,
    kReasonFieldNumber = 4,
    kDefaultPassFieldNumber = 6,
  };
  // repeated .CMsgProcessMatchVoteKick.Vote votes = 5;
  int votes_size() const;
  private:
  int _internal_votes_size() const;
  public:
  void clear_votes();
  ::CMsgProcessMatchVoteKick_Vote* mutable_votes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgProcessMatchVoteKick_Vote >*
      mutable_votes();
  private:
  const ::CMsgProcessMatchVoteKick_Vote& _internal_votes(int index) const;
  ::CMsgProcessMatchVoteKick_Vote* _internal_add_votes();
  public:
  const ::CMsgProcessMatchVoteKick_Vote& votes(int index) const;
  ::CMsgProcessMatchVoteKick_Vote* add_votes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgProcessMatchVoteKick_Vote >&
      votes() const;

  // optional fixed64 match_id = 1;
  bool has_match_id() const;
  private:
  bool _internal_has_match_id() const;
  public:
  void clear_match_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 match_id() const;
  void set_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_match_id() const;
  void _internal_set_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional fixed64 initiator_steam_id = 2;
  bool has_initiator_steam_id() const;
  private:
  bool _internal_has_initiator_steam_id() const;
  public:
  void clear_initiator_steam_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 initiator_steam_id() const;
  void set_initiator_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_initiator_steam_id() const;
  void _internal_set_initiator_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional fixed64 target_steam_id = 3;
  bool has_target_steam_id() const;
  private:
  bool _internal_has_target_steam_id() const;
  public:
  void clear_target_steam_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 target_steam_id() const;
  void set_target_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_target_steam_id() const;
  void _internal_set_target_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional .TFVoteKickReason reason = 4 [default = TFVoteKickReason_Other];
  bool has_reason() const;
  private:
  bool _internal_has_reason() const;
  public:
  void clear_reason();
  ::TFVoteKickReason reason() const;
  void set_reason(::TFVoteKickReason value);
  private:
  ::TFVoteKickReason _internal_reason() const;
  void _internal_set_reason(::TFVoteKickReason value);
  public:

  // optional bool default_pass = 6;
  bool has_default_pass() const;
  private:
  bool _internal_has_default_pass() const;
  public:
  void clear_default_pass();
  bool default_pass() const;
  void set_default_pass(bool value);
  private:
  bool _internal_default_pass() const;
  void _internal_set_default_pass(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgProcessMatchVoteKick)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgProcessMatchVoteKick_Vote > votes_;
  ::PROTOBUF_NAMESPACE_ID::uint64 match_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 initiator_steam_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 target_steam_id_;
  int reason_;
  bool default_pass_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgProcessMatchVoteKickResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgProcessMatchVoteKickResponse) */ {
 public:
  inline CMsgProcessMatchVoteKickResponse() : CMsgProcessMatchVoteKickResponse(nullptr) {}
  ~CMsgProcessMatchVoteKickResponse() override;
  explicit constexpr CMsgProcessMatchVoteKickResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgProcessMatchVoteKickResponse(const CMsgProcessMatchVoteKickResponse& from);
  CMsgProcessMatchVoteKickResponse(CMsgProcessMatchVoteKickResponse&& from) noexcept
    : CMsgProcessMatchVoteKickResponse() {
    *this = ::std::move(from);
  }

  inline CMsgProcessMatchVoteKickResponse& operator=(const CMsgProcessMatchVoteKickResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgProcessMatchVoteKickResponse& operator=(CMsgProcessMatchVoteKickResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgProcessMatchVoteKickResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgProcessMatchVoteKickResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgProcessMatchVoteKickResponse*>(
               &_CMsgProcessMatchVoteKickResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    118;

  friend void swap(CMsgProcessMatchVoteKickResponse& a, CMsgProcessMatchVoteKickResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgProcessMatchVoteKickResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgProcessMatchVoteKickResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgProcessMatchVoteKickResponse* New() const final {
    return new CMsgProcessMatchVoteKickResponse();
  }

  CMsgProcessMatchVoteKickResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgProcessMatchVoteKickResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgProcessMatchVoteKickResponse& from);
  void MergeFrom(const CMsgProcessMatchVoteKickResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgProcessMatchVoteKickResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgProcessMatchVoteKickResponse";
  }
  protected:
  explicit CMsgProcessMatchVoteKickResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRipFieldNumber = 1,
  };
  // optional bool rip = 1;
  bool has_rip() const;
  private:
  bool _internal_has_rip() const;
  public:
  void clear_rip();
  bool rip() const;
  void set_rip(bool value);
  private:
  bool _internal_rip() const;
  void _internal_set_rip(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgProcessMatchVoteKickResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool rip_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgPlayerVoteKickedAfterLeavingMatchResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgPlayerVoteKickedAfterLeavingMatchResponse) */ {
 public:
  inline CMsgPlayerVoteKickedAfterLeavingMatchResponse() : CMsgPlayerVoteKickedAfterLeavingMatchResponse(nullptr) {}
  ~CMsgPlayerVoteKickedAfterLeavingMatchResponse() override;
  explicit constexpr CMsgPlayerVoteKickedAfterLeavingMatchResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgPlayerVoteKickedAfterLeavingMatchResponse(const CMsgPlayerVoteKickedAfterLeavingMatchResponse& from);
  CMsgPlayerVoteKickedAfterLeavingMatchResponse(CMsgPlayerVoteKickedAfterLeavingMatchResponse&& from) noexcept
    : CMsgPlayerVoteKickedAfterLeavingMatchResponse() {
    *this = ::std::move(from);
  }

  inline CMsgPlayerVoteKickedAfterLeavingMatchResponse& operator=(const CMsgPlayerVoteKickedAfterLeavingMatchResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgPlayerVoteKickedAfterLeavingMatchResponse& operator=(CMsgPlayerVoteKickedAfterLeavingMatchResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgPlayerVoteKickedAfterLeavingMatchResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgPlayerVoteKickedAfterLeavingMatchResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgPlayerVoteKickedAfterLeavingMatchResponse*>(
               &_CMsgPlayerVoteKickedAfterLeavingMatchResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    119;

  friend void swap(CMsgPlayerVoteKickedAfterLeavingMatchResponse& a, CMsgPlayerVoteKickedAfterLeavingMatchResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgPlayerVoteKickedAfterLeavingMatchResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgPlayerVoteKickedAfterLeavingMatchResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgPlayerVoteKickedAfterLeavingMatchResponse* New() const final {
    return new CMsgPlayerVoteKickedAfterLeavingMatchResponse();
  }

  CMsgPlayerVoteKickedAfterLeavingMatchResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgPlayerVoteKickedAfterLeavingMatchResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgPlayerVoteKickedAfterLeavingMatchResponse& from);
  void MergeFrom(const CMsgPlayerVoteKickedAfterLeavingMatchResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgPlayerVoteKickedAfterLeavingMatchResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgPlayerVoteKickedAfterLeavingMatchResponse";
  }
  protected:
  explicit CMsgPlayerVoteKickedAfterLeavingMatchResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgPlayerVoteKickedAfterLeavingMatchResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgHalloween_ServerBossEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgHalloween_ServerBossEvent) */ {
 public:
  inline CMsgHalloween_ServerBossEvent() : CMsgHalloween_ServerBossEvent(nullptr) {}
  ~CMsgHalloween_ServerBossEvent() override;
  explicit constexpr CMsgHalloween_ServerBossEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgHalloween_ServerBossEvent(const CMsgHalloween_ServerBossEvent& from);
  CMsgHalloween_ServerBossEvent(CMsgHalloween_ServerBossEvent&& from) noexcept
    : CMsgHalloween_ServerBossEvent() {
    *this = ::std::move(from);
  }

  inline CMsgHalloween_ServerBossEvent& operator=(const CMsgHalloween_ServerBossEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgHalloween_ServerBossEvent& operator=(CMsgHalloween_ServerBossEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgHalloween_ServerBossEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgHalloween_ServerBossEvent* internal_default_instance() {
    return reinterpret_cast<const CMsgHalloween_ServerBossEvent*>(
               &_CMsgHalloween_ServerBossEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    120;

  friend void swap(CMsgHalloween_ServerBossEvent& a, CMsgHalloween_ServerBossEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgHalloween_ServerBossEvent* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgHalloween_ServerBossEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgHalloween_ServerBossEvent* New() const final {
    return new CMsgHalloween_ServerBossEvent();
  }

  CMsgHalloween_ServerBossEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgHalloween_ServerBossEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgHalloween_ServerBossEvent& from);
  void MergeFrom(const CMsgHalloween_ServerBossEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgHalloween_ServerBossEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgHalloween_ServerBossEvent";
  }
  protected:
  explicit CMsgHalloween_ServerBossEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventCounterFieldNumber = 1,
    kTimestampFieldNumber = 2,
    kBossTypeFieldNumber = 3,
    kBossLevelFieldNumber = 4,
    kEventTypeFieldNumber = 5,
    kPlayersInvolvedFieldNumber = 6,
    kElapsedTimeFieldNumber = 7,
  };
  // optional uint32 event_counter = 1;
  bool has_event_counter() const;
  private:
  bool _internal_has_event_counter() const;
  public:
  void clear_event_counter();
  ::PROTOBUF_NAMESPACE_ID::uint32 event_counter() const;
  void set_event_counter(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_event_counter() const;
  void _internal_set_event_counter(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 timestamp = 2;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint32 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 boss_type = 3;
  bool has_boss_type() const;
  private:
  bool _internal_has_boss_type() const;
  public:
  void clear_boss_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 boss_type() const;
  void set_boss_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_boss_type() const;
  void _internal_set_boss_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 boss_level = 4;
  bool has_boss_level() const;
  private:
  bool _internal_has_boss_level() const;
  public:
  void clear_boss_level();
  ::PROTOBUF_NAMESPACE_ID::uint32 boss_level() const;
  void set_boss_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_boss_level() const;
  void _internal_set_boss_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 event_type = 5;
  bool has_event_type() const;
  private:
  bool _internal_has_event_type() const;
  public:
  void clear_event_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 event_type() const;
  void set_event_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_event_type() const;
  void _internal_set_event_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 players_involved = 6;
  bool has_players_involved() const;
  private:
  bool _internal_has_players_involved() const;
  public:
  void clear_players_involved();
  ::PROTOBUF_NAMESPACE_ID::uint32 players_involved() const;
  void set_players_involved(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_players_involved() const;
  void _internal_set_players_involved(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float elapsed_time = 7;
  bool has_elapsed_time() const;
  private:
  bool _internal_has_elapsed_time() const;
  public:
  void clear_elapsed_time();
  float elapsed_time() const;
  void set_elapsed_time(float value);
  private:
  float _internal_elapsed_time() const;
  void _internal_set_elapsed_time(float value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgHalloween_ServerBossEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 event_counter_;
  ::PROTOBUF_NAMESPACE_ID::uint32 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint32 boss_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 boss_level_;
  ::PROTOBUF_NAMESPACE_ID::uint32 event_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 players_involved_;
  float elapsed_time_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgHalloween_Merasmus2012 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgHalloween_Merasmus2012) */ {
 public:
  inline CMsgHalloween_Merasmus2012() : CMsgHalloween_Merasmus2012(nullptr) {}
  ~CMsgHalloween_Merasmus2012() override;
  explicit constexpr CMsgHalloween_Merasmus2012(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgHalloween_Merasmus2012(const CMsgHalloween_Merasmus2012& from);
  CMsgHalloween_Merasmus2012(CMsgHalloween_Merasmus2012&& from) noexcept
    : CMsgHalloween_Merasmus2012() {
    *this = ::std::move(from);
  }

  inline CMsgHalloween_Merasmus2012& operator=(const CMsgHalloween_Merasmus2012& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgHalloween_Merasmus2012& operator=(CMsgHalloween_Merasmus2012&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgHalloween_Merasmus2012& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgHalloween_Merasmus2012* internal_default_instance() {
    return reinterpret_cast<const CMsgHalloween_Merasmus2012*>(
               &_CMsgHalloween_Merasmus2012_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    121;

  friend void swap(CMsgHalloween_Merasmus2012& a, CMsgHalloween_Merasmus2012& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgHalloween_Merasmus2012* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgHalloween_Merasmus2012* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgHalloween_Merasmus2012* New() const final {
    return new CMsgHalloween_Merasmus2012();
  }

  CMsgHalloween_Merasmus2012* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgHalloween_Merasmus2012>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgHalloween_Merasmus2012& from);
  void MergeFrom(const CMsgHalloween_Merasmus2012& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgHalloween_Merasmus2012* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgHalloween_Merasmus2012";
  }
  protected:
  explicit CMsgHalloween_Merasmus2012(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventCounterFieldNumber = 1,
    kTimeSubmittedFieldNumber = 2,
    kIsValveServerFieldNumber = 3,
    kBossLevelFieldNumber = 4,
    kSpawnedHealthFieldNumber = 5,
    kRemainingHealthFieldNumber = 6,
    kLifeTimeFieldNumber = 7,
    kBombKillsFieldNumber = 8,
    kStaffKillsFieldNumber = 9,
    kPvpKillsFieldNumber = 10,
    kProphuntTime1FieldNumber = 11,
    kProphuntTime2FieldNumber = 12,
    kDmgScoutFieldNumber = 13,
    kDmgSniperFieldNumber = 14,
    kDmgSoldierFieldNumber = 15,
    kDmgDemoFieldNumber = 16,
    kDmgMedicFieldNumber = 17,
    kDmgHeavyFieldNumber = 18,
    kDmgPyroFieldNumber = 19,
    kDmgSpyFieldNumber = 20,
    kDmgEngineerFieldNumber = 21,
    kScoutCountFieldNumber = 22,
    kSniperCountFieldNumber = 23,
    kSoliderCountFieldNumber = 24,
    kDemoCountFieldNumber = 25,
    kMedicCountFieldNumber = 26,
    kHeavyCountFieldNumber = 27,
    kPyroCountFieldNumber = 28,
    kSpyCountFieldNumber = 29,
    kEngineerCountFieldNumber = 30,
  };
  // optional uint32 event_counter = 1;
  bool has_event_counter() const;
  private:
  bool _internal_has_event_counter() const;
  public:
  void clear_event_counter();
  ::PROTOBUF_NAMESPACE_ID::uint32 event_counter() const;
  void set_event_counter(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_event_counter() const;
  void _internal_set_event_counter(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional fixed32 time_submitted = 2;
  bool has_time_submitted() const;
  private:
  bool _internal_has_time_submitted() const;
  public:
  void clear_time_submitted();
  ::PROTOBUF_NAMESPACE_ID::uint32 time_submitted() const;
  void set_time_submitted(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_time_submitted() const;
  void _internal_set_time_submitted(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool is_valve_server = 3;
  bool has_is_valve_server() const;
  private:
  bool _internal_has_is_valve_server() const;
  public:
  void clear_is_valve_server();
  bool is_valve_server() const;
  void set_is_valve_server(bool value);
  private:
  bool _internal_is_valve_server() const;
  void _internal_set_is_valve_server(bool value);
  public:

  // optional uint32 boss_level = 4;
  bool has_boss_level() const;
  private:
  bool _internal_has_boss_level() const;
  public:
  void clear_boss_level();
  ::PROTOBUF_NAMESPACE_ID::uint32 boss_level() const;
  void set_boss_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_boss_level() const;
  void _internal_set_boss_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 spawned_health = 5;
  bool has_spawned_health() const;
  private:
  bool _internal_has_spawned_health() const;
  public:
  void clear_spawned_health();
  ::PROTOBUF_NAMESPACE_ID::uint32 spawned_health() const;
  void set_spawned_health(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_spawned_health() const;
  void _internal_set_spawned_health(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 remaining_health = 6;
  bool has_remaining_health() const;
  private:
  bool _internal_has_remaining_health() const;
  public:
  void clear_remaining_health();
  ::PROTOBUF_NAMESPACE_ID::uint32 remaining_health() const;
  void set_remaining_health(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_remaining_health() const;
  void _internal_set_remaining_health(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 life_time = 7;
  bool has_life_time() const;
  private:
  bool _internal_has_life_time() const;
  public:
  void clear_life_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 life_time() const;
  void set_life_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_life_time() const;
  void _internal_set_life_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 bomb_kills = 8;
  bool has_bomb_kills() const;
  private:
  bool _internal_has_bomb_kills() const;
  public:
  void clear_bomb_kills();
  ::PROTOBUF_NAMESPACE_ID::uint32 bomb_kills() const;
  void set_bomb_kills(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_bomb_kills() const;
  void _internal_set_bomb_kills(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 staff_kills = 9;
  bool has_staff_kills() const;
  private:
  bool _internal_has_staff_kills() const;
  public:
  void clear_staff_kills();
  ::PROTOBUF_NAMESPACE_ID::uint32 staff_kills() const;
  void set_staff_kills(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_staff_kills() const;
  void _internal_set_staff_kills(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 pvp_kills = 10;
  bool has_pvp_kills() const;
  private:
  bool _internal_has_pvp_kills() const;
  public:
  void clear_pvp_kills();
  ::PROTOBUF_NAMESPACE_ID::uint32 pvp_kills() const;
  void set_pvp_kills(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pvp_kills() const;
  void _internal_set_pvp_kills(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 prophunt_time1 = 11;
  bool has_prophunt_time1() const;
  private:
  bool _internal_has_prophunt_time1() const;
  public:
  void clear_prophunt_time1();
  ::PROTOBUF_NAMESPACE_ID::uint32 prophunt_time1() const;
  void set_prophunt_time1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_prophunt_time1() const;
  void _internal_set_prophunt_time1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 prophunt_time2 = 12;
  bool has_prophunt_time2() const;
  private:
  bool _internal_has_prophunt_time2() const;
  public:
  void clear_prophunt_time2();
  ::PROTOBUF_NAMESPACE_ID::uint32 prophunt_time2() const;
  void set_prophunt_time2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_prophunt_time2() const;
  void _internal_set_prophunt_time2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 dmg_scout = 13;
  bool has_dmg_scout() const;
  private:
  bool _internal_has_dmg_scout() const;
  public:
  void clear_dmg_scout();
  ::PROTOBUF_NAMESPACE_ID::uint32 dmg_scout() const;
  void set_dmg_scout(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dmg_scout() const;
  void _internal_set_dmg_scout(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 dmg_sniper = 14;
  bool has_dmg_sniper() const;
  private:
  bool _internal_has_dmg_sniper() const;
  public:
  void clear_dmg_sniper();
  ::PROTOBUF_NAMESPACE_ID::uint32 dmg_sniper() const;
  void set_dmg_sniper(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dmg_sniper() const;
  void _internal_set_dmg_sniper(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 dmg_soldier = 15;
  bool has_dmg_soldier() const;
  private:
  bool _internal_has_dmg_soldier() const;
  public:
  void clear_dmg_soldier();
  ::PROTOBUF_NAMESPACE_ID::uint32 dmg_soldier() const;
  void set_dmg_soldier(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dmg_soldier() const;
  void _internal_set_dmg_soldier(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 dmg_demo = 16;
  bool has_dmg_demo() const;
  private:
  bool _internal_has_dmg_demo() const;
  public:
  void clear_dmg_demo();
  ::PROTOBUF_NAMESPACE_ID::uint32 dmg_demo() const;
  void set_dmg_demo(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dmg_demo() const;
  void _internal_set_dmg_demo(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 dmg_medic = 17;
  bool has_dmg_medic() const;
  private:
  bool _internal_has_dmg_medic() const;
  public:
  void clear_dmg_medic();
  ::PROTOBUF_NAMESPACE_ID::uint32 dmg_medic() const;
  void set_dmg_medic(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dmg_medic() const;
  void _internal_set_dmg_medic(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 dmg_heavy = 18;
  bool has_dmg_heavy() const;
  private:
  bool _internal_has_dmg_heavy() const;
  public:
  void clear_dmg_heavy();
  ::PROTOBUF_NAMESPACE_ID::uint32 dmg_heavy() const;
  void set_dmg_heavy(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dmg_heavy() const;
  void _internal_set_dmg_heavy(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 dmg_pyro = 19;
  bool has_dmg_pyro() const;
  private:
  bool _internal_has_dmg_pyro() const;
  public:
  void clear_dmg_pyro();
  ::PROTOBUF_NAMESPACE_ID::uint32 dmg_pyro() const;
  void set_dmg_pyro(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dmg_pyro() const;
  void _internal_set_dmg_pyro(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 dmg_spy = 20;
  bool has_dmg_spy() const;
  private:
  bool _internal_has_dmg_spy() const;
  public:
  void clear_dmg_spy();
  ::PROTOBUF_NAMESPACE_ID::uint32 dmg_spy() const;
  void set_dmg_spy(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dmg_spy() const;
  void _internal_set_dmg_spy(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 dmg_engineer = 21;
  bool has_dmg_engineer() const;
  private:
  bool _internal_has_dmg_engineer() const;
  public:
  void clear_dmg_engineer();
  ::PROTOBUF_NAMESPACE_ID::uint32 dmg_engineer() const;
  void set_dmg_engineer(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dmg_engineer() const;
  void _internal_set_dmg_engineer(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 scout_count = 22;
  bool has_scout_count() const;
  private:
  bool _internal_has_scout_count() const;
  public:
  void clear_scout_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 scout_count() const;
  void set_scout_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_scout_count() const;
  void _internal_set_scout_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 sniper_count = 23;
  bool has_sniper_count() const;
  private:
  bool _internal_has_sniper_count() const;
  public:
  void clear_sniper_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 sniper_count() const;
  void set_sniper_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sniper_count() const;
  void _internal_set_sniper_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 solider_count = 24;
  bool has_solider_count() const;
  private:
  bool _internal_has_solider_count() const;
  public:
  void clear_solider_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 solider_count() const;
  void set_solider_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_solider_count() const;
  void _internal_set_solider_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 demo_count = 25;
  bool has_demo_count() const;
  private:
  bool _internal_has_demo_count() const;
  public:
  void clear_demo_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 demo_count() const;
  void set_demo_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_demo_count() const;
  void _internal_set_demo_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 medic_count = 26;
  bool has_medic_count() const;
  private:
  bool _internal_has_medic_count() const;
  public:
  void clear_medic_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 medic_count() const;
  void set_medic_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_medic_count() const;
  void _internal_set_medic_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 heavy_count = 27;
  bool has_heavy_count() const;
  private:
  bool _internal_has_heavy_count() const;
  public:
  void clear_heavy_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 heavy_count() const;
  void set_heavy_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_heavy_count() const;
  void _internal_set_heavy_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 pyro_count = 28;
  bool has_pyro_count() const;
  private:
  bool _internal_has_pyro_count() const;
  public:
  void clear_pyro_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 pyro_count() const;
  void set_pyro_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pyro_count() const;
  void _internal_set_pyro_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 spy_count = 29;
  bool has_spy_count() const;
  private:
  bool _internal_has_spy_count() const;
  public:
  void clear_spy_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 spy_count() const;
  void set_spy_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_spy_count() const;
  void _internal_set_spy_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 engineer_count = 30;
  bool has_engineer_count() const;
  private:
  bool _internal_has_engineer_count() const;
  public:
  void clear_engineer_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 engineer_count() const;
  void set_engineer_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_engineer_count() const;
  void _internal_set_engineer_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgHalloween_Merasmus2012)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 event_counter_;
  ::PROTOBUF_NAMESPACE_ID::uint32 time_submitted_;
  bool is_valve_server_;
  ::PROTOBUF_NAMESPACE_ID::uint32 boss_level_;
  ::PROTOBUF_NAMESPACE_ID::uint32 spawned_health_;
  ::PROTOBUF_NAMESPACE_ID::uint32 remaining_health_;
  ::PROTOBUF_NAMESPACE_ID::uint32 life_time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 bomb_kills_;
  ::PROTOBUF_NAMESPACE_ID::uint32 staff_kills_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pvp_kills_;
  ::PROTOBUF_NAMESPACE_ID::uint32 prophunt_time1_;
  ::PROTOBUF_NAMESPACE_ID::uint32 prophunt_time2_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dmg_scout_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dmg_sniper_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dmg_soldier_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dmg_demo_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dmg_medic_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dmg_heavy_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dmg_pyro_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dmg_spy_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dmg_engineer_;
  ::PROTOBUF_NAMESPACE_ID::uint32 scout_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sniper_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 solider_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 demo_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 medic_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 heavy_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pyro_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 spy_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 engineer_count_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgUpdateHalloweenMerasmusLootLevel_Player final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgUpdateHalloweenMerasmusLootLevel.Player) */ {
 public:
  inline CMsgUpdateHalloweenMerasmusLootLevel_Player() : CMsgUpdateHalloweenMerasmusLootLevel_Player(nullptr) {}
  ~CMsgUpdateHalloweenMerasmusLootLevel_Player() override;
  explicit constexpr CMsgUpdateHalloweenMerasmusLootLevel_Player(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgUpdateHalloweenMerasmusLootLevel_Player(const CMsgUpdateHalloweenMerasmusLootLevel_Player& from);
  CMsgUpdateHalloweenMerasmusLootLevel_Player(CMsgUpdateHalloweenMerasmusLootLevel_Player&& from) noexcept
    : CMsgUpdateHalloweenMerasmusLootLevel_Player() {
    *this = ::std::move(from);
  }

  inline CMsgUpdateHalloweenMerasmusLootLevel_Player& operator=(const CMsgUpdateHalloweenMerasmusLootLevel_Player& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgUpdateHalloweenMerasmusLootLevel_Player& operator=(CMsgUpdateHalloweenMerasmusLootLevel_Player&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgUpdateHalloweenMerasmusLootLevel_Player& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgUpdateHalloweenMerasmusLootLevel_Player* internal_default_instance() {
    return reinterpret_cast<const CMsgUpdateHalloweenMerasmusLootLevel_Player*>(
               &_CMsgUpdateHalloweenMerasmusLootLevel_Player_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    122;

  friend void swap(CMsgUpdateHalloweenMerasmusLootLevel_Player& a, CMsgUpdateHalloweenMerasmusLootLevel_Player& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgUpdateHalloweenMerasmusLootLevel_Player* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgUpdateHalloweenMerasmusLootLevel_Player* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgUpdateHalloweenMerasmusLootLevel_Player* New() const final {
    return new CMsgUpdateHalloweenMerasmusLootLevel_Player();
  }

  CMsgUpdateHalloweenMerasmusLootLevel_Player* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgUpdateHalloweenMerasmusLootLevel_Player>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgUpdateHalloweenMerasmusLootLevel_Player& from);
  void MergeFrom(const CMsgUpdateHalloweenMerasmusLootLevel_Player& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgUpdateHalloweenMerasmusLootLevel_Player* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgUpdateHalloweenMerasmusLootLevel.Player";
  }
  protected:
  explicit CMsgUpdateHalloweenMerasmusLootLevel_Player(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamIdFieldNumber = 1,
  };
  // optional fixed64 steam_id = 1;
  bool has_steam_id() const;
  private:
  bool _internal_has_steam_id() const;
  public:
  void clear_steam_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 steam_id() const;
  void set_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_steam_id() const;
  void _internal_set_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgUpdateHalloweenMerasmusLootLevel.Player)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 steam_id_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgUpdateHalloweenMerasmusLootLevel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgUpdateHalloweenMerasmusLootLevel) */ {
 public:
  inline CMsgUpdateHalloweenMerasmusLootLevel() : CMsgUpdateHalloweenMerasmusLootLevel(nullptr) {}
  ~CMsgUpdateHalloweenMerasmusLootLevel() override;
  explicit constexpr CMsgUpdateHalloweenMerasmusLootLevel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgUpdateHalloweenMerasmusLootLevel(const CMsgUpdateHalloweenMerasmusLootLevel& from);
  CMsgUpdateHalloweenMerasmusLootLevel(CMsgUpdateHalloweenMerasmusLootLevel&& from) noexcept
    : CMsgUpdateHalloweenMerasmusLootLevel() {
    *this = ::std::move(from);
  }

  inline CMsgUpdateHalloweenMerasmusLootLevel& operator=(const CMsgUpdateHalloweenMerasmusLootLevel& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgUpdateHalloweenMerasmusLootLevel& operator=(CMsgUpdateHalloweenMerasmusLootLevel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgUpdateHalloweenMerasmusLootLevel& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgUpdateHalloweenMerasmusLootLevel* internal_default_instance() {
    return reinterpret_cast<const CMsgUpdateHalloweenMerasmusLootLevel*>(
               &_CMsgUpdateHalloweenMerasmusLootLevel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    123;

  friend void swap(CMsgUpdateHalloweenMerasmusLootLevel& a, CMsgUpdateHalloweenMerasmusLootLevel& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgUpdateHalloweenMerasmusLootLevel* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgUpdateHalloweenMerasmusLootLevel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgUpdateHalloweenMerasmusLootLevel* New() const final {
    return new CMsgUpdateHalloweenMerasmusLootLevel();
  }

  CMsgUpdateHalloweenMerasmusLootLevel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgUpdateHalloweenMerasmusLootLevel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgUpdateHalloweenMerasmusLootLevel& from);
  void MergeFrom(const CMsgUpdateHalloweenMerasmusLootLevel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgUpdateHalloweenMerasmusLootLevel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgUpdateHalloweenMerasmusLootLevel";
  }
  protected:
  explicit CMsgUpdateHalloweenMerasmusLootLevel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgUpdateHalloweenMerasmusLootLevel_Player Player;

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersFieldNumber = 1,
    kMerasmusLevelFieldNumber = 2,
  };
  // repeated .CMsgUpdateHalloweenMerasmusLootLevel.Player players = 1;
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  ::CMsgUpdateHalloweenMerasmusLootLevel_Player* mutable_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgUpdateHalloweenMerasmusLootLevel_Player >*
      mutable_players();
  private:
  const ::CMsgUpdateHalloweenMerasmusLootLevel_Player& _internal_players(int index) const;
  ::CMsgUpdateHalloweenMerasmusLootLevel_Player* _internal_add_players();
  public:
  const ::CMsgUpdateHalloweenMerasmusLootLevel_Player& players(int index) const;
  ::CMsgUpdateHalloweenMerasmusLootLevel_Player* add_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgUpdateHalloweenMerasmusLootLevel_Player >&
      players() const;

  // optional uint32 merasmus_level = 2;
  bool has_merasmus_level() const;
  private:
  bool _internal_has_merasmus_level() const;
  public:
  void clear_merasmus_level();
  ::PROTOBUF_NAMESPACE_ID::uint32 merasmus_level() const;
  void set_merasmus_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_merasmus_level() const;
  void _internal_set_merasmus_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgUpdateHalloweenMerasmusLootLevel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgUpdateHalloweenMerasmusLootLevel_Player > players_;
  ::PROTOBUF_NAMESPACE_ID::uint32 merasmus_level_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CAttribute_String final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CAttribute_String) */ {
 public:
  inline CAttribute_String() : CAttribute_String(nullptr) {}
  ~CAttribute_String() override;
  explicit constexpr CAttribute_String(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CAttribute_String(const CAttribute_String& from);
  CAttribute_String(CAttribute_String&& from) noexcept
    : CAttribute_String() {
    *this = ::std::move(from);
  }

  inline CAttribute_String& operator=(const CAttribute_String& from) {
    CopyFrom(from);
    return *this;
  }
  inline CAttribute_String& operator=(CAttribute_String&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CAttribute_String& default_instance() {
    return *internal_default_instance();
  }
  static inline const CAttribute_String* internal_default_instance() {
    return reinterpret_cast<const CAttribute_String*>(
               &_CAttribute_String_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    124;

  friend void swap(CAttribute_String& a, CAttribute_String& b) {
    a.Swap(&b);
  }
  inline void Swap(CAttribute_String* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CAttribute_String* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CAttribute_String* New() const final {
    return new CAttribute_String();
  }

  CAttribute_String* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CAttribute_String>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CAttribute_String& from);
  void MergeFrom(const CAttribute_String& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CAttribute_String* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CAttribute_String";
  }
  protected:
  explicit CAttribute_String(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // optional string value = 1;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:CAttribute_String)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CAttribute_DynamicRecipeComponent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CAttribute_DynamicRecipeComponent) */ {
 public:
  inline CAttribute_DynamicRecipeComponent() : CAttribute_DynamicRecipeComponent(nullptr) {}
  ~CAttribute_DynamicRecipeComponent() override;
  explicit constexpr CAttribute_DynamicRecipeComponent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CAttribute_DynamicRecipeComponent(const CAttribute_DynamicRecipeComponent& from);
  CAttribute_DynamicRecipeComponent(CAttribute_DynamicRecipeComponent&& from) noexcept
    : CAttribute_DynamicRecipeComponent() {
    *this = ::std::move(from);
  }

  inline CAttribute_DynamicRecipeComponent& operator=(const CAttribute_DynamicRecipeComponent& from) {
    CopyFrom(from);
    return *this;
  }
  inline CAttribute_DynamicRecipeComponent& operator=(CAttribute_DynamicRecipeComponent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CAttribute_DynamicRecipeComponent& default_instance() {
    return *internal_default_instance();
  }
  static inline const CAttribute_DynamicRecipeComponent* internal_default_instance() {
    return reinterpret_cast<const CAttribute_DynamicRecipeComponent*>(
               &_CAttribute_DynamicRecipeComponent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    125;

  friend void swap(CAttribute_DynamicRecipeComponent& a, CAttribute_DynamicRecipeComponent& b) {
    a.Swap(&b);
  }
  inline void Swap(CAttribute_DynamicRecipeComponent* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CAttribute_DynamicRecipeComponent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CAttribute_DynamicRecipeComponent* New() const final {
    return new CAttribute_DynamicRecipeComponent();
  }

  CAttribute_DynamicRecipeComponent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CAttribute_DynamicRecipeComponent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CAttribute_DynamicRecipeComponent& from);
  void MergeFrom(const CAttribute_DynamicRecipeComponent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CAttribute_DynamicRecipeComponent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CAttribute_DynamicRecipeComponent";
  }
  protected:
  explicit CAttribute_DynamicRecipeComponent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttributesStringFieldNumber = 4,
    kDefIndexFieldNumber = 1,
    kItemQualityFieldNumber = 2,
    kComponentFlagsFieldNumber = 3,
    kNumRequiredFieldNumber = 5,
    kNumFulfilledFieldNumber = 6,
  };
  // optional string attributes_string = 4;
  bool has_attributes_string() const;
  private:
  bool _internal_has_attributes_string() const;
  public:
  void clear_attributes_string();
  const std::string& attributes_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attributes_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attributes_string();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_attributes_string();
  void set_allocated_attributes_string(std::string* attributes_string);
  private:
  const std::string& _internal_attributes_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attributes_string(const std::string& value);
  std::string* _internal_mutable_attributes_string();
  public:

  // optional uint32 def_index = 1;
  bool has_def_index() const;
  private:
  bool _internal_has_def_index() const;
  public:
  void clear_def_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 def_index() const;
  void set_def_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_def_index() const;
  void _internal_set_def_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 item_quality = 2;
  bool has_item_quality() const;
  private:
  bool _internal_has_item_quality() const;
  public:
  void clear_item_quality();
  ::PROTOBUF_NAMESPACE_ID::uint32 item_quality() const;
  void set_item_quality(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_item_quality() const;
  void _internal_set_item_quality(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 component_flags = 3;
  bool has_component_flags() const;
  private:
  bool _internal_has_component_flags() const;
  public:
  void clear_component_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 component_flags() const;
  void set_component_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_component_flags() const;
  void _internal_set_component_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 num_required = 5;
  bool has_num_required() const;
  private:
  bool _internal_has_num_required() const;
  public:
  void clear_num_required();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_required() const;
  void set_num_required(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_required() const;
  void _internal_set_num_required(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 num_fulfilled = 6;
  bool has_num_fulfilled() const;
  private:
  bool _internal_has_num_fulfilled() const;
  public:
  void clear_num_fulfilled();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_fulfilled() const;
  void set_num_fulfilled(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_fulfilled() const;
  void _internal_set_num_fulfilled(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CAttribute_DynamicRecipeComponent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attributes_string_;
  ::PROTOBUF_NAMESPACE_ID::uint32 def_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 item_quality_;
  ::PROTOBUF_NAMESPACE_ID::uint32 component_flags_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_required_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_fulfilled_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT) */ {
 public:
  inline CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT() : CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT(nullptr) {}
  ~CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT() override;
  explicit constexpr CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT(const CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT& from);
  CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT(CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT&& from) noexcept
    : CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT() {
    *this = ::std::move(from);
  }

  inline CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT& operator=(const CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT& from) {
    CopyFrom(from);
    return *this;
  }
  inline CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT& operator=(CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT& default_instance() {
    return *internal_default_instance();
  }
  static inline const CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT* internal_default_instance() {
    return reinterpret_cast<const CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT*>(
               &_CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    126;

  friend void swap(CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT& a, CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT& b) {
    a.Swap(&b);
  }
  inline void Swap(CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT* New() const final {
    return new CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT();
  }

  CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT& from);
  void MergeFrom(const CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT";
  }
  protected:
  explicit CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttributesStringFieldNumber = 6,
    kDefIndexFieldNumber = 1,
    kItemDefFieldNumber = 2,
    kItemQualityFieldNumber = 3,
    kComponentFlagsFieldNumber = 4,
    kItemFlagsFieldNumber = 5,
    kNumRequiredFieldNumber = 7,
    kItemCountFieldNumber = 8,
    kNumFulfilledFieldNumber = 9,
    kItemsFulfilledFieldNumber = 10,
  };
  // optional string attributes_string = 6;
  bool has_attributes_string() const;
  private:
  bool _internal_has_attributes_string() const;
  public:
  void clear_attributes_string();
  const std::string& attributes_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attributes_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attributes_string();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_attributes_string();
  void set_allocated_attributes_string(std::string* attributes_string);
  private:
  const std::string& _internal_attributes_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attributes_string(const std::string& value);
  std::string* _internal_mutable_attributes_string();
  public:

  // optional uint32 def_index = 1;
  bool has_def_index() const;
  private:
  bool _internal_has_def_index() const;
  public:
  void clear_def_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 def_index() const;
  void set_def_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_def_index() const;
  void _internal_set_def_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 item_def = 2;
  bool has_item_def() const;
  private:
  bool _internal_has_item_def() const;
  public:
  void clear_item_def();
  ::PROTOBUF_NAMESPACE_ID::uint32 item_def() const;
  void set_item_def(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_item_def() const;
  void _internal_set_item_def(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 item_quality = 3;
  bool has_item_quality() const;
  private:
  bool _internal_has_item_quality() const;
  public:
  void clear_item_quality();
  ::PROTOBUF_NAMESPACE_ID::uint32 item_quality() const;
  void set_item_quality(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_item_quality() const;
  void _internal_set_item_quality(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 component_flags = 4;
  bool has_component_flags() const;
  private:
  bool _internal_has_component_flags() const;
  public:
  void clear_component_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 component_flags() const;
  void set_component_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_component_flags() const;
  void _internal_set_component_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 item_flags = 5;
  bool has_item_flags() const;
  private:
  bool _internal_has_item_flags() const;
  public:
  void clear_item_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 item_flags() const;
  void set_item_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_item_flags() const;
  void _internal_set_item_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 num_required = 7;
  bool has_num_required() const;
  private:
  bool _internal_has_num_required() const;
  public:
  void clear_num_required();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_required() const;
  void set_num_required(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_required() const;
  void _internal_set_num_required(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 item_count = 8;
  bool has_item_count() const;
  private:
  bool _internal_has_item_count() const;
  public:
  void clear_item_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 item_count() const;
  void set_item_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_item_count() const;
  void _internal_set_item_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 num_fulfilled = 9;
  bool has_num_fulfilled() const;
  private:
  bool _internal_has_num_fulfilled() const;
  public:
  void clear_num_fulfilled();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_fulfilled() const;
  void set_num_fulfilled(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_fulfilled() const;
  void _internal_set_num_fulfilled(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 items_fulfilled = 10;
  bool has_items_fulfilled() const;
  private:
  bool _internal_has_items_fulfilled() const;
  public:
  void clear_items_fulfilled();
  ::PROTOBUF_NAMESPACE_ID::uint32 items_fulfilled() const;
  void set_items_fulfilled(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_items_fulfilled() const;
  void _internal_set_items_fulfilled(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attributes_string_;
  ::PROTOBUF_NAMESPACE_ID::uint32 def_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 item_def_;
  ::PROTOBUF_NAMESPACE_ID::uint32 item_quality_;
  ::PROTOBUF_NAMESPACE_ID::uint32 component_flags_;
  ::PROTOBUF_NAMESPACE_ID::uint32 item_flags_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_required_;
  ::PROTOBUF_NAMESPACE_ID::uint32 item_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_fulfilled_;
  ::PROTOBUF_NAMESPACE_ID::uint32 items_fulfilled_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CAttribute_ItemSlotCriteria final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CAttribute_ItemSlotCriteria) */ {
 public:
  inline CAttribute_ItemSlotCriteria() : CAttribute_ItemSlotCriteria(nullptr) {}
  ~CAttribute_ItemSlotCriteria() override;
  explicit constexpr CAttribute_ItemSlotCriteria(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CAttribute_ItemSlotCriteria(const CAttribute_ItemSlotCriteria& from);
  CAttribute_ItemSlotCriteria(CAttribute_ItemSlotCriteria&& from) noexcept
    : CAttribute_ItemSlotCriteria() {
    *this = ::std::move(from);
  }

  inline CAttribute_ItemSlotCriteria& operator=(const CAttribute_ItemSlotCriteria& from) {
    CopyFrom(from);
    return *this;
  }
  inline CAttribute_ItemSlotCriteria& operator=(CAttribute_ItemSlotCriteria&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CAttribute_ItemSlotCriteria& default_instance() {
    return *internal_default_instance();
  }
  static inline const CAttribute_ItemSlotCriteria* internal_default_instance() {
    return reinterpret_cast<const CAttribute_ItemSlotCriteria*>(
               &_CAttribute_ItemSlotCriteria_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    127;

  friend void swap(CAttribute_ItemSlotCriteria& a, CAttribute_ItemSlotCriteria& b) {
    a.Swap(&b);
  }
  inline void Swap(CAttribute_ItemSlotCriteria* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CAttribute_ItemSlotCriteria* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CAttribute_ItemSlotCriteria* New() const final {
    return new CAttribute_ItemSlotCriteria();
  }

  CAttribute_ItemSlotCriteria* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CAttribute_ItemSlotCriteria>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CAttribute_ItemSlotCriteria& from);
  void MergeFrom(const CAttribute_ItemSlotCriteria& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CAttribute_ItemSlotCriteria* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CAttribute_ItemSlotCriteria";
  }
  protected:
  explicit CAttribute_ItemSlotCriteria(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagsFieldNumber = 1,
  };
  // optional string tags = 1;
  bool has_tags() const;
  private:
  bool _internal_has_tags() const;
  public:
  void clear_tags();
  const std::string& tags() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tags(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tags();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_tags();
  void set_allocated_tags(std::string* tags);
  private:
  const std::string& _internal_tags() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tags(const std::string& value);
  std::string* _internal_mutable_tags();
  public:

  // @@protoc_insertion_point(class_scope:CAttribute_ItemSlotCriteria)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tags_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgSetItemSlotAttribute final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSetItemSlotAttribute) */ {
 public:
  inline CMsgSetItemSlotAttribute() : CMsgSetItemSlotAttribute(nullptr) {}
  ~CMsgSetItemSlotAttribute() override;
  explicit constexpr CMsgSetItemSlotAttribute(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSetItemSlotAttribute(const CMsgSetItemSlotAttribute& from);
  CMsgSetItemSlotAttribute(CMsgSetItemSlotAttribute&& from) noexcept
    : CMsgSetItemSlotAttribute() {
    *this = ::std::move(from);
  }

  inline CMsgSetItemSlotAttribute& operator=(const CMsgSetItemSlotAttribute& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSetItemSlotAttribute& operator=(CMsgSetItemSlotAttribute&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSetItemSlotAttribute& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSetItemSlotAttribute* internal_default_instance() {
    return reinterpret_cast<const CMsgSetItemSlotAttribute*>(
               &_CMsgSetItemSlotAttribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    128;

  friend void swap(CMsgSetItemSlotAttribute& a, CMsgSetItemSlotAttribute& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSetItemSlotAttribute* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSetItemSlotAttribute* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgSetItemSlotAttribute* New() const final {
    return new CMsgSetItemSlotAttribute();
  }

  CMsgSetItemSlotAttribute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgSetItemSlotAttribute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgSetItemSlotAttribute& from);
  void MergeFrom(const CMsgSetItemSlotAttribute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSetItemSlotAttribute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSetItemSlotAttribute";
  }
  protected:
  explicit CMsgSetItemSlotAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemIdFieldNumber = 1,
    kSlotItemOriginalIdFieldNumber = 2,
    kSlotIndexFieldNumber = 3,
  };
  // optional uint64 item_id = 1;
  bool has_item_id() const;
  private:
  bool _internal_has_item_id() const;
  public:
  void clear_item_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 item_id() const;
  void set_item_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_item_id() const;
  void _internal_set_item_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 slot_item_original_id = 2;
  bool has_slot_item_original_id() const;
  private:
  bool _internal_has_slot_item_original_id() const;
  public:
  void clear_slot_item_original_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 slot_item_original_id() const;
  void set_slot_item_original_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_slot_item_original_id() const;
  void _internal_set_slot_item_original_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 slot_index = 3;
  bool has_slot_index() const;
  private:
  bool _internal_has_slot_index() const;
  public:
  void clear_slot_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 slot_index() const;
  void set_slot_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_slot_index() const;
  void _internal_set_slot_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSetItemSlotAttribute)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 item_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 slot_item_original_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 slot_index_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CSOWarData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSOWarData) */ {
 public:
  inline CSOWarData() : CSOWarData(nullptr) {}
  ~CSOWarData() override;
  explicit constexpr CSOWarData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSOWarData(const CSOWarData& from);
  CSOWarData(CSOWarData&& from) noexcept
    : CSOWarData() {
    *this = ::std::move(from);
  }

  inline CSOWarData& operator=(const CSOWarData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSOWarData& operator=(CSOWarData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSOWarData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSOWarData* internal_default_instance() {
    return reinterpret_cast<const CSOWarData*>(
               &_CSOWarData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    129;

  friend void swap(CSOWarData& a, CSOWarData& b) {
    a.Swap(&b);
  }
  inline void Swap(CSOWarData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSOWarData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSOWarData* New() const final {
    return new CSOWarData();
  }

  CSOWarData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSOWarData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSOWarData& from);
  void MergeFrom(const CSOWarData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSOWarData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSOWarData";
  }
  protected:
  explicit CSOWarData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
    kWarIdFieldNumber = 2,
    kAffiliationFieldNumber = 3,
    kPointsScoredFieldNumber = 4,
  };
  // optional uint32 account_id = 1 [(.key_field) = true];
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id() const;
  void set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_account_id() const;
  void _internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 war_id = 2 [(.key_field) = true];
  bool has_war_id() const;
  private:
  bool _internal_has_war_id() const;
  public:
  void clear_war_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 war_id() const;
  void set_war_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_war_id() const;
  void _internal_set_war_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 affiliation = 3;
  bool has_affiliation() const;
  private:
  bool _internal_has_affiliation() const;
  public:
  void clear_affiliation();
  ::PROTOBUF_NAMESPACE_ID::uint32 affiliation() const;
  void set_affiliation(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_affiliation() const;
  void _internal_set_affiliation(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 points_scored = 4;
  bool has_points_scored() const;
  private:
  bool _internal_has_points_scored() const;
  public:
  void clear_points_scored();
  ::PROTOBUF_NAMESPACE_ID::uint32 points_scored() const;
  void set_points_scored(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_points_scored() const;
  void _internal_set_points_scored(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CSOWarData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 war_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 affiliation_;
  ::PROTOBUF_NAMESPACE_ID::uint32 points_scored_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CGCMsgGC_War_IndividualUpdate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGCMsgGC_War_IndividualUpdate) */ {
 public:
  inline CGCMsgGC_War_IndividualUpdate() : CGCMsgGC_War_IndividualUpdate(nullptr) {}
  ~CGCMsgGC_War_IndividualUpdate() override;
  explicit constexpr CGCMsgGC_War_IndividualUpdate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGCMsgGC_War_IndividualUpdate(const CGCMsgGC_War_IndividualUpdate& from);
  CGCMsgGC_War_IndividualUpdate(CGCMsgGC_War_IndividualUpdate&& from) noexcept
    : CGCMsgGC_War_IndividualUpdate() {
    *this = ::std::move(from);
  }

  inline CGCMsgGC_War_IndividualUpdate& operator=(const CGCMsgGC_War_IndividualUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGCMsgGC_War_IndividualUpdate& operator=(CGCMsgGC_War_IndividualUpdate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CGCMsgGC_War_IndividualUpdate& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGCMsgGC_War_IndividualUpdate* internal_default_instance() {
    return reinterpret_cast<const CGCMsgGC_War_IndividualUpdate*>(
               &_CGCMsgGC_War_IndividualUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    130;

  friend void swap(CGCMsgGC_War_IndividualUpdate& a, CGCMsgGC_War_IndividualUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(CGCMsgGC_War_IndividualUpdate* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGCMsgGC_War_IndividualUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGCMsgGC_War_IndividualUpdate* New() const final {
    return new CGCMsgGC_War_IndividualUpdate();
  }

  CGCMsgGC_War_IndividualUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGCMsgGC_War_IndividualUpdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGCMsgGC_War_IndividualUpdate& from);
  void MergeFrom(const CGCMsgGC_War_IndividualUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGCMsgGC_War_IndividualUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGCMsgGC_War_IndividualUpdate";
  }
  protected:
  explicit CGCMsgGC_War_IndividualUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamIdFieldNumber = 1,
    kWarIdFieldNumber = 2,
    kScoreFieldNumber = 3,
  };
  // optional fixed64 steam_id = 1;
  bool has_steam_id() const;
  private:
  bool _internal_has_steam_id() const;
  public:
  void clear_steam_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 steam_id() const;
  void set_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_steam_id() const;
  void _internal_set_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 war_id = 2;
  bool has_war_id() const;
  private:
  bool _internal_has_war_id() const;
  public:
  void clear_war_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 war_id() const;
  void set_war_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_war_id() const;
  void _internal_set_war_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 score = 3;
  bool has_score() const;
  private:
  bool _internal_has_score() const;
  public:
  void clear_score();
  ::PROTOBUF_NAMESPACE_ID::uint32 score() const;
  void set_score(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_score() const;
  void _internal_set_score(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CGCMsgGC_War_IndividualUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 steam_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 war_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 score_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CGCMsgGC_War_JoinWar final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGCMsgGC_War_JoinWar) */ {
 public:
  inline CGCMsgGC_War_JoinWar() : CGCMsgGC_War_JoinWar(nullptr) {}
  ~CGCMsgGC_War_JoinWar() override;
  explicit constexpr CGCMsgGC_War_JoinWar(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGCMsgGC_War_JoinWar(const CGCMsgGC_War_JoinWar& from);
  CGCMsgGC_War_JoinWar(CGCMsgGC_War_JoinWar&& from) noexcept
    : CGCMsgGC_War_JoinWar() {
    *this = ::std::move(from);
  }

  inline CGCMsgGC_War_JoinWar& operator=(const CGCMsgGC_War_JoinWar& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGCMsgGC_War_JoinWar& operator=(CGCMsgGC_War_JoinWar&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CGCMsgGC_War_JoinWar& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGCMsgGC_War_JoinWar* internal_default_instance() {
    return reinterpret_cast<const CGCMsgGC_War_JoinWar*>(
               &_CGCMsgGC_War_JoinWar_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    131;

  friend void swap(CGCMsgGC_War_JoinWar& a, CGCMsgGC_War_JoinWar& b) {
    a.Swap(&b);
  }
  inline void Swap(CGCMsgGC_War_JoinWar* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGCMsgGC_War_JoinWar* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGCMsgGC_War_JoinWar* New() const final {
    return new CGCMsgGC_War_JoinWar();
  }

  CGCMsgGC_War_JoinWar* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGCMsgGC_War_JoinWar>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGCMsgGC_War_JoinWar& from);
  void MergeFrom(const CGCMsgGC_War_JoinWar& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGCMsgGC_War_JoinWar* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGCMsgGC_War_JoinWar";
  }
  protected:
  explicit CGCMsgGC_War_JoinWar(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAffiliationFieldNumber = 1,
    kWarIdFieldNumber = 2,
  };
  // optional uint32 affiliation = 1;
  bool has_affiliation() const;
  private:
  bool _internal_has_affiliation() const;
  public:
  void clear_affiliation();
  ::PROTOBUF_NAMESPACE_ID::uint32 affiliation() const;
  void set_affiliation(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_affiliation() const;
  void _internal_set_affiliation(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 war_id = 2;
  bool has_war_id() const;
  private:
  bool _internal_has_war_id() const;
  public:
  void clear_war_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 war_id() const;
  void set_war_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_war_id() const;
  void _internal_set_war_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CGCMsgGC_War_JoinWar)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 affiliation_;
  ::PROTOBUF_NAMESPACE_ID::uint32 war_id_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CGCMsgGC_War_RequestGlobalStats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGCMsgGC_War_RequestGlobalStats) */ {
 public:
  inline CGCMsgGC_War_RequestGlobalStats() : CGCMsgGC_War_RequestGlobalStats(nullptr) {}
  ~CGCMsgGC_War_RequestGlobalStats() override;
  explicit constexpr CGCMsgGC_War_RequestGlobalStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGCMsgGC_War_RequestGlobalStats(const CGCMsgGC_War_RequestGlobalStats& from);
  CGCMsgGC_War_RequestGlobalStats(CGCMsgGC_War_RequestGlobalStats&& from) noexcept
    : CGCMsgGC_War_RequestGlobalStats() {
    *this = ::std::move(from);
  }

  inline CGCMsgGC_War_RequestGlobalStats& operator=(const CGCMsgGC_War_RequestGlobalStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGCMsgGC_War_RequestGlobalStats& operator=(CGCMsgGC_War_RequestGlobalStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CGCMsgGC_War_RequestGlobalStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGCMsgGC_War_RequestGlobalStats* internal_default_instance() {
    return reinterpret_cast<const CGCMsgGC_War_RequestGlobalStats*>(
               &_CGCMsgGC_War_RequestGlobalStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    132;

  friend void swap(CGCMsgGC_War_RequestGlobalStats& a, CGCMsgGC_War_RequestGlobalStats& b) {
    a.Swap(&b);
  }
  inline void Swap(CGCMsgGC_War_RequestGlobalStats* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGCMsgGC_War_RequestGlobalStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGCMsgGC_War_RequestGlobalStats* New() const final {
    return new CGCMsgGC_War_RequestGlobalStats();
  }

  CGCMsgGC_War_RequestGlobalStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGCMsgGC_War_RequestGlobalStats>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGCMsgGC_War_RequestGlobalStats& from);
  void MergeFrom(const CGCMsgGC_War_RequestGlobalStats& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGCMsgGC_War_RequestGlobalStats* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGCMsgGC_War_RequestGlobalStats";
  }
  protected:
  explicit CGCMsgGC_War_RequestGlobalStats(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWarIdFieldNumber = 1,
  };
  // optional uint32 war_id = 1;
  bool has_war_id() const;
  private:
  bool _internal_has_war_id() const;
  public:
  void clear_war_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 war_id() const;
  void set_war_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_war_id() const;
  void _internal_set_war_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CGCMsgGC_War_RequestGlobalStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 war_id_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CGCMsgGC_War_GlobalStatsResponse_SideScore final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGCMsgGC_War_GlobalStatsResponse.SideScore) */ {
 public:
  inline CGCMsgGC_War_GlobalStatsResponse_SideScore() : CGCMsgGC_War_GlobalStatsResponse_SideScore(nullptr) {}
  ~CGCMsgGC_War_GlobalStatsResponse_SideScore() override;
  explicit constexpr CGCMsgGC_War_GlobalStatsResponse_SideScore(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGCMsgGC_War_GlobalStatsResponse_SideScore(const CGCMsgGC_War_GlobalStatsResponse_SideScore& from);
  CGCMsgGC_War_GlobalStatsResponse_SideScore(CGCMsgGC_War_GlobalStatsResponse_SideScore&& from) noexcept
    : CGCMsgGC_War_GlobalStatsResponse_SideScore() {
    *this = ::std::move(from);
  }

  inline CGCMsgGC_War_GlobalStatsResponse_SideScore& operator=(const CGCMsgGC_War_GlobalStatsResponse_SideScore& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGCMsgGC_War_GlobalStatsResponse_SideScore& operator=(CGCMsgGC_War_GlobalStatsResponse_SideScore&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CGCMsgGC_War_GlobalStatsResponse_SideScore& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGCMsgGC_War_GlobalStatsResponse_SideScore* internal_default_instance() {
    return reinterpret_cast<const CGCMsgGC_War_GlobalStatsResponse_SideScore*>(
               &_CGCMsgGC_War_GlobalStatsResponse_SideScore_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    133;

  friend void swap(CGCMsgGC_War_GlobalStatsResponse_SideScore& a, CGCMsgGC_War_GlobalStatsResponse_SideScore& b) {
    a.Swap(&b);
  }
  inline void Swap(CGCMsgGC_War_GlobalStatsResponse_SideScore* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGCMsgGC_War_GlobalStatsResponse_SideScore* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGCMsgGC_War_GlobalStatsResponse_SideScore* New() const final {
    return new CGCMsgGC_War_GlobalStatsResponse_SideScore();
  }

  CGCMsgGC_War_GlobalStatsResponse_SideScore* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGCMsgGC_War_GlobalStatsResponse_SideScore>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGCMsgGC_War_GlobalStatsResponse_SideScore& from);
  void MergeFrom(const CGCMsgGC_War_GlobalStatsResponse_SideScore& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGCMsgGC_War_GlobalStatsResponse_SideScore* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGCMsgGC_War_GlobalStatsResponse.SideScore";
  }
  protected:
  explicit CGCMsgGC_War_GlobalStatsResponse_SideScore(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScoreFieldNumber = 2,
    kSideFieldNumber = 1,
  };
  // optional uint64 score = 2;
  bool has_score() const;
  private:
  bool _internal_has_score() const;
  public:
  void clear_score();
  ::PROTOBUF_NAMESPACE_ID::uint64 score() const;
  void set_score(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_score() const;
  void _internal_set_score(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 side = 1;
  bool has_side() const;
  private:
  bool _internal_has_side() const;
  public:
  void clear_side();
  ::PROTOBUF_NAMESPACE_ID::uint32 side() const;
  void set_side(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_side() const;
  void _internal_set_side(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CGCMsgGC_War_GlobalStatsResponse.SideScore)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 score_;
  ::PROTOBUF_NAMESPACE_ID::uint32 side_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CGCMsgGC_War_GlobalStatsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGCMsgGC_War_GlobalStatsResponse) */ {
 public:
  inline CGCMsgGC_War_GlobalStatsResponse() : CGCMsgGC_War_GlobalStatsResponse(nullptr) {}
  ~CGCMsgGC_War_GlobalStatsResponse() override;
  explicit constexpr CGCMsgGC_War_GlobalStatsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGCMsgGC_War_GlobalStatsResponse(const CGCMsgGC_War_GlobalStatsResponse& from);
  CGCMsgGC_War_GlobalStatsResponse(CGCMsgGC_War_GlobalStatsResponse&& from) noexcept
    : CGCMsgGC_War_GlobalStatsResponse() {
    *this = ::std::move(from);
  }

  inline CGCMsgGC_War_GlobalStatsResponse& operator=(const CGCMsgGC_War_GlobalStatsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGCMsgGC_War_GlobalStatsResponse& operator=(CGCMsgGC_War_GlobalStatsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CGCMsgGC_War_GlobalStatsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGCMsgGC_War_GlobalStatsResponse* internal_default_instance() {
    return reinterpret_cast<const CGCMsgGC_War_GlobalStatsResponse*>(
               &_CGCMsgGC_War_GlobalStatsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    134;

  friend void swap(CGCMsgGC_War_GlobalStatsResponse& a, CGCMsgGC_War_GlobalStatsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CGCMsgGC_War_GlobalStatsResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGCMsgGC_War_GlobalStatsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGCMsgGC_War_GlobalStatsResponse* New() const final {
    return new CGCMsgGC_War_GlobalStatsResponse();
  }

  CGCMsgGC_War_GlobalStatsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGCMsgGC_War_GlobalStatsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGCMsgGC_War_GlobalStatsResponse& from);
  void MergeFrom(const CGCMsgGC_War_GlobalStatsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGCMsgGC_War_GlobalStatsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGCMsgGC_War_GlobalStatsResponse";
  }
  protected:
  explicit CGCMsgGC_War_GlobalStatsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CGCMsgGC_War_GlobalStatsResponse_SideScore SideScore;

  // accessors -------------------------------------------------------

  enum : int {
    kSideScoresFieldNumber = 1,
    kWarIdFieldNumber = 2,
  };
  // repeated .CGCMsgGC_War_GlobalStatsResponse.SideScore side_scores = 1;
  int side_scores_size() const;
  private:
  int _internal_side_scores_size() const;
  public:
  void clear_side_scores();
  ::CGCMsgGC_War_GlobalStatsResponse_SideScore* mutable_side_scores(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGCMsgGC_War_GlobalStatsResponse_SideScore >*
      mutable_side_scores();
  private:
  const ::CGCMsgGC_War_GlobalStatsResponse_SideScore& _internal_side_scores(int index) const;
  ::CGCMsgGC_War_GlobalStatsResponse_SideScore* _internal_add_side_scores();
  public:
  const ::CGCMsgGC_War_GlobalStatsResponse_SideScore& side_scores(int index) const;
  ::CGCMsgGC_War_GlobalStatsResponse_SideScore* add_side_scores();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGCMsgGC_War_GlobalStatsResponse_SideScore >&
      side_scores() const;

  // optional uint32 war_id = 2;
  bool has_war_id() const;
  private:
  bool _internal_has_war_id() const;
  public:
  void clear_war_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 war_id() const;
  void set_war_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_war_id() const;
  void _internal_set_war_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CGCMsgGC_War_GlobalStatsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGCMsgGC_War_GlobalStatsResponse_SideScore > side_scores_;
  ::PROTOBUF_NAMESPACE_ID::uint32 war_id_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate) */ {
 public:
  inline CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate() : CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate(nullptr) {}
  ~CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate() override;
  explicit constexpr CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate(const CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate& from);
  CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate(CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate&& from) noexcept
    : CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate() {
    *this = ::std::move(from);
  }

  inline CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate& operator=(const CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate& operator=(CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate* internal_default_instance() {
    return reinterpret_cast<const CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate*>(
               &_CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    135;

  friend void swap(CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate& a, CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate* New() const final {
    return new CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate();
  }

  CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate& from);
  void MergeFrom(const CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate";
  }
  protected:
  explicit CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScoreIdFieldNumber = 4,
    kScoreFieldNumber = 2,
    kTypeFieldNumber = 3,
    kScoreCheckFieldNumber = 5,
  };
  // optional bytes score_id = 4;
  bool has_score_id() const;
  private:
  bool _internal_has_score_id() const;
  public:
  void clear_score_id();
  const std::string& score_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_score_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_score_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_score_id();
  void set_allocated_score_id(std::string* score_id);
  private:
  const std::string& _internal_score_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_score_id(const std::string& value);
  std::string* _internal_mutable_score_id();
  public:

  // optional uint32 score = 2;
  bool has_score() const;
  private:
  bool _internal_has_score() const;
  public:
  void clear_score();
  ::PROTOBUF_NAMESPACE_ID::uint32 score() const;
  void set_score(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_score() const;
  void _internal_set_score(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 type = 3;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 score_check = 5;
  bool has_score_check() const;
  private:
  bool _internal_has_score_check() const;
  public:
  void clear_score_check();
  ::PROTOBUF_NAMESPACE_ID::uint32 score_check() const;
  void set_score_check(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_score_check() const;
  void _internal_set_score_check(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr score_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 score_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 score_check_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CAttribute_WorldItemPlacement final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CAttribute_WorldItemPlacement) */ {
 public:
  inline CAttribute_WorldItemPlacement() : CAttribute_WorldItemPlacement(nullptr) {}
  ~CAttribute_WorldItemPlacement() override;
  explicit constexpr CAttribute_WorldItemPlacement(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CAttribute_WorldItemPlacement(const CAttribute_WorldItemPlacement& from);
  CAttribute_WorldItemPlacement(CAttribute_WorldItemPlacement&& from) noexcept
    : CAttribute_WorldItemPlacement() {
    *this = ::std::move(from);
  }

  inline CAttribute_WorldItemPlacement& operator=(const CAttribute_WorldItemPlacement& from) {
    CopyFrom(from);
    return *this;
  }
  inline CAttribute_WorldItemPlacement& operator=(CAttribute_WorldItemPlacement&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CAttribute_WorldItemPlacement& default_instance() {
    return *internal_default_instance();
  }
  static inline const CAttribute_WorldItemPlacement* internal_default_instance() {
    return reinterpret_cast<const CAttribute_WorldItemPlacement*>(
               &_CAttribute_WorldItemPlacement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    136;

  friend void swap(CAttribute_WorldItemPlacement& a, CAttribute_WorldItemPlacement& b) {
    a.Swap(&b);
  }
  inline void Swap(CAttribute_WorldItemPlacement* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CAttribute_WorldItemPlacement* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CAttribute_WorldItemPlacement* New() const final {
    return new CAttribute_WorldItemPlacement();
  }

  CAttribute_WorldItemPlacement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CAttribute_WorldItemPlacement>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CAttribute_WorldItemPlacement& from);
  void MergeFrom(const CAttribute_WorldItemPlacement& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CAttribute_WorldItemPlacement* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CAttribute_WorldItemPlacement";
  }
  protected:
  explicit CAttribute_WorldItemPlacement(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOriginalItemIdFieldNumber = 1,
    kPosXFieldNumber = 2,
    kPosYFieldNumber = 3,
    kPosZFieldNumber = 4,
    kAngXFieldNumber = 5,
    kAngYFieldNumber = 6,
    kAngZFieldNumber = 7,
  };
  // optional uint64 original_item_id = 1;
  bool has_original_item_id() const;
  private:
  bool _internal_has_original_item_id() const;
  public:
  void clear_original_item_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 original_item_id() const;
  void set_original_item_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_original_item_id() const;
  void _internal_set_original_item_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional float pos_x = 2;
  bool has_pos_x() const;
  private:
  bool _internal_has_pos_x() const;
  public:
  void clear_pos_x();
  float pos_x() const;
  void set_pos_x(float value);
  private:
  float _internal_pos_x() const;
  void _internal_set_pos_x(float value);
  public:

  // optional float pos_y = 3;
  bool has_pos_y() const;
  private:
  bool _internal_has_pos_y() const;
  public:
  void clear_pos_y();
  float pos_y() const;
  void set_pos_y(float value);
  private:
  float _internal_pos_y() const;
  void _internal_set_pos_y(float value);
  public:

  // optional float pos_z = 4;
  bool has_pos_z() const;
  private:
  bool _internal_has_pos_z() const;
  public:
  void clear_pos_z();
  float pos_z() const;
  void set_pos_z(float value);
  private:
  float _internal_pos_z() const;
  void _internal_set_pos_z(float value);
  public:

  // optional float ang_x = 5;
  bool has_ang_x() const;
  private:
  bool _internal_has_ang_x() const;
  public:
  void clear_ang_x();
  float ang_x() const;
  void set_ang_x(float value);
  private:
  float _internal_ang_x() const;
  void _internal_set_ang_x(float value);
  public:

  // optional float ang_y = 6;
  bool has_ang_y() const;
  private:
  bool _internal_has_ang_y() const;
  public:
  void clear_ang_y();
  float ang_y() const;
  void set_ang_y(float value);
  private:
  float _internal_ang_y() const;
  void _internal_set_ang_y(float value);
  public:

  // optional float ang_z = 7;
  bool has_ang_z() const;
  private:
  bool _internal_has_ang_z() const;
  public:
  void clear_ang_z();
  float ang_z() const;
  void set_ang_z(float value);
  private:
  float _internal_ang_z() const;
  void _internal_set_ang_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:CAttribute_WorldItemPlacement)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 original_item_id_;
  float pos_x_;
  float pos_y_;
  float pos_z_;
  float ang_x_;
  float ang_y_;
  float ang_z_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CGCMsg_WorldItemPlacement_Update final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGCMsg_WorldItemPlacement_Update) */ {
 public:
  inline CGCMsg_WorldItemPlacement_Update() : CGCMsg_WorldItemPlacement_Update(nullptr) {}
  ~CGCMsg_WorldItemPlacement_Update() override;
  explicit constexpr CGCMsg_WorldItemPlacement_Update(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGCMsg_WorldItemPlacement_Update(const CGCMsg_WorldItemPlacement_Update& from);
  CGCMsg_WorldItemPlacement_Update(CGCMsg_WorldItemPlacement_Update&& from) noexcept
    : CGCMsg_WorldItemPlacement_Update() {
    *this = ::std::move(from);
  }

  inline CGCMsg_WorldItemPlacement_Update& operator=(const CGCMsg_WorldItemPlacement_Update& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGCMsg_WorldItemPlacement_Update& operator=(CGCMsg_WorldItemPlacement_Update&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CGCMsg_WorldItemPlacement_Update& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGCMsg_WorldItemPlacement_Update* internal_default_instance() {
    return reinterpret_cast<const CGCMsg_WorldItemPlacement_Update*>(
               &_CGCMsg_WorldItemPlacement_Update_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    137;

  friend void swap(CGCMsg_WorldItemPlacement_Update& a, CGCMsg_WorldItemPlacement_Update& b) {
    a.Swap(&b);
  }
  inline void Swap(CGCMsg_WorldItemPlacement_Update* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGCMsg_WorldItemPlacement_Update* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGCMsg_WorldItemPlacement_Update* New() const final {
    return new CGCMsg_WorldItemPlacement_Update();
  }

  CGCMsg_WorldItemPlacement_Update* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGCMsg_WorldItemPlacement_Update>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGCMsg_WorldItemPlacement_Update& from);
  void MergeFrom(const CGCMsg_WorldItemPlacement_Update& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGCMsg_WorldItemPlacement_Update* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGCMsg_WorldItemPlacement_Update";
  }
  protected:
  explicit CGCMsg_WorldItemPlacement_Update(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttribNameFieldNumber = 9,
    kOriginalItemIdFieldNumber = 1,
    kPosXFieldNumber = 2,
    kPosYFieldNumber = 3,
    kPosZFieldNumber = 4,
    kAngXFieldNumber = 5,
    kAngYFieldNumber = 6,
    kAngZFieldNumber = 7,
    kForceRemoveAllFieldNumber = 8,
  };
  // optional string attrib_name = 9;
  bool has_attrib_name() const;
  private:
  bool _internal_has_attrib_name() const;
  public:
  void clear_attrib_name();
  const std::string& attrib_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attrib_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attrib_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_attrib_name();
  void set_allocated_attrib_name(std::string* attrib_name);
  private:
  const std::string& _internal_attrib_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attrib_name(const std::string& value);
  std::string* _internal_mutable_attrib_name();
  public:

  // optional uint64 original_item_id = 1;
  bool has_original_item_id() const;
  private:
  bool _internal_has_original_item_id() const;
  public:
  void clear_original_item_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 original_item_id() const;
  void set_original_item_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_original_item_id() const;
  void _internal_set_original_item_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional float pos_x = 2;
  bool has_pos_x() const;
  private:
  bool _internal_has_pos_x() const;
  public:
  void clear_pos_x();
  float pos_x() const;
  void set_pos_x(float value);
  private:
  float _internal_pos_x() const;
  void _internal_set_pos_x(float value);
  public:

  // optional float pos_y = 3;
  bool has_pos_y() const;
  private:
  bool _internal_has_pos_y() const;
  public:
  void clear_pos_y();
  float pos_y() const;
  void set_pos_y(float value);
  private:
  float _internal_pos_y() const;
  void _internal_set_pos_y(float value);
  public:

  // optional float pos_z = 4;
  bool has_pos_z() const;
  private:
  bool _internal_has_pos_z() const;
  public:
  void clear_pos_z();
  float pos_z() const;
  void set_pos_z(float value);
  private:
  float _internal_pos_z() const;
  void _internal_set_pos_z(float value);
  public:

  // optional float ang_x = 5;
  bool has_ang_x() const;
  private:
  bool _internal_has_ang_x() const;
  public:
  void clear_ang_x();
  float ang_x() const;
  void set_ang_x(float value);
  private:
  float _internal_ang_x() const;
  void _internal_set_ang_x(float value);
  public:

  // optional float ang_y = 6;
  bool has_ang_y() const;
  private:
  bool _internal_has_ang_y() const;
  public:
  void clear_ang_y();
  float ang_y() const;
  void set_ang_y(float value);
  private:
  float _internal_ang_y() const;
  void _internal_set_ang_y(float value);
  public:

  // optional float ang_z = 7;
  bool has_ang_z() const;
  private:
  bool _internal_has_ang_z() const;
  public:
  void clear_ang_z();
  float ang_z() const;
  void set_ang_z(float value);
  private:
  float _internal_ang_z() const;
  void _internal_set_ang_z(float value);
  public:

  // optional bool force_remove_all = 8;
  bool has_force_remove_all() const;
  private:
  bool _internal_has_force_remove_all() const;
  public:
  void clear_force_remove_all();
  bool force_remove_all() const;
  void set_force_remove_all(bool value);
  private:
  bool _internal_force_remove_all() const;
  void _internal_set_force_remove_all(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CGCMsg_WorldItemPlacement_Update)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attrib_name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 original_item_id_;
  float pos_x_;
  float pos_y_;
  float pos_z_;
  float ang_x_;
  float ang_y_;
  float ang_z_;
  bool force_remove_all_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgAcknowledgeXP final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgAcknowledgeXP) */ {
 public:
  inline CMsgAcknowledgeXP() : CMsgAcknowledgeXP(nullptr) {}
  ~CMsgAcknowledgeXP() override;
  explicit constexpr CMsgAcknowledgeXP(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgAcknowledgeXP(const CMsgAcknowledgeXP& from);
  CMsgAcknowledgeXP(CMsgAcknowledgeXP&& from) noexcept
    : CMsgAcknowledgeXP() {
    *this = ::std::move(from);
  }

  inline CMsgAcknowledgeXP& operator=(const CMsgAcknowledgeXP& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgAcknowledgeXP& operator=(CMsgAcknowledgeXP&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgAcknowledgeXP& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgAcknowledgeXP* internal_default_instance() {
    return reinterpret_cast<const CMsgAcknowledgeXP*>(
               &_CMsgAcknowledgeXP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    138;

  friend void swap(CMsgAcknowledgeXP& a, CMsgAcknowledgeXP& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgAcknowledgeXP* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgAcknowledgeXP* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgAcknowledgeXP* New() const final {
    return new CMsgAcknowledgeXP();
  }

  CMsgAcknowledgeXP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgAcknowledgeXP>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgAcknowledgeXP& from);
  void MergeFrom(const CMsgAcknowledgeXP& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgAcknowledgeXP* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgAcknowledgeXP";
  }
  protected:
  explicit CMsgAcknowledgeXP(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatchGroupFieldNumber = 1,
    kPredictedExperienceFieldNumber = 2,
  };
  // optional int32 match_group = 1;
  bool has_match_group() const;
  private:
  bool _internal_has_match_group() const;
  public:
  void clear_match_group();
  ::PROTOBUF_NAMESPACE_ID::int32 match_group() const;
  void set_match_group(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_match_group() const;
  void _internal_set_match_group(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint32 predicted_experience = 2;
  bool has_predicted_experience() const;
  private:
  bool _internal_has_predicted_experience() const;
  public:
  void clear_predicted_experience();
  ::PROTOBUF_NAMESPACE_ID::uint32 predicted_experience() const;
  void set_predicted_experience(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_predicted_experience() const;
  void _internal_set_predicted_experience(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgAcknowledgeXP)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 match_group_;
  ::PROTOBUF_NAMESPACE_ID::uint32 predicted_experience_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgTFXPSource final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgTFXPSource) */ {
 public:
  inline CMsgTFXPSource() : CMsgTFXPSource(nullptr) {}
  ~CMsgTFXPSource() override;
  explicit constexpr CMsgTFXPSource(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgTFXPSource(const CMsgTFXPSource& from);
  CMsgTFXPSource(CMsgTFXPSource&& from) noexcept
    : CMsgTFXPSource() {
    *this = ::std::move(from);
  }

  inline CMsgTFXPSource& operator=(const CMsgTFXPSource& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgTFXPSource& operator=(CMsgTFXPSource&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgTFXPSource& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgTFXPSource* internal_default_instance() {
    return reinterpret_cast<const CMsgTFXPSource*>(
               &_CMsgTFXPSource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    139;

  friend void swap(CMsgTFXPSource& a, CMsgTFXPSource& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgTFXPSource* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgTFXPSource* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgTFXPSource* New() const final {
    return new CMsgTFXPSource();
  }

  CMsgTFXPSource* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgTFXPSource>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgTFXPSource& from);
  void MergeFrom(const CMsgTFXPSource& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgTFXPSource* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgTFXPSource";
  }
  protected:
  explicit CMsgTFXPSource(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgTFXPSource_XPSourceType XPSourceType;
  static constexpr XPSourceType SOURCE_SCORE =
    CMsgTFXPSource_XPSourceType_SOURCE_SCORE;
  static constexpr XPSourceType SOURCE_OBJECTIVE_BONUS =
    CMsgTFXPSource_XPSourceType_SOURCE_OBJECTIVE_BONUS;
  static constexpr XPSourceType SOURCE_COMPLETED_MATCH =
    CMsgTFXPSource_XPSourceType_SOURCE_COMPLETED_MATCH;
  static constexpr XPSourceType SOURCE_COMPETITIVE_ABANDON =
    CMsgTFXPSource_XPSourceType_SOURCE_COMPETITIVE_ABANDON;
  static constexpr XPSourceType SOURCE_COMPETITIVE_WIN =
    CMsgTFXPSource_XPSourceType_SOURCE_COMPETITIVE_WIN;
  static constexpr XPSourceType SOURCE_COMPETITIVE_LOSS =
    CMsgTFXPSource_XPSourceType_SOURCE_COMPETITIVE_LOSS;
  static constexpr XPSourceType SOURCE_AUTOBALANCE_BONUS =
    CMsgTFXPSource_XPSourceType_SOURCE_AUTOBALANCE_BONUS;
  static constexpr XPSourceType SOURCE_PRESTIGE_BONUS =
    CMsgTFXPSource_XPSourceType_SOURCE_PRESTIGE_BONUS;
  static inline bool XPSourceType_IsValid(int value) {
    return CMsgTFXPSource_XPSourceType_IsValid(value);
  }
  static constexpr XPSourceType XPSourceType_MIN =
    CMsgTFXPSource_XPSourceType_XPSourceType_MIN;
  static constexpr XPSourceType XPSourceType_MAX =
    CMsgTFXPSource_XPSourceType_XPSourceType_MAX;
  static constexpr int XPSourceType_ARRAYSIZE =
    CMsgTFXPSource_XPSourceType_XPSourceType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  XPSourceType_descriptor() {
    return CMsgTFXPSource_XPSourceType_descriptor();
  }
  template<typename T>
  static inline const std::string& XPSourceType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, XPSourceType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function XPSourceType_Name.");
    return CMsgTFXPSource_XPSourceType_Name(enum_t_value);
  }
  static inline bool XPSourceType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      XPSourceType* value) {
    return CMsgTFXPSource_XPSourceType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kAmountFieldNumber = 2,
    kMatchGroupFieldNumber = 3,
    kAccountIdFieldNumber = 4,
    kMatchIdFieldNumber = 5,
  };
  // optional .CMsgTFXPSource.XPSourceType type = 1 [default = SOURCE_SCORE, (.key_field) = true];
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::CMsgTFXPSource_XPSourceType type() const;
  void set_type(::CMsgTFXPSource_XPSourceType value);
  private:
  ::CMsgTFXPSource_XPSourceType _internal_type() const;
  void _internal_set_type(::CMsgTFXPSource_XPSourceType value);
  public:

  // optional int32 amount = 2;
  bool has_amount() const;
  private:
  bool _internal_has_amount() const;
  public:
  void clear_amount();
  ::PROTOBUF_NAMESPACE_ID::int32 amount() const;
  void set_amount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_amount() const;
  void _internal_set_amount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 match_group = 3;
  bool has_match_group() const;
  private:
  bool _internal_has_match_group() const;
  public:
  void clear_match_group();
  ::PROTOBUF_NAMESPACE_ID::int32 match_group() const;
  void set_match_group(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_match_group() const;
  void _internal_set_match_group(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint32 account_id = 4 [(.key_field) = true];
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id() const;
  void set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_account_id() const;
  void _internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 match_id = 5 [(.key_field) = true];
  bool has_match_id() const;
  private:
  bool _internal_has_match_id() const;
  public:
  void clear_match_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 match_id() const;
  void set_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_match_id() const;
  void _internal_set_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgTFXPSource)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::int32 amount_;
  ::PROTOBUF_NAMESPACE_ID::int32 match_group_;
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 match_id_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgTFXPSourceBreakdown final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgTFXPSourceBreakdown) */ {
 public:
  inline CMsgTFXPSourceBreakdown() : CMsgTFXPSourceBreakdown(nullptr) {}
  ~CMsgTFXPSourceBreakdown() override;
  explicit constexpr CMsgTFXPSourceBreakdown(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgTFXPSourceBreakdown(const CMsgTFXPSourceBreakdown& from);
  CMsgTFXPSourceBreakdown(CMsgTFXPSourceBreakdown&& from) noexcept
    : CMsgTFXPSourceBreakdown() {
    *this = ::std::move(from);
  }

  inline CMsgTFXPSourceBreakdown& operator=(const CMsgTFXPSourceBreakdown& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgTFXPSourceBreakdown& operator=(CMsgTFXPSourceBreakdown&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgTFXPSourceBreakdown& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgTFXPSourceBreakdown* internal_default_instance() {
    return reinterpret_cast<const CMsgTFXPSourceBreakdown*>(
               &_CMsgTFXPSourceBreakdown_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    140;

  friend void swap(CMsgTFXPSourceBreakdown& a, CMsgTFXPSourceBreakdown& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgTFXPSourceBreakdown* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgTFXPSourceBreakdown* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgTFXPSourceBreakdown* New() const final {
    return new CMsgTFXPSourceBreakdown();
  }

  CMsgTFXPSourceBreakdown* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgTFXPSourceBreakdown>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgTFXPSourceBreakdown& from);
  void MergeFrom(const CMsgTFXPSourceBreakdown& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgTFXPSourceBreakdown* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgTFXPSourceBreakdown";
  }
  protected:
  explicit CMsgTFXPSourceBreakdown(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourcesFieldNumber = 1,
  };
  // repeated .CMsgTFXPSource sources = 1;
  int sources_size() const;
  private:
  int _internal_sources_size() const;
  public:
  void clear_sources();
  ::CMsgTFXPSource* mutable_sources(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgTFXPSource >*
      mutable_sources();
  private:
  const ::CMsgTFXPSource& _internal_sources(int index) const;
  ::CMsgTFXPSource* _internal_add_sources();
  public:
  const ::CMsgTFXPSource& sources(int index) const;
  ::CMsgTFXPSource* add_sources();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgTFXPSource >&
      sources() const;

  // @@protoc_insertion_point(class_scope:CMsgTFXPSourceBreakdown)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgTFXPSource > sources_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgTFClientInit final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgTFClientInit) */ {
 public:
  inline CMsgTFClientInit() : CMsgTFClientInit(nullptr) {}
  ~CMsgTFClientInit() override;
  explicit constexpr CMsgTFClientInit(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgTFClientInit(const CMsgTFClientInit& from);
  CMsgTFClientInit(CMsgTFClientInit&& from) noexcept
    : CMsgTFClientInit() {
    *this = ::std::move(from);
  }

  inline CMsgTFClientInit& operator=(const CMsgTFClientInit& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgTFClientInit& operator=(CMsgTFClientInit&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgTFClientInit& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgTFClientInit* internal_default_instance() {
    return reinterpret_cast<const CMsgTFClientInit*>(
               &_CMsgTFClientInit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    141;

  friend void swap(CMsgTFClientInit& a, CMsgTFClientInit& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgTFClientInit* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgTFClientInit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgTFClientInit* New() const final {
    return new CMsgTFClientInit();
  }

  CMsgTFClientInit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgTFClientInit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgTFClientInit& from);
  void MergeFrom(const CMsgTFClientInit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgTFClientInit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgTFClientInit";
  }
  protected:
  explicit CMsgTFClientInit(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientVersionFieldNumber = 1,
    kLanguageFieldNumber = 2,
  };
  // optional uint32 client_version = 1;
  bool has_client_version() const;
  private:
  bool _internal_has_client_version() const;
  public:
  void clear_client_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 client_version() const;
  void set_client_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_client_version() const;
  void _internal_set_client_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 language = 2;
  bool has_language() const;
  private:
  bool _internal_has_language() const;
  public:
  void clear_language();
  ::PROTOBUF_NAMESPACE_ID::int32 language() const;
  void set_language(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_language() const;
  void _internal_set_language(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgTFClientInit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 client_version_;
  ::PROTOBUF_NAMESPACE_ID::int32 language_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCNotification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCNotification) */ {
 public:
  inline CMsgGCNotification() : CMsgGCNotification(nullptr) {}
  ~CMsgGCNotification() override;
  explicit constexpr CMsgGCNotification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCNotification(const CMsgGCNotification& from);
  CMsgGCNotification(CMsgGCNotification&& from) noexcept
    : CMsgGCNotification() {
    *this = ::std::move(from);
  }

  inline CMsgGCNotification& operator=(const CMsgGCNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCNotification& operator=(CMsgGCNotification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCNotification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCNotification* internal_default_instance() {
    return reinterpret_cast<const CMsgGCNotification*>(
               &_CMsgGCNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    142;

  friend void swap(CMsgGCNotification& a, CMsgGCNotification& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCNotification* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCNotification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCNotification* New() const final {
    return new CMsgGCNotification();
  }

  CMsgGCNotification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCNotification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgGCNotification& from);
  void MergeFrom(const CMsgGCNotification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCNotification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCNotification";
  }
  protected:
  explicit CMsgGCNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgGCNotification_NotificationType NotificationType;
  static constexpr NotificationType NOTIFICATION_REPORTED_PLAYER_BANNED =
    CMsgGCNotification_NotificationType_NOTIFICATION_REPORTED_PLAYER_BANNED;
  static constexpr NotificationType NOTIFICATION_CUSTOM_STRING =
    CMsgGCNotification_NotificationType_NOTIFICATION_CUSTOM_STRING;
  static constexpr NotificationType NOTIFICATION_MM_BAN_DUE_TO_EXCESSIVE_REPORTS =
    CMsgGCNotification_NotificationType_NOTIFICATION_MM_BAN_DUE_TO_EXCESSIVE_REPORTS;
  static constexpr NotificationType NOTIFICATION_REPORTED_PLAYER_WAS_BANNED =
    CMsgGCNotification_NotificationType_NOTIFICATION_REPORTED_PLAYER_WAS_BANNED;
  static constexpr NotificationType NOTIFICATION_SUPPORT_MESSAGE =
    CMsgGCNotification_NotificationType_NOTIFICATION_SUPPORT_MESSAGE;
  static constexpr NotificationType NOTIFICATION_NUM_TYPES =
    CMsgGCNotification_NotificationType_NOTIFICATION_NUM_TYPES;
  static inline bool NotificationType_IsValid(int value) {
    return CMsgGCNotification_NotificationType_IsValid(value);
  }
  static constexpr NotificationType NotificationType_MIN =
    CMsgGCNotification_NotificationType_NotificationType_MIN;
  static constexpr NotificationType NotificationType_MAX =
    CMsgGCNotification_NotificationType_NotificationType_MAX;
  static constexpr int NotificationType_ARRAYSIZE =
    CMsgGCNotification_NotificationType_NotificationType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  NotificationType_descriptor() {
    return CMsgGCNotification_NotificationType_descriptor();
  }
  template<typename T>
  static inline const std::string& NotificationType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, NotificationType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function NotificationType_Name.");
    return CMsgGCNotification_NotificationType_Name(enum_t_value);
  }
  static inline bool NotificationType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      NotificationType* value) {
    return CMsgGCNotification_NotificationType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNotificationStringFieldNumber = 5,
    kNotificationIdFieldNumber = 1,
    kAccountIdFieldNumber = 2,
    kExpirationTimeFieldNumber = 3,
    kTypeFieldNumber = 4,
  };
  // optional string notification_string = 5;
  bool has_notification_string() const;
  private:
  bool _internal_has_notification_string() const;
  public:
  void clear_notification_string();
  const std::string& notification_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_notification_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_notification_string();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_notification_string();
  void set_allocated_notification_string(std::string* notification_string);
  private:
  const std::string& _internal_notification_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_notification_string(const std::string& value);
  std::string* _internal_mutable_notification_string();
  public:

  // optional uint64 notification_id = 1 [(.key_field) = true];
  bool has_notification_id() const;
  private:
  bool _internal_has_notification_id() const;
  public:
  void clear_notification_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 notification_id() const;
  void set_notification_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_notification_id() const;
  void _internal_set_notification_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 account_id = 2;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id() const;
  void set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_account_id() const;
  void _internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional fixed32 expiration_time = 3;
  bool has_expiration_time() const;
  private:
  bool _internal_has_expiration_time() const;
  public:
  void clear_expiration_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 expiration_time() const;
  void set_expiration_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_expiration_time() const;
  void _internal_set_expiration_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .CMsgGCNotification.NotificationType type = 4 [default = NOTIFICATION_CUSTOM_STRING];
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::CMsgGCNotification_NotificationType type() const;
  void set_type(::CMsgGCNotification_NotificationType value);
  private:
  ::CMsgGCNotification_NotificationType _internal_type() const;
  void _internal_set_type(::CMsgGCNotification_NotificationType value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCNotification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr notification_string_;
  ::PROTOBUF_NAMESPACE_ID::uint64 notification_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 expiration_time_;
  int type_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCNotificationQueue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCNotificationQueue) */ {
 public:
  inline CMsgGCNotificationQueue() : CMsgGCNotificationQueue(nullptr) {}
  ~CMsgGCNotificationQueue() override;
  explicit constexpr CMsgGCNotificationQueue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCNotificationQueue(const CMsgGCNotificationQueue& from);
  CMsgGCNotificationQueue(CMsgGCNotificationQueue&& from) noexcept
    : CMsgGCNotificationQueue() {
    *this = ::std::move(from);
  }

  inline CMsgGCNotificationQueue& operator=(const CMsgGCNotificationQueue& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCNotificationQueue& operator=(CMsgGCNotificationQueue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCNotificationQueue& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCNotificationQueue* internal_default_instance() {
    return reinterpret_cast<const CMsgGCNotificationQueue*>(
               &_CMsgGCNotificationQueue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    143;

  friend void swap(CMsgGCNotificationQueue& a, CMsgGCNotificationQueue& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCNotificationQueue* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCNotificationQueue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCNotificationQueue* New() const final {
    return new CMsgGCNotificationQueue();
  }

  CMsgGCNotificationQueue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCNotificationQueue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgGCNotificationQueue& from);
  void MergeFrom(const CMsgGCNotificationQueue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCNotificationQueue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCNotificationQueue";
  }
  protected:
  explicit CMsgGCNotificationQueue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNotificationsFieldNumber = 1,
  };
  // repeated .CMsgGCNotification notifications = 1;
  int notifications_size() const;
  private:
  int _internal_notifications_size() const;
  public:
  void clear_notifications();
  ::CMsgGCNotification* mutable_notifications(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCNotification >*
      mutable_notifications();
  private:
  const ::CMsgGCNotification& _internal_notifications(int index) const;
  ::CMsgGCNotification* _internal_add_notifications();
  public:
  const ::CMsgGCNotification& notifications(int index) const;
  ::CMsgGCNotification* add_notifications();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCNotification >&
      notifications() const;

  // @@protoc_insertion_point(class_scope:CMsgGCNotificationQueue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCNotification > notifications_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgNotificationAcknowledge final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgNotificationAcknowledge) */ {
 public:
  inline CMsgNotificationAcknowledge() : CMsgNotificationAcknowledge(nullptr) {}
  ~CMsgNotificationAcknowledge() override;
  explicit constexpr CMsgNotificationAcknowledge(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgNotificationAcknowledge(const CMsgNotificationAcknowledge& from);
  CMsgNotificationAcknowledge(CMsgNotificationAcknowledge&& from) noexcept
    : CMsgNotificationAcknowledge() {
    *this = ::std::move(from);
  }

  inline CMsgNotificationAcknowledge& operator=(const CMsgNotificationAcknowledge& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgNotificationAcknowledge& operator=(CMsgNotificationAcknowledge&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgNotificationAcknowledge& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgNotificationAcknowledge* internal_default_instance() {
    return reinterpret_cast<const CMsgNotificationAcknowledge*>(
               &_CMsgNotificationAcknowledge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    144;

  friend void swap(CMsgNotificationAcknowledge& a, CMsgNotificationAcknowledge& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgNotificationAcknowledge* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgNotificationAcknowledge* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgNotificationAcknowledge* New() const final {
    return new CMsgNotificationAcknowledge();
  }

  CMsgNotificationAcknowledge* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgNotificationAcknowledge>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgNotificationAcknowledge& from);
  void MergeFrom(const CMsgNotificationAcknowledge& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgNotificationAcknowledge* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgNotificationAcknowledge";
  }
  protected:
  explicit CMsgNotificationAcknowledge(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNotificationIdFieldNumber = 2,
    kAccountIdFieldNumber = 1,
  };
  // optional uint64 notification_id = 2;
  bool has_notification_id() const;
  private:
  bool _internal_has_notification_id() const;
  public:
  void clear_notification_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 notification_id() const;
  void set_notification_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_notification_id() const;
  void _internal_set_notification_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id() const;
  void set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_account_id() const;
  void _internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgNotificationAcknowledge)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 notification_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgNotificationAcknowledgeReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgNotificationAcknowledgeReply) */ {
 public:
  inline CMsgNotificationAcknowledgeReply() : CMsgNotificationAcknowledgeReply(nullptr) {}
  ~CMsgNotificationAcknowledgeReply() override;
  explicit constexpr CMsgNotificationAcknowledgeReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgNotificationAcknowledgeReply(const CMsgNotificationAcknowledgeReply& from);
  CMsgNotificationAcknowledgeReply(CMsgNotificationAcknowledgeReply&& from) noexcept
    : CMsgNotificationAcknowledgeReply() {
    *this = ::std::move(from);
  }

  inline CMsgNotificationAcknowledgeReply& operator=(const CMsgNotificationAcknowledgeReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgNotificationAcknowledgeReply& operator=(CMsgNotificationAcknowledgeReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgNotificationAcknowledgeReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgNotificationAcknowledgeReply* internal_default_instance() {
    return reinterpret_cast<const CMsgNotificationAcknowledgeReply*>(
               &_CMsgNotificationAcknowledgeReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    145;

  friend void swap(CMsgNotificationAcknowledgeReply& a, CMsgNotificationAcknowledgeReply& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgNotificationAcknowledgeReply* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgNotificationAcknowledgeReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgNotificationAcknowledgeReply* New() const final {
    return new CMsgNotificationAcknowledgeReply();
  }

  CMsgNotificationAcknowledgeReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgNotificationAcknowledgeReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgNotificationAcknowledgeReply& from);
  void MergeFrom(const CMsgNotificationAcknowledgeReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgNotificationAcknowledgeReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgNotificationAcknowledgeReply";
  }
  protected:
  explicit CMsgNotificationAcknowledgeReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgNotificationAcknowledgeReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGC_Match_Result_Player final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGC_Match_Result.Player) */ {
 public:
  inline CMsgGC_Match_Result_Player() : CMsgGC_Match_Result_Player(nullptr) {}
  ~CMsgGC_Match_Result_Player() override;
  explicit constexpr CMsgGC_Match_Result_Player(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGC_Match_Result_Player(const CMsgGC_Match_Result_Player& from);
  CMsgGC_Match_Result_Player(CMsgGC_Match_Result_Player&& from) noexcept
    : CMsgGC_Match_Result_Player() {
    *this = ::std::move(from);
  }

  inline CMsgGC_Match_Result_Player& operator=(const CMsgGC_Match_Result_Player& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGC_Match_Result_Player& operator=(CMsgGC_Match_Result_Player&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGC_Match_Result_Player& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGC_Match_Result_Player* internal_default_instance() {
    return reinterpret_cast<const CMsgGC_Match_Result_Player*>(
               &_CMsgGC_Match_Result_Player_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    146;

  friend void swap(CMsgGC_Match_Result_Player& a, CMsgGC_Match_Result_Player& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGC_Match_Result_Player* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGC_Match_Result_Player* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGC_Match_Result_Player* New() const final {
    return new CMsgGC_Match_Result_Player();
  }

  CMsgGC_Match_Result_Player* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGC_Match_Result_Player>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgGC_Match_Result_Player& from);
  void MergeFrom(const CMsgGC_Match_Result_Player& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGC_Match_Result_Player* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGC_Match_Result.Player";
  }
  protected:
  explicit CMsgGC_Match_Result_Player(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpBreakdownFieldNumber = 21,
    kSteamIdFieldNumber = 1,
    kOriginalPartyIdFieldNumber = 2,
    kTeamFieldNumber = 3,
    kScoreFieldNumber = 4,
    kPingFieldNumber = 5,
    kFlagsFieldNumber = 6,
    kRankFieldNumber = 9,
    kClassesPlayedFieldNumber = 10,
    kKillsFieldNumber = 11,
    kDeathsFieldNumber = 12,
    kDamageFieldNumber = 13,
    kHealingFieldNumber = 14,
    kSupportFieldNumber = 15,
    kScoreMedalFieldNumber = 16,
    kKillsMedalFieldNumber = 17,
    kDamageMedalFieldNumber = 18,
    kHealingMedalFieldNumber = 19,
    kSupportMedalFieldNumber = 20,
    kLeaveTimeFieldNumber = 22,
    kLeaveReasonFieldNumber = 23,
    kConnectTimeFieldNumber = 24,
  };
  // repeated .CMsgTFXPSource xp_breakdown = 21;
  int xp_breakdown_size() const;
  private:
  int _internal_xp_breakdown_size() const;
  public:
  void clear_xp_breakdown();
  ::CMsgTFXPSource* mutable_xp_breakdown(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgTFXPSource >*
      mutable_xp_breakdown();
  private:
  const ::CMsgTFXPSource& _internal_xp_breakdown(int index) const;
  ::CMsgTFXPSource* _internal_add_xp_breakdown();
  public:
  const ::CMsgTFXPSource& xp_breakdown(int index) const;
  ::CMsgTFXPSource* add_xp_breakdown();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgTFXPSource >&
      xp_breakdown() const;

  // optional fixed64 steam_id = 1;
  bool has_steam_id() const;
  private:
  bool _internal_has_steam_id() const;
  public:
  void clear_steam_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 steam_id() const;
  void set_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_steam_id() const;
  void _internal_set_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 original_party_id = 2;
  bool has_original_party_id() const;
  private:
  bool _internal_has_original_party_id() const;
  public:
  void clear_original_party_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 original_party_id() const;
  void set_original_party_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_original_party_id() const;
  void _internal_set_original_party_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 team = 3;
  bool has_team() const;
  private:
  bool _internal_has_team() const;
  public:
  void clear_team();
  ::PROTOBUF_NAMESPACE_ID::uint32 team() const;
  void set_team(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_team() const;
  void _internal_set_team(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 score = 4;
  bool has_score() const;
  private:
  bool _internal_has_score() const;
  public:
  void clear_score();
  ::PROTOBUF_NAMESPACE_ID::uint32 score() const;
  void set_score(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_score() const;
  void _internal_set_score(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 ping = 5;
  bool has_ping() const;
  private:
  bool _internal_has_ping() const;
  public:
  void clear_ping();
  ::PROTOBUF_NAMESPACE_ID::uint32 ping() const;
  void set_ping(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ping() const;
  void _internal_set_ping(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 flags = 6;
  bool has_flags() const;
  private:
  bool _internal_has_flags() const;
  public:
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_flags() const;
  void _internal_set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 rank = 9;
  bool has_rank() const;
  private:
  bool _internal_has_rank() const;
  public:
  void clear_rank();
  ::PROTOBUF_NAMESPACE_ID::uint32 rank() const;
  void set_rank(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rank() const;
  void _internal_set_rank(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 classes_played = 10;
  bool has_classes_played() const;
  private:
  bool _internal_has_classes_played() const;
  public:
  void clear_classes_played();
  ::PROTOBUF_NAMESPACE_ID::uint32 classes_played() const;
  void set_classes_played(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_classes_played() const;
  void _internal_set_classes_played(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 kills = 11;
  bool has_kills() const;
  private:
  bool _internal_has_kills() const;
  public:
  void clear_kills();
  ::PROTOBUF_NAMESPACE_ID::uint32 kills() const;
  void set_kills(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_kills() const;
  void _internal_set_kills(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 deaths = 12;
  bool has_deaths() const;
  private:
  bool _internal_has_deaths() const;
  public:
  void clear_deaths();
  ::PROTOBUF_NAMESPACE_ID::uint32 deaths() const;
  void set_deaths(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_deaths() const;
  void _internal_set_deaths(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 damage = 13;
  bool has_damage() const;
  private:
  bool _internal_has_damage() const;
  public:
  void clear_damage();
  ::PROTOBUF_NAMESPACE_ID::uint32 damage() const;
  void set_damage(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_damage() const;
  void _internal_set_damage(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 healing = 14;
  bool has_healing() const;
  private:
  bool _internal_has_healing() const;
  public:
  void clear_healing();
  ::PROTOBUF_NAMESPACE_ID::uint32 healing() const;
  void set_healing(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_healing() const;
  void _internal_set_healing(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 support = 15;
  bool has_support() const;
  private:
  bool _internal_has_support() const;
  public:
  void clear_support();
  ::PROTOBUF_NAMESPACE_ID::uint32 support() const;
  void set_support(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_support() const;
  void _internal_set_support(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 score_medal = 16;
  bool has_score_medal() const;
  private:
  bool _internal_has_score_medal() const;
  public:
  void clear_score_medal();
  ::PROTOBUF_NAMESPACE_ID::uint32 score_medal() const;
  void set_score_medal(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_score_medal() const;
  void _internal_set_score_medal(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 kills_medal = 17;
  bool has_kills_medal() const;
  private:
  bool _internal_has_kills_medal() const;
  public:
  void clear_kills_medal();
  ::PROTOBUF_NAMESPACE_ID::uint32 kills_medal() const;
  void set_kills_medal(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_kills_medal() const;
  void _internal_set_kills_medal(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 damage_medal = 18;
  bool has_damage_medal() const;
  private:
  bool _internal_has_damage_medal() const;
  public:
  void clear_damage_medal();
  ::PROTOBUF_NAMESPACE_ID::uint32 damage_medal() const;
  void set_damage_medal(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_damage_medal() const;
  void _internal_set_damage_medal(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 healing_medal = 19;
  bool has_healing_medal() const;
  private:
  bool _internal_has_healing_medal() const;
  public:
  void clear_healing_medal();
  ::PROTOBUF_NAMESPACE_ID::uint32 healing_medal() const;
  void set_healing_medal(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_healing_medal() const;
  void _internal_set_healing_medal(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 support_medal = 20;
  bool has_support_medal() const;
  private:
  bool _internal_has_support_medal() const;
  public:
  void clear_support_medal();
  ::PROTOBUF_NAMESPACE_ID::uint32 support_medal() const;
  void set_support_medal(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_support_medal() const;
  void _internal_set_support_medal(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 leave_time = 22;
  bool has_leave_time() const;
  private:
  bool _internal_has_leave_time() const;
  public:
  void clear_leave_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 leave_time() const;
  void set_leave_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_leave_time() const;
  void _internal_set_leave_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .TFMatchLeaveReason leave_reason = 23 [default = TFMatchLeaveReason_UNSPECIFIED];
  bool has_leave_reason() const;
  private:
  bool _internal_has_leave_reason() const;
  public:
  void clear_leave_reason();
  ::TFMatchLeaveReason leave_reason() const;
  void set_leave_reason(::TFMatchLeaveReason value);
  private:
  ::TFMatchLeaveReason _internal_leave_reason() const;
  void _internal_set_leave_reason(::TFMatchLeaveReason value);
  public:

  // optional uint32 connect_time = 24;
  bool has_connect_time() const;
  private:
  bool _internal_has_connect_time() const;
  public:
  void clear_connect_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 connect_time() const;
  void set_connect_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_connect_time() const;
  void _internal_set_connect_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGC_Match_Result.Player)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgTFXPSource > xp_breakdown_;
  ::PROTOBUF_NAMESPACE_ID::uint64 steam_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 original_party_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 team_;
  ::PROTOBUF_NAMESPACE_ID::uint32 score_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ping_;
  ::PROTOBUF_NAMESPACE_ID::uint32 flags_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rank_;
  ::PROTOBUF_NAMESPACE_ID::uint32 classes_played_;
  ::PROTOBUF_NAMESPACE_ID::uint32 kills_;
  ::PROTOBUF_NAMESPACE_ID::uint32 deaths_;
  ::PROTOBUF_NAMESPACE_ID::uint32 damage_;
  ::PROTOBUF_NAMESPACE_ID::uint32 healing_;
  ::PROTOBUF_NAMESPACE_ID::uint32 support_;
  ::PROTOBUF_NAMESPACE_ID::uint32 score_medal_;
  ::PROTOBUF_NAMESPACE_ID::uint32 kills_medal_;
  ::PROTOBUF_NAMESPACE_ID::uint32 damage_medal_;
  ::PROTOBUF_NAMESPACE_ID::uint32 healing_medal_;
  ::PROTOBUF_NAMESPACE_ID::uint32 support_medal_;
  ::PROTOBUF_NAMESPACE_ID::uint32 leave_time_;
  int leave_reason_;
  ::PROTOBUF_NAMESPACE_ID::uint32 connect_time_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGC_Match_Result final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGC_Match_Result) */ {
 public:
  inline CMsgGC_Match_Result() : CMsgGC_Match_Result(nullptr) {}
  ~CMsgGC_Match_Result() override;
  explicit constexpr CMsgGC_Match_Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGC_Match_Result(const CMsgGC_Match_Result& from);
  CMsgGC_Match_Result(CMsgGC_Match_Result&& from) noexcept
    : CMsgGC_Match_Result() {
    *this = ::std::move(from);
  }

  inline CMsgGC_Match_Result& operator=(const CMsgGC_Match_Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGC_Match_Result& operator=(CMsgGC_Match_Result&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGC_Match_Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGC_Match_Result* internal_default_instance() {
    return reinterpret_cast<const CMsgGC_Match_Result*>(
               &_CMsgGC_Match_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    147;

  friend void swap(CMsgGC_Match_Result& a, CMsgGC_Match_Result& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGC_Match_Result* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGC_Match_Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGC_Match_Result* New() const final {
    return new CMsgGC_Match_Result();
  }

  CMsgGC_Match_Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGC_Match_Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgGC_Match_Result& from);
  void MergeFrom(const CMsgGC_Match_Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGC_Match_Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGC_Match_Result";
  }
  protected:
  explicit CMsgGC_Match_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgGC_Match_Result_Player Player;

  typedef CMsgGC_Match_Result_Status Status;
  static constexpr Status MATCH_SUCCEEDED =
    CMsgGC_Match_Result_Status_MATCH_SUCCEEDED;
  static constexpr Status MATCH_FAILED_GC =
    CMsgGC_Match_Result_Status_MATCH_FAILED_GC;
  static constexpr Status MATCH_FAILED_TRUSTED =
    CMsgGC_Match_Result_Status_MATCH_FAILED_TRUSTED;
  static constexpr Status MATCH_FAILED_ABANDON =
    CMsgGC_Match_Result_Status_MATCH_FAILED_ABANDON;
  static constexpr Status MATCH_FAILED_UNKNOWN =
    CMsgGC_Match_Result_Status_MATCH_FAILED_UNKNOWN;
  static constexpr Status MATCH_FAILED_TIMEOUT =
    CMsgGC_Match_Result_Status_MATCH_FAILED_TIMEOUT;
  static constexpr Status MATCH_FINISHED_ABANDON =
    CMsgGC_Match_Result_Status_MATCH_FINISHED_ABANDON;
  static inline bool Status_IsValid(int value) {
    return CMsgGC_Match_Result_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    CMsgGC_Match_Result_Status_Status_MIN;
  static constexpr Status Status_MAX =
    CMsgGC_Match_Result_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    CMsgGC_Match_Result_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return CMsgGC_Match_Result_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return CMsgGC_Match_Result_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return CMsgGC_Match_Result_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersFieldNumber = 10,
    kMatchIdFieldNumber = 1,
    kMatchGroupFieldNumber = 2,
    kStatusFieldNumber = 3,
    kDurationFieldNumber = 4,
    kRedScoreFieldNumber = 5,
    kBlueScoreFieldNumber = 6,
    kWinningTeamFieldNumber = 7,
    kMapIndexFieldNumber = 8,
    kGameTypeFieldNumber = 9,
    kWinReasonFieldNumber = 13,
    kFlagsFieldNumber = 14,
    kBotsFieldNumber = 16,
  };
  // repeated .CMsgGC_Match_Result.Player players = 10;
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  ::CMsgGC_Match_Result_Player* mutable_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGC_Match_Result_Player >*
      mutable_players();
  private:
  const ::CMsgGC_Match_Result_Player& _internal_players(int index) const;
  ::CMsgGC_Match_Result_Player* _internal_add_players();
  public:
  const ::CMsgGC_Match_Result_Player& players(int index) const;
  ::CMsgGC_Match_Result_Player* add_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGC_Match_Result_Player >&
      players() const;

  // optional uint64 match_id = 1 [(.key_field) = true];
  bool has_match_id() const;
  private:
  bool _internal_has_match_id() const;
  public:
  void clear_match_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 match_id() const;
  void set_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_match_id() const;
  void _internal_set_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional int32 match_group = 2;
  bool has_match_group() const;
  private:
  bool _internal_has_match_group() const;
  public:
  void clear_match_group();
  ::PROTOBUF_NAMESPACE_ID::int32 match_group() const;
  void set_match_group(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_match_group() const;
  void _internal_set_match_group(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .CMsgGC_Match_Result.Status status = 3 [default = MATCH_SUCCEEDED];
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::CMsgGC_Match_Result_Status status() const;
  void set_status(::CMsgGC_Match_Result_Status value);
  private:
  ::CMsgGC_Match_Result_Status _internal_status() const;
  void _internal_set_status(::CMsgGC_Match_Result_Status value);
  public:

  // optional uint32 duration = 4;
  bool has_duration() const;
  private:
  bool _internal_has_duration() const;
  public:
  void clear_duration();
  ::PROTOBUF_NAMESPACE_ID::uint32 duration() const;
  void set_duration(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_duration() const;
  void _internal_set_duration(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 red_score = 5;
  bool has_red_score() const;
  private:
  bool _internal_has_red_score() const;
  public:
  void clear_red_score();
  ::PROTOBUF_NAMESPACE_ID::uint32 red_score() const;
  void set_red_score(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_red_score() const;
  void _internal_set_red_score(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 blue_score = 6;
  bool has_blue_score() const;
  private:
  bool _internal_has_blue_score() const;
  public:
  void clear_blue_score();
  ::PROTOBUF_NAMESPACE_ID::uint32 blue_score() const;
  void set_blue_score(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_blue_score() const;
  void _internal_set_blue_score(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 winning_team = 7;
  bool has_winning_team() const;
  private:
  bool _internal_has_winning_team() const;
  public:
  void clear_winning_team();
  ::PROTOBUF_NAMESPACE_ID::uint32 winning_team() const;
  void set_winning_team(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_winning_team() const;
  void _internal_set_winning_team(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 map_index = 8;
  bool has_map_index() const;
  private:
  bool _internal_has_map_index() const;
  public:
  void clear_map_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 map_index() const;
  void set_map_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_map_index() const;
  void _internal_set_map_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 game_type = 9 [default = 0];
  bool has_game_type() const;
  private:
  bool _internal_has_game_type() const;
  public:
  void clear_game_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 game_type() const;
  void set_game_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_game_type() const;
  void _internal_set_game_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 win_reason = 13;
  bool has_win_reason() const;
  private:
  bool _internal_has_win_reason() const;
  public:
  void clear_win_reason();
  ::PROTOBUF_NAMESPACE_ID::uint32 win_reason() const;
  void set_win_reason(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_win_reason() const;
  void _internal_set_win_reason(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 flags = 14;
  bool has_flags() const;
  private:
  bool _internal_has_flags() const;
  public:
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_flags() const;
  void _internal_set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 bots = 16;
  bool has_bots() const;
  private:
  bool _internal_has_bots() const;
  public:
  void clear_bots();
  ::PROTOBUF_NAMESPACE_ID::uint32 bots() const;
  void set_bots(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_bots() const;
  void _internal_set_bots(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGC_Match_Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGC_Match_Result_Player > players_;
  ::PROTOBUF_NAMESPACE_ID::uint64 match_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 match_group_;
  int status_;
  ::PROTOBUF_NAMESPACE_ID::uint32 duration_;
  ::PROTOBUF_NAMESPACE_ID::uint32 red_score_;
  ::PROTOBUF_NAMESPACE_ID::uint32 blue_score_;
  ::PROTOBUF_NAMESPACE_ID::uint32 winning_team_;
  ::PROTOBUF_NAMESPACE_ID::uint32 map_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 game_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 win_reason_;
  ::PROTOBUF_NAMESPACE_ID::uint32 flags_;
  ::PROTOBUF_NAMESPACE_ID::uint32 bots_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGC_Match_ResultResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGC_Match_ResultResponse) */ {
 public:
  inline CMsgGC_Match_ResultResponse() : CMsgGC_Match_ResultResponse(nullptr) {}
  ~CMsgGC_Match_ResultResponse() override;
  explicit constexpr CMsgGC_Match_ResultResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGC_Match_ResultResponse(const CMsgGC_Match_ResultResponse& from);
  CMsgGC_Match_ResultResponse(CMsgGC_Match_ResultResponse&& from) noexcept
    : CMsgGC_Match_ResultResponse() {
    *this = ::std::move(from);
  }

  inline CMsgGC_Match_ResultResponse& operator=(const CMsgGC_Match_ResultResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGC_Match_ResultResponse& operator=(CMsgGC_Match_ResultResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGC_Match_ResultResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGC_Match_ResultResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgGC_Match_ResultResponse*>(
               &_CMsgGC_Match_ResultResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    148;

  friend void swap(CMsgGC_Match_ResultResponse& a, CMsgGC_Match_ResultResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGC_Match_ResultResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGC_Match_ResultResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGC_Match_ResultResponse* New() const final {
    return new CMsgGC_Match_ResultResponse();
  }

  CMsgGC_Match_ResultResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGC_Match_ResultResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgGC_Match_ResultResponse& from);
  void MergeFrom(const CMsgGC_Match_ResultResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGC_Match_ResultResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGC_Match_ResultResponse";
  }
  protected:
  explicit CMsgGC_Match_ResultResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgGC_Match_ResultResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CEconItemPreviewDataBlock final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CEconItemPreviewDataBlock) */ {
 public:
  inline CEconItemPreviewDataBlock() : CEconItemPreviewDataBlock(nullptr) {}
  ~CEconItemPreviewDataBlock() override;
  explicit constexpr CEconItemPreviewDataBlock(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CEconItemPreviewDataBlock(const CEconItemPreviewDataBlock& from);
  CEconItemPreviewDataBlock(CEconItemPreviewDataBlock&& from) noexcept
    : CEconItemPreviewDataBlock() {
    *this = ::std::move(from);
  }

  inline CEconItemPreviewDataBlock& operator=(const CEconItemPreviewDataBlock& from) {
    CopyFrom(from);
    return *this;
  }
  inline CEconItemPreviewDataBlock& operator=(CEconItemPreviewDataBlock&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CEconItemPreviewDataBlock& default_instance() {
    return *internal_default_instance();
  }
  static inline const CEconItemPreviewDataBlock* internal_default_instance() {
    return reinterpret_cast<const CEconItemPreviewDataBlock*>(
               &_CEconItemPreviewDataBlock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    149;

  friend void swap(CEconItemPreviewDataBlock& a, CEconItemPreviewDataBlock& b) {
    a.Swap(&b);
  }
  inline void Swap(CEconItemPreviewDataBlock* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CEconItemPreviewDataBlock* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CEconItemPreviewDataBlock* New() const final {
    return new CEconItemPreviewDataBlock();
  }

  CEconItemPreviewDataBlock* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CEconItemPreviewDataBlock>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CEconItemPreviewDataBlock& from);
  void MergeFrom(const CEconItemPreviewDataBlock& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CEconItemPreviewDataBlock* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CEconItemPreviewDataBlock";
  }
  protected:
  explicit CEconItemPreviewDataBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEconitemFieldNumber = 1,
  };
  // optional .CSOEconItem econitem = 1;
  bool has_econitem() const;
  private:
  bool _internal_has_econitem() const;
  public:
  void clear_econitem();
  const ::CSOEconItem& econitem() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CSOEconItem* release_econitem();
  ::CSOEconItem* mutable_econitem();
  void set_allocated_econitem(::CSOEconItem* econitem);
  private:
  const ::CSOEconItem& _internal_econitem() const;
  ::CSOEconItem* _internal_mutable_econitem();
  public:
  void unsafe_arena_set_allocated_econitem(
      ::CSOEconItem* econitem);
  ::CSOEconItem* unsafe_arena_release_econitem();

  // @@protoc_insertion_point(class_scope:CEconItemPreviewDataBlock)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CSOEconItem* econitem_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGC_Client2GCEconPreviewDataBlockRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGC_Client2GCEconPreviewDataBlockRequest) */ {
 public:
  inline CMsgGC_Client2GCEconPreviewDataBlockRequest() : CMsgGC_Client2GCEconPreviewDataBlockRequest(nullptr) {}
  ~CMsgGC_Client2GCEconPreviewDataBlockRequest() override;
  explicit constexpr CMsgGC_Client2GCEconPreviewDataBlockRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGC_Client2GCEconPreviewDataBlockRequest(const CMsgGC_Client2GCEconPreviewDataBlockRequest& from);
  CMsgGC_Client2GCEconPreviewDataBlockRequest(CMsgGC_Client2GCEconPreviewDataBlockRequest&& from) noexcept
    : CMsgGC_Client2GCEconPreviewDataBlockRequest() {
    *this = ::std::move(from);
  }

  inline CMsgGC_Client2GCEconPreviewDataBlockRequest& operator=(const CMsgGC_Client2GCEconPreviewDataBlockRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGC_Client2GCEconPreviewDataBlockRequest& operator=(CMsgGC_Client2GCEconPreviewDataBlockRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGC_Client2GCEconPreviewDataBlockRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGC_Client2GCEconPreviewDataBlockRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgGC_Client2GCEconPreviewDataBlockRequest*>(
               &_CMsgGC_Client2GCEconPreviewDataBlockRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    150;

  friend void swap(CMsgGC_Client2GCEconPreviewDataBlockRequest& a, CMsgGC_Client2GCEconPreviewDataBlockRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGC_Client2GCEconPreviewDataBlockRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGC_Client2GCEconPreviewDataBlockRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGC_Client2GCEconPreviewDataBlockRequest* New() const final {
    return new CMsgGC_Client2GCEconPreviewDataBlockRequest();
  }

  CMsgGC_Client2GCEconPreviewDataBlockRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGC_Client2GCEconPreviewDataBlockRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgGC_Client2GCEconPreviewDataBlockRequest& from);
  void MergeFrom(const CMsgGC_Client2GCEconPreviewDataBlockRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGC_Client2GCEconPreviewDataBlockRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGC_Client2GCEconPreviewDataBlockRequest";
  }
  protected:
  explicit CMsgGC_Client2GCEconPreviewDataBlockRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamSFieldNumber = 1,
    kParamAFieldNumber = 2,
    kParamDFieldNumber = 3,
    kParamMFieldNumber = 4,
  };
  // optional uint64 param_s = 1;
  bool has_param_s() const;
  private:
  bool _internal_has_param_s() const;
  public:
  void clear_param_s();
  ::PROTOBUF_NAMESPACE_ID::uint64 param_s() const;
  void set_param_s(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_param_s() const;
  void _internal_set_param_s(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 param_a = 2;
  bool has_param_a() const;
  private:
  bool _internal_has_param_a() const;
  public:
  void clear_param_a();
  ::PROTOBUF_NAMESPACE_ID::uint64 param_a() const;
  void set_param_a(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_param_a() const;
  void _internal_set_param_a(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 param_d = 3;
  bool has_param_d() const;
  private:
  bool _internal_has_param_d() const;
  public:
  void clear_param_d();
  ::PROTOBUF_NAMESPACE_ID::uint64 param_d() const;
  void set_param_d(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_param_d() const;
  void _internal_set_param_d(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 param_m = 4;
  bool has_param_m() const;
  private:
  bool _internal_has_param_m() const;
  public:
  void clear_param_m();
  ::PROTOBUF_NAMESPACE_ID::uint64 param_m() const;
  void set_param_m(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_param_m() const;
  void _internal_set_param_m(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGC_Client2GCEconPreviewDataBlockRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 param_s_;
  ::PROTOBUF_NAMESPACE_ID::uint64 param_a_;
  ::PROTOBUF_NAMESPACE_ID::uint64 param_d_;
  ::PROTOBUF_NAMESPACE_ID::uint64 param_m_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGC_Client2GCEconPreviewDataBlockResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGC_Client2GCEconPreviewDataBlockResponse) */ {
 public:
  inline CMsgGC_Client2GCEconPreviewDataBlockResponse() : CMsgGC_Client2GCEconPreviewDataBlockResponse(nullptr) {}
  ~CMsgGC_Client2GCEconPreviewDataBlockResponse() override;
  explicit constexpr CMsgGC_Client2GCEconPreviewDataBlockResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGC_Client2GCEconPreviewDataBlockResponse(const CMsgGC_Client2GCEconPreviewDataBlockResponse& from);
  CMsgGC_Client2GCEconPreviewDataBlockResponse(CMsgGC_Client2GCEconPreviewDataBlockResponse&& from) noexcept
    : CMsgGC_Client2GCEconPreviewDataBlockResponse() {
    *this = ::std::move(from);
  }

  inline CMsgGC_Client2GCEconPreviewDataBlockResponse& operator=(const CMsgGC_Client2GCEconPreviewDataBlockResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGC_Client2GCEconPreviewDataBlockResponse& operator=(CMsgGC_Client2GCEconPreviewDataBlockResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGC_Client2GCEconPreviewDataBlockResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGC_Client2GCEconPreviewDataBlockResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgGC_Client2GCEconPreviewDataBlockResponse*>(
               &_CMsgGC_Client2GCEconPreviewDataBlockResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    151;

  friend void swap(CMsgGC_Client2GCEconPreviewDataBlockResponse& a, CMsgGC_Client2GCEconPreviewDataBlockResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGC_Client2GCEconPreviewDataBlockResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGC_Client2GCEconPreviewDataBlockResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGC_Client2GCEconPreviewDataBlockResponse* New() const final {
    return new CMsgGC_Client2GCEconPreviewDataBlockResponse();
  }

  CMsgGC_Client2GCEconPreviewDataBlockResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGC_Client2GCEconPreviewDataBlockResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgGC_Client2GCEconPreviewDataBlockResponse& from);
  void MergeFrom(const CMsgGC_Client2GCEconPreviewDataBlockResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGC_Client2GCEconPreviewDataBlockResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGC_Client2GCEconPreviewDataBlockResponse";
  }
  protected:
  explicit CMsgGC_Client2GCEconPreviewDataBlockResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIteminfoFieldNumber = 1,
  };
  // optional .CEconItemPreviewDataBlock iteminfo = 1;
  bool has_iteminfo() const;
  private:
  bool _internal_has_iteminfo() const;
  public:
  void clear_iteminfo();
  const ::CEconItemPreviewDataBlock& iteminfo() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CEconItemPreviewDataBlock* release_iteminfo();
  ::CEconItemPreviewDataBlock* mutable_iteminfo();
  void set_allocated_iteminfo(::CEconItemPreviewDataBlock* iteminfo);
  private:
  const ::CEconItemPreviewDataBlock& _internal_iteminfo() const;
  ::CEconItemPreviewDataBlock* _internal_mutable_iteminfo();
  public:
  void unsafe_arena_set_allocated_iteminfo(
      ::CEconItemPreviewDataBlock* iteminfo);
  ::CEconItemPreviewDataBlock* unsafe_arena_release_iteminfo();

  // @@protoc_insertion_point(class_scope:CMsgGC_Client2GCEconPreviewDataBlockResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CEconItemPreviewDataBlock* iteminfo_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CSOTFLadderPlayerStats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSOTFLadderPlayerStats) */ {
 public:
  inline CSOTFLadderPlayerStats() : CSOTFLadderPlayerStats(nullptr) {}
  ~CSOTFLadderPlayerStats() override;
  explicit constexpr CSOTFLadderPlayerStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSOTFLadderPlayerStats(const CSOTFLadderPlayerStats& from);
  CSOTFLadderPlayerStats(CSOTFLadderPlayerStats&& from) noexcept
    : CSOTFLadderPlayerStats() {
    *this = ::std::move(from);
  }

  inline CSOTFLadderPlayerStats& operator=(const CSOTFLadderPlayerStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSOTFLadderPlayerStats& operator=(CSOTFLadderPlayerStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSOTFLadderPlayerStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSOTFLadderPlayerStats* internal_default_instance() {
    return reinterpret_cast<const CSOTFLadderPlayerStats*>(
               &_CSOTFLadderPlayerStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    152;

  friend void swap(CSOTFLadderPlayerStats& a, CSOTFLadderPlayerStats& b) {
    a.Swap(&b);
  }
  inline void Swap(CSOTFLadderPlayerStats* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSOTFLadderPlayerStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSOTFLadderPlayerStats* New() const final {
    return new CSOTFLadderPlayerStats();
  }

  CSOTFLadderPlayerStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSOTFLadderPlayerStats>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSOTFLadderPlayerStats& from);
  void MergeFrom(const CSOTFLadderPlayerStats& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSOTFLadderPlayerStats* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSOTFLadderPlayerStats";
  }
  protected:
  explicit CSOTFLadderPlayerStats(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
    kMatchGroupFieldNumber = 2,
    kSeasonIdFieldNumber = 3,
    kGamesFieldNumber = 9,
    kScoreFieldNumber = 10,
    kKillsFieldNumber = 11,
    kDeathsFieldNumber = 12,
    kDamageFieldNumber = 13,
    kHealingFieldNumber = 14,
    kSupportFieldNumber = 15,
    kScoreBronzeFieldNumber = 16,
    kScoreSilverFieldNumber = 17,
    kScoreGoldFieldNumber = 18,
    kKillsBronzeFieldNumber = 19,
    kKillsSilverFieldNumber = 20,
    kKillsGoldFieldNumber = 21,
    kDamageBronzeFieldNumber = 22,
    kDamageSilverFieldNumber = 23,
    kDamageGoldFieldNumber = 24,
    kHealingBronzeFieldNumber = 25,
    kSupportGoldFieldNumber = 30,
    kHealingSilverFieldNumber = 26,
    kHealingGoldFieldNumber = 27,
    kSupportBronzeFieldNumber = 28,
    kSupportSilverFieldNumber = 29,
  };
  // optional uint32 account_id = 1 [(.key_field) = true];
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id() const;
  void set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_account_id() const;
  void _internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 match_group = 2 [(.key_field) = true];
  bool has_match_group() const;
  private:
  bool _internal_has_match_group() const;
  public:
  void clear_match_group();
  ::PROTOBUF_NAMESPACE_ID::int32 match_group() const;
  void set_match_group(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_match_group() const;
  void _internal_set_match_group(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint32 season_id = 3 [(.key_field) = true];
  bool has_season_id() const;
  private:
  bool _internal_has_season_id() const;
  public:
  void clear_season_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 season_id() const;
  void set_season_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_season_id() const;
  void _internal_set_season_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 games = 9;
  bool has_games() const;
  private:
  bool _internal_has_games() const;
  public:
  void clear_games();
  ::PROTOBUF_NAMESPACE_ID::uint32 games() const;
  void set_games(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_games() const;
  void _internal_set_games(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 score = 10;
  bool has_score() const;
  private:
  bool _internal_has_score() const;
  public:
  void clear_score();
  ::PROTOBUF_NAMESPACE_ID::uint32 score() const;
  void set_score(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_score() const;
  void _internal_set_score(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 kills = 11;
  bool has_kills() const;
  private:
  bool _internal_has_kills() const;
  public:
  void clear_kills();
  ::PROTOBUF_NAMESPACE_ID::uint32 kills() const;
  void set_kills(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_kills() const;
  void _internal_set_kills(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 deaths = 12;
  bool has_deaths() const;
  private:
  bool _internal_has_deaths() const;
  public:
  void clear_deaths();
  ::PROTOBUF_NAMESPACE_ID::uint32 deaths() const;
  void set_deaths(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_deaths() const;
  void _internal_set_deaths(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 damage = 13;
  bool has_damage() const;
  private:
  bool _internal_has_damage() const;
  public:
  void clear_damage();
  ::PROTOBUF_NAMESPACE_ID::uint32 damage() const;
  void set_damage(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_damage() const;
  void _internal_set_damage(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 healing = 14;
  bool has_healing() const;
  private:
  bool _internal_has_healing() const;
  public:
  void clear_healing();
  ::PROTOBUF_NAMESPACE_ID::uint32 healing() const;
  void set_healing(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_healing() const;
  void _internal_set_healing(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 support = 15;
  bool has_support() const;
  private:
  bool _internal_has_support() const;
  public:
  void clear_support();
  ::PROTOBUF_NAMESPACE_ID::uint32 support() const;
  void set_support(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_support() const;
  void _internal_set_support(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 score_bronze = 16;
  bool has_score_bronze() const;
  private:
  bool _internal_has_score_bronze() const;
  public:
  void clear_score_bronze();
  ::PROTOBUF_NAMESPACE_ID::uint32 score_bronze() const;
  void set_score_bronze(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_score_bronze() const;
  void _internal_set_score_bronze(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 score_silver = 17;
  bool has_score_silver() const;
  private:
  bool _internal_has_score_silver() const;
  public:
  void clear_score_silver();
  ::PROTOBUF_NAMESPACE_ID::uint32 score_silver() const;
  void set_score_silver(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_score_silver() const;
  void _internal_set_score_silver(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 score_gold = 18;
  bool has_score_gold() const;
  private:
  bool _internal_has_score_gold() const;
  public:
  void clear_score_gold();
  ::PROTOBUF_NAMESPACE_ID::uint32 score_gold() const;
  void set_score_gold(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_score_gold() const;
  void _internal_set_score_gold(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 kills_bronze = 19;
  bool has_kills_bronze() const;
  private:
  bool _internal_has_kills_bronze() const;
  public:
  void clear_kills_bronze();
  ::PROTOBUF_NAMESPACE_ID::uint32 kills_bronze() const;
  void set_kills_bronze(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_kills_bronze() const;
  void _internal_set_kills_bronze(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 kills_silver = 20;
  bool has_kills_silver() const;
  private:
  bool _internal_has_kills_silver() const;
  public:
  void clear_kills_silver();
  ::PROTOBUF_NAMESPACE_ID::uint32 kills_silver() const;
  void set_kills_silver(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_kills_silver() const;
  void _internal_set_kills_silver(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 kills_gold = 21;
  bool has_kills_gold() const;
  private:
  bool _internal_has_kills_gold() const;
  public:
  void clear_kills_gold();
  ::PROTOBUF_NAMESPACE_ID::uint32 kills_gold() const;
  void set_kills_gold(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_kills_gold() const;
  void _internal_set_kills_gold(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 damage_bronze = 22;
  bool has_damage_bronze() const;
  private:
  bool _internal_has_damage_bronze() const;
  public:
  void clear_damage_bronze();
  ::PROTOBUF_NAMESPACE_ID::uint32 damage_bronze() const;
  void set_damage_bronze(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_damage_bronze() const;
  void _internal_set_damage_bronze(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 damage_silver = 23;
  bool has_damage_silver() const;
  private:
  bool _internal_has_damage_silver() const;
  public:
  void clear_damage_silver();
  ::PROTOBUF_NAMESPACE_ID::uint32 damage_silver() const;
  void set_damage_silver(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_damage_silver() const;
  void _internal_set_damage_silver(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 damage_gold = 24;
  bool has_damage_gold() const;
  private:
  bool _internal_has_damage_gold() const;
  public:
  void clear_damage_gold();
  ::PROTOBUF_NAMESPACE_ID::uint32 damage_gold() const;
  void set_damage_gold(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_damage_gold() const;
  void _internal_set_damage_gold(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 healing_bronze = 25;
  bool has_healing_bronze() const;
  private:
  bool _internal_has_healing_bronze() const;
  public:
  void clear_healing_bronze();
  ::PROTOBUF_NAMESPACE_ID::uint32 healing_bronze() const;
  void set_healing_bronze(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_healing_bronze() const;
  void _internal_set_healing_bronze(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 support_gold = 30;
  bool has_support_gold() const;
  private:
  bool _internal_has_support_gold() const;
  public:
  void clear_support_gold();
  ::PROTOBUF_NAMESPACE_ID::uint32 support_gold() const;
  void set_support_gold(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_support_gold() const;
  void _internal_set_support_gold(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 healing_silver = 26;
  bool has_healing_silver() const;
  private:
  bool _internal_has_healing_silver() const;
  public:
  void clear_healing_silver();
  ::PROTOBUF_NAMESPACE_ID::uint32 healing_silver() const;
  void set_healing_silver(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_healing_silver() const;
  void _internal_set_healing_silver(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 healing_gold = 27;
  bool has_healing_gold() const;
  private:
  bool _internal_has_healing_gold() const;
  public:
  void clear_healing_gold();
  ::PROTOBUF_NAMESPACE_ID::uint32 healing_gold() const;
  void set_healing_gold(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_healing_gold() const;
  void _internal_set_healing_gold(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 support_bronze = 28;
  bool has_support_bronze() const;
  private:
  bool _internal_has_support_bronze() const;
  public:
  void clear_support_bronze();
  ::PROTOBUF_NAMESPACE_ID::uint32 support_bronze() const;
  void set_support_bronze(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_support_bronze() const;
  void _internal_set_support_bronze(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 support_silver = 29;
  bool has_support_silver() const;
  private:
  bool _internal_has_support_silver() const;
  public:
  void clear_support_silver();
  ::PROTOBUF_NAMESPACE_ID::uint32 support_silver() const;
  void set_support_silver(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_support_silver() const;
  void _internal_set_support_silver(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CSOTFLadderPlayerStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 match_group_;
  ::PROTOBUF_NAMESPACE_ID::uint32 season_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 games_;
  ::PROTOBUF_NAMESPACE_ID::uint32 score_;
  ::PROTOBUF_NAMESPACE_ID::uint32 kills_;
  ::PROTOBUF_NAMESPACE_ID::uint32 deaths_;
  ::PROTOBUF_NAMESPACE_ID::uint32 damage_;
  ::PROTOBUF_NAMESPACE_ID::uint32 healing_;
  ::PROTOBUF_NAMESPACE_ID::uint32 support_;
  ::PROTOBUF_NAMESPACE_ID::uint32 score_bronze_;
  ::PROTOBUF_NAMESPACE_ID::uint32 score_silver_;
  ::PROTOBUF_NAMESPACE_ID::uint32 score_gold_;
  ::PROTOBUF_NAMESPACE_ID::uint32 kills_bronze_;
  ::PROTOBUF_NAMESPACE_ID::uint32 kills_silver_;
  ::PROTOBUF_NAMESPACE_ID::uint32 kills_gold_;
  ::PROTOBUF_NAMESPACE_ID::uint32 damage_bronze_;
  ::PROTOBUF_NAMESPACE_ID::uint32 damage_silver_;
  ::PROTOBUF_NAMESPACE_ID::uint32 damage_gold_;
  ::PROTOBUF_NAMESPACE_ID::uint32 healing_bronze_;
  ::PROTOBUF_NAMESPACE_ID::uint32 support_gold_;
  ::PROTOBUF_NAMESPACE_ID::uint32 healing_silver_;
  ::PROTOBUF_NAMESPACE_ID::uint32 healing_gold_;
  ::PROTOBUF_NAMESPACE_ID::uint32 support_bronze_;
  ::PROTOBUF_NAMESPACE_ID::uint32 support_silver_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CSOTFRatingData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSOTFRatingData) */ {
 public:
  inline CSOTFRatingData() : CSOTFRatingData(nullptr) {}
  ~CSOTFRatingData() override;
  explicit constexpr CSOTFRatingData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSOTFRatingData(const CSOTFRatingData& from);
  CSOTFRatingData(CSOTFRatingData&& from) noexcept
    : CSOTFRatingData() {
    *this = ::std::move(from);
  }

  inline CSOTFRatingData& operator=(const CSOTFRatingData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSOTFRatingData& operator=(CSOTFRatingData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSOTFRatingData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSOTFRatingData* internal_default_instance() {
    return reinterpret_cast<const CSOTFRatingData*>(
               &_CSOTFRatingData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    153;

  friend void swap(CSOTFRatingData& a, CSOTFRatingData& b) {
    a.Swap(&b);
  }
  inline void Swap(CSOTFRatingData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSOTFRatingData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSOTFRatingData* New() const final {
    return new CSOTFRatingData();
  }

  CSOTFRatingData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSOTFRatingData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSOTFRatingData& from);
  void MergeFrom(const CSOTFRatingData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSOTFRatingData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSOTFRatingData";
  }
  protected:
  explicit CSOTFRatingData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
    kRatingTypeFieldNumber = 2,
    kRatingPrimaryFieldNumber = 3,
    kRatingSecondaryFieldNumber = 4,
    kRatingTertiaryFieldNumber = 5,
  };
  // optional uint32 account_id = 1 [(.key_field) = true];
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id() const;
  void set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_account_id() const;
  void _internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 rating_type = 2 [(.key_field) = true];
  bool has_rating_type() const;
  private:
  bool _internal_has_rating_type() const;
  public:
  void clear_rating_type();
  ::PROTOBUF_NAMESPACE_ID::int32 rating_type() const;
  void set_rating_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rating_type() const;
  void _internal_set_rating_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint32 rating_primary = 3;
  bool has_rating_primary() const;
  private:
  bool _internal_has_rating_primary() const;
  public:
  void clear_rating_primary();
  ::PROTOBUF_NAMESPACE_ID::uint32 rating_primary() const;
  void set_rating_primary(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rating_primary() const;
  void _internal_set_rating_primary(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 rating_secondary = 4;
  bool has_rating_secondary() const;
  private:
  bool _internal_has_rating_secondary() const;
  public:
  void clear_rating_secondary();
  ::PROTOBUF_NAMESPACE_ID::uint32 rating_secondary() const;
  void set_rating_secondary(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rating_secondary() const;
  void _internal_set_rating_secondary(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 rating_tertiary = 5;
  bool has_rating_tertiary() const;
  private:
  bool _internal_has_rating_tertiary() const;
  public:
  void clear_rating_tertiary();
  ::PROTOBUF_NAMESPACE_ID::uint32 rating_tertiary() const;
  void set_rating_tertiary(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rating_tertiary() const;
  void _internal_set_rating_tertiary(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CSOTFRatingData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 rating_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rating_primary_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rating_secondary_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rating_tertiary_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGC_TFVoteKickPlayerRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGC_TFVoteKickPlayerRequest) */ {
 public:
  inline CMsgGC_TFVoteKickPlayerRequest() : CMsgGC_TFVoteKickPlayerRequest(nullptr) {}
  ~CMsgGC_TFVoteKickPlayerRequest() override;
  explicit constexpr CMsgGC_TFVoteKickPlayerRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGC_TFVoteKickPlayerRequest(const CMsgGC_TFVoteKickPlayerRequest& from);
  CMsgGC_TFVoteKickPlayerRequest(CMsgGC_TFVoteKickPlayerRequest&& from) noexcept
    : CMsgGC_TFVoteKickPlayerRequest() {
    *this = ::std::move(from);
  }

  inline CMsgGC_TFVoteKickPlayerRequest& operator=(const CMsgGC_TFVoteKickPlayerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGC_TFVoteKickPlayerRequest& operator=(CMsgGC_TFVoteKickPlayerRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGC_TFVoteKickPlayerRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGC_TFVoteKickPlayerRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgGC_TFVoteKickPlayerRequest*>(
               &_CMsgGC_TFVoteKickPlayerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    154;

  friend void swap(CMsgGC_TFVoteKickPlayerRequest& a, CMsgGC_TFVoteKickPlayerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGC_TFVoteKickPlayerRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGC_TFVoteKickPlayerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGC_TFVoteKickPlayerRequest* New() const final {
    return new CMsgGC_TFVoteKickPlayerRequest();
  }

  CMsgGC_TFVoteKickPlayerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGC_TFVoteKickPlayerRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgGC_TFVoteKickPlayerRequest& from);
  void MergeFrom(const CMsgGC_TFVoteKickPlayerRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGC_TFVoteKickPlayerRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGC_TFVoteKickPlayerRequest";
  }
  protected:
  explicit CMsgGC_TFVoteKickPlayerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetIdFieldNumber = 2,
    kVoterIdFieldNumber = 3,
    kMatchIdFieldNumber = 5,
    kReasonFieldNumber = 4,
  };
  // optional uint64 target_id = 2;
  bool has_target_id() const;
  private:
  bool _internal_has_target_id() const;
  public:
  void clear_target_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 target_id() const;
  void set_target_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_target_id() const;
  void _internal_set_target_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 voter_id = 3;
  bool has_voter_id() const;
  private:
  bool _internal_has_voter_id() const;
  public:
  void clear_voter_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 voter_id() const;
  void set_voter_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_voter_id() const;
  void _internal_set_voter_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 match_id = 5;
  bool has_match_id() const;
  private:
  bool _internal_has_match_id() const;
  public:
  void clear_match_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 match_id() const;
  void set_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_match_id() const;
  void _internal_set_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional .TFVoteKickReason reason = 4 [default = TFVoteKickReason_Other];
  bool has_reason() const;
  private:
  bool _internal_has_reason() const;
  public:
  void clear_reason();
  ::TFVoteKickReason reason() const;
  void set_reason(::TFVoteKickReason value);
  private:
  ::TFVoteKickReason _internal_reason() const;
  void _internal_set_reason(::TFVoteKickReason value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGC_TFVoteKickPlayerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 target_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 voter_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 match_id_;
  int reason_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGC_VoteKickPlayerRequestResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGC_VoteKickPlayerRequestResponse) */ {
 public:
  inline CMsgGC_VoteKickPlayerRequestResponse() : CMsgGC_VoteKickPlayerRequestResponse(nullptr) {}
  ~CMsgGC_VoteKickPlayerRequestResponse() override;
  explicit constexpr CMsgGC_VoteKickPlayerRequestResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGC_VoteKickPlayerRequestResponse(const CMsgGC_VoteKickPlayerRequestResponse& from);
  CMsgGC_VoteKickPlayerRequestResponse(CMsgGC_VoteKickPlayerRequestResponse&& from) noexcept
    : CMsgGC_VoteKickPlayerRequestResponse() {
    *this = ::std::move(from);
  }

  inline CMsgGC_VoteKickPlayerRequestResponse& operator=(const CMsgGC_VoteKickPlayerRequestResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGC_VoteKickPlayerRequestResponse& operator=(CMsgGC_VoteKickPlayerRequestResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGC_VoteKickPlayerRequestResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGC_VoteKickPlayerRequestResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgGC_VoteKickPlayerRequestResponse*>(
               &_CMsgGC_VoteKickPlayerRequestResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    155;

  friend void swap(CMsgGC_VoteKickPlayerRequestResponse& a, CMsgGC_VoteKickPlayerRequestResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGC_VoteKickPlayerRequestResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGC_VoteKickPlayerRequestResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGC_VoteKickPlayerRequestResponse* New() const final {
    return new CMsgGC_VoteKickPlayerRequestResponse();
  }

  CMsgGC_VoteKickPlayerRequestResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGC_VoteKickPlayerRequestResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgGC_VoteKickPlayerRequestResponse& from);
  void MergeFrom(const CMsgGC_VoteKickPlayerRequestResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGC_VoteKickPlayerRequestResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGC_VoteKickPlayerRequestResponse";
  }
  protected:
  explicit CMsgGC_VoteKickPlayerRequestResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAllowedFieldNumber = 1,
    kVoterInhibitFieldNumber = 3,
    kTargetInhibitFieldNumber = 4,
  };
  // optional bool allowed = 1;
  bool has_allowed() const;
  private:
  bool _internal_has_allowed() const;
  public:
  void clear_allowed();
  bool allowed() const;
  void set_allowed(bool value);
  private:
  bool _internal_allowed() const;
  void _internal_set_allowed(bool value);
  public:

  // optional bool voter_inhibit = 3;
  bool has_voter_inhibit() const;
  private:
  bool _internal_has_voter_inhibit() const;
  public:
  void clear_voter_inhibit();
  bool voter_inhibit() const;
  void set_voter_inhibit(bool value);
  private:
  bool _internal_voter_inhibit() const;
  void _internal_set_voter_inhibit(bool value);
  public:

  // optional bool target_inhibit = 4;
  bool has_target_inhibit() const;
  private:
  bool _internal_has_target_inhibit() const;
  public:
  void clear_target_inhibit();
  bool target_inhibit() const;
  void set_target_inhibit(bool value);
  private:
  bool _internal_target_inhibit() const;
  void _internal_set_target_inhibit(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGC_VoteKickPlayerRequestResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool allowed_;
  bool voter_inhibit_;
  bool target_inhibit_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGC_DailyCompetitiveStatsRollup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGC_DailyCompetitiveStatsRollup) */ {
 public:
  inline CMsgGC_DailyCompetitiveStatsRollup() : CMsgGC_DailyCompetitiveStatsRollup(nullptr) {}
  ~CMsgGC_DailyCompetitiveStatsRollup() override;
  explicit constexpr CMsgGC_DailyCompetitiveStatsRollup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGC_DailyCompetitiveStatsRollup(const CMsgGC_DailyCompetitiveStatsRollup& from);
  CMsgGC_DailyCompetitiveStatsRollup(CMsgGC_DailyCompetitiveStatsRollup&& from) noexcept
    : CMsgGC_DailyCompetitiveStatsRollup() {
    *this = ::std::move(from);
  }

  inline CMsgGC_DailyCompetitiveStatsRollup& operator=(const CMsgGC_DailyCompetitiveStatsRollup& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGC_DailyCompetitiveStatsRollup& operator=(CMsgGC_DailyCompetitiveStatsRollup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGC_DailyCompetitiveStatsRollup& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGC_DailyCompetitiveStatsRollup* internal_default_instance() {
    return reinterpret_cast<const CMsgGC_DailyCompetitiveStatsRollup*>(
               &_CMsgGC_DailyCompetitiveStatsRollup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    156;

  friend void swap(CMsgGC_DailyCompetitiveStatsRollup& a, CMsgGC_DailyCompetitiveStatsRollup& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGC_DailyCompetitiveStatsRollup* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGC_DailyCompetitiveStatsRollup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGC_DailyCompetitiveStatsRollup* New() const final {
    return new CMsgGC_DailyCompetitiveStatsRollup();
  }

  CMsgGC_DailyCompetitiveStatsRollup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGC_DailyCompetitiveStatsRollup>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgGC_DailyCompetitiveStatsRollup& from);
  void MergeFrom(const CMsgGC_DailyCompetitiveStatsRollup& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGC_DailyCompetitiveStatsRollup* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGC_DailyCompetitiveStatsRollup";
  }
  protected:
  explicit CMsgGC_DailyCompetitiveStatsRollup(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgGC_DailyCompetitiveStatsRollup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGC_DailyCompetitiveStatsRollup_Response.RankBucketEntry) */ {
 public:
  inline CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry() : CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry(nullptr) {}
  ~CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry() override;
  explicit constexpr CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry(const CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry& from);
  CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry(CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry&& from) noexcept
    : CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry() {
    *this = ::std::move(from);
  }

  inline CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry& operator=(const CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry& operator=(CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry* internal_default_instance() {
    return reinterpret_cast<const CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry*>(
               &_CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    157;

  friend void swap(CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry& a, CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry* New() const final {
    return new CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry();
  }

  CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry& from);
  void MergeFrom(const CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGC_DailyCompetitiveStatsRollup_Response.RankBucketEntry";
  }
  protected:
  explicit CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRankFieldNumber = 1,
    kRecordsFieldNumber = 2,
    kAvgScoreFieldNumber = 3,
    kStdevScoreFieldNumber = 4,
    kAvgKillsFieldNumber = 5,
    kStdevKillsFieldNumber = 6,
    kAvgDamageFieldNumber = 7,
    kStdevDamageFieldNumber = 8,
    kAvgHealingFieldNumber = 9,
    kStdevHealingFieldNumber = 10,
    kAvgSupportFieldNumber = 11,
    kStdevSupportFieldNumber = 12,
  };
  // optional uint32 rank = 1;
  bool has_rank() const;
  private:
  bool _internal_has_rank() const;
  public:
  void clear_rank();
  ::PROTOBUF_NAMESPACE_ID::uint32 rank() const;
  void set_rank(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rank() const;
  void _internal_set_rank(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 records = 2;
  bool has_records() const;
  private:
  bool _internal_has_records() const;
  public:
  void clear_records();
  ::PROTOBUF_NAMESPACE_ID::uint32 records() const;
  void set_records(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_records() const;
  void _internal_set_records(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 avg_score = 3;
  bool has_avg_score() const;
  private:
  bool _internal_has_avg_score() const;
  public:
  void clear_avg_score();
  ::PROTOBUF_NAMESPACE_ID::uint32 avg_score() const;
  void set_avg_score(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_avg_score() const;
  void _internal_set_avg_score(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 stdev_score = 4;
  bool has_stdev_score() const;
  private:
  bool _internal_has_stdev_score() const;
  public:
  void clear_stdev_score();
  ::PROTOBUF_NAMESPACE_ID::uint32 stdev_score() const;
  void set_stdev_score(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_stdev_score() const;
  void _internal_set_stdev_score(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 avg_kills = 5;
  bool has_avg_kills() const;
  private:
  bool _internal_has_avg_kills() const;
  public:
  void clear_avg_kills();
  ::PROTOBUF_NAMESPACE_ID::uint32 avg_kills() const;
  void set_avg_kills(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_avg_kills() const;
  void _internal_set_avg_kills(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 stdev_kills = 6;
  bool has_stdev_kills() const;
  private:
  bool _internal_has_stdev_kills() const;
  public:
  void clear_stdev_kills();
  ::PROTOBUF_NAMESPACE_ID::uint32 stdev_kills() const;
  void set_stdev_kills(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_stdev_kills() const;
  void _internal_set_stdev_kills(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 avg_damage = 7;
  bool has_avg_damage() const;
  private:
  bool _internal_has_avg_damage() const;
  public:
  void clear_avg_damage();
  ::PROTOBUF_NAMESPACE_ID::uint32 avg_damage() const;
  void set_avg_damage(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_avg_damage() const;
  void _internal_set_avg_damage(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 stdev_damage = 8;
  bool has_stdev_damage() const;
  private:
  bool _internal_has_stdev_damage() const;
  public:
  void clear_stdev_damage();
  ::PROTOBUF_NAMESPACE_ID::uint32 stdev_damage() const;
  void set_stdev_damage(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_stdev_damage() const;
  void _internal_set_stdev_damage(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 avg_healing = 9;
  bool has_avg_healing() const;
  private:
  bool _internal_has_avg_healing() const;
  public:
  void clear_avg_healing();
  ::PROTOBUF_NAMESPACE_ID::uint32 avg_healing() const;
  void set_avg_healing(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_avg_healing() const;
  void _internal_set_avg_healing(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 stdev_healing = 10;
  bool has_stdev_healing() const;
  private:
  bool _internal_has_stdev_healing() const;
  public:
  void clear_stdev_healing();
  ::PROTOBUF_NAMESPACE_ID::uint32 stdev_healing() const;
  void set_stdev_healing(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_stdev_healing() const;
  void _internal_set_stdev_healing(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 avg_support = 11;
  bool has_avg_support() const;
  private:
  bool _internal_has_avg_support() const;
  public:
  void clear_avg_support();
  ::PROTOBUF_NAMESPACE_ID::uint32 avg_support() const;
  void set_avg_support(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_avg_support() const;
  void _internal_set_avg_support(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 stdev_support = 12;
  bool has_stdev_support() const;
  private:
  bool _internal_has_stdev_support() const;
  public:
  void clear_stdev_support();
  ::PROTOBUF_NAMESPACE_ID::uint32 stdev_support() const;
  void set_stdev_support(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_stdev_support() const;
  void _internal_set_stdev_support(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGC_DailyCompetitiveStatsRollup_Response.RankBucketEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rank_;
  ::PROTOBUF_NAMESPACE_ID::uint32 records_;
  ::PROTOBUF_NAMESPACE_ID::uint32 avg_score_;
  ::PROTOBUF_NAMESPACE_ID::uint32 stdev_score_;
  ::PROTOBUF_NAMESPACE_ID::uint32 avg_kills_;
  ::PROTOBUF_NAMESPACE_ID::uint32 stdev_kills_;
  ::PROTOBUF_NAMESPACE_ID::uint32 avg_damage_;
  ::PROTOBUF_NAMESPACE_ID::uint32 stdev_damage_;
  ::PROTOBUF_NAMESPACE_ID::uint32 avg_healing_;
  ::PROTOBUF_NAMESPACE_ID::uint32 stdev_healing_;
  ::PROTOBUF_NAMESPACE_ID::uint32 avg_support_;
  ::PROTOBUF_NAMESPACE_ID::uint32 stdev_support_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGC_DailyCompetitiveStatsRollup_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGC_DailyCompetitiveStatsRollup_Response) */ {
 public:
  inline CMsgGC_DailyCompetitiveStatsRollup_Response() : CMsgGC_DailyCompetitiveStatsRollup_Response(nullptr) {}
  ~CMsgGC_DailyCompetitiveStatsRollup_Response() override;
  explicit constexpr CMsgGC_DailyCompetitiveStatsRollup_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGC_DailyCompetitiveStatsRollup_Response(const CMsgGC_DailyCompetitiveStatsRollup_Response& from);
  CMsgGC_DailyCompetitiveStatsRollup_Response(CMsgGC_DailyCompetitiveStatsRollup_Response&& from) noexcept
    : CMsgGC_DailyCompetitiveStatsRollup_Response() {
    *this = ::std::move(from);
  }

  inline CMsgGC_DailyCompetitiveStatsRollup_Response& operator=(const CMsgGC_DailyCompetitiveStatsRollup_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGC_DailyCompetitiveStatsRollup_Response& operator=(CMsgGC_DailyCompetitiveStatsRollup_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGC_DailyCompetitiveStatsRollup_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGC_DailyCompetitiveStatsRollup_Response* internal_default_instance() {
    return reinterpret_cast<const CMsgGC_DailyCompetitiveStatsRollup_Response*>(
               &_CMsgGC_DailyCompetitiveStatsRollup_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    158;

  friend void swap(CMsgGC_DailyCompetitiveStatsRollup_Response& a, CMsgGC_DailyCompetitiveStatsRollup_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGC_DailyCompetitiveStatsRollup_Response* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGC_DailyCompetitiveStatsRollup_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGC_DailyCompetitiveStatsRollup_Response* New() const final {
    return new CMsgGC_DailyCompetitiveStatsRollup_Response();
  }

  CMsgGC_DailyCompetitiveStatsRollup_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGC_DailyCompetitiveStatsRollup_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgGC_DailyCompetitiveStatsRollup_Response& from);
  void MergeFrom(const CMsgGC_DailyCompetitiveStatsRollup_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGC_DailyCompetitiveStatsRollup_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGC_DailyCompetitiveStatsRollup_Response";
  }
  protected:
  explicit CMsgGC_DailyCompetitiveStatsRollup_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry RankBucketEntry;

  // accessors -------------------------------------------------------

  enum : int {
    kRankdataFieldNumber = 1,
  };
  // repeated .CMsgGC_DailyCompetitiveStatsRollup_Response.RankBucketEntry rankdata = 1;
  int rankdata_size() const;
  private:
  int _internal_rankdata_size() const;
  public:
  void clear_rankdata();
  ::CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry* mutable_rankdata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry >*
      mutable_rankdata();
  private:
  const ::CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry& _internal_rankdata(int index) const;
  ::CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry* _internal_add_rankdata();
  public:
  const ::CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry& rankdata(int index) const;
  ::CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry* add_rankdata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry >&
      rankdata() const;

  // @@protoc_insertion_point(class_scope:CMsgGC_DailyCompetitiveStatsRollup_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry > rankdata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGC_ReportPlayer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGC_ReportPlayer) */ {
 public:
  inline CMsgGC_ReportPlayer() : CMsgGC_ReportPlayer(nullptr) {}
  ~CMsgGC_ReportPlayer() override;
  explicit constexpr CMsgGC_ReportPlayer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGC_ReportPlayer(const CMsgGC_ReportPlayer& from);
  CMsgGC_ReportPlayer(CMsgGC_ReportPlayer&& from) noexcept
    : CMsgGC_ReportPlayer() {
    *this = ::std::move(from);
  }

  inline CMsgGC_ReportPlayer& operator=(const CMsgGC_ReportPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGC_ReportPlayer& operator=(CMsgGC_ReportPlayer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGC_ReportPlayer& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGC_ReportPlayer* internal_default_instance() {
    return reinterpret_cast<const CMsgGC_ReportPlayer*>(
               &_CMsgGC_ReportPlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    159;

  friend void swap(CMsgGC_ReportPlayer& a, CMsgGC_ReportPlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGC_ReportPlayer* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGC_ReportPlayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGC_ReportPlayer* New() const final {
    return new CMsgGC_ReportPlayer();
  }

  CMsgGC_ReportPlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGC_ReportPlayer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgGC_ReportPlayer& from);
  void MergeFrom(const CMsgGC_ReportPlayer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGC_ReportPlayer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGC_ReportPlayer";
  }
  protected:
  explicit CMsgGC_ReportPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgGC_ReportPlayer_EReason EReason;
  static constexpr EReason kReason_INVALID =
    CMsgGC_ReportPlayer_EReason_kReason_INVALID;
  static constexpr EReason kReason_CHEATING =
    CMsgGC_ReportPlayer_EReason_kReason_CHEATING;
  static constexpr EReason kReason_IDLE =
    CMsgGC_ReportPlayer_EReason_kReason_IDLE;
  static constexpr EReason kReason_HARASSMENT =
    CMsgGC_ReportPlayer_EReason_kReason_HARASSMENT;
  static constexpr EReason kReason_GRIEFING =
    CMsgGC_ReportPlayer_EReason_kReason_GRIEFING;
  static constexpr EReason kReason_COUNT =
    CMsgGC_ReportPlayer_EReason_kReason_COUNT;
  static inline bool EReason_IsValid(int value) {
    return CMsgGC_ReportPlayer_EReason_IsValid(value);
  }
  static constexpr EReason EReason_MIN =
    CMsgGC_ReportPlayer_EReason_EReason_MIN;
  static constexpr EReason EReason_MAX =
    CMsgGC_ReportPlayer_EReason_EReason_MAX;
  static constexpr int EReason_ARRAYSIZE =
    CMsgGC_ReportPlayer_EReason_EReason_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EReason_descriptor() {
    return CMsgGC_ReportPlayer_EReason_descriptor();
  }
  template<typename T>
  static inline const std::string& EReason_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EReason>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EReason_Name.");
    return CMsgGC_ReportPlayer_EReason_Name(enum_t_value);
  }
  static inline bool EReason_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EReason* value) {
    return CMsgGC_ReportPlayer_EReason_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdTargetFieldNumber = 1,
    kReasonFieldNumber = 2,
  };
  // optional uint32 account_id_target = 1;
  bool has_account_id_target() const;
  private:
  bool _internal_has_account_id_target() const;
  public:
  void clear_account_id_target();
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id_target() const;
  void set_account_id_target(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_account_id_target() const;
  void _internal_set_account_id_target(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .CMsgGC_ReportPlayer.EReason reason = 2 [default = kReason_INVALID];
  bool has_reason() const;
  private:
  bool _internal_has_reason() const;
  public:
  void clear_reason();
  ::CMsgGC_ReportPlayer_EReason reason() const;
  void set_reason(::CMsgGC_ReportPlayer_EReason value);
  private:
  ::CMsgGC_ReportPlayer_EReason _internal_reason() const;
  void _internal_set_reason(::CMsgGC_ReportPlayer_EReason value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGC_ReportPlayer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id_target_;
  int reason_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CSOTFMatchResultPlayerStats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSOTFMatchResultPlayerStats) */ {
 public:
  inline CSOTFMatchResultPlayerStats() : CSOTFMatchResultPlayerStats(nullptr) {}
  ~CSOTFMatchResultPlayerStats() override;
  explicit constexpr CSOTFMatchResultPlayerStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSOTFMatchResultPlayerStats(const CSOTFMatchResultPlayerStats& from);
  CSOTFMatchResultPlayerStats(CSOTFMatchResultPlayerStats&& from) noexcept
    : CSOTFMatchResultPlayerStats() {
    *this = ::std::move(from);
  }

  inline CSOTFMatchResultPlayerStats& operator=(const CSOTFMatchResultPlayerStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSOTFMatchResultPlayerStats& operator=(CSOTFMatchResultPlayerStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSOTFMatchResultPlayerStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSOTFMatchResultPlayerStats* internal_default_instance() {
    return reinterpret_cast<const CSOTFMatchResultPlayerStats*>(
               &_CSOTFMatchResultPlayerStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    160;

  friend void swap(CSOTFMatchResultPlayerStats& a, CSOTFMatchResultPlayerStats& b) {
    a.Swap(&b);
  }
  inline void Swap(CSOTFMatchResultPlayerStats* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSOTFMatchResultPlayerStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSOTFMatchResultPlayerStats* New() const final {
    return new CSOTFMatchResultPlayerStats();
  }

  CSOTFMatchResultPlayerStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSOTFMatchResultPlayerStats>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSOTFMatchResultPlayerStats& from);
  void MergeFrom(const CSOTFMatchResultPlayerStats& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSOTFMatchResultPlayerStats* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSOTFMatchResultPlayerStats";
  }
  protected:
  explicit CSOTFMatchResultPlayerStats(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatchIdFieldNumber = 1,
    kAccountIdFieldNumber = 2,
    kMatchGroupFieldNumber = 3,
    kEndtimeFieldNumber = 4,
    kSeasonIdFieldNumber = 5,
    kStatusFieldNumber = 6,
    kOriginalPartyIdFieldNumber = 7,
    kTeamFieldNumber = 8,
    kScoreFieldNumber = 9,
    kPingFieldNumber = 10,
    kFlagsFieldNumber = 11,
    kDisplayRatingFieldNumber = 12,
    kDisplayRatingChangeFieldNumber = 13,
    kRankFieldNumber = 14,
    kClassesPlayedFieldNumber = 15,
    kKillsFieldNumber = 16,
    kDeathsFieldNumber = 17,
    kDamageFieldNumber = 18,
    kHealingFieldNumber = 19,
    kSupportFieldNumber = 20,
    kScoreMedalFieldNumber = 21,
    kKillsMedalFieldNumber = 22,
    kDamageMedalFieldNumber = 23,
    kHealingMedalFieldNumber = 24,
    kSupportMedalFieldNumber = 25,
    kMapIndexFieldNumber = 26,
    kWinningTeamFieldNumber = 27,
  };
  // optional uint64 match_id = 1 [(.key_field) = true];
  bool has_match_id() const;
  private:
  bool _internal_has_match_id() const;
  public:
  void clear_match_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 match_id() const;
  void set_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_match_id() const;
  void _internal_set_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 account_id = 2 [(.key_field) = true];
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id() const;
  void set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_account_id() const;
  void _internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 match_group = 3 [(.key_field) = true];
  bool has_match_group() const;
  private:
  bool _internal_has_match_group() const;
  public:
  void clear_match_group();
  ::PROTOBUF_NAMESPACE_ID::int32 match_group() const;
  void set_match_group(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_match_group() const;
  void _internal_set_match_group(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint32 endtime = 4;
  bool has_endtime() const;
  private:
  bool _internal_has_endtime() const;
  public:
  void clear_endtime();
  ::PROTOBUF_NAMESPACE_ID::uint32 endtime() const;
  void set_endtime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_endtime() const;
  void _internal_set_endtime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 season_id = 5;
  bool has_season_id() const;
  private:
  bool _internal_has_season_id() const;
  public:
  void clear_season_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 season_id() const;
  void set_season_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_season_id() const;
  void _internal_set_season_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 status = 6;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::uint32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 original_party_id = 7;
  bool has_original_party_id() const;
  private:
  bool _internal_has_original_party_id() const;
  public:
  void clear_original_party_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 original_party_id() const;
  void set_original_party_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_original_party_id() const;
  void _internal_set_original_party_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 team = 8;
  bool has_team() const;
  private:
  bool _internal_has_team() const;
  public:
  void clear_team();
  ::PROTOBUF_NAMESPACE_ID::uint32 team() const;
  void set_team(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_team() const;
  void _internal_set_team(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 score = 9;
  bool has_score() const;
  private:
  bool _internal_has_score() const;
  public:
  void clear_score();
  ::PROTOBUF_NAMESPACE_ID::uint32 score() const;
  void set_score(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_score() const;
  void _internal_set_score(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 ping = 10;
  bool has_ping() const;
  private:
  bool _internal_has_ping() const;
  public:
  void clear_ping();
  ::PROTOBUF_NAMESPACE_ID::uint32 ping() const;
  void set_ping(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ping() const;
  void _internal_set_ping(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 flags = 11;
  bool has_flags() const;
  private:
  bool _internal_has_flags() const;
  public:
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_flags() const;
  void _internal_set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 display_rating = 12;
  bool has_display_rating() const;
  private:
  bool _internal_has_display_rating() const;
  public:
  void clear_display_rating();
  ::PROTOBUF_NAMESPACE_ID::uint32 display_rating() const;
  void set_display_rating(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_display_rating() const;
  void _internal_set_display_rating(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 display_rating_change = 13;
  bool has_display_rating_change() const;
  private:
  bool _internal_has_display_rating_change() const;
  public:
  void clear_display_rating_change();
  ::PROTOBUF_NAMESPACE_ID::int32 display_rating_change() const;
  void set_display_rating_change(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_display_rating_change() const;
  void _internal_set_display_rating_change(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint32 rank = 14;
  bool has_rank() const;
  private:
  bool _internal_has_rank() const;
  public:
  void clear_rank();
  ::PROTOBUF_NAMESPACE_ID::uint32 rank() const;
  void set_rank(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rank() const;
  void _internal_set_rank(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 classes_played = 15;
  bool has_classes_played() const;
  private:
  bool _internal_has_classes_played() const;
  public:
  void clear_classes_played();
  ::PROTOBUF_NAMESPACE_ID::uint32 classes_played() const;
  void set_classes_played(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_classes_played() const;
  void _internal_set_classes_played(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 kills = 16;
  bool has_kills() const;
  private:
  bool _internal_has_kills() const;
  public:
  void clear_kills();
  ::PROTOBUF_NAMESPACE_ID::uint32 kills() const;
  void set_kills(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_kills() const;
  void _internal_set_kills(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 deaths = 17;
  bool has_deaths() const;
  private:
  bool _internal_has_deaths() const;
  public:
  void clear_deaths();
  ::PROTOBUF_NAMESPACE_ID::uint32 deaths() const;
  void set_deaths(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_deaths() const;
  void _internal_set_deaths(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 damage = 18;
  bool has_damage() const;
  private:
  bool _internal_has_damage() const;
  public:
  void clear_damage();
  ::PROTOBUF_NAMESPACE_ID::uint32 damage() const;
  void set_damage(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_damage() const;
  void _internal_set_damage(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 healing = 19;
  bool has_healing() const;
  private:
  bool _internal_has_healing() const;
  public:
  void clear_healing();
  ::PROTOBUF_NAMESPACE_ID::uint32 healing() const;
  void set_healing(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_healing() const;
  void _internal_set_healing(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 support = 20;
  bool has_support() const;
  private:
  bool _internal_has_support() const;
  public:
  void clear_support();
  ::PROTOBUF_NAMESPACE_ID::uint32 support() const;
  void set_support(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_support() const;
  void _internal_set_support(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 score_medal = 21;
  bool has_score_medal() const;
  private:
  bool _internal_has_score_medal() const;
  public:
  void clear_score_medal();
  ::PROTOBUF_NAMESPACE_ID::uint32 score_medal() const;
  void set_score_medal(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_score_medal() const;
  void _internal_set_score_medal(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 kills_medal = 22;
  bool has_kills_medal() const;
  private:
  bool _internal_has_kills_medal() const;
  public:
  void clear_kills_medal();
  ::PROTOBUF_NAMESPACE_ID::uint32 kills_medal() const;
  void set_kills_medal(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_kills_medal() const;
  void _internal_set_kills_medal(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 damage_medal = 23;
  bool has_damage_medal() const;
  private:
  bool _internal_has_damage_medal() const;
  public:
  void clear_damage_medal();
  ::PROTOBUF_NAMESPACE_ID::uint32 damage_medal() const;
  void set_damage_medal(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_damage_medal() const;
  void _internal_set_damage_medal(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 healing_medal = 24;
  bool has_healing_medal() const;
  private:
  bool _internal_has_healing_medal() const;
  public:
  void clear_healing_medal();
  ::PROTOBUF_NAMESPACE_ID::uint32 healing_medal() const;
  void set_healing_medal(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_healing_medal() const;
  void _internal_set_healing_medal(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 support_medal = 25;
  bool has_support_medal() const;
  private:
  bool _internal_has_support_medal() const;
  public:
  void clear_support_medal();
  ::PROTOBUF_NAMESPACE_ID::uint32 support_medal() const;
  void set_support_medal(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_support_medal() const;
  void _internal_set_support_medal(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 map_index = 26;
  bool has_map_index() const;
  private:
  bool _internal_has_map_index() const;
  public:
  void clear_map_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 map_index() const;
  void set_map_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_map_index() const;
  void _internal_set_map_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 winning_team = 27;
  bool has_winning_team() const;
  private:
  bool _internal_has_winning_team() const;
  public:
  void clear_winning_team();
  ::PROTOBUF_NAMESPACE_ID::uint32 winning_team() const;
  void set_winning_team(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_winning_team() const;
  void _internal_set_winning_team(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CSOTFMatchResultPlayerStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 match_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 match_group_;
  ::PROTOBUF_NAMESPACE_ID::uint32 endtime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 season_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 status_;
  ::PROTOBUF_NAMESPACE_ID::uint32 original_party_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 team_;
  ::PROTOBUF_NAMESPACE_ID::uint32 score_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ping_;
  ::PROTOBUF_NAMESPACE_ID::uint32 flags_;
  ::PROTOBUF_NAMESPACE_ID::uint32 display_rating_;
  ::PROTOBUF_NAMESPACE_ID::int32 display_rating_change_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rank_;
  ::PROTOBUF_NAMESPACE_ID::uint32 classes_played_;
  ::PROTOBUF_NAMESPACE_ID::uint32 kills_;
  ::PROTOBUF_NAMESPACE_ID::uint32 deaths_;
  ::PROTOBUF_NAMESPACE_ID::uint32 damage_;
  ::PROTOBUF_NAMESPACE_ID::uint32 healing_;
  ::PROTOBUF_NAMESPACE_ID::uint32 support_;
  ::PROTOBUF_NAMESPACE_ID::uint32 score_medal_;
  ::PROTOBUF_NAMESPACE_ID::uint32 kills_medal_;
  ::PROTOBUF_NAMESPACE_ID::uint32 damage_medal_;
  ::PROTOBUF_NAMESPACE_ID::uint32 healing_medal_;
  ::PROTOBUF_NAMESPACE_ID::uint32 support_medal_;
  ::PROTOBUF_NAMESPACE_ID::uint32 map_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 winning_team_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCRequestMatchMakerStats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCRequestMatchMakerStats) */ {
 public:
  inline CMsgGCRequestMatchMakerStats() : CMsgGCRequestMatchMakerStats(nullptr) {}
  ~CMsgGCRequestMatchMakerStats() override;
  explicit constexpr CMsgGCRequestMatchMakerStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCRequestMatchMakerStats(const CMsgGCRequestMatchMakerStats& from);
  CMsgGCRequestMatchMakerStats(CMsgGCRequestMatchMakerStats&& from) noexcept
    : CMsgGCRequestMatchMakerStats() {
    *this = ::std::move(from);
  }

  inline CMsgGCRequestMatchMakerStats& operator=(const CMsgGCRequestMatchMakerStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCRequestMatchMakerStats& operator=(CMsgGCRequestMatchMakerStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCRequestMatchMakerStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCRequestMatchMakerStats* internal_default_instance() {
    return reinterpret_cast<const CMsgGCRequestMatchMakerStats*>(
               &_CMsgGCRequestMatchMakerStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    161;

  friend void swap(CMsgGCRequestMatchMakerStats& a, CMsgGCRequestMatchMakerStats& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCRequestMatchMakerStats* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCRequestMatchMakerStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCRequestMatchMakerStats* New() const final {
    return new CMsgGCRequestMatchMakerStats();
  }

  CMsgGCRequestMatchMakerStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCRequestMatchMakerStats>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgGCRequestMatchMakerStats& from);
  void MergeFrom(const CMsgGCRequestMatchMakerStats& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCRequestMatchMakerStats* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCRequestMatchMakerStats";
  }
  protected:
  explicit CMsgGCRequestMatchMakerStats(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgGCRequestMatchMakerStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCDataCenterPopulation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCDataCenterPopulation) */ {
 public:
  inline CMsgGCDataCenterPopulation() : CMsgGCDataCenterPopulation(nullptr) {}
  ~CMsgGCDataCenterPopulation() override;
  explicit constexpr CMsgGCDataCenterPopulation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCDataCenterPopulation(const CMsgGCDataCenterPopulation& from);
  CMsgGCDataCenterPopulation(CMsgGCDataCenterPopulation&& from) noexcept
    : CMsgGCDataCenterPopulation() {
    *this = ::std::move(from);
  }

  inline CMsgGCDataCenterPopulation& operator=(const CMsgGCDataCenterPopulation& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCDataCenterPopulation& operator=(CMsgGCDataCenterPopulation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCDataCenterPopulation& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCDataCenterPopulation* internal_default_instance() {
    return reinterpret_cast<const CMsgGCDataCenterPopulation*>(
               &_CMsgGCDataCenterPopulation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    162;

  friend void swap(CMsgGCDataCenterPopulation& a, CMsgGCDataCenterPopulation& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCDataCenterPopulation* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCDataCenterPopulation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCDataCenterPopulation* New() const final {
    return new CMsgGCDataCenterPopulation();
  }

  CMsgGCDataCenterPopulation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCDataCenterPopulation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgGCDataCenterPopulation& from);
  void MergeFrom(const CMsgGCDataCenterPopulation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCDataCenterPopulation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCDataCenterPopulation";
  }
  protected:
  explicit CMsgGCDataCenterPopulation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kHealthRatioFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional float health_ratio = 2;
  bool has_health_ratio() const;
  private:
  bool _internal_has_health_ratio() const;
  public:
  void clear_health_ratio();
  float health_ratio() const;
  void set_health_ratio(float value);
  private:
  float _internal_health_ratio() const;
  void _internal_set_health_ratio(float value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCDataCenterPopulation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  float health_ratio_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCMatchGroupDataCenterPopulation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCMatchGroupDataCenterPopulation) */ {
 public:
  inline CMsgGCMatchGroupDataCenterPopulation() : CMsgGCMatchGroupDataCenterPopulation(nullptr) {}
  ~CMsgGCMatchGroupDataCenterPopulation() override;
  explicit constexpr CMsgGCMatchGroupDataCenterPopulation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCMatchGroupDataCenterPopulation(const CMsgGCMatchGroupDataCenterPopulation& from);
  CMsgGCMatchGroupDataCenterPopulation(CMsgGCMatchGroupDataCenterPopulation&& from) noexcept
    : CMsgGCMatchGroupDataCenterPopulation() {
    *this = ::std::move(from);
  }

  inline CMsgGCMatchGroupDataCenterPopulation& operator=(const CMsgGCMatchGroupDataCenterPopulation& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCMatchGroupDataCenterPopulation& operator=(CMsgGCMatchGroupDataCenterPopulation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCMatchGroupDataCenterPopulation& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCMatchGroupDataCenterPopulation* internal_default_instance() {
    return reinterpret_cast<const CMsgGCMatchGroupDataCenterPopulation*>(
               &_CMsgGCMatchGroupDataCenterPopulation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    163;

  friend void swap(CMsgGCMatchGroupDataCenterPopulation& a, CMsgGCMatchGroupDataCenterPopulation& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCMatchGroupDataCenterPopulation* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCMatchGroupDataCenterPopulation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCMatchGroupDataCenterPopulation* New() const final {
    return new CMsgGCMatchGroupDataCenterPopulation();
  }

  CMsgGCMatchGroupDataCenterPopulation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCMatchGroupDataCenterPopulation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgGCMatchGroupDataCenterPopulation& from);
  void MergeFrom(const CMsgGCMatchGroupDataCenterPopulation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCMatchGroupDataCenterPopulation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCMatchGroupDataCenterPopulation";
  }
  protected:
  explicit CMsgGCMatchGroupDataCenterPopulation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataCenterPopulationFieldNumber = 1,
  };
  // repeated .CMsgGCDataCenterPopulation data_center_population = 1;
  int data_center_population_size() const;
  private:
  int _internal_data_center_population_size() const;
  public:
  void clear_data_center_population();
  ::CMsgGCDataCenterPopulation* mutable_data_center_population(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCDataCenterPopulation >*
      mutable_data_center_population();
  private:
  const ::CMsgGCDataCenterPopulation& _internal_data_center_population(int index) const;
  ::CMsgGCDataCenterPopulation* _internal_add_data_center_population();
  public:
  const ::CMsgGCDataCenterPopulation& data_center_population(int index) const;
  ::CMsgGCDataCenterPopulation* add_data_center_population();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCDataCenterPopulation >&
      data_center_population() const;

  // @@protoc_insertion_point(class_scope:CMsgGCMatchGroupDataCenterPopulation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCDataCenterPopulation > data_center_population_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCMatchMakerStatsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCMatchMakerStatsResponse) */ {
 public:
  inline CMsgGCMatchMakerStatsResponse() : CMsgGCMatchMakerStatsResponse(nullptr) {}
  ~CMsgGCMatchMakerStatsResponse() override;
  explicit constexpr CMsgGCMatchMakerStatsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCMatchMakerStatsResponse(const CMsgGCMatchMakerStatsResponse& from);
  CMsgGCMatchMakerStatsResponse(CMsgGCMatchMakerStatsResponse&& from) noexcept
    : CMsgGCMatchMakerStatsResponse() {
    *this = ::std::move(from);
  }

  inline CMsgGCMatchMakerStatsResponse& operator=(const CMsgGCMatchMakerStatsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCMatchMakerStatsResponse& operator=(CMsgGCMatchMakerStatsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCMatchMakerStatsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCMatchMakerStatsResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgGCMatchMakerStatsResponse*>(
               &_CMsgGCMatchMakerStatsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    164;

  friend void swap(CMsgGCMatchMakerStatsResponse& a, CMsgGCMatchMakerStatsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCMatchMakerStatsResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCMatchMakerStatsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCMatchMakerStatsResponse* New() const final {
    return new CMsgGCMatchMakerStatsResponse();
  }

  CMsgGCMatchMakerStatsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCMatchMakerStatsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgGCMatchMakerStatsResponse& from);
  void MergeFrom(const CMsgGCMatchMakerStatsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCMatchMakerStatsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCMatchMakerStatsResponse";
  }
  protected:
  explicit CMsgGCMatchMakerStatsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapCountFieldNumber = 1,
    kMatchgroupDataCenterPopulationFieldNumber = 2,
  };
  // repeated uint32 map_count = 1;
  int map_count_size() const;
  private:
  int _internal_map_count_size() const;
  public:
  void clear_map_count();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_map_count(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_map_count() const;
  void _internal_add_map_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_map_count();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 map_count(int index) const;
  void set_map_count(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_map_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      map_count() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_map_count();

  // repeated .CMsgGCMatchGroupDataCenterPopulation matchgroup_data_center_population = 2;
  int matchgroup_data_center_population_size() const;
  private:
  int _internal_matchgroup_data_center_population_size() const;
  public:
  void clear_matchgroup_data_center_population();
  ::CMsgGCMatchGroupDataCenterPopulation* mutable_matchgroup_data_center_population(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCMatchGroupDataCenterPopulation >*
      mutable_matchgroup_data_center_population();
  private:
  const ::CMsgGCMatchGroupDataCenterPopulation& _internal_matchgroup_data_center_population(int index) const;
  ::CMsgGCMatchGroupDataCenterPopulation* _internal_add_matchgroup_data_center_population();
  public:
  const ::CMsgGCMatchGroupDataCenterPopulation& matchgroup_data_center_population(int index) const;
  ::CMsgGCMatchGroupDataCenterPopulation* add_matchgroup_data_center_population();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCMatchGroupDataCenterPopulation >&
      matchgroup_data_center_population() const;

  // @@protoc_insertion_point(class_scope:CMsgGCMatchMakerStatsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > map_count_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCMatchGroupDataCenterPopulation > matchgroup_data_center_population_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCMatchHistoryLoad final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCMatchHistoryLoad) */ {
 public:
  inline CMsgGCMatchHistoryLoad() : CMsgGCMatchHistoryLoad(nullptr) {}
  ~CMsgGCMatchHistoryLoad() override;
  explicit constexpr CMsgGCMatchHistoryLoad(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCMatchHistoryLoad(const CMsgGCMatchHistoryLoad& from);
  CMsgGCMatchHistoryLoad(CMsgGCMatchHistoryLoad&& from) noexcept
    : CMsgGCMatchHistoryLoad() {
    *this = ::std::move(from);
  }

  inline CMsgGCMatchHistoryLoad& operator=(const CMsgGCMatchHistoryLoad& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCMatchHistoryLoad& operator=(CMsgGCMatchHistoryLoad&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCMatchHistoryLoad& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCMatchHistoryLoad* internal_default_instance() {
    return reinterpret_cast<const CMsgGCMatchHistoryLoad*>(
               &_CMsgGCMatchHistoryLoad_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    165;

  friend void swap(CMsgGCMatchHistoryLoad& a, CMsgGCMatchHistoryLoad& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCMatchHistoryLoad* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCMatchHistoryLoad* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCMatchHistoryLoad* New() const final {
    return new CMsgGCMatchHistoryLoad();
  }

  CMsgGCMatchHistoryLoad* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCMatchHistoryLoad>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgGCMatchHistoryLoad& from);
  void MergeFrom(const CMsgGCMatchHistoryLoad& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCMatchHistoryLoad* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCMatchHistoryLoad";
  }
  protected:
  explicit CMsgGCMatchHistoryLoad(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatchGroupFieldNumber = 1,
  };
  // optional .ETFMatchGroup match_group = 1 [default = k_eTFMatchGroup_Invalid];
  bool has_match_group() const;
  private:
  bool _internal_has_match_group() const;
  public:
  void clear_match_group();
  ::ETFMatchGroup match_group() const;
  void set_match_group(::ETFMatchGroup value);
  private:
  ::ETFMatchGroup _internal_match_group() const;
  void _internal_set_match_group(::ETFMatchGroup value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCMatchHistoryLoad)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int match_group_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCDataCenterPing_Update_PingEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCDataCenterPing_Update.PingEntry) */ {
 public:
  inline CMsgGCDataCenterPing_Update_PingEntry() : CMsgGCDataCenterPing_Update_PingEntry(nullptr) {}
  ~CMsgGCDataCenterPing_Update_PingEntry() override;
  explicit constexpr CMsgGCDataCenterPing_Update_PingEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCDataCenterPing_Update_PingEntry(const CMsgGCDataCenterPing_Update_PingEntry& from);
  CMsgGCDataCenterPing_Update_PingEntry(CMsgGCDataCenterPing_Update_PingEntry&& from) noexcept
    : CMsgGCDataCenterPing_Update_PingEntry() {
    *this = ::std::move(from);
  }

  inline CMsgGCDataCenterPing_Update_PingEntry& operator=(const CMsgGCDataCenterPing_Update_PingEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCDataCenterPing_Update_PingEntry& operator=(CMsgGCDataCenterPing_Update_PingEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCDataCenterPing_Update_PingEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCDataCenterPing_Update_PingEntry* internal_default_instance() {
    return reinterpret_cast<const CMsgGCDataCenterPing_Update_PingEntry*>(
               &_CMsgGCDataCenterPing_Update_PingEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    166;

  friend void swap(CMsgGCDataCenterPing_Update_PingEntry& a, CMsgGCDataCenterPing_Update_PingEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCDataCenterPing_Update_PingEntry* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCDataCenterPing_Update_PingEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCDataCenterPing_Update_PingEntry* New() const final {
    return new CMsgGCDataCenterPing_Update_PingEntry();
  }

  CMsgGCDataCenterPing_Update_PingEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCDataCenterPing_Update_PingEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgGCDataCenterPing_Update_PingEntry& from);
  void MergeFrom(const CMsgGCDataCenterPing_Update_PingEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCDataCenterPing_Update_PingEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCDataCenterPing_Update.PingEntry";
  }
  protected:
  explicit CMsgGCDataCenterPing_Update_PingEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPingFieldNumber = 2,
    kPingStatusFieldNumber = 3,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional uint32 ping = 2;
  bool has_ping() const;
  private:
  bool _internal_has_ping() const;
  public:
  void clear_ping();
  ::PROTOBUF_NAMESPACE_ID::uint32 ping() const;
  void set_ping(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ping() const;
  void _internal_set_ping(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .CMsgGCDataCenterPing_Update.Status ping_status = 3 [default = Normal];
  bool has_ping_status() const;
  private:
  bool _internal_has_ping_status() const;
  public:
  void clear_ping_status();
  ::CMsgGCDataCenterPing_Update_Status ping_status() const;
  void set_ping_status(::CMsgGCDataCenterPing_Update_Status value);
  private:
  ::CMsgGCDataCenterPing_Update_Status _internal_ping_status() const;
  void _internal_set_ping_status(::CMsgGCDataCenterPing_Update_Status value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCDataCenterPing_Update.PingEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ping_;
  int ping_status_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCDataCenterPing_Update final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCDataCenterPing_Update) */ {
 public:
  inline CMsgGCDataCenterPing_Update() : CMsgGCDataCenterPing_Update(nullptr) {}
  ~CMsgGCDataCenterPing_Update() override;
  explicit constexpr CMsgGCDataCenterPing_Update(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCDataCenterPing_Update(const CMsgGCDataCenterPing_Update& from);
  CMsgGCDataCenterPing_Update(CMsgGCDataCenterPing_Update&& from) noexcept
    : CMsgGCDataCenterPing_Update() {
    *this = ::std::move(from);
  }

  inline CMsgGCDataCenterPing_Update& operator=(const CMsgGCDataCenterPing_Update& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCDataCenterPing_Update& operator=(CMsgGCDataCenterPing_Update&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCDataCenterPing_Update& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCDataCenterPing_Update* internal_default_instance() {
    return reinterpret_cast<const CMsgGCDataCenterPing_Update*>(
               &_CMsgGCDataCenterPing_Update_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    167;

  friend void swap(CMsgGCDataCenterPing_Update& a, CMsgGCDataCenterPing_Update& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCDataCenterPing_Update* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCDataCenterPing_Update* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCDataCenterPing_Update* New() const final {
    return new CMsgGCDataCenterPing_Update();
  }

  CMsgGCDataCenterPing_Update* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCDataCenterPing_Update>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgGCDataCenterPing_Update& from);
  void MergeFrom(const CMsgGCDataCenterPing_Update& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCDataCenterPing_Update* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCDataCenterPing_Update";
  }
  protected:
  explicit CMsgGCDataCenterPing_Update(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgGCDataCenterPing_Update_PingEntry PingEntry;

  typedef CMsgGCDataCenterPing_Update_Status Status;
  static constexpr Status Invalid =
    CMsgGCDataCenterPing_Update_Status_Invalid;
  static constexpr Status Normal =
    CMsgGCDataCenterPing_Update_Status_Normal;
  static constexpr Status Unreachable =
    CMsgGCDataCenterPing_Update_Status_Unreachable;
  static constexpr Status FallbackToDCPing =
    CMsgGCDataCenterPing_Update_Status_FallbackToDCPing;
  static inline bool Status_IsValid(int value) {
    return CMsgGCDataCenterPing_Update_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    CMsgGCDataCenterPing_Update_Status_Status_MIN;
  static constexpr Status Status_MAX =
    CMsgGCDataCenterPing_Update_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    CMsgGCDataCenterPing_Update_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return CMsgGCDataCenterPing_Update_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return CMsgGCDataCenterPing_Update_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return CMsgGCDataCenterPing_Update_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPingdataFieldNumber = 1,
  };
  // repeated .CMsgGCDataCenterPing_Update.PingEntry pingdata = 1;
  int pingdata_size() const;
  private:
  int _internal_pingdata_size() const;
  public:
  void clear_pingdata();
  ::CMsgGCDataCenterPing_Update_PingEntry* mutable_pingdata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCDataCenterPing_Update_PingEntry >*
      mutable_pingdata();
  private:
  const ::CMsgGCDataCenterPing_Update_PingEntry& _internal_pingdata(int index) const;
  ::CMsgGCDataCenterPing_Update_PingEntry* _internal_add_pingdata();
  public:
  const ::CMsgGCDataCenterPing_Update_PingEntry& pingdata(int index) const;
  ::CMsgGCDataCenterPing_Update_PingEntry* add_pingdata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCDataCenterPing_Update_PingEntry >&
      pingdata() const;

  // @@protoc_insertion_point(class_scope:CMsgGCDataCenterPing_Update)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCDataCenterPing_Update_PingEntry > pingdata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGC_KickPlayerFromLobby final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGC_KickPlayerFromLobby) */ {
 public:
  inline CMsgGC_KickPlayerFromLobby() : CMsgGC_KickPlayerFromLobby(nullptr) {}
  ~CMsgGC_KickPlayerFromLobby() override;
  explicit constexpr CMsgGC_KickPlayerFromLobby(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGC_KickPlayerFromLobby(const CMsgGC_KickPlayerFromLobby& from);
  CMsgGC_KickPlayerFromLobby(CMsgGC_KickPlayerFromLobby&& from) noexcept
    : CMsgGC_KickPlayerFromLobby() {
    *this = ::std::move(from);
  }

  inline CMsgGC_KickPlayerFromLobby& operator=(const CMsgGC_KickPlayerFromLobby& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGC_KickPlayerFromLobby& operator=(CMsgGC_KickPlayerFromLobby&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGC_KickPlayerFromLobby& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGC_KickPlayerFromLobby* internal_default_instance() {
    return reinterpret_cast<const CMsgGC_KickPlayerFromLobby*>(
               &_CMsgGC_KickPlayerFromLobby_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    168;

  friend void swap(CMsgGC_KickPlayerFromLobby& a, CMsgGC_KickPlayerFromLobby& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGC_KickPlayerFromLobby* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGC_KickPlayerFromLobby* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGC_KickPlayerFromLobby* New() const final {
    return new CMsgGC_KickPlayerFromLobby();
  }

  CMsgGC_KickPlayerFromLobby* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGC_KickPlayerFromLobby>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgGC_KickPlayerFromLobby& from);
  void MergeFrom(const CMsgGC_KickPlayerFromLobby& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGC_KickPlayerFromLobby* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGC_KickPlayerFromLobby";
  }
  protected:
  explicit CMsgGC_KickPlayerFromLobby(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetIDFieldNumber = 1,
  };
  // optional uint64 targetID = 1;
  bool has_targetid() const;
  private:
  bool _internal_has_targetid() const;
  public:
  void clear_targetid();
  ::PROTOBUF_NAMESPACE_ID::uint64 targetid() const;
  void set_targetid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_targetid() const;
  void _internal_set_targetid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGC_KickPlayerFromLobby)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 targetid_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCSurveyRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCSurveyRequest) */ {
 public:
  inline CMsgGCSurveyRequest() : CMsgGCSurveyRequest(nullptr) {}
  ~CMsgGCSurveyRequest() override;
  explicit constexpr CMsgGCSurveyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCSurveyRequest(const CMsgGCSurveyRequest& from);
  CMsgGCSurveyRequest(CMsgGCSurveyRequest&& from) noexcept
    : CMsgGCSurveyRequest() {
    *this = ::std::move(from);
  }

  inline CMsgGCSurveyRequest& operator=(const CMsgGCSurveyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCSurveyRequest& operator=(CMsgGCSurveyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCSurveyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCSurveyRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgGCSurveyRequest*>(
               &_CMsgGCSurveyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    169;

  friend void swap(CMsgGCSurveyRequest& a, CMsgGCSurveyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCSurveyRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCSurveyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCSurveyRequest* New() const final {
    return new CMsgGCSurveyRequest();
  }

  CMsgGCSurveyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCSurveyRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgGCSurveyRequest& from);
  void MergeFrom(const CMsgGCSurveyRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCSurveyRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCSurveyRequest";
  }
  protected:
  explicit CMsgGCSurveyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatchIdFieldNumber = 2,
    kQuestionTypeFieldNumber = 1,
  };
  // optional uint64 match_id = 2;
  bool has_match_id() const;
  private:
  bool _internal_has_match_id() const;
  public:
  void clear_match_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 match_id() const;
  void set_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_match_id() const;
  void _internal_set_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional .SurveyQuestionType question_type = 1 [default = QUESTION_MATCH_QUALITY];
  bool has_question_type() const;
  private:
  bool _internal_has_question_type() const;
  public:
  void clear_question_type();
  ::SurveyQuestionType question_type() const;
  void set_question_type(::SurveyQuestionType value);
  private:
  ::SurveyQuestionType _internal_question_type() const;
  void _internal_set_question_type(::SurveyQuestionType value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCSurveyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 match_id_;
  int question_type_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCSurveyResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCSurveyResponse) */ {
 public:
  inline CMsgGCSurveyResponse() : CMsgGCSurveyResponse(nullptr) {}
  ~CMsgGCSurveyResponse() override;
  explicit constexpr CMsgGCSurveyResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCSurveyResponse(const CMsgGCSurveyResponse& from);
  CMsgGCSurveyResponse(CMsgGCSurveyResponse&& from) noexcept
    : CMsgGCSurveyResponse() {
    *this = ::std::move(from);
  }

  inline CMsgGCSurveyResponse& operator=(const CMsgGCSurveyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCSurveyResponse& operator=(CMsgGCSurveyResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCSurveyResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCSurveyResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgGCSurveyResponse*>(
               &_CMsgGCSurveyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    170;

  friend void swap(CMsgGCSurveyResponse& a, CMsgGCSurveyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCSurveyResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCSurveyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCSurveyResponse* New() const final {
    return new CMsgGCSurveyResponse();
  }

  CMsgGCSurveyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCSurveyResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgGCSurveyResponse& from);
  void MergeFrom(const CMsgGCSurveyResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCSurveyResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCSurveyResponse";
  }
  protected:
  explicit CMsgGCSurveyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatchIdFieldNumber = 2,
    kQuestionTypeFieldNumber = 1,
    kResponseFieldNumber = 3,
  };
  // optional uint64 match_id = 2;
  bool has_match_id() const;
  private:
  bool _internal_has_match_id() const;
  public:
  void clear_match_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 match_id() const;
  void set_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_match_id() const;
  void _internal_set_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional .SurveyQuestionType question_type = 1 [default = QUESTION_MATCH_QUALITY];
  bool has_question_type() const;
  private:
  bool _internal_has_question_type() const;
  public:
  void clear_question_type();
  ::SurveyQuestionType question_type() const;
  void set_question_type(::SurveyQuestionType value);
  private:
  ::SurveyQuestionType _internal_question_type() const;
  void _internal_set_question_type(::SurveyQuestionType value);
  public:

  // optional int32 response = 3;
  bool has_response() const;
  private:
  bool _internal_has_response() const;
  public:
  void clear_response();
  ::PROTOBUF_NAMESPACE_ID::int32 response() const;
  void set_response(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_response() const;
  void _internal_set_response(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCSurveyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 match_id_;
  int question_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 response_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CSOQuestMapNode final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSOQuestMapNode) */ {
 public:
  inline CSOQuestMapNode() : CSOQuestMapNode(nullptr) {}
  ~CSOQuestMapNode() override;
  explicit constexpr CSOQuestMapNode(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSOQuestMapNode(const CSOQuestMapNode& from);
  CSOQuestMapNode(CSOQuestMapNode&& from) noexcept
    : CSOQuestMapNode() {
    *this = ::std::move(from);
  }

  inline CSOQuestMapNode& operator=(const CSOQuestMapNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSOQuestMapNode& operator=(CSOQuestMapNode&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSOQuestMapNode& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSOQuestMapNode* internal_default_instance() {
    return reinterpret_cast<const CSOQuestMapNode*>(
               &_CSOQuestMapNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    171;

  friend void swap(CSOQuestMapNode& a, CSOQuestMapNode& b) {
    a.Swap(&b);
  }
  inline void Swap(CSOQuestMapNode* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSOQuestMapNode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSOQuestMapNode* New() const final {
    return new CSOQuestMapNode();
  }

  CSOQuestMapNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSOQuestMapNode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSOQuestMapNode& from);
  void MergeFrom(const CSOQuestMapNode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSOQuestMapNode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSOQuestMapNode";
  }
  protected:
  explicit CSOQuestMapNode(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
    kDefindexFieldNumber = 3,
    kNodeIdFieldNumber = 4,
    kStar0EarnedFieldNumber = 6,
    kStar1EarnedFieldNumber = 7,
    kStar2EarnedFieldNumber = 8,
    kLootClaimedFieldNumber = 9,
    kSelectedQuestDefFieldNumber = 10,
    kMapCycleFieldNumber = 11,
  };
  // optional uint32 account_id = 1 [(.key_field) = true];
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id() const;
  void set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_account_id() const;
  void _internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 defindex = 3 [(.key_field) = true];
  bool has_defindex() const;
  private:
  bool _internal_has_defindex() const;
  public:
  void clear_defindex();
  ::PROTOBUF_NAMESPACE_ID::uint32 defindex() const;
  void set_defindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_defindex() const;
  void _internal_set_defindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 node_id = 4;
  bool has_node_id() const;
  private:
  bool _internal_has_node_id() const;
  public:
  void clear_node_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 node_id() const;
  void set_node_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_node_id() const;
  void _internal_set_node_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool star_0_earned = 6 [default = false];
  bool has_star_0_earned() const;
  private:
  bool _internal_has_star_0_earned() const;
  public:
  void clear_star_0_earned();
  bool star_0_earned() const;
  void set_star_0_earned(bool value);
  private:
  bool _internal_star_0_earned() const;
  void _internal_set_star_0_earned(bool value);
  public:

  // optional bool star_1_earned = 7 [default = false];
  bool has_star_1_earned() const;
  private:
  bool _internal_has_star_1_earned() const;
  public:
  void clear_star_1_earned();
  bool star_1_earned() const;
  void set_star_1_earned(bool value);
  private:
  bool _internal_star_1_earned() const;
  void _internal_set_star_1_earned(bool value);
  public:

  // optional bool star_2_earned = 8 [default = false];
  bool has_star_2_earned() const;
  private:
  bool _internal_has_star_2_earned() const;
  public:
  void clear_star_2_earned();
  bool star_2_earned() const;
  void set_star_2_earned(bool value);
  private:
  bool _internal_star_2_earned() const;
  void _internal_set_star_2_earned(bool value);
  public:

  // optional bool loot_claimed = 9 [default = false];
  bool has_loot_claimed() const;
  private:
  bool _internal_has_loot_claimed() const;
  public:
  void clear_loot_claimed();
  bool loot_claimed() const;
  void set_loot_claimed(bool value);
  private:
  bool _internal_loot_claimed() const;
  void _internal_set_loot_claimed(bool value);
  public:

  // optional uint32 selected_quest_def = 10 [default = 0];
  bool has_selected_quest_def() const;
  private:
  bool _internal_has_selected_quest_def() const;
  public:
  void clear_selected_quest_def();
  ::PROTOBUF_NAMESPACE_ID::uint32 selected_quest_def() const;
  void set_selected_quest_def(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_selected_quest_def() const;
  void _internal_set_selected_quest_def(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 map_cycle = 11;
  bool has_map_cycle() const;
  private:
  bool _internal_has_map_cycle() const;
  public:
  void clear_map_cycle();
  ::PROTOBUF_NAMESPACE_ID::uint32 map_cycle() const;
  void set_map_cycle(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_map_cycle() const;
  void _internal_set_map_cycle(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CSOQuestMapNode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 defindex_;
  ::PROTOBUF_NAMESPACE_ID::uint32 node_id_;
  bool star_0_earned_;
  bool star_1_earned_;
  bool star_2_earned_;
  bool loot_claimed_;
  ::PROTOBUF_NAMESPACE_ID::uint32 selected_quest_def_;
  ::PROTOBUF_NAMESPACE_ID::uint32 map_cycle_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CSOQuest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSOQuest) */ {
 public:
  inline CSOQuest() : CSOQuest(nullptr) {}
  ~CSOQuest() override;
  explicit constexpr CSOQuest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSOQuest(const CSOQuest& from);
  CSOQuest(CSOQuest&& from) noexcept
    : CSOQuest() {
    *this = ::std::move(from);
  }

  inline CSOQuest& operator=(const CSOQuest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSOQuest& operator=(CSOQuest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSOQuest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSOQuest* internal_default_instance() {
    return reinterpret_cast<const CSOQuest*>(
               &_CSOQuest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    172;

  friend void swap(CSOQuest& a, CSOQuest& b) {
    a.Swap(&b);
  }
  inline void Swap(CSOQuest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSOQuest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSOQuest* New() const final {
    return new CSOQuest();
  }

  CSOQuest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSOQuest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSOQuest& from);
  void MergeFrom(const CSOQuest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSOQuest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSOQuest";
  }
  protected:
  explicit CSOQuest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQuestIdFieldNumber = 2,
    kAccountIdFieldNumber = 1,
    kDefindexFieldNumber = 3,
    kActiveFieldNumber = 4,
    kPoints0FieldNumber = 5,
    kPoints1FieldNumber = 6,
    kPoints2FieldNumber = 7,
    kQuestMapNodeSourceIdFieldNumber = 8,
    kMapCycleFieldNumber = 9,
  };
  // optional uint64 quest_id = 2 [(.key_field) = true];
  bool has_quest_id() const;
  private:
  bool _internal_has_quest_id() const;
  public:
  void clear_quest_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 quest_id() const;
  void set_quest_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_quest_id() const;
  void _internal_set_quest_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id() const;
  void set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_account_id() const;
  void _internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 defindex = 3;
  bool has_defindex() const;
  private:
  bool _internal_has_defindex() const;
  public:
  void clear_defindex();
  ::PROTOBUF_NAMESPACE_ID::uint32 defindex() const;
  void set_defindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_defindex() const;
  void _internal_set_defindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool active = 4 [default = false];
  bool has_active() const;
  private:
  bool _internal_has_active() const;
  public:
  void clear_active();
  bool active() const;
  void set_active(bool value);
  private:
  bool _internal_active() const;
  void _internal_set_active(bool value);
  public:

  // optional uint32 points_0 = 5;
  bool has_points_0() const;
  private:
  bool _internal_has_points_0() const;
  public:
  void clear_points_0();
  ::PROTOBUF_NAMESPACE_ID::uint32 points_0() const;
  void set_points_0(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_points_0() const;
  void _internal_set_points_0(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 points_1 = 6;
  bool has_points_1() const;
  private:
  bool _internal_has_points_1() const;
  public:
  void clear_points_1();
  ::PROTOBUF_NAMESPACE_ID::uint32 points_1() const;
  void set_points_1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_points_1() const;
  void _internal_set_points_1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 points_2 = 7;
  bool has_points_2() const;
  private:
  bool _internal_has_points_2() const;
  public:
  void clear_points_2();
  ::PROTOBUF_NAMESPACE_ID::uint32 points_2() const;
  void set_points_2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_points_2() const;
  void _internal_set_points_2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 quest_map_node_source_id = 8;
  bool has_quest_map_node_source_id() const;
  private:
  bool _internal_has_quest_map_node_source_id() const;
  public:
  void clear_quest_map_node_source_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 quest_map_node_source_id() const;
  void set_quest_map_node_source_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_quest_map_node_source_id() const;
  void _internal_set_quest_map_node_source_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 map_cycle = 9;
  bool has_map_cycle() const;
  private:
  bool _internal_has_map_cycle() const;
  public:
  void clear_map_cycle();
  ::PROTOBUF_NAMESPACE_ID::uint32 map_cycle() const;
  void set_map_cycle(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_map_cycle() const;
  void _internal_set_map_cycle(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CSOQuest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 quest_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 defindex_;
  bool active_;
  ::PROTOBUF_NAMESPACE_ID::uint32 points_0_;
  ::PROTOBUF_NAMESPACE_ID::uint32 points_1_;
  ::PROTOBUF_NAMESPACE_ID::uint32 points_2_;
  ::PROTOBUF_NAMESPACE_ID::uint32 quest_map_node_source_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 map_cycle_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CSOQuestMapRewardPurchase final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSOQuestMapRewardPurchase) */ {
 public:
  inline CSOQuestMapRewardPurchase() : CSOQuestMapRewardPurchase(nullptr) {}
  ~CSOQuestMapRewardPurchase() override;
  explicit constexpr CSOQuestMapRewardPurchase(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSOQuestMapRewardPurchase(const CSOQuestMapRewardPurchase& from);
  CSOQuestMapRewardPurchase(CSOQuestMapRewardPurchase&& from) noexcept
    : CSOQuestMapRewardPurchase() {
    *this = ::std::move(from);
  }

  inline CSOQuestMapRewardPurchase& operator=(const CSOQuestMapRewardPurchase& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSOQuestMapRewardPurchase& operator=(CSOQuestMapRewardPurchase&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSOQuestMapRewardPurchase& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSOQuestMapRewardPurchase* internal_default_instance() {
    return reinterpret_cast<const CSOQuestMapRewardPurchase*>(
               &_CSOQuestMapRewardPurchase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    173;

  friend void swap(CSOQuestMapRewardPurchase& a, CSOQuestMapRewardPurchase& b) {
    a.Swap(&b);
  }
  inline void Swap(CSOQuestMapRewardPurchase* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSOQuestMapRewardPurchase* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSOQuestMapRewardPurchase* New() const final {
    return new CSOQuestMapRewardPurchase();
  }

  CSOQuestMapRewardPurchase* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSOQuestMapRewardPurchase>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSOQuestMapRewardPurchase& from);
  void MergeFrom(const CSOQuestMapRewardPurchase& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSOQuestMapRewardPurchase* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSOQuestMapRewardPurchase";
  }
  protected:
  explicit CSOQuestMapRewardPurchase(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
    kDefindexFieldNumber = 2,
    kCountFieldNumber = 3,
    kMapCycleFieldNumber = 4,
    kPurchaseIdFieldNumber = 5,
  };
  // optional uint32 account_id = 1;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id() const;
  void set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_account_id() const;
  void _internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 defindex = 2 [(.key_field) = true];
  bool has_defindex() const;
  private:
  bool _internal_has_defindex() const;
  public:
  void clear_defindex();
  ::PROTOBUF_NAMESPACE_ID::uint32 defindex() const;
  void set_defindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_defindex() const;
  void _internal_set_defindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 count = 3;
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 map_cycle = 4;
  bool has_map_cycle() const;
  private:
  bool _internal_has_map_cycle() const;
  public:
  void clear_map_cycle();
  ::PROTOBUF_NAMESPACE_ID::uint32 map_cycle() const;
  void set_map_cycle(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_map_cycle() const;
  void _internal_set_map_cycle(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 purchase_id = 5;
  bool has_purchase_id() const;
  private:
  bool _internal_has_purchase_id() const;
  public:
  void clear_purchase_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 purchase_id() const;
  void set_purchase_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_purchase_id() const;
  void _internal_set_purchase_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CSOQuestMapRewardPurchase)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 defindex_;
  ::PROTOBUF_NAMESPACE_ID::uint32 count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 map_cycle_;
  ::PROTOBUF_NAMESPACE_ID::uint32 purchase_id_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCQuestIdentify final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCQuestIdentify) */ {
 public:
  inline CMsgGCQuestIdentify() : CMsgGCQuestIdentify(nullptr) {}
  ~CMsgGCQuestIdentify() override;
  explicit constexpr CMsgGCQuestIdentify(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCQuestIdentify(const CMsgGCQuestIdentify& from);
  CMsgGCQuestIdentify(CMsgGCQuestIdentify&& from) noexcept
    : CMsgGCQuestIdentify() {
    *this = ::std::move(from);
  }

  inline CMsgGCQuestIdentify& operator=(const CMsgGCQuestIdentify& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCQuestIdentify& operator=(CMsgGCQuestIdentify&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCQuestIdentify& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCQuestIdentify* internal_default_instance() {
    return reinterpret_cast<const CMsgGCQuestIdentify*>(
               &_CMsgGCQuestIdentify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    174;

  friend void swap(CMsgGCQuestIdentify& a, CMsgGCQuestIdentify& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCQuestIdentify* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCQuestIdentify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCQuestIdentify* New() const final {
    return new CMsgGCQuestIdentify();
  }

  CMsgGCQuestIdentify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCQuestIdentify>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgGCQuestIdentify& from);
  void MergeFrom(const CMsgGCQuestIdentify& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCQuestIdentify* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCQuestIdentify";
  }
  protected:
  explicit CMsgGCQuestIdentify(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQuestIdFieldNumber = 1,
  };
  // optional uint64 quest_id = 1;
  bool has_quest_id() const;
  private:
  bool _internal_has_quest_id() const;
  public:
  void clear_quest_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 quest_id() const;
  void set_quest_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_quest_id() const;
  void _internal_set_quest_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCQuestIdentify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 quest_id_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCQuestDevGive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCQuestDevGive) */ {
 public:
  inline CMsgGCQuestDevGive() : CMsgGCQuestDevGive(nullptr) {}
  ~CMsgGCQuestDevGive() override;
  explicit constexpr CMsgGCQuestDevGive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCQuestDevGive(const CMsgGCQuestDevGive& from);
  CMsgGCQuestDevGive(CMsgGCQuestDevGive&& from) noexcept
    : CMsgGCQuestDevGive() {
    *this = ::std::move(from);
  }

  inline CMsgGCQuestDevGive& operator=(const CMsgGCQuestDevGive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCQuestDevGive& operator=(CMsgGCQuestDevGive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCQuestDevGive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCQuestDevGive* internal_default_instance() {
    return reinterpret_cast<const CMsgGCQuestDevGive*>(
               &_CMsgGCQuestDevGive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    175;

  friend void swap(CMsgGCQuestDevGive& a, CMsgGCQuestDevGive& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCQuestDevGive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCQuestDevGive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCQuestDevGive* New() const final {
    return new CMsgGCQuestDevGive();
  }

  CMsgGCQuestDevGive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCQuestDevGive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgGCQuestDevGive& from);
  void MergeFrom(const CMsgGCQuestDevGive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCQuestDevGive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCQuestDevGive";
  }
  protected:
  explicit CMsgGCQuestDevGive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQuestDefIndexFieldNumber = 1,
  };
  // optional uint32 quest_def_index = 1;
  bool has_quest_def_index() const;
  private:
  bool _internal_has_quest_def_index() const;
  public:
  void clear_quest_def_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 quest_def_index() const;
  void set_quest_def_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_quest_def_index() const;
  void _internal_set_quest_def_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCQuestDevGive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 quest_def_index_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCQuestNodeTurnIn final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCQuestNodeTurnIn) */ {
 public:
  inline CMsgGCQuestNodeTurnIn() : CMsgGCQuestNodeTurnIn(nullptr) {}
  ~CMsgGCQuestNodeTurnIn() override;
  explicit constexpr CMsgGCQuestNodeTurnIn(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCQuestNodeTurnIn(const CMsgGCQuestNodeTurnIn& from);
  CMsgGCQuestNodeTurnIn(CMsgGCQuestNodeTurnIn&& from) noexcept
    : CMsgGCQuestNodeTurnIn() {
    *this = ::std::move(from);
  }

  inline CMsgGCQuestNodeTurnIn& operator=(const CMsgGCQuestNodeTurnIn& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCQuestNodeTurnIn& operator=(CMsgGCQuestNodeTurnIn&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCQuestNodeTurnIn& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCQuestNodeTurnIn* internal_default_instance() {
    return reinterpret_cast<const CMsgGCQuestNodeTurnIn*>(
               &_CMsgGCQuestNodeTurnIn_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    176;

  friend void swap(CMsgGCQuestNodeTurnIn& a, CMsgGCQuestNodeTurnIn& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCQuestNodeTurnIn* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCQuestNodeTurnIn* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCQuestNodeTurnIn* New() const final {
    return new CMsgGCQuestNodeTurnIn();
  }

  CMsgGCQuestNodeTurnIn* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCQuestNodeTurnIn>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgGCQuestNodeTurnIn& from);
  void MergeFrom(const CMsgGCQuestNodeTurnIn& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCQuestNodeTurnIn* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCQuestNodeTurnIn";
  }
  protected:
  explicit CMsgGCQuestNodeTurnIn(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeDefindexFieldNumber = 1,
  };
  // optional uint32 node_defindex = 1;
  bool has_node_defindex() const;
  private:
  bool _internal_has_node_defindex() const;
  public:
  void clear_node_defindex();
  ::PROTOBUF_NAMESPACE_ID::uint32 node_defindex() const;
  void set_node_defindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_node_defindex() const;
  void _internal_set_node_defindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCQuestNodeTurnIn)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 node_defindex_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCQuestMapUnlockNode final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCQuestMapUnlockNode) */ {
 public:
  inline CMsgGCQuestMapUnlockNode() : CMsgGCQuestMapUnlockNode(nullptr) {}
  ~CMsgGCQuestMapUnlockNode() override;
  explicit constexpr CMsgGCQuestMapUnlockNode(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCQuestMapUnlockNode(const CMsgGCQuestMapUnlockNode& from);
  CMsgGCQuestMapUnlockNode(CMsgGCQuestMapUnlockNode&& from) noexcept
    : CMsgGCQuestMapUnlockNode() {
    *this = ::std::move(from);
  }

  inline CMsgGCQuestMapUnlockNode& operator=(const CMsgGCQuestMapUnlockNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCQuestMapUnlockNode& operator=(CMsgGCQuestMapUnlockNode&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCQuestMapUnlockNode& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCQuestMapUnlockNode* internal_default_instance() {
    return reinterpret_cast<const CMsgGCQuestMapUnlockNode*>(
               &_CMsgGCQuestMapUnlockNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    177;

  friend void swap(CMsgGCQuestMapUnlockNode& a, CMsgGCQuestMapUnlockNode& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCQuestMapUnlockNode* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCQuestMapUnlockNode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCQuestMapUnlockNode* New() const final {
    return new CMsgGCQuestMapUnlockNode();
  }

  CMsgGCQuestMapUnlockNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCQuestMapUnlockNode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgGCQuestMapUnlockNode& from);
  void MergeFrom(const CMsgGCQuestMapUnlockNode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCQuestMapUnlockNode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCQuestMapUnlockNode";
  }
  protected:
  explicit CMsgGCQuestMapUnlockNode(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeDefindexFieldNumber = 1,
    kQuestDefindexFieldNumber = 2,
  };
  // optional uint32 node_defindex = 1;
  bool has_node_defindex() const;
  private:
  bool _internal_has_node_defindex() const;
  public:
  void clear_node_defindex();
  ::PROTOBUF_NAMESPACE_ID::uint32 node_defindex() const;
  void set_node_defindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_node_defindex() const;
  void _internal_set_node_defindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 quest_defindex = 2;
  bool has_quest_defindex() const;
  private:
  bool _internal_has_quest_defindex() const;
  public:
  void clear_quest_defindex();
  ::PROTOBUF_NAMESPACE_ID::uint32 quest_defindex() const;
  void set_quest_defindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_quest_defindex() const;
  void _internal_set_quest_defindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCQuestMapUnlockNode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 node_defindex_;
  ::PROTOBUF_NAMESPACE_ID::uint32 quest_defindex_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCNewMatchForLobbyRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCNewMatchForLobbyRequest) */ {
 public:
  inline CMsgGCNewMatchForLobbyRequest() : CMsgGCNewMatchForLobbyRequest(nullptr) {}
  ~CMsgGCNewMatchForLobbyRequest() override;
  explicit constexpr CMsgGCNewMatchForLobbyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCNewMatchForLobbyRequest(const CMsgGCNewMatchForLobbyRequest& from);
  CMsgGCNewMatchForLobbyRequest(CMsgGCNewMatchForLobbyRequest&& from) noexcept
    : CMsgGCNewMatchForLobbyRequest() {
    *this = ::std::move(from);
  }

  inline CMsgGCNewMatchForLobbyRequest& operator=(const CMsgGCNewMatchForLobbyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCNewMatchForLobbyRequest& operator=(CMsgGCNewMatchForLobbyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCNewMatchForLobbyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCNewMatchForLobbyRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgGCNewMatchForLobbyRequest*>(
               &_CMsgGCNewMatchForLobbyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    178;

  friend void swap(CMsgGCNewMatchForLobbyRequest& a, CMsgGCNewMatchForLobbyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCNewMatchForLobbyRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCNewMatchForLobbyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCNewMatchForLobbyRequest* New() const final {
    return new CMsgGCNewMatchForLobbyRequest();
  }

  CMsgGCNewMatchForLobbyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCNewMatchForLobbyRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgGCNewMatchForLobbyRequest& from);
  void MergeFrom(const CMsgGCNewMatchForLobbyRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCNewMatchForLobbyRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCNewMatchForLobbyRequest";
  }
  protected:
  explicit CMsgGCNewMatchForLobbyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrentMatchIdFieldNumber = 1,
    kLobbyIdFieldNumber = 3,
    kNextMapIdFieldNumber = 2,
  };
  // optional uint64 current_match_id = 1;
  bool has_current_match_id() const;
  private:
  bool _internal_has_current_match_id() const;
  public:
  void clear_current_match_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 current_match_id() const;
  void set_current_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_current_match_id() const;
  void _internal_set_current_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 lobby_id = 3;
  bool has_lobby_id() const;
  private:
  bool _internal_has_lobby_id() const;
  public:
  void clear_lobby_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 lobby_id() const;
  void set_lobby_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_lobby_id() const;
  void _internal_set_lobby_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 next_map_id = 2;
  bool has_next_map_id() const;
  private:
  bool _internal_has_next_map_id() const;
  public:
  void clear_next_map_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 next_map_id() const;
  void set_next_map_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_next_map_id() const;
  void _internal_set_next_map_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCNewMatchForLobbyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 current_match_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 lobby_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 next_map_id_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCNewMatchForLobbyResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCNewMatchForLobbyResponse) */ {
 public:
  inline CMsgGCNewMatchForLobbyResponse() : CMsgGCNewMatchForLobbyResponse(nullptr) {}
  ~CMsgGCNewMatchForLobbyResponse() override;
  explicit constexpr CMsgGCNewMatchForLobbyResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCNewMatchForLobbyResponse(const CMsgGCNewMatchForLobbyResponse& from);
  CMsgGCNewMatchForLobbyResponse(CMsgGCNewMatchForLobbyResponse&& from) noexcept
    : CMsgGCNewMatchForLobbyResponse() {
    *this = ::std::move(from);
  }

  inline CMsgGCNewMatchForLobbyResponse& operator=(const CMsgGCNewMatchForLobbyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCNewMatchForLobbyResponse& operator=(CMsgGCNewMatchForLobbyResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCNewMatchForLobbyResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCNewMatchForLobbyResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgGCNewMatchForLobbyResponse*>(
               &_CMsgGCNewMatchForLobbyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    179;

  friend void swap(CMsgGCNewMatchForLobbyResponse& a, CMsgGCNewMatchForLobbyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCNewMatchForLobbyResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCNewMatchForLobbyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCNewMatchForLobbyResponse* New() const final {
    return new CMsgGCNewMatchForLobbyResponse();
  }

  CMsgGCNewMatchForLobbyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCNewMatchForLobbyResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgGCNewMatchForLobbyResponse& from);
  void MergeFrom(const CMsgGCNewMatchForLobbyResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCNewMatchForLobbyResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCNewMatchForLobbyResponse";
  }
  protected:
  explicit CMsgGCNewMatchForLobbyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // optional bool success = 1;
  bool has_success() const;
  private:
  bool _internal_has_success() const;
  public:
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCNewMatchForLobbyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool success_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCChangeMatchPlayerTeamsRequest_Member final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCChangeMatchPlayerTeamsRequest.Member) */ {
 public:
  inline CMsgGCChangeMatchPlayerTeamsRequest_Member() : CMsgGCChangeMatchPlayerTeamsRequest_Member(nullptr) {}
  ~CMsgGCChangeMatchPlayerTeamsRequest_Member() override;
  explicit constexpr CMsgGCChangeMatchPlayerTeamsRequest_Member(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCChangeMatchPlayerTeamsRequest_Member(const CMsgGCChangeMatchPlayerTeamsRequest_Member& from);
  CMsgGCChangeMatchPlayerTeamsRequest_Member(CMsgGCChangeMatchPlayerTeamsRequest_Member&& from) noexcept
    : CMsgGCChangeMatchPlayerTeamsRequest_Member() {
    *this = ::std::move(from);
  }

  inline CMsgGCChangeMatchPlayerTeamsRequest_Member& operator=(const CMsgGCChangeMatchPlayerTeamsRequest_Member& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCChangeMatchPlayerTeamsRequest_Member& operator=(CMsgGCChangeMatchPlayerTeamsRequest_Member&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCChangeMatchPlayerTeamsRequest_Member& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCChangeMatchPlayerTeamsRequest_Member* internal_default_instance() {
    return reinterpret_cast<const CMsgGCChangeMatchPlayerTeamsRequest_Member*>(
               &_CMsgGCChangeMatchPlayerTeamsRequest_Member_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    180;

  friend void swap(CMsgGCChangeMatchPlayerTeamsRequest_Member& a, CMsgGCChangeMatchPlayerTeamsRequest_Member& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCChangeMatchPlayerTeamsRequest_Member* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCChangeMatchPlayerTeamsRequest_Member* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCChangeMatchPlayerTeamsRequest_Member* New() const final {
    return new CMsgGCChangeMatchPlayerTeamsRequest_Member();
  }

  CMsgGCChangeMatchPlayerTeamsRequest_Member* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCChangeMatchPlayerTeamsRequest_Member>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgGCChangeMatchPlayerTeamsRequest_Member& from);
  void MergeFrom(const CMsgGCChangeMatchPlayerTeamsRequest_Member& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCChangeMatchPlayerTeamsRequest_Member* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCChangeMatchPlayerTeamsRequest.Member";
  }
  protected:
  explicit CMsgGCChangeMatchPlayerTeamsRequest_Member(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMemberIdFieldNumber = 1,
    kNewTeamFieldNumber = 2,
  };
  // optional uint64 member_id = 1;
  bool has_member_id() const;
  private:
  bool _internal_has_member_id() const;
  public:
  void clear_member_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 member_id() const;
  void set_member_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_member_id() const;
  void _internal_set_member_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional .TF_GC_TEAM new_team = 2 [default = TF_GC_TEAM_NOTEAM];
  bool has_new_team() const;
  private:
  bool _internal_has_new_team() const;
  public:
  void clear_new_team();
  ::TF_GC_TEAM new_team() const;
  void set_new_team(::TF_GC_TEAM value);
  private:
  ::TF_GC_TEAM _internal_new_team() const;
  void _internal_set_new_team(::TF_GC_TEAM value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCChangeMatchPlayerTeamsRequest.Member)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 member_id_;
  int new_team_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCChangeMatchPlayerTeamsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCChangeMatchPlayerTeamsRequest) */ {
 public:
  inline CMsgGCChangeMatchPlayerTeamsRequest() : CMsgGCChangeMatchPlayerTeamsRequest(nullptr) {}
  ~CMsgGCChangeMatchPlayerTeamsRequest() override;
  explicit constexpr CMsgGCChangeMatchPlayerTeamsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCChangeMatchPlayerTeamsRequest(const CMsgGCChangeMatchPlayerTeamsRequest& from);
  CMsgGCChangeMatchPlayerTeamsRequest(CMsgGCChangeMatchPlayerTeamsRequest&& from) noexcept
    : CMsgGCChangeMatchPlayerTeamsRequest() {
    *this = ::std::move(from);
  }

  inline CMsgGCChangeMatchPlayerTeamsRequest& operator=(const CMsgGCChangeMatchPlayerTeamsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCChangeMatchPlayerTeamsRequest& operator=(CMsgGCChangeMatchPlayerTeamsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCChangeMatchPlayerTeamsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCChangeMatchPlayerTeamsRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgGCChangeMatchPlayerTeamsRequest*>(
               &_CMsgGCChangeMatchPlayerTeamsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    181;

  friend void swap(CMsgGCChangeMatchPlayerTeamsRequest& a, CMsgGCChangeMatchPlayerTeamsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCChangeMatchPlayerTeamsRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCChangeMatchPlayerTeamsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCChangeMatchPlayerTeamsRequest* New() const final {
    return new CMsgGCChangeMatchPlayerTeamsRequest();
  }

  CMsgGCChangeMatchPlayerTeamsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCChangeMatchPlayerTeamsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgGCChangeMatchPlayerTeamsRequest& from);
  void MergeFrom(const CMsgGCChangeMatchPlayerTeamsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCChangeMatchPlayerTeamsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCChangeMatchPlayerTeamsRequest";
  }
  protected:
  explicit CMsgGCChangeMatchPlayerTeamsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgGCChangeMatchPlayerTeamsRequest_Member Member;

  // accessors -------------------------------------------------------

  enum : int {
    kMemberFieldNumber = 3,
    kMatchIdFieldNumber = 1,
    kLobbyIdFieldNumber = 2,
  };
  // repeated .CMsgGCChangeMatchPlayerTeamsRequest.Member member = 3;
  int member_size() const;
  private:
  int _internal_member_size() const;
  public:
  void clear_member();
  ::CMsgGCChangeMatchPlayerTeamsRequest_Member* mutable_member(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCChangeMatchPlayerTeamsRequest_Member >*
      mutable_member();
  private:
  const ::CMsgGCChangeMatchPlayerTeamsRequest_Member& _internal_member(int index) const;
  ::CMsgGCChangeMatchPlayerTeamsRequest_Member* _internal_add_member();
  public:
  const ::CMsgGCChangeMatchPlayerTeamsRequest_Member& member(int index) const;
  ::CMsgGCChangeMatchPlayerTeamsRequest_Member* add_member();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCChangeMatchPlayerTeamsRequest_Member >&
      member() const;

  // optional uint64 match_id = 1;
  bool has_match_id() const;
  private:
  bool _internal_has_match_id() const;
  public:
  void clear_match_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 match_id() const;
  void set_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_match_id() const;
  void _internal_set_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 lobby_id = 2;
  bool has_lobby_id() const;
  private:
  bool _internal_has_lobby_id() const;
  public:
  void clear_lobby_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 lobby_id() const;
  void set_lobby_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_lobby_id() const;
  void _internal_set_lobby_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCChangeMatchPlayerTeamsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCChangeMatchPlayerTeamsRequest_Member > member_;
  ::PROTOBUF_NAMESPACE_ID::uint64 match_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 lobby_id_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCChangeMatchPlayerTeamsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCChangeMatchPlayerTeamsResponse) */ {
 public:
  inline CMsgGCChangeMatchPlayerTeamsResponse() : CMsgGCChangeMatchPlayerTeamsResponse(nullptr) {}
  ~CMsgGCChangeMatchPlayerTeamsResponse() override;
  explicit constexpr CMsgGCChangeMatchPlayerTeamsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCChangeMatchPlayerTeamsResponse(const CMsgGCChangeMatchPlayerTeamsResponse& from);
  CMsgGCChangeMatchPlayerTeamsResponse(CMsgGCChangeMatchPlayerTeamsResponse&& from) noexcept
    : CMsgGCChangeMatchPlayerTeamsResponse() {
    *this = ::std::move(from);
  }

  inline CMsgGCChangeMatchPlayerTeamsResponse& operator=(const CMsgGCChangeMatchPlayerTeamsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCChangeMatchPlayerTeamsResponse& operator=(CMsgGCChangeMatchPlayerTeamsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCChangeMatchPlayerTeamsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCChangeMatchPlayerTeamsResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgGCChangeMatchPlayerTeamsResponse*>(
               &_CMsgGCChangeMatchPlayerTeamsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    182;

  friend void swap(CMsgGCChangeMatchPlayerTeamsResponse& a, CMsgGCChangeMatchPlayerTeamsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCChangeMatchPlayerTeamsResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCChangeMatchPlayerTeamsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCChangeMatchPlayerTeamsResponse* New() const final {
    return new CMsgGCChangeMatchPlayerTeamsResponse();
  }

  CMsgGCChangeMatchPlayerTeamsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCChangeMatchPlayerTeamsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgGCChangeMatchPlayerTeamsResponse& from);
  void MergeFrom(const CMsgGCChangeMatchPlayerTeamsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCChangeMatchPlayerTeamsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCChangeMatchPlayerTeamsResponse";
  }
  protected:
  explicit CMsgGCChangeMatchPlayerTeamsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // optional bool success = 1;
  bool has_success() const;
  private:
  bool _internal_has_success() const;
  public:
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCChangeMatchPlayerTeamsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool success_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCQuestComplete_Debug final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCQuestComplete_Debug) */ {
 public:
  inline CMsgGCQuestComplete_Debug() : CMsgGCQuestComplete_Debug(nullptr) {}
  ~CMsgGCQuestComplete_Debug() override;
  explicit constexpr CMsgGCQuestComplete_Debug(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCQuestComplete_Debug(const CMsgGCQuestComplete_Debug& from);
  CMsgGCQuestComplete_Debug(CMsgGCQuestComplete_Debug&& from) noexcept
    : CMsgGCQuestComplete_Debug() {
    *this = ::std::move(from);
  }

  inline CMsgGCQuestComplete_Debug& operator=(const CMsgGCQuestComplete_Debug& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCQuestComplete_Debug& operator=(CMsgGCQuestComplete_Debug&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCQuestComplete_Debug& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCQuestComplete_Debug* internal_default_instance() {
    return reinterpret_cast<const CMsgGCQuestComplete_Debug*>(
               &_CMsgGCQuestComplete_Debug_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    183;

  friend void swap(CMsgGCQuestComplete_Debug& a, CMsgGCQuestComplete_Debug& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCQuestComplete_Debug* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCQuestComplete_Debug* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCQuestComplete_Debug* New() const final {
    return new CMsgGCQuestComplete_Debug();
  }

  CMsgGCQuestComplete_Debug* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCQuestComplete_Debug>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgGCQuestComplete_Debug& from);
  void MergeFrom(const CMsgGCQuestComplete_Debug& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCQuestComplete_Debug* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCQuestComplete_Debug";
  }
  protected:
  explicit CMsgGCQuestComplete_Debug(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQuestIdFieldNumber = 1,
    kPointsTypeFieldNumber = 2,
  };
  // optional uint64 quest_id = 1;
  bool has_quest_id() const;
  private:
  bool _internal_has_quest_id() const;
  public:
  void clear_quest_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 quest_id() const;
  void set_quest_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_quest_id() const;
  void _internal_set_quest_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 points_type = 2;
  bool has_points_type() const;
  private:
  bool _internal_has_points_type() const;
  public:
  void clear_points_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 points_type() const;
  void set_points_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_points_type() const;
  void _internal_set_points_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCQuestComplete_Debug)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 quest_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 points_type_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCQuestMap_Debug final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCQuestMap_Debug) */ {
 public:
  inline CMsgGCQuestMap_Debug() : CMsgGCQuestMap_Debug(nullptr) {}
  ~CMsgGCQuestMap_Debug() override;
  explicit constexpr CMsgGCQuestMap_Debug(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCQuestMap_Debug(const CMsgGCQuestMap_Debug& from);
  CMsgGCQuestMap_Debug(CMsgGCQuestMap_Debug&& from) noexcept
    : CMsgGCQuestMap_Debug() {
    *this = ::std::move(from);
  }

  inline CMsgGCQuestMap_Debug& operator=(const CMsgGCQuestMap_Debug& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCQuestMap_Debug& operator=(CMsgGCQuestMap_Debug&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCQuestMap_Debug& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCQuestMap_Debug* internal_default_instance() {
    return reinterpret_cast<const CMsgGCQuestMap_Debug*>(
               &_CMsgGCQuestMap_Debug_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    184;

  friend void swap(CMsgGCQuestMap_Debug& a, CMsgGCQuestMap_Debug& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCQuestMap_Debug* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCQuestMap_Debug* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCQuestMap_Debug* New() const final {
    return new CMsgGCQuestMap_Debug();
  }

  CMsgGCQuestMap_Debug* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCQuestMap_Debug>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgGCQuestMap_Debug& from);
  void MergeFrom(const CMsgGCQuestMap_Debug& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCQuestMap_Debug* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCQuestMap_Debug";
  }
  protected:
  explicit CMsgGCQuestMap_Debug(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnlockNodeFieldNumber = 3,
    kResetOperationFieldNumber = 1,
    kGiveCreditFieldNumber = 2,
  };
  // optional .CMsgGCQuestMapUnlockNode unlock_node = 3;
  bool has_unlock_node() const;
  private:
  bool _internal_has_unlock_node() const;
  public:
  void clear_unlock_node();
  const ::CMsgGCQuestMapUnlockNode& unlock_node() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::CMsgGCQuestMapUnlockNode* release_unlock_node();
  ::CMsgGCQuestMapUnlockNode* mutable_unlock_node();
  void set_allocated_unlock_node(::CMsgGCQuestMapUnlockNode* unlock_node);
  private:
  const ::CMsgGCQuestMapUnlockNode& _internal_unlock_node() const;
  ::CMsgGCQuestMapUnlockNode* _internal_mutable_unlock_node();
  public:
  void unsafe_arena_set_allocated_unlock_node(
      ::CMsgGCQuestMapUnlockNode* unlock_node);
  ::CMsgGCQuestMapUnlockNode* unsafe_arena_release_unlock_node();

  // optional uint32 reset_operation = 1;
  bool has_reset_operation() const;
  private:
  bool _internal_has_reset_operation() const;
  public:
  void clear_reset_operation();
  ::PROTOBUF_NAMESPACE_ID::uint32 reset_operation() const;
  void set_reset_operation(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_reset_operation() const;
  void _internal_set_reset_operation(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 give_credit = 2;
  bool has_give_credit() const;
  private:
  bool _internal_has_give_credit() const;
  public:
  void clear_give_credit();
  ::PROTOBUF_NAMESPACE_ID::uint32 give_credit() const;
  void set_give_credit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_give_credit() const;
  void _internal_set_give_credit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCQuestMap_Debug)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CMsgGCQuestMapUnlockNode* unlock_node_;
  ::PROTOBUF_NAMESPACE_ID::uint32 reset_operation_;
  ::PROTOBUF_NAMESPACE_ID::uint32 give_credit_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCQuestMapPurchaseReward final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCQuestMapPurchaseReward) */ {
 public:
  inline CMsgGCQuestMapPurchaseReward() : CMsgGCQuestMapPurchaseReward(nullptr) {}
  ~CMsgGCQuestMapPurchaseReward() override;
  explicit constexpr CMsgGCQuestMapPurchaseReward(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCQuestMapPurchaseReward(const CMsgGCQuestMapPurchaseReward& from);
  CMsgGCQuestMapPurchaseReward(CMsgGCQuestMapPurchaseReward&& from) noexcept
    : CMsgGCQuestMapPurchaseReward() {
    *this = ::std::move(from);
  }

  inline CMsgGCQuestMapPurchaseReward& operator=(const CMsgGCQuestMapPurchaseReward& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCQuestMapPurchaseReward& operator=(CMsgGCQuestMapPurchaseReward&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCQuestMapPurchaseReward& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCQuestMapPurchaseReward* internal_default_instance() {
    return reinterpret_cast<const CMsgGCQuestMapPurchaseReward*>(
               &_CMsgGCQuestMapPurchaseReward_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    185;

  friend void swap(CMsgGCQuestMapPurchaseReward& a, CMsgGCQuestMapPurchaseReward& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCQuestMapPurchaseReward* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCQuestMapPurchaseReward* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCQuestMapPurchaseReward* New() const final {
    return new CMsgGCQuestMapPurchaseReward();
  }

  CMsgGCQuestMapPurchaseReward* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCQuestMapPurchaseReward>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgGCQuestMapPurchaseReward& from);
  void MergeFrom(const CMsgGCQuestMapPurchaseReward& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCQuestMapPurchaseReward* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCQuestMapPurchaseReward";
  }
  protected:
  explicit CMsgGCQuestMapPurchaseReward(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStoreItemDefindexFieldNumber = 1,
  };
  // optional uint32 store_item_defindex = 1;
  bool has_store_item_defindex() const;
  private:
  bool _internal_has_store_item_defindex() const;
  public:
  void clear_store_item_defindex();
  ::PROTOBUF_NAMESPACE_ID::uint32 store_item_defindex() const;
  void set_store_item_defindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_store_item_defindex() const;
  void _internal_set_store_item_defindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCQuestMapPurchaseReward)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 store_item_defindex_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCQuestResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCQuestResponse) */ {
 public:
  inline CMsgGCQuestResponse() : CMsgGCQuestResponse(nullptr) {}
  ~CMsgGCQuestResponse() override;
  explicit constexpr CMsgGCQuestResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCQuestResponse(const CMsgGCQuestResponse& from);
  CMsgGCQuestResponse(CMsgGCQuestResponse&& from) noexcept
    : CMsgGCQuestResponse() {
    *this = ::std::move(from);
  }

  inline CMsgGCQuestResponse& operator=(const CMsgGCQuestResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCQuestResponse& operator=(CMsgGCQuestResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCQuestResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCQuestResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgGCQuestResponse*>(
               &_CMsgGCQuestResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    186;

  friend void swap(CMsgGCQuestResponse& a, CMsgGCQuestResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCQuestResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCQuestResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCQuestResponse* New() const final {
    return new CMsgGCQuestResponse();
  }

  CMsgGCQuestResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCQuestResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgGCQuestResponse& from);
  void MergeFrom(const CMsgGCQuestResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCQuestResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCQuestResponse";
  }
  protected:
  explicit CMsgGCQuestResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // optional bool success = 1 [default = false];
  bool has_success() const;
  private:
  bool _internal_has_success() const;
  public:
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCQuestResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool success_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCSetDisablePartyQuestProgress final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCSetDisablePartyQuestProgress) */ {
 public:
  inline CMsgGCSetDisablePartyQuestProgress() : CMsgGCSetDisablePartyQuestProgress(nullptr) {}
  ~CMsgGCSetDisablePartyQuestProgress() override;
  explicit constexpr CMsgGCSetDisablePartyQuestProgress(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCSetDisablePartyQuestProgress(const CMsgGCSetDisablePartyQuestProgress& from);
  CMsgGCSetDisablePartyQuestProgress(CMsgGCSetDisablePartyQuestProgress&& from) noexcept
    : CMsgGCSetDisablePartyQuestProgress() {
    *this = ::std::move(from);
  }

  inline CMsgGCSetDisablePartyQuestProgress& operator=(const CMsgGCSetDisablePartyQuestProgress& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCSetDisablePartyQuestProgress& operator=(CMsgGCSetDisablePartyQuestProgress&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCSetDisablePartyQuestProgress& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCSetDisablePartyQuestProgress* internal_default_instance() {
    return reinterpret_cast<const CMsgGCSetDisablePartyQuestProgress*>(
               &_CMsgGCSetDisablePartyQuestProgress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    187;

  friend void swap(CMsgGCSetDisablePartyQuestProgress& a, CMsgGCSetDisablePartyQuestProgress& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCSetDisablePartyQuestProgress* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCSetDisablePartyQuestProgress* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCSetDisablePartyQuestProgress* New() const final {
    return new CMsgGCSetDisablePartyQuestProgress();
  }

  CMsgGCSetDisablePartyQuestProgress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCSetDisablePartyQuestProgress>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgGCSetDisablePartyQuestProgress& from);
  void MergeFrom(const CMsgGCSetDisablePartyQuestProgress& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCSetDisablePartyQuestProgress* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCSetDisablePartyQuestProgress";
  }
  protected:
  explicit CMsgGCSetDisablePartyQuestProgress(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
  };
  // optional bool state = 1;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  bool state() const;
  void set_state(bool value);
  private:
  bool _internal_state() const;
  void _internal_set_state(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCSetDisablePartyQuestProgress)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool state_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgQuestProgressReport final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgQuestProgressReport) */ {
 public:
  inline CMsgQuestProgressReport() : CMsgQuestProgressReport(nullptr) {}
  ~CMsgQuestProgressReport() override;
  explicit constexpr CMsgQuestProgressReport(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgQuestProgressReport(const CMsgQuestProgressReport& from);
  CMsgQuestProgressReport(CMsgQuestProgressReport&& from) noexcept
    : CMsgQuestProgressReport() {
    *this = ::std::move(from);
  }

  inline CMsgQuestProgressReport& operator=(const CMsgQuestProgressReport& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgQuestProgressReport& operator=(CMsgQuestProgressReport&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgQuestProgressReport& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgQuestProgressReport* internal_default_instance() {
    return reinterpret_cast<const CMsgQuestProgressReport*>(
               &_CMsgQuestProgressReport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    188;

  friend void swap(CMsgQuestProgressReport& a, CMsgQuestProgressReport& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgQuestProgressReport* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgQuestProgressReport* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgQuestProgressReport* New() const final {
    return new CMsgQuestProgressReport();
  }

  CMsgQuestProgressReport* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgQuestProgressReport>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgQuestProgressReport& from);
  void MergeFrom(const CMsgQuestProgressReport& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgQuestProgressReport* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgQuestProgressReport";
  }
  protected:
  explicit CMsgQuestProgressReport(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsEarnedFieldNumber = 5,
    kQuestIdFieldNumber = 1,
    kStar0EarnedFieldNumber = 2,
    kStar1EarnedFieldNumber = 3,
    kStar2EarnedFieldNumber = 4,
    kContractCompletedFieldNumber = 7,
    kRewardCreditsEarnedFieldNumber = 6,
  };
  // repeated uint64 items_earned = 5;
  int items_earned_size() const;
  private:
  int _internal_items_earned_size() const;
  public:
  void clear_items_earned();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_items_earned(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_items_earned() const;
  void _internal_add_items_earned(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_items_earned();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 items_earned(int index) const;
  void set_items_earned(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_items_earned(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      items_earned() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_items_earned();

  // optional uint64 quest_id = 1;
  bool has_quest_id() const;
  private:
  bool _internal_has_quest_id() const;
  public:
  void clear_quest_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 quest_id() const;
  void set_quest_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_quest_id() const;
  void _internal_set_quest_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional bool star_0_earned = 2;
  bool has_star_0_earned() const;
  private:
  bool _internal_has_star_0_earned() const;
  public:
  void clear_star_0_earned();
  bool star_0_earned() const;
  void set_star_0_earned(bool value);
  private:
  bool _internal_star_0_earned() const;
  void _internal_set_star_0_earned(bool value);
  public:

  // optional bool star_1_earned = 3;
  bool has_star_1_earned() const;
  private:
  bool _internal_has_star_1_earned() const;
  public:
  void clear_star_1_earned();
  bool star_1_earned() const;
  void set_star_1_earned(bool value);
  private:
  bool _internal_star_1_earned() const;
  void _internal_set_star_1_earned(bool value);
  public:

  // optional bool star_2_earned = 4;
  bool has_star_2_earned() const;
  private:
  bool _internal_has_star_2_earned() const;
  public:
  void clear_star_2_earned();
  bool star_2_earned() const;
  void set_star_2_earned(bool value);
  private:
  bool _internal_star_2_earned() const;
  void _internal_set_star_2_earned(bool value);
  public:

  // optional bool contract_completed = 7;
  bool has_contract_completed() const;
  private:
  bool _internal_has_contract_completed() const;
  public:
  void clear_contract_completed();
  bool contract_completed() const;
  void set_contract_completed(bool value);
  private:
  bool _internal_contract_completed() const;
  void _internal_set_contract_completed(bool value);
  public:

  // optional uint32 reward_credits_earned = 6;
  bool has_reward_credits_earned() const;
  private:
  bool _internal_has_reward_credits_earned() const;
  public:
  void clear_reward_credits_earned();
  ::PROTOBUF_NAMESPACE_ID::uint32 reward_credits_earned() const;
  void set_reward_credits_earned(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_reward_credits_earned() const;
  void _internal_set_reward_credits_earned(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgQuestProgressReport)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > items_earned_;
  ::PROTOBUF_NAMESPACE_ID::uint64 quest_id_;
  bool star_0_earned_;
  bool star_1_earned_;
  bool star_2_earned_;
  bool contract_completed_;
  ::PROTOBUF_NAMESPACE_ID::uint32 reward_credits_earned_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgConsumePaintkit final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgConsumePaintkit) */ {
 public:
  inline CMsgConsumePaintkit() : CMsgConsumePaintkit(nullptr) {}
  ~CMsgConsumePaintkit() override;
  explicit constexpr CMsgConsumePaintkit(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgConsumePaintkit(const CMsgConsumePaintkit& from);
  CMsgConsumePaintkit(CMsgConsumePaintkit&& from) noexcept
    : CMsgConsumePaintkit() {
    *this = ::std::move(from);
  }

  inline CMsgConsumePaintkit& operator=(const CMsgConsumePaintkit& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgConsumePaintkit& operator=(CMsgConsumePaintkit&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgConsumePaintkit& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgConsumePaintkit* internal_default_instance() {
    return reinterpret_cast<const CMsgConsumePaintkit*>(
               &_CMsgConsumePaintkit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    189;

  friend void swap(CMsgConsumePaintkit& a, CMsgConsumePaintkit& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgConsumePaintkit* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgConsumePaintkit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgConsumePaintkit* New() const final {
    return new CMsgConsumePaintkit();
  }

  CMsgConsumePaintkit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgConsumePaintkit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgConsumePaintkit& from);
  void MergeFrom(const CMsgConsumePaintkit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgConsumePaintkit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgConsumePaintkit";
  }
  protected:
  explicit CMsgConsumePaintkit(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceIdFieldNumber = 1,
    kTargetDefindexFieldNumber = 2,
  };
  // optional fixed64 source_id = 1;
  bool has_source_id() const;
  private:
  bool _internal_has_source_id() const;
  public:
  void clear_source_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 source_id() const;
  void set_source_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_source_id() const;
  void _internal_set_source_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 target_defindex = 2;
  bool has_target_defindex() const;
  private:
  bool _internal_has_target_defindex() const;
  public:
  void clear_target_defindex();
  ::PROTOBUF_NAMESPACE_ID::uint32 target_defindex() const;
  void set_target_defindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_target_defindex() const;
  void _internal_set_target_defindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgConsumePaintkit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 source_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 target_defindex_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgPainkitDevGrant final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgPainkitDevGrant) */ {
 public:
  inline CMsgPainkitDevGrant() : CMsgPainkitDevGrant(nullptr) {}
  ~CMsgPainkitDevGrant() override;
  explicit constexpr CMsgPainkitDevGrant(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgPainkitDevGrant(const CMsgPainkitDevGrant& from);
  CMsgPainkitDevGrant(CMsgPainkitDevGrant&& from) noexcept
    : CMsgPainkitDevGrant() {
    *this = ::std::move(from);
  }

  inline CMsgPainkitDevGrant& operator=(const CMsgPainkitDevGrant& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgPainkitDevGrant& operator=(CMsgPainkitDevGrant&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgPainkitDevGrant& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgPainkitDevGrant* internal_default_instance() {
    return reinterpret_cast<const CMsgPainkitDevGrant*>(
               &_CMsgPainkitDevGrant_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    190;

  friend void swap(CMsgPainkitDevGrant& a, CMsgPainkitDevGrant& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgPainkitDevGrant* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgPainkitDevGrant* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgPainkitDevGrant* New() const final {
    return new CMsgPainkitDevGrant();
  }

  CMsgPainkitDevGrant* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgPainkitDevGrant>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgPainkitDevGrant& from);
  void MergeFrom(const CMsgPainkitDevGrant& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgPainkitDevGrant* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgPainkitDevGrant";
  }
  protected:
  explicit CMsgPainkitDevGrant(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPaintkitDefindexFieldNumber = 1,
    kWearFieldNumber = 2,
    kItemDefindexFieldNumber = 3,
  };
  // optional uint32 paintkit_defindex = 1;
  bool has_paintkit_defindex() const;
  private:
  bool _internal_has_paintkit_defindex() const;
  public:
  void clear_paintkit_defindex();
  ::PROTOBUF_NAMESPACE_ID::uint32 paintkit_defindex() const;
  void set_paintkit_defindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_paintkit_defindex() const;
  void _internal_set_paintkit_defindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float wear = 2;
  bool has_wear() const;
  private:
  bool _internal_has_wear() const;
  public:
  void clear_wear();
  float wear() const;
  void set_wear(float value);
  private:
  float _internal_wear() const;
  void _internal_set_wear(float value);
  public:

  // optional uint32 item_defindex = 3;
  bool has_item_defindex() const;
  private:
  bool _internal_has_item_defindex() const;
  public:
  void clear_item_defindex();
  ::PROTOBUF_NAMESPACE_ID::uint32 item_defindex() const;
  void set_item_defindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_item_defindex() const;
  void _internal_set_item_defindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgPainkitDevGrant)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 paintkit_defindex_;
  float wear_;
  ::PROTOBUF_NAMESPACE_ID::uint32 item_defindex_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class GCQuestStrangeEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GCQuestStrangeEvent) */ {
 public:
  inline GCQuestStrangeEvent() : GCQuestStrangeEvent(nullptr) {}
  ~GCQuestStrangeEvent() override;
  explicit constexpr GCQuestStrangeEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCQuestStrangeEvent(const GCQuestStrangeEvent& from);
  GCQuestStrangeEvent(GCQuestStrangeEvent&& from) noexcept
    : GCQuestStrangeEvent() {
    *this = ::std::move(from);
  }

  inline GCQuestStrangeEvent& operator=(const GCQuestStrangeEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCQuestStrangeEvent& operator=(GCQuestStrangeEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCQuestStrangeEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCQuestStrangeEvent* internal_default_instance() {
    return reinterpret_cast<const GCQuestStrangeEvent*>(
               &_GCQuestStrangeEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    191;

  friend void swap(GCQuestStrangeEvent& a, GCQuestStrangeEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(GCQuestStrangeEvent* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCQuestStrangeEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GCQuestStrangeEvent* New() const final {
    return new GCQuestStrangeEvent();
  }

  GCQuestStrangeEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GCQuestStrangeEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GCQuestStrangeEvent& from);
  void MergeFrom(const GCQuestStrangeEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCQuestStrangeEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GCQuestStrangeEvent";
  }
  protected:
  explicit GCQuestStrangeEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerAccountIdFieldNumber = 1,
    kScorerAccountIdFieldNumber = 2,
    kQuestIdFieldNumber = 3,
    kStrangeEventIdFieldNumber = 4,
    kScoreFieldNumber = 5,
  };
  // optional uint32 owner_account_id = 1;
  bool has_owner_account_id() const;
  private:
  bool _internal_has_owner_account_id() const;
  public:
  void clear_owner_account_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 owner_account_id() const;
  void set_owner_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_owner_account_id() const;
  void _internal_set_owner_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 scorer_account_id = 2;
  bool has_scorer_account_id() const;
  private:
  bool _internal_has_scorer_account_id() const;
  public:
  void clear_scorer_account_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 scorer_account_id() const;
  void set_scorer_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_scorer_account_id() const;
  void _internal_set_scorer_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 quest_id = 3;
  bool has_quest_id() const;
  private:
  bool _internal_has_quest_id() const;
  public:
  void clear_quest_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 quest_id() const;
  void set_quest_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_quest_id() const;
  void _internal_set_quest_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 strange_event_id = 4;
  bool has_strange_event_id() const;
  private:
  bool _internal_has_strange_event_id() const;
  public:
  void clear_strange_event_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 strange_event_id() const;
  void set_strange_event_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_strange_event_id() const;
  void _internal_set_strange_event_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 score = 5;
  bool has_score() const;
  private:
  bool _internal_has_score() const;
  public:
  void clear_score();
  ::PROTOBUF_NAMESPACE_ID::uint32 score() const;
  void set_score(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_score() const;
  void _internal_set_score(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:GCQuestStrangeEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 owner_account_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 scorer_account_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 quest_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 strange_event_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 score_;
  friend struct ::TableStruct_tf_5fgcmessages_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CMsgTFGoldenWrenchBroadcast

// optional int32 wrench_number = 1;
inline bool CMsgTFGoldenWrenchBroadcast::_internal_has_wrench_number() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgTFGoldenWrenchBroadcast::has_wrench_number() const {
  return _internal_has_wrench_number();
}
inline void CMsgTFGoldenWrenchBroadcast::clear_wrench_number() {
  wrench_number_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgTFGoldenWrenchBroadcast::_internal_wrench_number() const {
  return wrench_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgTFGoldenWrenchBroadcast::wrench_number() const {
  // @@protoc_insertion_point(field_get:CMsgTFGoldenWrenchBroadcast.wrench_number)
  return _internal_wrench_number();
}
inline void CMsgTFGoldenWrenchBroadcast::_internal_set_wrench_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  wrench_number_ = value;
}
inline void CMsgTFGoldenWrenchBroadcast::set_wrench_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_wrench_number(value);
  // @@protoc_insertion_point(field_set:CMsgTFGoldenWrenchBroadcast.wrench_number)
}

// optional bool deleted = 2;
inline bool CMsgTFGoldenWrenchBroadcast::_internal_has_deleted() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgTFGoldenWrenchBroadcast::has_deleted() const {
  return _internal_has_deleted();
}
inline void CMsgTFGoldenWrenchBroadcast::clear_deleted() {
  deleted_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CMsgTFGoldenWrenchBroadcast::_internal_deleted() const {
  return deleted_;
}
inline bool CMsgTFGoldenWrenchBroadcast::deleted() const {
  // @@protoc_insertion_point(field_get:CMsgTFGoldenWrenchBroadcast.deleted)
  return _internal_deleted();
}
inline void CMsgTFGoldenWrenchBroadcast::_internal_set_deleted(bool value) {
  _has_bits_[0] |= 0x00000004u;
  deleted_ = value;
}
inline void CMsgTFGoldenWrenchBroadcast::set_deleted(bool value) {
  _internal_set_deleted(value);
  // @@protoc_insertion_point(field_set:CMsgTFGoldenWrenchBroadcast.deleted)
}

// optional string user_name = 3;
inline bool CMsgTFGoldenWrenchBroadcast::_internal_has_user_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgTFGoldenWrenchBroadcast::has_user_name() const {
  return _internal_has_user_name();
}
inline void CMsgTFGoldenWrenchBroadcast::clear_user_name() {
  user_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgTFGoldenWrenchBroadcast::user_name() const {
  // @@protoc_insertion_point(field_get:CMsgTFGoldenWrenchBroadcast.user_name)
  return _internal_user_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgTFGoldenWrenchBroadcast::set_user_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 user_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgTFGoldenWrenchBroadcast.user_name)
}
inline std::string* CMsgTFGoldenWrenchBroadcast::mutable_user_name() {
  // @@protoc_insertion_point(field_mutable:CMsgTFGoldenWrenchBroadcast.user_name)
  return _internal_mutable_user_name();
}
inline const std::string& CMsgTFGoldenWrenchBroadcast::_internal_user_name() const {
  return user_name_.Get();
}
inline void CMsgTFGoldenWrenchBroadcast::_internal_set_user_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  user_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgTFGoldenWrenchBroadcast::_internal_mutable_user_name() {
  _has_bits_[0] |= 0x00000001u;
  return user_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgTFGoldenWrenchBroadcast::release_user_name() {
  // @@protoc_insertion_point(field_release:CMsgTFGoldenWrenchBroadcast.user_name)
  if (!_internal_has_user_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return user_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CMsgTFGoldenWrenchBroadcast::set_allocated_user_name(std::string* user_name) {
  if (user_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  user_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CMsgTFGoldenWrenchBroadcast.user_name)
}

// -------------------------------------------------------------------

// CMsgTFSaxxyBroadcast

// optional int32 category_number = 1;
inline bool CMsgTFSaxxyBroadcast::_internal_has_category_number() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgTFSaxxyBroadcast::has_category_number() const {
  return _internal_has_category_number();
}
inline void CMsgTFSaxxyBroadcast::clear_category_number() {
  category_number_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgTFSaxxyBroadcast::_internal_category_number() const {
  return category_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgTFSaxxyBroadcast::category_number() const {
  // @@protoc_insertion_point(field_get:CMsgTFSaxxyBroadcast.category_number)
  return _internal_category_number();
}
inline void CMsgTFSaxxyBroadcast::_internal_set_category_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  category_number_ = value;
}
inline void CMsgTFSaxxyBroadcast::set_category_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_category_number(value);
  // @@protoc_insertion_point(field_set:CMsgTFSaxxyBroadcast.category_number)
}

// optional string user_name = 2;
inline bool CMsgTFSaxxyBroadcast::_internal_has_user_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgTFSaxxyBroadcast::has_user_name() const {
  return _internal_has_user_name();
}
inline void CMsgTFSaxxyBroadcast::clear_user_name() {
  user_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgTFSaxxyBroadcast::user_name() const {
  // @@protoc_insertion_point(field_get:CMsgTFSaxxyBroadcast.user_name)
  return _internal_user_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgTFSaxxyBroadcast::set_user_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 user_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgTFSaxxyBroadcast.user_name)
}
inline std::string* CMsgTFSaxxyBroadcast::mutable_user_name() {
  // @@protoc_insertion_point(field_mutable:CMsgTFSaxxyBroadcast.user_name)
  return _internal_mutable_user_name();
}
inline const std::string& CMsgTFSaxxyBroadcast::_internal_user_name() const {
  return user_name_.Get();
}
inline void CMsgTFSaxxyBroadcast::_internal_set_user_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  user_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgTFSaxxyBroadcast::_internal_mutable_user_name() {
  _has_bits_[0] |= 0x00000001u;
  return user_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgTFSaxxyBroadcast::release_user_name() {
  // @@protoc_insertion_point(field_release:CMsgTFSaxxyBroadcast.user_name)
  if (!_internal_has_user_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return user_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CMsgTFSaxxyBroadcast::set_allocated_user_name(std::string* user_name) {
  if (user_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  user_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CMsgTFSaxxyBroadcast.user_name)
}

// -------------------------------------------------------------------

// CMsgGCTFSpecificItemBroadcast

// optional uint32 item_def_index = 1;
inline bool CMsgGCTFSpecificItemBroadcast::_internal_has_item_def_index() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCTFSpecificItemBroadcast::has_item_def_index() const {
  return _internal_has_item_def_index();
}
inline void CMsgGCTFSpecificItemBroadcast::clear_item_def_index() {
  item_def_index_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCTFSpecificItemBroadcast::_internal_item_def_index() const {
  return item_def_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCTFSpecificItemBroadcast::item_def_index() const {
  // @@protoc_insertion_point(field_get:CMsgGCTFSpecificItemBroadcast.item_def_index)
  return _internal_item_def_index();
}
inline void CMsgGCTFSpecificItemBroadcast::_internal_set_item_def_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  item_def_index_ = value;
}
inline void CMsgGCTFSpecificItemBroadcast::set_item_def_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_item_def_index(value);
  // @@protoc_insertion_point(field_set:CMsgGCTFSpecificItemBroadcast.item_def_index)
}

// optional bool was_destruction = 2;
inline bool CMsgGCTFSpecificItemBroadcast::_internal_has_was_destruction() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGCTFSpecificItemBroadcast::has_was_destruction() const {
  return _internal_has_was_destruction();
}
inline void CMsgGCTFSpecificItemBroadcast::clear_was_destruction() {
  was_destruction_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CMsgGCTFSpecificItemBroadcast::_internal_was_destruction() const {
  return was_destruction_;
}
inline bool CMsgGCTFSpecificItemBroadcast::was_destruction() const {
  // @@protoc_insertion_point(field_get:CMsgGCTFSpecificItemBroadcast.was_destruction)
  return _internal_was_destruction();
}
inline void CMsgGCTFSpecificItemBroadcast::_internal_set_was_destruction(bool value) {
  _has_bits_[0] |= 0x00000004u;
  was_destruction_ = value;
}
inline void CMsgGCTFSpecificItemBroadcast::set_was_destruction(bool value) {
  _internal_set_was_destruction(value);
  // @@protoc_insertion_point(field_set:CMsgGCTFSpecificItemBroadcast.was_destruction)
}

// optional string user_name = 3;
inline bool CMsgGCTFSpecificItemBroadcast::_internal_has_user_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCTFSpecificItemBroadcast::has_user_name() const {
  return _internal_has_user_name();
}
inline void CMsgGCTFSpecificItemBroadcast::clear_user_name() {
  user_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgGCTFSpecificItemBroadcast::user_name() const {
  // @@protoc_insertion_point(field_get:CMsgGCTFSpecificItemBroadcast.user_name)
  return _internal_user_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgGCTFSpecificItemBroadcast::set_user_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 user_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgGCTFSpecificItemBroadcast.user_name)
}
inline std::string* CMsgGCTFSpecificItemBroadcast::mutable_user_name() {
  // @@protoc_insertion_point(field_mutable:CMsgGCTFSpecificItemBroadcast.user_name)
  return _internal_mutable_user_name();
}
inline const std::string& CMsgGCTFSpecificItemBroadcast::_internal_user_name() const {
  return user_name_.Get();
}
inline void CMsgGCTFSpecificItemBroadcast::_internal_set_user_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  user_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgGCTFSpecificItemBroadcast::_internal_mutable_user_name() {
  _has_bits_[0] |= 0x00000001u;
  return user_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgGCTFSpecificItemBroadcast::release_user_name() {
  // @@protoc_insertion_point(field_release:CMsgGCTFSpecificItemBroadcast.user_name)
  if (!_internal_has_user_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return user_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CMsgGCTFSpecificItemBroadcast::set_allocated_user_name(std::string* user_name) {
  if (user_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  user_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CMsgGCTFSpecificItemBroadcast.user_name)
}

// -------------------------------------------------------------------

// CMsgTFWorldStatus

// optional bool beta_stress_test_event_active = 1 [default = false];
inline bool CMsgTFWorldStatus::_internal_has_beta_stress_test_event_active() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgTFWorldStatus::has_beta_stress_test_event_active() const {
  return _internal_has_beta_stress_test_event_active();
}
inline void CMsgTFWorldStatus::clear_beta_stress_test_event_active() {
  beta_stress_test_event_active_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CMsgTFWorldStatus::_internal_beta_stress_test_event_active() const {
  return beta_stress_test_event_active_;
}
inline bool CMsgTFWorldStatus::beta_stress_test_event_active() const {
  // @@protoc_insertion_point(field_get:CMsgTFWorldStatus.beta_stress_test_event_active)
  return _internal_beta_stress_test_event_active();
}
inline void CMsgTFWorldStatus::_internal_set_beta_stress_test_event_active(bool value) {
  _has_bits_[0] |= 0x00000001u;
  beta_stress_test_event_active_ = value;
}
inline void CMsgTFWorldStatus::set_beta_stress_test_event_active(bool value) {
  _internal_set_beta_stress_test_event_active(value);
  // @@protoc_insertion_point(field_set:CMsgTFWorldStatus.beta_stress_test_event_active)
}

// optional .ETFMatchGroup event_match_group = 2 [default = k_eTFMatchGroup_Invalid];
inline bool CMsgTFWorldStatus::_internal_has_event_match_group() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgTFWorldStatus::has_event_match_group() const {
  return _internal_has_event_match_group();
}
inline void CMsgTFWorldStatus::clear_event_match_group() {
  event_match_group_ = -1;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::ETFMatchGroup CMsgTFWorldStatus::_internal_event_match_group() const {
  return static_cast< ::ETFMatchGroup >(event_match_group_);
}
inline ::ETFMatchGroup CMsgTFWorldStatus::event_match_group() const {
  // @@protoc_insertion_point(field_get:CMsgTFWorldStatus.event_match_group)
  return _internal_event_match_group();
}
inline void CMsgTFWorldStatus::_internal_set_event_match_group(::ETFMatchGroup value) {
  assert(::ETFMatchGroup_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  event_match_group_ = value;
}
inline void CMsgTFWorldStatus::set_event_match_group(::ETFMatchGroup value) {
  _internal_set_event_match_group(value);
  // @@protoc_insertion_point(field_set:CMsgTFWorldStatus.event_match_group)
}

// optional fixed32 event_expire_time = 3 [default = 0];
inline bool CMsgTFWorldStatus::_internal_has_event_expire_time() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgTFWorldStatus::has_event_expire_time() const {
  return _internal_has_event_expire_time();
}
inline void CMsgTFWorldStatus::clear_event_expire_time() {
  event_expire_time_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgTFWorldStatus::_internal_event_expire_time() const {
  return event_expire_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgTFWorldStatus::event_expire_time() const {
  // @@protoc_insertion_point(field_get:CMsgTFWorldStatus.event_expire_time)
  return _internal_event_expire_time();
}
inline void CMsgTFWorldStatus::_internal_set_event_expire_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  event_expire_time_ = value;
}
inline void CMsgTFWorldStatus::set_event_expire_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_event_expire_time(value);
  // @@protoc_insertion_point(field_set:CMsgTFWorldStatus.event_expire_time)
}

// optional uint32 active_client_version = 4;
inline bool CMsgTFWorldStatus::_internal_has_active_client_version() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgTFWorldStatus::has_active_client_version() const {
  return _internal_has_active_client_version();
}
inline void CMsgTFWorldStatus::clear_active_client_version() {
  active_client_version_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgTFWorldStatus::_internal_active_client_version() const {
  return active_client_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgTFWorldStatus::active_client_version() const {
  // @@protoc_insertion_point(field_get:CMsgTFWorldStatus.active_client_version)
  return _internal_active_client_version();
}
inline void CMsgTFWorldStatus::_internal_set_active_client_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  active_client_version_ = value;
}
inline void CMsgTFWorldStatus::set_active_client_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_active_client_version(value);
  // @@protoc_insertion_point(field_set:CMsgTFWorldStatus.active_client_version)
}

// repeated .ETFMatchGroup disabled_match_groups = 5;
inline int CMsgTFWorldStatus::_internal_disabled_match_groups_size() const {
  return disabled_match_groups_.size();
}
inline int CMsgTFWorldStatus::disabled_match_groups_size() const {
  return _internal_disabled_match_groups_size();
}
inline void CMsgTFWorldStatus::clear_disabled_match_groups() {
  disabled_match_groups_.Clear();
}
inline ::ETFMatchGroup CMsgTFWorldStatus::_internal_disabled_match_groups(int index) const {
  return static_cast< ::ETFMatchGroup >(disabled_match_groups_.Get(index));
}
inline ::ETFMatchGroup CMsgTFWorldStatus::disabled_match_groups(int index) const {
  // @@protoc_insertion_point(field_get:CMsgTFWorldStatus.disabled_match_groups)
  return _internal_disabled_match_groups(index);
}
inline void CMsgTFWorldStatus::set_disabled_match_groups(int index, ::ETFMatchGroup value) {
  assert(::ETFMatchGroup_IsValid(value));
  disabled_match_groups_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgTFWorldStatus.disabled_match_groups)
}
inline void CMsgTFWorldStatus::_internal_add_disabled_match_groups(::ETFMatchGroup value) {
  assert(::ETFMatchGroup_IsValid(value));
  disabled_match_groups_.Add(value);
}
inline void CMsgTFWorldStatus::add_disabled_match_groups(::ETFMatchGroup value) {
  // @@protoc_insertion_point(field_add:CMsgTFWorldStatus.disabled_match_groups)
  _internal_add_disabled_match_groups(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
CMsgTFWorldStatus::disabled_match_groups() const {
  // @@protoc_insertion_point(field_list:CMsgTFWorldStatus.disabled_match_groups)
  return disabled_match_groups_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
CMsgTFWorldStatus::_internal_mutable_disabled_match_groups() {
  return &disabled_match_groups_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
CMsgTFWorldStatus::mutable_disabled_match_groups() {
  // @@protoc_insertion_point(field_mutable_list:CMsgTFWorldStatus.disabled_match_groups)
  return _internal_mutable_disabled_match_groups();
}

// -------------------------------------------------------------------

// CSOTFDuelSummary

// optional uint32 account_id = 1 [(.key_field) = true];
inline bool CSOTFDuelSummary::_internal_has_account_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSOTFDuelSummary::has_account_id() const {
  return _internal_has_account_id();
}
inline void CSOTFDuelSummary::clear_account_id() {
  account_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFDuelSummary::_internal_account_id() const {
  return account_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFDuelSummary::account_id() const {
  // @@protoc_insertion_point(field_get:CSOTFDuelSummary.account_id)
  return _internal_account_id();
}
inline void CSOTFDuelSummary::_internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  account_id_ = value;
}
inline void CSOTFDuelSummary::set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CSOTFDuelSummary.account_id)
}

// optional uint32 duel_wins = 2;
inline bool CSOTFDuelSummary::_internal_has_duel_wins() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSOTFDuelSummary::has_duel_wins() const {
  return _internal_has_duel_wins();
}
inline void CSOTFDuelSummary::clear_duel_wins() {
  duel_wins_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFDuelSummary::_internal_duel_wins() const {
  return duel_wins_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFDuelSummary::duel_wins() const {
  // @@protoc_insertion_point(field_get:CSOTFDuelSummary.duel_wins)
  return _internal_duel_wins();
}
inline void CSOTFDuelSummary::_internal_set_duel_wins(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  duel_wins_ = value;
}
inline void CSOTFDuelSummary::set_duel_wins(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_duel_wins(value);
  // @@protoc_insertion_point(field_set:CSOTFDuelSummary.duel_wins)
}

// optional uint32 duel_losses = 3;
inline bool CSOTFDuelSummary::_internal_has_duel_losses() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CSOTFDuelSummary::has_duel_losses() const {
  return _internal_has_duel_losses();
}
inline void CSOTFDuelSummary::clear_duel_losses() {
  duel_losses_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFDuelSummary::_internal_duel_losses() const {
  return duel_losses_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFDuelSummary::duel_losses() const {
  // @@protoc_insertion_point(field_get:CSOTFDuelSummary.duel_losses)
  return _internal_duel_losses();
}
inline void CSOTFDuelSummary::_internal_set_duel_losses(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  duel_losses_ = value;
}
inline void CSOTFDuelSummary::set_duel_losses(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_duel_losses(value);
  // @@protoc_insertion_point(field_set:CSOTFDuelSummary.duel_losses)
}

// optional uint32 last_duel_account_id = 4;
inline bool CSOTFDuelSummary::_internal_has_last_duel_account_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CSOTFDuelSummary::has_last_duel_account_id() const {
  return _internal_has_last_duel_account_id();
}
inline void CSOTFDuelSummary::clear_last_duel_account_id() {
  last_duel_account_id_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFDuelSummary::_internal_last_duel_account_id() const {
  return last_duel_account_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFDuelSummary::last_duel_account_id() const {
  // @@protoc_insertion_point(field_get:CSOTFDuelSummary.last_duel_account_id)
  return _internal_last_duel_account_id();
}
inline void CSOTFDuelSummary::_internal_set_last_duel_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  last_duel_account_id_ = value;
}
inline void CSOTFDuelSummary::set_last_duel_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_last_duel_account_id(value);
  // @@protoc_insertion_point(field_set:CSOTFDuelSummary.last_duel_account_id)
}

// optional uint32 last_duel_timestamp = 5;
inline bool CSOTFDuelSummary::_internal_has_last_duel_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CSOTFDuelSummary::has_last_duel_timestamp() const {
  return _internal_has_last_duel_timestamp();
}
inline void CSOTFDuelSummary::clear_last_duel_timestamp() {
  last_duel_timestamp_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFDuelSummary::_internal_last_duel_timestamp() const {
  return last_duel_timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFDuelSummary::last_duel_timestamp() const {
  // @@protoc_insertion_point(field_get:CSOTFDuelSummary.last_duel_timestamp)
  return _internal_last_duel_timestamp();
}
inline void CSOTFDuelSummary::_internal_set_last_duel_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  last_duel_timestamp_ = value;
}
inline void CSOTFDuelSummary::set_last_duel_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_last_duel_timestamp(value);
  // @@protoc_insertion_point(field_set:CSOTFDuelSummary.last_duel_timestamp)
}

// optional uint32 last_duel_status = 6;
inline bool CSOTFDuelSummary::_internal_has_last_duel_status() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CSOTFDuelSummary::has_last_duel_status() const {
  return _internal_has_last_duel_status();
}
inline void CSOTFDuelSummary::clear_last_duel_status() {
  last_duel_status_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFDuelSummary::_internal_last_duel_status() const {
  return last_duel_status_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFDuelSummary::last_duel_status() const {
  // @@protoc_insertion_point(field_get:CSOTFDuelSummary.last_duel_status)
  return _internal_last_duel_status();
}
inline void CSOTFDuelSummary::_internal_set_last_duel_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  last_duel_status_ = value;
}
inline void CSOTFDuelSummary::set_last_duel_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_last_duel_status(value);
  // @@protoc_insertion_point(field_set:CSOTFDuelSummary.last_duel_status)
}

// -------------------------------------------------------------------

// CSOTFMapContribution

// optional uint32 account_id = 1 [(.key_field) = true];
inline bool CSOTFMapContribution::_internal_has_account_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSOTFMapContribution::has_account_id() const {
  return _internal_has_account_id();
}
inline void CSOTFMapContribution::clear_account_id() {
  account_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFMapContribution::_internal_account_id() const {
  return account_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFMapContribution::account_id() const {
  // @@protoc_insertion_point(field_get:CSOTFMapContribution.account_id)
  return _internal_account_id();
}
inline void CSOTFMapContribution::_internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  account_id_ = value;
}
inline void CSOTFMapContribution::set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CSOTFMapContribution.account_id)
}

// optional uint32 def_index = 2 [(.key_field) = true];
inline bool CSOTFMapContribution::_internal_has_def_index() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSOTFMapContribution::has_def_index() const {
  return _internal_has_def_index();
}
inline void CSOTFMapContribution::clear_def_index() {
  def_index_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFMapContribution::_internal_def_index() const {
  return def_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFMapContribution::def_index() const {
  // @@protoc_insertion_point(field_get:CSOTFMapContribution.def_index)
  return _internal_def_index();
}
inline void CSOTFMapContribution::_internal_set_def_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  def_index_ = value;
}
inline void CSOTFMapContribution::set_def_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_def_index(value);
  // @@protoc_insertion_point(field_set:CSOTFMapContribution.def_index)
}

// optional uint32 contribution_level = 3;
inline bool CSOTFMapContribution::_internal_has_contribution_level() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CSOTFMapContribution::has_contribution_level() const {
  return _internal_has_contribution_level();
}
inline void CSOTFMapContribution::clear_contribution_level() {
  contribution_level_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFMapContribution::_internal_contribution_level() const {
  return contribution_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFMapContribution::contribution_level() const {
  // @@protoc_insertion_point(field_get:CSOTFMapContribution.contribution_level)
  return _internal_contribution_level();
}
inline void CSOTFMapContribution::_internal_set_contribution_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  contribution_level_ = value;
}
inline void CSOTFMapContribution::set_contribution_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_contribution_level(value);
  // @@protoc_insertion_point(field_set:CSOTFMapContribution.contribution_level)
}

// -------------------------------------------------------------------

// CMsgTFFreeTrialChooseMostHelpfulFriend

// optional uint32 account_id_friend = 1;
inline bool CMsgTFFreeTrialChooseMostHelpfulFriend::_internal_has_account_id_friend() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgTFFreeTrialChooseMostHelpfulFriend::has_account_id_friend() const {
  return _internal_has_account_id_friend();
}
inline void CMsgTFFreeTrialChooseMostHelpfulFriend::clear_account_id_friend() {
  account_id_friend_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgTFFreeTrialChooseMostHelpfulFriend::_internal_account_id_friend() const {
  return account_id_friend_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgTFFreeTrialChooseMostHelpfulFriend::account_id_friend() const {
  // @@protoc_insertion_point(field_get:CMsgTFFreeTrialChooseMostHelpfulFriend.account_id_friend)
  return _internal_account_id_friend();
}
inline void CMsgTFFreeTrialChooseMostHelpfulFriend::_internal_set_account_id_friend(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  account_id_friend_ = value;
}
inline void CMsgTFFreeTrialChooseMostHelpfulFriend::set_account_id_friend(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_account_id_friend(value);
  // @@protoc_insertion_point(field_set:CMsgTFFreeTrialChooseMostHelpfulFriend.account_id_friend)
}

// -------------------------------------------------------------------

// CMsgTFRequestTF2Friends

// repeated uint32 account_ids = 1;
inline int CMsgTFRequestTF2Friends::_internal_account_ids_size() const {
  return account_ids_.size();
}
inline int CMsgTFRequestTF2Friends::account_ids_size() const {
  return _internal_account_ids_size();
}
inline void CMsgTFRequestTF2Friends::clear_account_ids() {
  account_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgTFRequestTF2Friends::_internal_account_ids(int index) const {
  return account_ids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgTFRequestTF2Friends::account_ids(int index) const {
  // @@protoc_insertion_point(field_get:CMsgTFRequestTF2Friends.account_ids)
  return _internal_account_ids(index);
}
inline void CMsgTFRequestTF2Friends::set_account_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  account_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgTFRequestTF2Friends.account_ids)
}
inline void CMsgTFRequestTF2Friends::_internal_add_account_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  account_ids_.Add(value);
}
inline void CMsgTFRequestTF2Friends::add_account_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_account_ids(value);
  // @@protoc_insertion_point(field_add:CMsgTFRequestTF2Friends.account_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CMsgTFRequestTF2Friends::_internal_account_ids() const {
  return account_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CMsgTFRequestTF2Friends::account_ids() const {
  // @@protoc_insertion_point(field_list:CMsgTFRequestTF2Friends.account_ids)
  return _internal_account_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CMsgTFRequestTF2Friends::_internal_mutable_account_ids() {
  return &account_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CMsgTFRequestTF2Friends::mutable_account_ids() {
  // @@protoc_insertion_point(field_mutable_list:CMsgTFRequestTF2Friends.account_ids)
  return _internal_mutable_account_ids();
}

// -------------------------------------------------------------------

// CMsgTFRequestTF2FriendsResponse

// repeated uint32 account_ids = 1;
inline int CMsgTFRequestTF2FriendsResponse::_internal_account_ids_size() const {
  return account_ids_.size();
}
inline int CMsgTFRequestTF2FriendsResponse::account_ids_size() const {
  return _internal_account_ids_size();
}
inline void CMsgTFRequestTF2FriendsResponse::clear_account_ids() {
  account_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgTFRequestTF2FriendsResponse::_internal_account_ids(int index) const {
  return account_ids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgTFRequestTF2FriendsResponse::account_ids(int index) const {
  // @@protoc_insertion_point(field_get:CMsgTFRequestTF2FriendsResponse.account_ids)
  return _internal_account_ids(index);
}
inline void CMsgTFRequestTF2FriendsResponse::set_account_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  account_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgTFRequestTF2FriendsResponse.account_ids)
}
inline void CMsgTFRequestTF2FriendsResponse::_internal_add_account_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  account_ids_.Add(value);
}
inline void CMsgTFRequestTF2FriendsResponse::add_account_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_account_ids(value);
  // @@protoc_insertion_point(field_add:CMsgTFRequestTF2FriendsResponse.account_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CMsgTFRequestTF2FriendsResponse::_internal_account_ids() const {
  return account_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CMsgTFRequestTF2FriendsResponse::account_ids() const {
  // @@protoc_insertion_point(field_list:CMsgTFRequestTF2FriendsResponse.account_ids)
  return _internal_account_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CMsgTFRequestTF2FriendsResponse::_internal_mutable_account_ids() {
  return &account_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CMsgTFRequestTF2FriendsResponse::mutable_account_ids() {
  // @@protoc_insertion_point(field_mutable_list:CMsgTFRequestTF2FriendsResponse.account_ids)
  return _internal_mutable_account_ids();
}

// -------------------------------------------------------------------

// CSOTFPlayerInfo

// optional uint32 num_new_users_helped = 1;
inline bool CSOTFPlayerInfo::_internal_has_num_new_users_helped() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSOTFPlayerInfo::has_num_new_users_helped() const {
  return _internal_has_num_new_users_helped();
}
inline void CSOTFPlayerInfo::clear_num_new_users_helped() {
  num_new_users_helped_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFPlayerInfo::_internal_num_new_users_helped() const {
  return num_new_users_helped_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFPlayerInfo::num_new_users_helped() const {
  // @@protoc_insertion_point(field_get:CSOTFPlayerInfo.num_new_users_helped)
  return _internal_num_new_users_helped();
}
inline void CSOTFPlayerInfo::_internal_set_num_new_users_helped(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  num_new_users_helped_ = value;
}
inline void CSOTFPlayerInfo::set_num_new_users_helped(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_new_users_helped(value);
  // @@protoc_insertion_point(field_set:CSOTFPlayerInfo.num_new_users_helped)
}

// -------------------------------------------------------------------

// CMsgTFThankedBySomeone

// optional uint64 thanker_steam_id = 1;
inline bool CMsgTFThankedBySomeone::_internal_has_thanker_steam_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgTFThankedBySomeone::has_thanker_steam_id() const {
  return _internal_has_thanker_steam_id();
}
inline void CMsgTFThankedBySomeone::clear_thanker_steam_id() {
  thanker_steam_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgTFThankedBySomeone::_internal_thanker_steam_id() const {
  return thanker_steam_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgTFThankedBySomeone::thanker_steam_id() const {
  // @@protoc_insertion_point(field_get:CMsgTFThankedBySomeone.thanker_steam_id)
  return _internal_thanker_steam_id();
}
inline void CMsgTFThankedBySomeone::_internal_set_thanker_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  thanker_steam_id_ = value;
}
inline void CMsgTFThankedBySomeone::set_thanker_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_thanker_steam_id(value);
  // @@protoc_insertion_point(field_set:CMsgTFThankedBySomeone.thanker_steam_id)
}

// -------------------------------------------------------------------

// CMsgTFThankedSomeone

// -------------------------------------------------------------------

// CMsgTFFreeTrialConvertedToPremium

// -------------------------------------------------------------------

// CMsgSaxxyAwarded

// optional uint32 category = 1;
inline bool CMsgSaxxyAwarded::_internal_has_category() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSaxxyAwarded::has_category() const {
  return _internal_has_category();
}
inline void CMsgSaxxyAwarded::clear_category() {
  category_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSaxxyAwarded::_internal_category() const {
  return category_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSaxxyAwarded::category() const {
  // @@protoc_insertion_point(field_get:CMsgSaxxyAwarded.category)
  return _internal_category();
}
inline void CMsgSaxxyAwarded::_internal_set_category(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  category_ = value;
}
inline void CMsgSaxxyAwarded::set_category(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_category(value);
  // @@protoc_insertion_point(field_set:CMsgSaxxyAwarded.category)
}

// repeated string winner_names = 2;
inline int CMsgSaxxyAwarded::_internal_winner_names_size() const {
  return winner_names_.size();
}
inline int CMsgSaxxyAwarded::winner_names_size() const {
  return _internal_winner_names_size();
}
inline void CMsgSaxxyAwarded::clear_winner_names() {
  winner_names_.Clear();
}
inline std::string* CMsgSaxxyAwarded::add_winner_names() {
  // @@protoc_insertion_point(field_add_mutable:CMsgSaxxyAwarded.winner_names)
  return _internal_add_winner_names();
}
inline const std::string& CMsgSaxxyAwarded::_internal_winner_names(int index) const {
  return winner_names_.Get(index);
}
inline const std::string& CMsgSaxxyAwarded::winner_names(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSaxxyAwarded.winner_names)
  return _internal_winner_names(index);
}
inline std::string* CMsgSaxxyAwarded::mutable_winner_names(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgSaxxyAwarded.winner_names)
  return winner_names_.Mutable(index);
}
inline void CMsgSaxxyAwarded::set_winner_names(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:CMsgSaxxyAwarded.winner_names)
  winner_names_.Mutable(index)->assign(value);
}
inline void CMsgSaxxyAwarded::set_winner_names(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:CMsgSaxxyAwarded.winner_names)
  winner_names_.Mutable(index)->assign(std::move(value));
}
inline void CMsgSaxxyAwarded::set_winner_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  winner_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgSaxxyAwarded.winner_names)
}
inline void CMsgSaxxyAwarded::set_winner_names(int index, const char* value, size_t size) {
  winner_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgSaxxyAwarded.winner_names)
}
inline std::string* CMsgSaxxyAwarded::_internal_add_winner_names() {
  return winner_names_.Add();
}
inline void CMsgSaxxyAwarded::add_winner_names(const std::string& value) {
  winner_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CMsgSaxxyAwarded.winner_names)
}
inline void CMsgSaxxyAwarded::add_winner_names(std::string&& value) {
  winner_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CMsgSaxxyAwarded.winner_names)
}
inline void CMsgSaxxyAwarded::add_winner_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  winner_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CMsgSaxxyAwarded.winner_names)
}
inline void CMsgSaxxyAwarded::add_winner_names(const char* value, size_t size) {
  winner_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CMsgSaxxyAwarded.winner_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CMsgSaxxyAwarded::winner_names() const {
  // @@protoc_insertion_point(field_list:CMsgSaxxyAwarded.winner_names)
  return winner_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CMsgSaxxyAwarded::mutable_winner_names() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSaxxyAwarded.winner_names)
  return &winner_names_;
}

// -------------------------------------------------------------------

// CMsgReplaySubmitContestEntry

// optional string youtube_url = 1;
inline bool CMsgReplaySubmitContestEntry::_internal_has_youtube_url() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgReplaySubmitContestEntry::has_youtube_url() const {
  return _internal_has_youtube_url();
}
inline void CMsgReplaySubmitContestEntry::clear_youtube_url() {
  youtube_url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgReplaySubmitContestEntry::youtube_url() const {
  // @@protoc_insertion_point(field_get:CMsgReplaySubmitContestEntry.youtube_url)
  return _internal_youtube_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgReplaySubmitContestEntry::set_youtube_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 youtube_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgReplaySubmitContestEntry.youtube_url)
}
inline std::string* CMsgReplaySubmitContestEntry::mutable_youtube_url() {
  // @@protoc_insertion_point(field_mutable:CMsgReplaySubmitContestEntry.youtube_url)
  return _internal_mutable_youtube_url();
}
inline const std::string& CMsgReplaySubmitContestEntry::_internal_youtube_url() const {
  return youtube_url_.Get();
}
inline void CMsgReplaySubmitContestEntry::_internal_set_youtube_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  youtube_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgReplaySubmitContestEntry::_internal_mutable_youtube_url() {
  _has_bits_[0] |= 0x00000001u;
  return youtube_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgReplaySubmitContestEntry::release_youtube_url() {
  // @@protoc_insertion_point(field_release:CMsgReplaySubmitContestEntry.youtube_url)
  if (!_internal_has_youtube_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return youtube_url_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CMsgReplaySubmitContestEntry::set_allocated_youtube_url(std::string* youtube_url) {
  if (youtube_url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  youtube_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), youtube_url,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CMsgReplaySubmitContestEntry.youtube_url)
}

// optional uint32 category = 2;
inline bool CMsgReplaySubmitContestEntry::_internal_has_category() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgReplaySubmitContestEntry::has_category() const {
  return _internal_has_category();
}
inline void CMsgReplaySubmitContestEntry::clear_category() {
  category_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgReplaySubmitContestEntry::_internal_category() const {
  return category_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgReplaySubmitContestEntry::category() const {
  // @@protoc_insertion_point(field_get:CMsgReplaySubmitContestEntry.category)
  return _internal_category();
}
inline void CMsgReplaySubmitContestEntry::_internal_set_category(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  category_ = value;
}
inline void CMsgReplaySubmitContestEntry::set_category(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_category(value);
  // @@protoc_insertion_point(field_set:CMsgReplaySubmitContestEntry.category)
}

// -------------------------------------------------------------------

// CMsgReplaySubmitContestEntryResponse

// optional bool success = 1;
inline bool CMsgReplaySubmitContestEntryResponse::_internal_has_success() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgReplaySubmitContestEntryResponse::has_success() const {
  return _internal_has_success();
}
inline void CMsgReplaySubmitContestEntryResponse::clear_success() {
  success_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CMsgReplaySubmitContestEntryResponse::_internal_success() const {
  return success_;
}
inline bool CMsgReplaySubmitContestEntryResponse::success() const {
  // @@protoc_insertion_point(field_get:CMsgReplaySubmitContestEntryResponse.success)
  return _internal_success();
}
inline void CMsgReplaySubmitContestEntryResponse::_internal_set_success(bool value) {
  _has_bits_[0] |= 0x00000001u;
  success_ = value;
}
inline void CMsgReplaySubmitContestEntryResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:CMsgReplaySubmitContestEntryResponse.success)
}

// -------------------------------------------------------------------

// CReplayCachedContestData

// optional fixed32 timestamp = 1;
inline bool CReplayCachedContestData::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CReplayCachedContestData::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void CReplayCachedContestData::clear_timestamp() {
  timestamp_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CReplayCachedContestData::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CReplayCachedContestData::timestamp() const {
  // @@protoc_insertion_point(field_get:CReplayCachedContestData.timestamp)
  return _internal_timestamp();
}
inline void CReplayCachedContestData::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  timestamp_ = value;
}
inline void CReplayCachedContestData::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:CReplayCachedContestData.timestamp)
}

// optional uint32 num_votes_last_day = 2;
inline bool CReplayCachedContestData::_internal_has_num_votes_last_day() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CReplayCachedContestData::has_num_votes_last_day() const {
  return _internal_has_num_votes_last_day();
}
inline void CReplayCachedContestData::clear_num_votes_last_day() {
  num_votes_last_day_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CReplayCachedContestData::_internal_num_votes_last_day() const {
  return num_votes_last_day_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CReplayCachedContestData::num_votes_last_day() const {
  // @@protoc_insertion_point(field_get:CReplayCachedContestData.num_votes_last_day)
  return _internal_num_votes_last_day();
}
inline void CReplayCachedContestData::_internal_set_num_votes_last_day(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  num_votes_last_day_ = value;
}
inline void CReplayCachedContestData::set_num_votes_last_day(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_votes_last_day(value);
  // @@protoc_insertion_point(field_set:CReplayCachedContestData.num_votes_last_day)
}

// repeated uint32 video_entry_ids = 3;
inline int CReplayCachedContestData::_internal_video_entry_ids_size() const {
  return video_entry_ids_.size();
}
inline int CReplayCachedContestData::video_entry_ids_size() const {
  return _internal_video_entry_ids_size();
}
inline void CReplayCachedContestData::clear_video_entry_ids() {
  video_entry_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CReplayCachedContestData::_internal_video_entry_ids(int index) const {
  return video_entry_ids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CReplayCachedContestData::video_entry_ids(int index) const {
  // @@protoc_insertion_point(field_get:CReplayCachedContestData.video_entry_ids)
  return _internal_video_entry_ids(index);
}
inline void CReplayCachedContestData::set_video_entry_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  video_entry_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CReplayCachedContestData.video_entry_ids)
}
inline void CReplayCachedContestData::_internal_add_video_entry_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  video_entry_ids_.Add(value);
}
inline void CReplayCachedContestData::add_video_entry_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_video_entry_ids(value);
  // @@protoc_insertion_point(field_add:CReplayCachedContestData.video_entry_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CReplayCachedContestData::_internal_video_entry_ids() const {
  return video_entry_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CReplayCachedContestData::video_entry_ids() const {
  // @@protoc_insertion_point(field_list:CReplayCachedContestData.video_entry_ids)
  return _internal_video_entry_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CReplayCachedContestData::_internal_mutable_video_entry_ids() {
  return &video_entry_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CReplayCachedContestData::mutable_video_entry_ids() {
  // @@protoc_insertion_point(field_mutable_list:CReplayCachedContestData.video_entry_ids)
  return _internal_mutable_video_entry_ids();
}

// optional uint32 num_flags_last_day = 4;
inline bool CReplayCachedContestData::_internal_has_num_flags_last_day() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CReplayCachedContestData::has_num_flags_last_day() const {
  return _internal_has_num_flags_last_day();
}
inline void CReplayCachedContestData::clear_num_flags_last_day() {
  num_flags_last_day_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CReplayCachedContestData::_internal_num_flags_last_day() const {
  return num_flags_last_day_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CReplayCachedContestData::num_flags_last_day() const {
  // @@protoc_insertion_point(field_get:CReplayCachedContestData.num_flags_last_day)
  return _internal_num_flags_last_day();
}
inline void CReplayCachedContestData::_internal_set_num_flags_last_day(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  num_flags_last_day_ = value;
}
inline void CReplayCachedContestData::set_num_flags_last_day(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_flags_last_day(value);
  // @@protoc_insertion_point(field_set:CReplayCachedContestData.num_flags_last_day)
}

// -------------------------------------------------------------------

// CMsgTFCoaching_AddToCoaches

// -------------------------------------------------------------------

// CMsgTFCoaching_RemoveFromCoaches

// -------------------------------------------------------------------

// CMsgTFCoaching_FindCoach

// optional uint32 account_id_friend_as_coach = 1;
inline bool CMsgTFCoaching_FindCoach::_internal_has_account_id_friend_as_coach() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgTFCoaching_FindCoach::has_account_id_friend_as_coach() const {
  return _internal_has_account_id_friend_as_coach();
}
inline void CMsgTFCoaching_FindCoach::clear_account_id_friend_as_coach() {
  account_id_friend_as_coach_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgTFCoaching_FindCoach::_internal_account_id_friend_as_coach() const {
  return account_id_friend_as_coach_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgTFCoaching_FindCoach::account_id_friend_as_coach() const {
  // @@protoc_insertion_point(field_get:CMsgTFCoaching_FindCoach.account_id_friend_as_coach)
  return _internal_account_id_friend_as_coach();
}
inline void CMsgTFCoaching_FindCoach::_internal_set_account_id_friend_as_coach(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  account_id_friend_as_coach_ = value;
}
inline void CMsgTFCoaching_FindCoach::set_account_id_friend_as_coach(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_account_id_friend_as_coach(value);
  // @@protoc_insertion_point(field_set:CMsgTFCoaching_FindCoach.account_id_friend_as_coach)
}

// -------------------------------------------------------------------

// CMsgTFCoaching_FindCoachResponse

// optional bool found_coach = 1;
inline bool CMsgTFCoaching_FindCoachResponse::_internal_has_found_coach() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgTFCoaching_FindCoachResponse::has_found_coach() const {
  return _internal_has_found_coach();
}
inline void CMsgTFCoaching_FindCoachResponse::clear_found_coach() {
  found_coach_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CMsgTFCoaching_FindCoachResponse::_internal_found_coach() const {
  return found_coach_;
}
inline bool CMsgTFCoaching_FindCoachResponse::found_coach() const {
  // @@protoc_insertion_point(field_get:CMsgTFCoaching_FindCoachResponse.found_coach)
  return _internal_found_coach();
}
inline void CMsgTFCoaching_FindCoachResponse::_internal_set_found_coach(bool value) {
  _has_bits_[0] |= 0x00000002u;
  found_coach_ = value;
}
inline void CMsgTFCoaching_FindCoachResponse::set_found_coach(bool value) {
  _internal_set_found_coach(value);
  // @@protoc_insertion_point(field_set:CMsgTFCoaching_FindCoachResponse.found_coach)
}

// optional uint32 num_likes = 2;
inline bool CMsgTFCoaching_FindCoachResponse::_internal_has_num_likes() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgTFCoaching_FindCoachResponse::has_num_likes() const {
  return _internal_has_num_likes();
}
inline void CMsgTFCoaching_FindCoachResponse::clear_num_likes() {
  num_likes_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgTFCoaching_FindCoachResponse::_internal_num_likes() const {
  return num_likes_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgTFCoaching_FindCoachResponse::num_likes() const {
  // @@protoc_insertion_point(field_get:CMsgTFCoaching_FindCoachResponse.num_likes)
  return _internal_num_likes();
}
inline void CMsgTFCoaching_FindCoachResponse::_internal_set_num_likes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  num_likes_ = value;
}
inline void CMsgTFCoaching_FindCoachResponse::set_num_likes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_likes(value);
  // @@protoc_insertion_point(field_set:CMsgTFCoaching_FindCoachResponse.num_likes)
}

// optional string coach_name = 3;
inline bool CMsgTFCoaching_FindCoachResponse::_internal_has_coach_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgTFCoaching_FindCoachResponse::has_coach_name() const {
  return _internal_has_coach_name();
}
inline void CMsgTFCoaching_FindCoachResponse::clear_coach_name() {
  coach_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgTFCoaching_FindCoachResponse::coach_name() const {
  // @@protoc_insertion_point(field_get:CMsgTFCoaching_FindCoachResponse.coach_name)
  return _internal_coach_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgTFCoaching_FindCoachResponse::set_coach_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 coach_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgTFCoaching_FindCoachResponse.coach_name)
}
inline std::string* CMsgTFCoaching_FindCoachResponse::mutable_coach_name() {
  // @@protoc_insertion_point(field_mutable:CMsgTFCoaching_FindCoachResponse.coach_name)
  return _internal_mutable_coach_name();
}
inline const std::string& CMsgTFCoaching_FindCoachResponse::_internal_coach_name() const {
  return coach_name_.Get();
}
inline void CMsgTFCoaching_FindCoachResponse::_internal_set_coach_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  coach_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgTFCoaching_FindCoachResponse::_internal_mutable_coach_name() {
  _has_bits_[0] |= 0x00000001u;
  return coach_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgTFCoaching_FindCoachResponse::release_coach_name() {
  // @@protoc_insertion_point(field_release:CMsgTFCoaching_FindCoachResponse.coach_name)
  if (!_internal_has_coach_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return coach_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CMsgTFCoaching_FindCoachResponse::set_allocated_coach_name(std::string* coach_name) {
  if (coach_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  coach_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), coach_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CMsgTFCoaching_FindCoachResponse.coach_name)
}

// -------------------------------------------------------------------

// CMsgTFCoaching_AskCoach

// optional uint32 account_id_student = 1;
inline bool CMsgTFCoaching_AskCoach::_internal_has_account_id_student() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgTFCoaching_AskCoach::has_account_id_student() const {
  return _internal_has_account_id_student();
}
inline void CMsgTFCoaching_AskCoach::clear_account_id_student() {
  account_id_student_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgTFCoaching_AskCoach::_internal_account_id_student() const {
  return account_id_student_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgTFCoaching_AskCoach::account_id_student() const {
  // @@protoc_insertion_point(field_get:CMsgTFCoaching_AskCoach.account_id_student)
  return _internal_account_id_student();
}
inline void CMsgTFCoaching_AskCoach::_internal_set_account_id_student(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  account_id_student_ = value;
}
inline void CMsgTFCoaching_AskCoach::set_account_id_student(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_account_id_student(value);
  // @@protoc_insertion_point(field_set:CMsgTFCoaching_AskCoach.account_id_student)
}

// optional bool student_is_friend = 2;
inline bool CMsgTFCoaching_AskCoach::_internal_has_student_is_friend() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgTFCoaching_AskCoach::has_student_is_friend() const {
  return _internal_has_student_is_friend();
}
inline void CMsgTFCoaching_AskCoach::clear_student_is_friend() {
  student_is_friend_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CMsgTFCoaching_AskCoach::_internal_student_is_friend() const {
  return student_is_friend_;
}
inline bool CMsgTFCoaching_AskCoach::student_is_friend() const {
  // @@protoc_insertion_point(field_get:CMsgTFCoaching_AskCoach.student_is_friend)
  return _internal_student_is_friend();
}
inline void CMsgTFCoaching_AskCoach::_internal_set_student_is_friend(bool value) {
  _has_bits_[0] |= 0x00000002u;
  student_is_friend_ = value;
}
inline void CMsgTFCoaching_AskCoach::set_student_is_friend(bool value) {
  _internal_set_student_is_friend(value);
  // @@protoc_insertion_point(field_set:CMsgTFCoaching_AskCoach.student_is_friend)
}

// -------------------------------------------------------------------

// CMsgTFCoaching_AskCoachResponse

// optional bool accept_coaching_assignment = 1;
inline bool CMsgTFCoaching_AskCoachResponse::_internal_has_accept_coaching_assignment() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgTFCoaching_AskCoachResponse::has_accept_coaching_assignment() const {
  return _internal_has_accept_coaching_assignment();
}
inline void CMsgTFCoaching_AskCoachResponse::clear_accept_coaching_assignment() {
  accept_coaching_assignment_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CMsgTFCoaching_AskCoachResponse::_internal_accept_coaching_assignment() const {
  return accept_coaching_assignment_;
}
inline bool CMsgTFCoaching_AskCoachResponse::accept_coaching_assignment() const {
  // @@protoc_insertion_point(field_get:CMsgTFCoaching_AskCoachResponse.accept_coaching_assignment)
  return _internal_accept_coaching_assignment();
}
inline void CMsgTFCoaching_AskCoachResponse::_internal_set_accept_coaching_assignment(bool value) {
  _has_bits_[0] |= 0x00000001u;
  accept_coaching_assignment_ = value;
}
inline void CMsgTFCoaching_AskCoachResponse::set_accept_coaching_assignment(bool value) {
  _internal_set_accept_coaching_assignment(value);
  // @@protoc_insertion_point(field_set:CMsgTFCoaching_AskCoachResponse.accept_coaching_assignment)
}

// -------------------------------------------------------------------

// CMsgTFCoaching_CoachJoinGame

// optional bool join_game = 1;
inline bool CMsgTFCoaching_CoachJoinGame::_internal_has_join_game() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgTFCoaching_CoachJoinGame::has_join_game() const {
  return _internal_has_join_game();
}
inline void CMsgTFCoaching_CoachJoinGame::clear_join_game() {
  join_game_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CMsgTFCoaching_CoachJoinGame::_internal_join_game() const {
  return join_game_;
}
inline bool CMsgTFCoaching_CoachJoinGame::join_game() const {
  // @@protoc_insertion_point(field_get:CMsgTFCoaching_CoachJoinGame.join_game)
  return _internal_join_game();
}
inline void CMsgTFCoaching_CoachJoinGame::_internal_set_join_game(bool value) {
  _has_bits_[0] |= 0x00000001u;
  join_game_ = value;
}
inline void CMsgTFCoaching_CoachJoinGame::set_join_game(bool value) {
  _internal_set_join_game(value);
  // @@protoc_insertion_point(field_set:CMsgTFCoaching_CoachJoinGame.join_game)
}

// optional uint32 server_address = 2;
inline bool CMsgTFCoaching_CoachJoinGame::_internal_has_server_address() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgTFCoaching_CoachJoinGame::has_server_address() const {
  return _internal_has_server_address();
}
inline void CMsgTFCoaching_CoachJoinGame::clear_server_address() {
  server_address_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgTFCoaching_CoachJoinGame::_internal_server_address() const {
  return server_address_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgTFCoaching_CoachJoinGame::server_address() const {
  // @@protoc_insertion_point(field_get:CMsgTFCoaching_CoachJoinGame.server_address)
  return _internal_server_address();
}
inline void CMsgTFCoaching_CoachJoinGame::_internal_set_server_address(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  server_address_ = value;
}
inline void CMsgTFCoaching_CoachJoinGame::set_server_address(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_server_address(value);
  // @@protoc_insertion_point(field_set:CMsgTFCoaching_CoachJoinGame.server_address)
}

// optional uint32 server_port = 3;
inline bool CMsgTFCoaching_CoachJoinGame::_internal_has_server_port() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgTFCoaching_CoachJoinGame::has_server_port() const {
  return _internal_has_server_port();
}
inline void CMsgTFCoaching_CoachJoinGame::clear_server_port() {
  server_port_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgTFCoaching_CoachJoinGame::_internal_server_port() const {
  return server_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgTFCoaching_CoachJoinGame::server_port() const {
  // @@protoc_insertion_point(field_get:CMsgTFCoaching_CoachJoinGame.server_port)
  return _internal_server_port();
}
inline void CMsgTFCoaching_CoachJoinGame::_internal_set_server_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  server_port_ = value;
}
inline void CMsgTFCoaching_CoachJoinGame::set_server_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_server_port(value);
  // @@protoc_insertion_point(field_set:CMsgTFCoaching_CoachJoinGame.server_port)
}

// optional uint32 account_id_student = 4;
inline bool CMsgTFCoaching_CoachJoinGame::_internal_has_account_id_student() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgTFCoaching_CoachJoinGame::has_account_id_student() const {
  return _internal_has_account_id_student();
}
inline void CMsgTFCoaching_CoachJoinGame::clear_account_id_student() {
  account_id_student_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgTFCoaching_CoachJoinGame::_internal_account_id_student() const {
  return account_id_student_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgTFCoaching_CoachJoinGame::account_id_student() const {
  // @@protoc_insertion_point(field_get:CMsgTFCoaching_CoachJoinGame.account_id_student)
  return _internal_account_id_student();
}
inline void CMsgTFCoaching_CoachJoinGame::_internal_set_account_id_student(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  account_id_student_ = value;
}
inline void CMsgTFCoaching_CoachJoinGame::set_account_id_student(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_account_id_student(value);
  // @@protoc_insertion_point(field_set:CMsgTFCoaching_CoachJoinGame.account_id_student)
}

// -------------------------------------------------------------------

// CMsgTFCoaching_CoachJoining

// optional uint32 account_id_coach = 1;
inline bool CMsgTFCoaching_CoachJoining::_internal_has_account_id_coach() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgTFCoaching_CoachJoining::has_account_id_coach() const {
  return _internal_has_account_id_coach();
}
inline void CMsgTFCoaching_CoachJoining::clear_account_id_coach() {
  account_id_coach_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgTFCoaching_CoachJoining::_internal_account_id_coach() const {
  return account_id_coach_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgTFCoaching_CoachJoining::account_id_coach() const {
  // @@protoc_insertion_point(field_get:CMsgTFCoaching_CoachJoining.account_id_coach)
  return _internal_account_id_coach();
}
inline void CMsgTFCoaching_CoachJoining::_internal_set_account_id_coach(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  account_id_coach_ = value;
}
inline void CMsgTFCoaching_CoachJoining::set_account_id_coach(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_account_id_coach(value);
  // @@protoc_insertion_point(field_set:CMsgTFCoaching_CoachJoining.account_id_coach)
}

// optional uint32 account_id_student = 2;
inline bool CMsgTFCoaching_CoachJoining::_internal_has_account_id_student() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgTFCoaching_CoachJoining::has_account_id_student() const {
  return _internal_has_account_id_student();
}
inline void CMsgTFCoaching_CoachJoining::clear_account_id_student() {
  account_id_student_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgTFCoaching_CoachJoining::_internal_account_id_student() const {
  return account_id_student_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgTFCoaching_CoachJoining::account_id_student() const {
  // @@protoc_insertion_point(field_get:CMsgTFCoaching_CoachJoining.account_id_student)
  return _internal_account_id_student();
}
inline void CMsgTFCoaching_CoachJoining::_internal_set_account_id_student(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  account_id_student_ = value;
}
inline void CMsgTFCoaching_CoachJoining::set_account_id_student(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_account_id_student(value);
  // @@protoc_insertion_point(field_set:CMsgTFCoaching_CoachJoining.account_id_student)
}

// -------------------------------------------------------------------

// CMsgTFCoaching_CoachJoined

// optional uint32 account_id_coach = 1;
inline bool CMsgTFCoaching_CoachJoined::_internal_has_account_id_coach() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgTFCoaching_CoachJoined::has_account_id_coach() const {
  return _internal_has_account_id_coach();
}
inline void CMsgTFCoaching_CoachJoined::clear_account_id_coach() {
  account_id_coach_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgTFCoaching_CoachJoined::_internal_account_id_coach() const {
  return account_id_coach_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgTFCoaching_CoachJoined::account_id_coach() const {
  // @@protoc_insertion_point(field_get:CMsgTFCoaching_CoachJoined.account_id_coach)
  return _internal_account_id_coach();
}
inline void CMsgTFCoaching_CoachJoined::_internal_set_account_id_coach(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  account_id_coach_ = value;
}
inline void CMsgTFCoaching_CoachJoined::set_account_id_coach(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_account_id_coach(value);
  // @@protoc_insertion_point(field_set:CMsgTFCoaching_CoachJoined.account_id_coach)
}

// -------------------------------------------------------------------

// CMsgTFCoaching_LikeCurrentCoach

// optional bool like_coach = 1;
inline bool CMsgTFCoaching_LikeCurrentCoach::_internal_has_like_coach() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgTFCoaching_LikeCurrentCoach::has_like_coach() const {
  return _internal_has_like_coach();
}
inline void CMsgTFCoaching_LikeCurrentCoach::clear_like_coach() {
  like_coach_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CMsgTFCoaching_LikeCurrentCoach::_internal_like_coach() const {
  return like_coach_;
}
inline bool CMsgTFCoaching_LikeCurrentCoach::like_coach() const {
  // @@protoc_insertion_point(field_get:CMsgTFCoaching_LikeCurrentCoach.like_coach)
  return _internal_like_coach();
}
inline void CMsgTFCoaching_LikeCurrentCoach::_internal_set_like_coach(bool value) {
  _has_bits_[0] |= 0x00000001u;
  like_coach_ = value;
}
inline void CMsgTFCoaching_LikeCurrentCoach::set_like_coach(bool value) {
  _internal_set_like_coach(value);
  // @@protoc_insertion_point(field_set:CMsgTFCoaching_LikeCurrentCoach.like_coach)
}

// -------------------------------------------------------------------

// CMsgTFCoaching_RemoveCurrentCoach

// optional uint32 account_id_coach = 1;
inline bool CMsgTFCoaching_RemoveCurrentCoach::_internal_has_account_id_coach() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgTFCoaching_RemoveCurrentCoach::has_account_id_coach() const {
  return _internal_has_account_id_coach();
}
inline void CMsgTFCoaching_RemoveCurrentCoach::clear_account_id_coach() {
  account_id_coach_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgTFCoaching_RemoveCurrentCoach::_internal_account_id_coach() const {
  return account_id_coach_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgTFCoaching_RemoveCurrentCoach::account_id_coach() const {
  // @@protoc_insertion_point(field_get:CMsgTFCoaching_RemoveCurrentCoach.account_id_coach)
  return _internal_account_id_coach();
}
inline void CMsgTFCoaching_RemoveCurrentCoach::_internal_set_account_id_coach(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  account_id_coach_ = value;
}
inline void CMsgTFCoaching_RemoveCurrentCoach::set_account_id_coach(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_account_id_coach(value);
  // @@protoc_insertion_point(field_set:CMsgTFCoaching_RemoveCurrentCoach.account_id_coach)
}

// -------------------------------------------------------------------

// CMsgTFQuickplay_ScoreServers_ServerInfo

// optional uint32 server_address = 1;
inline bool CMsgTFQuickplay_ScoreServers_ServerInfo::_internal_has_server_address() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgTFQuickplay_ScoreServers_ServerInfo::has_server_address() const {
  return _internal_has_server_address();
}
inline void CMsgTFQuickplay_ScoreServers_ServerInfo::clear_server_address() {
  server_address_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgTFQuickplay_ScoreServers_ServerInfo::_internal_server_address() const {
  return server_address_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgTFQuickplay_ScoreServers_ServerInfo::server_address() const {
  // @@protoc_insertion_point(field_get:CMsgTFQuickplay_ScoreServers.ServerInfo.server_address)
  return _internal_server_address();
}
inline void CMsgTFQuickplay_ScoreServers_ServerInfo::_internal_set_server_address(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  server_address_ = value;
}
inline void CMsgTFQuickplay_ScoreServers_ServerInfo::set_server_address(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_server_address(value);
  // @@protoc_insertion_point(field_set:CMsgTFQuickplay_ScoreServers.ServerInfo.server_address)
}

// optional uint32 server_port = 2;
inline bool CMsgTFQuickplay_ScoreServers_ServerInfo::_internal_has_server_port() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgTFQuickplay_ScoreServers_ServerInfo::has_server_port() const {
  return _internal_has_server_port();
}
inline void CMsgTFQuickplay_ScoreServers_ServerInfo::clear_server_port() {
  server_port_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgTFQuickplay_ScoreServers_ServerInfo::_internal_server_port() const {
  return server_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgTFQuickplay_ScoreServers_ServerInfo::server_port() const {
  // @@protoc_insertion_point(field_get:CMsgTFQuickplay_ScoreServers.ServerInfo.server_port)
  return _internal_server_port();
}
inline void CMsgTFQuickplay_ScoreServers_ServerInfo::_internal_set_server_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  server_port_ = value;
}
inline void CMsgTFQuickplay_ScoreServers_ServerInfo::set_server_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_server_port(value);
  // @@protoc_insertion_point(field_set:CMsgTFQuickplay_ScoreServers.ServerInfo.server_port)
}

// optional uint32 num_users = 3;
inline bool CMsgTFQuickplay_ScoreServers_ServerInfo::_internal_has_num_users() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgTFQuickplay_ScoreServers_ServerInfo::has_num_users() const {
  return _internal_has_num_users();
}
inline void CMsgTFQuickplay_ScoreServers_ServerInfo::clear_num_users() {
  num_users_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgTFQuickplay_ScoreServers_ServerInfo::_internal_num_users() const {
  return num_users_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgTFQuickplay_ScoreServers_ServerInfo::num_users() const {
  // @@protoc_insertion_point(field_get:CMsgTFQuickplay_ScoreServers.ServerInfo.num_users)
  return _internal_num_users();
}
inline void CMsgTFQuickplay_ScoreServers_ServerInfo::_internal_set_num_users(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  num_users_ = value;
}
inline void CMsgTFQuickplay_ScoreServers_ServerInfo::set_num_users(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_users(value);
  // @@protoc_insertion_point(field_set:CMsgTFQuickplay_ScoreServers.ServerInfo.num_users)
}

// optional uint64 steam_id = 4;
inline bool CMsgTFQuickplay_ScoreServers_ServerInfo::_internal_has_steam_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgTFQuickplay_ScoreServers_ServerInfo::has_steam_id() const {
  return _internal_has_steam_id();
}
inline void CMsgTFQuickplay_ScoreServers_ServerInfo::clear_steam_id() {
  steam_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgTFQuickplay_ScoreServers_ServerInfo::_internal_steam_id() const {
  return steam_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgTFQuickplay_ScoreServers_ServerInfo::steam_id() const {
  // @@protoc_insertion_point(field_get:CMsgTFQuickplay_ScoreServers.ServerInfo.steam_id)
  return _internal_steam_id();
}
inline void CMsgTFQuickplay_ScoreServers_ServerInfo::_internal_set_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  steam_id_ = value;
}
inline void CMsgTFQuickplay_ScoreServers_ServerInfo::set_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_steam_id(value);
  // @@protoc_insertion_point(field_set:CMsgTFQuickplay_ScoreServers.ServerInfo.steam_id)
}

// optional uint32 max_users = 5;
inline bool CMsgTFQuickplay_ScoreServers_ServerInfo::_internal_has_max_users() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgTFQuickplay_ScoreServers_ServerInfo::has_max_users() const {
  return _internal_has_max_users();
}
inline void CMsgTFQuickplay_ScoreServers_ServerInfo::clear_max_users() {
  max_users_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgTFQuickplay_ScoreServers_ServerInfo::_internal_max_users() const {
  return max_users_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgTFQuickplay_ScoreServers_ServerInfo::max_users() const {
  // @@protoc_insertion_point(field_get:CMsgTFQuickplay_ScoreServers.ServerInfo.max_users)
  return _internal_max_users();
}
inline void CMsgTFQuickplay_ScoreServers_ServerInfo::_internal_set_max_users(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  max_users_ = value;
}
inline void CMsgTFQuickplay_ScoreServers_ServerInfo::set_max_users(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_users(value);
  // @@protoc_insertion_point(field_set:CMsgTFQuickplay_ScoreServers.ServerInfo.max_users)
}

// optional float user_score = 6;
inline bool CMsgTFQuickplay_ScoreServers_ServerInfo::_internal_has_user_score() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgTFQuickplay_ScoreServers_ServerInfo::has_user_score() const {
  return _internal_has_user_score();
}
inline void CMsgTFQuickplay_ScoreServers_ServerInfo::clear_user_score() {
  user_score_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float CMsgTFQuickplay_ScoreServers_ServerInfo::_internal_user_score() const {
  return user_score_;
}
inline float CMsgTFQuickplay_ScoreServers_ServerInfo::user_score() const {
  // @@protoc_insertion_point(field_get:CMsgTFQuickplay_ScoreServers.ServerInfo.user_score)
  return _internal_user_score();
}
inline void CMsgTFQuickplay_ScoreServers_ServerInfo::_internal_set_user_score(float value) {
  _has_bits_[0] |= 0x00000020u;
  user_score_ = value;
}
inline void CMsgTFQuickplay_ScoreServers_ServerInfo::set_user_score(float value) {
  _internal_set_user_score(value);
  // @@protoc_insertion_point(field_set:CMsgTFQuickplay_ScoreServers.ServerInfo.user_score)
}

// -------------------------------------------------------------------

// CMsgTFQuickplay_ScoreServers

// repeated .CMsgTFQuickplay_ScoreServers.ServerInfo servers = 1;
inline int CMsgTFQuickplay_ScoreServers::_internal_servers_size() const {
  return servers_.size();
}
inline int CMsgTFQuickplay_ScoreServers::servers_size() const {
  return _internal_servers_size();
}
inline void CMsgTFQuickplay_ScoreServers::clear_servers() {
  servers_.Clear();
}
inline ::CMsgTFQuickplay_ScoreServers_ServerInfo* CMsgTFQuickplay_ScoreServers::mutable_servers(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgTFQuickplay_ScoreServers.servers)
  return servers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgTFQuickplay_ScoreServers_ServerInfo >*
CMsgTFQuickplay_ScoreServers::mutable_servers() {
  // @@protoc_insertion_point(field_mutable_list:CMsgTFQuickplay_ScoreServers.servers)
  return &servers_;
}
inline const ::CMsgTFQuickplay_ScoreServers_ServerInfo& CMsgTFQuickplay_ScoreServers::_internal_servers(int index) const {
  return servers_.Get(index);
}
inline const ::CMsgTFQuickplay_ScoreServers_ServerInfo& CMsgTFQuickplay_ScoreServers::servers(int index) const {
  // @@protoc_insertion_point(field_get:CMsgTFQuickplay_ScoreServers.servers)
  return _internal_servers(index);
}
inline ::CMsgTFQuickplay_ScoreServers_ServerInfo* CMsgTFQuickplay_ScoreServers::_internal_add_servers() {
  return servers_.Add();
}
inline ::CMsgTFQuickplay_ScoreServers_ServerInfo* CMsgTFQuickplay_ScoreServers::add_servers() {
  // @@protoc_insertion_point(field_add:CMsgTFQuickplay_ScoreServers.servers)
  return _internal_add_servers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgTFQuickplay_ScoreServers_ServerInfo >&
CMsgTFQuickplay_ScoreServers::servers() const {
  // @@protoc_insertion_point(field_list:CMsgTFQuickplay_ScoreServers.servers)
  return servers_;
}

// -------------------------------------------------------------------

// CMsgTFQuickplay_ScoreServersResponse_ServerInfo

// optional uint32 server_address = 1;
inline bool CMsgTFQuickplay_ScoreServersResponse_ServerInfo::_internal_has_server_address() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgTFQuickplay_ScoreServersResponse_ServerInfo::has_server_address() const {
  return _internal_has_server_address();
}
inline void CMsgTFQuickplay_ScoreServersResponse_ServerInfo::clear_server_address() {
  server_address_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgTFQuickplay_ScoreServersResponse_ServerInfo::_internal_server_address() const {
  return server_address_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgTFQuickplay_ScoreServersResponse_ServerInfo::server_address() const {
  // @@protoc_insertion_point(field_get:CMsgTFQuickplay_ScoreServersResponse.ServerInfo.server_address)
  return _internal_server_address();
}
inline void CMsgTFQuickplay_ScoreServersResponse_ServerInfo::_internal_set_server_address(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  server_address_ = value;
}
inline void CMsgTFQuickplay_ScoreServersResponse_ServerInfo::set_server_address(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_server_address(value);
  // @@protoc_insertion_point(field_set:CMsgTFQuickplay_ScoreServersResponse.ServerInfo.server_address)
}

// optional uint32 server_port = 2;
inline bool CMsgTFQuickplay_ScoreServersResponse_ServerInfo::_internal_has_server_port() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgTFQuickplay_ScoreServersResponse_ServerInfo::has_server_port() const {
  return _internal_has_server_port();
}
inline void CMsgTFQuickplay_ScoreServersResponse_ServerInfo::clear_server_port() {
  server_port_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgTFQuickplay_ScoreServersResponse_ServerInfo::_internal_server_port() const {
  return server_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgTFQuickplay_ScoreServersResponse_ServerInfo::server_port() const {
  // @@protoc_insertion_point(field_get:CMsgTFQuickplay_ScoreServersResponse.ServerInfo.server_port)
  return _internal_server_port();
}
inline void CMsgTFQuickplay_ScoreServersResponse_ServerInfo::_internal_set_server_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  server_port_ = value;
}
inline void CMsgTFQuickplay_ScoreServersResponse_ServerInfo::set_server_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_server_port(value);
  // @@protoc_insertion_point(field_set:CMsgTFQuickplay_ScoreServersResponse.ServerInfo.server_port)
}

// optional float total_score = 3;
inline bool CMsgTFQuickplay_ScoreServersResponse_ServerInfo::_internal_has_total_score() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgTFQuickplay_ScoreServersResponse_ServerInfo::has_total_score() const {
  return _internal_has_total_score();
}
inline void CMsgTFQuickplay_ScoreServersResponse_ServerInfo::clear_total_score() {
  total_score_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float CMsgTFQuickplay_ScoreServersResponse_ServerInfo::_internal_total_score() const {
  return total_score_;
}
inline float CMsgTFQuickplay_ScoreServersResponse_ServerInfo::total_score() const {
  // @@protoc_insertion_point(field_get:CMsgTFQuickplay_ScoreServersResponse.ServerInfo.total_score)
  return _internal_total_score();
}
inline void CMsgTFQuickplay_ScoreServersResponse_ServerInfo::_internal_set_total_score(float value) {
  _has_bits_[0] |= 0x00000008u;
  total_score_ = value;
}
inline void CMsgTFQuickplay_ScoreServersResponse_ServerInfo::set_total_score(float value) {
  _internal_set_total_score(value);
  // @@protoc_insertion_point(field_set:CMsgTFQuickplay_ScoreServersResponse.ServerInfo.total_score)
}

// optional uint64 steam_id = 4;
inline bool CMsgTFQuickplay_ScoreServersResponse_ServerInfo::_internal_has_steam_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgTFQuickplay_ScoreServersResponse_ServerInfo::has_steam_id() const {
  return _internal_has_steam_id();
}
inline void CMsgTFQuickplay_ScoreServersResponse_ServerInfo::clear_steam_id() {
  steam_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgTFQuickplay_ScoreServersResponse_ServerInfo::_internal_steam_id() const {
  return steam_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgTFQuickplay_ScoreServersResponse_ServerInfo::steam_id() const {
  // @@protoc_insertion_point(field_get:CMsgTFQuickplay_ScoreServersResponse.ServerInfo.steam_id)
  return _internal_steam_id();
}
inline void CMsgTFQuickplay_ScoreServersResponse_ServerInfo::_internal_set_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  steam_id_ = value;
}
inline void CMsgTFQuickplay_ScoreServersResponse_ServerInfo::set_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_steam_id(value);
  // @@protoc_insertion_point(field_set:CMsgTFQuickplay_ScoreServersResponse.ServerInfo.steam_id)
}

// optional uint32 options_score = 5;
inline bool CMsgTFQuickplay_ScoreServersResponse_ServerInfo::_internal_has_options_score() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgTFQuickplay_ScoreServersResponse_ServerInfo::has_options_score() const {
  return _internal_has_options_score();
}
inline void CMsgTFQuickplay_ScoreServersResponse_ServerInfo::clear_options_score() {
  options_score_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgTFQuickplay_ScoreServersResponse_ServerInfo::_internal_options_score() const {
  return options_score_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgTFQuickplay_ScoreServersResponse_ServerInfo::options_score() const {
  // @@protoc_insertion_point(field_get:CMsgTFQuickplay_ScoreServersResponse.ServerInfo.options_score)
  return _internal_options_score();
}
inline void CMsgTFQuickplay_ScoreServersResponse_ServerInfo::_internal_set_options_score(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  options_score_ = value;
}
inline void CMsgTFQuickplay_ScoreServersResponse_ServerInfo::set_options_score(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_options_score(value);
  // @@protoc_insertion_point(field_set:CMsgTFQuickplay_ScoreServersResponse.ServerInfo.options_score)
}

// -------------------------------------------------------------------

// CMsgTFQuickplay_ScoreServersResponse

// repeated .CMsgTFQuickplay_ScoreServersResponse.ServerInfo servers = 1;
inline int CMsgTFQuickplay_ScoreServersResponse::_internal_servers_size() const {
  return servers_.size();
}
inline int CMsgTFQuickplay_ScoreServersResponse::servers_size() const {
  return _internal_servers_size();
}
inline void CMsgTFQuickplay_ScoreServersResponse::clear_servers() {
  servers_.Clear();
}
inline ::CMsgTFQuickplay_ScoreServersResponse_ServerInfo* CMsgTFQuickplay_ScoreServersResponse::mutable_servers(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgTFQuickplay_ScoreServersResponse.servers)
  return servers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgTFQuickplay_ScoreServersResponse_ServerInfo >*
CMsgTFQuickplay_ScoreServersResponse::mutable_servers() {
  // @@protoc_insertion_point(field_mutable_list:CMsgTFQuickplay_ScoreServersResponse.servers)
  return &servers_;
}
inline const ::CMsgTFQuickplay_ScoreServersResponse_ServerInfo& CMsgTFQuickplay_ScoreServersResponse::_internal_servers(int index) const {
  return servers_.Get(index);
}
inline const ::CMsgTFQuickplay_ScoreServersResponse_ServerInfo& CMsgTFQuickplay_ScoreServersResponse::servers(int index) const {
  // @@protoc_insertion_point(field_get:CMsgTFQuickplay_ScoreServersResponse.servers)
  return _internal_servers(index);
}
inline ::CMsgTFQuickplay_ScoreServersResponse_ServerInfo* CMsgTFQuickplay_ScoreServersResponse::_internal_add_servers() {
  return servers_.Add();
}
inline ::CMsgTFQuickplay_ScoreServersResponse_ServerInfo* CMsgTFQuickplay_ScoreServersResponse::add_servers() {
  // @@protoc_insertion_point(field_add:CMsgTFQuickplay_ScoreServersResponse.servers)
  return _internal_add_servers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgTFQuickplay_ScoreServersResponse_ServerInfo >&
CMsgTFQuickplay_ScoreServersResponse::servers() const {
  // @@protoc_insertion_point(field_list:CMsgTFQuickplay_ScoreServersResponse.servers)
  return servers_;
}

// -------------------------------------------------------------------

// CMsgTFQuickplay_PlayerJoining

// optional uint32 account_id = 1;
inline bool CMsgTFQuickplay_PlayerJoining::_internal_has_account_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgTFQuickplay_PlayerJoining::has_account_id() const {
  return _internal_has_account_id();
}
inline void CMsgTFQuickplay_PlayerJoining::clear_account_id() {
  account_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgTFQuickplay_PlayerJoining::_internal_account_id() const {
  return account_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgTFQuickplay_PlayerJoining::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgTFQuickplay_PlayerJoining.account_id)
  return _internal_account_id();
}
inline void CMsgTFQuickplay_PlayerJoining::_internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  account_id_ = value;
}
inline void CMsgTFQuickplay_PlayerJoining::set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgTFQuickplay_PlayerJoining.account_id)
}

// -------------------------------------------------------------------

// CMsgGC_GameServer_LevelInfo

// optional bool level_loaded = 1;
inline bool CMsgGC_GameServer_LevelInfo::_internal_has_level_loaded() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGC_GameServer_LevelInfo::has_level_loaded() const {
  return _internal_has_level_loaded();
}
inline void CMsgGC_GameServer_LevelInfo::clear_level_loaded() {
  level_loaded_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CMsgGC_GameServer_LevelInfo::_internal_level_loaded() const {
  return level_loaded_;
}
inline bool CMsgGC_GameServer_LevelInfo::level_loaded() const {
  // @@protoc_insertion_point(field_get:CMsgGC_GameServer_LevelInfo.level_loaded)
  return _internal_level_loaded();
}
inline void CMsgGC_GameServer_LevelInfo::_internal_set_level_loaded(bool value) {
  _has_bits_[0] |= 0x00000002u;
  level_loaded_ = value;
}
inline void CMsgGC_GameServer_LevelInfo::set_level_loaded(bool value) {
  _internal_set_level_loaded(value);
  // @@protoc_insertion_point(field_set:CMsgGC_GameServer_LevelInfo.level_loaded)
}

// optional string level_name = 2;
inline bool CMsgGC_GameServer_LevelInfo::_internal_has_level_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGC_GameServer_LevelInfo::has_level_name() const {
  return _internal_has_level_name();
}
inline void CMsgGC_GameServer_LevelInfo::clear_level_name() {
  level_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgGC_GameServer_LevelInfo::level_name() const {
  // @@protoc_insertion_point(field_get:CMsgGC_GameServer_LevelInfo.level_name)
  return _internal_level_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgGC_GameServer_LevelInfo::set_level_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 level_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgGC_GameServer_LevelInfo.level_name)
}
inline std::string* CMsgGC_GameServer_LevelInfo::mutable_level_name() {
  // @@protoc_insertion_point(field_mutable:CMsgGC_GameServer_LevelInfo.level_name)
  return _internal_mutable_level_name();
}
inline const std::string& CMsgGC_GameServer_LevelInfo::_internal_level_name() const {
  return level_name_.Get();
}
inline void CMsgGC_GameServer_LevelInfo::_internal_set_level_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  level_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgGC_GameServer_LevelInfo::_internal_mutable_level_name() {
  _has_bits_[0] |= 0x00000001u;
  return level_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgGC_GameServer_LevelInfo::release_level_name() {
  // @@protoc_insertion_point(field_release:CMsgGC_GameServer_LevelInfo.level_name)
  if (!_internal_has_level_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return level_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CMsgGC_GameServer_LevelInfo::set_allocated_level_name(std::string* level_name) {
  if (level_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  level_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), level_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CMsgGC_GameServer_LevelInfo.level_name)
}

// -------------------------------------------------------------------

// CMsgGC_GameServer_AuthChallenge

// optional string challenge_string = 1;
inline bool CMsgGC_GameServer_AuthChallenge::_internal_has_challenge_string() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGC_GameServer_AuthChallenge::has_challenge_string() const {
  return _internal_has_challenge_string();
}
inline void CMsgGC_GameServer_AuthChallenge::clear_challenge_string() {
  challenge_string_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgGC_GameServer_AuthChallenge::challenge_string() const {
  // @@protoc_insertion_point(field_get:CMsgGC_GameServer_AuthChallenge.challenge_string)
  return _internal_challenge_string();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgGC_GameServer_AuthChallenge::set_challenge_string(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 challenge_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgGC_GameServer_AuthChallenge.challenge_string)
}
inline std::string* CMsgGC_GameServer_AuthChallenge::mutable_challenge_string() {
  // @@protoc_insertion_point(field_mutable:CMsgGC_GameServer_AuthChallenge.challenge_string)
  return _internal_mutable_challenge_string();
}
inline const std::string& CMsgGC_GameServer_AuthChallenge::_internal_challenge_string() const {
  return challenge_string_.Get();
}
inline void CMsgGC_GameServer_AuthChallenge::_internal_set_challenge_string(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  challenge_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgGC_GameServer_AuthChallenge::_internal_mutable_challenge_string() {
  _has_bits_[0] |= 0x00000001u;
  return challenge_string_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgGC_GameServer_AuthChallenge::release_challenge_string() {
  // @@protoc_insertion_point(field_release:CMsgGC_GameServer_AuthChallenge.challenge_string)
  if (!_internal_has_challenge_string()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return challenge_string_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CMsgGC_GameServer_AuthChallenge::set_allocated_challenge_string(std::string* challenge_string) {
  if (challenge_string != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  challenge_string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), challenge_string,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CMsgGC_GameServer_AuthChallenge.challenge_string)
}

// -------------------------------------------------------------------

// CMsgGC_GameServer_AuthResult

// optional bool authenticated = 1;
inline bool CMsgGC_GameServer_AuthResult::_internal_has_authenticated() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGC_GameServer_AuthResult::has_authenticated() const {
  return _internal_has_authenticated();
}
inline void CMsgGC_GameServer_AuthResult::clear_authenticated() {
  authenticated_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CMsgGC_GameServer_AuthResult::_internal_authenticated() const {
  return authenticated_;
}
inline bool CMsgGC_GameServer_AuthResult::authenticated() const {
  // @@protoc_insertion_point(field_get:CMsgGC_GameServer_AuthResult.authenticated)
  return _internal_authenticated();
}
inline void CMsgGC_GameServer_AuthResult::_internal_set_authenticated(bool value) {
  _has_bits_[0] |= 0x00000004u;
  authenticated_ = value;
}
inline void CMsgGC_GameServer_AuthResult::set_authenticated(bool value) {
  _internal_set_authenticated(value);
  // @@protoc_insertion_point(field_set:CMsgGC_GameServer_AuthResult.authenticated)
}

// optional int32 game_server_standing = 2;
inline bool CMsgGC_GameServer_AuthResult::_internal_has_game_server_standing() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGC_GameServer_AuthResult::has_game_server_standing() const {
  return _internal_has_game_server_standing();
}
inline void CMsgGC_GameServer_AuthResult::clear_game_server_standing() {
  game_server_standing_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGC_GameServer_AuthResult::_internal_game_server_standing() const {
  return game_server_standing_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGC_GameServer_AuthResult::game_server_standing() const {
  // @@protoc_insertion_point(field_get:CMsgGC_GameServer_AuthResult.game_server_standing)
  return _internal_game_server_standing();
}
inline void CMsgGC_GameServer_AuthResult::_internal_set_game_server_standing(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  game_server_standing_ = value;
}
inline void CMsgGC_GameServer_AuthResult::set_game_server_standing(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_game_server_standing(value);
  // @@protoc_insertion_point(field_set:CMsgGC_GameServer_AuthResult.game_server_standing)
}

// optional int32 game_server_standing_trend = 3;
inline bool CMsgGC_GameServer_AuthResult::_internal_has_game_server_standing_trend() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgGC_GameServer_AuthResult::has_game_server_standing_trend() const {
  return _internal_has_game_server_standing_trend();
}
inline void CMsgGC_GameServer_AuthResult::clear_game_server_standing_trend() {
  game_server_standing_trend_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGC_GameServer_AuthResult::_internal_game_server_standing_trend() const {
  return game_server_standing_trend_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGC_GameServer_AuthResult::game_server_standing_trend() const {
  // @@protoc_insertion_point(field_get:CMsgGC_GameServer_AuthResult.game_server_standing_trend)
  return _internal_game_server_standing_trend();
}
inline void CMsgGC_GameServer_AuthResult::_internal_set_game_server_standing_trend(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  game_server_standing_trend_ = value;
}
inline void CMsgGC_GameServer_AuthResult::set_game_server_standing_trend(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_game_server_standing_trend(value);
  // @@protoc_insertion_point(field_set:CMsgGC_GameServer_AuthResult.game_server_standing_trend)
}

// optional bool is_valve_server = 4;
inline bool CMsgGC_GameServer_AuthResult::_internal_has_is_valve_server() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgGC_GameServer_AuthResult::has_is_valve_server() const {
  return _internal_has_is_valve_server();
}
inline void CMsgGC_GameServer_AuthResult::clear_is_valve_server() {
  is_valve_server_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CMsgGC_GameServer_AuthResult::_internal_is_valve_server() const {
  return is_valve_server_;
}
inline bool CMsgGC_GameServer_AuthResult::is_valve_server() const {
  // @@protoc_insertion_point(field_get:CMsgGC_GameServer_AuthResult.is_valve_server)
  return _internal_is_valve_server();
}
inline void CMsgGC_GameServer_AuthResult::_internal_set_is_valve_server(bool value) {
  _has_bits_[0] |= 0x00000008u;
  is_valve_server_ = value;
}
inline void CMsgGC_GameServer_AuthResult::set_is_valve_server(bool value) {
  _internal_set_is_valve_server(value);
  // @@protoc_insertion_point(field_set:CMsgGC_GameServer_AuthResult.is_valve_server)
}

// optional string message = 5;
inline bool CMsgGC_GameServer_AuthResult::_internal_has_message() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGC_GameServer_AuthResult::has_message() const {
  return _internal_has_message();
}
inline void CMsgGC_GameServer_AuthResult::clear_message() {
  message_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgGC_GameServer_AuthResult::message() const {
  // @@protoc_insertion_point(field_get:CMsgGC_GameServer_AuthResult.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgGC_GameServer_AuthResult::set_message(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgGC_GameServer_AuthResult.message)
}
inline std::string* CMsgGC_GameServer_AuthResult::mutable_message() {
  // @@protoc_insertion_point(field_mutable:CMsgGC_GameServer_AuthResult.message)
  return _internal_mutable_message();
}
inline const std::string& CMsgGC_GameServer_AuthResult::_internal_message() const {
  return message_.Get();
}
inline void CMsgGC_GameServer_AuthResult::_internal_set_message(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgGC_GameServer_AuthResult::_internal_mutable_message() {
  _has_bits_[0] |= 0x00000001u;
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgGC_GameServer_AuthResult::release_message() {
  // @@protoc_insertion_point(field_release:CMsgGC_GameServer_AuthResult.message)
  if (!_internal_has_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return message_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CMsgGC_GameServer_AuthResult::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CMsgGC_GameServer_AuthResult.message)
}

// -------------------------------------------------------------------

// CMsgGC_GameServer_AuthChallengeResponse

// optional uint32 game_server_account_id = 1;
inline bool CMsgGC_GameServer_AuthChallengeResponse::_internal_has_game_server_account_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGC_GameServer_AuthChallengeResponse::has_game_server_account_id() const {
  return _internal_has_game_server_account_id();
}
inline void CMsgGC_GameServer_AuthChallengeResponse::clear_game_server_account_id() {
  game_server_account_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_GameServer_AuthChallengeResponse::_internal_game_server_account_id() const {
  return game_server_account_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_GameServer_AuthChallengeResponse::game_server_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgGC_GameServer_AuthChallengeResponse.game_server_account_id)
  return _internal_game_server_account_id();
}
inline void CMsgGC_GameServer_AuthChallengeResponse::_internal_set_game_server_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  game_server_account_id_ = value;
}
inline void CMsgGC_GameServer_AuthChallengeResponse::set_game_server_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_game_server_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgGC_GameServer_AuthChallengeResponse.game_server_account_id)
}

// optional bytes hashed_challenge_string = 2;
inline bool CMsgGC_GameServer_AuthChallengeResponse::_internal_has_hashed_challenge_string() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGC_GameServer_AuthChallengeResponse::has_hashed_challenge_string() const {
  return _internal_has_hashed_challenge_string();
}
inline void CMsgGC_GameServer_AuthChallengeResponse::clear_hashed_challenge_string() {
  hashed_challenge_string_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgGC_GameServer_AuthChallengeResponse::hashed_challenge_string() const {
  // @@protoc_insertion_point(field_get:CMsgGC_GameServer_AuthChallengeResponse.hashed_challenge_string)
  return _internal_hashed_challenge_string();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgGC_GameServer_AuthChallengeResponse::set_hashed_challenge_string(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 hashed_challenge_string_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgGC_GameServer_AuthChallengeResponse.hashed_challenge_string)
}
inline std::string* CMsgGC_GameServer_AuthChallengeResponse::mutable_hashed_challenge_string() {
  // @@protoc_insertion_point(field_mutable:CMsgGC_GameServer_AuthChallengeResponse.hashed_challenge_string)
  return _internal_mutable_hashed_challenge_string();
}
inline const std::string& CMsgGC_GameServer_AuthChallengeResponse::_internal_hashed_challenge_string() const {
  return hashed_challenge_string_.Get();
}
inline void CMsgGC_GameServer_AuthChallengeResponse::_internal_set_hashed_challenge_string(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  hashed_challenge_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgGC_GameServer_AuthChallengeResponse::_internal_mutable_hashed_challenge_string() {
  _has_bits_[0] |= 0x00000001u;
  return hashed_challenge_string_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgGC_GameServer_AuthChallengeResponse::release_hashed_challenge_string() {
  // @@protoc_insertion_point(field_release:CMsgGC_GameServer_AuthChallengeResponse.hashed_challenge_string)
  if (!_internal_has_hashed_challenge_string()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return hashed_challenge_string_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CMsgGC_GameServer_AuthChallengeResponse::set_allocated_hashed_challenge_string(std::string* hashed_challenge_string) {
  if (hashed_challenge_string != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  hashed_challenge_string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hashed_challenge_string,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CMsgGC_GameServer_AuthChallengeResponse.hashed_challenge_string)
}

// -------------------------------------------------------------------

// CMsgGC_GameServer_CreateIdentity

// optional uint32 account_id = 1;
inline bool CMsgGC_GameServer_CreateIdentity::_internal_has_account_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGC_GameServer_CreateIdentity::has_account_id() const {
  return _internal_has_account_id();
}
inline void CMsgGC_GameServer_CreateIdentity::clear_account_id() {
  account_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_GameServer_CreateIdentity::_internal_account_id() const {
  return account_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_GameServer_CreateIdentity::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgGC_GameServer_CreateIdentity.account_id)
  return _internal_account_id();
}
inline void CMsgGC_GameServer_CreateIdentity::_internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  account_id_ = value;
}
inline void CMsgGC_GameServer_CreateIdentity::set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgGC_GameServer_CreateIdentity.account_id)
}

// -------------------------------------------------------------------

// CMsgGC_GameServer_CreateIdentityResponse

// optional bool account_created = 1;
inline bool CMsgGC_GameServer_CreateIdentityResponse::_internal_has_account_created() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGC_GameServer_CreateIdentityResponse::has_account_created() const {
  return _internal_has_account_created();
}
inline void CMsgGC_GameServer_CreateIdentityResponse::clear_account_created() {
  account_created_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CMsgGC_GameServer_CreateIdentityResponse::_internal_account_created() const {
  return account_created_;
}
inline bool CMsgGC_GameServer_CreateIdentityResponse::account_created() const {
  // @@protoc_insertion_point(field_get:CMsgGC_GameServer_CreateIdentityResponse.account_created)
  return _internal_account_created();
}
inline void CMsgGC_GameServer_CreateIdentityResponse::_internal_set_account_created(bool value) {
  _has_bits_[0] |= 0x00000002u;
  account_created_ = value;
}
inline void CMsgGC_GameServer_CreateIdentityResponse::set_account_created(bool value) {
  _internal_set_account_created(value);
  // @@protoc_insertion_point(field_set:CMsgGC_GameServer_CreateIdentityResponse.account_created)
}

// optional uint32 game_server_account_id = 2;
inline bool CMsgGC_GameServer_CreateIdentityResponse::_internal_has_game_server_account_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGC_GameServer_CreateIdentityResponse::has_game_server_account_id() const {
  return _internal_has_game_server_account_id();
}
inline void CMsgGC_GameServer_CreateIdentityResponse::clear_game_server_account_id() {
  game_server_account_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_GameServer_CreateIdentityResponse::_internal_game_server_account_id() const {
  return game_server_account_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_GameServer_CreateIdentityResponse::game_server_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgGC_GameServer_CreateIdentityResponse.game_server_account_id)
  return _internal_game_server_account_id();
}
inline void CMsgGC_GameServer_CreateIdentityResponse::_internal_set_game_server_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  game_server_account_id_ = value;
}
inline void CMsgGC_GameServer_CreateIdentityResponse::set_game_server_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_game_server_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgGC_GameServer_CreateIdentityResponse.game_server_account_id)
}

// optional string game_server_identity_token = 3;
inline bool CMsgGC_GameServer_CreateIdentityResponse::_internal_has_game_server_identity_token() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGC_GameServer_CreateIdentityResponse::has_game_server_identity_token() const {
  return _internal_has_game_server_identity_token();
}
inline void CMsgGC_GameServer_CreateIdentityResponse::clear_game_server_identity_token() {
  game_server_identity_token_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgGC_GameServer_CreateIdentityResponse::game_server_identity_token() const {
  // @@protoc_insertion_point(field_get:CMsgGC_GameServer_CreateIdentityResponse.game_server_identity_token)
  return _internal_game_server_identity_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgGC_GameServer_CreateIdentityResponse::set_game_server_identity_token(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 game_server_identity_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgGC_GameServer_CreateIdentityResponse.game_server_identity_token)
}
inline std::string* CMsgGC_GameServer_CreateIdentityResponse::mutable_game_server_identity_token() {
  // @@protoc_insertion_point(field_mutable:CMsgGC_GameServer_CreateIdentityResponse.game_server_identity_token)
  return _internal_mutable_game_server_identity_token();
}
inline const std::string& CMsgGC_GameServer_CreateIdentityResponse::_internal_game_server_identity_token() const {
  return game_server_identity_token_.Get();
}
inline void CMsgGC_GameServer_CreateIdentityResponse::_internal_set_game_server_identity_token(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  game_server_identity_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgGC_GameServer_CreateIdentityResponse::_internal_mutable_game_server_identity_token() {
  _has_bits_[0] |= 0x00000001u;
  return game_server_identity_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgGC_GameServer_CreateIdentityResponse::release_game_server_identity_token() {
  // @@protoc_insertion_point(field_release:CMsgGC_GameServer_CreateIdentityResponse.game_server_identity_token)
  if (!_internal_has_game_server_identity_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return game_server_identity_token_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CMsgGC_GameServer_CreateIdentityResponse::set_allocated_game_server_identity_token(std::string* game_server_identity_token) {
  if (game_server_identity_token != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  game_server_identity_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), game_server_identity_token,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CMsgGC_GameServer_CreateIdentityResponse.game_server_identity_token)
}

// optional .CMsgGC_GameServer_CreateIdentityResponse.EStatus status = 4 [default = kStatus_GenericFailure];
inline bool CMsgGC_GameServer_CreateIdentityResponse::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgGC_GameServer_CreateIdentityResponse::has_status() const {
  return _internal_has_status();
}
inline void CMsgGC_GameServer_CreateIdentityResponse::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::CMsgGC_GameServer_CreateIdentityResponse_EStatus CMsgGC_GameServer_CreateIdentityResponse::_internal_status() const {
  return static_cast< ::CMsgGC_GameServer_CreateIdentityResponse_EStatus >(status_);
}
inline ::CMsgGC_GameServer_CreateIdentityResponse_EStatus CMsgGC_GameServer_CreateIdentityResponse::status() const {
  // @@protoc_insertion_point(field_get:CMsgGC_GameServer_CreateIdentityResponse.status)
  return _internal_status();
}
inline void CMsgGC_GameServer_CreateIdentityResponse::_internal_set_status(::CMsgGC_GameServer_CreateIdentityResponse_EStatus value) {
  assert(::CMsgGC_GameServer_CreateIdentityResponse_EStatus_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  status_ = value;
}
inline void CMsgGC_GameServer_CreateIdentityResponse::set_status(::CMsgGC_GameServer_CreateIdentityResponse_EStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:CMsgGC_GameServer_CreateIdentityResponse.status)
}

// -------------------------------------------------------------------

// CMsgGC_GameServer_List

// optional uint32 account_id = 1;
inline bool CMsgGC_GameServer_List::_internal_has_account_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGC_GameServer_List::has_account_id() const {
  return _internal_has_account_id();
}
inline void CMsgGC_GameServer_List::clear_account_id() {
  account_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_GameServer_List::_internal_account_id() const {
  return account_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_GameServer_List::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgGC_GameServer_List.account_id)
  return _internal_account_id();
}
inline void CMsgGC_GameServer_List::_internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  account_id_ = value;
}
inline void CMsgGC_GameServer_List::set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgGC_GameServer_List.account_id)
}

// -------------------------------------------------------------------

// CMsgGC_GameServer_ListResponse_GameServerIdentity

// optional uint32 game_server_account_id = 1;
inline bool CMsgGC_GameServer_ListResponse_GameServerIdentity::_internal_has_game_server_account_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGC_GameServer_ListResponse_GameServerIdentity::has_game_server_account_id() const {
  return _internal_has_game_server_account_id();
}
inline void CMsgGC_GameServer_ListResponse_GameServerIdentity::clear_game_server_account_id() {
  game_server_account_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_GameServer_ListResponse_GameServerIdentity::_internal_game_server_account_id() const {
  return game_server_account_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_GameServer_ListResponse_GameServerIdentity::game_server_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgGC_GameServer_ListResponse.GameServerIdentity.game_server_account_id)
  return _internal_game_server_account_id();
}
inline void CMsgGC_GameServer_ListResponse_GameServerIdentity::_internal_set_game_server_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  game_server_account_id_ = value;
}
inline void CMsgGC_GameServer_ListResponse_GameServerIdentity::set_game_server_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_game_server_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgGC_GameServer_ListResponse.GameServerIdentity.game_server_account_id)
}

// optional string game_server_identity_token = 2;
inline bool CMsgGC_GameServer_ListResponse_GameServerIdentity::_internal_has_game_server_identity_token() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGC_GameServer_ListResponse_GameServerIdentity::has_game_server_identity_token() const {
  return _internal_has_game_server_identity_token();
}
inline void CMsgGC_GameServer_ListResponse_GameServerIdentity::clear_game_server_identity_token() {
  game_server_identity_token_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgGC_GameServer_ListResponse_GameServerIdentity::game_server_identity_token() const {
  // @@protoc_insertion_point(field_get:CMsgGC_GameServer_ListResponse.GameServerIdentity.game_server_identity_token)
  return _internal_game_server_identity_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgGC_GameServer_ListResponse_GameServerIdentity::set_game_server_identity_token(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 game_server_identity_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgGC_GameServer_ListResponse.GameServerIdentity.game_server_identity_token)
}
inline std::string* CMsgGC_GameServer_ListResponse_GameServerIdentity::mutable_game_server_identity_token() {
  // @@protoc_insertion_point(field_mutable:CMsgGC_GameServer_ListResponse.GameServerIdentity.game_server_identity_token)
  return _internal_mutable_game_server_identity_token();
}
inline const std::string& CMsgGC_GameServer_ListResponse_GameServerIdentity::_internal_game_server_identity_token() const {
  return game_server_identity_token_.Get();
}
inline void CMsgGC_GameServer_ListResponse_GameServerIdentity::_internal_set_game_server_identity_token(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  game_server_identity_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgGC_GameServer_ListResponse_GameServerIdentity::_internal_mutable_game_server_identity_token() {
  _has_bits_[0] |= 0x00000001u;
  return game_server_identity_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgGC_GameServer_ListResponse_GameServerIdentity::release_game_server_identity_token() {
  // @@protoc_insertion_point(field_release:CMsgGC_GameServer_ListResponse.GameServerIdentity.game_server_identity_token)
  if (!_internal_has_game_server_identity_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return game_server_identity_token_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CMsgGC_GameServer_ListResponse_GameServerIdentity::set_allocated_game_server_identity_token(std::string* game_server_identity_token) {
  if (game_server_identity_token != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  game_server_identity_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), game_server_identity_token,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CMsgGC_GameServer_ListResponse.GameServerIdentity.game_server_identity_token)
}

// optional int32 game_server_standing = 3;
inline bool CMsgGC_GameServer_ListResponse_GameServerIdentity::_internal_has_game_server_standing() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGC_GameServer_ListResponse_GameServerIdentity::has_game_server_standing() const {
  return _internal_has_game_server_standing();
}
inline void CMsgGC_GameServer_ListResponse_GameServerIdentity::clear_game_server_standing() {
  game_server_standing_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGC_GameServer_ListResponse_GameServerIdentity::_internal_game_server_standing() const {
  return game_server_standing_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGC_GameServer_ListResponse_GameServerIdentity::game_server_standing() const {
  // @@protoc_insertion_point(field_get:CMsgGC_GameServer_ListResponse.GameServerIdentity.game_server_standing)
  return _internal_game_server_standing();
}
inline void CMsgGC_GameServer_ListResponse_GameServerIdentity::_internal_set_game_server_standing(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  game_server_standing_ = value;
}
inline void CMsgGC_GameServer_ListResponse_GameServerIdentity::set_game_server_standing(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_game_server_standing(value);
  // @@protoc_insertion_point(field_set:CMsgGC_GameServer_ListResponse.GameServerIdentity.game_server_standing)
}

// optional int32 game_server_standing_trend = 4;
inline bool CMsgGC_GameServer_ListResponse_GameServerIdentity::_internal_has_game_server_standing_trend() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgGC_GameServer_ListResponse_GameServerIdentity::has_game_server_standing_trend() const {
  return _internal_has_game_server_standing_trend();
}
inline void CMsgGC_GameServer_ListResponse_GameServerIdentity::clear_game_server_standing_trend() {
  game_server_standing_trend_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGC_GameServer_ListResponse_GameServerIdentity::_internal_game_server_standing_trend() const {
  return game_server_standing_trend_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGC_GameServer_ListResponse_GameServerIdentity::game_server_standing_trend() const {
  // @@protoc_insertion_point(field_get:CMsgGC_GameServer_ListResponse.GameServerIdentity.game_server_standing_trend)
  return _internal_game_server_standing_trend();
}
inline void CMsgGC_GameServer_ListResponse_GameServerIdentity::_internal_set_game_server_standing_trend(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  game_server_standing_trend_ = value;
}
inline void CMsgGC_GameServer_ListResponse_GameServerIdentity::set_game_server_standing_trend(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_game_server_standing_trend(value);
  // @@protoc_insertion_point(field_set:CMsgGC_GameServer_ListResponse.GameServerIdentity.game_server_standing_trend)
}

// -------------------------------------------------------------------

// CMsgGC_GameServer_ListResponse

// repeated .CMsgGC_GameServer_ListResponse.GameServerIdentity owned_game_servers = 1;
inline int CMsgGC_GameServer_ListResponse::_internal_owned_game_servers_size() const {
  return owned_game_servers_.size();
}
inline int CMsgGC_GameServer_ListResponse::owned_game_servers_size() const {
  return _internal_owned_game_servers_size();
}
inline void CMsgGC_GameServer_ListResponse::clear_owned_game_servers() {
  owned_game_servers_.Clear();
}
inline ::CMsgGC_GameServer_ListResponse_GameServerIdentity* CMsgGC_GameServer_ListResponse::mutable_owned_game_servers(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGC_GameServer_ListResponse.owned_game_servers)
  return owned_game_servers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGC_GameServer_ListResponse_GameServerIdentity >*
CMsgGC_GameServer_ListResponse::mutable_owned_game_servers() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGC_GameServer_ListResponse.owned_game_servers)
  return &owned_game_servers_;
}
inline const ::CMsgGC_GameServer_ListResponse_GameServerIdentity& CMsgGC_GameServer_ListResponse::_internal_owned_game_servers(int index) const {
  return owned_game_servers_.Get(index);
}
inline const ::CMsgGC_GameServer_ListResponse_GameServerIdentity& CMsgGC_GameServer_ListResponse::owned_game_servers(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGC_GameServer_ListResponse.owned_game_servers)
  return _internal_owned_game_servers(index);
}
inline ::CMsgGC_GameServer_ListResponse_GameServerIdentity* CMsgGC_GameServer_ListResponse::_internal_add_owned_game_servers() {
  return owned_game_servers_.Add();
}
inline ::CMsgGC_GameServer_ListResponse_GameServerIdentity* CMsgGC_GameServer_ListResponse::add_owned_game_servers() {
  // @@protoc_insertion_point(field_add:CMsgGC_GameServer_ListResponse.owned_game_servers)
  return _internal_add_owned_game_servers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGC_GameServer_ListResponse_GameServerIdentity >&
CMsgGC_GameServer_ListResponse::owned_game_servers() const {
  // @@protoc_insertion_point(field_list:CMsgGC_GameServer_ListResponse.owned_game_servers)
  return owned_game_servers_;
}

// -------------------------------------------------------------------

// CMsgGC_GameServer_ResetIdentity

// optional uint32 game_server_account_id = 1;
inline bool CMsgGC_GameServer_ResetIdentity::_internal_has_game_server_account_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGC_GameServer_ResetIdentity::has_game_server_account_id() const {
  return _internal_has_game_server_account_id();
}
inline void CMsgGC_GameServer_ResetIdentity::clear_game_server_account_id() {
  game_server_account_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_GameServer_ResetIdentity::_internal_game_server_account_id() const {
  return game_server_account_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_GameServer_ResetIdentity::game_server_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgGC_GameServer_ResetIdentity.game_server_account_id)
  return _internal_game_server_account_id();
}
inline void CMsgGC_GameServer_ResetIdentity::_internal_set_game_server_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  game_server_account_id_ = value;
}
inline void CMsgGC_GameServer_ResetIdentity::set_game_server_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_game_server_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgGC_GameServer_ResetIdentity.game_server_account_id)
}

// -------------------------------------------------------------------

// CMsgGC_GameServer_ResetIdentityResponse

// optional bool game_server_identity_token_reset = 1;
inline bool CMsgGC_GameServer_ResetIdentityResponse::_internal_has_game_server_identity_token_reset() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGC_GameServer_ResetIdentityResponse::has_game_server_identity_token_reset() const {
  return _internal_has_game_server_identity_token_reset();
}
inline void CMsgGC_GameServer_ResetIdentityResponse::clear_game_server_identity_token_reset() {
  game_server_identity_token_reset_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CMsgGC_GameServer_ResetIdentityResponse::_internal_game_server_identity_token_reset() const {
  return game_server_identity_token_reset_;
}
inline bool CMsgGC_GameServer_ResetIdentityResponse::game_server_identity_token_reset() const {
  // @@protoc_insertion_point(field_get:CMsgGC_GameServer_ResetIdentityResponse.game_server_identity_token_reset)
  return _internal_game_server_identity_token_reset();
}
inline void CMsgGC_GameServer_ResetIdentityResponse::_internal_set_game_server_identity_token_reset(bool value) {
  _has_bits_[0] |= 0x00000002u;
  game_server_identity_token_reset_ = value;
}
inline void CMsgGC_GameServer_ResetIdentityResponse::set_game_server_identity_token_reset(bool value) {
  _internal_set_game_server_identity_token_reset(value);
  // @@protoc_insertion_point(field_set:CMsgGC_GameServer_ResetIdentityResponse.game_server_identity_token_reset)
}

// optional uint32 game_server_account_id = 2;
inline bool CMsgGC_GameServer_ResetIdentityResponse::_internal_has_game_server_account_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGC_GameServer_ResetIdentityResponse::has_game_server_account_id() const {
  return _internal_has_game_server_account_id();
}
inline void CMsgGC_GameServer_ResetIdentityResponse::clear_game_server_account_id() {
  game_server_account_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_GameServer_ResetIdentityResponse::_internal_game_server_account_id() const {
  return game_server_account_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_GameServer_ResetIdentityResponse::game_server_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgGC_GameServer_ResetIdentityResponse.game_server_account_id)
  return _internal_game_server_account_id();
}
inline void CMsgGC_GameServer_ResetIdentityResponse::_internal_set_game_server_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  game_server_account_id_ = value;
}
inline void CMsgGC_GameServer_ResetIdentityResponse::set_game_server_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_game_server_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgGC_GameServer_ResetIdentityResponse.game_server_account_id)
}

// optional string game_server_identity_token = 3;
inline bool CMsgGC_GameServer_ResetIdentityResponse::_internal_has_game_server_identity_token() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGC_GameServer_ResetIdentityResponse::has_game_server_identity_token() const {
  return _internal_has_game_server_identity_token();
}
inline void CMsgGC_GameServer_ResetIdentityResponse::clear_game_server_identity_token() {
  game_server_identity_token_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgGC_GameServer_ResetIdentityResponse::game_server_identity_token() const {
  // @@protoc_insertion_point(field_get:CMsgGC_GameServer_ResetIdentityResponse.game_server_identity_token)
  return _internal_game_server_identity_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgGC_GameServer_ResetIdentityResponse::set_game_server_identity_token(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 game_server_identity_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgGC_GameServer_ResetIdentityResponse.game_server_identity_token)
}
inline std::string* CMsgGC_GameServer_ResetIdentityResponse::mutable_game_server_identity_token() {
  // @@protoc_insertion_point(field_mutable:CMsgGC_GameServer_ResetIdentityResponse.game_server_identity_token)
  return _internal_mutable_game_server_identity_token();
}
inline const std::string& CMsgGC_GameServer_ResetIdentityResponse::_internal_game_server_identity_token() const {
  return game_server_identity_token_.Get();
}
inline void CMsgGC_GameServer_ResetIdentityResponse::_internal_set_game_server_identity_token(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  game_server_identity_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgGC_GameServer_ResetIdentityResponse::_internal_mutable_game_server_identity_token() {
  _has_bits_[0] |= 0x00000001u;
  return game_server_identity_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgGC_GameServer_ResetIdentityResponse::release_game_server_identity_token() {
  // @@protoc_insertion_point(field_release:CMsgGC_GameServer_ResetIdentityResponse.game_server_identity_token)
  if (!_internal_has_game_server_identity_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return game_server_identity_token_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CMsgGC_GameServer_ResetIdentityResponse::set_allocated_game_server_identity_token(std::string* game_server_identity_token) {
  if (game_server_identity_token != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  game_server_identity_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), game_server_identity_token,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CMsgGC_GameServer_ResetIdentityResponse.game_server_identity_token)
}

// -------------------------------------------------------------------

// CMsgGC_GameServer_AckPolicy

// -------------------------------------------------------------------

// CMsgGC_GameServer_AckPolicyResponse

// optional uint32 result = 1;
inline bool CMsgGC_GameServer_AckPolicyResponse::_internal_has_result() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGC_GameServer_AckPolicyResponse::has_result() const {
  return _internal_has_result();
}
inline void CMsgGC_GameServer_AckPolicyResponse::clear_result() {
  result_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_GameServer_AckPolicyResponse::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_GameServer_AckPolicyResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgGC_GameServer_AckPolicyResponse.result)
  return _internal_result();
}
inline void CMsgGC_GameServer_AckPolicyResponse::_internal_set_result(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  result_ = value;
}
inline void CMsgGC_GameServer_AckPolicyResponse::set_result(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:CMsgGC_GameServer_AckPolicyResponse.result)
}

// optional string message = 2;
inline bool CMsgGC_GameServer_AckPolicyResponse::_internal_has_message() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGC_GameServer_AckPolicyResponse::has_message() const {
  return _internal_has_message();
}
inline void CMsgGC_GameServer_AckPolicyResponse::clear_message() {
  message_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgGC_GameServer_AckPolicyResponse::message() const {
  // @@protoc_insertion_point(field_get:CMsgGC_GameServer_AckPolicyResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgGC_GameServer_AckPolicyResponse::set_message(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgGC_GameServer_AckPolicyResponse.message)
}
inline std::string* CMsgGC_GameServer_AckPolicyResponse::mutable_message() {
  // @@protoc_insertion_point(field_mutable:CMsgGC_GameServer_AckPolicyResponse.message)
  return _internal_mutable_message();
}
inline const std::string& CMsgGC_GameServer_AckPolicyResponse::_internal_message() const {
  return message_.Get();
}
inline void CMsgGC_GameServer_AckPolicyResponse::_internal_set_message(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgGC_GameServer_AckPolicyResponse::_internal_mutable_message() {
  _has_bits_[0] |= 0x00000001u;
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgGC_GameServer_AckPolicyResponse::release_message() {
  // @@protoc_insertion_point(field_release:CMsgGC_GameServer_AckPolicyResponse.message)
  if (!_internal_has_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return message_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CMsgGC_GameServer_AckPolicyResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CMsgGC_GameServer_AckPolicyResponse.message)
}

// -------------------------------------------------------------------

// CMsgGC_Client_UseServerModificationItem

// optional uint64 item_id = 1;
inline bool CMsgGC_Client_UseServerModificationItem::_internal_has_item_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGC_Client_UseServerModificationItem::has_item_id() const {
  return _internal_has_item_id();
}
inline void CMsgGC_Client_UseServerModificationItem::clear_item_id() {
  item_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGC_Client_UseServerModificationItem::_internal_item_id() const {
  return item_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGC_Client_UseServerModificationItem::item_id() const {
  // @@protoc_insertion_point(field_get:CMsgGC_Client_UseServerModificationItem.item_id)
  return _internal_item_id();
}
inline void CMsgGC_Client_UseServerModificationItem::_internal_set_item_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  item_id_ = value;
}
inline void CMsgGC_Client_UseServerModificationItem::set_item_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_item_id(value);
  // @@protoc_insertion_point(field_set:CMsgGC_Client_UseServerModificationItem.item_id)
}

// -------------------------------------------------------------------

// CMsgGC_Client_UseServerModificationItem_Response

// optional .CMsgGC_Client_UseServerModificationItem_Response.EServerModificationItemResponse response_code = 1 [default = kServerModificationItemResponse_AlreadyInUse];
inline bool CMsgGC_Client_UseServerModificationItem_Response::_internal_has_response_code() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGC_Client_UseServerModificationItem_Response::has_response_code() const {
  return _internal_has_response_code();
}
inline void CMsgGC_Client_UseServerModificationItem_Response::clear_response_code() {
  response_code_ = 1;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse CMsgGC_Client_UseServerModificationItem_Response::_internal_response_code() const {
  return static_cast< ::CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse >(response_code_);
}
inline ::CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse CMsgGC_Client_UseServerModificationItem_Response::response_code() const {
  // @@protoc_insertion_point(field_get:CMsgGC_Client_UseServerModificationItem_Response.response_code)
  return _internal_response_code();
}
inline void CMsgGC_Client_UseServerModificationItem_Response::_internal_set_response_code(::CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse value) {
  assert(::CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  response_code_ = value;
}
inline void CMsgGC_Client_UseServerModificationItem_Response::set_response_code(::CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse value) {
  _internal_set_response_code(value);
  // @@protoc_insertion_point(field_set:CMsgGC_Client_UseServerModificationItem_Response.response_code)
}

// -------------------------------------------------------------------

// CMsgGC_GameServer_UseServerModificationItem

// optional .EServerModificationItemType modification_type = 1 [default = kGameServerModificationItem_Halloween];
inline bool CMsgGC_GameServer_UseServerModificationItem::_internal_has_modification_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGC_GameServer_UseServerModificationItem::has_modification_type() const {
  return _internal_has_modification_type();
}
inline void CMsgGC_GameServer_UseServerModificationItem::clear_modification_type() {
  modification_type_ = 1;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::EServerModificationItemType CMsgGC_GameServer_UseServerModificationItem::_internal_modification_type() const {
  return static_cast< ::EServerModificationItemType >(modification_type_);
}
inline ::EServerModificationItemType CMsgGC_GameServer_UseServerModificationItem::modification_type() const {
  // @@protoc_insertion_point(field_get:CMsgGC_GameServer_UseServerModificationItem.modification_type)
  return _internal_modification_type();
}
inline void CMsgGC_GameServer_UseServerModificationItem::_internal_set_modification_type(::EServerModificationItemType value) {
  assert(::EServerModificationItemType_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  modification_type_ = value;
}
inline void CMsgGC_GameServer_UseServerModificationItem::set_modification_type(::EServerModificationItemType value) {
  _internal_set_modification_type(value);
  // @@protoc_insertion_point(field_set:CMsgGC_GameServer_UseServerModificationItem.modification_type)
}

// -------------------------------------------------------------------

// CMsgGC_GameServer_UseServerModificationItem_Response

// optional .EServerModificationItemType modification_type = 1 [default = kGameServerModificationItem_Halloween];
inline bool CMsgGC_GameServer_UseServerModificationItem_Response::_internal_has_modification_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGC_GameServer_UseServerModificationItem_Response::has_modification_type() const {
  return _internal_has_modification_type();
}
inline void CMsgGC_GameServer_UseServerModificationItem_Response::clear_modification_type() {
  modification_type_ = 1;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::EServerModificationItemType CMsgGC_GameServer_UseServerModificationItem_Response::_internal_modification_type() const {
  return static_cast< ::EServerModificationItemType >(modification_type_);
}
inline ::EServerModificationItemType CMsgGC_GameServer_UseServerModificationItem_Response::modification_type() const {
  // @@protoc_insertion_point(field_get:CMsgGC_GameServer_UseServerModificationItem_Response.modification_type)
  return _internal_modification_type();
}
inline void CMsgGC_GameServer_UseServerModificationItem_Response::_internal_set_modification_type(::EServerModificationItemType value) {
  assert(::EServerModificationItemType_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  modification_type_ = value;
}
inline void CMsgGC_GameServer_UseServerModificationItem_Response::set_modification_type(::EServerModificationItemType value) {
  _internal_set_modification_type(value);
  // @@protoc_insertion_point(field_set:CMsgGC_GameServer_UseServerModificationItem_Response.modification_type)
}

// optional .CMsgGC_GameServer_UseServerModificationItem_Response.EServerModificationItemServerResponse server_response_code = 2 [default = kServerModificationItemServerResponse_Accepted];
inline bool CMsgGC_GameServer_UseServerModificationItem_Response::_internal_has_server_response_code() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGC_GameServer_UseServerModificationItem_Response::has_server_response_code() const {
  return _internal_has_server_response_code();
}
inline void CMsgGC_GameServer_UseServerModificationItem_Response::clear_server_response_code() {
  server_response_code_ = 1;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::CMsgGC_GameServer_UseServerModificationItem_Response_EServerModificationItemServerResponse CMsgGC_GameServer_UseServerModificationItem_Response::_internal_server_response_code() const {
  return static_cast< ::CMsgGC_GameServer_UseServerModificationItem_Response_EServerModificationItemServerResponse >(server_response_code_);
}
inline ::CMsgGC_GameServer_UseServerModificationItem_Response_EServerModificationItemServerResponse CMsgGC_GameServer_UseServerModificationItem_Response::server_response_code() const {
  // @@protoc_insertion_point(field_get:CMsgGC_GameServer_UseServerModificationItem_Response.server_response_code)
  return _internal_server_response_code();
}
inline void CMsgGC_GameServer_UseServerModificationItem_Response::_internal_set_server_response_code(::CMsgGC_GameServer_UseServerModificationItem_Response_EServerModificationItemServerResponse value) {
  assert(::CMsgGC_GameServer_UseServerModificationItem_Response_EServerModificationItemServerResponse_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  server_response_code_ = value;
}
inline void CMsgGC_GameServer_UseServerModificationItem_Response::set_server_response_code(::CMsgGC_GameServer_UseServerModificationItem_Response_EServerModificationItemServerResponse value) {
  _internal_set_server_response_code(value);
  // @@protoc_insertion_point(field_set:CMsgGC_GameServer_UseServerModificationItem_Response.server_response_code)
}

// -------------------------------------------------------------------

// CMsgGC_GameServer_ServerModificationItemExpired

// optional .EServerModificationItemType modification_type = 1 [default = kGameServerModificationItem_Halloween];
inline bool CMsgGC_GameServer_ServerModificationItemExpired::_internal_has_modification_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGC_GameServer_ServerModificationItemExpired::has_modification_type() const {
  return _internal_has_modification_type();
}
inline void CMsgGC_GameServer_ServerModificationItemExpired::clear_modification_type() {
  modification_type_ = 1;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::EServerModificationItemType CMsgGC_GameServer_ServerModificationItemExpired::_internal_modification_type() const {
  return static_cast< ::EServerModificationItemType >(modification_type_);
}
inline ::EServerModificationItemType CMsgGC_GameServer_ServerModificationItemExpired::modification_type() const {
  // @@protoc_insertion_point(field_get:CMsgGC_GameServer_ServerModificationItemExpired.modification_type)
  return _internal_modification_type();
}
inline void CMsgGC_GameServer_ServerModificationItemExpired::_internal_set_modification_type(::EServerModificationItemType value) {
  assert(::EServerModificationItemType_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  modification_type_ = value;
}
inline void CMsgGC_GameServer_ServerModificationItemExpired::set_modification_type(::EServerModificationItemType value) {
  _internal_set_modification_type(value);
  // @@protoc_insertion_point(field_set:CMsgGC_GameServer_ServerModificationItemExpired.modification_type)
}

// -------------------------------------------------------------------

// CMsgGC_GameServer_ServerModificationItem

// optional .EServerModificationItemType modification_type = 1 [default = kGameServerModificationItem_Halloween];
inline bool CMsgGC_GameServer_ServerModificationItem::_internal_has_modification_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGC_GameServer_ServerModificationItem::has_modification_type() const {
  return _internal_has_modification_type();
}
inline void CMsgGC_GameServer_ServerModificationItem::clear_modification_type() {
  modification_type_ = 1;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::EServerModificationItemType CMsgGC_GameServer_ServerModificationItem::_internal_modification_type() const {
  return static_cast< ::EServerModificationItemType >(modification_type_);
}
inline ::EServerModificationItemType CMsgGC_GameServer_ServerModificationItem::modification_type() const {
  // @@protoc_insertion_point(field_get:CMsgGC_GameServer_ServerModificationItem.modification_type)
  return _internal_modification_type();
}
inline void CMsgGC_GameServer_ServerModificationItem::_internal_set_modification_type(::EServerModificationItemType value) {
  assert(::EServerModificationItemType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  modification_type_ = value;
}
inline void CMsgGC_GameServer_ServerModificationItem::set_modification_type(::EServerModificationItemType value) {
  _internal_set_modification_type(value);
  // @@protoc_insertion_point(field_set:CMsgGC_GameServer_ServerModificationItem.modification_type)
}

// optional bool active = 2;
inline bool CMsgGC_GameServer_ServerModificationItem::_internal_has_active() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGC_GameServer_ServerModificationItem::has_active() const {
  return _internal_has_active();
}
inline void CMsgGC_GameServer_ServerModificationItem::clear_active() {
  active_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CMsgGC_GameServer_ServerModificationItem::_internal_active() const {
  return active_;
}
inline bool CMsgGC_GameServer_ServerModificationItem::active() const {
  // @@protoc_insertion_point(field_get:CMsgGC_GameServer_ServerModificationItem.active)
  return _internal_active();
}
inline void CMsgGC_GameServer_ServerModificationItem::_internal_set_active(bool value) {
  _has_bits_[0] |= 0x00000001u;
  active_ = value;
}
inline void CMsgGC_GameServer_ServerModificationItem::set_active(bool value) {
  _internal_set_active(value);
  // @@protoc_insertion_point(field_set:CMsgGC_GameServer_ServerModificationItem.active)
}

// -------------------------------------------------------------------

// CMsgGC_Halloween_ReservedItem

// repeated float x = 1;
inline int CMsgGC_Halloween_ReservedItem::_internal_x_size() const {
  return x_.size();
}
inline int CMsgGC_Halloween_ReservedItem::x_size() const {
  return _internal_x_size();
}
inline void CMsgGC_Halloween_ReservedItem::clear_x() {
  x_.Clear();
}
inline float CMsgGC_Halloween_ReservedItem::_internal_x(int index) const {
  return x_.Get(index);
}
inline float CMsgGC_Halloween_ReservedItem::x(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGC_Halloween_ReservedItem.x)
  return _internal_x(index);
}
inline void CMsgGC_Halloween_ReservedItem::set_x(int index, float value) {
  x_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGC_Halloween_ReservedItem.x)
}
inline void CMsgGC_Halloween_ReservedItem::_internal_add_x(float value) {
  x_.Add(value);
}
inline void CMsgGC_Halloween_ReservedItem::add_x(float value) {
  _internal_add_x(value);
  // @@protoc_insertion_point(field_add:CMsgGC_Halloween_ReservedItem.x)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CMsgGC_Halloween_ReservedItem::_internal_x() const {
  return x_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CMsgGC_Halloween_ReservedItem::x() const {
  // @@protoc_insertion_point(field_list:CMsgGC_Halloween_ReservedItem.x)
  return _internal_x();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CMsgGC_Halloween_ReservedItem::_internal_mutable_x() {
  return &x_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CMsgGC_Halloween_ReservedItem::mutable_x() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGC_Halloween_ReservedItem.x)
  return _internal_mutable_x();
}

// repeated float y = 2;
inline int CMsgGC_Halloween_ReservedItem::_internal_y_size() const {
  return y_.size();
}
inline int CMsgGC_Halloween_ReservedItem::y_size() const {
  return _internal_y_size();
}
inline void CMsgGC_Halloween_ReservedItem::clear_y() {
  y_.Clear();
}
inline float CMsgGC_Halloween_ReservedItem::_internal_y(int index) const {
  return y_.Get(index);
}
inline float CMsgGC_Halloween_ReservedItem::y(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGC_Halloween_ReservedItem.y)
  return _internal_y(index);
}
inline void CMsgGC_Halloween_ReservedItem::set_y(int index, float value) {
  y_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGC_Halloween_ReservedItem.y)
}
inline void CMsgGC_Halloween_ReservedItem::_internal_add_y(float value) {
  y_.Add(value);
}
inline void CMsgGC_Halloween_ReservedItem::add_y(float value) {
  _internal_add_y(value);
  // @@protoc_insertion_point(field_add:CMsgGC_Halloween_ReservedItem.y)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CMsgGC_Halloween_ReservedItem::_internal_y() const {
  return y_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CMsgGC_Halloween_ReservedItem::y() const {
  // @@protoc_insertion_point(field_list:CMsgGC_Halloween_ReservedItem.y)
  return _internal_y();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CMsgGC_Halloween_ReservedItem::_internal_mutable_y() {
  return &y_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CMsgGC_Halloween_ReservedItem::mutable_y() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGC_Halloween_ReservedItem.y)
  return _internal_mutable_y();
}

// repeated float z = 3;
inline int CMsgGC_Halloween_ReservedItem::_internal_z_size() const {
  return z_.size();
}
inline int CMsgGC_Halloween_ReservedItem::z_size() const {
  return _internal_z_size();
}
inline void CMsgGC_Halloween_ReservedItem::clear_z() {
  z_.Clear();
}
inline float CMsgGC_Halloween_ReservedItem::_internal_z(int index) const {
  return z_.Get(index);
}
inline float CMsgGC_Halloween_ReservedItem::z(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGC_Halloween_ReservedItem.z)
  return _internal_z(index);
}
inline void CMsgGC_Halloween_ReservedItem::set_z(int index, float value) {
  z_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGC_Halloween_ReservedItem.z)
}
inline void CMsgGC_Halloween_ReservedItem::_internal_add_z(float value) {
  z_.Add(value);
}
inline void CMsgGC_Halloween_ReservedItem::add_z(float value) {
  _internal_add_z(value);
  // @@protoc_insertion_point(field_add:CMsgGC_Halloween_ReservedItem.z)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CMsgGC_Halloween_ReservedItem::_internal_z() const {
  return z_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CMsgGC_Halloween_ReservedItem::z() const {
  // @@protoc_insertion_point(field_list:CMsgGC_Halloween_ReservedItem.z)
  return _internal_z();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CMsgGC_Halloween_ReservedItem::_internal_mutable_z() {
  return &z_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CMsgGC_Halloween_ReservedItem::mutable_z() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGC_Halloween_ReservedItem.z)
  return _internal_mutable_z();
}

// optional uint32 spawn_meta_info = 7;
inline bool CMsgGC_Halloween_ReservedItem::_internal_has_spawn_meta_info() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGC_Halloween_ReservedItem::has_spawn_meta_info() const {
  return _internal_has_spawn_meta_info();
}
inline void CMsgGC_Halloween_ReservedItem::clear_spawn_meta_info() {
  spawn_meta_info_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_Halloween_ReservedItem::_internal_spawn_meta_info() const {
  return spawn_meta_info_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_Halloween_ReservedItem::spawn_meta_info() const {
  // @@protoc_insertion_point(field_get:CMsgGC_Halloween_ReservedItem.spawn_meta_info)
  return _internal_spawn_meta_info();
}
inline void CMsgGC_Halloween_ReservedItem::_internal_set_spawn_meta_info(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  spawn_meta_info_ = value;
}
inline void CMsgGC_Halloween_ReservedItem::set_spawn_meta_info(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_spawn_meta_info(value);
  // @@protoc_insertion_point(field_set:CMsgGC_Halloween_ReservedItem.spawn_meta_info)
}

// -------------------------------------------------------------------

// CMsgGC_Halloween_GrantItem

// optional uint32 recipient_account_id = 1;
inline bool CMsgGC_Halloween_GrantItem::_internal_has_recipient_account_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGC_Halloween_GrantItem::has_recipient_account_id() const {
  return _internal_has_recipient_account_id();
}
inline void CMsgGC_Halloween_GrantItem::clear_recipient_account_id() {
  recipient_account_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_Halloween_GrantItem::_internal_recipient_account_id() const {
  return recipient_account_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_Halloween_GrantItem::recipient_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgGC_Halloween_GrantItem.recipient_account_id)
  return _internal_recipient_account_id();
}
inline void CMsgGC_Halloween_GrantItem::_internal_set_recipient_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  recipient_account_id_ = value;
}
inline void CMsgGC_Halloween_GrantItem::set_recipient_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_recipient_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgGC_Halloween_GrantItem.recipient_account_id)
}

// optional uint32 level_id = 2;
inline bool CMsgGC_Halloween_GrantItem::_internal_has_level_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGC_Halloween_GrantItem::has_level_id() const {
  return _internal_has_level_id();
}
inline void CMsgGC_Halloween_GrantItem::clear_level_id() {
  level_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_Halloween_GrantItem::_internal_level_id() const {
  return level_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_Halloween_GrantItem::level_id() const {
  // @@protoc_insertion_point(field_get:CMsgGC_Halloween_GrantItem.level_id)
  return _internal_level_id();
}
inline void CMsgGC_Halloween_GrantItem::_internal_set_level_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  level_id_ = value;
}
inline void CMsgGC_Halloween_GrantItem::set_level_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_level_id(value);
  // @@protoc_insertion_point(field_set:CMsgGC_Halloween_GrantItem.level_id)
}

// optional bool flagged = 3;
inline bool CMsgGC_Halloween_GrantItem::_internal_has_flagged() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGC_Halloween_GrantItem::has_flagged() const {
  return _internal_has_flagged();
}
inline void CMsgGC_Halloween_GrantItem::clear_flagged() {
  flagged_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CMsgGC_Halloween_GrantItem::_internal_flagged() const {
  return flagged_;
}
inline bool CMsgGC_Halloween_GrantItem::flagged() const {
  // @@protoc_insertion_point(field_get:CMsgGC_Halloween_GrantItem.flagged)
  return _internal_flagged();
}
inline void CMsgGC_Halloween_GrantItem::_internal_set_flagged(bool value) {
  _has_bits_[0] |= 0x00000004u;
  flagged_ = value;
}
inline void CMsgGC_Halloween_GrantItem::set_flagged(bool value) {
  _internal_set_flagged(value);
  // @@protoc_insertion_point(field_set:CMsgGC_Halloween_GrantItem.flagged)
}

// -------------------------------------------------------------------

// CMsgGC_Halloween_GrantItemResponse

// optional uint32 recipient_account_id = 1;
inline bool CMsgGC_Halloween_GrantItemResponse::_internal_has_recipient_account_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGC_Halloween_GrantItemResponse::has_recipient_account_id() const {
  return _internal_has_recipient_account_id();
}
inline void CMsgGC_Halloween_GrantItemResponse::clear_recipient_account_id() {
  recipient_account_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_Halloween_GrantItemResponse::_internal_recipient_account_id() const {
  return recipient_account_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_Halloween_GrantItemResponse::recipient_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgGC_Halloween_GrantItemResponse.recipient_account_id)
  return _internal_recipient_account_id();
}
inline void CMsgGC_Halloween_GrantItemResponse::_internal_set_recipient_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  recipient_account_id_ = value;
}
inline void CMsgGC_Halloween_GrantItemResponse::set_recipient_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_recipient_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgGC_Halloween_GrantItemResponse.recipient_account_id)
}

// -------------------------------------------------------------------

// CMsgGC_Halloween_ItemClaimed

// -------------------------------------------------------------------

// CMsgGC_PickupItemEligibility_Query

// optional uint32 account_id = 1;
inline bool CMsgGC_PickupItemEligibility_Query::_internal_has_account_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGC_PickupItemEligibility_Query::has_account_id() const {
  return _internal_has_account_id();
}
inline void CMsgGC_PickupItemEligibility_Query::clear_account_id() {
  account_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_PickupItemEligibility_Query::_internal_account_id() const {
  return account_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_PickupItemEligibility_Query::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgGC_PickupItemEligibility_Query.account_id)
  return _internal_account_id();
}
inline void CMsgGC_PickupItemEligibility_Query::_internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  account_id_ = value;
}
inline void CMsgGC_PickupItemEligibility_Query::set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgGC_PickupItemEligibility_Query.account_id)
}

// optional uint32 seconds_ago = 2;
inline bool CMsgGC_PickupItemEligibility_Query::_internal_has_seconds_ago() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGC_PickupItemEligibility_Query::has_seconds_ago() const {
  return _internal_has_seconds_ago();
}
inline void CMsgGC_PickupItemEligibility_Query::clear_seconds_ago() {
  seconds_ago_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_PickupItemEligibility_Query::_internal_seconds_ago() const {
  return seconds_ago_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_PickupItemEligibility_Query::seconds_ago() const {
  // @@protoc_insertion_point(field_get:CMsgGC_PickupItemEligibility_Query.seconds_ago)
  return _internal_seconds_ago();
}
inline void CMsgGC_PickupItemEligibility_Query::_internal_set_seconds_ago(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  seconds_ago_ = value;
}
inline void CMsgGC_PickupItemEligibility_Query::set_seconds_ago(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_seconds_ago(value);
  // @@protoc_insertion_point(field_set:CMsgGC_PickupItemEligibility_Query.seconds_ago)
}

// -------------------------------------------------------------------

// CMsgGC_PickupItemEligibility_QueryResponse

// optional uint32 account_id = 1;
inline bool CMsgGC_PickupItemEligibility_QueryResponse::_internal_has_account_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGC_PickupItemEligibility_QueryResponse::has_account_id() const {
  return _internal_has_account_id();
}
inline void CMsgGC_PickupItemEligibility_QueryResponse::clear_account_id() {
  account_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_PickupItemEligibility_QueryResponse::_internal_account_id() const {
  return account_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_PickupItemEligibility_QueryResponse::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgGC_PickupItemEligibility_QueryResponse.account_id)
  return _internal_account_id();
}
inline void CMsgGC_PickupItemEligibility_QueryResponse::_internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  account_id_ = value;
}
inline void CMsgGC_PickupItemEligibility_QueryResponse::set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgGC_PickupItemEligibility_QueryResponse.account_id)
}

// optional bool was_eligible = 2;
inline bool CMsgGC_PickupItemEligibility_QueryResponse::_internal_has_was_eligible() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGC_PickupItemEligibility_QueryResponse::has_was_eligible() const {
  return _internal_has_was_eligible();
}
inline void CMsgGC_PickupItemEligibility_QueryResponse::clear_was_eligible() {
  was_eligible_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CMsgGC_PickupItemEligibility_QueryResponse::_internal_was_eligible() const {
  return was_eligible_;
}
inline bool CMsgGC_PickupItemEligibility_QueryResponse::was_eligible() const {
  // @@protoc_insertion_point(field_get:CMsgGC_PickupItemEligibility_QueryResponse.was_eligible)
  return _internal_was_eligible();
}
inline void CMsgGC_PickupItemEligibility_QueryResponse::_internal_set_was_eligible(bool value) {
  _has_bits_[0] |= 0x00000002u;
  was_eligible_ = value;
}
inline void CMsgGC_PickupItemEligibility_QueryResponse::set_was_eligible(bool value) {
  _internal_set_was_eligible(value);
  // @@protoc_insertion_point(field_set:CMsgGC_PickupItemEligibility_QueryResponse.was_eligible)
}

// optional uint32 level_id = 3;
inline bool CMsgGC_PickupItemEligibility_QueryResponse::_internal_has_level_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGC_PickupItemEligibility_QueryResponse::has_level_id() const {
  return _internal_has_level_id();
}
inline void CMsgGC_PickupItemEligibility_QueryResponse::clear_level_id() {
  level_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_PickupItemEligibility_QueryResponse::_internal_level_id() const {
  return level_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_PickupItemEligibility_QueryResponse::level_id() const {
  // @@protoc_insertion_point(field_get:CMsgGC_PickupItemEligibility_QueryResponse.level_id)
  return _internal_level_id();
}
inline void CMsgGC_PickupItemEligibility_QueryResponse::_internal_set_level_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  level_id_ = value;
}
inline void CMsgGC_PickupItemEligibility_QueryResponse::set_level_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_level_id(value);
  // @@protoc_insertion_point(field_set:CMsgGC_PickupItemEligibility_QueryResponse.level_id)
}

// -------------------------------------------------------------------

// CSOTFPartyMember_Activity

// optional fixed64 lobby_id = 1;
inline bool CSOTFPartyMember_Activity::_internal_has_lobby_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSOTFPartyMember_Activity::has_lobby_id() const {
  return _internal_has_lobby_id();
}
inline void CSOTFPartyMember_Activity::clear_lobby_id() {
  lobby_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CSOTFPartyMember_Activity::_internal_lobby_id() const {
  return lobby_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CSOTFPartyMember_Activity::lobby_id() const {
  // @@protoc_insertion_point(field_get:CSOTFPartyMember.Activity.lobby_id)
  return _internal_lobby_id();
}
inline void CSOTFPartyMember_Activity::_internal_set_lobby_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  lobby_id_ = value;
}
inline void CSOTFPartyMember_Activity::set_lobby_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_lobby_id(value);
  // @@protoc_insertion_point(field_set:CSOTFPartyMember.Activity.lobby_id)
}

// optional .ETFMatchGroup lobby_match_group = 2 [default = k_eTFMatchGroup_Invalid];
inline bool CSOTFPartyMember_Activity::_internal_has_lobby_match_group() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CSOTFPartyMember_Activity::has_lobby_match_group() const {
  return _internal_has_lobby_match_group();
}
inline void CSOTFPartyMember_Activity::clear_lobby_match_group() {
  lobby_match_group_ = -1;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::ETFMatchGroup CSOTFPartyMember_Activity::_internal_lobby_match_group() const {
  return static_cast< ::ETFMatchGroup >(lobby_match_group_);
}
inline ::ETFMatchGroup CSOTFPartyMember_Activity::lobby_match_group() const {
  // @@protoc_insertion_point(field_get:CSOTFPartyMember.Activity.lobby_match_group)
  return _internal_lobby_match_group();
}
inline void CSOTFPartyMember_Activity::_internal_set_lobby_match_group(::ETFMatchGroup value) {
  assert(::ETFMatchGroup_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  lobby_match_group_ = value;
}
inline void CSOTFPartyMember_Activity::set_lobby_match_group(::ETFMatchGroup value) {
  _internal_set_lobby_match_group(value);
  // @@protoc_insertion_point(field_set:CSOTFPartyMember.Activity.lobby_match_group)
}

// optional bool multiqueue_blocked = 3;
inline bool CSOTFPartyMember_Activity::_internal_has_multiqueue_blocked() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSOTFPartyMember_Activity::has_multiqueue_blocked() const {
  return _internal_has_multiqueue_blocked();
}
inline void CSOTFPartyMember_Activity::clear_multiqueue_blocked() {
  multiqueue_blocked_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CSOTFPartyMember_Activity::_internal_multiqueue_blocked() const {
  return multiqueue_blocked_;
}
inline bool CSOTFPartyMember_Activity::multiqueue_blocked() const {
  // @@protoc_insertion_point(field_get:CSOTFPartyMember.Activity.multiqueue_blocked)
  return _internal_multiqueue_blocked();
}
inline void CSOTFPartyMember_Activity::_internal_set_multiqueue_blocked(bool value) {
  _has_bits_[0] |= 0x00000002u;
  multiqueue_blocked_ = value;
}
inline void CSOTFPartyMember_Activity::set_multiqueue_blocked(bool value) {
  _internal_set_multiqueue_blocked(value);
  // @@protoc_insertion_point(field_set:CSOTFPartyMember.Activity.multiqueue_blocked)
}

// optional bool online = 4;
inline bool CSOTFPartyMember_Activity::_internal_has_online() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CSOTFPartyMember_Activity::has_online() const {
  return _internal_has_online();
}
inline void CSOTFPartyMember_Activity::clear_online() {
  online_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CSOTFPartyMember_Activity::_internal_online() const {
  return online_;
}
inline bool CSOTFPartyMember_Activity::online() const {
  // @@protoc_insertion_point(field_get:CSOTFPartyMember.Activity.online)
  return _internal_online();
}
inline void CSOTFPartyMember_Activity::_internal_set_online(bool value) {
  _has_bits_[0] |= 0x00000004u;
  online_ = value;
}
inline void CSOTFPartyMember_Activity::set_online(bool value) {
  _internal_set_online(value);
  // @@protoc_insertion_point(field_set:CSOTFPartyMember.Activity.online)
}

// optional uint32 client_version = 5;
inline bool CSOTFPartyMember_Activity::_internal_has_client_version() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CSOTFPartyMember_Activity::has_client_version() const {
  return _internal_has_client_version();
}
inline void CSOTFPartyMember_Activity::clear_client_version() {
  client_version_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFPartyMember_Activity::_internal_client_version() const {
  return client_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFPartyMember_Activity::client_version() const {
  // @@protoc_insertion_point(field_get:CSOTFPartyMember.Activity.client_version)
  return _internal_client_version();
}
inline void CSOTFPartyMember_Activity::_internal_set_client_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  client_version_ = value;
}
inline void CSOTFPartyMember_Activity::set_client_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_client_version(value);
  // @@protoc_insertion_point(field_set:CSOTFPartyMember.Activity.client_version)
}

// -------------------------------------------------------------------

// CSOTFPartyMember

// optional bool owns_ticket = 2;
inline bool CSOTFPartyMember::_internal_has_owns_ticket() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CSOTFPartyMember::has_owns_ticket() const {
  return _internal_has_owns_ticket();
}
inline void CSOTFPartyMember::clear_owns_ticket() {
  owns_ticket_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CSOTFPartyMember::_internal_owns_ticket() const {
  return owns_ticket_;
}
inline bool CSOTFPartyMember::owns_ticket() const {
  // @@protoc_insertion_point(field_get:CSOTFPartyMember.owns_ticket)
  return _internal_owns_ticket();
}
inline void CSOTFPartyMember::_internal_set_owns_ticket(bool value) {
  _has_bits_[0] |= 0x00000010u;
  owns_ticket_ = value;
}
inline void CSOTFPartyMember::set_owns_ticket(bool value) {
  _internal_set_owns_ticket(value);
  // @@protoc_insertion_point(field_set:CSOTFPartyMember.owns_ticket)
}

// optional uint32 completed_missions = 3;
inline bool CSOTFPartyMember::_internal_has_completed_missions() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CSOTFPartyMember::has_completed_missions() const {
  return _internal_has_completed_missions();
}
inline void CSOTFPartyMember::clear_completed_missions() {
  completed_missions_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFPartyMember::_internal_completed_missions() const {
  return completed_missions_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFPartyMember::completed_missions() const {
  // @@protoc_insertion_point(field_get:CSOTFPartyMember.completed_missions)
  return _internal_completed_missions();
}
inline void CSOTFPartyMember::_internal_set_completed_missions(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  completed_missions_ = value;
}
inline void CSOTFPartyMember::set_completed_missions(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_completed_missions(value);
  // @@protoc_insertion_point(field_set:CSOTFPartyMember.completed_missions)
}

// optional uint32 badge_level = 4;
inline bool CSOTFPartyMember::_internal_has_badge_level() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CSOTFPartyMember::has_badge_level() const {
  return _internal_has_badge_level();
}
inline void CSOTFPartyMember::clear_badge_level() {
  badge_level_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFPartyMember::_internal_badge_level() const {
  return badge_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFPartyMember::badge_level() const {
  // @@protoc_insertion_point(field_get:CSOTFPartyMember.badge_level)
  return _internal_badge_level();
}
inline void CSOTFPartyMember::_internal_set_badge_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  badge_level_ = value;
}
inline void CSOTFPartyMember::set_badge_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_badge_level(value);
  // @@protoc_insertion_point(field_set:CSOTFPartyMember.badge_level)
}

// optional bool competitive_access = 9;
inline bool CSOTFPartyMember::_internal_has_competitive_access() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CSOTFPartyMember::has_competitive_access() const {
  return _internal_has_competitive_access();
}
inline void CSOTFPartyMember::clear_competitive_access() {
  competitive_access_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool CSOTFPartyMember::_internal_competitive_access() const {
  return competitive_access_;
}
inline bool CSOTFPartyMember::competitive_access() const {
  // @@protoc_insertion_point(field_get:CSOTFPartyMember.competitive_access)
  return _internal_competitive_access();
}
inline void CSOTFPartyMember::_internal_set_competitive_access(bool value) {
  _has_bits_[0] |= 0x00000020u;
  competitive_access_ = value;
}
inline void CSOTFPartyMember::set_competitive_access(bool value) {
  _internal_set_competitive_access(value);
  // @@protoc_insertion_point(field_set:CSOTFPartyMember.competitive_access)
}

// optional uint32 experience = 14;
inline bool CSOTFPartyMember::_internal_has_experience() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CSOTFPartyMember::has_experience() const {
  return _internal_has_experience();
}
inline void CSOTFPartyMember::clear_experience() {
  experience_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFPartyMember::_internal_experience() const {
  return experience_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFPartyMember::experience() const {
  // @@protoc_insertion_point(field_get:CSOTFPartyMember.experience)
  return _internal_experience();
}
inline void CSOTFPartyMember::_internal_set_experience(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  experience_ = value;
}
inline void CSOTFPartyMember::set_experience(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_experience(value);
  // @@protoc_insertion_point(field_set:CSOTFPartyMember.experience)
}

// optional .CTFPerPlayerMatchCriteriaProto player_criteria = 16;
inline bool CSOTFPartyMember::_internal_has_player_criteria() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || player_criteria_ != nullptr);
  return value;
}
inline bool CSOTFPartyMember::has_player_criteria() const {
  return _internal_has_player_criteria();
}
inline void CSOTFPartyMember::clear_player_criteria() {
  if (player_criteria_ != nullptr) player_criteria_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CTFPerPlayerMatchCriteriaProto& CSOTFPartyMember::_internal_player_criteria() const {
  const ::CTFPerPlayerMatchCriteriaProto* p = player_criteria_;
  return p != nullptr ? *p : reinterpret_cast<const ::CTFPerPlayerMatchCriteriaProto&>(
      ::_CTFPerPlayerMatchCriteriaProto_default_instance_);
}
inline const ::CTFPerPlayerMatchCriteriaProto& CSOTFPartyMember::player_criteria() const {
  // @@protoc_insertion_point(field_get:CSOTFPartyMember.player_criteria)
  return _internal_player_criteria();
}
inline void CSOTFPartyMember::unsafe_arena_set_allocated_player_criteria(
    ::CTFPerPlayerMatchCriteriaProto* player_criteria) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_criteria_);
  }
  player_criteria_ = player_criteria;
  if (player_criteria) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CSOTFPartyMember.player_criteria)
}
inline ::CTFPerPlayerMatchCriteriaProto* CSOTFPartyMember::release_player_criteria() {
  _has_bits_[0] &= ~0x00000001u;
  ::CTFPerPlayerMatchCriteriaProto* temp = player_criteria_;
  player_criteria_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CTFPerPlayerMatchCriteriaProto* CSOTFPartyMember::unsafe_arena_release_player_criteria() {
  // @@protoc_insertion_point(field_release:CSOTFPartyMember.player_criteria)
  _has_bits_[0] &= ~0x00000001u;
  ::CTFPerPlayerMatchCriteriaProto* temp = player_criteria_;
  player_criteria_ = nullptr;
  return temp;
}
inline ::CTFPerPlayerMatchCriteriaProto* CSOTFPartyMember::_internal_mutable_player_criteria() {
  _has_bits_[0] |= 0x00000001u;
  if (player_criteria_ == nullptr) {
    auto* p = CreateMaybeMessage<::CTFPerPlayerMatchCriteriaProto>(GetArenaForAllocation());
    player_criteria_ = p;
  }
  return player_criteria_;
}
inline ::CTFPerPlayerMatchCriteriaProto* CSOTFPartyMember::mutable_player_criteria() {
  // @@protoc_insertion_point(field_mutable:CSOTFPartyMember.player_criteria)
  return _internal_mutable_player_criteria();
}
inline void CSOTFPartyMember::set_allocated_player_criteria(::CTFPerPlayerMatchCriteriaProto* player_criteria) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete player_criteria_;
  }
  if (player_criteria) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CTFPerPlayerMatchCriteriaProto>::GetOwningArena(player_criteria);
    if (message_arena != submessage_arena) {
      player_criteria = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_criteria, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  player_criteria_ = player_criteria;
  // @@protoc_insertion_point(field_set_allocated:CSOTFPartyMember.player_criteria)
}

// optional .CSOTFPartyMember.Activity activity = 17;
inline bool CSOTFPartyMember::_internal_has_activity() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || activity_ != nullptr);
  return value;
}
inline bool CSOTFPartyMember::has_activity() const {
  return _internal_has_activity();
}
inline void CSOTFPartyMember::clear_activity() {
  if (activity_ != nullptr) activity_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::CSOTFPartyMember_Activity& CSOTFPartyMember::_internal_activity() const {
  const ::CSOTFPartyMember_Activity* p = activity_;
  return p != nullptr ? *p : reinterpret_cast<const ::CSOTFPartyMember_Activity&>(
      ::_CSOTFPartyMember_Activity_default_instance_);
}
inline const ::CSOTFPartyMember_Activity& CSOTFPartyMember::activity() const {
  // @@protoc_insertion_point(field_get:CSOTFPartyMember.activity)
  return _internal_activity();
}
inline void CSOTFPartyMember::unsafe_arena_set_allocated_activity(
    ::CSOTFPartyMember_Activity* activity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(activity_);
  }
  activity_ = activity;
  if (activity) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CSOTFPartyMember.activity)
}
inline ::CSOTFPartyMember_Activity* CSOTFPartyMember::release_activity() {
  _has_bits_[0] &= ~0x00000002u;
  ::CSOTFPartyMember_Activity* temp = activity_;
  activity_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CSOTFPartyMember_Activity* CSOTFPartyMember::unsafe_arena_release_activity() {
  // @@protoc_insertion_point(field_release:CSOTFPartyMember.activity)
  _has_bits_[0] &= ~0x00000002u;
  ::CSOTFPartyMember_Activity* temp = activity_;
  activity_ = nullptr;
  return temp;
}
inline ::CSOTFPartyMember_Activity* CSOTFPartyMember::_internal_mutable_activity() {
  _has_bits_[0] |= 0x00000002u;
  if (activity_ == nullptr) {
    auto* p = CreateMaybeMessage<::CSOTFPartyMember_Activity>(GetArenaForAllocation());
    activity_ = p;
  }
  return activity_;
}
inline ::CSOTFPartyMember_Activity* CSOTFPartyMember::mutable_activity() {
  // @@protoc_insertion_point(field_mutable:CSOTFPartyMember.activity)
  return _internal_mutable_activity();
}
inline void CSOTFPartyMember::set_allocated_activity(::CSOTFPartyMember_Activity* activity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete activity_;
  }
  if (activity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CSOTFPartyMember_Activity>::GetOwningArena(activity);
    if (message_arena != submessage_arena) {
      activity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, activity, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  activity_ = activity;
  // @@protoc_insertion_point(field_set_allocated:CSOTFPartyMember.activity)
}

// optional bool casual_banned = 18;
inline bool CSOTFPartyMember::_internal_has_casual_banned() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CSOTFPartyMember::has_casual_banned() const {
  return _internal_has_casual_banned();
}
inline void CSOTFPartyMember::clear_casual_banned() {
  casual_banned_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool CSOTFPartyMember::_internal_casual_banned() const {
  return casual_banned_;
}
inline bool CSOTFPartyMember::casual_banned() const {
  // @@protoc_insertion_point(field_get:CSOTFPartyMember.casual_banned)
  return _internal_casual_banned();
}
inline void CSOTFPartyMember::_internal_set_casual_banned(bool value) {
  _has_bits_[0] |= 0x00000040u;
  casual_banned_ = value;
}
inline void CSOTFPartyMember::set_casual_banned(bool value) {
  _internal_set_casual_banned(value);
  // @@protoc_insertion_point(field_set:CSOTFPartyMember.casual_banned)
}

// optional bool ranked_banned = 19;
inline bool CSOTFPartyMember::_internal_has_ranked_banned() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CSOTFPartyMember::has_ranked_banned() const {
  return _internal_has_ranked_banned();
}
inline void CSOTFPartyMember::clear_ranked_banned() {
  ranked_banned_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool CSOTFPartyMember::_internal_ranked_banned() const {
  return ranked_banned_;
}
inline bool CSOTFPartyMember::ranked_banned() const {
  // @@protoc_insertion_point(field_get:CSOTFPartyMember.ranked_banned)
  return _internal_ranked_banned();
}
inline void CSOTFPartyMember::_internal_set_ranked_banned(bool value) {
  _has_bits_[0] |= 0x00000080u;
  ranked_banned_ = value;
}
inline void CSOTFPartyMember::set_ranked_banned(bool value) {
  _internal_set_ranked_banned(value);
  // @@protoc_insertion_point(field_set:CSOTFPartyMember.ranked_banned)
}

// optional bool casual_low_priority = 20;
inline bool CSOTFPartyMember::_internal_has_casual_low_priority() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CSOTFPartyMember::has_casual_low_priority() const {
  return _internal_has_casual_low_priority();
}
inline void CSOTFPartyMember::clear_casual_low_priority() {
  casual_low_priority_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool CSOTFPartyMember::_internal_casual_low_priority() const {
  return casual_low_priority_;
}
inline bool CSOTFPartyMember::casual_low_priority() const {
  // @@protoc_insertion_point(field_get:CSOTFPartyMember.casual_low_priority)
  return _internal_casual_low_priority();
}
inline void CSOTFPartyMember::_internal_set_casual_low_priority(bool value) {
  _has_bits_[0] |= 0x00000200u;
  casual_low_priority_ = value;
}
inline void CSOTFPartyMember::set_casual_low_priority(bool value) {
  _internal_set_casual_low_priority(value);
  // @@protoc_insertion_point(field_set:CSOTFPartyMember.casual_low_priority)
}

// optional bool ranked_low_priority = 21;
inline bool CSOTFPartyMember::_internal_has_ranked_low_priority() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CSOTFPartyMember::has_ranked_low_priority() const {
  return _internal_has_ranked_low_priority();
}
inline void CSOTFPartyMember::clear_ranked_low_priority() {
  ranked_low_priority_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool CSOTFPartyMember::_internal_ranked_low_priority() const {
  return ranked_low_priority_;
}
inline bool CSOTFPartyMember::ranked_low_priority() const {
  // @@protoc_insertion_point(field_get:CSOTFPartyMember.ranked_low_priority)
  return _internal_ranked_low_priority();
}
inline void CSOTFPartyMember::_internal_set_ranked_low_priority(bool value) {
  _has_bits_[0] |= 0x00000400u;
  ranked_low_priority_ = value;
}
inline void CSOTFPartyMember::set_ranked_low_priority(bool value) {
  _internal_set_ranked_low_priority(value);
  // @@protoc_insertion_point(field_set:CSOTFPartyMember.ranked_low_priority)
}

// optional bool lobby_standby = 22;
inline bool CSOTFPartyMember::_internal_has_lobby_standby() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CSOTFPartyMember::has_lobby_standby() const {
  return _internal_has_lobby_standby();
}
inline void CSOTFPartyMember::clear_lobby_standby() {
  lobby_standby_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool CSOTFPartyMember::_internal_lobby_standby() const {
  return lobby_standby_;
}
inline bool CSOTFPartyMember::lobby_standby() const {
  // @@protoc_insertion_point(field_get:CSOTFPartyMember.lobby_standby)
  return _internal_lobby_standby();
}
inline void CSOTFPartyMember::_internal_set_lobby_standby(bool value) {
  _has_bits_[0] |= 0x00000800u;
  lobby_standby_ = value;
}
inline void CSOTFPartyMember::set_lobby_standby(bool value) {
  _internal_set_lobby_standby(value);
  // @@protoc_insertion_point(field_set:CSOTFPartyMember.lobby_standby)
}

// -------------------------------------------------------------------

// TFPendingPartyMember

// optional fixed64 steamid = 1;
inline bool TFPendingPartyMember::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TFPendingPartyMember::has_steamid() const {
  return _internal_has_steamid();
}
inline void TFPendingPartyMember::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TFPendingPartyMember::_internal_steamid() const {
  return steamid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TFPendingPartyMember::steamid() const {
  // @@protoc_insertion_point(field_get:TFPendingPartyMember.steamid)
  return _internal_steamid();
}
inline void TFPendingPartyMember::_internal_set_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  steamid_ = value;
}
inline void TFPendingPartyMember::set_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:TFPendingPartyMember.steamid)
}

// optional .TFPendingPartyMember.EType type = 2 [default = Invited];
inline bool TFPendingPartyMember::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TFPendingPartyMember::has_type() const {
  return _internal_has_type();
}
inline void TFPendingPartyMember::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::TFPendingPartyMember_EType TFPendingPartyMember::_internal_type() const {
  return static_cast< ::TFPendingPartyMember_EType >(type_);
}
inline ::TFPendingPartyMember_EType TFPendingPartyMember::type() const {
  // @@protoc_insertion_point(field_get:TFPendingPartyMember.type)
  return _internal_type();
}
inline void TFPendingPartyMember::_internal_set_type(::TFPendingPartyMember_EType value) {
  assert(::TFPendingPartyMember_EType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  type_ = value;
}
inline void TFPendingPartyMember::set_type(::TFPendingPartyMember_EType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:TFPendingPartyMember.type)
}

// optional fixed64 inviter = 3;
inline bool TFPendingPartyMember::_internal_has_inviter() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TFPendingPartyMember::has_inviter() const {
  return _internal_has_inviter();
}
inline void TFPendingPartyMember::clear_inviter() {
  inviter_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TFPendingPartyMember::_internal_inviter() const {
  return inviter_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TFPendingPartyMember::inviter() const {
  // @@protoc_insertion_point(field_get:TFPendingPartyMember.inviter)
  return _internal_inviter();
}
inline void TFPendingPartyMember::_internal_set_inviter(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  inviter_ = value;
}
inline void TFPendingPartyMember::set_inviter(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_inviter(value);
  // @@protoc_insertion_point(field_set:TFPendingPartyMember.inviter)
}

// -------------------------------------------------------------------

// TFSyncedMMUIState

// optional .ETFSyncedMMMenuStep menu_step = 1 [default = k_eTFSyncedMMMenuStep_None];
inline bool TFSyncedMMUIState::_internal_has_menu_step() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TFSyncedMMUIState::has_menu_step() const {
  return _internal_has_menu_step();
}
inline void TFSyncedMMUIState::clear_menu_step() {
  menu_step_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::ETFSyncedMMMenuStep TFSyncedMMUIState::_internal_menu_step() const {
  return static_cast< ::ETFSyncedMMMenuStep >(menu_step_);
}
inline ::ETFSyncedMMMenuStep TFSyncedMMUIState::menu_step() const {
  // @@protoc_insertion_point(field_get:TFSyncedMMUIState.menu_step)
  return _internal_menu_step();
}
inline void TFSyncedMMUIState::_internal_set_menu_step(::ETFSyncedMMMenuStep value) {
  assert(::ETFSyncedMMMenuStep_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  menu_step_ = value;
}
inline void TFSyncedMMUIState::set_menu_step(::ETFSyncedMMMenuStep value) {
  _internal_set_menu_step(value);
  // @@protoc_insertion_point(field_set:TFSyncedMMUIState.menu_step)
}

// optional .ETFMatchGroup match_group = 2 [default = k_eTFMatchGroup_Invalid];
inline bool TFSyncedMMUIState::_internal_has_match_group() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TFSyncedMMUIState::has_match_group() const {
  return _internal_has_match_group();
}
inline void TFSyncedMMUIState::clear_match_group() {
  match_group_ = -1;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::ETFMatchGroup TFSyncedMMUIState::_internal_match_group() const {
  return static_cast< ::ETFMatchGroup >(match_group_);
}
inline ::ETFMatchGroup TFSyncedMMUIState::match_group() const {
  // @@protoc_insertion_point(field_get:TFSyncedMMUIState.match_group)
  return _internal_match_group();
}
inline void TFSyncedMMUIState::_internal_set_match_group(::ETFMatchGroup value) {
  assert(::ETFMatchGroup_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  match_group_ = value;
}
inline void TFSyncedMMUIState::set_match_group(::ETFMatchGroup value) {
  _internal_set_match_group(value);
  // @@protoc_insertion_point(field_set:TFSyncedMMUIState.match_group)
}

// -------------------------------------------------------------------

// CTFGroupMatchCriteriaProto

// optional bool late_join_ok = 5;
inline bool CTFGroupMatchCriteriaProto::_internal_has_late_join_ok() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CTFGroupMatchCriteriaProto::has_late_join_ok() const {
  return _internal_has_late_join_ok();
}
inline void CTFGroupMatchCriteriaProto::clear_late_join_ok() {
  late_join_ok_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CTFGroupMatchCriteriaProto::_internal_late_join_ok() const {
  return late_join_ok_;
}
inline bool CTFGroupMatchCriteriaProto::late_join_ok() const {
  // @@protoc_insertion_point(field_get:CTFGroupMatchCriteriaProto.late_join_ok)
  return _internal_late_join_ok();
}
inline void CTFGroupMatchCriteriaProto::_internal_set_late_join_ok(bool value) {
  _has_bits_[0] |= 0x00000004u;
  late_join_ok_ = value;
}
inline void CTFGroupMatchCriteriaProto::set_late_join_ok(bool value) {
  _internal_set_late_join_ok(value);
  // @@protoc_insertion_point(field_set:CTFGroupMatchCriteriaProto.late_join_ok)
}

// optional uint32 custom_ping_tolerance = 13 [default = 0];
inline bool CTFGroupMatchCriteriaProto::_internal_has_custom_ping_tolerance() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CTFGroupMatchCriteriaProto::has_custom_ping_tolerance() const {
  return _internal_has_custom_ping_tolerance();
}
inline void CTFGroupMatchCriteriaProto::clear_custom_ping_tolerance() {
  custom_ping_tolerance_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CTFGroupMatchCriteriaProto::_internal_custom_ping_tolerance() const {
  return custom_ping_tolerance_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CTFGroupMatchCriteriaProto::custom_ping_tolerance() const {
  // @@protoc_insertion_point(field_get:CTFGroupMatchCriteriaProto.custom_ping_tolerance)
  return _internal_custom_ping_tolerance();
}
inline void CTFGroupMatchCriteriaProto::_internal_set_custom_ping_tolerance(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  custom_ping_tolerance_ = value;
}
inline void CTFGroupMatchCriteriaProto::set_custom_ping_tolerance(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_custom_ping_tolerance(value);
  // @@protoc_insertion_point(field_set:CTFGroupMatchCriteriaProto.custom_ping_tolerance)
}

// optional string mvm_mannup_tour = 10;
inline bool CTFGroupMatchCriteriaProto::_internal_has_mvm_mannup_tour() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CTFGroupMatchCriteriaProto::has_mvm_mannup_tour() const {
  return _internal_has_mvm_mannup_tour();
}
inline void CTFGroupMatchCriteriaProto::clear_mvm_mannup_tour() {
  mvm_mannup_tour_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CTFGroupMatchCriteriaProto::mvm_mannup_tour() const {
  // @@protoc_insertion_point(field_get:CTFGroupMatchCriteriaProto.mvm_mannup_tour)
  return _internal_mvm_mannup_tour();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CTFGroupMatchCriteriaProto::set_mvm_mannup_tour(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 mvm_mannup_tour_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CTFGroupMatchCriteriaProto.mvm_mannup_tour)
}
inline std::string* CTFGroupMatchCriteriaProto::mutable_mvm_mannup_tour() {
  // @@protoc_insertion_point(field_mutable:CTFGroupMatchCriteriaProto.mvm_mannup_tour)
  return _internal_mutable_mvm_mannup_tour();
}
inline const std::string& CTFGroupMatchCriteriaProto::_internal_mvm_mannup_tour() const {
  return mvm_mannup_tour_.Get();
}
inline void CTFGroupMatchCriteriaProto::_internal_set_mvm_mannup_tour(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  mvm_mannup_tour_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CTFGroupMatchCriteriaProto::_internal_mutable_mvm_mannup_tour() {
  _has_bits_[0] |= 0x00000001u;
  return mvm_mannup_tour_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CTFGroupMatchCriteriaProto::release_mvm_mannup_tour() {
  // @@protoc_insertion_point(field_release:CTFGroupMatchCriteriaProto.mvm_mannup_tour)
  if (!_internal_has_mvm_mannup_tour()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return mvm_mannup_tour_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CTFGroupMatchCriteriaProto::set_allocated_mvm_mannup_tour(std::string* mvm_mannup_tour) {
  if (mvm_mannup_tour != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  mvm_mannup_tour_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mvm_mannup_tour,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CTFGroupMatchCriteriaProto.mvm_mannup_tour)
}

// repeated string mvm_mannup_missions = 15;
inline int CTFGroupMatchCriteriaProto::_internal_mvm_mannup_missions_size() const {
  return mvm_mannup_missions_.size();
}
inline int CTFGroupMatchCriteriaProto::mvm_mannup_missions_size() const {
  return _internal_mvm_mannup_missions_size();
}
inline void CTFGroupMatchCriteriaProto::clear_mvm_mannup_missions() {
  mvm_mannup_missions_.Clear();
}
inline std::string* CTFGroupMatchCriteriaProto::add_mvm_mannup_missions() {
  // @@protoc_insertion_point(field_add_mutable:CTFGroupMatchCriteriaProto.mvm_mannup_missions)
  return _internal_add_mvm_mannup_missions();
}
inline const std::string& CTFGroupMatchCriteriaProto::_internal_mvm_mannup_missions(int index) const {
  return mvm_mannup_missions_.Get(index);
}
inline const std::string& CTFGroupMatchCriteriaProto::mvm_mannup_missions(int index) const {
  // @@protoc_insertion_point(field_get:CTFGroupMatchCriteriaProto.mvm_mannup_missions)
  return _internal_mvm_mannup_missions(index);
}
inline std::string* CTFGroupMatchCriteriaProto::mutable_mvm_mannup_missions(int index) {
  // @@protoc_insertion_point(field_mutable:CTFGroupMatchCriteriaProto.mvm_mannup_missions)
  return mvm_mannup_missions_.Mutable(index);
}
inline void CTFGroupMatchCriteriaProto::set_mvm_mannup_missions(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:CTFGroupMatchCriteriaProto.mvm_mannup_missions)
  mvm_mannup_missions_.Mutable(index)->assign(value);
}
inline void CTFGroupMatchCriteriaProto::set_mvm_mannup_missions(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:CTFGroupMatchCriteriaProto.mvm_mannup_missions)
  mvm_mannup_missions_.Mutable(index)->assign(std::move(value));
}
inline void CTFGroupMatchCriteriaProto::set_mvm_mannup_missions(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  mvm_mannup_missions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CTFGroupMatchCriteriaProto.mvm_mannup_missions)
}
inline void CTFGroupMatchCriteriaProto::set_mvm_mannup_missions(int index, const char* value, size_t size) {
  mvm_mannup_missions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CTFGroupMatchCriteriaProto.mvm_mannup_missions)
}
inline std::string* CTFGroupMatchCriteriaProto::_internal_add_mvm_mannup_missions() {
  return mvm_mannup_missions_.Add();
}
inline void CTFGroupMatchCriteriaProto::add_mvm_mannup_missions(const std::string& value) {
  mvm_mannup_missions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CTFGroupMatchCriteriaProto.mvm_mannup_missions)
}
inline void CTFGroupMatchCriteriaProto::add_mvm_mannup_missions(std::string&& value) {
  mvm_mannup_missions_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CTFGroupMatchCriteriaProto.mvm_mannup_missions)
}
inline void CTFGroupMatchCriteriaProto::add_mvm_mannup_missions(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  mvm_mannup_missions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CTFGroupMatchCriteriaProto.mvm_mannup_missions)
}
inline void CTFGroupMatchCriteriaProto::add_mvm_mannup_missions(const char* value, size_t size) {
  mvm_mannup_missions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CTFGroupMatchCriteriaProto.mvm_mannup_missions)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CTFGroupMatchCriteriaProto::mvm_mannup_missions() const {
  // @@protoc_insertion_point(field_list:CTFGroupMatchCriteriaProto.mvm_mannup_missions)
  return mvm_mannup_missions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CTFGroupMatchCriteriaProto::mutable_mvm_mannup_missions() {
  // @@protoc_insertion_point(field_mutable_list:CTFGroupMatchCriteriaProto.mvm_mannup_missions)
  return &mvm_mannup_missions_;
}

// repeated string mvm_bootcamp_missions = 16;
inline int CTFGroupMatchCriteriaProto::_internal_mvm_bootcamp_missions_size() const {
  return mvm_bootcamp_missions_.size();
}
inline int CTFGroupMatchCriteriaProto::mvm_bootcamp_missions_size() const {
  return _internal_mvm_bootcamp_missions_size();
}
inline void CTFGroupMatchCriteriaProto::clear_mvm_bootcamp_missions() {
  mvm_bootcamp_missions_.Clear();
}
inline std::string* CTFGroupMatchCriteriaProto::add_mvm_bootcamp_missions() {
  // @@protoc_insertion_point(field_add_mutable:CTFGroupMatchCriteriaProto.mvm_bootcamp_missions)
  return _internal_add_mvm_bootcamp_missions();
}
inline const std::string& CTFGroupMatchCriteriaProto::_internal_mvm_bootcamp_missions(int index) const {
  return mvm_bootcamp_missions_.Get(index);
}
inline const std::string& CTFGroupMatchCriteriaProto::mvm_bootcamp_missions(int index) const {
  // @@protoc_insertion_point(field_get:CTFGroupMatchCriteriaProto.mvm_bootcamp_missions)
  return _internal_mvm_bootcamp_missions(index);
}
inline std::string* CTFGroupMatchCriteriaProto::mutable_mvm_bootcamp_missions(int index) {
  // @@protoc_insertion_point(field_mutable:CTFGroupMatchCriteriaProto.mvm_bootcamp_missions)
  return mvm_bootcamp_missions_.Mutable(index);
}
inline void CTFGroupMatchCriteriaProto::set_mvm_bootcamp_missions(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:CTFGroupMatchCriteriaProto.mvm_bootcamp_missions)
  mvm_bootcamp_missions_.Mutable(index)->assign(value);
}
inline void CTFGroupMatchCriteriaProto::set_mvm_bootcamp_missions(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:CTFGroupMatchCriteriaProto.mvm_bootcamp_missions)
  mvm_bootcamp_missions_.Mutable(index)->assign(std::move(value));
}
inline void CTFGroupMatchCriteriaProto::set_mvm_bootcamp_missions(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  mvm_bootcamp_missions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CTFGroupMatchCriteriaProto.mvm_bootcamp_missions)
}
inline void CTFGroupMatchCriteriaProto::set_mvm_bootcamp_missions(int index, const char* value, size_t size) {
  mvm_bootcamp_missions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CTFGroupMatchCriteriaProto.mvm_bootcamp_missions)
}
inline std::string* CTFGroupMatchCriteriaProto::_internal_add_mvm_bootcamp_missions() {
  return mvm_bootcamp_missions_.Add();
}
inline void CTFGroupMatchCriteriaProto::add_mvm_bootcamp_missions(const std::string& value) {
  mvm_bootcamp_missions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CTFGroupMatchCriteriaProto.mvm_bootcamp_missions)
}
inline void CTFGroupMatchCriteriaProto::add_mvm_bootcamp_missions(std::string&& value) {
  mvm_bootcamp_missions_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CTFGroupMatchCriteriaProto.mvm_bootcamp_missions)
}
inline void CTFGroupMatchCriteriaProto::add_mvm_bootcamp_missions(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  mvm_bootcamp_missions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CTFGroupMatchCriteriaProto.mvm_bootcamp_missions)
}
inline void CTFGroupMatchCriteriaProto::add_mvm_bootcamp_missions(const char* value, size_t size) {
  mvm_bootcamp_missions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CTFGroupMatchCriteriaProto.mvm_bootcamp_missions)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CTFGroupMatchCriteriaProto::mvm_bootcamp_missions() const {
  // @@protoc_insertion_point(field_list:CTFGroupMatchCriteriaProto.mvm_bootcamp_missions)
  return mvm_bootcamp_missions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CTFGroupMatchCriteriaProto::mutable_mvm_bootcamp_missions() {
  // @@protoc_insertion_point(field_mutable_list:CTFGroupMatchCriteriaProto.mvm_bootcamp_missions)
  return &mvm_bootcamp_missions_;
}

// optional .CTFCasualMatchCriteria casual_criteria = 12;
inline bool CTFGroupMatchCriteriaProto::_internal_has_casual_criteria() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || casual_criteria_ != nullptr);
  return value;
}
inline bool CTFGroupMatchCriteriaProto::has_casual_criteria() const {
  return _internal_has_casual_criteria();
}
inline void CTFGroupMatchCriteriaProto::clear_casual_criteria() {
  if (casual_criteria_ != nullptr) casual_criteria_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::CTFCasualMatchCriteria& CTFGroupMatchCriteriaProto::_internal_casual_criteria() const {
  const ::CTFCasualMatchCriteria* p = casual_criteria_;
  return p != nullptr ? *p : reinterpret_cast<const ::CTFCasualMatchCriteria&>(
      ::_CTFCasualMatchCriteria_default_instance_);
}
inline const ::CTFCasualMatchCriteria& CTFGroupMatchCriteriaProto::casual_criteria() const {
  // @@protoc_insertion_point(field_get:CTFGroupMatchCriteriaProto.casual_criteria)
  return _internal_casual_criteria();
}
inline void CTFGroupMatchCriteriaProto::unsafe_arena_set_allocated_casual_criteria(
    ::CTFCasualMatchCriteria* casual_criteria) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(casual_criteria_);
  }
  casual_criteria_ = casual_criteria;
  if (casual_criteria) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CTFGroupMatchCriteriaProto.casual_criteria)
}
inline ::CTFCasualMatchCriteria* CTFGroupMatchCriteriaProto::release_casual_criteria() {
  _has_bits_[0] &= ~0x00000002u;
  ::CTFCasualMatchCriteria* temp = casual_criteria_;
  casual_criteria_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CTFCasualMatchCriteria* CTFGroupMatchCriteriaProto::unsafe_arena_release_casual_criteria() {
  // @@protoc_insertion_point(field_release:CTFGroupMatchCriteriaProto.casual_criteria)
  _has_bits_[0] &= ~0x00000002u;
  ::CTFCasualMatchCriteria* temp = casual_criteria_;
  casual_criteria_ = nullptr;
  return temp;
}
inline ::CTFCasualMatchCriteria* CTFGroupMatchCriteriaProto::_internal_mutable_casual_criteria() {
  _has_bits_[0] |= 0x00000002u;
  if (casual_criteria_ == nullptr) {
    auto* p = CreateMaybeMessage<::CTFCasualMatchCriteria>(GetArenaForAllocation());
    casual_criteria_ = p;
  }
  return casual_criteria_;
}
inline ::CTFCasualMatchCriteria* CTFGroupMatchCriteriaProto::mutable_casual_criteria() {
  // @@protoc_insertion_point(field_mutable:CTFGroupMatchCriteriaProto.casual_criteria)
  return _internal_mutable_casual_criteria();
}
inline void CTFGroupMatchCriteriaProto::set_allocated_casual_criteria(::CTFCasualMatchCriteria* casual_criteria) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete casual_criteria_;
  }
  if (casual_criteria) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CTFCasualMatchCriteria>::GetOwningArena(casual_criteria);
    if (message_arena != submessage_arena) {
      casual_criteria = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, casual_criteria, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  casual_criteria_ = casual_criteria;
  // @@protoc_insertion_point(field_set_allocated:CTFGroupMatchCriteriaProto.casual_criteria)
}

// -------------------------------------------------------------------

// CTFCasualMatchCriteria

// repeated fixed32 selected_maps_bits = 3;
inline int CTFCasualMatchCriteria::_internal_selected_maps_bits_size() const {
  return selected_maps_bits_.size();
}
inline int CTFCasualMatchCriteria::selected_maps_bits_size() const {
  return _internal_selected_maps_bits_size();
}
inline void CTFCasualMatchCriteria::clear_selected_maps_bits() {
  selected_maps_bits_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CTFCasualMatchCriteria::_internal_selected_maps_bits(int index) const {
  return selected_maps_bits_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CTFCasualMatchCriteria::selected_maps_bits(int index) const {
  // @@protoc_insertion_point(field_get:CTFCasualMatchCriteria.selected_maps_bits)
  return _internal_selected_maps_bits(index);
}
inline void CTFCasualMatchCriteria::set_selected_maps_bits(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  selected_maps_bits_.Set(index, value);
  // @@protoc_insertion_point(field_set:CTFCasualMatchCriteria.selected_maps_bits)
}
inline void CTFCasualMatchCriteria::_internal_add_selected_maps_bits(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  selected_maps_bits_.Add(value);
}
inline void CTFCasualMatchCriteria::add_selected_maps_bits(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_selected_maps_bits(value);
  // @@protoc_insertion_point(field_add:CTFCasualMatchCriteria.selected_maps_bits)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CTFCasualMatchCriteria::_internal_selected_maps_bits() const {
  return selected_maps_bits_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CTFCasualMatchCriteria::selected_maps_bits() const {
  // @@protoc_insertion_point(field_list:CTFCasualMatchCriteria.selected_maps_bits)
  return _internal_selected_maps_bits();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CTFCasualMatchCriteria::_internal_mutable_selected_maps_bits() {
  return &selected_maps_bits_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CTFCasualMatchCriteria::mutable_selected_maps_bits() {
  // @@protoc_insertion_point(field_mutable_list:CTFCasualMatchCriteria.selected_maps_bits)
  return _internal_mutable_selected_maps_bits();
}

// -------------------------------------------------------------------

// CTFPerPlayerMatchCriteriaProto

// optional bool mvm_squad_surplus = 1;
inline bool CTFPerPlayerMatchCriteriaProto::_internal_has_mvm_squad_surplus() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CTFPerPlayerMatchCriteriaProto::has_mvm_squad_surplus() const {
  return _internal_has_mvm_squad_surplus();
}
inline void CTFPerPlayerMatchCriteriaProto::clear_mvm_squad_surplus() {
  mvm_squad_surplus_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CTFPerPlayerMatchCriteriaProto::_internal_mvm_squad_surplus() const {
  return mvm_squad_surplus_;
}
inline bool CTFPerPlayerMatchCriteriaProto::mvm_squad_surplus() const {
  // @@protoc_insertion_point(field_get:CTFPerPlayerMatchCriteriaProto.mvm_squad_surplus)
  return _internal_mvm_squad_surplus();
}
inline void CTFPerPlayerMatchCriteriaProto::_internal_set_mvm_squad_surplus(bool value) {
  _has_bits_[0] |= 0x00000001u;
  mvm_squad_surplus_ = value;
}
inline void CTFPerPlayerMatchCriteriaProto::set_mvm_squad_surplus(bool value) {
  _internal_set_mvm_squad_surplus(value);
  // @@protoc_insertion_point(field_set:CTFPerPlayerMatchCriteriaProto.mvm_squad_surplus)
}

// -------------------------------------------------------------------

// CTFPartyOptions

// optional bool overwrite_existing = 1;
inline bool CTFPartyOptions::_internal_has_overwrite_existing() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CTFPartyOptions::has_overwrite_existing() const {
  return _internal_has_overwrite_existing();
}
inline void CTFPartyOptions::clear_overwrite_existing() {
  overwrite_existing_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CTFPartyOptions::_internal_overwrite_existing() const {
  return overwrite_existing_;
}
inline bool CTFPartyOptions::overwrite_existing() const {
  // @@protoc_insertion_point(field_get:CTFPartyOptions.overwrite_existing)
  return _internal_overwrite_existing();
}
inline void CTFPartyOptions::_internal_set_overwrite_existing(bool value) {
  _has_bits_[0] |= 0x00000008u;
  overwrite_existing_ = value;
}
inline void CTFPartyOptions::set_overwrite_existing(bool value) {
  _internal_set_overwrite_existing(value);
  // @@protoc_insertion_point(field_set:CTFPartyOptions.overwrite_existing)
}

// optional .CTFGroupMatchCriteriaProto group_criteria = 2;
inline bool CTFPartyOptions::_internal_has_group_criteria() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || group_criteria_ != nullptr);
  return value;
}
inline bool CTFPartyOptions::has_group_criteria() const {
  return _internal_has_group_criteria();
}
inline void CTFPartyOptions::clear_group_criteria() {
  if (group_criteria_ != nullptr) group_criteria_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CTFGroupMatchCriteriaProto& CTFPartyOptions::_internal_group_criteria() const {
  const ::CTFGroupMatchCriteriaProto* p = group_criteria_;
  return p != nullptr ? *p : reinterpret_cast<const ::CTFGroupMatchCriteriaProto&>(
      ::_CTFGroupMatchCriteriaProto_default_instance_);
}
inline const ::CTFGroupMatchCriteriaProto& CTFPartyOptions::group_criteria() const {
  // @@protoc_insertion_point(field_get:CTFPartyOptions.group_criteria)
  return _internal_group_criteria();
}
inline void CTFPartyOptions::unsafe_arena_set_allocated_group_criteria(
    ::CTFGroupMatchCriteriaProto* group_criteria) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(group_criteria_);
  }
  group_criteria_ = group_criteria;
  if (group_criteria) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CTFPartyOptions.group_criteria)
}
inline ::CTFGroupMatchCriteriaProto* CTFPartyOptions::release_group_criteria() {
  _has_bits_[0] &= ~0x00000001u;
  ::CTFGroupMatchCriteriaProto* temp = group_criteria_;
  group_criteria_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CTFGroupMatchCriteriaProto* CTFPartyOptions::unsafe_arena_release_group_criteria() {
  // @@protoc_insertion_point(field_release:CTFPartyOptions.group_criteria)
  _has_bits_[0] &= ~0x00000001u;
  ::CTFGroupMatchCriteriaProto* temp = group_criteria_;
  group_criteria_ = nullptr;
  return temp;
}
inline ::CTFGroupMatchCriteriaProto* CTFPartyOptions::_internal_mutable_group_criteria() {
  _has_bits_[0] |= 0x00000001u;
  if (group_criteria_ == nullptr) {
    auto* p = CreateMaybeMessage<::CTFGroupMatchCriteriaProto>(GetArenaForAllocation());
    group_criteria_ = p;
  }
  return group_criteria_;
}
inline ::CTFGroupMatchCriteriaProto* CTFPartyOptions::mutable_group_criteria() {
  // @@protoc_insertion_point(field_mutable:CTFPartyOptions.group_criteria)
  return _internal_mutable_group_criteria();
}
inline void CTFPartyOptions::set_allocated_group_criteria(::CTFGroupMatchCriteriaProto* group_criteria) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete group_criteria_;
  }
  if (group_criteria) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CTFGroupMatchCriteriaProto>::GetOwningArena(group_criteria);
    if (message_arena != submessage_arena) {
      group_criteria = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, group_criteria, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  group_criteria_ = group_criteria;
  // @@protoc_insertion_point(field_set_allocated:CTFPartyOptions.group_criteria)
}

// optional .CTFPerPlayerMatchCriteriaProto player_criteria = 3;
inline bool CTFPartyOptions::_internal_has_player_criteria() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || player_criteria_ != nullptr);
  return value;
}
inline bool CTFPartyOptions::has_player_criteria() const {
  return _internal_has_player_criteria();
}
inline void CTFPartyOptions::clear_player_criteria() {
  if (player_criteria_ != nullptr) player_criteria_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::CTFPerPlayerMatchCriteriaProto& CTFPartyOptions::_internal_player_criteria() const {
  const ::CTFPerPlayerMatchCriteriaProto* p = player_criteria_;
  return p != nullptr ? *p : reinterpret_cast<const ::CTFPerPlayerMatchCriteriaProto&>(
      ::_CTFPerPlayerMatchCriteriaProto_default_instance_);
}
inline const ::CTFPerPlayerMatchCriteriaProto& CTFPartyOptions::player_criteria() const {
  // @@protoc_insertion_point(field_get:CTFPartyOptions.player_criteria)
  return _internal_player_criteria();
}
inline void CTFPartyOptions::unsafe_arena_set_allocated_player_criteria(
    ::CTFPerPlayerMatchCriteriaProto* player_criteria) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_criteria_);
  }
  player_criteria_ = player_criteria;
  if (player_criteria) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CTFPartyOptions.player_criteria)
}
inline ::CTFPerPlayerMatchCriteriaProto* CTFPartyOptions::release_player_criteria() {
  _has_bits_[0] &= ~0x00000002u;
  ::CTFPerPlayerMatchCriteriaProto* temp = player_criteria_;
  player_criteria_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CTFPerPlayerMatchCriteriaProto* CTFPartyOptions::unsafe_arena_release_player_criteria() {
  // @@protoc_insertion_point(field_release:CTFPartyOptions.player_criteria)
  _has_bits_[0] &= ~0x00000002u;
  ::CTFPerPlayerMatchCriteriaProto* temp = player_criteria_;
  player_criteria_ = nullptr;
  return temp;
}
inline ::CTFPerPlayerMatchCriteriaProto* CTFPartyOptions::_internal_mutable_player_criteria() {
  _has_bits_[0] |= 0x00000002u;
  if (player_criteria_ == nullptr) {
    auto* p = CreateMaybeMessage<::CTFPerPlayerMatchCriteriaProto>(GetArenaForAllocation());
    player_criteria_ = p;
  }
  return player_criteria_;
}
inline ::CTFPerPlayerMatchCriteriaProto* CTFPartyOptions::mutable_player_criteria() {
  // @@protoc_insertion_point(field_mutable:CTFPartyOptions.player_criteria)
  return _internal_mutable_player_criteria();
}
inline void CTFPartyOptions::set_allocated_player_criteria(::CTFPerPlayerMatchCriteriaProto* player_criteria) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete player_criteria_;
  }
  if (player_criteria) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CTFPerPlayerMatchCriteriaProto>::GetOwningArena(player_criteria);
    if (message_arena != submessage_arena) {
      player_criteria = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_criteria, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  player_criteria_ = player_criteria;
  // @@protoc_insertion_point(field_set_allocated:CTFPartyOptions.player_criteria)
}

// optional .TFSyncedMMUIState player_uistate = 5;
inline bool CTFPartyOptions::_internal_has_player_uistate() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || player_uistate_ != nullptr);
  return value;
}
inline bool CTFPartyOptions::has_player_uistate() const {
  return _internal_has_player_uistate();
}
inline void CTFPartyOptions::clear_player_uistate() {
  if (player_uistate_ != nullptr) player_uistate_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::TFSyncedMMUIState& CTFPartyOptions::_internal_player_uistate() const {
  const ::TFSyncedMMUIState* p = player_uistate_;
  return p != nullptr ? *p : reinterpret_cast<const ::TFSyncedMMUIState&>(
      ::_TFSyncedMMUIState_default_instance_);
}
inline const ::TFSyncedMMUIState& CTFPartyOptions::player_uistate() const {
  // @@protoc_insertion_point(field_get:CTFPartyOptions.player_uistate)
  return _internal_player_uistate();
}
inline void CTFPartyOptions::unsafe_arena_set_allocated_player_uistate(
    ::TFSyncedMMUIState* player_uistate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_uistate_);
  }
  player_uistate_ = player_uistate;
  if (player_uistate) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CTFPartyOptions.player_uistate)
}
inline ::TFSyncedMMUIState* CTFPartyOptions::release_player_uistate() {
  _has_bits_[0] &= ~0x00000004u;
  ::TFSyncedMMUIState* temp = player_uistate_;
  player_uistate_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TFSyncedMMUIState* CTFPartyOptions::unsafe_arena_release_player_uistate() {
  // @@protoc_insertion_point(field_release:CTFPartyOptions.player_uistate)
  _has_bits_[0] &= ~0x00000004u;
  ::TFSyncedMMUIState* temp = player_uistate_;
  player_uistate_ = nullptr;
  return temp;
}
inline ::TFSyncedMMUIState* CTFPartyOptions::_internal_mutable_player_uistate() {
  _has_bits_[0] |= 0x00000004u;
  if (player_uistate_ == nullptr) {
    auto* p = CreateMaybeMessage<::TFSyncedMMUIState>(GetArenaForAllocation());
    player_uistate_ = p;
  }
  return player_uistate_;
}
inline ::TFSyncedMMUIState* CTFPartyOptions::mutable_player_uistate() {
  // @@protoc_insertion_point(field_mutable:CTFPartyOptions.player_uistate)
  return _internal_mutable_player_uistate();
}
inline void CTFPartyOptions::set_allocated_player_uistate(::TFSyncedMMUIState* player_uistate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete player_uistate_;
  }
  if (player_uistate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TFSyncedMMUIState>::GetOwningArena(player_uistate);
    if (message_arena != submessage_arena) {
      player_uistate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_uistate, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  player_uistate_ = player_uistate;
  // @@protoc_insertion_point(field_set_allocated:CTFPartyOptions.player_uistate)
}

// -------------------------------------------------------------------

// CMsgPartySetOptions

// optional fixed64 party_id = 1;
inline bool CMsgPartySetOptions::_internal_has_party_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgPartySetOptions::has_party_id() const {
  return _internal_has_party_id();
}
inline void CMsgPartySetOptions::clear_party_id() {
  party_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgPartySetOptions::_internal_party_id() const {
  return party_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgPartySetOptions::party_id() const {
  // @@protoc_insertion_point(field_get:CMsgPartySetOptions.party_id)
  return _internal_party_id();
}
inline void CMsgPartySetOptions::_internal_set_party_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  party_id_ = value;
}
inline void CMsgPartySetOptions::set_party_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_party_id(value);
  // @@protoc_insertion_point(field_set:CMsgPartySetOptions.party_id)
}

// optional .CTFPartyOptions options = 2;
inline bool CMsgPartySetOptions::_internal_has_options() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || options_ != nullptr);
  return value;
}
inline bool CMsgPartySetOptions::has_options() const {
  return _internal_has_options();
}
inline void CMsgPartySetOptions::clear_options() {
  if (options_ != nullptr) options_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CTFPartyOptions& CMsgPartySetOptions::_internal_options() const {
  const ::CTFPartyOptions* p = options_;
  return p != nullptr ? *p : reinterpret_cast<const ::CTFPartyOptions&>(
      ::_CTFPartyOptions_default_instance_);
}
inline const ::CTFPartyOptions& CMsgPartySetOptions::options() const {
  // @@protoc_insertion_point(field_get:CMsgPartySetOptions.options)
  return _internal_options();
}
inline void CMsgPartySetOptions::unsafe_arena_set_allocated_options(
    ::CTFPartyOptions* options) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(options_);
  }
  options_ = options;
  if (options) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPartySetOptions.options)
}
inline ::CTFPartyOptions* CMsgPartySetOptions::release_options() {
  _has_bits_[0] &= ~0x00000001u;
  ::CTFPartyOptions* temp = options_;
  options_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CTFPartyOptions* CMsgPartySetOptions::unsafe_arena_release_options() {
  // @@protoc_insertion_point(field_release:CMsgPartySetOptions.options)
  _has_bits_[0] &= ~0x00000001u;
  ::CTFPartyOptions* temp = options_;
  options_ = nullptr;
  return temp;
}
inline ::CTFPartyOptions* CMsgPartySetOptions::_internal_mutable_options() {
  _has_bits_[0] |= 0x00000001u;
  if (options_ == nullptr) {
    auto* p = CreateMaybeMessage<::CTFPartyOptions>(GetArenaForAllocation());
    options_ = p;
  }
  return options_;
}
inline ::CTFPartyOptions* CMsgPartySetOptions::mutable_options() {
  // @@protoc_insertion_point(field_mutable:CMsgPartySetOptions.options)
  return _internal_mutable_options();
}
inline void CMsgPartySetOptions::set_allocated_options(::CTFPartyOptions* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete options_;
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CTFPartyOptions>::GetOwningArena(options);
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  options_ = options;
  // @@protoc_insertion_point(field_set_allocated:CMsgPartySetOptions.options)
}

// -------------------------------------------------------------------

// CMsgPartySetOptionsResponse

// -------------------------------------------------------------------

// CMsgPartyQueueForMatch

// optional fixed64 party_id = 1;
inline bool CMsgPartyQueueForMatch::_internal_has_party_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgPartyQueueForMatch::has_party_id() const {
  return _internal_has_party_id();
}
inline void CMsgPartyQueueForMatch::clear_party_id() {
  party_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgPartyQueueForMatch::_internal_party_id() const {
  return party_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgPartyQueueForMatch::party_id() const {
  // @@protoc_insertion_point(field_get:CMsgPartyQueueForMatch.party_id)
  return _internal_party_id();
}
inline void CMsgPartyQueueForMatch::_internal_set_party_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  party_id_ = value;
}
inline void CMsgPartyQueueForMatch::set_party_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_party_id(value);
  // @@protoc_insertion_point(field_set:CMsgPartyQueueForMatch.party_id)
}

// optional .CTFPartyOptions final_options = 2;
inline bool CMsgPartyQueueForMatch::_internal_has_final_options() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || final_options_ != nullptr);
  return value;
}
inline bool CMsgPartyQueueForMatch::has_final_options() const {
  return _internal_has_final_options();
}
inline void CMsgPartyQueueForMatch::clear_final_options() {
  if (final_options_ != nullptr) final_options_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CTFPartyOptions& CMsgPartyQueueForMatch::_internal_final_options() const {
  const ::CTFPartyOptions* p = final_options_;
  return p != nullptr ? *p : reinterpret_cast<const ::CTFPartyOptions&>(
      ::_CTFPartyOptions_default_instance_);
}
inline const ::CTFPartyOptions& CMsgPartyQueueForMatch::final_options() const {
  // @@protoc_insertion_point(field_get:CMsgPartyQueueForMatch.final_options)
  return _internal_final_options();
}
inline void CMsgPartyQueueForMatch::unsafe_arena_set_allocated_final_options(
    ::CTFPartyOptions* final_options) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(final_options_);
  }
  final_options_ = final_options;
  if (final_options) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPartyQueueForMatch.final_options)
}
inline ::CTFPartyOptions* CMsgPartyQueueForMatch::release_final_options() {
  _has_bits_[0] &= ~0x00000001u;
  ::CTFPartyOptions* temp = final_options_;
  final_options_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CTFPartyOptions* CMsgPartyQueueForMatch::unsafe_arena_release_final_options() {
  // @@protoc_insertion_point(field_release:CMsgPartyQueueForMatch.final_options)
  _has_bits_[0] &= ~0x00000001u;
  ::CTFPartyOptions* temp = final_options_;
  final_options_ = nullptr;
  return temp;
}
inline ::CTFPartyOptions* CMsgPartyQueueForMatch::_internal_mutable_final_options() {
  _has_bits_[0] |= 0x00000001u;
  if (final_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::CTFPartyOptions>(GetArenaForAllocation());
    final_options_ = p;
  }
  return final_options_;
}
inline ::CTFPartyOptions* CMsgPartyQueueForMatch::mutable_final_options() {
  // @@protoc_insertion_point(field_mutable:CMsgPartyQueueForMatch.final_options)
  return _internal_mutable_final_options();
}
inline void CMsgPartyQueueForMatch::set_allocated_final_options(::CTFPartyOptions* final_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete final_options_;
  }
  if (final_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CTFPartyOptions>::GetOwningArena(final_options);
    if (message_arena != submessage_arena) {
      final_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, final_options, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  final_options_ = final_options;
  // @@protoc_insertion_point(field_set_allocated:CMsgPartyQueueForMatch.final_options)
}

// optional .ETFMatchGroup match_group = 3 [default = k_eTFMatchGroup_Invalid];
inline bool CMsgPartyQueueForMatch::_internal_has_match_group() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgPartyQueueForMatch::has_match_group() const {
  return _internal_has_match_group();
}
inline void CMsgPartyQueueForMatch::clear_match_group() {
  match_group_ = -1;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::ETFMatchGroup CMsgPartyQueueForMatch::_internal_match_group() const {
  return static_cast< ::ETFMatchGroup >(match_group_);
}
inline ::ETFMatchGroup CMsgPartyQueueForMatch::match_group() const {
  // @@protoc_insertion_point(field_get:CMsgPartyQueueForMatch.match_group)
  return _internal_match_group();
}
inline void CMsgPartyQueueForMatch::_internal_set_match_group(::ETFMatchGroup value) {
  assert(::ETFMatchGroup_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  match_group_ = value;
}
inline void CMsgPartyQueueForMatch::set_match_group(::ETFMatchGroup value) {
  _internal_set_match_group(value);
  // @@protoc_insertion_point(field_set:CMsgPartyQueueForMatch.match_group)
}

// -------------------------------------------------------------------

// CMsgPartyQueueForMatchResponse

// -------------------------------------------------------------------

// CMsgPartyQueueForStandby

// optional fixed64 party_id = 1;
inline bool CMsgPartyQueueForStandby::_internal_has_party_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgPartyQueueForStandby::has_party_id() const {
  return _internal_has_party_id();
}
inline void CMsgPartyQueueForStandby::clear_party_id() {
  party_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgPartyQueueForStandby::_internal_party_id() const {
  return party_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgPartyQueueForStandby::party_id() const {
  // @@protoc_insertion_point(field_get:CMsgPartyQueueForStandby.party_id)
  return _internal_party_id();
}
inline void CMsgPartyQueueForStandby::_internal_set_party_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  party_id_ = value;
}
inline void CMsgPartyQueueForStandby::set_party_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_party_id(value);
  // @@protoc_insertion_point(field_set:CMsgPartyQueueForStandby.party_id)
}

// optional fixed64 party_lobby_id = 2;
inline bool CMsgPartyQueueForStandby::_internal_has_party_lobby_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgPartyQueueForStandby::has_party_lobby_id() const {
  return _internal_has_party_lobby_id();
}
inline void CMsgPartyQueueForStandby::clear_party_lobby_id() {
  party_lobby_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgPartyQueueForStandby::_internal_party_lobby_id() const {
  return party_lobby_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgPartyQueueForStandby::party_lobby_id() const {
  // @@protoc_insertion_point(field_get:CMsgPartyQueueForStandby.party_lobby_id)
  return _internal_party_lobby_id();
}
inline void CMsgPartyQueueForStandby::_internal_set_party_lobby_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  party_lobby_id_ = value;
}
inline void CMsgPartyQueueForStandby::set_party_lobby_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_party_lobby_id(value);
  // @@protoc_insertion_point(field_set:CMsgPartyQueueForStandby.party_lobby_id)
}

// -------------------------------------------------------------------

// CMsgPartyQueueForStandbyResponse

// -------------------------------------------------------------------

// CMsgPartyRemoveFromQueue

// optional fixed64 party_id = 1;
inline bool CMsgPartyRemoveFromQueue::_internal_has_party_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgPartyRemoveFromQueue::has_party_id() const {
  return _internal_has_party_id();
}
inline void CMsgPartyRemoveFromQueue::clear_party_id() {
  party_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgPartyRemoveFromQueue::_internal_party_id() const {
  return party_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgPartyRemoveFromQueue::party_id() const {
  // @@protoc_insertion_point(field_get:CMsgPartyRemoveFromQueue.party_id)
  return _internal_party_id();
}
inline void CMsgPartyRemoveFromQueue::_internal_set_party_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  party_id_ = value;
}
inline void CMsgPartyRemoveFromQueue::set_party_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_party_id(value);
  // @@protoc_insertion_point(field_set:CMsgPartyRemoveFromQueue.party_id)
}

// optional .ETFMatchGroup match_group = 2 [default = k_eTFMatchGroup_Invalid];
inline bool CMsgPartyRemoveFromQueue::_internal_has_match_group() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgPartyRemoveFromQueue::has_match_group() const {
  return _internal_has_match_group();
}
inline void CMsgPartyRemoveFromQueue::clear_match_group() {
  match_group_ = -1;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::ETFMatchGroup CMsgPartyRemoveFromQueue::_internal_match_group() const {
  return static_cast< ::ETFMatchGroup >(match_group_);
}
inline ::ETFMatchGroup CMsgPartyRemoveFromQueue::match_group() const {
  // @@protoc_insertion_point(field_get:CMsgPartyRemoveFromQueue.match_group)
  return _internal_match_group();
}
inline void CMsgPartyRemoveFromQueue::_internal_set_match_group(::ETFMatchGroup value) {
  assert(::ETFMatchGroup_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  match_group_ = value;
}
inline void CMsgPartyRemoveFromQueue::set_match_group(::ETFMatchGroup value) {
  _internal_set_match_group(value);
  // @@protoc_insertion_point(field_set:CMsgPartyRemoveFromQueue.match_group)
}

// -------------------------------------------------------------------

// CMsgPartyRemoveFromQueueResponse

// -------------------------------------------------------------------

// CMsgPartyRemoveFromStandbyQueue

// optional fixed64 party_id = 1;
inline bool CMsgPartyRemoveFromStandbyQueue::_internal_has_party_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgPartyRemoveFromStandbyQueue::has_party_id() const {
  return _internal_has_party_id();
}
inline void CMsgPartyRemoveFromStandbyQueue::clear_party_id() {
  party_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgPartyRemoveFromStandbyQueue::_internal_party_id() const {
  return party_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgPartyRemoveFromStandbyQueue::party_id() const {
  // @@protoc_insertion_point(field_get:CMsgPartyRemoveFromStandbyQueue.party_id)
  return _internal_party_id();
}
inline void CMsgPartyRemoveFromStandbyQueue::_internal_set_party_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  party_id_ = value;
}
inline void CMsgPartyRemoveFromStandbyQueue::set_party_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_party_id(value);
  // @@protoc_insertion_point(field_set:CMsgPartyRemoveFromStandbyQueue.party_id)
}

// -------------------------------------------------------------------

// CMsgPartyRemoveFromStandbyQueueResponse

// -------------------------------------------------------------------

// CMsgPartyInvitePlayer

// optional fixed64 party_id = 1;
inline bool CMsgPartyInvitePlayer::_internal_has_party_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgPartyInvitePlayer::has_party_id() const {
  return _internal_has_party_id();
}
inline void CMsgPartyInvitePlayer::clear_party_id() {
  party_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgPartyInvitePlayer::_internal_party_id() const {
  return party_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgPartyInvitePlayer::party_id() const {
  // @@protoc_insertion_point(field_get:CMsgPartyInvitePlayer.party_id)
  return _internal_party_id();
}
inline void CMsgPartyInvitePlayer::_internal_set_party_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  party_id_ = value;
}
inline void CMsgPartyInvitePlayer::set_party_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_party_id(value);
  // @@protoc_insertion_point(field_set:CMsgPartyInvitePlayer.party_id)
}

// optional fixed64 player_id = 2;
inline bool CMsgPartyInvitePlayer::_internal_has_player_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgPartyInvitePlayer::has_player_id() const {
  return _internal_has_player_id();
}
inline void CMsgPartyInvitePlayer::clear_player_id() {
  player_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgPartyInvitePlayer::_internal_player_id() const {
  return player_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgPartyInvitePlayer::player_id() const {
  // @@protoc_insertion_point(field_get:CMsgPartyInvitePlayer.player_id)
  return _internal_player_id();
}
inline void CMsgPartyInvitePlayer::_internal_set_player_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  player_id_ = value;
}
inline void CMsgPartyInvitePlayer::set_player_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:CMsgPartyInvitePlayer.player_id)
}

// optional bool expecting_request_to_join = 3;
inline bool CMsgPartyInvitePlayer::_internal_has_expecting_request_to_join() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgPartyInvitePlayer::has_expecting_request_to_join() const {
  return _internal_has_expecting_request_to_join();
}
inline void CMsgPartyInvitePlayer::clear_expecting_request_to_join() {
  expecting_request_to_join_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CMsgPartyInvitePlayer::_internal_expecting_request_to_join() const {
  return expecting_request_to_join_;
}
inline bool CMsgPartyInvitePlayer::expecting_request_to_join() const {
  // @@protoc_insertion_point(field_get:CMsgPartyInvitePlayer.expecting_request_to_join)
  return _internal_expecting_request_to_join();
}
inline void CMsgPartyInvitePlayer::_internal_set_expecting_request_to_join(bool value) {
  _has_bits_[0] |= 0x00000004u;
  expecting_request_to_join_ = value;
}
inline void CMsgPartyInvitePlayer::set_expecting_request_to_join(bool value) {
  _internal_set_expecting_request_to_join(value);
  // @@protoc_insertion_point(field_set:CMsgPartyInvitePlayer.expecting_request_to_join)
}

// -------------------------------------------------------------------

// CMsgPartyRequestJoinPlayer

// optional fixed64 current_party_id = 1;
inline bool CMsgPartyRequestJoinPlayer::_internal_has_current_party_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgPartyRequestJoinPlayer::has_current_party_id() const {
  return _internal_has_current_party_id();
}
inline void CMsgPartyRequestJoinPlayer::clear_current_party_id() {
  current_party_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgPartyRequestJoinPlayer::_internal_current_party_id() const {
  return current_party_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgPartyRequestJoinPlayer::current_party_id() const {
  // @@protoc_insertion_point(field_get:CMsgPartyRequestJoinPlayer.current_party_id)
  return _internal_current_party_id();
}
inline void CMsgPartyRequestJoinPlayer::_internal_set_current_party_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  current_party_id_ = value;
}
inline void CMsgPartyRequestJoinPlayer::set_current_party_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_current_party_id(value);
  // @@protoc_insertion_point(field_set:CMsgPartyRequestJoinPlayer.current_party_id)
}

// optional fixed64 join_player_id = 2;
inline bool CMsgPartyRequestJoinPlayer::_internal_has_join_player_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgPartyRequestJoinPlayer::has_join_player_id() const {
  return _internal_has_join_player_id();
}
inline void CMsgPartyRequestJoinPlayer::clear_join_player_id() {
  join_player_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgPartyRequestJoinPlayer::_internal_join_player_id() const {
  return join_player_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgPartyRequestJoinPlayer::join_player_id() const {
  // @@protoc_insertion_point(field_get:CMsgPartyRequestJoinPlayer.join_player_id)
  return _internal_join_player_id();
}
inline void CMsgPartyRequestJoinPlayer::_internal_set_join_player_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  join_player_id_ = value;
}
inline void CMsgPartyRequestJoinPlayer::set_join_player_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_join_player_id(value);
  // @@protoc_insertion_point(field_set:CMsgPartyRequestJoinPlayer.join_player_id)
}

// optional fixed64 join_party_id = 3;
inline bool CMsgPartyRequestJoinPlayer::_internal_has_join_party_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgPartyRequestJoinPlayer::has_join_party_id() const {
  return _internal_has_join_party_id();
}
inline void CMsgPartyRequestJoinPlayer::clear_join_party_id() {
  join_party_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgPartyRequestJoinPlayer::_internal_join_party_id() const {
  return join_party_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgPartyRequestJoinPlayer::join_party_id() const {
  // @@protoc_insertion_point(field_get:CMsgPartyRequestJoinPlayer.join_party_id)
  return _internal_join_party_id();
}
inline void CMsgPartyRequestJoinPlayer::_internal_set_join_party_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  join_party_id_ = value;
}
inline void CMsgPartyRequestJoinPlayer::set_join_party_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_join_party_id(value);
  // @@protoc_insertion_point(field_set:CMsgPartyRequestJoinPlayer.join_party_id)
}

// optional bool expecting_invite = 4;
inline bool CMsgPartyRequestJoinPlayer::_internal_has_expecting_invite() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgPartyRequestJoinPlayer::has_expecting_invite() const {
  return _internal_has_expecting_invite();
}
inline void CMsgPartyRequestJoinPlayer::clear_expecting_invite() {
  expecting_invite_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CMsgPartyRequestJoinPlayer::_internal_expecting_invite() const {
  return expecting_invite_;
}
inline bool CMsgPartyRequestJoinPlayer::expecting_invite() const {
  // @@protoc_insertion_point(field_get:CMsgPartyRequestJoinPlayer.expecting_invite)
  return _internal_expecting_invite();
}
inline void CMsgPartyRequestJoinPlayer::_internal_set_expecting_invite(bool value) {
  _has_bits_[0] |= 0x00000008u;
  expecting_invite_ = value;
}
inline void CMsgPartyRequestJoinPlayer::set_expecting_invite(bool value) {
  _internal_set_expecting_invite(value);
  // @@protoc_insertion_point(field_set:CMsgPartyRequestJoinPlayer.expecting_invite)
}

// -------------------------------------------------------------------

// CMsgPartyClearPendingPlayer

// optional fixed64 party_id = 1;
inline bool CMsgPartyClearPendingPlayer::_internal_has_party_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgPartyClearPendingPlayer::has_party_id() const {
  return _internal_has_party_id();
}
inline void CMsgPartyClearPendingPlayer::clear_party_id() {
  party_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgPartyClearPendingPlayer::_internal_party_id() const {
  return party_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgPartyClearPendingPlayer::party_id() const {
  // @@protoc_insertion_point(field_get:CMsgPartyClearPendingPlayer.party_id)
  return _internal_party_id();
}
inline void CMsgPartyClearPendingPlayer::_internal_set_party_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  party_id_ = value;
}
inline void CMsgPartyClearPendingPlayer::set_party_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_party_id(value);
  // @@protoc_insertion_point(field_set:CMsgPartyClearPendingPlayer.party_id)
}

// optional fixed64 pending_player_id = 2;
inline bool CMsgPartyClearPendingPlayer::_internal_has_pending_player_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgPartyClearPendingPlayer::has_pending_player_id() const {
  return _internal_has_pending_player_id();
}
inline void CMsgPartyClearPendingPlayer::clear_pending_player_id() {
  pending_player_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgPartyClearPendingPlayer::_internal_pending_player_id() const {
  return pending_player_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgPartyClearPendingPlayer::pending_player_id() const {
  // @@protoc_insertion_point(field_get:CMsgPartyClearPendingPlayer.pending_player_id)
  return _internal_pending_player_id();
}
inline void CMsgPartyClearPendingPlayer::_internal_set_pending_player_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  pending_player_id_ = value;
}
inline void CMsgPartyClearPendingPlayer::set_pending_player_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_pending_player_id(value);
  // @@protoc_insertion_point(field_set:CMsgPartyClearPendingPlayer.pending_player_id)
}

// -------------------------------------------------------------------

// CMsgPartyClearPendingPlayerResponse

// -------------------------------------------------------------------

// CMsgPartyClearOtherPartyRequest

// optional fixed64 other_party_id = 1;
inline bool CMsgPartyClearOtherPartyRequest::_internal_has_other_party_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgPartyClearOtherPartyRequest::has_other_party_id() const {
  return _internal_has_other_party_id();
}
inline void CMsgPartyClearOtherPartyRequest::clear_other_party_id() {
  other_party_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgPartyClearOtherPartyRequest::_internal_other_party_id() const {
  return other_party_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgPartyClearOtherPartyRequest::other_party_id() const {
  // @@protoc_insertion_point(field_get:CMsgPartyClearOtherPartyRequest.other_party_id)
  return _internal_other_party_id();
}
inline void CMsgPartyClearOtherPartyRequest::_internal_set_other_party_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  other_party_id_ = value;
}
inline void CMsgPartyClearOtherPartyRequest::set_other_party_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_other_party_id(value);
  // @@protoc_insertion_point(field_set:CMsgPartyClearOtherPartyRequest.other_party_id)
}

// -------------------------------------------------------------------

// CMsgPartyClearOtherPartyRequestResponse

// -------------------------------------------------------------------

// CMsgPartyPromoteToLeader

// optional fixed64 party_id = 1;
inline bool CMsgPartyPromoteToLeader::_internal_has_party_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgPartyPromoteToLeader::has_party_id() const {
  return _internal_has_party_id();
}
inline void CMsgPartyPromoteToLeader::clear_party_id() {
  party_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgPartyPromoteToLeader::_internal_party_id() const {
  return party_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgPartyPromoteToLeader::party_id() const {
  // @@protoc_insertion_point(field_get:CMsgPartyPromoteToLeader.party_id)
  return _internal_party_id();
}
inline void CMsgPartyPromoteToLeader::_internal_set_party_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  party_id_ = value;
}
inline void CMsgPartyPromoteToLeader::set_party_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_party_id(value);
  // @@protoc_insertion_point(field_set:CMsgPartyPromoteToLeader.party_id)
}

// optional fixed64 new_leader_id = 2;
inline bool CMsgPartyPromoteToLeader::_internal_has_new_leader_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgPartyPromoteToLeader::has_new_leader_id() const {
  return _internal_has_new_leader_id();
}
inline void CMsgPartyPromoteToLeader::clear_new_leader_id() {
  new_leader_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgPartyPromoteToLeader::_internal_new_leader_id() const {
  return new_leader_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgPartyPromoteToLeader::new_leader_id() const {
  // @@protoc_insertion_point(field_get:CMsgPartyPromoteToLeader.new_leader_id)
  return _internal_new_leader_id();
}
inline void CMsgPartyPromoteToLeader::_internal_set_new_leader_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  new_leader_id_ = value;
}
inline void CMsgPartyPromoteToLeader::set_new_leader_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_new_leader_id(value);
  // @@protoc_insertion_point(field_set:CMsgPartyPromoteToLeader.new_leader_id)
}

// -------------------------------------------------------------------

// CMsgPartyKickMember

// optional fixed64 party_id = 1;
inline bool CMsgPartyKickMember::_internal_has_party_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgPartyKickMember::has_party_id() const {
  return _internal_has_party_id();
}
inline void CMsgPartyKickMember::clear_party_id() {
  party_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgPartyKickMember::_internal_party_id() const {
  return party_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgPartyKickMember::party_id() const {
  // @@protoc_insertion_point(field_get:CMsgPartyKickMember.party_id)
  return _internal_party_id();
}
inline void CMsgPartyKickMember::_internal_set_party_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  party_id_ = value;
}
inline void CMsgPartyKickMember::set_party_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_party_id(value);
  // @@protoc_insertion_point(field_set:CMsgPartyKickMember.party_id)
}

// optional fixed64 target_id = 2;
inline bool CMsgPartyKickMember::_internal_has_target_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgPartyKickMember::has_target_id() const {
  return _internal_has_target_id();
}
inline void CMsgPartyKickMember::clear_target_id() {
  target_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgPartyKickMember::_internal_target_id() const {
  return target_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgPartyKickMember::target_id() const {
  // @@protoc_insertion_point(field_get:CMsgPartyKickMember.target_id)
  return _internal_target_id();
}
inline void CMsgPartyKickMember::_internal_set_target_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  target_id_ = value;
}
inline void CMsgPartyKickMember::set_target_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_target_id(value);
  // @@protoc_insertion_point(field_set:CMsgPartyKickMember.target_id)
}

// -------------------------------------------------------------------

// CMsgPartySendChat

// optional fixed64 party_id = 1;
inline bool CMsgPartySendChat::_internal_has_party_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgPartySendChat::has_party_id() const {
  return _internal_has_party_id();
}
inline void CMsgPartySendChat::clear_party_id() {
  party_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgPartySendChat::_internal_party_id() const {
  return party_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgPartySendChat::party_id() const {
  // @@protoc_insertion_point(field_get:CMsgPartySendChat.party_id)
  return _internal_party_id();
}
inline void CMsgPartySendChat::_internal_set_party_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  party_id_ = value;
}
inline void CMsgPartySendChat::set_party_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_party_id(value);
  // @@protoc_insertion_point(field_set:CMsgPartySendChat.party_id)
}

// optional string msg = 2;
inline bool CMsgPartySendChat::_internal_has_msg() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgPartySendChat::has_msg() const {
  return _internal_has_msg();
}
inline void CMsgPartySendChat::clear_msg() {
  msg_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgPartySendChat::msg() const {
  // @@protoc_insertion_point(field_get:CMsgPartySendChat.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgPartySendChat::set_msg(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgPartySendChat.msg)
}
inline std::string* CMsgPartySendChat::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:CMsgPartySendChat.msg)
  return _internal_mutable_msg();
}
inline const std::string& CMsgPartySendChat::_internal_msg() const {
  return msg_.Get();
}
inline void CMsgPartySendChat::_internal_set_msg(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgPartySendChat::_internal_mutable_msg() {
  _has_bits_[0] |= 0x00000001u;
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgPartySendChat::release_msg() {
  // @@protoc_insertion_point(field_release:CMsgPartySendChat.msg)
  if (!_internal_has_msg()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return msg_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CMsgPartySendChat::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CMsgPartySendChat.msg)
}

// -------------------------------------------------------------------

// CMsgPartyChatMsg

// optional .ETFPartyChatType type = 1 [default = k_eTFPartyChatType_Invalid];
inline bool CMsgPartyChatMsg::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgPartyChatMsg::has_type() const {
  return _internal_has_type();
}
inline void CMsgPartyChatMsg::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::ETFPartyChatType CMsgPartyChatMsg::_internal_type() const {
  return static_cast< ::ETFPartyChatType >(type_);
}
inline ::ETFPartyChatType CMsgPartyChatMsg::type() const {
  // @@protoc_insertion_point(field_get:CMsgPartyChatMsg.type)
  return _internal_type();
}
inline void CMsgPartyChatMsg::_internal_set_type(::ETFPartyChatType value) {
  assert(::ETFPartyChatType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  type_ = value;
}
inline void CMsgPartyChatMsg::set_type(::ETFPartyChatType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:CMsgPartyChatMsg.type)
}

// optional fixed64 actor_id = 2;
inline bool CMsgPartyChatMsg::_internal_has_actor_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgPartyChatMsg::has_actor_id() const {
  return _internal_has_actor_id();
}
inline void CMsgPartyChatMsg::clear_actor_id() {
  actor_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgPartyChatMsg::_internal_actor_id() const {
  return actor_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgPartyChatMsg::actor_id() const {
  // @@protoc_insertion_point(field_get:CMsgPartyChatMsg.actor_id)
  return _internal_actor_id();
}
inline void CMsgPartyChatMsg::_internal_set_actor_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  actor_id_ = value;
}
inline void CMsgPartyChatMsg::set_actor_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_actor_id(value);
  // @@protoc_insertion_point(field_set:CMsgPartyChatMsg.actor_id)
}

// optional string msg = 3;
inline bool CMsgPartyChatMsg::_internal_has_msg() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgPartyChatMsg::has_msg() const {
  return _internal_has_msg();
}
inline void CMsgPartyChatMsg::clear_msg() {
  msg_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgPartyChatMsg::msg() const {
  // @@protoc_insertion_point(field_get:CMsgPartyChatMsg.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgPartyChatMsg::set_msg(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgPartyChatMsg.msg)
}
inline std::string* CMsgPartyChatMsg::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:CMsgPartyChatMsg.msg)
  return _internal_mutable_msg();
}
inline const std::string& CMsgPartyChatMsg::_internal_msg() const {
  return msg_.Get();
}
inline void CMsgPartyChatMsg::_internal_set_msg(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgPartyChatMsg::_internal_mutable_msg() {
  _has_bits_[0] |= 0x00000001u;
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgPartyChatMsg::release_msg() {
  // @@protoc_insertion_point(field_release:CMsgPartyChatMsg.msg)
  if (!_internal_has_msg()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return msg_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CMsgPartyChatMsg::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CMsgPartyChatMsg.msg)
}

// -------------------------------------------------------------------

// CSOTFParty_QueueEntry

// optional .ETFMatchGroup match_group = 1 [default = k_eTFMatchGroup_Invalid];
inline bool CSOTFParty_QueueEntry::_internal_has_match_group() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSOTFParty_QueueEntry::has_match_group() const {
  return _internal_has_match_group();
}
inline void CSOTFParty_QueueEntry::clear_match_group() {
  match_group_ = -1;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::ETFMatchGroup CSOTFParty_QueueEntry::_internal_match_group() const {
  return static_cast< ::ETFMatchGroup >(match_group_);
}
inline ::ETFMatchGroup CSOTFParty_QueueEntry::match_group() const {
  // @@protoc_insertion_point(field_get:CSOTFParty.QueueEntry.match_group)
  return _internal_match_group();
}
inline void CSOTFParty_QueueEntry::_internal_set_match_group(::ETFMatchGroup value) {
  assert(::ETFMatchGroup_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  match_group_ = value;
}
inline void CSOTFParty_QueueEntry::set_match_group(::ETFMatchGroup value) {
  _internal_set_match_group(value);
  // @@protoc_insertion_point(field_set:CSOTFParty.QueueEntry.match_group)
}

// optional fixed32 queued_time = 2;
inline bool CSOTFParty_QueueEntry::_internal_has_queued_time() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSOTFParty_QueueEntry::has_queued_time() const {
  return _internal_has_queued_time();
}
inline void CSOTFParty_QueueEntry::clear_queued_time() {
  queued_time_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFParty_QueueEntry::_internal_queued_time() const {
  return queued_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFParty_QueueEntry::queued_time() const {
  // @@protoc_insertion_point(field_get:CSOTFParty.QueueEntry.queued_time)
  return _internal_queued_time();
}
inline void CSOTFParty_QueueEntry::_internal_set_queued_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  queued_time_ = value;
}
inline void CSOTFParty_QueueEntry::set_queued_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_queued_time(value);
  // @@protoc_insertion_point(field_set:CSOTFParty.QueueEntry.queued_time)
}

// -------------------------------------------------------------------

// CSOTFParty

// optional uint64 party_id = 1 [(.key_field) = true];
inline bool CSOTFParty::_internal_has_party_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CSOTFParty::has_party_id() const {
  return _internal_has_party_id();
}
inline void CSOTFParty::clear_party_id() {
  party_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CSOTFParty::_internal_party_id() const {
  return party_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CSOTFParty::party_id() const {
  // @@protoc_insertion_point(field_get:CSOTFParty.party_id)
  return _internal_party_id();
}
inline void CSOTFParty::_internal_set_party_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  party_id_ = value;
}
inline void CSOTFParty::set_party_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_party_id(value);
  // @@protoc_insertion_point(field_set:CSOTFParty.party_id)
}

// optional fixed64 leader_id = 2;
inline bool CSOTFParty::_internal_has_leader_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CSOTFParty::has_leader_id() const {
  return _internal_has_leader_id();
}
inline void CSOTFParty::clear_leader_id() {
  leader_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CSOTFParty::_internal_leader_id() const {
  return leader_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CSOTFParty::leader_id() const {
  // @@protoc_insertion_point(field_get:CSOTFParty.leader_id)
  return _internal_leader_id();
}
inline void CSOTFParty::_internal_set_leader_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  leader_id_ = value;
}
inline void CSOTFParty::set_leader_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_leader_id(value);
  // @@protoc_insertion_point(field_set:CSOTFParty.leader_id)
}

// repeated fixed64 member_ids = 3;
inline int CSOTFParty::_internal_member_ids_size() const {
  return member_ids_.size();
}
inline int CSOTFParty::member_ids_size() const {
  return _internal_member_ids_size();
}
inline void CSOTFParty::clear_member_ids() {
  member_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CSOTFParty::_internal_member_ids(int index) const {
  return member_ids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CSOTFParty::member_ids(int index) const {
  // @@protoc_insertion_point(field_get:CSOTFParty.member_ids)
  return _internal_member_ids(index);
}
inline void CSOTFParty::set_member_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  member_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CSOTFParty.member_ids)
}
inline void CSOTFParty::_internal_add_member_ids(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  member_ids_.Add(value);
}
inline void CSOTFParty::add_member_ids(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_member_ids(value);
  // @@protoc_insertion_point(field_add:CSOTFParty.member_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
CSOTFParty::_internal_member_ids() const {
  return member_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
CSOTFParty::member_ids() const {
  // @@protoc_insertion_point(field_list:CSOTFParty.member_ids)
  return _internal_member_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
CSOTFParty::_internal_mutable_member_ids() {
  return &member_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
CSOTFParty::mutable_member_ids() {
  // @@protoc_insertion_point(field_mutable_list:CSOTFParty.member_ids)
  return _internal_mutable_member_ids();
}

// repeated .CSOTFPartyMember members = 13;
inline int CSOTFParty::_internal_members_size() const {
  return members_.size();
}
inline int CSOTFParty::members_size() const {
  return _internal_members_size();
}
inline void CSOTFParty::clear_members() {
  members_.Clear();
}
inline ::CSOTFPartyMember* CSOTFParty::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:CSOTFParty.members)
  return members_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSOTFPartyMember >*
CSOTFParty::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:CSOTFParty.members)
  return &members_;
}
inline const ::CSOTFPartyMember& CSOTFParty::_internal_members(int index) const {
  return members_.Get(index);
}
inline const ::CSOTFPartyMember& CSOTFParty::members(int index) const {
  // @@protoc_insertion_point(field_get:CSOTFParty.members)
  return _internal_members(index);
}
inline ::CSOTFPartyMember* CSOTFParty::_internal_add_members() {
  return members_.Add();
}
inline ::CSOTFPartyMember* CSOTFParty::add_members() {
  // @@protoc_insertion_point(field_add:CSOTFParty.members)
  return _internal_add_members();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSOTFPartyMember >&
CSOTFParty::members() const {
  // @@protoc_insertion_point(field_list:CSOTFParty.members)
  return members_;
}

// optional uint64 associated_lobby_id = 35;
inline bool CSOTFParty::_internal_has_associated_lobby_id() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CSOTFParty::has_associated_lobby_id() const {
  return _internal_has_associated_lobby_id();
}
inline void CSOTFParty::clear_associated_lobby_id() {
  associated_lobby_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CSOTFParty::_internal_associated_lobby_id() const {
  return associated_lobby_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CSOTFParty::associated_lobby_id() const {
  // @@protoc_insertion_point(field_get:CSOTFParty.associated_lobby_id)
  return _internal_associated_lobby_id();
}
inline void CSOTFParty::_internal_set_associated_lobby_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  associated_lobby_id_ = value;
}
inline void CSOTFParty::set_associated_lobby_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_associated_lobby_id(value);
  // @@protoc_insertion_point(field_set:CSOTFParty.associated_lobby_id)
}

// optional .ETFMatchGroup associated_lobby_match_group = 40 [default = k_eTFMatchGroup_Invalid];
inline bool CSOTFParty::_internal_has_associated_lobby_match_group() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CSOTFParty::has_associated_lobby_match_group() const {
  return _internal_has_associated_lobby_match_group();
}
inline void CSOTFParty::clear_associated_lobby_match_group() {
  associated_lobby_match_group_ = -1;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::ETFMatchGroup CSOTFParty::_internal_associated_lobby_match_group() const {
  return static_cast< ::ETFMatchGroup >(associated_lobby_match_group_);
}
inline ::ETFMatchGroup CSOTFParty::associated_lobby_match_group() const {
  // @@protoc_insertion_point(field_get:CSOTFParty.associated_lobby_match_group)
  return _internal_associated_lobby_match_group();
}
inline void CSOTFParty::_internal_set_associated_lobby_match_group(::ETFMatchGroup value) {
  assert(::ETFMatchGroup_IsValid(value));
  _has_bits_[0] |= 0x00000200u;
  associated_lobby_match_group_ = value;
}
inline void CSOTFParty::set_associated_lobby_match_group(::ETFMatchGroup value) {
  _internal_set_associated_lobby_match_group(value);
  // @@protoc_insertion_point(field_set:CSOTFParty.associated_lobby_match_group)
}

// repeated .CSOTFParty.QueueEntry matchmaking_queues = 43;
inline int CSOTFParty::_internal_matchmaking_queues_size() const {
  return matchmaking_queues_.size();
}
inline int CSOTFParty::matchmaking_queues_size() const {
  return _internal_matchmaking_queues_size();
}
inline void CSOTFParty::clear_matchmaking_queues() {
  matchmaking_queues_.Clear();
}
inline ::CSOTFParty_QueueEntry* CSOTFParty::mutable_matchmaking_queues(int index) {
  // @@protoc_insertion_point(field_mutable:CSOTFParty.matchmaking_queues)
  return matchmaking_queues_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSOTFParty_QueueEntry >*
CSOTFParty::mutable_matchmaking_queues() {
  // @@protoc_insertion_point(field_mutable_list:CSOTFParty.matchmaking_queues)
  return &matchmaking_queues_;
}
inline const ::CSOTFParty_QueueEntry& CSOTFParty::_internal_matchmaking_queues(int index) const {
  return matchmaking_queues_.Get(index);
}
inline const ::CSOTFParty_QueueEntry& CSOTFParty::matchmaking_queues(int index) const {
  // @@protoc_insertion_point(field_get:CSOTFParty.matchmaking_queues)
  return _internal_matchmaking_queues(index);
}
inline ::CSOTFParty_QueueEntry* CSOTFParty::_internal_add_matchmaking_queues() {
  return matchmaking_queues_.Add();
}
inline ::CSOTFParty_QueueEntry* CSOTFParty::add_matchmaking_queues() {
  // @@protoc_insertion_point(field_add:CSOTFParty.matchmaking_queues)
  return _internal_add_matchmaking_queues();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSOTFParty_QueueEntry >&
CSOTFParty::matchmaking_queues() const {
  // @@protoc_insertion_point(field_list:CSOTFParty.matchmaking_queues)
  return matchmaking_queues_;
}

// optional .CTFGroupMatchCriteriaProto group_criteria = 37;
inline bool CSOTFParty::_internal_has_group_criteria() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || group_criteria_ != nullptr);
  return value;
}
inline bool CSOTFParty::has_group_criteria() const {
  return _internal_has_group_criteria();
}
inline void CSOTFParty::clear_group_criteria() {
  if (group_criteria_ != nullptr) group_criteria_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CTFGroupMatchCriteriaProto& CSOTFParty::_internal_group_criteria() const {
  const ::CTFGroupMatchCriteriaProto* p = group_criteria_;
  return p != nullptr ? *p : reinterpret_cast<const ::CTFGroupMatchCriteriaProto&>(
      ::_CTFGroupMatchCriteriaProto_default_instance_);
}
inline const ::CTFGroupMatchCriteriaProto& CSOTFParty::group_criteria() const {
  // @@protoc_insertion_point(field_get:CSOTFParty.group_criteria)
  return _internal_group_criteria();
}
inline void CSOTFParty::unsafe_arena_set_allocated_group_criteria(
    ::CTFGroupMatchCriteriaProto* group_criteria) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(group_criteria_);
  }
  group_criteria_ = group_criteria;
  if (group_criteria) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CSOTFParty.group_criteria)
}
inline ::CTFGroupMatchCriteriaProto* CSOTFParty::release_group_criteria() {
  _has_bits_[0] &= ~0x00000001u;
  ::CTFGroupMatchCriteriaProto* temp = group_criteria_;
  group_criteria_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CTFGroupMatchCriteriaProto* CSOTFParty::unsafe_arena_release_group_criteria() {
  // @@protoc_insertion_point(field_release:CSOTFParty.group_criteria)
  _has_bits_[0] &= ~0x00000001u;
  ::CTFGroupMatchCriteriaProto* temp = group_criteria_;
  group_criteria_ = nullptr;
  return temp;
}
inline ::CTFGroupMatchCriteriaProto* CSOTFParty::_internal_mutable_group_criteria() {
  _has_bits_[0] |= 0x00000001u;
  if (group_criteria_ == nullptr) {
    auto* p = CreateMaybeMessage<::CTFGroupMatchCriteriaProto>(GetArenaForAllocation());
    group_criteria_ = p;
  }
  return group_criteria_;
}
inline ::CTFGroupMatchCriteriaProto* CSOTFParty::mutable_group_criteria() {
  // @@protoc_insertion_point(field_mutable:CSOTFParty.group_criteria)
  return _internal_mutable_group_criteria();
}
inline void CSOTFParty::set_allocated_group_criteria(::CTFGroupMatchCriteriaProto* group_criteria) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete group_criteria_;
  }
  if (group_criteria) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CTFGroupMatchCriteriaProto>::GetOwningArena(group_criteria);
    if (message_arena != submessage_arena) {
      group_criteria = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, group_criteria, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  group_criteria_ = group_criteria;
  // @@protoc_insertion_point(field_set_allocated:CSOTFParty.group_criteria)
}

// optional uint32 casual_banned_time = 18;
inline bool CSOTFParty::_internal_has_casual_banned_time() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CSOTFParty::has_casual_banned_time() const {
  return _internal_has_casual_banned_time();
}
inline void CSOTFParty::clear_casual_banned_time() {
  casual_banned_time_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFParty::_internal_casual_banned_time() const {
  return casual_banned_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFParty::casual_banned_time() const {
  // @@protoc_insertion_point(field_get:CSOTFParty.casual_banned_time)
  return _internal_casual_banned_time();
}
inline void CSOTFParty::_internal_set_casual_banned_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  casual_banned_time_ = value;
}
inline void CSOTFParty::set_casual_banned_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_casual_banned_time(value);
  // @@protoc_insertion_point(field_set:CSOTFParty.casual_banned_time)
}

// optional uint32 casual_low_priority_time = 20;
inline bool CSOTFParty::_internal_has_casual_low_priority_time() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CSOTFParty::has_casual_low_priority_time() const {
  return _internal_has_casual_low_priority_time();
}
inline void CSOTFParty::clear_casual_low_priority_time() {
  casual_low_priority_time_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFParty::_internal_casual_low_priority_time() const {
  return casual_low_priority_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFParty::casual_low_priority_time() const {
  // @@protoc_insertion_point(field_get:CSOTFParty.casual_low_priority_time)
  return _internal_casual_low_priority_time();
}
inline void CSOTFParty::_internal_set_casual_low_priority_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  casual_low_priority_time_ = value;
}
inline void CSOTFParty::set_casual_low_priority_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_casual_low_priority_time(value);
  // @@protoc_insertion_point(field_set:CSOTFParty.casual_low_priority_time)
}

// optional uint32 ranked_banned_time = 41;
inline bool CSOTFParty::_internal_has_ranked_banned_time() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CSOTFParty::has_ranked_banned_time() const {
  return _internal_has_ranked_banned_time();
}
inline void CSOTFParty::clear_ranked_banned_time() {
  ranked_banned_time_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFParty::_internal_ranked_banned_time() const {
  return ranked_banned_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFParty::ranked_banned_time() const {
  // @@protoc_insertion_point(field_get:CSOTFParty.ranked_banned_time)
  return _internal_ranked_banned_time();
}
inline void CSOTFParty::_internal_set_ranked_banned_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  ranked_banned_time_ = value;
}
inline void CSOTFParty::set_ranked_banned_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ranked_banned_time(value);
  // @@protoc_insertion_point(field_set:CSOTFParty.ranked_banned_time)
}

// optional uint32 ranked_low_priority_time = 42;
inline bool CSOTFParty::_internal_has_ranked_low_priority_time() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CSOTFParty::has_ranked_low_priority_time() const {
  return _internal_has_ranked_low_priority_time();
}
inline void CSOTFParty::clear_ranked_low_priority_time() {
  ranked_low_priority_time_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFParty::_internal_ranked_low_priority_time() const {
  return ranked_low_priority_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFParty::ranked_low_priority_time() const {
  // @@protoc_insertion_point(field_get:CSOTFParty.ranked_low_priority_time)
  return _internal_ranked_low_priority_time();
}
inline void CSOTFParty::_internal_set_ranked_low_priority_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  ranked_low_priority_time_ = value;
}
inline void CSOTFParty::set_ranked_low_priority_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ranked_low_priority_time(value);
  // @@protoc_insertion_point(field_set:CSOTFParty.ranked_low_priority_time)
}

// optional .TFSyncedMMUIState leader_ui_state = 44;
inline bool CSOTFParty::_internal_has_leader_ui_state() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || leader_ui_state_ != nullptr);
  return value;
}
inline bool CSOTFParty::has_leader_ui_state() const {
  return _internal_has_leader_ui_state();
}
inline void CSOTFParty::clear_leader_ui_state() {
  if (leader_ui_state_ != nullptr) leader_ui_state_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TFSyncedMMUIState& CSOTFParty::_internal_leader_ui_state() const {
  const ::TFSyncedMMUIState* p = leader_ui_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::TFSyncedMMUIState&>(
      ::_TFSyncedMMUIState_default_instance_);
}
inline const ::TFSyncedMMUIState& CSOTFParty::leader_ui_state() const {
  // @@protoc_insertion_point(field_get:CSOTFParty.leader_ui_state)
  return _internal_leader_ui_state();
}
inline void CSOTFParty::unsafe_arena_set_allocated_leader_ui_state(
    ::TFSyncedMMUIState* leader_ui_state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leader_ui_state_);
  }
  leader_ui_state_ = leader_ui_state;
  if (leader_ui_state) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CSOTFParty.leader_ui_state)
}
inline ::TFSyncedMMUIState* CSOTFParty::release_leader_ui_state() {
  _has_bits_[0] &= ~0x00000002u;
  ::TFSyncedMMUIState* temp = leader_ui_state_;
  leader_ui_state_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TFSyncedMMUIState* CSOTFParty::unsafe_arena_release_leader_ui_state() {
  // @@protoc_insertion_point(field_release:CSOTFParty.leader_ui_state)
  _has_bits_[0] &= ~0x00000002u;
  ::TFSyncedMMUIState* temp = leader_ui_state_;
  leader_ui_state_ = nullptr;
  return temp;
}
inline ::TFSyncedMMUIState* CSOTFParty::_internal_mutable_leader_ui_state() {
  _has_bits_[0] |= 0x00000002u;
  if (leader_ui_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::TFSyncedMMUIState>(GetArenaForAllocation());
    leader_ui_state_ = p;
  }
  return leader_ui_state_;
}
inline ::TFSyncedMMUIState* CSOTFParty::mutable_leader_ui_state() {
  // @@protoc_insertion_point(field_mutable:CSOTFParty.leader_ui_state)
  return _internal_mutable_leader_ui_state();
}
inline void CSOTFParty::set_allocated_leader_ui_state(::TFSyncedMMUIState* leader_ui_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete leader_ui_state_;
  }
  if (leader_ui_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TFSyncedMMUIState>::GetOwningArena(leader_ui_state);
    if (message_arena != submessage_arena) {
      leader_ui_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leader_ui_state, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  leader_ui_state_ = leader_ui_state;
  // @@protoc_insertion_point(field_set_allocated:CSOTFParty.leader_ui_state)
}

// repeated .TFPendingPartyMember pending_members = 39;
inline int CSOTFParty::_internal_pending_members_size() const {
  return pending_members_.size();
}
inline int CSOTFParty::pending_members_size() const {
  return _internal_pending_members_size();
}
inline void CSOTFParty::clear_pending_members() {
  pending_members_.Clear();
}
inline ::TFPendingPartyMember* CSOTFParty::mutable_pending_members(int index) {
  // @@protoc_insertion_point(field_mutable:CSOTFParty.pending_members)
  return pending_members_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TFPendingPartyMember >*
CSOTFParty::mutable_pending_members() {
  // @@protoc_insertion_point(field_mutable_list:CSOTFParty.pending_members)
  return &pending_members_;
}
inline const ::TFPendingPartyMember& CSOTFParty::_internal_pending_members(int index) const {
  return pending_members_.Get(index);
}
inline const ::TFPendingPartyMember& CSOTFParty::pending_members(int index) const {
  // @@protoc_insertion_point(field_get:CSOTFParty.pending_members)
  return _internal_pending_members(index);
}
inline ::TFPendingPartyMember* CSOTFParty::_internal_add_pending_members() {
  return pending_members_.Add();
}
inline ::TFPendingPartyMember* CSOTFParty::add_pending_members() {
  // @@protoc_insertion_point(field_add:CSOTFParty.pending_members)
  return _internal_add_pending_members();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TFPendingPartyMember >&
CSOTFParty::pending_members() const {
  // @@protoc_insertion_point(field_list:CSOTFParty.pending_members)
  return pending_members_;
}

// -------------------------------------------------------------------

// CSOTFPartyInvite_PartyMember

// optional fixed64 steamid = 2;
inline bool CSOTFPartyInvite_PartyMember::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSOTFPartyInvite_PartyMember::has_steamid() const {
  return _internal_has_steamid();
}
inline void CSOTFPartyInvite_PartyMember::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CSOTFPartyInvite_PartyMember::_internal_steamid() const {
  return steamid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CSOTFPartyInvite_PartyMember::steamid() const {
  // @@protoc_insertion_point(field_get:CSOTFPartyInvite.PartyMember.steamid)
  return _internal_steamid();
}
inline void CSOTFPartyInvite_PartyMember::_internal_set_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  steamid_ = value;
}
inline void CSOTFPartyInvite_PartyMember::set_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CSOTFPartyInvite.PartyMember.steamid)
}

// -------------------------------------------------------------------

// CSOTFPartyInvite

// optional uint64 group_id = 1 [(.key_field) = true];
inline bool CSOTFPartyInvite::_internal_has_group_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSOTFPartyInvite::has_group_id() const {
  return _internal_has_group_id();
}
inline void CSOTFPartyInvite::clear_group_id() {
  group_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CSOTFPartyInvite::_internal_group_id() const {
  return group_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CSOTFPartyInvite::group_id() const {
  // @@protoc_insertion_point(field_get:CSOTFPartyInvite.group_id)
  return _internal_group_id();
}
inline void CSOTFPartyInvite::_internal_set_group_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  group_id_ = value;
}
inline void CSOTFPartyInvite::set_group_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:CSOTFPartyInvite.group_id)
}

// optional fixed64 inviter = 2;
inline bool CSOTFPartyInvite::_internal_has_inviter() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSOTFPartyInvite::has_inviter() const {
  return _internal_has_inviter();
}
inline void CSOTFPartyInvite::clear_inviter() {
  inviter_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CSOTFPartyInvite::_internal_inviter() const {
  return inviter_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CSOTFPartyInvite::inviter() const {
  // @@protoc_insertion_point(field_get:CSOTFPartyInvite.inviter)
  return _internal_inviter();
}
inline void CSOTFPartyInvite::_internal_set_inviter(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  inviter_ = value;
}
inline void CSOTFPartyInvite::set_inviter(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_inviter(value);
  // @@protoc_insertion_point(field_set:CSOTFPartyInvite.inviter)
}

// repeated .CSOTFPartyInvite.PartyMember members = 4;
inline int CSOTFPartyInvite::_internal_members_size() const {
  return members_.size();
}
inline int CSOTFPartyInvite::members_size() const {
  return _internal_members_size();
}
inline void CSOTFPartyInvite::clear_members() {
  members_.Clear();
}
inline ::CSOTFPartyInvite_PartyMember* CSOTFPartyInvite::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:CSOTFPartyInvite.members)
  return members_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSOTFPartyInvite_PartyMember >*
CSOTFPartyInvite::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:CSOTFPartyInvite.members)
  return &members_;
}
inline const ::CSOTFPartyInvite_PartyMember& CSOTFPartyInvite::_internal_members(int index) const {
  return members_.Get(index);
}
inline const ::CSOTFPartyInvite_PartyMember& CSOTFPartyInvite::members(int index) const {
  // @@protoc_insertion_point(field_get:CSOTFPartyInvite.members)
  return _internal_members(index);
}
inline ::CSOTFPartyInvite_PartyMember* CSOTFPartyInvite::_internal_add_members() {
  return members_.Add();
}
inline ::CSOTFPartyInvite_PartyMember* CSOTFPartyInvite::add_members() {
  // @@protoc_insertion_point(field_add:CSOTFPartyInvite.members)
  return _internal_add_members();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSOTFPartyInvite_PartyMember >&
CSOTFPartyInvite::members() const {
  // @@protoc_insertion_point(field_list:CSOTFPartyInvite.members)
  return members_;
}

// optional .CSOTFPartyInvite.Type type = 5 [default = PENDING_INVITE];
inline bool CSOTFPartyInvite::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CSOTFPartyInvite::has_type() const {
  return _internal_has_type();
}
inline void CSOTFPartyInvite::clear_type() {
  type_ = 1;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::CSOTFPartyInvite_Type CSOTFPartyInvite::_internal_type() const {
  return static_cast< ::CSOTFPartyInvite_Type >(type_);
}
inline ::CSOTFPartyInvite_Type CSOTFPartyInvite::type() const {
  // @@protoc_insertion_point(field_get:CSOTFPartyInvite.type)
  return _internal_type();
}
inline void CSOTFPartyInvite::_internal_set_type(::CSOTFPartyInvite_Type value) {
  assert(::CSOTFPartyInvite_Type_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  type_ = value;
}
inline void CSOTFPartyInvite::set_type(::CSOTFPartyInvite_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:CSOTFPartyInvite.type)
}

// -------------------------------------------------------------------

// CTFLobbyPlayerProto

// optional fixed64 id = 1 [(.key_field) = true];
inline bool CTFLobbyPlayerProto::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CTFLobbyPlayerProto::has_id() const {
  return _internal_has_id();
}
inline void CTFLobbyPlayerProto::clear_id() {
  id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CTFLobbyPlayerProto::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CTFLobbyPlayerProto::id() const {
  // @@protoc_insertion_point(field_get:CTFLobbyPlayerProto.id)
  return _internal_id();
}
inline void CTFLobbyPlayerProto::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
}
inline void CTFLobbyPlayerProto::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:CTFLobbyPlayerProto.id)
}

// optional .TF_GC_TEAM team = 3 [default = TF_GC_TEAM_DEFENDERS];
inline bool CTFLobbyPlayerProto::_internal_has_team() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CTFLobbyPlayerProto::has_team() const {
  return _internal_has_team();
}
inline void CTFLobbyPlayerProto::clear_team() {
  team_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::TF_GC_TEAM CTFLobbyPlayerProto::_internal_team() const {
  return static_cast< ::TF_GC_TEAM >(team_);
}
inline ::TF_GC_TEAM CTFLobbyPlayerProto::team() const {
  // @@protoc_insertion_point(field_get:CTFLobbyPlayerProto.team)
  return _internal_team();
}
inline void CTFLobbyPlayerProto::_internal_set_team(::TF_GC_TEAM value) {
  assert(::TF_GC_TEAM_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  team_ = value;
}
inline void CTFLobbyPlayerProto::set_team(::TF_GC_TEAM value) {
  _internal_set_team(value);
  // @@protoc_insertion_point(field_set:CTFLobbyPlayerProto.team)
}

// optional .CTFLobbyPlayerProto.ConnectState connect_state = 13 [default = INVALID];
inline bool CTFLobbyPlayerProto::_internal_has_connect_state() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CTFLobbyPlayerProto::has_connect_state() const {
  return _internal_has_connect_state();
}
inline void CTFLobbyPlayerProto::clear_connect_state() {
  connect_state_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::CTFLobbyPlayerProto_ConnectState CTFLobbyPlayerProto::_internal_connect_state() const {
  return static_cast< ::CTFLobbyPlayerProto_ConnectState >(connect_state_);
}
inline ::CTFLobbyPlayerProto_ConnectState CTFLobbyPlayerProto::connect_state() const {
  // @@protoc_insertion_point(field_get:CTFLobbyPlayerProto.connect_state)
  return _internal_connect_state();
}
inline void CTFLobbyPlayerProto::_internal_set_connect_state(::CTFLobbyPlayerProto_ConnectState value) {
  assert(::CTFLobbyPlayerProto_ConnectState_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  connect_state_ = value;
}
inline void CTFLobbyPlayerProto::set_connect_state(::CTFLobbyPlayerProto_ConnectState value) {
  _internal_set_connect_state(value);
  // @@protoc_insertion_point(field_set:CTFLobbyPlayerProto.connect_state)
}

// optional string name = 6;
inline bool CTFLobbyPlayerProto::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CTFLobbyPlayerProto::has_name() const {
  return _internal_has_name();
}
inline void CTFLobbyPlayerProto::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CTFLobbyPlayerProto::name() const {
  // @@protoc_insertion_point(field_get:CTFLobbyPlayerProto.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CTFLobbyPlayerProto::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CTFLobbyPlayerProto.name)
}
inline std::string* CTFLobbyPlayerProto::mutable_name() {
  // @@protoc_insertion_point(field_mutable:CTFLobbyPlayerProto.name)
  return _internal_mutable_name();
}
inline const std::string& CTFLobbyPlayerProto::_internal_name() const {
  return name_.Get();
}
inline void CTFLobbyPlayerProto::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CTFLobbyPlayerProto::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CTFLobbyPlayerProto::release_name() {
  // @@protoc_insertion_point(field_release:CTFLobbyPlayerProto.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CTFLobbyPlayerProto::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CTFLobbyPlayerProto.name)
}

// optional uint64 original_party_id = 12;
inline bool CTFLobbyPlayerProto::_internal_has_original_party_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CTFLobbyPlayerProto::has_original_party_id() const {
  return _internal_has_original_party_id();
}
inline void CTFLobbyPlayerProto::clear_original_party_id() {
  original_party_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CTFLobbyPlayerProto::_internal_original_party_id() const {
  return original_party_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CTFLobbyPlayerProto::original_party_id() const {
  // @@protoc_insertion_point(field_get:CTFLobbyPlayerProto.original_party_id)
  return _internal_original_party_id();
}
inline void CTFLobbyPlayerProto::_internal_set_original_party_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  original_party_id_ = value;
}
inline void CTFLobbyPlayerProto::set_original_party_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_original_party_id(value);
  // @@protoc_insertion_point(field_set:CTFLobbyPlayerProto.original_party_id)
}

// optional bool squad_surplus = 14;
inline bool CTFLobbyPlayerProto::_internal_has_squad_surplus() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CTFLobbyPlayerProto::has_squad_surplus() const {
  return _internal_has_squad_surplus();
}
inline void CTFLobbyPlayerProto::clear_squad_surplus() {
  squad_surplus_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool CTFLobbyPlayerProto::_internal_squad_surplus() const {
  return squad_surplus_;
}
inline bool CTFLobbyPlayerProto::squad_surplus() const {
  // @@protoc_insertion_point(field_get:CTFLobbyPlayerProto.squad_surplus)
  return _internal_squad_surplus();
}
inline void CTFLobbyPlayerProto::_internal_set_squad_surplus(bool value) {
  _has_bits_[0] |= 0x00000100u;
  squad_surplus_ = value;
}
inline void CTFLobbyPlayerProto::set_squad_surplus(bool value) {
  _internal_set_squad_surplus(value);
  // @@protoc_insertion_point(field_set:CTFLobbyPlayerProto.squad_surplus)
}

// optional uint32 badge_level = 15;
inline bool CTFLobbyPlayerProto::_internal_has_badge_level() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CTFLobbyPlayerProto::has_badge_level() const {
  return _internal_has_badge_level();
}
inline void CTFLobbyPlayerProto::clear_badge_level() {
  badge_level_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CTFLobbyPlayerProto::_internal_badge_level() const {
  return badge_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CTFLobbyPlayerProto::badge_level() const {
  // @@protoc_insertion_point(field_get:CTFLobbyPlayerProto.badge_level)
  return _internal_badge_level();
}
inline void CTFLobbyPlayerProto::_internal_set_badge_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  badge_level_ = value;
}
inline void CTFLobbyPlayerProto::set_badge_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_badge_level(value);
  // @@protoc_insertion_point(field_set:CTFLobbyPlayerProto.badge_level)
}

// optional uint32 last_connect_time = 17;
inline bool CTFLobbyPlayerProto::_internal_has_last_connect_time() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CTFLobbyPlayerProto::has_last_connect_time() const {
  return _internal_has_last_connect_time();
}
inline void CTFLobbyPlayerProto::clear_last_connect_time() {
  last_connect_time_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CTFLobbyPlayerProto::_internal_last_connect_time() const {
  return last_connect_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CTFLobbyPlayerProto::last_connect_time() const {
  // @@protoc_insertion_point(field_get:CTFLobbyPlayerProto.last_connect_time)
  return _internal_last_connect_time();
}
inline void CTFLobbyPlayerProto::_internal_set_last_connect_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  last_connect_time_ = value;
}
inline void CTFLobbyPlayerProto::set_last_connect_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_last_connect_time(value);
  // @@protoc_insertion_point(field_set:CTFLobbyPlayerProto.last_connect_time)
}

// optional .CTFLobbyPlayerProto.Type type = 19 [default = INVALID_PLAYER];
inline bool CTFLobbyPlayerProto::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CTFLobbyPlayerProto::has_type() const {
  return _internal_has_type();
}
inline void CTFLobbyPlayerProto::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::CTFLobbyPlayerProto_Type CTFLobbyPlayerProto::_internal_type() const {
  return static_cast< ::CTFLobbyPlayerProto_Type >(type_);
}
inline ::CTFLobbyPlayerProto_Type CTFLobbyPlayerProto::type() const {
  // @@protoc_insertion_point(field_get:CTFLobbyPlayerProto.type)
  return _internal_type();
}
inline void CTFLobbyPlayerProto::_internal_set_type(::CTFLobbyPlayerProto_Type value) {
  assert(::CTFLobbyPlayerProto_Type_IsValid(value));
  _has_bits_[0] |= 0x00000400u;
  type_ = value;
}
inline void CTFLobbyPlayerProto::set_type(::CTFLobbyPlayerProto_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:CTFLobbyPlayerProto.type)
}

// optional double normalized_rating = 20;
inline bool CTFLobbyPlayerProto::_internal_has_normalized_rating() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CTFLobbyPlayerProto::has_normalized_rating() const {
  return _internal_has_normalized_rating();
}
inline void CTFLobbyPlayerProto::clear_normalized_rating() {
  normalized_rating_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline double CTFLobbyPlayerProto::_internal_normalized_rating() const {
  return normalized_rating_;
}
inline double CTFLobbyPlayerProto::normalized_rating() const {
  // @@protoc_insertion_point(field_get:CTFLobbyPlayerProto.normalized_rating)
  return _internal_normalized_rating();
}
inline void CTFLobbyPlayerProto::_internal_set_normalized_rating(double value) {
  _has_bits_[0] |= 0x00000800u;
  normalized_rating_ = value;
}
inline void CTFLobbyPlayerProto::set_normalized_rating(double value) {
  _internal_set_normalized_rating(value);
  // @@protoc_insertion_point(field_set:CTFLobbyPlayerProto.normalized_rating)
}

// optional double normalized_uncertainty = 22;
inline bool CTFLobbyPlayerProto::_internal_has_normalized_uncertainty() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CTFLobbyPlayerProto::has_normalized_uncertainty() const {
  return _internal_has_normalized_uncertainty();
}
inline void CTFLobbyPlayerProto::clear_normalized_uncertainty() {
  normalized_uncertainty_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline double CTFLobbyPlayerProto::_internal_normalized_uncertainty() const {
  return normalized_uncertainty_;
}
inline double CTFLobbyPlayerProto::normalized_uncertainty() const {
  // @@protoc_insertion_point(field_get:CTFLobbyPlayerProto.normalized_uncertainty)
  return _internal_normalized_uncertainty();
}
inline void CTFLobbyPlayerProto::_internal_set_normalized_uncertainty(double value) {
  _has_bits_[0] |= 0x00001000u;
  normalized_uncertainty_ = value;
}
inline void CTFLobbyPlayerProto::set_normalized_uncertainty(double value) {
  _internal_set_normalized_uncertainty(value);
  // @@protoc_insertion_point(field_set:CTFLobbyPlayerProto.normalized_uncertainty)
}

// optional uint32 rank = 21;
inline bool CTFLobbyPlayerProto::_internal_has_rank() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CTFLobbyPlayerProto::has_rank() const {
  return _internal_has_rank();
}
inline void CTFLobbyPlayerProto::clear_rank() {
  rank_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CTFLobbyPlayerProto::_internal_rank() const {
  return rank_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CTFLobbyPlayerProto::rank() const {
  // @@protoc_insertion_point(field_get:CTFLobbyPlayerProto.rank)
  return _internal_rank();
}
inline void CTFLobbyPlayerProto::_internal_set_rank(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  rank_ = value;
}
inline void CTFLobbyPlayerProto::set_rank(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rank(value);
  // @@protoc_insertion_point(field_set:CTFLobbyPlayerProto.rank)
}

// optional bool chat_suspension = 23;
inline bool CTFLobbyPlayerProto::_internal_has_chat_suspension() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CTFLobbyPlayerProto::has_chat_suspension() const {
  return _internal_has_chat_suspension();
}
inline void CTFLobbyPlayerProto::clear_chat_suspension() {
  chat_suspension_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool CTFLobbyPlayerProto::_internal_chat_suspension() const {
  return chat_suspension_;
}
inline bool CTFLobbyPlayerProto::chat_suspension() const {
  // @@protoc_insertion_point(field_get:CTFLobbyPlayerProto.chat_suspension)
  return _internal_chat_suspension();
}
inline void CTFLobbyPlayerProto::_internal_set_chat_suspension(bool value) {
  _has_bits_[0] |= 0x00000200u;
  chat_suspension_ = value;
}
inline void CTFLobbyPlayerProto::set_chat_suspension(bool value) {
  _internal_set_chat_suspension(value);
  // @@protoc_insertion_point(field_set:CTFLobbyPlayerProto.chat_suspension)
}

// -------------------------------------------------------------------

// CTFLobbyInviteProto

// optional fixed64 lobby_id = 1 [(.key_field) = true];
inline bool CTFLobbyInviteProto::_internal_has_lobby_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CTFLobbyInviteProto::has_lobby_id() const {
  return _internal_has_lobby_id();
}
inline void CTFLobbyInviteProto::clear_lobby_id() {
  lobby_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CTFLobbyInviteProto::_internal_lobby_id() const {
  return lobby_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CTFLobbyInviteProto::lobby_id() const {
  // @@protoc_insertion_point(field_get:CTFLobbyInviteProto.lobby_id)
  return _internal_lobby_id();
}
inline void CTFLobbyInviteProto::_internal_set_lobby_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  lobby_id_ = value;
}
inline void CTFLobbyInviteProto::set_lobby_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_lobby_id(value);
  // @@protoc_insertion_point(field_set:CTFLobbyInviteProto.lobby_id)
}

// optional .ETFMatchGroup match_group = 2 [default = k_eTFMatchGroup_Invalid];
inline bool CTFLobbyInviteProto::_internal_has_match_group() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CTFLobbyInviteProto::has_match_group() const {
  return _internal_has_match_group();
}
inline void CTFLobbyInviteProto::clear_match_group() {
  match_group_ = -1;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::ETFMatchGroup CTFLobbyInviteProto::_internal_match_group() const {
  return static_cast< ::ETFMatchGroup >(match_group_);
}
inline ::ETFMatchGroup CTFLobbyInviteProto::match_group() const {
  // @@protoc_insertion_point(field_get:CTFLobbyInviteProto.match_group)
  return _internal_match_group();
}
inline void CTFLobbyInviteProto::_internal_set_match_group(::ETFMatchGroup value) {
  assert(::ETFMatchGroup_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  match_group_ = value;
}
inline void CTFLobbyInviteProto::set_match_group(::ETFMatchGroup value) {
  _internal_set_match_group(value);
  // @@protoc_insertion_point(field_set:CTFLobbyInviteProto.match_group)
}

// -------------------------------------------------------------------

// CSOTFGameServerLobby

// optional uint64 lobby_id = 1 [(.key_field) = true];
inline bool CSOTFGameServerLobby::_internal_has_lobby_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CSOTFGameServerLobby::has_lobby_id() const {
  return _internal_has_lobby_id();
}
inline void CSOTFGameServerLobby::clear_lobby_id() {
  lobby_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CSOTFGameServerLobby::_internal_lobby_id() const {
  return lobby_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CSOTFGameServerLobby::lobby_id() const {
  // @@protoc_insertion_point(field_get:CSOTFGameServerLobby.lobby_id)
  return _internal_lobby_id();
}
inline void CSOTFGameServerLobby::_internal_set_lobby_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  lobby_id_ = value;
}
inline void CSOTFGameServerLobby::set_lobby_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_lobby_id(value);
  // @@protoc_insertion_point(field_set:CSOTFGameServerLobby.lobby_id)
}

// repeated .CTFLobbyPlayerProto members = 2;
inline int CSOTFGameServerLobby::_internal_members_size() const {
  return members_.size();
}
inline int CSOTFGameServerLobby::members_size() const {
  return _internal_members_size();
}
inline void CSOTFGameServerLobby::clear_members() {
  members_.Clear();
}
inline ::CTFLobbyPlayerProto* CSOTFGameServerLobby::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:CSOTFGameServerLobby.members)
  return members_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CTFLobbyPlayerProto >*
CSOTFGameServerLobby::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:CSOTFGameServerLobby.members)
  return &members_;
}
inline const ::CTFLobbyPlayerProto& CSOTFGameServerLobby::_internal_members(int index) const {
  return members_.Get(index);
}
inline const ::CTFLobbyPlayerProto& CSOTFGameServerLobby::members(int index) const {
  // @@protoc_insertion_point(field_get:CSOTFGameServerLobby.members)
  return _internal_members(index);
}
inline ::CTFLobbyPlayerProto* CSOTFGameServerLobby::_internal_add_members() {
  return members_.Add();
}
inline ::CTFLobbyPlayerProto* CSOTFGameServerLobby::add_members() {
  // @@protoc_insertion_point(field_add:CSOTFGameServerLobby.members)
  return _internal_add_members();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CTFLobbyPlayerProto >&
CSOTFGameServerLobby::members() const {
  // @@protoc_insertion_point(field_list:CSOTFGameServerLobby.members)
  return members_;
}

// optional fixed64 server_id = 6 [default = 0];
inline bool CSOTFGameServerLobby::_internal_has_server_id() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CSOTFGameServerLobby::has_server_id() const {
  return _internal_has_server_id();
}
inline void CSOTFGameServerLobby::clear_server_id() {
  server_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CSOTFGameServerLobby::_internal_server_id() const {
  return server_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CSOTFGameServerLobby::server_id() const {
  // @@protoc_insertion_point(field_get:CSOTFGameServerLobby.server_id)
  return _internal_server_id();
}
inline void CSOTFGameServerLobby::_internal_set_server_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  server_id_ = value;
}
inline void CSOTFGameServerLobby::set_server_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_server_id(value);
  // @@protoc_insertion_point(field_set:CSOTFGameServerLobby.server_id)
}

// optional .CSOTFGameServerLobby.State state = 4 [default = UNKNOWN];
inline bool CSOTFGameServerLobby::_internal_has_state() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CSOTFGameServerLobby::has_state() const {
  return _internal_has_state();
}
inline void CSOTFGameServerLobby::clear_state() {
  state_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::CSOTFGameServerLobby_State CSOTFGameServerLobby::_internal_state() const {
  return static_cast< ::CSOTFGameServerLobby_State >(state_);
}
inline ::CSOTFGameServerLobby_State CSOTFGameServerLobby::state() const {
  // @@protoc_insertion_point(field_get:CSOTFGameServerLobby.state)
  return _internal_state();
}
inline void CSOTFGameServerLobby::_internal_set_state(::CSOTFGameServerLobby_State value) {
  assert(::CSOTFGameServerLobby_State_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  state_ = value;
}
inline void CSOTFGameServerLobby::set_state(::CSOTFGameServerLobby_State value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:CSOTFGameServerLobby.state)
}

// optional string connect = 5;
inline bool CSOTFGameServerLobby::_internal_has_connect() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSOTFGameServerLobby::has_connect() const {
  return _internal_has_connect();
}
inline void CSOTFGameServerLobby::clear_connect() {
  connect_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CSOTFGameServerLobby::connect() const {
  // @@protoc_insertion_point(field_get:CSOTFGameServerLobby.connect)
  return _internal_connect();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSOTFGameServerLobby::set_connect(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 connect_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CSOTFGameServerLobby.connect)
}
inline std::string* CSOTFGameServerLobby::mutable_connect() {
  // @@protoc_insertion_point(field_mutable:CSOTFGameServerLobby.connect)
  return _internal_mutable_connect();
}
inline const std::string& CSOTFGameServerLobby::_internal_connect() const {
  return connect_.Get();
}
inline void CSOTFGameServerLobby::_internal_set_connect(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  connect_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CSOTFGameServerLobby::_internal_mutable_connect() {
  _has_bits_[0] |= 0x00000001u;
  return connect_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CSOTFGameServerLobby::release_connect() {
  // @@protoc_insertion_point(field_release:CSOTFGameServerLobby.connect)
  if (!_internal_has_connect()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return connect_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CSOTFGameServerLobby::set_allocated_connect(std::string* connect) {
  if (connect != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  connect_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), connect,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CSOTFGameServerLobby.connect)
}

// optional .TF_GC_GameState game_state = 22 [default = TF_GC_GAMESTATE_STATE_INIT];
inline bool CSOTFGameServerLobby::_internal_has_game_state() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CSOTFGameServerLobby::has_game_state() const {
  return _internal_has_game_state();
}
inline void CSOTFGameServerLobby::clear_game_state() {
  game_state_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::TF_GC_GameState CSOTFGameServerLobby::_internal_game_state() const {
  return static_cast< ::TF_GC_GameState >(game_state_);
}
inline ::TF_GC_GameState CSOTFGameServerLobby::game_state() const {
  // @@protoc_insertion_point(field_get:CSOTFGameServerLobby.game_state)
  return _internal_game_state();
}
inline void CSOTFGameServerLobby::_internal_set_game_state(::TF_GC_GameState value) {
  assert(::TF_GC_GameState_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  game_state_ = value;
}
inline void CSOTFGameServerLobby::set_game_state(::TF_GC_GameState value) {
  _internal_set_game_state(value);
  // @@protoc_insertion_point(field_set:CSOTFGameServerLobby.game_state)
}

// optional double initial_average_mm_rating = 32;
inline bool CSOTFGameServerLobby::_internal_has_initial_average_mm_rating() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CSOTFGameServerLobby::has_initial_average_mm_rating() const {
  return _internal_has_initial_average_mm_rating();
}
inline void CSOTFGameServerLobby::clear_initial_average_mm_rating() {
  initial_average_mm_rating_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline double CSOTFGameServerLobby::_internal_initial_average_mm_rating() const {
  return initial_average_mm_rating_;
}
inline double CSOTFGameServerLobby::initial_average_mm_rating() const {
  // @@protoc_insertion_point(field_get:CSOTFGameServerLobby.initial_average_mm_rating)
  return _internal_initial_average_mm_rating();
}
inline void CSOTFGameServerLobby::_internal_set_initial_average_mm_rating(double value) {
  _has_bits_[0] |= 0x00000400u;
  initial_average_mm_rating_ = value;
}
inline void CSOTFGameServerLobby::set_initial_average_mm_rating(double value) {
  _internal_set_initial_average_mm_rating(value);
  // @@protoc_insertion_point(field_set:CSOTFGameServerLobby.initial_average_mm_rating)
}

// optional string mannup_tour_name = 42;
inline bool CSOTFGameServerLobby::_internal_has_mannup_tour_name() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CSOTFGameServerLobby::has_mannup_tour_name() const {
  return _internal_has_mannup_tour_name();
}
inline void CSOTFGameServerLobby::clear_mannup_tour_name() {
  mannup_tour_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CSOTFGameServerLobby::mannup_tour_name() const {
  // @@protoc_insertion_point(field_get:CSOTFGameServerLobby.mannup_tour_name)
  return _internal_mannup_tour_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSOTFGameServerLobby::set_mannup_tour_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 mannup_tour_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CSOTFGameServerLobby.mannup_tour_name)
}
inline std::string* CSOTFGameServerLobby::mutable_mannup_tour_name() {
  // @@protoc_insertion_point(field_mutable:CSOTFGameServerLobby.mannup_tour_name)
  return _internal_mutable_mannup_tour_name();
}
inline const std::string& CSOTFGameServerLobby::_internal_mannup_tour_name() const {
  return mannup_tour_name_.Get();
}
inline void CSOTFGameServerLobby::_internal_set_mannup_tour_name(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  mannup_tour_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CSOTFGameServerLobby::_internal_mutable_mannup_tour_name() {
  _has_bits_[0] |= 0x00000008u;
  return mannup_tour_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CSOTFGameServerLobby::release_mannup_tour_name() {
  // @@protoc_insertion_point(field_release:CSOTFGameServerLobby.mannup_tour_name)
  if (!_internal_has_mannup_tour_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return mannup_tour_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CSOTFGameServerLobby::set_allocated_mannup_tour_name(std::string* mannup_tour_name) {
  if (mannup_tour_name != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  mannup_tour_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mannup_tour_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CSOTFGameServerLobby.mannup_tour_name)
}

// optional string map_name = 38;
inline bool CSOTFGameServerLobby::_internal_has_map_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSOTFGameServerLobby::has_map_name() const {
  return _internal_has_map_name();
}
inline void CSOTFGameServerLobby::clear_map_name() {
  map_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CSOTFGameServerLobby::map_name() const {
  // @@protoc_insertion_point(field_get:CSOTFGameServerLobby.map_name)
  return _internal_map_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSOTFGameServerLobby::set_map_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 map_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CSOTFGameServerLobby.map_name)
}
inline std::string* CSOTFGameServerLobby::mutable_map_name() {
  // @@protoc_insertion_point(field_mutable:CSOTFGameServerLobby.map_name)
  return _internal_mutable_map_name();
}
inline const std::string& CSOTFGameServerLobby::_internal_map_name() const {
  return map_name_.Get();
}
inline void CSOTFGameServerLobby::_internal_set_map_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  map_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CSOTFGameServerLobby::_internal_mutable_map_name() {
  _has_bits_[0] |= 0x00000002u;
  return map_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CSOTFGameServerLobby::release_map_name() {
  // @@protoc_insertion_point(field_release:CSOTFGameServerLobby.map_name)
  if (!_internal_has_map_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return map_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CSOTFGameServerLobby::set_allocated_map_name(std::string* map_name) {
  if (map_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  map_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), map_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CSOTFGameServerLobby.map_name)
}

// optional string mission_name = 39;
inline bool CSOTFGameServerLobby::_internal_has_mission_name() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CSOTFGameServerLobby::has_mission_name() const {
  return _internal_has_mission_name();
}
inline void CSOTFGameServerLobby::clear_mission_name() {
  mission_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CSOTFGameServerLobby::mission_name() const {
  // @@protoc_insertion_point(field_get:CSOTFGameServerLobby.mission_name)
  return _internal_mission_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSOTFGameServerLobby::set_mission_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 mission_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CSOTFGameServerLobby.mission_name)
}
inline std::string* CSOTFGameServerLobby::mutable_mission_name() {
  // @@protoc_insertion_point(field_mutable:CSOTFGameServerLobby.mission_name)
  return _internal_mutable_mission_name();
}
inline const std::string& CSOTFGameServerLobby::_internal_mission_name() const {
  return mission_name_.Get();
}
inline void CSOTFGameServerLobby::_internal_set_mission_name(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  mission_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CSOTFGameServerLobby::_internal_mutable_mission_name() {
  _has_bits_[0] |= 0x00000004u;
  return mission_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CSOTFGameServerLobby::release_mission_name() {
  // @@protoc_insertion_point(field_release:CSOTFGameServerLobby.mission_name)
  if (!_internal_has_mission_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return mission_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CSOTFGameServerLobby::set_allocated_mission_name(std::string* mission_name) {
  if (mission_name != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  mission_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mission_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CSOTFGameServerLobby.mission_name)
}

// optional uint32 match_group = 41;
inline bool CSOTFGameServerLobby::_internal_has_match_group() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CSOTFGameServerLobby::has_match_group() const {
  return _internal_has_match_group();
}
inline void CSOTFGameServerLobby::clear_match_group() {
  match_group_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFGameServerLobby::_internal_match_group() const {
  return match_group_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFGameServerLobby::match_group() const {
  // @@protoc_insertion_point(field_get:CSOTFGameServerLobby.match_group)
  return _internal_match_group();
}
inline void CSOTFGameServerLobby::_internal_set_match_group(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  match_group_ = value;
}
inline void CSOTFGameServerLobby::set_match_group(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_match_group(value);
  // @@protoc_insertion_point(field_set:CSOTFGameServerLobby.match_group)
}

// optional uint64 match_id = 30 [default = 0];
inline bool CSOTFGameServerLobby::_internal_has_match_id() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CSOTFGameServerLobby::has_match_id() const {
  return _internal_has_match_id();
}
inline void CSOTFGameServerLobby::clear_match_id() {
  match_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CSOTFGameServerLobby::_internal_match_id() const {
  return match_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CSOTFGameServerLobby::match_id() const {
  // @@protoc_insertion_point(field_get:CSOTFGameServerLobby.match_id)
  return _internal_match_id();
}
inline void CSOTFGameServerLobby::_internal_set_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000200u;
  match_id_ = value;
}
inline void CSOTFGameServerLobby::set_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_match_id(value);
  // @@protoc_insertion_point(field_set:CSOTFGameServerLobby.match_id)
}

// optional uint32 formed_time = 36;
inline bool CSOTFGameServerLobby::_internal_has_formed_time() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CSOTFGameServerLobby::has_formed_time() const {
  return _internal_has_formed_time();
}
inline void CSOTFGameServerLobby::clear_formed_time() {
  formed_time_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFGameServerLobby::_internal_formed_time() const {
  return formed_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFGameServerLobby::formed_time() const {
  // @@protoc_insertion_point(field_get:CSOTFGameServerLobby.formed_time)
  return _internal_formed_time();
}
inline void CSOTFGameServerLobby::_internal_set_formed_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  formed_time_ = value;
}
inline void CSOTFGameServerLobby::set_formed_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_formed_time(value);
  // @@protoc_insertion_point(field_set:CSOTFGameServerLobby.formed_time)
}

// optional uint32 flags = 43;
inline bool CSOTFGameServerLobby::_internal_has_flags() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CSOTFGameServerLobby::has_flags() const {
  return _internal_has_flags();
}
inline void CSOTFGameServerLobby::clear_flags() {
  flags_ = 0u;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFGameServerLobby::_internal_flags() const {
  return flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFGameServerLobby::flags() const {
  // @@protoc_insertion_point(field_get:CSOTFGameServerLobby.flags)
  return _internal_flags();
}
inline void CSOTFGameServerLobby::_internal_set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00002000u;
  flags_ = value;
}
inline void CSOTFGameServerLobby::set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:CSOTFGameServerLobby.flags)
}

// optional bool late_join_eligible = 44;
inline bool CSOTFGameServerLobby::_internal_has_late_join_eligible() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CSOTFGameServerLobby::has_late_join_eligible() const {
  return _internal_has_late_join_eligible();
}
inline void CSOTFGameServerLobby::clear_late_join_eligible() {
  late_join_eligible_ = false;
  _has_bits_[0] &= ~0x00004000u;
}
inline bool CSOTFGameServerLobby::_internal_late_join_eligible() const {
  return late_join_eligible_;
}
inline bool CSOTFGameServerLobby::late_join_eligible() const {
  // @@protoc_insertion_point(field_get:CSOTFGameServerLobby.late_join_eligible)
  return _internal_late_join_eligible();
}
inline void CSOTFGameServerLobby::_internal_set_late_join_eligible(bool value) {
  _has_bits_[0] |= 0x00004000u;
  late_join_eligible_ = value;
}
inline void CSOTFGameServerLobby::set_late_join_eligible(bool value) {
  _internal_set_late_join_eligible(value);
  // @@protoc_insertion_point(field_set:CSOTFGameServerLobby.late_join_eligible)
}

// optional uint32 fixed_match_size = 45;
inline bool CSOTFGameServerLobby::_internal_has_fixed_match_size() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CSOTFGameServerLobby::has_fixed_match_size() const {
  return _internal_has_fixed_match_size();
}
inline void CSOTFGameServerLobby::clear_fixed_match_size() {
  fixed_match_size_ = 0u;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFGameServerLobby::_internal_fixed_match_size() const {
  return fixed_match_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFGameServerLobby::fixed_match_size() const {
  // @@protoc_insertion_point(field_get:CSOTFGameServerLobby.fixed_match_size)
  return _internal_fixed_match_size();
}
inline void CSOTFGameServerLobby::_internal_set_fixed_match_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00008000u;
  fixed_match_size_ = value;
}
inline void CSOTFGameServerLobby::set_fixed_match_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fixed_match_size(value);
  // @@protoc_insertion_point(field_set:CSOTFGameServerLobby.fixed_match_size)
}

// optional .CSOTFGameServerLobby.WarMatch is_war_match = 46 [default = NOPE];
inline bool CSOTFGameServerLobby::_internal_has_is_war_match() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool CSOTFGameServerLobby::has_is_war_match() const {
  return _internal_has_is_war_match();
}
inline void CSOTFGameServerLobby::clear_is_war_match() {
  is_war_match_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::CSOTFGameServerLobby_WarMatch CSOTFGameServerLobby::_internal_is_war_match() const {
  return static_cast< ::CSOTFGameServerLobby_WarMatch >(is_war_match_);
}
inline ::CSOTFGameServerLobby_WarMatch CSOTFGameServerLobby::is_war_match() const {
  // @@protoc_insertion_point(field_get:CSOTFGameServerLobby.is_war_match)
  return _internal_is_war_match();
}
inline void CSOTFGameServerLobby::_internal_set_is_war_match(::CSOTFGameServerLobby_WarMatch value) {
  assert(::CSOTFGameServerLobby_WarMatch_IsValid(value));
  _has_bits_[0] |= 0x00010000u;
  is_war_match_ = value;
}
inline void CSOTFGameServerLobby::set_is_war_match(::CSOTFGameServerLobby_WarMatch value) {
  _internal_set_is_war_match(value);
  // @@protoc_insertion_point(field_set:CSOTFGameServerLobby.is_war_match)
}

// repeated uint32 next_maps_for_vote = 47;
inline int CSOTFGameServerLobby::_internal_next_maps_for_vote_size() const {
  return next_maps_for_vote_.size();
}
inline int CSOTFGameServerLobby::next_maps_for_vote_size() const {
  return _internal_next_maps_for_vote_size();
}
inline void CSOTFGameServerLobby::clear_next_maps_for_vote() {
  next_maps_for_vote_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFGameServerLobby::_internal_next_maps_for_vote(int index) const {
  return next_maps_for_vote_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFGameServerLobby::next_maps_for_vote(int index) const {
  // @@protoc_insertion_point(field_get:CSOTFGameServerLobby.next_maps_for_vote)
  return _internal_next_maps_for_vote(index);
}
inline void CSOTFGameServerLobby::set_next_maps_for_vote(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  next_maps_for_vote_.Set(index, value);
  // @@protoc_insertion_point(field_set:CSOTFGameServerLobby.next_maps_for_vote)
}
inline void CSOTFGameServerLobby::_internal_add_next_maps_for_vote(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  next_maps_for_vote_.Add(value);
}
inline void CSOTFGameServerLobby::add_next_maps_for_vote(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_next_maps_for_vote(value);
  // @@protoc_insertion_point(field_add:CSOTFGameServerLobby.next_maps_for_vote)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CSOTFGameServerLobby::_internal_next_maps_for_vote() const {
  return next_maps_for_vote_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CSOTFGameServerLobby::next_maps_for_vote() const {
  // @@protoc_insertion_point(field_list:CSOTFGameServerLobby.next_maps_for_vote)
  return _internal_next_maps_for_vote();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CSOTFGameServerLobby::_internal_mutable_next_maps_for_vote() {
  return &next_maps_for_vote_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CSOTFGameServerLobby::mutable_next_maps_for_vote() {
  // @@protoc_insertion_point(field_mutable_list:CSOTFGameServerLobby.next_maps_for_vote)
  return _internal_mutable_next_maps_for_vote();
}

// optional uint32 lobby_mm_version = 48;
inline bool CSOTFGameServerLobby::_internal_has_lobby_mm_version() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CSOTFGameServerLobby::has_lobby_mm_version() const {
  return _internal_has_lobby_mm_version();
}
inline void CSOTFGameServerLobby::clear_lobby_mm_version() {
  lobby_mm_version_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFGameServerLobby::_internal_lobby_mm_version() const {
  return lobby_mm_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFGameServerLobby::lobby_mm_version() const {
  // @@protoc_insertion_point(field_get:CSOTFGameServerLobby.lobby_mm_version)
  return _internal_lobby_mm_version();
}
inline void CSOTFGameServerLobby::_internal_set_lobby_mm_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  lobby_mm_version_ = value;
}
inline void CSOTFGameServerLobby::set_lobby_mm_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_lobby_mm_version(value);
  // @@protoc_insertion_point(field_set:CSOTFGameServerLobby.lobby_mm_version)
}

// repeated .CTFLobbyPlayerProto pending_members = 49;
inline int CSOTFGameServerLobby::_internal_pending_members_size() const {
  return pending_members_.size();
}
inline int CSOTFGameServerLobby::pending_members_size() const {
  return _internal_pending_members_size();
}
inline void CSOTFGameServerLobby::clear_pending_members() {
  pending_members_.Clear();
}
inline ::CTFLobbyPlayerProto* CSOTFGameServerLobby::mutable_pending_members(int index) {
  // @@protoc_insertion_point(field_mutable:CSOTFGameServerLobby.pending_members)
  return pending_members_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CTFLobbyPlayerProto >*
CSOTFGameServerLobby::mutable_pending_members() {
  // @@protoc_insertion_point(field_mutable_list:CSOTFGameServerLobby.pending_members)
  return &pending_members_;
}
inline const ::CTFLobbyPlayerProto& CSOTFGameServerLobby::_internal_pending_members(int index) const {
  return pending_members_.Get(index);
}
inline const ::CTFLobbyPlayerProto& CSOTFGameServerLobby::pending_members(int index) const {
  // @@protoc_insertion_point(field_get:CSOTFGameServerLobby.pending_members)
  return _internal_pending_members(index);
}
inline ::CTFLobbyPlayerProto* CSOTFGameServerLobby::_internal_add_pending_members() {
  return pending_members_.Add();
}
inline ::CTFLobbyPlayerProto* CSOTFGameServerLobby::add_pending_members() {
  // @@protoc_insertion_point(field_add:CSOTFGameServerLobby.pending_members)
  return _internal_add_pending_members();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CTFLobbyPlayerProto >&
CSOTFGameServerLobby::pending_members() const {
  // @@protoc_insertion_point(field_list:CSOTFGameServerLobby.pending_members)
  return pending_members_;
}

// -------------------------------------------------------------------

// CMsgExitMatchmaking

// optional bool explicit_abandon = 1;
inline bool CMsgExitMatchmaking::_internal_has_explicit_abandon() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgExitMatchmaking::has_explicit_abandon() const {
  return _internal_has_explicit_abandon();
}
inline void CMsgExitMatchmaking::clear_explicit_abandon() {
  explicit_abandon_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CMsgExitMatchmaking::_internal_explicit_abandon() const {
  return explicit_abandon_;
}
inline bool CMsgExitMatchmaking::explicit_abandon() const {
  // @@protoc_insertion_point(field_get:CMsgExitMatchmaking.explicit_abandon)
  return _internal_explicit_abandon();
}
inline void CMsgExitMatchmaking::_internal_set_explicit_abandon(bool value) {
  _has_bits_[0] |= 0x00000004u;
  explicit_abandon_ = value;
}
inline void CMsgExitMatchmaking::set_explicit_abandon(bool value) {
  _internal_set_explicit_abandon(value);
  // @@protoc_insertion_point(field_set:CMsgExitMatchmaking.explicit_abandon)
}

// optional uint64 party_id = 2;
inline bool CMsgExitMatchmaking::_internal_has_party_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgExitMatchmaking::has_party_id() const {
  return _internal_has_party_id();
}
inline void CMsgExitMatchmaking::clear_party_id() {
  party_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgExitMatchmaking::_internal_party_id() const {
  return party_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgExitMatchmaking::party_id() const {
  // @@protoc_insertion_point(field_get:CMsgExitMatchmaking.party_id)
  return _internal_party_id();
}
inline void CMsgExitMatchmaking::_internal_set_party_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  party_id_ = value;
}
inline void CMsgExitMatchmaking::set_party_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_party_id(value);
  // @@protoc_insertion_point(field_set:CMsgExitMatchmaking.party_id)
}

// optional uint64 lobby_id = 3;
inline bool CMsgExitMatchmaking::_internal_has_lobby_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgExitMatchmaking::has_lobby_id() const {
  return _internal_has_lobby_id();
}
inline void CMsgExitMatchmaking::clear_lobby_id() {
  lobby_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgExitMatchmaking::_internal_lobby_id() const {
  return lobby_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgExitMatchmaking::lobby_id() const {
  // @@protoc_insertion_point(field_get:CMsgExitMatchmaking.lobby_id)
  return _internal_lobby_id();
}
inline void CMsgExitMatchmaking::_internal_set_lobby_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  lobby_id_ = value;
}
inline void CMsgExitMatchmaking::set_lobby_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_lobby_id(value);
  // @@protoc_insertion_point(field_set:CMsgExitMatchmaking.lobby_id)
}

// -------------------------------------------------------------------

// CMsgAcceptLobbyInvite

// optional uint64 invited_lobby_id = 1;
inline bool CMsgAcceptLobbyInvite::_internal_has_invited_lobby_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgAcceptLobbyInvite::has_invited_lobby_id() const {
  return _internal_has_invited_lobby_id();
}
inline void CMsgAcceptLobbyInvite::clear_invited_lobby_id() {
  invited_lobby_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgAcceptLobbyInvite::_internal_invited_lobby_id() const {
  return invited_lobby_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgAcceptLobbyInvite::invited_lobby_id() const {
  // @@protoc_insertion_point(field_get:CMsgAcceptLobbyInvite.invited_lobby_id)
  return _internal_invited_lobby_id();
}
inline void CMsgAcceptLobbyInvite::_internal_set_invited_lobby_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  invited_lobby_id_ = value;
}
inline void CMsgAcceptLobbyInvite::set_invited_lobby_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_invited_lobby_id(value);
  // @@protoc_insertion_point(field_set:CMsgAcceptLobbyInvite.invited_lobby_id)
}

// optional uint64 abandoning_match_id = 2;
inline bool CMsgAcceptLobbyInvite::_internal_has_abandoning_match_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgAcceptLobbyInvite::has_abandoning_match_id() const {
  return _internal_has_abandoning_match_id();
}
inline void CMsgAcceptLobbyInvite::clear_abandoning_match_id() {
  abandoning_match_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgAcceptLobbyInvite::_internal_abandoning_match_id() const {
  return abandoning_match_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgAcceptLobbyInvite::abandoning_match_id() const {
  // @@protoc_insertion_point(field_get:CMsgAcceptLobbyInvite.abandoning_match_id)
  return _internal_abandoning_match_id();
}
inline void CMsgAcceptLobbyInvite::_internal_set_abandoning_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  abandoning_match_id_ = value;
}
inline void CMsgAcceptLobbyInvite::set_abandoning_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_abandoning_match_id(value);
  // @@protoc_insertion_point(field_set:CMsgAcceptLobbyInvite.abandoning_match_id)
}

// repeated uint64 abandoning_invite_lobby_ids = 3;
inline int CMsgAcceptLobbyInvite::_internal_abandoning_invite_lobby_ids_size() const {
  return abandoning_invite_lobby_ids_.size();
}
inline int CMsgAcceptLobbyInvite::abandoning_invite_lobby_ids_size() const {
  return _internal_abandoning_invite_lobby_ids_size();
}
inline void CMsgAcceptLobbyInvite::clear_abandoning_invite_lobby_ids() {
  abandoning_invite_lobby_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgAcceptLobbyInvite::_internal_abandoning_invite_lobby_ids(int index) const {
  return abandoning_invite_lobby_ids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgAcceptLobbyInvite::abandoning_invite_lobby_ids(int index) const {
  // @@protoc_insertion_point(field_get:CMsgAcceptLobbyInvite.abandoning_invite_lobby_ids)
  return _internal_abandoning_invite_lobby_ids(index);
}
inline void CMsgAcceptLobbyInvite::set_abandoning_invite_lobby_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  abandoning_invite_lobby_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgAcceptLobbyInvite.abandoning_invite_lobby_ids)
}
inline void CMsgAcceptLobbyInvite::_internal_add_abandoning_invite_lobby_ids(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  abandoning_invite_lobby_ids_.Add(value);
}
inline void CMsgAcceptLobbyInvite::add_abandoning_invite_lobby_ids(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_abandoning_invite_lobby_ids(value);
  // @@protoc_insertion_point(field_add:CMsgAcceptLobbyInvite.abandoning_invite_lobby_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
CMsgAcceptLobbyInvite::_internal_abandoning_invite_lobby_ids() const {
  return abandoning_invite_lobby_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
CMsgAcceptLobbyInvite::abandoning_invite_lobby_ids() const {
  // @@protoc_insertion_point(field_list:CMsgAcceptLobbyInvite.abandoning_invite_lobby_ids)
  return _internal_abandoning_invite_lobby_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
CMsgAcceptLobbyInvite::_internal_mutable_abandoning_invite_lobby_ids() {
  return &abandoning_invite_lobby_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
CMsgAcceptLobbyInvite::mutable_abandoning_invite_lobby_ids() {
  // @@protoc_insertion_point(field_mutable_list:CMsgAcceptLobbyInvite.abandoning_invite_lobby_ids)
  return _internal_mutable_abandoning_invite_lobby_ids();
}

// -------------------------------------------------------------------

// CMsgAcceptLobbyInviteReply

// -------------------------------------------------------------------

// CMsgMatchmakingSearchCountRequest

// -------------------------------------------------------------------

// CMsgMatchmakingSearchCountResponse

// repeated uint32 searching_players_by_group = 1;
inline int CMsgMatchmakingSearchCountResponse::_internal_searching_players_by_group_size() const {
  return searching_players_by_group_.size();
}
inline int CMsgMatchmakingSearchCountResponse::searching_players_by_group_size() const {
  return _internal_searching_players_by_group_size();
}
inline void CMsgMatchmakingSearchCountResponse::clear_searching_players_by_group() {
  searching_players_by_group_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgMatchmakingSearchCountResponse::_internal_searching_players_by_group(int index) const {
  return searching_players_by_group_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgMatchmakingSearchCountResponse::searching_players_by_group(int index) const {
  // @@protoc_insertion_point(field_get:CMsgMatchmakingSearchCountResponse.searching_players_by_group)
  return _internal_searching_players_by_group(index);
}
inline void CMsgMatchmakingSearchCountResponse::set_searching_players_by_group(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  searching_players_by_group_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgMatchmakingSearchCountResponse.searching_players_by_group)
}
inline void CMsgMatchmakingSearchCountResponse::_internal_add_searching_players_by_group(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  searching_players_by_group_.Add(value);
}
inline void CMsgMatchmakingSearchCountResponse::add_searching_players_by_group(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_searching_players_by_group(value);
  // @@protoc_insertion_point(field_add:CMsgMatchmakingSearchCountResponse.searching_players_by_group)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CMsgMatchmakingSearchCountResponse::_internal_searching_players_by_group() const {
  return searching_players_by_group_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CMsgMatchmakingSearchCountResponse::searching_players_by_group() const {
  // @@protoc_insertion_point(field_list:CMsgMatchmakingSearchCountResponse.searching_players_by_group)
  return _internal_searching_players_by_group();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CMsgMatchmakingSearchCountResponse::_internal_mutable_searching_players_by_group() {
  return &searching_players_by_group_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CMsgMatchmakingSearchCountResponse::mutable_searching_players_by_group() {
  // @@protoc_insertion_point(field_mutable_list:CMsgMatchmakingSearchCountResponse.searching_players_by_group)
  return _internal_mutable_searching_players_by_group();
}

// -------------------------------------------------------------------

// CMsgKickedFromMatchmakingQueue

// -------------------------------------------------------------------

// CMsgGameServerMatchmakingStatus_Player

// optional fixed64 steam_id = 1;
inline bool CMsgGameServerMatchmakingStatus_Player::_internal_has_steam_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGameServerMatchmakingStatus_Player::has_steam_id() const {
  return _internal_has_steam_id();
}
inline void CMsgGameServerMatchmakingStatus_Player::clear_steam_id() {
  steam_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGameServerMatchmakingStatus_Player::_internal_steam_id() const {
  return steam_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGameServerMatchmakingStatus_Player::steam_id() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerMatchmakingStatus.Player.steam_id)
  return _internal_steam_id();
}
inline void CMsgGameServerMatchmakingStatus_Player::_internal_set_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  steam_id_ = value;
}
inline void CMsgGameServerMatchmakingStatus_Player::set_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_steam_id(value);
  // @@protoc_insertion_point(field_set:CMsgGameServerMatchmakingStatus.Player.steam_id)
}

// optional .CMsgGameServerMatchmakingStatus.PlayerConnectState connect_state = 2 [default = INVALID];
inline bool CMsgGameServerMatchmakingStatus_Player::_internal_has_connect_state() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGameServerMatchmakingStatus_Player::has_connect_state() const {
  return _internal_has_connect_state();
}
inline void CMsgGameServerMatchmakingStatus_Player::clear_connect_state() {
  connect_state_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::CMsgGameServerMatchmakingStatus_PlayerConnectState CMsgGameServerMatchmakingStatus_Player::_internal_connect_state() const {
  return static_cast< ::CMsgGameServerMatchmakingStatus_PlayerConnectState >(connect_state_);
}
inline ::CMsgGameServerMatchmakingStatus_PlayerConnectState CMsgGameServerMatchmakingStatus_Player::connect_state() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerMatchmakingStatus.Player.connect_state)
  return _internal_connect_state();
}
inline void CMsgGameServerMatchmakingStatus_Player::_internal_set_connect_state(::CMsgGameServerMatchmakingStatus_PlayerConnectState value) {
  assert(::CMsgGameServerMatchmakingStatus_PlayerConnectState_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  connect_state_ = value;
}
inline void CMsgGameServerMatchmakingStatus_Player::set_connect_state(::CMsgGameServerMatchmakingStatus_PlayerConnectState value) {
  _internal_set_connect_state(value);
  // @@protoc_insertion_point(field_set:CMsgGameServerMatchmakingStatus.Player.connect_state)
}

// -------------------------------------------------------------------

// CMsgGameServerMatchmakingStatus

// optional uint32 server_version = 16 [default = 1225];
inline bool CMsgGameServerMatchmakingStatus::_internal_has_server_version() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool CMsgGameServerMatchmakingStatus::has_server_version() const {
  return _internal_has_server_version();
}
inline void CMsgGameServerMatchmakingStatus::clear_server_version() {
  server_version_ = 1225u;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGameServerMatchmakingStatus::_internal_server_version() const {
  return server_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGameServerMatchmakingStatus::server_version() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerMatchmakingStatus.server_version)
  return _internal_server_version();
}
inline void CMsgGameServerMatchmakingStatus::_internal_set_server_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00040000u;
  server_version_ = value;
}
inline void CMsgGameServerMatchmakingStatus::set_server_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_server_version(value);
  // @@protoc_insertion_point(field_set:CMsgGameServerMatchmakingStatus.server_version)
}

// optional .ServerMatchmakingState matchmaking_state = 1 [default = ServerMatchmakingState_INVALID];
inline bool CMsgGameServerMatchmakingStatus::_internal_has_matchmaking_state() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGameServerMatchmakingStatus::has_matchmaking_state() const {
  return _internal_has_matchmaking_state();
}
inline void CMsgGameServerMatchmakingStatus::clear_matchmaking_state() {
  matchmaking_state_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::ServerMatchmakingState CMsgGameServerMatchmakingStatus::_internal_matchmaking_state() const {
  return static_cast< ::ServerMatchmakingState >(matchmaking_state_);
}
inline ::ServerMatchmakingState CMsgGameServerMatchmakingStatus::matchmaking_state() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerMatchmakingStatus.matchmaking_state)
  return _internal_matchmaking_state();
}
inline void CMsgGameServerMatchmakingStatus::_internal_set_matchmaking_state(::ServerMatchmakingState value) {
  assert(::ServerMatchmakingState_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  matchmaking_state_ = value;
}
inline void CMsgGameServerMatchmakingStatus::set_matchmaking_state(::ServerMatchmakingState value) {
  _internal_set_matchmaking_state(value);
  // @@protoc_insertion_point(field_set:CMsgGameServerMatchmakingStatus.matchmaking_state)
}

// optional string map = 3;
inline bool CMsgGameServerMatchmakingStatus::_internal_has_map() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGameServerMatchmakingStatus::has_map() const {
  return _internal_has_map();
}
inline void CMsgGameServerMatchmakingStatus::clear_map() {
  map_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgGameServerMatchmakingStatus::map() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerMatchmakingStatus.map)
  return _internal_map();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgGameServerMatchmakingStatus::set_map(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 map_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgGameServerMatchmakingStatus.map)
}
inline std::string* CMsgGameServerMatchmakingStatus::mutable_map() {
  // @@protoc_insertion_point(field_mutable:CMsgGameServerMatchmakingStatus.map)
  return _internal_mutable_map();
}
inline const std::string& CMsgGameServerMatchmakingStatus::_internal_map() const {
  return map_.Get();
}
inline void CMsgGameServerMatchmakingStatus::_internal_set_map(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  map_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgGameServerMatchmakingStatus::_internal_mutable_map() {
  _has_bits_[0] |= 0x00000001u;
  return map_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgGameServerMatchmakingStatus::release_map() {
  // @@protoc_insertion_point(field_release:CMsgGameServerMatchmakingStatus.map)
  if (!_internal_has_map()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return map_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CMsgGameServerMatchmakingStatus::set_allocated_map(std::string* map) {
  if (map != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  map_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), map,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CMsgGameServerMatchmakingStatus.map)
}

// optional string tags = 4;
inline bool CMsgGameServerMatchmakingStatus::_internal_has_tags() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGameServerMatchmakingStatus::has_tags() const {
  return _internal_has_tags();
}
inline void CMsgGameServerMatchmakingStatus::clear_tags() {
  tags_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgGameServerMatchmakingStatus::tags() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerMatchmakingStatus.tags)
  return _internal_tags();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgGameServerMatchmakingStatus::set_tags(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 tags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgGameServerMatchmakingStatus.tags)
}
inline std::string* CMsgGameServerMatchmakingStatus::mutable_tags() {
  // @@protoc_insertion_point(field_mutable:CMsgGameServerMatchmakingStatus.tags)
  return _internal_mutable_tags();
}
inline const std::string& CMsgGameServerMatchmakingStatus::_internal_tags() const {
  return tags_.Get();
}
inline void CMsgGameServerMatchmakingStatus::_internal_set_tags(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  tags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgGameServerMatchmakingStatus::_internal_mutable_tags() {
  _has_bits_[0] |= 0x00000002u;
  return tags_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgGameServerMatchmakingStatus::release_tags() {
  // @@protoc_insertion_point(field_release:CMsgGameServerMatchmakingStatus.tags)
  if (!_internal_has_tags()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return tags_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CMsgGameServerMatchmakingStatus::set_allocated_tags(std::string* tags) {
  if (tags != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  tags_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tags,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CMsgGameServerMatchmakingStatus.tags)
}

// optional uint32 bot_count = 5;
inline bool CMsgGameServerMatchmakingStatus::_internal_has_bot_count() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgGameServerMatchmakingStatus::has_bot_count() const {
  return _internal_has_bot_count();
}
inline void CMsgGameServerMatchmakingStatus::clear_bot_count() {
  bot_count_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGameServerMatchmakingStatus::_internal_bot_count() const {
  return bot_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGameServerMatchmakingStatus::bot_count() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerMatchmakingStatus.bot_count)
  return _internal_bot_count();
}
inline void CMsgGameServerMatchmakingStatus::_internal_set_bot_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  bot_count_ = value;
}
inline void CMsgGameServerMatchmakingStatus::set_bot_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_bot_count(value);
  // @@protoc_insertion_point(field_set:CMsgGameServerMatchmakingStatus.bot_count)
}

// optional uint32 num_spectators = 6;
inline bool CMsgGameServerMatchmakingStatus::_internal_has_num_spectators() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgGameServerMatchmakingStatus::has_num_spectators() const {
  return _internal_has_num_spectators();
}
inline void CMsgGameServerMatchmakingStatus::clear_num_spectators() {
  num_spectators_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGameServerMatchmakingStatus::_internal_num_spectators() const {
  return num_spectators_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGameServerMatchmakingStatus::num_spectators() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerMatchmakingStatus.num_spectators)
  return _internal_num_spectators();
}
inline void CMsgGameServerMatchmakingStatus::_internal_set_num_spectators(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  num_spectators_ = value;
}
inline void CMsgGameServerMatchmakingStatus::set_num_spectators(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_spectators(value);
  // @@protoc_insertion_point(field_set:CMsgGameServerMatchmakingStatus.num_spectators)
}

// optional uint32 max_players = 7;
inline bool CMsgGameServerMatchmakingStatus::_internal_has_max_players() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgGameServerMatchmakingStatus::has_max_players() const {
  return _internal_has_max_players();
}
inline void CMsgGameServerMatchmakingStatus::clear_max_players() {
  max_players_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGameServerMatchmakingStatus::_internal_max_players() const {
  return max_players_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGameServerMatchmakingStatus::max_players() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerMatchmakingStatus.max_players)
  return _internal_max_players();
}
inline void CMsgGameServerMatchmakingStatus::_internal_set_max_players(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  max_players_ = value;
}
inline void CMsgGameServerMatchmakingStatus::set_max_players(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_players(value);
  // @@protoc_insertion_point(field_set:CMsgGameServerMatchmakingStatus.max_players)
}

// optional uint32 slots_free = 8;
inline bool CMsgGameServerMatchmakingStatus::_internal_has_slots_free() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgGameServerMatchmakingStatus::has_slots_free() const {
  return _internal_has_slots_free();
}
inline void CMsgGameServerMatchmakingStatus::clear_slots_free() {
  slots_free_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGameServerMatchmakingStatus::_internal_slots_free() const {
  return slots_free_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGameServerMatchmakingStatus::slots_free() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerMatchmakingStatus.slots_free)
  return _internal_slots_free();
}
inline void CMsgGameServerMatchmakingStatus::_internal_set_slots_free(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  slots_free_ = value;
}
inline void CMsgGameServerMatchmakingStatus::set_slots_free(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_slots_free(value);
  // @@protoc_insertion_point(field_set:CMsgGameServerMatchmakingStatus.slots_free)
}

// optional uint32 server_region = 9;
inline bool CMsgGameServerMatchmakingStatus::_internal_has_server_region() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgGameServerMatchmakingStatus::has_server_region() const {
  return _internal_has_server_region();
}
inline void CMsgGameServerMatchmakingStatus::clear_server_region() {
  server_region_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGameServerMatchmakingStatus::_internal_server_region() const {
  return server_region_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGameServerMatchmakingStatus::server_region() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerMatchmakingStatus.server_region)
  return _internal_server_region();
}
inline void CMsgGameServerMatchmakingStatus::_internal_set_server_region(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  server_region_ = value;
}
inline void CMsgGameServerMatchmakingStatus::set_server_region(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_server_region(value);
  // @@protoc_insertion_point(field_set:CMsgGameServerMatchmakingStatus.server_region)
}

// optional float server_loadavg = 10;
inline bool CMsgGameServerMatchmakingStatus::_internal_has_server_loadavg() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgGameServerMatchmakingStatus::has_server_loadavg() const {
  return _internal_has_server_loadavg();
}
inline void CMsgGameServerMatchmakingStatus::clear_server_loadavg() {
  server_loadavg_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline float CMsgGameServerMatchmakingStatus::_internal_server_loadavg() const {
  return server_loadavg_;
}
inline float CMsgGameServerMatchmakingStatus::server_loadavg() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerMatchmakingStatus.server_loadavg)
  return _internal_server_loadavg();
}
inline void CMsgGameServerMatchmakingStatus::_internal_set_server_loadavg(float value) {
  _has_bits_[0] |= 0x00000100u;
  server_loadavg_ = value;
}
inline void CMsgGameServerMatchmakingStatus::set_server_loadavg(float value) {
  _internal_set_server_loadavg(value);
  // @@protoc_insertion_point(field_set:CMsgGameServerMatchmakingStatus.server_loadavg)
}

// optional bool server_trusted = 11;
inline bool CMsgGameServerMatchmakingStatus::_internal_has_server_trusted() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgGameServerMatchmakingStatus::has_server_trusted() const {
  return _internal_has_server_trusted();
}
inline void CMsgGameServerMatchmakingStatus::clear_server_trusted() {
  server_trusted_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool CMsgGameServerMatchmakingStatus::_internal_server_trusted() const {
  return server_trusted_;
}
inline bool CMsgGameServerMatchmakingStatus::server_trusted() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerMatchmakingStatus.server_trusted)
  return _internal_server_trusted();
}
inline void CMsgGameServerMatchmakingStatus::_internal_set_server_trusted(bool value) {
  _has_bits_[0] |= 0x00000200u;
  server_trusted_ = value;
}
inline void CMsgGameServerMatchmakingStatus::set_server_trusted(bool value) {
  _internal_set_server_trusted(value);
  // @@protoc_insertion_point(field_set:CMsgGameServerMatchmakingStatus.server_trusted)
}

// optional bool server_dedicated = 12;
inline bool CMsgGameServerMatchmakingStatus::_internal_has_server_dedicated() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgGameServerMatchmakingStatus::has_server_dedicated() const {
  return _internal_has_server_dedicated();
}
inline void CMsgGameServerMatchmakingStatus::clear_server_dedicated() {
  server_dedicated_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool CMsgGameServerMatchmakingStatus::_internal_server_dedicated() const {
  return server_dedicated_;
}
inline bool CMsgGameServerMatchmakingStatus::server_dedicated() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerMatchmakingStatus.server_dedicated)
  return _internal_server_dedicated();
}
inline void CMsgGameServerMatchmakingStatus::_internal_set_server_dedicated(bool value) {
  _has_bits_[0] |= 0x00000400u;
  server_dedicated_ = value;
}
inline void CMsgGameServerMatchmakingStatus::set_server_dedicated(bool value) {
  _internal_set_server_dedicated(value);
  // @@protoc_insertion_point(field_set:CMsgGameServerMatchmakingStatus.server_dedicated)
}

// optional uint32 strict = 17;
inline bool CMsgGameServerMatchmakingStatus::_internal_has_strict() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CMsgGameServerMatchmakingStatus::has_strict() const {
  return _internal_has_strict();
}
inline void CMsgGameServerMatchmakingStatus::clear_strict() {
  strict_ = 0u;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGameServerMatchmakingStatus::_internal_strict() const {
  return strict_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGameServerMatchmakingStatus::strict() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerMatchmakingStatus.strict)
  return _internal_strict();
}
inline void CMsgGameServerMatchmakingStatus::_internal_set_strict(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00002000u;
  strict_ = value;
}
inline void CMsgGameServerMatchmakingStatus::set_strict(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_strict(value);
  // @@protoc_insertion_point(field_set:CMsgGameServerMatchmakingStatus.strict)
}

// repeated .CMsgGameServerMatchmakingStatus.Player players = 13;
inline int CMsgGameServerMatchmakingStatus::_internal_players_size() const {
  return players_.size();
}
inline int CMsgGameServerMatchmakingStatus::players_size() const {
  return _internal_players_size();
}
inline void CMsgGameServerMatchmakingStatus::clear_players() {
  players_.Clear();
}
inline ::CMsgGameServerMatchmakingStatus_Player* CMsgGameServerMatchmakingStatus::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGameServerMatchmakingStatus.players)
  return players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameServerMatchmakingStatus_Player >*
CMsgGameServerMatchmakingStatus::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGameServerMatchmakingStatus.players)
  return &players_;
}
inline const ::CMsgGameServerMatchmakingStatus_Player& CMsgGameServerMatchmakingStatus::_internal_players(int index) const {
  return players_.Get(index);
}
inline const ::CMsgGameServerMatchmakingStatus_Player& CMsgGameServerMatchmakingStatus::players(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGameServerMatchmakingStatus.players)
  return _internal_players(index);
}
inline ::CMsgGameServerMatchmakingStatus_Player* CMsgGameServerMatchmakingStatus::_internal_add_players() {
  return players_.Add();
}
inline ::CMsgGameServerMatchmakingStatus_Player* CMsgGameServerMatchmakingStatus::add_players() {
  // @@protoc_insertion_point(field_add:CMsgGameServerMatchmakingStatus.players)
  return _internal_add_players();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameServerMatchmakingStatus_Player >&
CMsgGameServerMatchmakingStatus::players() const {
  // @@protoc_insertion_point(field_list:CMsgGameServerMatchmakingStatus.players)
  return players_;
}

// optional .TF_GC_GameState game_state = 14 [default = TF_GC_GAMESTATE_STATE_INIT];
inline bool CMsgGameServerMatchmakingStatus::_internal_has_game_state() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CMsgGameServerMatchmakingStatus::has_game_state() const {
  return _internal_has_game_state();
}
inline void CMsgGameServerMatchmakingStatus::clear_game_state() {
  game_state_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::TF_GC_GameState CMsgGameServerMatchmakingStatus::_internal_game_state() const {
  return static_cast< ::TF_GC_GameState >(game_state_);
}
inline ::TF_GC_GameState CMsgGameServerMatchmakingStatus::game_state() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerMatchmakingStatus.game_state)
  return _internal_game_state();
}
inline void CMsgGameServerMatchmakingStatus::_internal_set_game_state(::TF_GC_GameState value) {
  assert(::TF_GC_GameState_IsValid(value));
  _has_bits_[0] |= 0x00000800u;
  game_state_ = value;
}
inline void CMsgGameServerMatchmakingStatus::set_game_state(::TF_GC_GameState value) {
  _internal_set_game_state(value);
  // @@protoc_insertion_point(field_set:CMsgGameServerMatchmakingStatus.game_state)
}

// optional .CMsgGameServerMatchmakingStatus.Event event = 15 [default = None];
inline bool CMsgGameServerMatchmakingStatus::_internal_has_event() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CMsgGameServerMatchmakingStatus::has_event() const {
  return _internal_has_event();
}
inline void CMsgGameServerMatchmakingStatus::clear_event() {
  event_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::CMsgGameServerMatchmakingStatus_Event CMsgGameServerMatchmakingStatus::_internal_event() const {
  return static_cast< ::CMsgGameServerMatchmakingStatus_Event >(event_);
}
inline ::CMsgGameServerMatchmakingStatus_Event CMsgGameServerMatchmakingStatus::event() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerMatchmakingStatus.event)
  return _internal_event();
}
inline void CMsgGameServerMatchmakingStatus::_internal_set_event(::CMsgGameServerMatchmakingStatus_Event value) {
  assert(::CMsgGameServerMatchmakingStatus_Event_IsValid(value));
  _has_bits_[0] |= 0x00001000u;
  event_ = value;
}
inline void CMsgGameServerMatchmakingStatus::set_event(::CMsgGameServerMatchmakingStatus_Event value) {
  _internal_set_event(value);
  // @@protoc_insertion_point(field_set:CMsgGameServerMatchmakingStatus.event)
}

// optional uint32 mvm_wave = 18;
inline bool CMsgGameServerMatchmakingStatus::_internal_has_mvm_wave() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CMsgGameServerMatchmakingStatus::has_mvm_wave() const {
  return _internal_has_mvm_wave();
}
inline void CMsgGameServerMatchmakingStatus::clear_mvm_wave() {
  mvm_wave_ = 0u;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGameServerMatchmakingStatus::_internal_mvm_wave() const {
  return mvm_wave_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGameServerMatchmakingStatus::mvm_wave() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerMatchmakingStatus.mvm_wave)
  return _internal_mvm_wave();
}
inline void CMsgGameServerMatchmakingStatus::_internal_set_mvm_wave(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00004000u;
  mvm_wave_ = value;
}
inline void CMsgGameServerMatchmakingStatus::set_mvm_wave(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_mvm_wave(value);
  // @@protoc_insertion_point(field_set:CMsgGameServerMatchmakingStatus.mvm_wave)
}

// optional uint32 mvm_credits_acquired = 19;
inline bool CMsgGameServerMatchmakingStatus::_internal_has_mvm_credits_acquired() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CMsgGameServerMatchmakingStatus::has_mvm_credits_acquired() const {
  return _internal_has_mvm_credits_acquired();
}
inline void CMsgGameServerMatchmakingStatus::clear_mvm_credits_acquired() {
  mvm_credits_acquired_ = 0u;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGameServerMatchmakingStatus::_internal_mvm_credits_acquired() const {
  return mvm_credits_acquired_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGameServerMatchmakingStatus::mvm_credits_acquired() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerMatchmakingStatus.mvm_credits_acquired)
  return _internal_mvm_credits_acquired();
}
inline void CMsgGameServerMatchmakingStatus::_internal_set_mvm_credits_acquired(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00008000u;
  mvm_credits_acquired_ = value;
}
inline void CMsgGameServerMatchmakingStatus::set_mvm_credits_acquired(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_mvm_credits_acquired(value);
  // @@protoc_insertion_point(field_set:CMsgGameServerMatchmakingStatus.mvm_credits_acquired)
}

// optional uint32 mvm_credits_dropped = 20;
inline bool CMsgGameServerMatchmakingStatus::_internal_has_mvm_credits_dropped() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool CMsgGameServerMatchmakingStatus::has_mvm_credits_dropped() const {
  return _internal_has_mvm_credits_dropped();
}
inline void CMsgGameServerMatchmakingStatus::clear_mvm_credits_dropped() {
  mvm_credits_dropped_ = 0u;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGameServerMatchmakingStatus::_internal_mvm_credits_dropped() const {
  return mvm_credits_dropped_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGameServerMatchmakingStatus::mvm_credits_dropped() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerMatchmakingStatus.mvm_credits_dropped)
  return _internal_mvm_credits_dropped();
}
inline void CMsgGameServerMatchmakingStatus::_internal_set_mvm_credits_dropped(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00010000u;
  mvm_credits_dropped_ = value;
}
inline void CMsgGameServerMatchmakingStatus::set_mvm_credits_dropped(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_mvm_credits_dropped(value);
  // @@protoc_insertion_point(field_set:CMsgGameServerMatchmakingStatus.mvm_credits_dropped)
}

// optional sint32 match_group = 23 [default = -1];
inline bool CMsgGameServerMatchmakingStatus::_internal_has_match_group() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool CMsgGameServerMatchmakingStatus::has_match_group() const {
  return _internal_has_match_group();
}
inline void CMsgGameServerMatchmakingStatus::clear_match_group() {
  match_group_ = -1;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGameServerMatchmakingStatus::_internal_match_group() const {
  return match_group_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGameServerMatchmakingStatus::match_group() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerMatchmakingStatus.match_group)
  return _internal_match_group();
}
inline void CMsgGameServerMatchmakingStatus::_internal_set_match_group(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00080000u;
  match_group_ = value;
}
inline void CMsgGameServerMatchmakingStatus::set_match_group(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_match_group(value);
  // @@protoc_insertion_point(field_set:CMsgGameServerMatchmakingStatus.match_group)
}

// optional uint32 lobby_mm_version = 24;
inline bool CMsgGameServerMatchmakingStatus::_internal_has_lobby_mm_version() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool CMsgGameServerMatchmakingStatus::has_lobby_mm_version() const {
  return _internal_has_lobby_mm_version();
}
inline void CMsgGameServerMatchmakingStatus::clear_lobby_mm_version() {
  lobby_mm_version_ = 0u;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGameServerMatchmakingStatus::_internal_lobby_mm_version() const {
  return lobby_mm_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGameServerMatchmakingStatus::lobby_mm_version() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerMatchmakingStatus.lobby_mm_version)
  return _internal_lobby_mm_version();
}
inline void CMsgGameServerMatchmakingStatus::_internal_set_lobby_mm_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00020000u;
  lobby_mm_version_ = value;
}
inline void CMsgGameServerMatchmakingStatus::set_lobby_mm_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_lobby_mm_version(value);
  // @@protoc_insertion_point(field_set:CMsgGameServerMatchmakingStatus.lobby_mm_version)
}

// -------------------------------------------------------------------

// CMsgMatchmakingProgress

// optional uint32 avg_wait_time_new = 4;
inline bool CMsgMatchmakingProgress::_internal_has_avg_wait_time_new() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgMatchmakingProgress::has_avg_wait_time_new() const {
  return _internal_has_avg_wait_time_new();
}
inline void CMsgMatchmakingProgress::clear_avg_wait_time_new() {
  avg_wait_time_new_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgMatchmakingProgress::_internal_avg_wait_time_new() const {
  return avg_wait_time_new_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgMatchmakingProgress::avg_wait_time_new() const {
  // @@protoc_insertion_point(field_get:CMsgMatchmakingProgress.avg_wait_time_new)
  return _internal_avg_wait_time_new();
}
inline void CMsgMatchmakingProgress::_internal_set_avg_wait_time_new(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  avg_wait_time_new_ = value;
}
inline void CMsgMatchmakingProgress::set_avg_wait_time_new(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_avg_wait_time_new(value);
  // @@protoc_insertion_point(field_set:CMsgMatchmakingProgress.avg_wait_time_new)
}

// optional uint32 avg_wait_time_join_late = 5;
inline bool CMsgMatchmakingProgress::_internal_has_avg_wait_time_join_late() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgMatchmakingProgress::has_avg_wait_time_join_late() const {
  return _internal_has_avg_wait_time_join_late();
}
inline void CMsgMatchmakingProgress::clear_avg_wait_time_join_late() {
  avg_wait_time_join_late_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgMatchmakingProgress::_internal_avg_wait_time_join_late() const {
  return avg_wait_time_join_late_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgMatchmakingProgress::avg_wait_time_join_late() const {
  // @@protoc_insertion_point(field_get:CMsgMatchmakingProgress.avg_wait_time_join_late)
  return _internal_avg_wait_time_join_late();
}
inline void CMsgMatchmakingProgress::_internal_set_avg_wait_time_join_late(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  avg_wait_time_join_late_ = value;
}
inline void CMsgMatchmakingProgress::set_avg_wait_time_join_late(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_avg_wait_time_join_late(value);
  // @@protoc_insertion_point(field_set:CMsgMatchmakingProgress.avg_wait_time_join_late)
}

// optional uint32 your_wait_time = 6;
inline bool CMsgMatchmakingProgress::_internal_has_your_wait_time() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgMatchmakingProgress::has_your_wait_time() const {
  return _internal_has_your_wait_time();
}
inline void CMsgMatchmakingProgress::clear_your_wait_time() {
  your_wait_time_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgMatchmakingProgress::_internal_your_wait_time() const {
  return your_wait_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgMatchmakingProgress::your_wait_time() const {
  // @@protoc_insertion_point(field_get:CMsgMatchmakingProgress.your_wait_time)
  return _internal_your_wait_time();
}
inline void CMsgMatchmakingProgress::_internal_set_your_wait_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  your_wait_time_ = value;
}
inline void CMsgMatchmakingProgress::set_your_wait_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_your_wait_time(value);
  // @@protoc_insertion_point(field_set:CMsgMatchmakingProgress.your_wait_time)
}

// optional uint32 matching_worldwide_searching_players = 8;
inline bool CMsgMatchmakingProgress::_internal_has_matching_worldwide_searching_players() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgMatchmakingProgress::has_matching_worldwide_searching_players() const {
  return _internal_has_matching_worldwide_searching_players();
}
inline void CMsgMatchmakingProgress::clear_matching_worldwide_searching_players() {
  matching_worldwide_searching_players_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgMatchmakingProgress::_internal_matching_worldwide_searching_players() const {
  return matching_worldwide_searching_players_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgMatchmakingProgress::matching_worldwide_searching_players() const {
  // @@protoc_insertion_point(field_get:CMsgMatchmakingProgress.matching_worldwide_searching_players)
  return _internal_matching_worldwide_searching_players();
}
inline void CMsgMatchmakingProgress::_internal_set_matching_worldwide_searching_players(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  matching_worldwide_searching_players_ = value;
}
inline void CMsgMatchmakingProgress::set_matching_worldwide_searching_players(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_matching_worldwide_searching_players(value);
  // @@protoc_insertion_point(field_set:CMsgMatchmakingProgress.matching_worldwide_searching_players)
}

// optional uint32 matching_near_you_searching_players = 9;
inline bool CMsgMatchmakingProgress::_internal_has_matching_near_you_searching_players() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgMatchmakingProgress::has_matching_near_you_searching_players() const {
  return _internal_has_matching_near_you_searching_players();
}
inline void CMsgMatchmakingProgress::clear_matching_near_you_searching_players() {
  matching_near_you_searching_players_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgMatchmakingProgress::_internal_matching_near_you_searching_players() const {
  return matching_near_you_searching_players_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgMatchmakingProgress::matching_near_you_searching_players() const {
  // @@protoc_insertion_point(field_get:CMsgMatchmakingProgress.matching_near_you_searching_players)
  return _internal_matching_near_you_searching_players();
}
inline void CMsgMatchmakingProgress::_internal_set_matching_near_you_searching_players(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  matching_near_you_searching_players_ = value;
}
inline void CMsgMatchmakingProgress::set_matching_near_you_searching_players(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_matching_near_you_searching_players(value);
  // @@protoc_insertion_point(field_set:CMsgMatchmakingProgress.matching_near_you_searching_players)
}

// optional uint32 total_worldwide_searching_players = 13;
inline bool CMsgMatchmakingProgress::_internal_has_total_worldwide_searching_players() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgMatchmakingProgress::has_total_worldwide_searching_players() const {
  return _internal_has_total_worldwide_searching_players();
}
inline void CMsgMatchmakingProgress::clear_total_worldwide_searching_players() {
  total_worldwide_searching_players_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgMatchmakingProgress::_internal_total_worldwide_searching_players() const {
  return total_worldwide_searching_players_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgMatchmakingProgress::total_worldwide_searching_players() const {
  // @@protoc_insertion_point(field_get:CMsgMatchmakingProgress.total_worldwide_searching_players)
  return _internal_total_worldwide_searching_players();
}
inline void CMsgMatchmakingProgress::_internal_set_total_worldwide_searching_players(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  total_worldwide_searching_players_ = value;
}
inline void CMsgMatchmakingProgress::set_total_worldwide_searching_players(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_total_worldwide_searching_players(value);
  // @@protoc_insertion_point(field_set:CMsgMatchmakingProgress.total_worldwide_searching_players)
}

// optional uint32 total_near_you_searching_players = 14;
inline bool CMsgMatchmakingProgress::_internal_has_total_near_you_searching_players() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgMatchmakingProgress::has_total_near_you_searching_players() const {
  return _internal_has_total_near_you_searching_players();
}
inline void CMsgMatchmakingProgress::clear_total_near_you_searching_players() {
  total_near_you_searching_players_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgMatchmakingProgress::_internal_total_near_you_searching_players() const {
  return total_near_you_searching_players_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgMatchmakingProgress::total_near_you_searching_players() const {
  // @@protoc_insertion_point(field_get:CMsgMatchmakingProgress.total_near_you_searching_players)
  return _internal_total_near_you_searching_players();
}
inline void CMsgMatchmakingProgress::_internal_set_total_near_you_searching_players(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  total_near_you_searching_players_ = value;
}
inline void CMsgMatchmakingProgress::set_total_near_you_searching_players(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_total_near_you_searching_players(value);
  // @@protoc_insertion_point(field_set:CMsgMatchmakingProgress.total_near_you_searching_players)
}

// optional uint32 matching_worldwide_active_players = 15;
inline bool CMsgMatchmakingProgress::_internal_has_matching_worldwide_active_players() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgMatchmakingProgress::has_matching_worldwide_active_players() const {
  return _internal_has_matching_worldwide_active_players();
}
inline void CMsgMatchmakingProgress::clear_matching_worldwide_active_players() {
  matching_worldwide_active_players_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgMatchmakingProgress::_internal_matching_worldwide_active_players() const {
  return matching_worldwide_active_players_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgMatchmakingProgress::matching_worldwide_active_players() const {
  // @@protoc_insertion_point(field_get:CMsgMatchmakingProgress.matching_worldwide_active_players)
  return _internal_matching_worldwide_active_players();
}
inline void CMsgMatchmakingProgress::_internal_set_matching_worldwide_active_players(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  matching_worldwide_active_players_ = value;
}
inline void CMsgMatchmakingProgress::set_matching_worldwide_active_players(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_matching_worldwide_active_players(value);
  // @@protoc_insertion_point(field_set:CMsgMatchmakingProgress.matching_worldwide_active_players)
}

// optional uint32 matching_near_you_active_players = 16;
inline bool CMsgMatchmakingProgress::_internal_has_matching_near_you_active_players() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgMatchmakingProgress::has_matching_near_you_active_players() const {
  return _internal_has_matching_near_you_active_players();
}
inline void CMsgMatchmakingProgress::clear_matching_near_you_active_players() {
  matching_near_you_active_players_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgMatchmakingProgress::_internal_matching_near_you_active_players() const {
  return matching_near_you_active_players_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgMatchmakingProgress::matching_near_you_active_players() const {
  // @@protoc_insertion_point(field_get:CMsgMatchmakingProgress.matching_near_you_active_players)
  return _internal_matching_near_you_active_players();
}
inline void CMsgMatchmakingProgress::_internal_set_matching_near_you_active_players(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  matching_near_you_active_players_ = value;
}
inline void CMsgMatchmakingProgress::set_matching_near_you_active_players(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_matching_near_you_active_players(value);
  // @@protoc_insertion_point(field_set:CMsgMatchmakingProgress.matching_near_you_active_players)
}

// optional uint32 total_worldwide_active_players = 17;
inline bool CMsgMatchmakingProgress::_internal_has_total_worldwide_active_players() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgMatchmakingProgress::has_total_worldwide_active_players() const {
  return _internal_has_total_worldwide_active_players();
}
inline void CMsgMatchmakingProgress::clear_total_worldwide_active_players() {
  total_worldwide_active_players_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgMatchmakingProgress::_internal_total_worldwide_active_players() const {
  return total_worldwide_active_players_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgMatchmakingProgress::total_worldwide_active_players() const {
  // @@protoc_insertion_point(field_get:CMsgMatchmakingProgress.total_worldwide_active_players)
  return _internal_total_worldwide_active_players();
}
inline void CMsgMatchmakingProgress::_internal_set_total_worldwide_active_players(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  total_worldwide_active_players_ = value;
}
inline void CMsgMatchmakingProgress::set_total_worldwide_active_players(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_total_worldwide_active_players(value);
  // @@protoc_insertion_point(field_set:CMsgMatchmakingProgress.total_worldwide_active_players)
}

// optional uint32 total_near_you_active_players = 18;
inline bool CMsgMatchmakingProgress::_internal_has_total_near_you_active_players() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CMsgMatchmakingProgress::has_total_near_you_active_players() const {
  return _internal_has_total_near_you_active_players();
}
inline void CMsgMatchmakingProgress::clear_total_near_you_active_players() {
  total_near_you_active_players_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgMatchmakingProgress::_internal_total_near_you_active_players() const {
  return total_near_you_active_players_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgMatchmakingProgress::total_near_you_active_players() const {
  // @@protoc_insertion_point(field_get:CMsgMatchmakingProgress.total_near_you_active_players)
  return _internal_total_near_you_active_players();
}
inline void CMsgMatchmakingProgress::_internal_set_total_near_you_active_players(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  total_near_you_active_players_ = value;
}
inline void CMsgMatchmakingProgress::set_total_near_you_active_players(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_total_near_you_active_players(value);
  // @@protoc_insertion_point(field_set:CMsgMatchmakingProgress.total_near_you_active_players)
}

// optional uint32 matching_worldwide_empty_gameservers = 19;
inline bool CMsgMatchmakingProgress::_internal_has_matching_worldwide_empty_gameservers() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CMsgMatchmakingProgress::has_matching_worldwide_empty_gameservers() const {
  return _internal_has_matching_worldwide_empty_gameservers();
}
inline void CMsgMatchmakingProgress::clear_matching_worldwide_empty_gameservers() {
  matching_worldwide_empty_gameservers_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgMatchmakingProgress::_internal_matching_worldwide_empty_gameservers() const {
  return matching_worldwide_empty_gameservers_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgMatchmakingProgress::matching_worldwide_empty_gameservers() const {
  // @@protoc_insertion_point(field_get:CMsgMatchmakingProgress.matching_worldwide_empty_gameservers)
  return _internal_matching_worldwide_empty_gameservers();
}
inline void CMsgMatchmakingProgress::_internal_set_matching_worldwide_empty_gameservers(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  matching_worldwide_empty_gameservers_ = value;
}
inline void CMsgMatchmakingProgress::set_matching_worldwide_empty_gameservers(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_matching_worldwide_empty_gameservers(value);
  // @@protoc_insertion_point(field_set:CMsgMatchmakingProgress.matching_worldwide_empty_gameservers)
}

// optional uint32 matching_near_you_empty_gameservers = 20;
inline bool CMsgMatchmakingProgress::_internal_has_matching_near_you_empty_gameservers() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CMsgMatchmakingProgress::has_matching_near_you_empty_gameservers() const {
  return _internal_has_matching_near_you_empty_gameservers();
}
inline void CMsgMatchmakingProgress::clear_matching_near_you_empty_gameservers() {
  matching_near_you_empty_gameservers_ = 0u;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgMatchmakingProgress::_internal_matching_near_you_empty_gameservers() const {
  return matching_near_you_empty_gameservers_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgMatchmakingProgress::matching_near_you_empty_gameservers() const {
  // @@protoc_insertion_point(field_get:CMsgMatchmakingProgress.matching_near_you_empty_gameservers)
  return _internal_matching_near_you_empty_gameservers();
}
inline void CMsgMatchmakingProgress::_internal_set_matching_near_you_empty_gameservers(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00002000u;
  matching_near_you_empty_gameservers_ = value;
}
inline void CMsgMatchmakingProgress::set_matching_near_you_empty_gameservers(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_matching_near_you_empty_gameservers(value);
  // @@protoc_insertion_point(field_set:CMsgMatchmakingProgress.matching_near_you_empty_gameservers)
}

// optional uint32 total_worldwide_empty_gameservers = 21;
inline bool CMsgMatchmakingProgress::_internal_has_total_worldwide_empty_gameservers() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CMsgMatchmakingProgress::has_total_worldwide_empty_gameservers() const {
  return _internal_has_total_worldwide_empty_gameservers();
}
inline void CMsgMatchmakingProgress::clear_total_worldwide_empty_gameservers() {
  total_worldwide_empty_gameservers_ = 0u;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgMatchmakingProgress::_internal_total_worldwide_empty_gameservers() const {
  return total_worldwide_empty_gameservers_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgMatchmakingProgress::total_worldwide_empty_gameservers() const {
  // @@protoc_insertion_point(field_get:CMsgMatchmakingProgress.total_worldwide_empty_gameservers)
  return _internal_total_worldwide_empty_gameservers();
}
inline void CMsgMatchmakingProgress::_internal_set_total_worldwide_empty_gameservers(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00004000u;
  total_worldwide_empty_gameservers_ = value;
}
inline void CMsgMatchmakingProgress::set_total_worldwide_empty_gameservers(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_total_worldwide_empty_gameservers(value);
  // @@protoc_insertion_point(field_set:CMsgMatchmakingProgress.total_worldwide_empty_gameservers)
}

// optional uint32 total_near_you_empty_gameservers = 22;
inline bool CMsgMatchmakingProgress::_internal_has_total_near_you_empty_gameservers() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CMsgMatchmakingProgress::has_total_near_you_empty_gameservers() const {
  return _internal_has_total_near_you_empty_gameservers();
}
inline void CMsgMatchmakingProgress::clear_total_near_you_empty_gameservers() {
  total_near_you_empty_gameservers_ = 0u;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgMatchmakingProgress::_internal_total_near_you_empty_gameservers() const {
  return total_near_you_empty_gameservers_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgMatchmakingProgress::total_near_you_empty_gameservers() const {
  // @@protoc_insertion_point(field_get:CMsgMatchmakingProgress.total_near_you_empty_gameservers)
  return _internal_total_near_you_empty_gameservers();
}
inline void CMsgMatchmakingProgress::_internal_set_total_near_you_empty_gameservers(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00008000u;
  total_near_you_empty_gameservers_ = value;
}
inline void CMsgMatchmakingProgress::set_total_near_you_empty_gameservers(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_total_near_you_empty_gameservers(value);
  // @@protoc_insertion_point(field_set:CMsgMatchmakingProgress.total_near_you_empty_gameservers)
}

// optional uint32 urgency_pct = 1;
inline bool CMsgMatchmakingProgress::_internal_has_urgency_pct() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgMatchmakingProgress::has_urgency_pct() const {
  return _internal_has_urgency_pct();
}
inline void CMsgMatchmakingProgress::clear_urgency_pct() {
  urgency_pct_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgMatchmakingProgress::_internal_urgency_pct() const {
  return urgency_pct_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgMatchmakingProgress::urgency_pct() const {
  // @@protoc_insertion_point(field_get:CMsgMatchmakingProgress.urgency_pct)
  return _internal_urgency_pct();
}
inline void CMsgMatchmakingProgress::_internal_set_urgency_pct(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  urgency_pct_ = value;
}
inline void CMsgMatchmakingProgress::set_urgency_pct(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_urgency_pct(value);
  // @@protoc_insertion_point(field_set:CMsgMatchmakingProgress.urgency_pct)
}

// -------------------------------------------------------------------

// CMsgMvMVictoryInfo_Item

// optional .CMsgMvMVictoryInfo.GrantReason grant_reason = 1 [default = INVALID];
inline bool CMsgMvMVictoryInfo_Item::_internal_has_grant_reason() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgMvMVictoryInfo_Item::has_grant_reason() const {
  return _internal_has_grant_reason();
}
inline void CMsgMvMVictoryInfo_Item::clear_grant_reason() {
  grant_reason_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::CMsgMvMVictoryInfo_GrantReason CMsgMvMVictoryInfo_Item::_internal_grant_reason() const {
  return static_cast< ::CMsgMvMVictoryInfo_GrantReason >(grant_reason_);
}
inline ::CMsgMvMVictoryInfo_GrantReason CMsgMvMVictoryInfo_Item::grant_reason() const {
  // @@protoc_insertion_point(field_get:CMsgMvMVictoryInfo.Item.grant_reason)
  return _internal_grant_reason();
}
inline void CMsgMvMVictoryInfo_Item::_internal_set_grant_reason(::CMsgMvMVictoryInfo_GrantReason value) {
  assert(::CMsgMvMVictoryInfo_GrantReason_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  grant_reason_ = value;
}
inline void CMsgMvMVictoryInfo_Item::set_grant_reason(::CMsgMvMVictoryInfo_GrantReason value) {
  _internal_set_grant_reason(value);
  // @@protoc_insertion_point(field_set:CMsgMvMVictoryInfo.Item.grant_reason)
}

// optional bytes item_data = 2;
inline bool CMsgMvMVictoryInfo_Item::_internal_has_item_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgMvMVictoryInfo_Item::has_item_data() const {
  return _internal_has_item_data();
}
inline void CMsgMvMVictoryInfo_Item::clear_item_data() {
  item_data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgMvMVictoryInfo_Item::item_data() const {
  // @@protoc_insertion_point(field_get:CMsgMvMVictoryInfo.Item.item_data)
  return _internal_item_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgMvMVictoryInfo_Item::set_item_data(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 item_data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgMvMVictoryInfo.Item.item_data)
}
inline std::string* CMsgMvMVictoryInfo_Item::mutable_item_data() {
  // @@protoc_insertion_point(field_mutable:CMsgMvMVictoryInfo.Item.item_data)
  return _internal_mutable_item_data();
}
inline const std::string& CMsgMvMVictoryInfo_Item::_internal_item_data() const {
  return item_data_.Get();
}
inline void CMsgMvMVictoryInfo_Item::_internal_set_item_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  item_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgMvMVictoryInfo_Item::_internal_mutable_item_data() {
  _has_bits_[0] |= 0x00000001u;
  return item_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgMvMVictoryInfo_Item::release_item_data() {
  // @@protoc_insertion_point(field_release:CMsgMvMVictoryInfo.Item.item_data)
  if (!_internal_has_item_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return item_data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CMsgMvMVictoryInfo_Item::set_allocated_item_data(std::string* item_data) {
  if (item_data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  item_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), item_data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CMsgMvMVictoryInfo.Item.item_data)
}

// optional fixed64 squad_surplus_claimer_steam_id = 3;
inline bool CMsgMvMVictoryInfo_Item::_internal_has_squad_surplus_claimer_steam_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgMvMVictoryInfo_Item::has_squad_surplus_claimer_steam_id() const {
  return _internal_has_squad_surplus_claimer_steam_id();
}
inline void CMsgMvMVictoryInfo_Item::clear_squad_surplus_claimer_steam_id() {
  squad_surplus_claimer_steam_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgMvMVictoryInfo_Item::_internal_squad_surplus_claimer_steam_id() const {
  return squad_surplus_claimer_steam_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgMvMVictoryInfo_Item::squad_surplus_claimer_steam_id() const {
  // @@protoc_insertion_point(field_get:CMsgMvMVictoryInfo.Item.squad_surplus_claimer_steam_id)
  return _internal_squad_surplus_claimer_steam_id();
}
inline void CMsgMvMVictoryInfo_Item::_internal_set_squad_surplus_claimer_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  squad_surplus_claimer_steam_id_ = value;
}
inline void CMsgMvMVictoryInfo_Item::set_squad_surplus_claimer_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_squad_surplus_claimer_steam_id(value);
  // @@protoc_insertion_point(field_set:CMsgMvMVictoryInfo.Item.squad_surplus_claimer_steam_id)
}

// -------------------------------------------------------------------

// CMsgMvMVictoryInfo_Player

// optional fixed64 steam_id = 1;
inline bool CMsgMvMVictoryInfo_Player::_internal_has_steam_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgMvMVictoryInfo_Player::has_steam_id() const {
  return _internal_has_steam_id();
}
inline void CMsgMvMVictoryInfo_Player::clear_steam_id() {
  steam_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgMvMVictoryInfo_Player::_internal_steam_id() const {
  return steam_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgMvMVictoryInfo_Player::steam_id() const {
  // @@protoc_insertion_point(field_get:CMsgMvMVictoryInfo.Player.steam_id)
  return _internal_steam_id();
}
inline void CMsgMvMVictoryInfo_Player::_internal_set_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  steam_id_ = value;
}
inline void CMsgMvMVictoryInfo_Player::set_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_steam_id(value);
  // @@protoc_insertion_point(field_set:CMsgMvMVictoryInfo.Player.steam_id)
}

// optional bool badge_granted = 3;
inline bool CMsgMvMVictoryInfo_Player::_internal_has_badge_granted() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgMvMVictoryInfo_Player::has_badge_granted() const {
  return _internal_has_badge_granted();
}
inline void CMsgMvMVictoryInfo_Player::clear_badge_granted() {
  badge_granted_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CMsgMvMVictoryInfo_Player::_internal_badge_granted() const {
  return badge_granted_;
}
inline bool CMsgMvMVictoryInfo_Player::badge_granted() const {
  // @@protoc_insertion_point(field_get:CMsgMvMVictoryInfo.Player.badge_granted)
  return _internal_badge_granted();
}
inline void CMsgMvMVictoryInfo_Player::_internal_set_badge_granted(bool value) {
  _has_bits_[0] |= 0x00000002u;
  badge_granted_ = value;
}
inline void CMsgMvMVictoryInfo_Player::set_badge_granted(bool value) {
  _internal_set_badge_granted(value);
  // @@protoc_insertion_point(field_set:CMsgMvMVictoryInfo.Player.badge_granted)
}

// optional bool badge_progress_updated = 4;
inline bool CMsgMvMVictoryInfo_Player::_internal_has_badge_progress_updated() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgMvMVictoryInfo_Player::has_badge_progress_updated() const {
  return _internal_has_badge_progress_updated();
}
inline void CMsgMvMVictoryInfo_Player::clear_badge_progress_updated() {
  badge_progress_updated_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CMsgMvMVictoryInfo_Player::_internal_badge_progress_updated() const {
  return badge_progress_updated_;
}
inline bool CMsgMvMVictoryInfo_Player::badge_progress_updated() const {
  // @@protoc_insertion_point(field_get:CMsgMvMVictoryInfo.Player.badge_progress_updated)
  return _internal_badge_progress_updated();
}
inline void CMsgMvMVictoryInfo_Player::_internal_set_badge_progress_updated(bool value) {
  _has_bits_[0] |= 0x00000004u;
  badge_progress_updated_ = value;
}
inline void CMsgMvMVictoryInfo_Player::set_badge_progress_updated(bool value) {
  _internal_set_badge_progress_updated(value);
  // @@protoc_insertion_point(field_set:CMsgMvMVictoryInfo.Player.badge_progress_updated)
}

// optional bool badge_leveled = 5;
inline bool CMsgMvMVictoryInfo_Player::_internal_has_badge_leveled() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgMvMVictoryInfo_Player::has_badge_leveled() const {
  return _internal_has_badge_leveled();
}
inline void CMsgMvMVictoryInfo_Player::clear_badge_leveled() {
  badge_leveled_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CMsgMvMVictoryInfo_Player::_internal_badge_leveled() const {
  return badge_leveled_;
}
inline bool CMsgMvMVictoryInfo_Player::badge_leveled() const {
  // @@protoc_insertion_point(field_get:CMsgMvMVictoryInfo.Player.badge_leveled)
  return _internal_badge_leveled();
}
inline void CMsgMvMVictoryInfo_Player::_internal_set_badge_leveled(bool value) {
  _has_bits_[0] |= 0x00000008u;
  badge_leveled_ = value;
}
inline void CMsgMvMVictoryInfo_Player::set_badge_leveled(bool value) {
  _internal_set_badge_leveled(value);
  // @@protoc_insertion_point(field_set:CMsgMvMVictoryInfo.Player.badge_leveled)
}

// optional uint32 badge_level = 6;
inline bool CMsgMvMVictoryInfo_Player::_internal_has_badge_level() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgMvMVictoryInfo_Player::has_badge_level() const {
  return _internal_has_badge_level();
}
inline void CMsgMvMVictoryInfo_Player::clear_badge_level() {
  badge_level_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgMvMVictoryInfo_Player::_internal_badge_level() const {
  return badge_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgMvMVictoryInfo_Player::badge_level() const {
  // @@protoc_insertion_point(field_get:CMsgMvMVictoryInfo.Player.badge_level)
  return _internal_badge_level();
}
inline void CMsgMvMVictoryInfo_Player::_internal_set_badge_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  badge_level_ = value;
}
inline void CMsgMvMVictoryInfo_Player::set_badge_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_badge_level(value);
  // @@protoc_insertion_point(field_set:CMsgMvMVictoryInfo.Player.badge_level)
}

// optional uint32 badge_progress_bits = 7;
inline bool CMsgMvMVictoryInfo_Player::_internal_has_badge_progress_bits() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgMvMVictoryInfo_Player::has_badge_progress_bits() const {
  return _internal_has_badge_progress_bits();
}
inline void CMsgMvMVictoryInfo_Player::clear_badge_progress_bits() {
  badge_progress_bits_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgMvMVictoryInfo_Player::_internal_badge_progress_bits() const {
  return badge_progress_bits_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgMvMVictoryInfo_Player::badge_progress_bits() const {
  // @@protoc_insertion_point(field_get:CMsgMvMVictoryInfo.Player.badge_progress_bits)
  return _internal_badge_progress_bits();
}
inline void CMsgMvMVictoryInfo_Player::_internal_set_badge_progress_bits(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  badge_progress_bits_ = value;
}
inline void CMsgMvMVictoryInfo_Player::set_badge_progress_bits(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_badge_progress_bits(value);
  // @@protoc_insertion_point(field_set:CMsgMvMVictoryInfo.Player.badge_progress_bits)
}

// repeated .CMsgMvMVictoryInfo.Item items = 8;
inline int CMsgMvMVictoryInfo_Player::_internal_items_size() const {
  return items_.size();
}
inline int CMsgMvMVictoryInfo_Player::items_size() const {
  return _internal_items_size();
}
inline void CMsgMvMVictoryInfo_Player::clear_items() {
  items_.Clear();
}
inline ::CMsgMvMVictoryInfo_Item* CMsgMvMVictoryInfo_Player::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgMvMVictoryInfo.Player.items)
  return items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgMvMVictoryInfo_Item >*
CMsgMvMVictoryInfo_Player::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:CMsgMvMVictoryInfo.Player.items)
  return &items_;
}
inline const ::CMsgMvMVictoryInfo_Item& CMsgMvMVictoryInfo_Player::_internal_items(int index) const {
  return items_.Get(index);
}
inline const ::CMsgMvMVictoryInfo_Item& CMsgMvMVictoryInfo_Player::items(int index) const {
  // @@protoc_insertion_point(field_get:CMsgMvMVictoryInfo.Player.items)
  return _internal_items(index);
}
inline ::CMsgMvMVictoryInfo_Item* CMsgMvMVictoryInfo_Player::_internal_add_items() {
  return items_.Add();
}
inline ::CMsgMvMVictoryInfo_Item* CMsgMvMVictoryInfo_Player::add_items() {
  // @@protoc_insertion_point(field_add:CMsgMvMVictoryInfo.Player.items)
  return _internal_add_items();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgMvMVictoryInfo_Item >&
CMsgMvMVictoryInfo_Player::items() const {
  // @@protoc_insertion_point(field_list:CMsgMvMVictoryInfo.Player.items)
  return items_;
}

// optional bool voucher_missing = 9;
inline bool CMsgMvMVictoryInfo_Player::_internal_has_voucher_missing() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgMvMVictoryInfo_Player::has_voucher_missing() const {
  return _internal_has_voucher_missing();
}
inline void CMsgMvMVictoryInfo_Player::clear_voucher_missing() {
  voucher_missing_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CMsgMvMVictoryInfo_Player::_internal_voucher_missing() const {
  return voucher_missing_;
}
inline bool CMsgMvMVictoryInfo_Player::voucher_missing() const {
  // @@protoc_insertion_point(field_get:CMsgMvMVictoryInfo.Player.voucher_missing)
  return _internal_voucher_missing();
}
inline void CMsgMvMVictoryInfo_Player::_internal_set_voucher_missing(bool value) {
  _has_bits_[0] |= 0x00000010u;
  voucher_missing_ = value;
}
inline void CMsgMvMVictoryInfo_Player::set_voucher_missing(bool value) {
  _internal_set_voucher_missing(value);
  // @@protoc_insertion_point(field_set:CMsgMvMVictoryInfo.Player.voucher_missing)
}

// optional uint32 badge_points = 10;
inline bool CMsgMvMVictoryInfo_Player::_internal_has_badge_points() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgMvMVictoryInfo_Player::has_badge_points() const {
  return _internal_has_badge_points();
}
inline void CMsgMvMVictoryInfo_Player::clear_badge_points() {
  badge_points_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgMvMVictoryInfo_Player::_internal_badge_points() const {
  return badge_points_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgMvMVictoryInfo_Player::badge_points() const {
  // @@protoc_insertion_point(field_get:CMsgMvMVictoryInfo.Player.badge_points)
  return _internal_badge_points();
}
inline void CMsgMvMVictoryInfo_Player::_internal_set_badge_points(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  badge_points_ = value;
}
inline void CMsgMvMVictoryInfo_Player::set_badge_points(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_badge_points(value);
  // @@protoc_insertion_point(field_set:CMsgMvMVictoryInfo.Player.badge_points)
}

// -------------------------------------------------------------------

// CMsgMvMVictoryInfo

// repeated .CMsgMvMVictoryInfo.Player players = 1;
inline int CMsgMvMVictoryInfo::_internal_players_size() const {
  return players_.size();
}
inline int CMsgMvMVictoryInfo::players_size() const {
  return _internal_players_size();
}
inline void CMsgMvMVictoryInfo::clear_players() {
  players_.Clear();
}
inline ::CMsgMvMVictoryInfo_Player* CMsgMvMVictoryInfo::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgMvMVictoryInfo.players)
  return players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgMvMVictoryInfo_Player >*
CMsgMvMVictoryInfo::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:CMsgMvMVictoryInfo.players)
  return &players_;
}
inline const ::CMsgMvMVictoryInfo_Player& CMsgMvMVictoryInfo::_internal_players(int index) const {
  return players_.Get(index);
}
inline const ::CMsgMvMVictoryInfo_Player& CMsgMvMVictoryInfo::players(int index) const {
  // @@protoc_insertion_point(field_get:CMsgMvMVictoryInfo.players)
  return _internal_players(index);
}
inline ::CMsgMvMVictoryInfo_Player* CMsgMvMVictoryInfo::_internal_add_players() {
  return players_.Add();
}
inline ::CMsgMvMVictoryInfo_Player* CMsgMvMVictoryInfo::add_players() {
  // @@protoc_insertion_point(field_add:CMsgMvMVictoryInfo.players)
  return _internal_add_players();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgMvMVictoryInfo_Player >&
CMsgMvMVictoryInfo::players() const {
  // @@protoc_insertion_point(field_list:CMsgMvMVictoryInfo.players)
  return players_;
}

// optional string tour_name = 2;
inline bool CMsgMvMVictoryInfo::_internal_has_tour_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgMvMVictoryInfo::has_tour_name() const {
  return _internal_has_tour_name();
}
inline void CMsgMvMVictoryInfo::clear_tour_name() {
  tour_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgMvMVictoryInfo::tour_name() const {
  // @@protoc_insertion_point(field_get:CMsgMvMVictoryInfo.tour_name)
  return _internal_tour_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgMvMVictoryInfo::set_tour_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 tour_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgMvMVictoryInfo.tour_name)
}
inline std::string* CMsgMvMVictoryInfo::mutable_tour_name() {
  // @@protoc_insertion_point(field_mutable:CMsgMvMVictoryInfo.tour_name)
  return _internal_mutable_tour_name();
}
inline const std::string& CMsgMvMVictoryInfo::_internal_tour_name() const {
  return tour_name_.Get();
}
inline void CMsgMvMVictoryInfo::_internal_set_tour_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  tour_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgMvMVictoryInfo::_internal_mutable_tour_name() {
  _has_bits_[0] |= 0x00000001u;
  return tour_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgMvMVictoryInfo::release_tour_name() {
  // @@protoc_insertion_point(field_release:CMsgMvMVictoryInfo.tour_name)
  if (!_internal_has_tour_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return tour_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CMsgMvMVictoryInfo::set_allocated_tour_name(std::string* tour_name) {
  if (tour_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  tour_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tour_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CMsgMvMVictoryInfo.tour_name)
}

// optional string mission_name = 3;
inline bool CMsgMvMVictoryInfo::_internal_has_mission_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgMvMVictoryInfo::has_mission_name() const {
  return _internal_has_mission_name();
}
inline void CMsgMvMVictoryInfo::clear_mission_name() {
  mission_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgMvMVictoryInfo::mission_name() const {
  // @@protoc_insertion_point(field_get:CMsgMvMVictoryInfo.mission_name)
  return _internal_mission_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgMvMVictoryInfo::set_mission_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 mission_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgMvMVictoryInfo.mission_name)
}
inline std::string* CMsgMvMVictoryInfo::mutable_mission_name() {
  // @@protoc_insertion_point(field_mutable:CMsgMvMVictoryInfo.mission_name)
  return _internal_mutable_mission_name();
}
inline const std::string& CMsgMvMVictoryInfo::_internal_mission_name() const {
  return mission_name_.Get();
}
inline void CMsgMvMVictoryInfo::_internal_set_mission_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  mission_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgMvMVictoryInfo::_internal_mutable_mission_name() {
  _has_bits_[0] |= 0x00000002u;
  return mission_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgMvMVictoryInfo::release_mission_name() {
  // @@protoc_insertion_point(field_release:CMsgMvMVictoryInfo.mission_name)
  if (!_internal_has_mission_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return mission_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CMsgMvMVictoryInfo::set_allocated_mission_name(std::string* mission_name) {
  if (mission_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  mission_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mission_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CMsgMvMVictoryInfo.mission_name)
}

// -------------------------------------------------------------------

// CGCMsgTFHelloResponse

// optional uint32 version_check = 1;
inline bool CGCMsgTFHelloResponse::_internal_has_version_check() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGCMsgTFHelloResponse::has_version_check() const {
  return _internal_has_version_check();
}
inline void CGCMsgTFHelloResponse::clear_version_check() {
  version_check_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGCMsgTFHelloResponse::_internal_version_check() const {
  return version_check_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGCMsgTFHelloResponse::version_check() const {
  // @@protoc_insertion_point(field_get:CGCMsgTFHelloResponse.version_check)
  return _internal_version_check();
}
inline void CGCMsgTFHelloResponse::_internal_set_version_check(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  version_check_ = value;
}
inline void CGCMsgTFHelloResponse::set_version_check(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_version_check(value);
  // @@protoc_insertion_point(field_set:CGCMsgTFHelloResponse.version_check)
}

// repeated uint64 version_checksum = 2;
inline int CGCMsgTFHelloResponse::_internal_version_checksum_size() const {
  return version_checksum_.size();
}
inline int CGCMsgTFHelloResponse::version_checksum_size() const {
  return _internal_version_checksum_size();
}
inline void CGCMsgTFHelloResponse::clear_version_checksum() {
  version_checksum_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGCMsgTFHelloResponse::_internal_version_checksum(int index) const {
  return version_checksum_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGCMsgTFHelloResponse::version_checksum(int index) const {
  // @@protoc_insertion_point(field_get:CGCMsgTFHelloResponse.version_checksum)
  return _internal_version_checksum(index);
}
inline void CGCMsgTFHelloResponse::set_version_checksum(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  version_checksum_.Set(index, value);
  // @@protoc_insertion_point(field_set:CGCMsgTFHelloResponse.version_checksum)
}
inline void CGCMsgTFHelloResponse::_internal_add_version_checksum(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  version_checksum_.Add(value);
}
inline void CGCMsgTFHelloResponse::add_version_checksum(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_version_checksum(value);
  // @@protoc_insertion_point(field_add:CGCMsgTFHelloResponse.version_checksum)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
CGCMsgTFHelloResponse::_internal_version_checksum() const {
  return version_checksum_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
CGCMsgTFHelloResponse::version_checksum() const {
  // @@protoc_insertion_point(field_list:CGCMsgTFHelloResponse.version_checksum)
  return _internal_version_checksum();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
CGCMsgTFHelloResponse::_internal_mutable_version_checksum() {
  return &version_checksum_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
CGCMsgTFHelloResponse::mutable_version_checksum() {
  // @@protoc_insertion_point(field_mutable_list:CGCMsgTFHelloResponse.version_checksum)
  return _internal_mutable_version_checksum();
}

// optional uint32 version_verbose = 3;
inline bool CGCMsgTFHelloResponse::_internal_has_version_verbose() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CGCMsgTFHelloResponse::has_version_verbose() const {
  return _internal_has_version_verbose();
}
inline void CGCMsgTFHelloResponse::clear_version_verbose() {
  version_verbose_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGCMsgTFHelloResponse::_internal_version_verbose() const {
  return version_verbose_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGCMsgTFHelloResponse::version_verbose() const {
  // @@protoc_insertion_point(field_get:CGCMsgTFHelloResponse.version_verbose)
  return _internal_version_verbose();
}
inline void CGCMsgTFHelloResponse::_internal_set_version_verbose(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  version_verbose_ = value;
}
inline void CGCMsgTFHelloResponse::set_version_verbose(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_version_verbose(value);
  // @@protoc_insertion_point(field_set:CGCMsgTFHelloResponse.version_verbose)
}

// -------------------------------------------------------------------

// CGCMsgTFSync

// optional bytes version_checksum = 1;
inline bool CGCMsgTFSync::_internal_has_version_checksum() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGCMsgTFSync::has_version_checksum() const {
  return _internal_has_version_checksum();
}
inline void CGCMsgTFSync::clear_version_checksum() {
  version_checksum_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CGCMsgTFSync::version_checksum() const {
  // @@protoc_insertion_point(field_get:CGCMsgTFSync.version_checksum)
  return _internal_version_checksum();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CGCMsgTFSync::set_version_checksum(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 version_checksum_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CGCMsgTFSync.version_checksum)
}
inline std::string* CGCMsgTFSync::mutable_version_checksum() {
  // @@protoc_insertion_point(field_mutable:CGCMsgTFSync.version_checksum)
  return _internal_mutable_version_checksum();
}
inline const std::string& CGCMsgTFSync::_internal_version_checksum() const {
  return version_checksum_.Get();
}
inline void CGCMsgTFSync::_internal_set_version_checksum(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  version_checksum_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CGCMsgTFSync::_internal_mutable_version_checksum() {
  _has_bits_[0] |= 0x00000001u;
  return version_checksum_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CGCMsgTFSync::release_version_checksum() {
  // @@protoc_insertion_point(field_release:CGCMsgTFSync.version_checksum)
  if (!_internal_has_version_checksum()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return version_checksum_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CGCMsgTFSync::set_allocated_version_checksum(std::string* version_checksum) {
  if (version_checksum != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  version_checksum_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version_checksum,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CGCMsgTFSync.version_checksum)
}

// optional uint32 version_check = 2;
inline bool CGCMsgTFSync::_internal_has_version_check() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CGCMsgTFSync::has_version_check() const {
  return _internal_has_version_check();
}
inline void CGCMsgTFSync::clear_version_check() {
  version_check_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGCMsgTFSync::_internal_version_check() const {
  return version_check_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGCMsgTFSync::version_check() const {
  // @@protoc_insertion_point(field_get:CGCMsgTFSync.version_check)
  return _internal_version_check();
}
inline void CGCMsgTFSync::_internal_set_version_check(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  version_check_ = value;
}
inline void CGCMsgTFSync::set_version_check(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_version_check(value);
  // @@protoc_insertion_point(field_set:CGCMsgTFSync.version_check)
}

// optional uint32 version_check_ex = 3;
inline bool CGCMsgTFSync::_internal_has_version_check_ex() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CGCMsgTFSync::has_version_check_ex() const {
  return _internal_has_version_check_ex();
}
inline void CGCMsgTFSync::clear_version_check_ex() {
  version_check_ex_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGCMsgTFSync::_internal_version_check_ex() const {
  return version_check_ex_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGCMsgTFSync::version_check_ex() const {
  // @@protoc_insertion_point(field_get:CGCMsgTFSync.version_check_ex)
  return _internal_version_check_ex();
}
inline void CGCMsgTFSync::_internal_set_version_check_ex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  version_check_ex_ = value;
}
inline void CGCMsgTFSync::set_version_check_ex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_version_check_ex(value);
  // @@protoc_insertion_point(field_set:CGCMsgTFSync.version_check_ex)
}

// optional uint32 version_check_ex2 = 4;
inline bool CGCMsgTFSync::_internal_has_version_check_ex2() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CGCMsgTFSync::has_version_check_ex2() const {
  return _internal_has_version_check_ex2();
}
inline void CGCMsgTFSync::clear_version_check_ex2() {
  version_check_ex2_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGCMsgTFSync::_internal_version_check_ex2() const {
  return version_check_ex2_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGCMsgTFSync::version_check_ex2() const {
  // @@protoc_insertion_point(field_get:CGCMsgTFSync.version_check_ex2)
  return _internal_version_check_ex2();
}
inline void CGCMsgTFSync::_internal_set_version_check_ex2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  version_check_ex2_ = value;
}
inline void CGCMsgTFSync::set_version_check_ex2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_version_check_ex2(value);
  // @@protoc_insertion_point(field_set:CGCMsgTFSync.version_check_ex2)
}

// optional bytes version_checksum_ex = 5;
inline bool CGCMsgTFSync::_internal_has_version_checksum_ex() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CGCMsgTFSync::has_version_checksum_ex() const {
  return _internal_has_version_checksum_ex();
}
inline void CGCMsgTFSync::clear_version_checksum_ex() {
  version_checksum_ex_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CGCMsgTFSync::version_checksum_ex() const {
  // @@protoc_insertion_point(field_get:CGCMsgTFSync.version_checksum_ex)
  return _internal_version_checksum_ex();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CGCMsgTFSync::set_version_checksum_ex(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 version_checksum_ex_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CGCMsgTFSync.version_checksum_ex)
}
inline std::string* CGCMsgTFSync::mutable_version_checksum_ex() {
  // @@protoc_insertion_point(field_mutable:CGCMsgTFSync.version_checksum_ex)
  return _internal_mutable_version_checksum_ex();
}
inline const std::string& CGCMsgTFSync::_internal_version_checksum_ex() const {
  return version_checksum_ex_.Get();
}
inline void CGCMsgTFSync::_internal_set_version_checksum_ex(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  version_checksum_ex_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CGCMsgTFSync::_internal_mutable_version_checksum_ex() {
  _has_bits_[0] |= 0x00000002u;
  return version_checksum_ex_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CGCMsgTFSync::release_version_checksum_ex() {
  // @@protoc_insertion_point(field_release:CGCMsgTFSync.version_checksum_ex)
  if (!_internal_has_version_checksum_ex()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return version_checksum_ex_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CGCMsgTFSync::set_allocated_version_checksum_ex(std::string* version_checksum_ex) {
  if (version_checksum_ex != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  version_checksum_ex_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version_checksum_ex,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CGCMsgTFSync.version_checksum_ex)
}

// -------------------------------------------------------------------

// CGCMsgTFSyncEx

// optional string version_checksum = 1;
inline bool CGCMsgTFSyncEx::_internal_has_version_checksum() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGCMsgTFSyncEx::has_version_checksum() const {
  return _internal_has_version_checksum();
}
inline void CGCMsgTFSyncEx::clear_version_checksum() {
  version_checksum_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CGCMsgTFSyncEx::version_checksum() const {
  // @@protoc_insertion_point(field_get:CGCMsgTFSyncEx.version_checksum)
  return _internal_version_checksum();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CGCMsgTFSyncEx::set_version_checksum(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 version_checksum_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CGCMsgTFSyncEx.version_checksum)
}
inline std::string* CGCMsgTFSyncEx::mutable_version_checksum() {
  // @@protoc_insertion_point(field_mutable:CGCMsgTFSyncEx.version_checksum)
  return _internal_mutable_version_checksum();
}
inline const std::string& CGCMsgTFSyncEx::_internal_version_checksum() const {
  return version_checksum_.Get();
}
inline void CGCMsgTFSyncEx::_internal_set_version_checksum(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  version_checksum_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CGCMsgTFSyncEx::_internal_mutable_version_checksum() {
  _has_bits_[0] |= 0x00000001u;
  return version_checksum_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CGCMsgTFSyncEx::release_version_checksum() {
  // @@protoc_insertion_point(field_release:CGCMsgTFSyncEx.version_checksum)
  if (!_internal_has_version_checksum()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return version_checksum_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CGCMsgTFSyncEx::set_allocated_version_checksum(std::string* version_checksum) {
  if (version_checksum != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  version_checksum_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version_checksum,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CGCMsgTFSyncEx.version_checksum)
}

// optional bytes version_checksum_ex = 2;
inline bool CGCMsgTFSyncEx::_internal_has_version_checksum_ex() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CGCMsgTFSyncEx::has_version_checksum_ex() const {
  return _internal_has_version_checksum_ex();
}
inline void CGCMsgTFSyncEx::clear_version_checksum_ex() {
  version_checksum_ex_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CGCMsgTFSyncEx::version_checksum_ex() const {
  // @@protoc_insertion_point(field_get:CGCMsgTFSyncEx.version_checksum_ex)
  return _internal_version_checksum_ex();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CGCMsgTFSyncEx::set_version_checksum_ex(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 version_checksum_ex_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CGCMsgTFSyncEx.version_checksum_ex)
}
inline std::string* CGCMsgTFSyncEx::mutable_version_checksum_ex() {
  // @@protoc_insertion_point(field_mutable:CGCMsgTFSyncEx.version_checksum_ex)
  return _internal_mutable_version_checksum_ex();
}
inline const std::string& CGCMsgTFSyncEx::_internal_version_checksum_ex() const {
  return version_checksum_ex_.Get();
}
inline void CGCMsgTFSyncEx::_internal_set_version_checksum_ex(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  version_checksum_ex_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CGCMsgTFSyncEx::_internal_mutable_version_checksum_ex() {
  _has_bits_[0] |= 0x00000002u;
  return version_checksum_ex_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CGCMsgTFSyncEx::release_version_checksum_ex() {
  // @@protoc_insertion_point(field_release:CGCMsgTFSyncEx.version_checksum_ex)
  if (!_internal_has_version_checksum_ex()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return version_checksum_ex_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CGCMsgTFSyncEx::set_allocated_version_checksum_ex(std::string* version_checksum_ex) {
  if (version_checksum_ex != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  version_checksum_ex_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version_checksum_ex,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CGCMsgTFSyncEx.version_checksum_ex)
}

// optional uint32 version_check = 3;
inline bool CGCMsgTFSyncEx::_internal_has_version_check() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CGCMsgTFSyncEx::has_version_check() const {
  return _internal_has_version_check();
}
inline void CGCMsgTFSyncEx::clear_version_check() {
  version_check_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGCMsgTFSyncEx::_internal_version_check() const {
  return version_check_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGCMsgTFSyncEx::version_check() const {
  // @@protoc_insertion_point(field_get:CGCMsgTFSyncEx.version_check)
  return _internal_version_check();
}
inline void CGCMsgTFSyncEx::_internal_set_version_check(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  version_check_ = value;
}
inline void CGCMsgTFSyncEx::set_version_check(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_version_check(value);
  // @@protoc_insertion_point(field_set:CGCMsgTFSyncEx.version_check)
}

// -------------------------------------------------------------------

// CMsgMvMVictory_Player

// optional fixed64 steam_id = 1;
inline bool CMsgMvMVictory_Player::_internal_has_steam_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgMvMVictory_Player::has_steam_id() const {
  return _internal_has_steam_id();
}
inline void CMsgMvMVictory_Player::clear_steam_id() {
  steam_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgMvMVictory_Player::_internal_steam_id() const {
  return steam_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgMvMVictory_Player::steam_id() const {
  // @@protoc_insertion_point(field_get:CMsgMvMVictory.Player.steam_id)
  return _internal_steam_id();
}
inline void CMsgMvMVictory_Player::_internal_set_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  steam_id_ = value;
}
inline void CMsgMvMVictory_Player::set_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_steam_id(value);
  // @@protoc_insertion_point(field_set:CMsgMvMVictory.Player.steam_id)
}

// optional bool squad_surplus = 2;
inline bool CMsgMvMVictory_Player::_internal_has_squad_surplus() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgMvMVictory_Player::has_squad_surplus() const {
  return _internal_has_squad_surplus();
}
inline void CMsgMvMVictory_Player::clear_squad_surplus() {
  squad_surplus_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CMsgMvMVictory_Player::_internal_squad_surplus() const {
  return squad_surplus_;
}
inline bool CMsgMvMVictory_Player::squad_surplus() const {
  // @@protoc_insertion_point(field_get:CMsgMvMVictory.Player.squad_surplus)
  return _internal_squad_surplus();
}
inline void CMsgMvMVictory_Player::_internal_set_squad_surplus(bool value) {
  _has_bits_[0] |= 0x00000002u;
  squad_surplus_ = value;
}
inline void CMsgMvMVictory_Player::set_squad_surplus(bool value) {
  _internal_set_squad_surplus(value);
  // @@protoc_insertion_point(field_set:CMsgMvMVictory.Player.squad_surplus)
}

// -------------------------------------------------------------------

// CMsgMvMVictory

// optional uint32 legacy_mission_index = 1;
inline bool CMsgMvMVictory::_internal_has_legacy_mission_index() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgMvMVictory::has_legacy_mission_index() const {
  return _internal_has_legacy_mission_index();
}
inline void CMsgMvMVictory::clear_legacy_mission_index() {
  legacy_mission_index_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgMvMVictory::_internal_legacy_mission_index() const {
  return legacy_mission_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgMvMVictory::legacy_mission_index() const {
  // @@protoc_insertion_point(field_get:CMsgMvMVictory.legacy_mission_index)
  return _internal_legacy_mission_index();
}
inline void CMsgMvMVictory::_internal_set_legacy_mission_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  legacy_mission_index_ = value;
}
inline void CMsgMvMVictory::set_legacy_mission_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_legacy_mission_index(value);
  // @@protoc_insertion_point(field_set:CMsgMvMVictory.legacy_mission_index)
}

// optional string tour_name_mannup = 5;
inline bool CMsgMvMVictory::_internal_has_tour_name_mannup() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgMvMVictory::has_tour_name_mannup() const {
  return _internal_has_tour_name_mannup();
}
inline void CMsgMvMVictory::clear_tour_name_mannup() {
  tour_name_mannup_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgMvMVictory::tour_name_mannup() const {
  // @@protoc_insertion_point(field_get:CMsgMvMVictory.tour_name_mannup)
  return _internal_tour_name_mannup();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgMvMVictory::set_tour_name_mannup(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 tour_name_mannup_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgMvMVictory.tour_name_mannup)
}
inline std::string* CMsgMvMVictory::mutable_tour_name_mannup() {
  // @@protoc_insertion_point(field_mutable:CMsgMvMVictory.tour_name_mannup)
  return _internal_mutable_tour_name_mannup();
}
inline const std::string& CMsgMvMVictory::_internal_tour_name_mannup() const {
  return tour_name_mannup_.Get();
}
inline void CMsgMvMVictory::_internal_set_tour_name_mannup(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  tour_name_mannup_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgMvMVictory::_internal_mutable_tour_name_mannup() {
  _has_bits_[0] |= 0x00000001u;
  return tour_name_mannup_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgMvMVictory::release_tour_name_mannup() {
  // @@protoc_insertion_point(field_release:CMsgMvMVictory.tour_name_mannup)
  if (!_internal_has_tour_name_mannup()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return tour_name_mannup_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CMsgMvMVictory::set_allocated_tour_name_mannup(std::string* tour_name_mannup) {
  if (tour_name_mannup != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  tour_name_mannup_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tour_name_mannup,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CMsgMvMVictory.tour_name_mannup)
}

// optional string mission_name = 6;
inline bool CMsgMvMVictory::_internal_has_mission_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgMvMVictory::has_mission_name() const {
  return _internal_has_mission_name();
}
inline void CMsgMvMVictory::clear_mission_name() {
  mission_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgMvMVictory::mission_name() const {
  // @@protoc_insertion_point(field_get:CMsgMvMVictory.mission_name)
  return _internal_mission_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgMvMVictory::set_mission_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 mission_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgMvMVictory.mission_name)
}
inline std::string* CMsgMvMVictory::mutable_mission_name() {
  // @@protoc_insertion_point(field_mutable:CMsgMvMVictory.mission_name)
  return _internal_mutable_mission_name();
}
inline const std::string& CMsgMvMVictory::_internal_mission_name() const {
  return mission_name_.Get();
}
inline void CMsgMvMVictory::_internal_set_mission_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  mission_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgMvMVictory::_internal_mutable_mission_name() {
  _has_bits_[0] |= 0x00000002u;
  return mission_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgMvMVictory::release_mission_name() {
  // @@protoc_insertion_point(field_release:CMsgMvMVictory.mission_name)
  if (!_internal_has_mission_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return mission_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CMsgMvMVictory::set_allocated_mission_name(std::string* mission_name) {
  if (mission_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  mission_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mission_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CMsgMvMVictory.mission_name)
}

// repeated .CMsgMvMVictory.Player players = 2;
inline int CMsgMvMVictory::_internal_players_size() const {
  return players_.size();
}
inline int CMsgMvMVictory::players_size() const {
  return _internal_players_size();
}
inline void CMsgMvMVictory::clear_players() {
  players_.Clear();
}
inline ::CMsgMvMVictory_Player* CMsgMvMVictory::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgMvMVictory.players)
  return players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgMvMVictory_Player >*
CMsgMvMVictory::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:CMsgMvMVictory.players)
  return &players_;
}
inline const ::CMsgMvMVictory_Player& CMsgMvMVictory::_internal_players(int index) const {
  return players_.Get(index);
}
inline const ::CMsgMvMVictory_Player& CMsgMvMVictory::players(int index) const {
  // @@protoc_insertion_point(field_get:CMsgMvMVictory.players)
  return _internal_players(index);
}
inline ::CMsgMvMVictory_Player* CMsgMvMVictory::_internal_add_players() {
  return players_.Add();
}
inline ::CMsgMvMVictory_Player* CMsgMvMVictory::add_players() {
  // @@protoc_insertion_point(field_add:CMsgMvMVictory.players)
  return _internal_add_players();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgMvMVictory_Player >&
CMsgMvMVictory::players() const {
  // @@protoc_insertion_point(field_list:CMsgMvMVictory.players)
  return players_;
}

// optional uint64 lobby_id = 3;
inline bool CMsgMvMVictory::_internal_has_lobby_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgMvMVictory::has_lobby_id() const {
  return _internal_has_lobby_id();
}
inline void CMsgMvMVictory::clear_lobby_id() {
  lobby_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgMvMVictory::_internal_lobby_id() const {
  return lobby_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgMvMVictory::lobby_id() const {
  // @@protoc_insertion_point(field_get:CMsgMvMVictory.lobby_id)
  return _internal_lobby_id();
}
inline void CMsgMvMVictory::_internal_set_lobby_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  lobby_id_ = value;
}
inline void CMsgMvMVictory::set_lobby_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_lobby_id(value);
  // @@protoc_insertion_point(field_set:CMsgMvMVictory.lobby_id)
}

// optional fixed32 event_time = 4;
inline bool CMsgMvMVictory::_internal_has_event_time() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgMvMVictory::has_event_time() const {
  return _internal_has_event_time();
}
inline void CMsgMvMVictory::clear_event_time() {
  event_time_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgMvMVictory::_internal_event_time() const {
  return event_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgMvMVictory::event_time() const {
  // @@protoc_insertion_point(field_get:CMsgMvMVictory.event_time)
  return _internal_event_time();
}
inline void CMsgMvMVictory::_internal_set_event_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  event_time_ = value;
}
inline void CMsgMvMVictory::set_event_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_event_time(value);
  // @@protoc_insertion_point(field_set:CMsgMvMVictory.event_time)
}

// -------------------------------------------------------------------

// CMsgMvMMannUpVictoryReply

// -------------------------------------------------------------------

// CMsgGameServerKickingLobby

// optional uint64 lobby_id = 3;
inline bool CMsgGameServerKickingLobby::_internal_has_lobby_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGameServerKickingLobby::has_lobby_id() const {
  return _internal_has_lobby_id();
}
inline void CMsgGameServerKickingLobby::clear_lobby_id() {
  lobby_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGameServerKickingLobby::_internal_lobby_id() const {
  return lobby_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGameServerKickingLobby::lobby_id() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerKickingLobby.lobby_id)
  return _internal_lobby_id();
}
inline void CMsgGameServerKickingLobby::_internal_set_lobby_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  lobby_id_ = value;
}
inline void CMsgGameServerKickingLobby::set_lobby_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_lobby_id(value);
  // @@protoc_insertion_point(field_set:CMsgGameServerKickingLobby.lobby_id)
}

// optional uint64 match_id = 4;
inline bool CMsgGameServerKickingLobby::_internal_has_match_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGameServerKickingLobby::has_match_id() const {
  return _internal_has_match_id();
}
inline void CMsgGameServerKickingLobby::clear_match_id() {
  match_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGameServerKickingLobby::_internal_match_id() const {
  return match_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGameServerKickingLobby::match_id() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerKickingLobby.match_id)
  return _internal_match_id();
}
inline void CMsgGameServerKickingLobby::_internal_set_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  match_id_ = value;
}
inline void CMsgGameServerKickingLobby::set_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_match_id(value);
  // @@protoc_insertion_point(field_set:CMsgGameServerKickingLobby.match_id)
}

// -------------------------------------------------------------------

// CMsgGameServerKickingLobbyResponse

// -------------------------------------------------------------------

// CMsgLeaveGameAndPrepareToJoinParty

// optional fixed64 party_id = 1;
inline bool CMsgLeaveGameAndPrepareToJoinParty::_internal_has_party_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgLeaveGameAndPrepareToJoinParty::has_party_id() const {
  return _internal_has_party_id();
}
inline void CMsgLeaveGameAndPrepareToJoinParty::clear_party_id() {
  party_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgLeaveGameAndPrepareToJoinParty::_internal_party_id() const {
  return party_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgLeaveGameAndPrepareToJoinParty::party_id() const {
  // @@protoc_insertion_point(field_get:CMsgLeaveGameAndPrepareToJoinParty.party_id)
  return _internal_party_id();
}
inline void CMsgLeaveGameAndPrepareToJoinParty::_internal_set_party_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  party_id_ = value;
}
inline void CMsgLeaveGameAndPrepareToJoinParty::set_party_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_party_id(value);
  // @@protoc_insertion_point(field_set:CMsgLeaveGameAndPrepareToJoinParty.party_id)
}

// -------------------------------------------------------------------

// CMsgPlayerLeftMatch

// optional fixed64 steam_id = 1;
inline bool CMsgPlayerLeftMatch::_internal_has_steam_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgPlayerLeftMatch::has_steam_id() const {
  return _internal_has_steam_id();
}
inline void CMsgPlayerLeftMatch::clear_steam_id() {
  steam_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgPlayerLeftMatch::_internal_steam_id() const {
  return steam_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgPlayerLeftMatch::steam_id() const {
  // @@protoc_insertion_point(field_get:CMsgPlayerLeftMatch.steam_id)
  return _internal_steam_id();
}
inline void CMsgPlayerLeftMatch::_internal_set_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  steam_id_ = value;
}
inline void CMsgPlayerLeftMatch::set_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_steam_id(value);
  // @@protoc_insertion_point(field_set:CMsgPlayerLeftMatch.steam_id)
}

// optional .TFMatchLeaveReason leave_reason = 2 [default = TFMatchLeaveReason_UNSPECIFIED];
inline bool CMsgPlayerLeftMatch::_internal_has_leave_reason() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgPlayerLeftMatch::has_leave_reason() const {
  return _internal_has_leave_reason();
}
inline void CMsgPlayerLeftMatch::clear_leave_reason() {
  leave_reason_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::TFMatchLeaveReason CMsgPlayerLeftMatch::_internal_leave_reason() const {
  return static_cast< ::TFMatchLeaveReason >(leave_reason_);
}
inline ::TFMatchLeaveReason CMsgPlayerLeftMatch::leave_reason() const {
  // @@protoc_insertion_point(field_get:CMsgPlayerLeftMatch.leave_reason)
  return _internal_leave_reason();
}
inline void CMsgPlayerLeftMatch::_internal_set_leave_reason(::TFMatchLeaveReason value) {
  assert(::TFMatchLeaveReason_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  leave_reason_ = value;
}
inline void CMsgPlayerLeftMatch::set_leave_reason(::TFMatchLeaveReason value) {
  _internal_set_leave_reason(value);
  // @@protoc_insertion_point(field_set:CMsgPlayerLeftMatch.leave_reason)
}

// optional bool was_abandon = 3;
inline bool CMsgPlayerLeftMatch::_internal_has_was_abandon() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgPlayerLeftMatch::has_was_abandon() const {
  return _internal_has_was_abandon();
}
inline void CMsgPlayerLeftMatch::clear_was_abandon() {
  was_abandon_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CMsgPlayerLeftMatch::_internal_was_abandon() const {
  return was_abandon_;
}
inline bool CMsgPlayerLeftMatch::was_abandon() const {
  // @@protoc_insertion_point(field_get:CMsgPlayerLeftMatch.was_abandon)
  return _internal_was_abandon();
}
inline void CMsgPlayerLeftMatch::_internal_set_was_abandon(bool value) {
  _has_bits_[0] |= 0x00000004u;
  was_abandon_ = value;
}
inline void CMsgPlayerLeftMatch::set_was_abandon(bool value) {
  _internal_set_was_abandon(value);
  // @@protoc_insertion_point(field_set:CMsgPlayerLeftMatch.was_abandon)
}

// optional uint64 lobby_id = 4;
inline bool CMsgPlayerLeftMatch::_internal_has_lobby_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgPlayerLeftMatch::has_lobby_id() const {
  return _internal_has_lobby_id();
}
inline void CMsgPlayerLeftMatch::clear_lobby_id() {
  lobby_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgPlayerLeftMatch::_internal_lobby_id() const {
  return lobby_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgPlayerLeftMatch::lobby_id() const {
  // @@protoc_insertion_point(field_get:CMsgPlayerLeftMatch.lobby_id)
  return _internal_lobby_id();
}
inline void CMsgPlayerLeftMatch::_internal_set_lobby_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  lobby_id_ = value;
}
inline void CMsgPlayerLeftMatch::set_lobby_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_lobby_id(value);
  // @@protoc_insertion_point(field_set:CMsgPlayerLeftMatch.lobby_id)
}

// optional uint64 match_id = 5;
inline bool CMsgPlayerLeftMatch::_internal_has_match_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgPlayerLeftMatch::has_match_id() const {
  return _internal_has_match_id();
}
inline void CMsgPlayerLeftMatch::clear_match_id() {
  match_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgPlayerLeftMatch::_internal_match_id() const {
  return match_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgPlayerLeftMatch::match_id() const {
  // @@protoc_insertion_point(field_get:CMsgPlayerLeftMatch.match_id)
  return _internal_match_id();
}
inline void CMsgPlayerLeftMatch::_internal_set_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  match_id_ = value;
}
inline void CMsgPlayerLeftMatch::set_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_match_id(value);
  // @@protoc_insertion_point(field_set:CMsgPlayerLeftMatch.match_id)
}

// repeated .CMsgTFXPSource xp_breakdown = 6;
inline int CMsgPlayerLeftMatch::_internal_xp_breakdown_size() const {
  return xp_breakdown_.size();
}
inline int CMsgPlayerLeftMatch::xp_breakdown_size() const {
  return _internal_xp_breakdown_size();
}
inline void CMsgPlayerLeftMatch::clear_xp_breakdown() {
  xp_breakdown_.Clear();
}
inline ::CMsgTFXPSource* CMsgPlayerLeftMatch::mutable_xp_breakdown(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgPlayerLeftMatch.xp_breakdown)
  return xp_breakdown_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgTFXPSource >*
CMsgPlayerLeftMatch::mutable_xp_breakdown() {
  // @@protoc_insertion_point(field_mutable_list:CMsgPlayerLeftMatch.xp_breakdown)
  return &xp_breakdown_;
}
inline const ::CMsgTFXPSource& CMsgPlayerLeftMatch::_internal_xp_breakdown(int index) const {
  return xp_breakdown_.Get(index);
}
inline const ::CMsgTFXPSource& CMsgPlayerLeftMatch::xp_breakdown(int index) const {
  // @@protoc_insertion_point(field_get:CMsgPlayerLeftMatch.xp_breakdown)
  return _internal_xp_breakdown(index);
}
inline ::CMsgTFXPSource* CMsgPlayerLeftMatch::_internal_add_xp_breakdown() {
  return xp_breakdown_.Add();
}
inline ::CMsgTFXPSource* CMsgPlayerLeftMatch::add_xp_breakdown() {
  // @@protoc_insertion_point(field_add:CMsgPlayerLeftMatch.xp_breakdown)
  return _internal_add_xp_breakdown();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgTFXPSource >&
CMsgPlayerLeftMatch::xp_breakdown() const {
  // @@protoc_insertion_point(field_list:CMsgPlayerLeftMatch.xp_breakdown)
  return xp_breakdown_;
}

// -------------------------------------------------------------------

// CMsgPlayerLeftMatchResponse

// -------------------------------------------------------------------

// CMsgProcessMatchVoteKick_Vote

// optional fixed64 steam_id = 1;
inline bool CMsgProcessMatchVoteKick_Vote::_internal_has_steam_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgProcessMatchVoteKick_Vote::has_steam_id() const {
  return _internal_has_steam_id();
}
inline void CMsgProcessMatchVoteKick_Vote::clear_steam_id() {
  steam_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgProcessMatchVoteKick_Vote::_internal_steam_id() const {
  return steam_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgProcessMatchVoteKick_Vote::steam_id() const {
  // @@protoc_insertion_point(field_get:CMsgProcessMatchVoteKick.Vote.steam_id)
  return _internal_steam_id();
}
inline void CMsgProcessMatchVoteKick_Vote::_internal_set_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  steam_id_ = value;
}
inline void CMsgProcessMatchVoteKick_Vote::set_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_steam_id(value);
  // @@protoc_insertion_point(field_set:CMsgProcessMatchVoteKick.Vote.steam_id)
}

// optional bool vote_yay = 2;
inline bool CMsgProcessMatchVoteKick_Vote::_internal_has_vote_yay() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgProcessMatchVoteKick_Vote::has_vote_yay() const {
  return _internal_has_vote_yay();
}
inline void CMsgProcessMatchVoteKick_Vote::clear_vote_yay() {
  vote_yay_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CMsgProcessMatchVoteKick_Vote::_internal_vote_yay() const {
  return vote_yay_;
}
inline bool CMsgProcessMatchVoteKick_Vote::vote_yay() const {
  // @@protoc_insertion_point(field_get:CMsgProcessMatchVoteKick.Vote.vote_yay)
  return _internal_vote_yay();
}
inline void CMsgProcessMatchVoteKick_Vote::_internal_set_vote_yay(bool value) {
  _has_bits_[0] |= 0x00000002u;
  vote_yay_ = value;
}
inline void CMsgProcessMatchVoteKick_Vote::set_vote_yay(bool value) {
  _internal_set_vote_yay(value);
  // @@protoc_insertion_point(field_set:CMsgProcessMatchVoteKick.Vote.vote_yay)
}

// -------------------------------------------------------------------

// CMsgProcessMatchVoteKick

// optional fixed64 match_id = 1;
inline bool CMsgProcessMatchVoteKick::_internal_has_match_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgProcessMatchVoteKick::has_match_id() const {
  return _internal_has_match_id();
}
inline void CMsgProcessMatchVoteKick::clear_match_id() {
  match_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgProcessMatchVoteKick::_internal_match_id() const {
  return match_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgProcessMatchVoteKick::match_id() const {
  // @@protoc_insertion_point(field_get:CMsgProcessMatchVoteKick.match_id)
  return _internal_match_id();
}
inline void CMsgProcessMatchVoteKick::_internal_set_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  match_id_ = value;
}
inline void CMsgProcessMatchVoteKick::set_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_match_id(value);
  // @@protoc_insertion_point(field_set:CMsgProcessMatchVoteKick.match_id)
}

// optional fixed64 initiator_steam_id = 2;
inline bool CMsgProcessMatchVoteKick::_internal_has_initiator_steam_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgProcessMatchVoteKick::has_initiator_steam_id() const {
  return _internal_has_initiator_steam_id();
}
inline void CMsgProcessMatchVoteKick::clear_initiator_steam_id() {
  initiator_steam_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgProcessMatchVoteKick::_internal_initiator_steam_id() const {
  return initiator_steam_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgProcessMatchVoteKick::initiator_steam_id() const {
  // @@protoc_insertion_point(field_get:CMsgProcessMatchVoteKick.initiator_steam_id)
  return _internal_initiator_steam_id();
}
inline void CMsgProcessMatchVoteKick::_internal_set_initiator_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  initiator_steam_id_ = value;
}
inline void CMsgProcessMatchVoteKick::set_initiator_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_initiator_steam_id(value);
  // @@protoc_insertion_point(field_set:CMsgProcessMatchVoteKick.initiator_steam_id)
}

// optional fixed64 target_steam_id = 3;
inline bool CMsgProcessMatchVoteKick::_internal_has_target_steam_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgProcessMatchVoteKick::has_target_steam_id() const {
  return _internal_has_target_steam_id();
}
inline void CMsgProcessMatchVoteKick::clear_target_steam_id() {
  target_steam_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgProcessMatchVoteKick::_internal_target_steam_id() const {
  return target_steam_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgProcessMatchVoteKick::target_steam_id() const {
  // @@protoc_insertion_point(field_get:CMsgProcessMatchVoteKick.target_steam_id)
  return _internal_target_steam_id();
}
inline void CMsgProcessMatchVoteKick::_internal_set_target_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  target_steam_id_ = value;
}
inline void CMsgProcessMatchVoteKick::set_target_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_target_steam_id(value);
  // @@protoc_insertion_point(field_set:CMsgProcessMatchVoteKick.target_steam_id)
}

// optional .TFVoteKickReason reason = 4 [default = TFVoteKickReason_Other];
inline bool CMsgProcessMatchVoteKick::_internal_has_reason() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgProcessMatchVoteKick::has_reason() const {
  return _internal_has_reason();
}
inline void CMsgProcessMatchVoteKick::clear_reason() {
  reason_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::TFVoteKickReason CMsgProcessMatchVoteKick::_internal_reason() const {
  return static_cast< ::TFVoteKickReason >(reason_);
}
inline ::TFVoteKickReason CMsgProcessMatchVoteKick::reason() const {
  // @@protoc_insertion_point(field_get:CMsgProcessMatchVoteKick.reason)
  return _internal_reason();
}
inline void CMsgProcessMatchVoteKick::_internal_set_reason(::TFVoteKickReason value) {
  assert(::TFVoteKickReason_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  reason_ = value;
}
inline void CMsgProcessMatchVoteKick::set_reason(::TFVoteKickReason value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:CMsgProcessMatchVoteKick.reason)
}

// repeated .CMsgProcessMatchVoteKick.Vote votes = 5;
inline int CMsgProcessMatchVoteKick::_internal_votes_size() const {
  return votes_.size();
}
inline int CMsgProcessMatchVoteKick::votes_size() const {
  return _internal_votes_size();
}
inline void CMsgProcessMatchVoteKick::clear_votes() {
  votes_.Clear();
}
inline ::CMsgProcessMatchVoteKick_Vote* CMsgProcessMatchVoteKick::mutable_votes(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgProcessMatchVoteKick.votes)
  return votes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgProcessMatchVoteKick_Vote >*
CMsgProcessMatchVoteKick::mutable_votes() {
  // @@protoc_insertion_point(field_mutable_list:CMsgProcessMatchVoteKick.votes)
  return &votes_;
}
inline const ::CMsgProcessMatchVoteKick_Vote& CMsgProcessMatchVoteKick::_internal_votes(int index) const {
  return votes_.Get(index);
}
inline const ::CMsgProcessMatchVoteKick_Vote& CMsgProcessMatchVoteKick::votes(int index) const {
  // @@protoc_insertion_point(field_get:CMsgProcessMatchVoteKick.votes)
  return _internal_votes(index);
}
inline ::CMsgProcessMatchVoteKick_Vote* CMsgProcessMatchVoteKick::_internal_add_votes() {
  return votes_.Add();
}
inline ::CMsgProcessMatchVoteKick_Vote* CMsgProcessMatchVoteKick::add_votes() {
  // @@protoc_insertion_point(field_add:CMsgProcessMatchVoteKick.votes)
  return _internal_add_votes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgProcessMatchVoteKick_Vote >&
CMsgProcessMatchVoteKick::votes() const {
  // @@protoc_insertion_point(field_list:CMsgProcessMatchVoteKick.votes)
  return votes_;
}

// optional bool default_pass = 6;
inline bool CMsgProcessMatchVoteKick::_internal_has_default_pass() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgProcessMatchVoteKick::has_default_pass() const {
  return _internal_has_default_pass();
}
inline void CMsgProcessMatchVoteKick::clear_default_pass() {
  default_pass_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CMsgProcessMatchVoteKick::_internal_default_pass() const {
  return default_pass_;
}
inline bool CMsgProcessMatchVoteKick::default_pass() const {
  // @@protoc_insertion_point(field_get:CMsgProcessMatchVoteKick.default_pass)
  return _internal_default_pass();
}
inline void CMsgProcessMatchVoteKick::_internal_set_default_pass(bool value) {
  _has_bits_[0] |= 0x00000010u;
  default_pass_ = value;
}
inline void CMsgProcessMatchVoteKick::set_default_pass(bool value) {
  _internal_set_default_pass(value);
  // @@protoc_insertion_point(field_set:CMsgProcessMatchVoteKick.default_pass)
}

// -------------------------------------------------------------------

// CMsgProcessMatchVoteKickResponse

// optional bool rip = 1;
inline bool CMsgProcessMatchVoteKickResponse::_internal_has_rip() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgProcessMatchVoteKickResponse::has_rip() const {
  return _internal_has_rip();
}
inline void CMsgProcessMatchVoteKickResponse::clear_rip() {
  rip_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CMsgProcessMatchVoteKickResponse::_internal_rip() const {
  return rip_;
}
inline bool CMsgProcessMatchVoteKickResponse::rip() const {
  // @@protoc_insertion_point(field_get:CMsgProcessMatchVoteKickResponse.rip)
  return _internal_rip();
}
inline void CMsgProcessMatchVoteKickResponse::_internal_set_rip(bool value) {
  _has_bits_[0] |= 0x00000001u;
  rip_ = value;
}
inline void CMsgProcessMatchVoteKickResponse::set_rip(bool value) {
  _internal_set_rip(value);
  // @@protoc_insertion_point(field_set:CMsgProcessMatchVoteKickResponse.rip)
}

// -------------------------------------------------------------------

// CMsgPlayerVoteKickedAfterLeavingMatchResponse

// -------------------------------------------------------------------

// CMsgHalloween_ServerBossEvent

// optional uint32 event_counter = 1;
inline bool CMsgHalloween_ServerBossEvent::_internal_has_event_counter() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgHalloween_ServerBossEvent::has_event_counter() const {
  return _internal_has_event_counter();
}
inline void CMsgHalloween_ServerBossEvent::clear_event_counter() {
  event_counter_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgHalloween_ServerBossEvent::_internal_event_counter() const {
  return event_counter_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgHalloween_ServerBossEvent::event_counter() const {
  // @@protoc_insertion_point(field_get:CMsgHalloween_ServerBossEvent.event_counter)
  return _internal_event_counter();
}
inline void CMsgHalloween_ServerBossEvent::_internal_set_event_counter(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  event_counter_ = value;
}
inline void CMsgHalloween_ServerBossEvent::set_event_counter(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_event_counter(value);
  // @@protoc_insertion_point(field_set:CMsgHalloween_ServerBossEvent.event_counter)
}

// optional uint32 timestamp = 2;
inline bool CMsgHalloween_ServerBossEvent::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgHalloween_ServerBossEvent::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void CMsgHalloween_ServerBossEvent::clear_timestamp() {
  timestamp_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgHalloween_ServerBossEvent::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgHalloween_ServerBossEvent::timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgHalloween_ServerBossEvent.timestamp)
  return _internal_timestamp();
}
inline void CMsgHalloween_ServerBossEvent::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  timestamp_ = value;
}
inline void CMsgHalloween_ServerBossEvent::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:CMsgHalloween_ServerBossEvent.timestamp)
}

// optional uint32 boss_type = 3;
inline bool CMsgHalloween_ServerBossEvent::_internal_has_boss_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgHalloween_ServerBossEvent::has_boss_type() const {
  return _internal_has_boss_type();
}
inline void CMsgHalloween_ServerBossEvent::clear_boss_type() {
  boss_type_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgHalloween_ServerBossEvent::_internal_boss_type() const {
  return boss_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgHalloween_ServerBossEvent::boss_type() const {
  // @@protoc_insertion_point(field_get:CMsgHalloween_ServerBossEvent.boss_type)
  return _internal_boss_type();
}
inline void CMsgHalloween_ServerBossEvent::_internal_set_boss_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  boss_type_ = value;
}
inline void CMsgHalloween_ServerBossEvent::set_boss_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_boss_type(value);
  // @@protoc_insertion_point(field_set:CMsgHalloween_ServerBossEvent.boss_type)
}

// optional uint32 boss_level = 4;
inline bool CMsgHalloween_ServerBossEvent::_internal_has_boss_level() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgHalloween_ServerBossEvent::has_boss_level() const {
  return _internal_has_boss_level();
}
inline void CMsgHalloween_ServerBossEvent::clear_boss_level() {
  boss_level_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgHalloween_ServerBossEvent::_internal_boss_level() const {
  return boss_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgHalloween_ServerBossEvent::boss_level() const {
  // @@protoc_insertion_point(field_get:CMsgHalloween_ServerBossEvent.boss_level)
  return _internal_boss_level();
}
inline void CMsgHalloween_ServerBossEvent::_internal_set_boss_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  boss_level_ = value;
}
inline void CMsgHalloween_ServerBossEvent::set_boss_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_boss_level(value);
  // @@protoc_insertion_point(field_set:CMsgHalloween_ServerBossEvent.boss_level)
}

// optional uint32 event_type = 5;
inline bool CMsgHalloween_ServerBossEvent::_internal_has_event_type() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgHalloween_ServerBossEvent::has_event_type() const {
  return _internal_has_event_type();
}
inline void CMsgHalloween_ServerBossEvent::clear_event_type() {
  event_type_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgHalloween_ServerBossEvent::_internal_event_type() const {
  return event_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgHalloween_ServerBossEvent::event_type() const {
  // @@protoc_insertion_point(field_get:CMsgHalloween_ServerBossEvent.event_type)
  return _internal_event_type();
}
inline void CMsgHalloween_ServerBossEvent::_internal_set_event_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  event_type_ = value;
}
inline void CMsgHalloween_ServerBossEvent::set_event_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_event_type(value);
  // @@protoc_insertion_point(field_set:CMsgHalloween_ServerBossEvent.event_type)
}

// optional uint32 players_involved = 6;
inline bool CMsgHalloween_ServerBossEvent::_internal_has_players_involved() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgHalloween_ServerBossEvent::has_players_involved() const {
  return _internal_has_players_involved();
}
inline void CMsgHalloween_ServerBossEvent::clear_players_involved() {
  players_involved_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgHalloween_ServerBossEvent::_internal_players_involved() const {
  return players_involved_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgHalloween_ServerBossEvent::players_involved() const {
  // @@protoc_insertion_point(field_get:CMsgHalloween_ServerBossEvent.players_involved)
  return _internal_players_involved();
}
inline void CMsgHalloween_ServerBossEvent::_internal_set_players_involved(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  players_involved_ = value;
}
inline void CMsgHalloween_ServerBossEvent::set_players_involved(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_players_involved(value);
  // @@protoc_insertion_point(field_set:CMsgHalloween_ServerBossEvent.players_involved)
}

// optional float elapsed_time = 7;
inline bool CMsgHalloween_ServerBossEvent::_internal_has_elapsed_time() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgHalloween_ServerBossEvent::has_elapsed_time() const {
  return _internal_has_elapsed_time();
}
inline void CMsgHalloween_ServerBossEvent::clear_elapsed_time() {
  elapsed_time_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float CMsgHalloween_ServerBossEvent::_internal_elapsed_time() const {
  return elapsed_time_;
}
inline float CMsgHalloween_ServerBossEvent::elapsed_time() const {
  // @@protoc_insertion_point(field_get:CMsgHalloween_ServerBossEvent.elapsed_time)
  return _internal_elapsed_time();
}
inline void CMsgHalloween_ServerBossEvent::_internal_set_elapsed_time(float value) {
  _has_bits_[0] |= 0x00000040u;
  elapsed_time_ = value;
}
inline void CMsgHalloween_ServerBossEvent::set_elapsed_time(float value) {
  _internal_set_elapsed_time(value);
  // @@protoc_insertion_point(field_set:CMsgHalloween_ServerBossEvent.elapsed_time)
}

// -------------------------------------------------------------------

// CMsgHalloween_Merasmus2012

// optional uint32 event_counter = 1;
inline bool CMsgHalloween_Merasmus2012::_internal_has_event_counter() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgHalloween_Merasmus2012::has_event_counter() const {
  return _internal_has_event_counter();
}
inline void CMsgHalloween_Merasmus2012::clear_event_counter() {
  event_counter_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgHalloween_Merasmus2012::_internal_event_counter() const {
  return event_counter_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgHalloween_Merasmus2012::event_counter() const {
  // @@protoc_insertion_point(field_get:CMsgHalloween_Merasmus2012.event_counter)
  return _internal_event_counter();
}
inline void CMsgHalloween_Merasmus2012::_internal_set_event_counter(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  event_counter_ = value;
}
inline void CMsgHalloween_Merasmus2012::set_event_counter(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_event_counter(value);
  // @@protoc_insertion_point(field_set:CMsgHalloween_Merasmus2012.event_counter)
}

// optional fixed32 time_submitted = 2;
inline bool CMsgHalloween_Merasmus2012::_internal_has_time_submitted() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgHalloween_Merasmus2012::has_time_submitted() const {
  return _internal_has_time_submitted();
}
inline void CMsgHalloween_Merasmus2012::clear_time_submitted() {
  time_submitted_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgHalloween_Merasmus2012::_internal_time_submitted() const {
  return time_submitted_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgHalloween_Merasmus2012::time_submitted() const {
  // @@protoc_insertion_point(field_get:CMsgHalloween_Merasmus2012.time_submitted)
  return _internal_time_submitted();
}
inline void CMsgHalloween_Merasmus2012::_internal_set_time_submitted(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  time_submitted_ = value;
}
inline void CMsgHalloween_Merasmus2012::set_time_submitted(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_time_submitted(value);
  // @@protoc_insertion_point(field_set:CMsgHalloween_Merasmus2012.time_submitted)
}

// optional bool is_valve_server = 3;
inline bool CMsgHalloween_Merasmus2012::_internal_has_is_valve_server() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgHalloween_Merasmus2012::has_is_valve_server() const {
  return _internal_has_is_valve_server();
}
inline void CMsgHalloween_Merasmus2012::clear_is_valve_server() {
  is_valve_server_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CMsgHalloween_Merasmus2012::_internal_is_valve_server() const {
  return is_valve_server_;
}
inline bool CMsgHalloween_Merasmus2012::is_valve_server() const {
  // @@protoc_insertion_point(field_get:CMsgHalloween_Merasmus2012.is_valve_server)
  return _internal_is_valve_server();
}
inline void CMsgHalloween_Merasmus2012::_internal_set_is_valve_server(bool value) {
  _has_bits_[0] |= 0x00000004u;
  is_valve_server_ = value;
}
inline void CMsgHalloween_Merasmus2012::set_is_valve_server(bool value) {
  _internal_set_is_valve_server(value);
  // @@protoc_insertion_point(field_set:CMsgHalloween_Merasmus2012.is_valve_server)
}

// optional uint32 boss_level = 4;
inline bool CMsgHalloween_Merasmus2012::_internal_has_boss_level() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgHalloween_Merasmus2012::has_boss_level() const {
  return _internal_has_boss_level();
}
inline void CMsgHalloween_Merasmus2012::clear_boss_level() {
  boss_level_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgHalloween_Merasmus2012::_internal_boss_level() const {
  return boss_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgHalloween_Merasmus2012::boss_level() const {
  // @@protoc_insertion_point(field_get:CMsgHalloween_Merasmus2012.boss_level)
  return _internal_boss_level();
}
inline void CMsgHalloween_Merasmus2012::_internal_set_boss_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  boss_level_ = value;
}
inline void CMsgHalloween_Merasmus2012::set_boss_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_boss_level(value);
  // @@protoc_insertion_point(field_set:CMsgHalloween_Merasmus2012.boss_level)
}

// optional uint32 spawned_health = 5;
inline bool CMsgHalloween_Merasmus2012::_internal_has_spawned_health() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgHalloween_Merasmus2012::has_spawned_health() const {
  return _internal_has_spawned_health();
}
inline void CMsgHalloween_Merasmus2012::clear_spawned_health() {
  spawned_health_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgHalloween_Merasmus2012::_internal_spawned_health() const {
  return spawned_health_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgHalloween_Merasmus2012::spawned_health() const {
  // @@protoc_insertion_point(field_get:CMsgHalloween_Merasmus2012.spawned_health)
  return _internal_spawned_health();
}
inline void CMsgHalloween_Merasmus2012::_internal_set_spawned_health(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  spawned_health_ = value;
}
inline void CMsgHalloween_Merasmus2012::set_spawned_health(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_spawned_health(value);
  // @@protoc_insertion_point(field_set:CMsgHalloween_Merasmus2012.spawned_health)
}

// optional uint32 remaining_health = 6;
inline bool CMsgHalloween_Merasmus2012::_internal_has_remaining_health() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgHalloween_Merasmus2012::has_remaining_health() const {
  return _internal_has_remaining_health();
}
inline void CMsgHalloween_Merasmus2012::clear_remaining_health() {
  remaining_health_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgHalloween_Merasmus2012::_internal_remaining_health() const {
  return remaining_health_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgHalloween_Merasmus2012::remaining_health() const {
  // @@protoc_insertion_point(field_get:CMsgHalloween_Merasmus2012.remaining_health)
  return _internal_remaining_health();
}
inline void CMsgHalloween_Merasmus2012::_internal_set_remaining_health(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  remaining_health_ = value;
}
inline void CMsgHalloween_Merasmus2012::set_remaining_health(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_remaining_health(value);
  // @@protoc_insertion_point(field_set:CMsgHalloween_Merasmus2012.remaining_health)
}

// optional uint32 life_time = 7;
inline bool CMsgHalloween_Merasmus2012::_internal_has_life_time() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgHalloween_Merasmus2012::has_life_time() const {
  return _internal_has_life_time();
}
inline void CMsgHalloween_Merasmus2012::clear_life_time() {
  life_time_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgHalloween_Merasmus2012::_internal_life_time() const {
  return life_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgHalloween_Merasmus2012::life_time() const {
  // @@protoc_insertion_point(field_get:CMsgHalloween_Merasmus2012.life_time)
  return _internal_life_time();
}
inline void CMsgHalloween_Merasmus2012::_internal_set_life_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  life_time_ = value;
}
inline void CMsgHalloween_Merasmus2012::set_life_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_life_time(value);
  // @@protoc_insertion_point(field_set:CMsgHalloween_Merasmus2012.life_time)
}

// optional uint32 bomb_kills = 8;
inline bool CMsgHalloween_Merasmus2012::_internal_has_bomb_kills() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgHalloween_Merasmus2012::has_bomb_kills() const {
  return _internal_has_bomb_kills();
}
inline void CMsgHalloween_Merasmus2012::clear_bomb_kills() {
  bomb_kills_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgHalloween_Merasmus2012::_internal_bomb_kills() const {
  return bomb_kills_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgHalloween_Merasmus2012::bomb_kills() const {
  // @@protoc_insertion_point(field_get:CMsgHalloween_Merasmus2012.bomb_kills)
  return _internal_bomb_kills();
}
inline void CMsgHalloween_Merasmus2012::_internal_set_bomb_kills(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  bomb_kills_ = value;
}
inline void CMsgHalloween_Merasmus2012::set_bomb_kills(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_bomb_kills(value);
  // @@protoc_insertion_point(field_set:CMsgHalloween_Merasmus2012.bomb_kills)
}

// optional uint32 staff_kills = 9;
inline bool CMsgHalloween_Merasmus2012::_internal_has_staff_kills() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgHalloween_Merasmus2012::has_staff_kills() const {
  return _internal_has_staff_kills();
}
inline void CMsgHalloween_Merasmus2012::clear_staff_kills() {
  staff_kills_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgHalloween_Merasmus2012::_internal_staff_kills() const {
  return staff_kills_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgHalloween_Merasmus2012::staff_kills() const {
  // @@protoc_insertion_point(field_get:CMsgHalloween_Merasmus2012.staff_kills)
  return _internal_staff_kills();
}
inline void CMsgHalloween_Merasmus2012::_internal_set_staff_kills(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  staff_kills_ = value;
}
inline void CMsgHalloween_Merasmus2012::set_staff_kills(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_staff_kills(value);
  // @@protoc_insertion_point(field_set:CMsgHalloween_Merasmus2012.staff_kills)
}

// optional uint32 pvp_kills = 10;
inline bool CMsgHalloween_Merasmus2012::_internal_has_pvp_kills() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgHalloween_Merasmus2012::has_pvp_kills() const {
  return _internal_has_pvp_kills();
}
inline void CMsgHalloween_Merasmus2012::clear_pvp_kills() {
  pvp_kills_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgHalloween_Merasmus2012::_internal_pvp_kills() const {
  return pvp_kills_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgHalloween_Merasmus2012::pvp_kills() const {
  // @@protoc_insertion_point(field_get:CMsgHalloween_Merasmus2012.pvp_kills)
  return _internal_pvp_kills();
}
inline void CMsgHalloween_Merasmus2012::_internal_set_pvp_kills(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  pvp_kills_ = value;
}
inline void CMsgHalloween_Merasmus2012::set_pvp_kills(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pvp_kills(value);
  // @@protoc_insertion_point(field_set:CMsgHalloween_Merasmus2012.pvp_kills)
}

// optional uint32 prophunt_time1 = 11;
inline bool CMsgHalloween_Merasmus2012::_internal_has_prophunt_time1() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgHalloween_Merasmus2012::has_prophunt_time1() const {
  return _internal_has_prophunt_time1();
}
inline void CMsgHalloween_Merasmus2012::clear_prophunt_time1() {
  prophunt_time1_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgHalloween_Merasmus2012::_internal_prophunt_time1() const {
  return prophunt_time1_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgHalloween_Merasmus2012::prophunt_time1() const {
  // @@protoc_insertion_point(field_get:CMsgHalloween_Merasmus2012.prophunt_time1)
  return _internal_prophunt_time1();
}
inline void CMsgHalloween_Merasmus2012::_internal_set_prophunt_time1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  prophunt_time1_ = value;
}
inline void CMsgHalloween_Merasmus2012::set_prophunt_time1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_prophunt_time1(value);
  // @@protoc_insertion_point(field_set:CMsgHalloween_Merasmus2012.prophunt_time1)
}

// optional uint32 prophunt_time2 = 12;
inline bool CMsgHalloween_Merasmus2012::_internal_has_prophunt_time2() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CMsgHalloween_Merasmus2012::has_prophunt_time2() const {
  return _internal_has_prophunt_time2();
}
inline void CMsgHalloween_Merasmus2012::clear_prophunt_time2() {
  prophunt_time2_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgHalloween_Merasmus2012::_internal_prophunt_time2() const {
  return prophunt_time2_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgHalloween_Merasmus2012::prophunt_time2() const {
  // @@protoc_insertion_point(field_get:CMsgHalloween_Merasmus2012.prophunt_time2)
  return _internal_prophunt_time2();
}
inline void CMsgHalloween_Merasmus2012::_internal_set_prophunt_time2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  prophunt_time2_ = value;
}
inline void CMsgHalloween_Merasmus2012::set_prophunt_time2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_prophunt_time2(value);
  // @@protoc_insertion_point(field_set:CMsgHalloween_Merasmus2012.prophunt_time2)
}

// optional uint32 dmg_scout = 13;
inline bool CMsgHalloween_Merasmus2012::_internal_has_dmg_scout() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CMsgHalloween_Merasmus2012::has_dmg_scout() const {
  return _internal_has_dmg_scout();
}
inline void CMsgHalloween_Merasmus2012::clear_dmg_scout() {
  dmg_scout_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgHalloween_Merasmus2012::_internal_dmg_scout() const {
  return dmg_scout_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgHalloween_Merasmus2012::dmg_scout() const {
  // @@protoc_insertion_point(field_get:CMsgHalloween_Merasmus2012.dmg_scout)
  return _internal_dmg_scout();
}
inline void CMsgHalloween_Merasmus2012::_internal_set_dmg_scout(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  dmg_scout_ = value;
}
inline void CMsgHalloween_Merasmus2012::set_dmg_scout(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_dmg_scout(value);
  // @@protoc_insertion_point(field_set:CMsgHalloween_Merasmus2012.dmg_scout)
}

// optional uint32 dmg_sniper = 14;
inline bool CMsgHalloween_Merasmus2012::_internal_has_dmg_sniper() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CMsgHalloween_Merasmus2012::has_dmg_sniper() const {
  return _internal_has_dmg_sniper();
}
inline void CMsgHalloween_Merasmus2012::clear_dmg_sniper() {
  dmg_sniper_ = 0u;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgHalloween_Merasmus2012::_internal_dmg_sniper() const {
  return dmg_sniper_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgHalloween_Merasmus2012::dmg_sniper() const {
  // @@protoc_insertion_point(field_get:CMsgHalloween_Merasmus2012.dmg_sniper)
  return _internal_dmg_sniper();
}
inline void CMsgHalloween_Merasmus2012::_internal_set_dmg_sniper(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00002000u;
  dmg_sniper_ = value;
}
inline void CMsgHalloween_Merasmus2012::set_dmg_sniper(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_dmg_sniper(value);
  // @@protoc_insertion_point(field_set:CMsgHalloween_Merasmus2012.dmg_sniper)
}

// optional uint32 dmg_soldier = 15;
inline bool CMsgHalloween_Merasmus2012::_internal_has_dmg_soldier() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CMsgHalloween_Merasmus2012::has_dmg_soldier() const {
  return _internal_has_dmg_soldier();
}
inline void CMsgHalloween_Merasmus2012::clear_dmg_soldier() {
  dmg_soldier_ = 0u;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgHalloween_Merasmus2012::_internal_dmg_soldier() const {
  return dmg_soldier_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgHalloween_Merasmus2012::dmg_soldier() const {
  // @@protoc_insertion_point(field_get:CMsgHalloween_Merasmus2012.dmg_soldier)
  return _internal_dmg_soldier();
}
inline void CMsgHalloween_Merasmus2012::_internal_set_dmg_soldier(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00004000u;
  dmg_soldier_ = value;
}
inline void CMsgHalloween_Merasmus2012::set_dmg_soldier(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_dmg_soldier(value);
  // @@protoc_insertion_point(field_set:CMsgHalloween_Merasmus2012.dmg_soldier)
}

// optional uint32 dmg_demo = 16;
inline bool CMsgHalloween_Merasmus2012::_internal_has_dmg_demo() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CMsgHalloween_Merasmus2012::has_dmg_demo() const {
  return _internal_has_dmg_demo();
}
inline void CMsgHalloween_Merasmus2012::clear_dmg_demo() {
  dmg_demo_ = 0u;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgHalloween_Merasmus2012::_internal_dmg_demo() const {
  return dmg_demo_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgHalloween_Merasmus2012::dmg_demo() const {
  // @@protoc_insertion_point(field_get:CMsgHalloween_Merasmus2012.dmg_demo)
  return _internal_dmg_demo();
}
inline void CMsgHalloween_Merasmus2012::_internal_set_dmg_demo(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00008000u;
  dmg_demo_ = value;
}
inline void CMsgHalloween_Merasmus2012::set_dmg_demo(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_dmg_demo(value);
  // @@protoc_insertion_point(field_set:CMsgHalloween_Merasmus2012.dmg_demo)
}

// optional uint32 dmg_medic = 17;
inline bool CMsgHalloween_Merasmus2012::_internal_has_dmg_medic() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool CMsgHalloween_Merasmus2012::has_dmg_medic() const {
  return _internal_has_dmg_medic();
}
inline void CMsgHalloween_Merasmus2012::clear_dmg_medic() {
  dmg_medic_ = 0u;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgHalloween_Merasmus2012::_internal_dmg_medic() const {
  return dmg_medic_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgHalloween_Merasmus2012::dmg_medic() const {
  // @@protoc_insertion_point(field_get:CMsgHalloween_Merasmus2012.dmg_medic)
  return _internal_dmg_medic();
}
inline void CMsgHalloween_Merasmus2012::_internal_set_dmg_medic(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00010000u;
  dmg_medic_ = value;
}
inline void CMsgHalloween_Merasmus2012::set_dmg_medic(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_dmg_medic(value);
  // @@protoc_insertion_point(field_set:CMsgHalloween_Merasmus2012.dmg_medic)
}

// optional uint32 dmg_heavy = 18;
inline bool CMsgHalloween_Merasmus2012::_internal_has_dmg_heavy() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool CMsgHalloween_Merasmus2012::has_dmg_heavy() const {
  return _internal_has_dmg_heavy();
}
inline void CMsgHalloween_Merasmus2012::clear_dmg_heavy() {
  dmg_heavy_ = 0u;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgHalloween_Merasmus2012::_internal_dmg_heavy() const {
  return dmg_heavy_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgHalloween_Merasmus2012::dmg_heavy() const {
  // @@protoc_insertion_point(field_get:CMsgHalloween_Merasmus2012.dmg_heavy)
  return _internal_dmg_heavy();
}
inline void CMsgHalloween_Merasmus2012::_internal_set_dmg_heavy(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00020000u;
  dmg_heavy_ = value;
}
inline void CMsgHalloween_Merasmus2012::set_dmg_heavy(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_dmg_heavy(value);
  // @@protoc_insertion_point(field_set:CMsgHalloween_Merasmus2012.dmg_heavy)
}

// optional uint32 dmg_pyro = 19;
inline bool CMsgHalloween_Merasmus2012::_internal_has_dmg_pyro() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool CMsgHalloween_Merasmus2012::has_dmg_pyro() const {
  return _internal_has_dmg_pyro();
}
inline void CMsgHalloween_Merasmus2012::clear_dmg_pyro() {
  dmg_pyro_ = 0u;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgHalloween_Merasmus2012::_internal_dmg_pyro() const {
  return dmg_pyro_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgHalloween_Merasmus2012::dmg_pyro() const {
  // @@protoc_insertion_point(field_get:CMsgHalloween_Merasmus2012.dmg_pyro)
  return _internal_dmg_pyro();
}
inline void CMsgHalloween_Merasmus2012::_internal_set_dmg_pyro(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00040000u;
  dmg_pyro_ = value;
}
inline void CMsgHalloween_Merasmus2012::set_dmg_pyro(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_dmg_pyro(value);
  // @@protoc_insertion_point(field_set:CMsgHalloween_Merasmus2012.dmg_pyro)
}

// optional uint32 dmg_spy = 20;
inline bool CMsgHalloween_Merasmus2012::_internal_has_dmg_spy() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool CMsgHalloween_Merasmus2012::has_dmg_spy() const {
  return _internal_has_dmg_spy();
}
inline void CMsgHalloween_Merasmus2012::clear_dmg_spy() {
  dmg_spy_ = 0u;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgHalloween_Merasmus2012::_internal_dmg_spy() const {
  return dmg_spy_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgHalloween_Merasmus2012::dmg_spy() const {
  // @@protoc_insertion_point(field_get:CMsgHalloween_Merasmus2012.dmg_spy)
  return _internal_dmg_spy();
}
inline void CMsgHalloween_Merasmus2012::_internal_set_dmg_spy(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00080000u;
  dmg_spy_ = value;
}
inline void CMsgHalloween_Merasmus2012::set_dmg_spy(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_dmg_spy(value);
  // @@protoc_insertion_point(field_set:CMsgHalloween_Merasmus2012.dmg_spy)
}

// optional uint32 dmg_engineer = 21;
inline bool CMsgHalloween_Merasmus2012::_internal_has_dmg_engineer() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool CMsgHalloween_Merasmus2012::has_dmg_engineer() const {
  return _internal_has_dmg_engineer();
}
inline void CMsgHalloween_Merasmus2012::clear_dmg_engineer() {
  dmg_engineer_ = 0u;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgHalloween_Merasmus2012::_internal_dmg_engineer() const {
  return dmg_engineer_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgHalloween_Merasmus2012::dmg_engineer() const {
  // @@protoc_insertion_point(field_get:CMsgHalloween_Merasmus2012.dmg_engineer)
  return _internal_dmg_engineer();
}
inline void CMsgHalloween_Merasmus2012::_internal_set_dmg_engineer(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00100000u;
  dmg_engineer_ = value;
}
inline void CMsgHalloween_Merasmus2012::set_dmg_engineer(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_dmg_engineer(value);
  // @@protoc_insertion_point(field_set:CMsgHalloween_Merasmus2012.dmg_engineer)
}

// optional uint32 scout_count = 22;
inline bool CMsgHalloween_Merasmus2012::_internal_has_scout_count() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool CMsgHalloween_Merasmus2012::has_scout_count() const {
  return _internal_has_scout_count();
}
inline void CMsgHalloween_Merasmus2012::clear_scout_count() {
  scout_count_ = 0u;
  _has_bits_[0] &= ~0x00200000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgHalloween_Merasmus2012::_internal_scout_count() const {
  return scout_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgHalloween_Merasmus2012::scout_count() const {
  // @@protoc_insertion_point(field_get:CMsgHalloween_Merasmus2012.scout_count)
  return _internal_scout_count();
}
inline void CMsgHalloween_Merasmus2012::_internal_set_scout_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00200000u;
  scout_count_ = value;
}
inline void CMsgHalloween_Merasmus2012::set_scout_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_scout_count(value);
  // @@protoc_insertion_point(field_set:CMsgHalloween_Merasmus2012.scout_count)
}

// optional uint32 sniper_count = 23;
inline bool CMsgHalloween_Merasmus2012::_internal_has_sniper_count() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool CMsgHalloween_Merasmus2012::has_sniper_count() const {
  return _internal_has_sniper_count();
}
inline void CMsgHalloween_Merasmus2012::clear_sniper_count() {
  sniper_count_ = 0u;
  _has_bits_[0] &= ~0x00400000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgHalloween_Merasmus2012::_internal_sniper_count() const {
  return sniper_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgHalloween_Merasmus2012::sniper_count() const {
  // @@protoc_insertion_point(field_get:CMsgHalloween_Merasmus2012.sniper_count)
  return _internal_sniper_count();
}
inline void CMsgHalloween_Merasmus2012::_internal_set_sniper_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00400000u;
  sniper_count_ = value;
}
inline void CMsgHalloween_Merasmus2012::set_sniper_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sniper_count(value);
  // @@protoc_insertion_point(field_set:CMsgHalloween_Merasmus2012.sniper_count)
}

// optional uint32 solider_count = 24;
inline bool CMsgHalloween_Merasmus2012::_internal_has_solider_count() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool CMsgHalloween_Merasmus2012::has_solider_count() const {
  return _internal_has_solider_count();
}
inline void CMsgHalloween_Merasmus2012::clear_solider_count() {
  solider_count_ = 0u;
  _has_bits_[0] &= ~0x00800000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgHalloween_Merasmus2012::_internal_solider_count() const {
  return solider_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgHalloween_Merasmus2012::solider_count() const {
  // @@protoc_insertion_point(field_get:CMsgHalloween_Merasmus2012.solider_count)
  return _internal_solider_count();
}
inline void CMsgHalloween_Merasmus2012::_internal_set_solider_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00800000u;
  solider_count_ = value;
}
inline void CMsgHalloween_Merasmus2012::set_solider_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_solider_count(value);
  // @@protoc_insertion_point(field_set:CMsgHalloween_Merasmus2012.solider_count)
}

// optional uint32 demo_count = 25;
inline bool CMsgHalloween_Merasmus2012::_internal_has_demo_count() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool CMsgHalloween_Merasmus2012::has_demo_count() const {
  return _internal_has_demo_count();
}
inline void CMsgHalloween_Merasmus2012::clear_demo_count() {
  demo_count_ = 0u;
  _has_bits_[0] &= ~0x01000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgHalloween_Merasmus2012::_internal_demo_count() const {
  return demo_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgHalloween_Merasmus2012::demo_count() const {
  // @@protoc_insertion_point(field_get:CMsgHalloween_Merasmus2012.demo_count)
  return _internal_demo_count();
}
inline void CMsgHalloween_Merasmus2012::_internal_set_demo_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x01000000u;
  demo_count_ = value;
}
inline void CMsgHalloween_Merasmus2012::set_demo_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_demo_count(value);
  // @@protoc_insertion_point(field_set:CMsgHalloween_Merasmus2012.demo_count)
}

// optional uint32 medic_count = 26;
inline bool CMsgHalloween_Merasmus2012::_internal_has_medic_count() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool CMsgHalloween_Merasmus2012::has_medic_count() const {
  return _internal_has_medic_count();
}
inline void CMsgHalloween_Merasmus2012::clear_medic_count() {
  medic_count_ = 0u;
  _has_bits_[0] &= ~0x02000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgHalloween_Merasmus2012::_internal_medic_count() const {
  return medic_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgHalloween_Merasmus2012::medic_count() const {
  // @@protoc_insertion_point(field_get:CMsgHalloween_Merasmus2012.medic_count)
  return _internal_medic_count();
}
inline void CMsgHalloween_Merasmus2012::_internal_set_medic_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x02000000u;
  medic_count_ = value;
}
inline void CMsgHalloween_Merasmus2012::set_medic_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_medic_count(value);
  // @@protoc_insertion_point(field_set:CMsgHalloween_Merasmus2012.medic_count)
}

// optional uint32 heavy_count = 27;
inline bool CMsgHalloween_Merasmus2012::_internal_has_heavy_count() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool CMsgHalloween_Merasmus2012::has_heavy_count() const {
  return _internal_has_heavy_count();
}
inline void CMsgHalloween_Merasmus2012::clear_heavy_count() {
  heavy_count_ = 0u;
  _has_bits_[0] &= ~0x04000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgHalloween_Merasmus2012::_internal_heavy_count() const {
  return heavy_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgHalloween_Merasmus2012::heavy_count() const {
  // @@protoc_insertion_point(field_get:CMsgHalloween_Merasmus2012.heavy_count)
  return _internal_heavy_count();
}
inline void CMsgHalloween_Merasmus2012::_internal_set_heavy_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x04000000u;
  heavy_count_ = value;
}
inline void CMsgHalloween_Merasmus2012::set_heavy_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_heavy_count(value);
  // @@protoc_insertion_point(field_set:CMsgHalloween_Merasmus2012.heavy_count)
}

// optional uint32 pyro_count = 28;
inline bool CMsgHalloween_Merasmus2012::_internal_has_pyro_count() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool CMsgHalloween_Merasmus2012::has_pyro_count() const {
  return _internal_has_pyro_count();
}
inline void CMsgHalloween_Merasmus2012::clear_pyro_count() {
  pyro_count_ = 0u;
  _has_bits_[0] &= ~0x08000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgHalloween_Merasmus2012::_internal_pyro_count() const {
  return pyro_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgHalloween_Merasmus2012::pyro_count() const {
  // @@protoc_insertion_point(field_get:CMsgHalloween_Merasmus2012.pyro_count)
  return _internal_pyro_count();
}
inline void CMsgHalloween_Merasmus2012::_internal_set_pyro_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x08000000u;
  pyro_count_ = value;
}
inline void CMsgHalloween_Merasmus2012::set_pyro_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pyro_count(value);
  // @@protoc_insertion_point(field_set:CMsgHalloween_Merasmus2012.pyro_count)
}

// optional uint32 spy_count = 29;
inline bool CMsgHalloween_Merasmus2012::_internal_has_spy_count() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool CMsgHalloween_Merasmus2012::has_spy_count() const {
  return _internal_has_spy_count();
}
inline void CMsgHalloween_Merasmus2012::clear_spy_count() {
  spy_count_ = 0u;
  _has_bits_[0] &= ~0x10000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgHalloween_Merasmus2012::_internal_spy_count() const {
  return spy_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgHalloween_Merasmus2012::spy_count() const {
  // @@protoc_insertion_point(field_get:CMsgHalloween_Merasmus2012.spy_count)
  return _internal_spy_count();
}
inline void CMsgHalloween_Merasmus2012::_internal_set_spy_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x10000000u;
  spy_count_ = value;
}
inline void CMsgHalloween_Merasmus2012::set_spy_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_spy_count(value);
  // @@protoc_insertion_point(field_set:CMsgHalloween_Merasmus2012.spy_count)
}

// optional uint32 engineer_count = 30;
inline bool CMsgHalloween_Merasmus2012::_internal_has_engineer_count() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool CMsgHalloween_Merasmus2012::has_engineer_count() const {
  return _internal_has_engineer_count();
}
inline void CMsgHalloween_Merasmus2012::clear_engineer_count() {
  engineer_count_ = 0u;
  _has_bits_[0] &= ~0x20000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgHalloween_Merasmus2012::_internal_engineer_count() const {
  return engineer_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgHalloween_Merasmus2012::engineer_count() const {
  // @@protoc_insertion_point(field_get:CMsgHalloween_Merasmus2012.engineer_count)
  return _internal_engineer_count();
}
inline void CMsgHalloween_Merasmus2012::_internal_set_engineer_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x20000000u;
  engineer_count_ = value;
}
inline void CMsgHalloween_Merasmus2012::set_engineer_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_engineer_count(value);
  // @@protoc_insertion_point(field_set:CMsgHalloween_Merasmus2012.engineer_count)
}

// -------------------------------------------------------------------

// CMsgUpdateHalloweenMerasmusLootLevel_Player

// optional fixed64 steam_id = 1;
inline bool CMsgUpdateHalloweenMerasmusLootLevel_Player::_internal_has_steam_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgUpdateHalloweenMerasmusLootLevel_Player::has_steam_id() const {
  return _internal_has_steam_id();
}
inline void CMsgUpdateHalloweenMerasmusLootLevel_Player::clear_steam_id() {
  steam_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgUpdateHalloweenMerasmusLootLevel_Player::_internal_steam_id() const {
  return steam_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgUpdateHalloweenMerasmusLootLevel_Player::steam_id() const {
  // @@protoc_insertion_point(field_get:CMsgUpdateHalloweenMerasmusLootLevel.Player.steam_id)
  return _internal_steam_id();
}
inline void CMsgUpdateHalloweenMerasmusLootLevel_Player::_internal_set_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  steam_id_ = value;
}
inline void CMsgUpdateHalloweenMerasmusLootLevel_Player::set_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_steam_id(value);
  // @@protoc_insertion_point(field_set:CMsgUpdateHalloweenMerasmusLootLevel.Player.steam_id)
}

// -------------------------------------------------------------------

// CMsgUpdateHalloweenMerasmusLootLevel

// repeated .CMsgUpdateHalloweenMerasmusLootLevel.Player players = 1;
inline int CMsgUpdateHalloweenMerasmusLootLevel::_internal_players_size() const {
  return players_.size();
}
inline int CMsgUpdateHalloweenMerasmusLootLevel::players_size() const {
  return _internal_players_size();
}
inline void CMsgUpdateHalloweenMerasmusLootLevel::clear_players() {
  players_.Clear();
}
inline ::CMsgUpdateHalloweenMerasmusLootLevel_Player* CMsgUpdateHalloweenMerasmusLootLevel::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgUpdateHalloweenMerasmusLootLevel.players)
  return players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgUpdateHalloweenMerasmusLootLevel_Player >*
CMsgUpdateHalloweenMerasmusLootLevel::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:CMsgUpdateHalloweenMerasmusLootLevel.players)
  return &players_;
}
inline const ::CMsgUpdateHalloweenMerasmusLootLevel_Player& CMsgUpdateHalloweenMerasmusLootLevel::_internal_players(int index) const {
  return players_.Get(index);
}
inline const ::CMsgUpdateHalloweenMerasmusLootLevel_Player& CMsgUpdateHalloweenMerasmusLootLevel::players(int index) const {
  // @@protoc_insertion_point(field_get:CMsgUpdateHalloweenMerasmusLootLevel.players)
  return _internal_players(index);
}
inline ::CMsgUpdateHalloweenMerasmusLootLevel_Player* CMsgUpdateHalloweenMerasmusLootLevel::_internal_add_players() {
  return players_.Add();
}
inline ::CMsgUpdateHalloweenMerasmusLootLevel_Player* CMsgUpdateHalloweenMerasmusLootLevel::add_players() {
  // @@protoc_insertion_point(field_add:CMsgUpdateHalloweenMerasmusLootLevel.players)
  return _internal_add_players();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgUpdateHalloweenMerasmusLootLevel_Player >&
CMsgUpdateHalloweenMerasmusLootLevel::players() const {
  // @@protoc_insertion_point(field_list:CMsgUpdateHalloweenMerasmusLootLevel.players)
  return players_;
}

// optional uint32 merasmus_level = 2;
inline bool CMsgUpdateHalloweenMerasmusLootLevel::_internal_has_merasmus_level() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgUpdateHalloweenMerasmusLootLevel::has_merasmus_level() const {
  return _internal_has_merasmus_level();
}
inline void CMsgUpdateHalloweenMerasmusLootLevel::clear_merasmus_level() {
  merasmus_level_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgUpdateHalloweenMerasmusLootLevel::_internal_merasmus_level() const {
  return merasmus_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgUpdateHalloweenMerasmusLootLevel::merasmus_level() const {
  // @@protoc_insertion_point(field_get:CMsgUpdateHalloweenMerasmusLootLevel.merasmus_level)
  return _internal_merasmus_level();
}
inline void CMsgUpdateHalloweenMerasmusLootLevel::_internal_set_merasmus_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  merasmus_level_ = value;
}
inline void CMsgUpdateHalloweenMerasmusLootLevel::set_merasmus_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_merasmus_level(value);
  // @@protoc_insertion_point(field_set:CMsgUpdateHalloweenMerasmusLootLevel.merasmus_level)
}

// -------------------------------------------------------------------

// CAttribute_String

// optional string value = 1;
inline bool CAttribute_String::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CAttribute_String::has_value() const {
  return _internal_has_value();
}
inline void CAttribute_String::clear_value() {
  value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CAttribute_String::value() const {
  // @@protoc_insertion_point(field_get:CAttribute_String.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CAttribute_String::set_value(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CAttribute_String.value)
}
inline std::string* CAttribute_String::mutable_value() {
  // @@protoc_insertion_point(field_mutable:CAttribute_String.value)
  return _internal_mutable_value();
}
inline const std::string& CAttribute_String::_internal_value() const {
  return value_.Get();
}
inline void CAttribute_String::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CAttribute_String::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000001u;
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CAttribute_String::release_value() {
  // @@protoc_insertion_point(field_release:CAttribute_String.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CAttribute_String::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CAttribute_String.value)
}

// -------------------------------------------------------------------

// CAttribute_DynamicRecipeComponent

// optional uint32 def_index = 1;
inline bool CAttribute_DynamicRecipeComponent::_internal_has_def_index() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CAttribute_DynamicRecipeComponent::has_def_index() const {
  return _internal_has_def_index();
}
inline void CAttribute_DynamicRecipeComponent::clear_def_index() {
  def_index_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CAttribute_DynamicRecipeComponent::_internal_def_index() const {
  return def_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CAttribute_DynamicRecipeComponent::def_index() const {
  // @@protoc_insertion_point(field_get:CAttribute_DynamicRecipeComponent.def_index)
  return _internal_def_index();
}
inline void CAttribute_DynamicRecipeComponent::_internal_set_def_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  def_index_ = value;
}
inline void CAttribute_DynamicRecipeComponent::set_def_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_def_index(value);
  // @@protoc_insertion_point(field_set:CAttribute_DynamicRecipeComponent.def_index)
}

// optional uint32 item_quality = 2;
inline bool CAttribute_DynamicRecipeComponent::_internal_has_item_quality() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CAttribute_DynamicRecipeComponent::has_item_quality() const {
  return _internal_has_item_quality();
}
inline void CAttribute_DynamicRecipeComponent::clear_item_quality() {
  item_quality_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CAttribute_DynamicRecipeComponent::_internal_item_quality() const {
  return item_quality_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CAttribute_DynamicRecipeComponent::item_quality() const {
  // @@protoc_insertion_point(field_get:CAttribute_DynamicRecipeComponent.item_quality)
  return _internal_item_quality();
}
inline void CAttribute_DynamicRecipeComponent::_internal_set_item_quality(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  item_quality_ = value;
}
inline void CAttribute_DynamicRecipeComponent::set_item_quality(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_item_quality(value);
  // @@protoc_insertion_point(field_set:CAttribute_DynamicRecipeComponent.item_quality)
}

// optional uint32 component_flags = 3;
inline bool CAttribute_DynamicRecipeComponent::_internal_has_component_flags() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CAttribute_DynamicRecipeComponent::has_component_flags() const {
  return _internal_has_component_flags();
}
inline void CAttribute_DynamicRecipeComponent::clear_component_flags() {
  component_flags_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CAttribute_DynamicRecipeComponent::_internal_component_flags() const {
  return component_flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CAttribute_DynamicRecipeComponent::component_flags() const {
  // @@protoc_insertion_point(field_get:CAttribute_DynamicRecipeComponent.component_flags)
  return _internal_component_flags();
}
inline void CAttribute_DynamicRecipeComponent::_internal_set_component_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  component_flags_ = value;
}
inline void CAttribute_DynamicRecipeComponent::set_component_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_component_flags(value);
  // @@protoc_insertion_point(field_set:CAttribute_DynamicRecipeComponent.component_flags)
}

// optional string attributes_string = 4;
inline bool CAttribute_DynamicRecipeComponent::_internal_has_attributes_string() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CAttribute_DynamicRecipeComponent::has_attributes_string() const {
  return _internal_has_attributes_string();
}
inline void CAttribute_DynamicRecipeComponent::clear_attributes_string() {
  attributes_string_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CAttribute_DynamicRecipeComponent::attributes_string() const {
  // @@protoc_insertion_point(field_get:CAttribute_DynamicRecipeComponent.attributes_string)
  return _internal_attributes_string();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CAttribute_DynamicRecipeComponent::set_attributes_string(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 attributes_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CAttribute_DynamicRecipeComponent.attributes_string)
}
inline std::string* CAttribute_DynamicRecipeComponent::mutable_attributes_string() {
  // @@protoc_insertion_point(field_mutable:CAttribute_DynamicRecipeComponent.attributes_string)
  return _internal_mutable_attributes_string();
}
inline const std::string& CAttribute_DynamicRecipeComponent::_internal_attributes_string() const {
  return attributes_string_.Get();
}
inline void CAttribute_DynamicRecipeComponent::_internal_set_attributes_string(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  attributes_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CAttribute_DynamicRecipeComponent::_internal_mutable_attributes_string() {
  _has_bits_[0] |= 0x00000001u;
  return attributes_string_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CAttribute_DynamicRecipeComponent::release_attributes_string() {
  // @@protoc_insertion_point(field_release:CAttribute_DynamicRecipeComponent.attributes_string)
  if (!_internal_has_attributes_string()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return attributes_string_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CAttribute_DynamicRecipeComponent::set_allocated_attributes_string(std::string* attributes_string) {
  if (attributes_string != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  attributes_string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attributes_string,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CAttribute_DynamicRecipeComponent.attributes_string)
}

// optional uint32 num_required = 5;
inline bool CAttribute_DynamicRecipeComponent::_internal_has_num_required() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CAttribute_DynamicRecipeComponent::has_num_required() const {
  return _internal_has_num_required();
}
inline void CAttribute_DynamicRecipeComponent::clear_num_required() {
  num_required_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CAttribute_DynamicRecipeComponent::_internal_num_required() const {
  return num_required_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CAttribute_DynamicRecipeComponent::num_required() const {
  // @@protoc_insertion_point(field_get:CAttribute_DynamicRecipeComponent.num_required)
  return _internal_num_required();
}
inline void CAttribute_DynamicRecipeComponent::_internal_set_num_required(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  num_required_ = value;
}
inline void CAttribute_DynamicRecipeComponent::set_num_required(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_required(value);
  // @@protoc_insertion_point(field_set:CAttribute_DynamicRecipeComponent.num_required)
}

// optional uint32 num_fulfilled = 6;
inline bool CAttribute_DynamicRecipeComponent::_internal_has_num_fulfilled() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CAttribute_DynamicRecipeComponent::has_num_fulfilled() const {
  return _internal_has_num_fulfilled();
}
inline void CAttribute_DynamicRecipeComponent::clear_num_fulfilled() {
  num_fulfilled_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CAttribute_DynamicRecipeComponent::_internal_num_fulfilled() const {
  return num_fulfilled_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CAttribute_DynamicRecipeComponent::num_fulfilled() const {
  // @@protoc_insertion_point(field_get:CAttribute_DynamicRecipeComponent.num_fulfilled)
  return _internal_num_fulfilled();
}
inline void CAttribute_DynamicRecipeComponent::_internal_set_num_fulfilled(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  num_fulfilled_ = value;
}
inline void CAttribute_DynamicRecipeComponent::set_num_fulfilled(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_fulfilled(value);
  // @@protoc_insertion_point(field_set:CAttribute_DynamicRecipeComponent.num_fulfilled)
}

// -------------------------------------------------------------------

// CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT

// optional uint32 def_index = 1;
inline bool CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::_internal_has_def_index() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::has_def_index() const {
  return _internal_has_def_index();
}
inline void CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::clear_def_index() {
  def_index_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::_internal_def_index() const {
  return def_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::def_index() const {
  // @@protoc_insertion_point(field_get:CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT.def_index)
  return _internal_def_index();
}
inline void CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::_internal_set_def_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  def_index_ = value;
}
inline void CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::set_def_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_def_index(value);
  // @@protoc_insertion_point(field_set:CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT.def_index)
}

// optional uint32 item_def = 2;
inline bool CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::_internal_has_item_def() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::has_item_def() const {
  return _internal_has_item_def();
}
inline void CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::clear_item_def() {
  item_def_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::_internal_item_def() const {
  return item_def_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::item_def() const {
  // @@protoc_insertion_point(field_get:CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT.item_def)
  return _internal_item_def();
}
inline void CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::_internal_set_item_def(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  item_def_ = value;
}
inline void CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::set_item_def(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_item_def(value);
  // @@protoc_insertion_point(field_set:CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT.item_def)
}

// optional uint32 item_quality = 3;
inline bool CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::_internal_has_item_quality() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::has_item_quality() const {
  return _internal_has_item_quality();
}
inline void CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::clear_item_quality() {
  item_quality_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::_internal_item_quality() const {
  return item_quality_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::item_quality() const {
  // @@protoc_insertion_point(field_get:CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT.item_quality)
  return _internal_item_quality();
}
inline void CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::_internal_set_item_quality(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  item_quality_ = value;
}
inline void CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::set_item_quality(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_item_quality(value);
  // @@protoc_insertion_point(field_set:CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT.item_quality)
}

// optional uint32 component_flags = 4;
inline bool CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::_internal_has_component_flags() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::has_component_flags() const {
  return _internal_has_component_flags();
}
inline void CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::clear_component_flags() {
  component_flags_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::_internal_component_flags() const {
  return component_flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::component_flags() const {
  // @@protoc_insertion_point(field_get:CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT.component_flags)
  return _internal_component_flags();
}
inline void CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::_internal_set_component_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  component_flags_ = value;
}
inline void CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::set_component_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_component_flags(value);
  // @@protoc_insertion_point(field_set:CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT.component_flags)
}

// optional uint32 item_flags = 5;
inline bool CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::_internal_has_item_flags() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::has_item_flags() const {
  return _internal_has_item_flags();
}
inline void CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::clear_item_flags() {
  item_flags_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::_internal_item_flags() const {
  return item_flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::item_flags() const {
  // @@protoc_insertion_point(field_get:CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT.item_flags)
  return _internal_item_flags();
}
inline void CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::_internal_set_item_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  item_flags_ = value;
}
inline void CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::set_item_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_item_flags(value);
  // @@protoc_insertion_point(field_set:CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT.item_flags)
}

// optional string attributes_string = 6;
inline bool CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::_internal_has_attributes_string() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::has_attributes_string() const {
  return _internal_has_attributes_string();
}
inline void CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::clear_attributes_string() {
  attributes_string_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::attributes_string() const {
  // @@protoc_insertion_point(field_get:CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT.attributes_string)
  return _internal_attributes_string();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::set_attributes_string(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 attributes_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT.attributes_string)
}
inline std::string* CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::mutable_attributes_string() {
  // @@protoc_insertion_point(field_mutable:CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT.attributes_string)
  return _internal_mutable_attributes_string();
}
inline const std::string& CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::_internal_attributes_string() const {
  return attributes_string_.Get();
}
inline void CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::_internal_set_attributes_string(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  attributes_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::_internal_mutable_attributes_string() {
  _has_bits_[0] |= 0x00000001u;
  return attributes_string_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::release_attributes_string() {
  // @@protoc_insertion_point(field_release:CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT.attributes_string)
  if (!_internal_has_attributes_string()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return attributes_string_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::set_allocated_attributes_string(std::string* attributes_string) {
  if (attributes_string != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  attributes_string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attributes_string,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT.attributes_string)
}

// optional uint32 num_required = 7;
inline bool CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::_internal_has_num_required() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::has_num_required() const {
  return _internal_has_num_required();
}
inline void CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::clear_num_required() {
  num_required_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::_internal_num_required() const {
  return num_required_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::num_required() const {
  // @@protoc_insertion_point(field_get:CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT.num_required)
  return _internal_num_required();
}
inline void CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::_internal_set_num_required(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  num_required_ = value;
}
inline void CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::set_num_required(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_required(value);
  // @@protoc_insertion_point(field_set:CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT.num_required)
}

// optional uint32 item_count = 8;
inline bool CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::_internal_has_item_count() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::has_item_count() const {
  return _internal_has_item_count();
}
inline void CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::clear_item_count() {
  item_count_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::_internal_item_count() const {
  return item_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::item_count() const {
  // @@protoc_insertion_point(field_get:CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT.item_count)
  return _internal_item_count();
}
inline void CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::_internal_set_item_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  item_count_ = value;
}
inline void CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::set_item_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_item_count(value);
  // @@protoc_insertion_point(field_set:CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT.item_count)
}

// optional uint32 num_fulfilled = 9;
inline bool CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::_internal_has_num_fulfilled() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::has_num_fulfilled() const {
  return _internal_has_num_fulfilled();
}
inline void CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::clear_num_fulfilled() {
  num_fulfilled_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::_internal_num_fulfilled() const {
  return num_fulfilled_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::num_fulfilled() const {
  // @@protoc_insertion_point(field_get:CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT.num_fulfilled)
  return _internal_num_fulfilled();
}
inline void CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::_internal_set_num_fulfilled(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  num_fulfilled_ = value;
}
inline void CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::set_num_fulfilled(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_fulfilled(value);
  // @@protoc_insertion_point(field_set:CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT.num_fulfilled)
}

// optional uint32 items_fulfilled = 10;
inline bool CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::_internal_has_items_fulfilled() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::has_items_fulfilled() const {
  return _internal_has_items_fulfilled();
}
inline void CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::clear_items_fulfilled() {
  items_fulfilled_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::_internal_items_fulfilled() const {
  return items_fulfilled_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::items_fulfilled() const {
  // @@protoc_insertion_point(field_get:CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT.items_fulfilled)
  return _internal_items_fulfilled();
}
inline void CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::_internal_set_items_fulfilled(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  items_fulfilled_ = value;
}
inline void CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::set_items_fulfilled(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_items_fulfilled(value);
  // @@protoc_insertion_point(field_set:CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT.items_fulfilled)
}

// -------------------------------------------------------------------

// CAttribute_ItemSlotCriteria

// optional string tags = 1;
inline bool CAttribute_ItemSlotCriteria::_internal_has_tags() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CAttribute_ItemSlotCriteria::has_tags() const {
  return _internal_has_tags();
}
inline void CAttribute_ItemSlotCriteria::clear_tags() {
  tags_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CAttribute_ItemSlotCriteria::tags() const {
  // @@protoc_insertion_point(field_get:CAttribute_ItemSlotCriteria.tags)
  return _internal_tags();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CAttribute_ItemSlotCriteria::set_tags(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 tags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CAttribute_ItemSlotCriteria.tags)
}
inline std::string* CAttribute_ItemSlotCriteria::mutable_tags() {
  // @@protoc_insertion_point(field_mutable:CAttribute_ItemSlotCriteria.tags)
  return _internal_mutable_tags();
}
inline const std::string& CAttribute_ItemSlotCriteria::_internal_tags() const {
  return tags_.Get();
}
inline void CAttribute_ItemSlotCriteria::_internal_set_tags(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  tags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CAttribute_ItemSlotCriteria::_internal_mutable_tags() {
  _has_bits_[0] |= 0x00000001u;
  return tags_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CAttribute_ItemSlotCriteria::release_tags() {
  // @@protoc_insertion_point(field_release:CAttribute_ItemSlotCriteria.tags)
  if (!_internal_has_tags()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return tags_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CAttribute_ItemSlotCriteria::set_allocated_tags(std::string* tags) {
  if (tags != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  tags_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tags,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CAttribute_ItemSlotCriteria.tags)
}

// -------------------------------------------------------------------

// CMsgSetItemSlotAttribute

// optional uint64 item_id = 1;
inline bool CMsgSetItemSlotAttribute::_internal_has_item_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSetItemSlotAttribute::has_item_id() const {
  return _internal_has_item_id();
}
inline void CMsgSetItemSlotAttribute::clear_item_id() {
  item_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgSetItemSlotAttribute::_internal_item_id() const {
  return item_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgSetItemSlotAttribute::item_id() const {
  // @@protoc_insertion_point(field_get:CMsgSetItemSlotAttribute.item_id)
  return _internal_item_id();
}
inline void CMsgSetItemSlotAttribute::_internal_set_item_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  item_id_ = value;
}
inline void CMsgSetItemSlotAttribute::set_item_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_item_id(value);
  // @@protoc_insertion_point(field_set:CMsgSetItemSlotAttribute.item_id)
}

// optional uint64 slot_item_original_id = 2;
inline bool CMsgSetItemSlotAttribute::_internal_has_slot_item_original_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSetItemSlotAttribute::has_slot_item_original_id() const {
  return _internal_has_slot_item_original_id();
}
inline void CMsgSetItemSlotAttribute::clear_slot_item_original_id() {
  slot_item_original_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgSetItemSlotAttribute::_internal_slot_item_original_id() const {
  return slot_item_original_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgSetItemSlotAttribute::slot_item_original_id() const {
  // @@protoc_insertion_point(field_get:CMsgSetItemSlotAttribute.slot_item_original_id)
  return _internal_slot_item_original_id();
}
inline void CMsgSetItemSlotAttribute::_internal_set_slot_item_original_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  slot_item_original_id_ = value;
}
inline void CMsgSetItemSlotAttribute::set_slot_item_original_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_slot_item_original_id(value);
  // @@protoc_insertion_point(field_set:CMsgSetItemSlotAttribute.slot_item_original_id)
}

// optional uint32 slot_index = 3;
inline bool CMsgSetItemSlotAttribute::_internal_has_slot_index() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgSetItemSlotAttribute::has_slot_index() const {
  return _internal_has_slot_index();
}
inline void CMsgSetItemSlotAttribute::clear_slot_index() {
  slot_index_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSetItemSlotAttribute::_internal_slot_index() const {
  return slot_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSetItemSlotAttribute::slot_index() const {
  // @@protoc_insertion_point(field_get:CMsgSetItemSlotAttribute.slot_index)
  return _internal_slot_index();
}
inline void CMsgSetItemSlotAttribute::_internal_set_slot_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  slot_index_ = value;
}
inline void CMsgSetItemSlotAttribute::set_slot_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_slot_index(value);
  // @@protoc_insertion_point(field_set:CMsgSetItemSlotAttribute.slot_index)
}

// -------------------------------------------------------------------

// CSOWarData

// optional uint32 account_id = 1 [(.key_field) = true];
inline bool CSOWarData::_internal_has_account_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSOWarData::has_account_id() const {
  return _internal_has_account_id();
}
inline void CSOWarData::clear_account_id() {
  account_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOWarData::_internal_account_id() const {
  return account_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOWarData::account_id() const {
  // @@protoc_insertion_point(field_get:CSOWarData.account_id)
  return _internal_account_id();
}
inline void CSOWarData::_internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  account_id_ = value;
}
inline void CSOWarData::set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CSOWarData.account_id)
}

// optional uint32 war_id = 2 [(.key_field) = true];
inline bool CSOWarData::_internal_has_war_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSOWarData::has_war_id() const {
  return _internal_has_war_id();
}
inline void CSOWarData::clear_war_id() {
  war_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOWarData::_internal_war_id() const {
  return war_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOWarData::war_id() const {
  // @@protoc_insertion_point(field_get:CSOWarData.war_id)
  return _internal_war_id();
}
inline void CSOWarData::_internal_set_war_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  war_id_ = value;
}
inline void CSOWarData::set_war_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_war_id(value);
  // @@protoc_insertion_point(field_set:CSOWarData.war_id)
}

// optional uint32 affiliation = 3;
inline bool CSOWarData::_internal_has_affiliation() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CSOWarData::has_affiliation() const {
  return _internal_has_affiliation();
}
inline void CSOWarData::clear_affiliation() {
  affiliation_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOWarData::_internal_affiliation() const {
  return affiliation_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOWarData::affiliation() const {
  // @@protoc_insertion_point(field_get:CSOWarData.affiliation)
  return _internal_affiliation();
}
inline void CSOWarData::_internal_set_affiliation(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  affiliation_ = value;
}
inline void CSOWarData::set_affiliation(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_affiliation(value);
  // @@protoc_insertion_point(field_set:CSOWarData.affiliation)
}

// optional uint32 points_scored = 4;
inline bool CSOWarData::_internal_has_points_scored() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CSOWarData::has_points_scored() const {
  return _internal_has_points_scored();
}
inline void CSOWarData::clear_points_scored() {
  points_scored_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOWarData::_internal_points_scored() const {
  return points_scored_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOWarData::points_scored() const {
  // @@protoc_insertion_point(field_get:CSOWarData.points_scored)
  return _internal_points_scored();
}
inline void CSOWarData::_internal_set_points_scored(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  points_scored_ = value;
}
inline void CSOWarData::set_points_scored(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_points_scored(value);
  // @@protoc_insertion_point(field_set:CSOWarData.points_scored)
}

// -------------------------------------------------------------------

// CGCMsgGC_War_IndividualUpdate

// optional fixed64 steam_id = 1;
inline bool CGCMsgGC_War_IndividualUpdate::_internal_has_steam_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGCMsgGC_War_IndividualUpdate::has_steam_id() const {
  return _internal_has_steam_id();
}
inline void CGCMsgGC_War_IndividualUpdate::clear_steam_id() {
  steam_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGCMsgGC_War_IndividualUpdate::_internal_steam_id() const {
  return steam_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGCMsgGC_War_IndividualUpdate::steam_id() const {
  // @@protoc_insertion_point(field_get:CGCMsgGC_War_IndividualUpdate.steam_id)
  return _internal_steam_id();
}
inline void CGCMsgGC_War_IndividualUpdate::_internal_set_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  steam_id_ = value;
}
inline void CGCMsgGC_War_IndividualUpdate::set_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_steam_id(value);
  // @@protoc_insertion_point(field_set:CGCMsgGC_War_IndividualUpdate.steam_id)
}

// optional uint32 war_id = 2;
inline bool CGCMsgGC_War_IndividualUpdate::_internal_has_war_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CGCMsgGC_War_IndividualUpdate::has_war_id() const {
  return _internal_has_war_id();
}
inline void CGCMsgGC_War_IndividualUpdate::clear_war_id() {
  war_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGCMsgGC_War_IndividualUpdate::_internal_war_id() const {
  return war_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGCMsgGC_War_IndividualUpdate::war_id() const {
  // @@protoc_insertion_point(field_get:CGCMsgGC_War_IndividualUpdate.war_id)
  return _internal_war_id();
}
inline void CGCMsgGC_War_IndividualUpdate::_internal_set_war_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  war_id_ = value;
}
inline void CGCMsgGC_War_IndividualUpdate::set_war_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_war_id(value);
  // @@protoc_insertion_point(field_set:CGCMsgGC_War_IndividualUpdate.war_id)
}

// optional uint32 score = 3;
inline bool CGCMsgGC_War_IndividualUpdate::_internal_has_score() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CGCMsgGC_War_IndividualUpdate::has_score() const {
  return _internal_has_score();
}
inline void CGCMsgGC_War_IndividualUpdate::clear_score() {
  score_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGCMsgGC_War_IndividualUpdate::_internal_score() const {
  return score_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGCMsgGC_War_IndividualUpdate::score() const {
  // @@protoc_insertion_point(field_get:CGCMsgGC_War_IndividualUpdate.score)
  return _internal_score();
}
inline void CGCMsgGC_War_IndividualUpdate::_internal_set_score(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  score_ = value;
}
inline void CGCMsgGC_War_IndividualUpdate::set_score(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:CGCMsgGC_War_IndividualUpdate.score)
}

// -------------------------------------------------------------------

// CGCMsgGC_War_JoinWar

// optional uint32 affiliation = 1;
inline bool CGCMsgGC_War_JoinWar::_internal_has_affiliation() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGCMsgGC_War_JoinWar::has_affiliation() const {
  return _internal_has_affiliation();
}
inline void CGCMsgGC_War_JoinWar::clear_affiliation() {
  affiliation_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGCMsgGC_War_JoinWar::_internal_affiliation() const {
  return affiliation_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGCMsgGC_War_JoinWar::affiliation() const {
  // @@protoc_insertion_point(field_get:CGCMsgGC_War_JoinWar.affiliation)
  return _internal_affiliation();
}
inline void CGCMsgGC_War_JoinWar::_internal_set_affiliation(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  affiliation_ = value;
}
inline void CGCMsgGC_War_JoinWar::set_affiliation(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_affiliation(value);
  // @@protoc_insertion_point(field_set:CGCMsgGC_War_JoinWar.affiliation)
}

// optional uint32 war_id = 2;
inline bool CGCMsgGC_War_JoinWar::_internal_has_war_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CGCMsgGC_War_JoinWar::has_war_id() const {
  return _internal_has_war_id();
}
inline void CGCMsgGC_War_JoinWar::clear_war_id() {
  war_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGCMsgGC_War_JoinWar::_internal_war_id() const {
  return war_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGCMsgGC_War_JoinWar::war_id() const {
  // @@protoc_insertion_point(field_get:CGCMsgGC_War_JoinWar.war_id)
  return _internal_war_id();
}
inline void CGCMsgGC_War_JoinWar::_internal_set_war_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  war_id_ = value;
}
inline void CGCMsgGC_War_JoinWar::set_war_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_war_id(value);
  // @@protoc_insertion_point(field_set:CGCMsgGC_War_JoinWar.war_id)
}

// -------------------------------------------------------------------

// CGCMsgGC_War_RequestGlobalStats

// optional uint32 war_id = 1;
inline bool CGCMsgGC_War_RequestGlobalStats::_internal_has_war_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGCMsgGC_War_RequestGlobalStats::has_war_id() const {
  return _internal_has_war_id();
}
inline void CGCMsgGC_War_RequestGlobalStats::clear_war_id() {
  war_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGCMsgGC_War_RequestGlobalStats::_internal_war_id() const {
  return war_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGCMsgGC_War_RequestGlobalStats::war_id() const {
  // @@protoc_insertion_point(field_get:CGCMsgGC_War_RequestGlobalStats.war_id)
  return _internal_war_id();
}
inline void CGCMsgGC_War_RequestGlobalStats::_internal_set_war_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  war_id_ = value;
}
inline void CGCMsgGC_War_RequestGlobalStats::set_war_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_war_id(value);
  // @@protoc_insertion_point(field_set:CGCMsgGC_War_RequestGlobalStats.war_id)
}

// -------------------------------------------------------------------

// CGCMsgGC_War_GlobalStatsResponse_SideScore

// optional uint32 side = 1;
inline bool CGCMsgGC_War_GlobalStatsResponse_SideScore::_internal_has_side() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CGCMsgGC_War_GlobalStatsResponse_SideScore::has_side() const {
  return _internal_has_side();
}
inline void CGCMsgGC_War_GlobalStatsResponse_SideScore::clear_side() {
  side_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGCMsgGC_War_GlobalStatsResponse_SideScore::_internal_side() const {
  return side_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGCMsgGC_War_GlobalStatsResponse_SideScore::side() const {
  // @@protoc_insertion_point(field_get:CGCMsgGC_War_GlobalStatsResponse.SideScore.side)
  return _internal_side();
}
inline void CGCMsgGC_War_GlobalStatsResponse_SideScore::_internal_set_side(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  side_ = value;
}
inline void CGCMsgGC_War_GlobalStatsResponse_SideScore::set_side(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_side(value);
  // @@protoc_insertion_point(field_set:CGCMsgGC_War_GlobalStatsResponse.SideScore.side)
}

// optional uint64 score = 2;
inline bool CGCMsgGC_War_GlobalStatsResponse_SideScore::_internal_has_score() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGCMsgGC_War_GlobalStatsResponse_SideScore::has_score() const {
  return _internal_has_score();
}
inline void CGCMsgGC_War_GlobalStatsResponse_SideScore::clear_score() {
  score_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGCMsgGC_War_GlobalStatsResponse_SideScore::_internal_score() const {
  return score_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGCMsgGC_War_GlobalStatsResponse_SideScore::score() const {
  // @@protoc_insertion_point(field_get:CGCMsgGC_War_GlobalStatsResponse.SideScore.score)
  return _internal_score();
}
inline void CGCMsgGC_War_GlobalStatsResponse_SideScore::_internal_set_score(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  score_ = value;
}
inline void CGCMsgGC_War_GlobalStatsResponse_SideScore::set_score(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:CGCMsgGC_War_GlobalStatsResponse.SideScore.score)
}

// -------------------------------------------------------------------

// CGCMsgGC_War_GlobalStatsResponse

// repeated .CGCMsgGC_War_GlobalStatsResponse.SideScore side_scores = 1;
inline int CGCMsgGC_War_GlobalStatsResponse::_internal_side_scores_size() const {
  return side_scores_.size();
}
inline int CGCMsgGC_War_GlobalStatsResponse::side_scores_size() const {
  return _internal_side_scores_size();
}
inline void CGCMsgGC_War_GlobalStatsResponse::clear_side_scores() {
  side_scores_.Clear();
}
inline ::CGCMsgGC_War_GlobalStatsResponse_SideScore* CGCMsgGC_War_GlobalStatsResponse::mutable_side_scores(int index) {
  // @@protoc_insertion_point(field_mutable:CGCMsgGC_War_GlobalStatsResponse.side_scores)
  return side_scores_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGCMsgGC_War_GlobalStatsResponse_SideScore >*
CGCMsgGC_War_GlobalStatsResponse::mutable_side_scores() {
  // @@protoc_insertion_point(field_mutable_list:CGCMsgGC_War_GlobalStatsResponse.side_scores)
  return &side_scores_;
}
inline const ::CGCMsgGC_War_GlobalStatsResponse_SideScore& CGCMsgGC_War_GlobalStatsResponse::_internal_side_scores(int index) const {
  return side_scores_.Get(index);
}
inline const ::CGCMsgGC_War_GlobalStatsResponse_SideScore& CGCMsgGC_War_GlobalStatsResponse::side_scores(int index) const {
  // @@protoc_insertion_point(field_get:CGCMsgGC_War_GlobalStatsResponse.side_scores)
  return _internal_side_scores(index);
}
inline ::CGCMsgGC_War_GlobalStatsResponse_SideScore* CGCMsgGC_War_GlobalStatsResponse::_internal_add_side_scores() {
  return side_scores_.Add();
}
inline ::CGCMsgGC_War_GlobalStatsResponse_SideScore* CGCMsgGC_War_GlobalStatsResponse::add_side_scores() {
  // @@protoc_insertion_point(field_add:CGCMsgGC_War_GlobalStatsResponse.side_scores)
  return _internal_add_side_scores();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGCMsgGC_War_GlobalStatsResponse_SideScore >&
CGCMsgGC_War_GlobalStatsResponse::side_scores() const {
  // @@protoc_insertion_point(field_list:CGCMsgGC_War_GlobalStatsResponse.side_scores)
  return side_scores_;
}

// optional uint32 war_id = 2;
inline bool CGCMsgGC_War_GlobalStatsResponse::_internal_has_war_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGCMsgGC_War_GlobalStatsResponse::has_war_id() const {
  return _internal_has_war_id();
}
inline void CGCMsgGC_War_GlobalStatsResponse::clear_war_id() {
  war_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGCMsgGC_War_GlobalStatsResponse::_internal_war_id() const {
  return war_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGCMsgGC_War_GlobalStatsResponse::war_id() const {
  // @@protoc_insertion_point(field_get:CGCMsgGC_War_GlobalStatsResponse.war_id)
  return _internal_war_id();
}
inline void CGCMsgGC_War_GlobalStatsResponse::_internal_set_war_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  war_id_ = value;
}
inline void CGCMsgGC_War_GlobalStatsResponse::set_war_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_war_id(value);
  // @@protoc_insertion_point(field_set:CGCMsgGC_War_GlobalStatsResponse.war_id)
}

// -------------------------------------------------------------------

// CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate

// optional uint32 score = 2;
inline bool CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::_internal_has_score() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::has_score() const {
  return _internal_has_score();
}
inline void CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::clear_score() {
  score_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::_internal_score() const {
  return score_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::score() const {
  // @@protoc_insertion_point(field_get:CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate.score)
  return _internal_score();
}
inline void CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::_internal_set_score(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  score_ = value;
}
inline void CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::set_score(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate.score)
}

// optional uint32 type = 3;
inline bool CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::has_type() const {
  return _internal_has_type();
}
inline void CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::clear_type() {
  type_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::type() const {
  // @@protoc_insertion_point(field_get:CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate.type)
  return _internal_type();
}
inline void CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  type_ = value;
}
inline void CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate.type)
}

// optional bytes score_id = 4;
inline bool CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::_internal_has_score_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::has_score_id() const {
  return _internal_has_score_id();
}
inline void CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::clear_score_id() {
  score_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::score_id() const {
  // @@protoc_insertion_point(field_get:CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate.score_id)
  return _internal_score_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::set_score_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 score_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate.score_id)
}
inline std::string* CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::mutable_score_id() {
  // @@protoc_insertion_point(field_mutable:CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate.score_id)
  return _internal_mutable_score_id();
}
inline const std::string& CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::_internal_score_id() const {
  return score_id_.Get();
}
inline void CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::_internal_set_score_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  score_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::_internal_mutable_score_id() {
  _has_bits_[0] |= 0x00000001u;
  return score_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::release_score_id() {
  // @@protoc_insertion_point(field_release:CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate.score_id)
  if (!_internal_has_score_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return score_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::set_allocated_score_id(std::string* score_id) {
  if (score_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  score_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), score_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate.score_id)
}

// optional uint32 score_check = 5;
inline bool CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::_internal_has_score_check() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::has_score_check() const {
  return _internal_has_score_check();
}
inline void CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::clear_score_check() {
  score_check_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::_internal_score_check() const {
  return score_check_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::score_check() const {
  // @@protoc_insertion_point(field_get:CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate.score_check)
  return _internal_score_check();
}
inline void CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::_internal_set_score_check(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  score_check_ = value;
}
inline void CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::set_score_check(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_score_check(value);
  // @@protoc_insertion_point(field_set:CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate.score_check)
}

// -------------------------------------------------------------------

// CAttribute_WorldItemPlacement

// optional uint64 original_item_id = 1;
inline bool CAttribute_WorldItemPlacement::_internal_has_original_item_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CAttribute_WorldItemPlacement::has_original_item_id() const {
  return _internal_has_original_item_id();
}
inline void CAttribute_WorldItemPlacement::clear_original_item_id() {
  original_item_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CAttribute_WorldItemPlacement::_internal_original_item_id() const {
  return original_item_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CAttribute_WorldItemPlacement::original_item_id() const {
  // @@protoc_insertion_point(field_get:CAttribute_WorldItemPlacement.original_item_id)
  return _internal_original_item_id();
}
inline void CAttribute_WorldItemPlacement::_internal_set_original_item_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  original_item_id_ = value;
}
inline void CAttribute_WorldItemPlacement::set_original_item_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_original_item_id(value);
  // @@protoc_insertion_point(field_set:CAttribute_WorldItemPlacement.original_item_id)
}

// optional float pos_x = 2;
inline bool CAttribute_WorldItemPlacement::_internal_has_pos_x() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CAttribute_WorldItemPlacement::has_pos_x() const {
  return _internal_has_pos_x();
}
inline void CAttribute_WorldItemPlacement::clear_pos_x() {
  pos_x_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float CAttribute_WorldItemPlacement::_internal_pos_x() const {
  return pos_x_;
}
inline float CAttribute_WorldItemPlacement::pos_x() const {
  // @@protoc_insertion_point(field_get:CAttribute_WorldItemPlacement.pos_x)
  return _internal_pos_x();
}
inline void CAttribute_WorldItemPlacement::_internal_set_pos_x(float value) {
  _has_bits_[0] |= 0x00000002u;
  pos_x_ = value;
}
inline void CAttribute_WorldItemPlacement::set_pos_x(float value) {
  _internal_set_pos_x(value);
  // @@protoc_insertion_point(field_set:CAttribute_WorldItemPlacement.pos_x)
}

// optional float pos_y = 3;
inline bool CAttribute_WorldItemPlacement::_internal_has_pos_y() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CAttribute_WorldItemPlacement::has_pos_y() const {
  return _internal_has_pos_y();
}
inline void CAttribute_WorldItemPlacement::clear_pos_y() {
  pos_y_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float CAttribute_WorldItemPlacement::_internal_pos_y() const {
  return pos_y_;
}
inline float CAttribute_WorldItemPlacement::pos_y() const {
  // @@protoc_insertion_point(field_get:CAttribute_WorldItemPlacement.pos_y)
  return _internal_pos_y();
}
inline void CAttribute_WorldItemPlacement::_internal_set_pos_y(float value) {
  _has_bits_[0] |= 0x00000004u;
  pos_y_ = value;
}
inline void CAttribute_WorldItemPlacement::set_pos_y(float value) {
  _internal_set_pos_y(value);
  // @@protoc_insertion_point(field_set:CAttribute_WorldItemPlacement.pos_y)
}

// optional float pos_z = 4;
inline bool CAttribute_WorldItemPlacement::_internal_has_pos_z() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CAttribute_WorldItemPlacement::has_pos_z() const {
  return _internal_has_pos_z();
}
inline void CAttribute_WorldItemPlacement::clear_pos_z() {
  pos_z_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float CAttribute_WorldItemPlacement::_internal_pos_z() const {
  return pos_z_;
}
inline float CAttribute_WorldItemPlacement::pos_z() const {
  // @@protoc_insertion_point(field_get:CAttribute_WorldItemPlacement.pos_z)
  return _internal_pos_z();
}
inline void CAttribute_WorldItemPlacement::_internal_set_pos_z(float value) {
  _has_bits_[0] |= 0x00000008u;
  pos_z_ = value;
}
inline void CAttribute_WorldItemPlacement::set_pos_z(float value) {
  _internal_set_pos_z(value);
  // @@protoc_insertion_point(field_set:CAttribute_WorldItemPlacement.pos_z)
}

// optional float ang_x = 5;
inline bool CAttribute_WorldItemPlacement::_internal_has_ang_x() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CAttribute_WorldItemPlacement::has_ang_x() const {
  return _internal_has_ang_x();
}
inline void CAttribute_WorldItemPlacement::clear_ang_x() {
  ang_x_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float CAttribute_WorldItemPlacement::_internal_ang_x() const {
  return ang_x_;
}
inline float CAttribute_WorldItemPlacement::ang_x() const {
  // @@protoc_insertion_point(field_get:CAttribute_WorldItemPlacement.ang_x)
  return _internal_ang_x();
}
inline void CAttribute_WorldItemPlacement::_internal_set_ang_x(float value) {
  _has_bits_[0] |= 0x00000010u;
  ang_x_ = value;
}
inline void CAttribute_WorldItemPlacement::set_ang_x(float value) {
  _internal_set_ang_x(value);
  // @@protoc_insertion_point(field_set:CAttribute_WorldItemPlacement.ang_x)
}

// optional float ang_y = 6;
inline bool CAttribute_WorldItemPlacement::_internal_has_ang_y() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CAttribute_WorldItemPlacement::has_ang_y() const {
  return _internal_has_ang_y();
}
inline void CAttribute_WorldItemPlacement::clear_ang_y() {
  ang_y_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float CAttribute_WorldItemPlacement::_internal_ang_y() const {
  return ang_y_;
}
inline float CAttribute_WorldItemPlacement::ang_y() const {
  // @@protoc_insertion_point(field_get:CAttribute_WorldItemPlacement.ang_y)
  return _internal_ang_y();
}
inline void CAttribute_WorldItemPlacement::_internal_set_ang_y(float value) {
  _has_bits_[0] |= 0x00000020u;
  ang_y_ = value;
}
inline void CAttribute_WorldItemPlacement::set_ang_y(float value) {
  _internal_set_ang_y(value);
  // @@protoc_insertion_point(field_set:CAttribute_WorldItemPlacement.ang_y)
}

// optional float ang_z = 7;
inline bool CAttribute_WorldItemPlacement::_internal_has_ang_z() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CAttribute_WorldItemPlacement::has_ang_z() const {
  return _internal_has_ang_z();
}
inline void CAttribute_WorldItemPlacement::clear_ang_z() {
  ang_z_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float CAttribute_WorldItemPlacement::_internal_ang_z() const {
  return ang_z_;
}
inline float CAttribute_WorldItemPlacement::ang_z() const {
  // @@protoc_insertion_point(field_get:CAttribute_WorldItemPlacement.ang_z)
  return _internal_ang_z();
}
inline void CAttribute_WorldItemPlacement::_internal_set_ang_z(float value) {
  _has_bits_[0] |= 0x00000040u;
  ang_z_ = value;
}
inline void CAttribute_WorldItemPlacement::set_ang_z(float value) {
  _internal_set_ang_z(value);
  // @@protoc_insertion_point(field_set:CAttribute_WorldItemPlacement.ang_z)
}

// -------------------------------------------------------------------

// CGCMsg_WorldItemPlacement_Update

// optional uint64 original_item_id = 1;
inline bool CGCMsg_WorldItemPlacement_Update::_internal_has_original_item_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CGCMsg_WorldItemPlacement_Update::has_original_item_id() const {
  return _internal_has_original_item_id();
}
inline void CGCMsg_WorldItemPlacement_Update::clear_original_item_id() {
  original_item_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGCMsg_WorldItemPlacement_Update::_internal_original_item_id() const {
  return original_item_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGCMsg_WorldItemPlacement_Update::original_item_id() const {
  // @@protoc_insertion_point(field_get:CGCMsg_WorldItemPlacement_Update.original_item_id)
  return _internal_original_item_id();
}
inline void CGCMsg_WorldItemPlacement_Update::_internal_set_original_item_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  original_item_id_ = value;
}
inline void CGCMsg_WorldItemPlacement_Update::set_original_item_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_original_item_id(value);
  // @@protoc_insertion_point(field_set:CGCMsg_WorldItemPlacement_Update.original_item_id)
}

// optional float pos_x = 2;
inline bool CGCMsg_WorldItemPlacement_Update::_internal_has_pos_x() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CGCMsg_WorldItemPlacement_Update::has_pos_x() const {
  return _internal_has_pos_x();
}
inline void CGCMsg_WorldItemPlacement_Update::clear_pos_x() {
  pos_x_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float CGCMsg_WorldItemPlacement_Update::_internal_pos_x() const {
  return pos_x_;
}
inline float CGCMsg_WorldItemPlacement_Update::pos_x() const {
  // @@protoc_insertion_point(field_get:CGCMsg_WorldItemPlacement_Update.pos_x)
  return _internal_pos_x();
}
inline void CGCMsg_WorldItemPlacement_Update::_internal_set_pos_x(float value) {
  _has_bits_[0] |= 0x00000004u;
  pos_x_ = value;
}
inline void CGCMsg_WorldItemPlacement_Update::set_pos_x(float value) {
  _internal_set_pos_x(value);
  // @@protoc_insertion_point(field_set:CGCMsg_WorldItemPlacement_Update.pos_x)
}

// optional float pos_y = 3;
inline bool CGCMsg_WorldItemPlacement_Update::_internal_has_pos_y() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CGCMsg_WorldItemPlacement_Update::has_pos_y() const {
  return _internal_has_pos_y();
}
inline void CGCMsg_WorldItemPlacement_Update::clear_pos_y() {
  pos_y_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float CGCMsg_WorldItemPlacement_Update::_internal_pos_y() const {
  return pos_y_;
}
inline float CGCMsg_WorldItemPlacement_Update::pos_y() const {
  // @@protoc_insertion_point(field_get:CGCMsg_WorldItemPlacement_Update.pos_y)
  return _internal_pos_y();
}
inline void CGCMsg_WorldItemPlacement_Update::_internal_set_pos_y(float value) {
  _has_bits_[0] |= 0x00000008u;
  pos_y_ = value;
}
inline void CGCMsg_WorldItemPlacement_Update::set_pos_y(float value) {
  _internal_set_pos_y(value);
  // @@protoc_insertion_point(field_set:CGCMsg_WorldItemPlacement_Update.pos_y)
}

// optional float pos_z = 4;
inline bool CGCMsg_WorldItemPlacement_Update::_internal_has_pos_z() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CGCMsg_WorldItemPlacement_Update::has_pos_z() const {
  return _internal_has_pos_z();
}
inline void CGCMsg_WorldItemPlacement_Update::clear_pos_z() {
  pos_z_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float CGCMsg_WorldItemPlacement_Update::_internal_pos_z() const {
  return pos_z_;
}
inline float CGCMsg_WorldItemPlacement_Update::pos_z() const {
  // @@protoc_insertion_point(field_get:CGCMsg_WorldItemPlacement_Update.pos_z)
  return _internal_pos_z();
}
inline void CGCMsg_WorldItemPlacement_Update::_internal_set_pos_z(float value) {
  _has_bits_[0] |= 0x00000010u;
  pos_z_ = value;
}
inline void CGCMsg_WorldItemPlacement_Update::set_pos_z(float value) {
  _internal_set_pos_z(value);
  // @@protoc_insertion_point(field_set:CGCMsg_WorldItemPlacement_Update.pos_z)
}

// optional float ang_x = 5;
inline bool CGCMsg_WorldItemPlacement_Update::_internal_has_ang_x() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CGCMsg_WorldItemPlacement_Update::has_ang_x() const {
  return _internal_has_ang_x();
}
inline void CGCMsg_WorldItemPlacement_Update::clear_ang_x() {
  ang_x_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float CGCMsg_WorldItemPlacement_Update::_internal_ang_x() const {
  return ang_x_;
}
inline float CGCMsg_WorldItemPlacement_Update::ang_x() const {
  // @@protoc_insertion_point(field_get:CGCMsg_WorldItemPlacement_Update.ang_x)
  return _internal_ang_x();
}
inline void CGCMsg_WorldItemPlacement_Update::_internal_set_ang_x(float value) {
  _has_bits_[0] |= 0x00000020u;
  ang_x_ = value;
}
inline void CGCMsg_WorldItemPlacement_Update::set_ang_x(float value) {
  _internal_set_ang_x(value);
  // @@protoc_insertion_point(field_set:CGCMsg_WorldItemPlacement_Update.ang_x)
}

// optional float ang_y = 6;
inline bool CGCMsg_WorldItemPlacement_Update::_internal_has_ang_y() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CGCMsg_WorldItemPlacement_Update::has_ang_y() const {
  return _internal_has_ang_y();
}
inline void CGCMsg_WorldItemPlacement_Update::clear_ang_y() {
  ang_y_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float CGCMsg_WorldItemPlacement_Update::_internal_ang_y() const {
  return ang_y_;
}
inline float CGCMsg_WorldItemPlacement_Update::ang_y() const {
  // @@protoc_insertion_point(field_get:CGCMsg_WorldItemPlacement_Update.ang_y)
  return _internal_ang_y();
}
inline void CGCMsg_WorldItemPlacement_Update::_internal_set_ang_y(float value) {
  _has_bits_[0] |= 0x00000040u;
  ang_y_ = value;
}
inline void CGCMsg_WorldItemPlacement_Update::set_ang_y(float value) {
  _internal_set_ang_y(value);
  // @@protoc_insertion_point(field_set:CGCMsg_WorldItemPlacement_Update.ang_y)
}

// optional float ang_z = 7;
inline bool CGCMsg_WorldItemPlacement_Update::_internal_has_ang_z() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CGCMsg_WorldItemPlacement_Update::has_ang_z() const {
  return _internal_has_ang_z();
}
inline void CGCMsg_WorldItemPlacement_Update::clear_ang_z() {
  ang_z_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float CGCMsg_WorldItemPlacement_Update::_internal_ang_z() const {
  return ang_z_;
}
inline float CGCMsg_WorldItemPlacement_Update::ang_z() const {
  // @@protoc_insertion_point(field_get:CGCMsg_WorldItemPlacement_Update.ang_z)
  return _internal_ang_z();
}
inline void CGCMsg_WorldItemPlacement_Update::_internal_set_ang_z(float value) {
  _has_bits_[0] |= 0x00000080u;
  ang_z_ = value;
}
inline void CGCMsg_WorldItemPlacement_Update::set_ang_z(float value) {
  _internal_set_ang_z(value);
  // @@protoc_insertion_point(field_set:CGCMsg_WorldItemPlacement_Update.ang_z)
}

// optional bool force_remove_all = 8;
inline bool CGCMsg_WorldItemPlacement_Update::_internal_has_force_remove_all() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CGCMsg_WorldItemPlacement_Update::has_force_remove_all() const {
  return _internal_has_force_remove_all();
}
inline void CGCMsg_WorldItemPlacement_Update::clear_force_remove_all() {
  force_remove_all_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool CGCMsg_WorldItemPlacement_Update::_internal_force_remove_all() const {
  return force_remove_all_;
}
inline bool CGCMsg_WorldItemPlacement_Update::force_remove_all() const {
  // @@protoc_insertion_point(field_get:CGCMsg_WorldItemPlacement_Update.force_remove_all)
  return _internal_force_remove_all();
}
inline void CGCMsg_WorldItemPlacement_Update::_internal_set_force_remove_all(bool value) {
  _has_bits_[0] |= 0x00000100u;
  force_remove_all_ = value;
}
inline void CGCMsg_WorldItemPlacement_Update::set_force_remove_all(bool value) {
  _internal_set_force_remove_all(value);
  // @@protoc_insertion_point(field_set:CGCMsg_WorldItemPlacement_Update.force_remove_all)
}

// optional string attrib_name = 9;
inline bool CGCMsg_WorldItemPlacement_Update::_internal_has_attrib_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGCMsg_WorldItemPlacement_Update::has_attrib_name() const {
  return _internal_has_attrib_name();
}
inline void CGCMsg_WorldItemPlacement_Update::clear_attrib_name() {
  attrib_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CGCMsg_WorldItemPlacement_Update::attrib_name() const {
  // @@protoc_insertion_point(field_get:CGCMsg_WorldItemPlacement_Update.attrib_name)
  return _internal_attrib_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CGCMsg_WorldItemPlacement_Update::set_attrib_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 attrib_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CGCMsg_WorldItemPlacement_Update.attrib_name)
}
inline std::string* CGCMsg_WorldItemPlacement_Update::mutable_attrib_name() {
  // @@protoc_insertion_point(field_mutable:CGCMsg_WorldItemPlacement_Update.attrib_name)
  return _internal_mutable_attrib_name();
}
inline const std::string& CGCMsg_WorldItemPlacement_Update::_internal_attrib_name() const {
  return attrib_name_.Get();
}
inline void CGCMsg_WorldItemPlacement_Update::_internal_set_attrib_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  attrib_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CGCMsg_WorldItemPlacement_Update::_internal_mutable_attrib_name() {
  _has_bits_[0] |= 0x00000001u;
  return attrib_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CGCMsg_WorldItemPlacement_Update::release_attrib_name() {
  // @@protoc_insertion_point(field_release:CGCMsg_WorldItemPlacement_Update.attrib_name)
  if (!_internal_has_attrib_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return attrib_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CGCMsg_WorldItemPlacement_Update::set_allocated_attrib_name(std::string* attrib_name) {
  if (attrib_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  attrib_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attrib_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CGCMsg_WorldItemPlacement_Update.attrib_name)
}

// -------------------------------------------------------------------

// CMsgAcknowledgeXP

// optional int32 match_group = 1;
inline bool CMsgAcknowledgeXP::_internal_has_match_group() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgAcknowledgeXP::has_match_group() const {
  return _internal_has_match_group();
}
inline void CMsgAcknowledgeXP::clear_match_group() {
  match_group_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgAcknowledgeXP::_internal_match_group() const {
  return match_group_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgAcknowledgeXP::match_group() const {
  // @@protoc_insertion_point(field_get:CMsgAcknowledgeXP.match_group)
  return _internal_match_group();
}
inline void CMsgAcknowledgeXP::_internal_set_match_group(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  match_group_ = value;
}
inline void CMsgAcknowledgeXP::set_match_group(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_match_group(value);
  // @@protoc_insertion_point(field_set:CMsgAcknowledgeXP.match_group)
}

// optional uint32 predicted_experience = 2;
inline bool CMsgAcknowledgeXP::_internal_has_predicted_experience() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgAcknowledgeXP::has_predicted_experience() const {
  return _internal_has_predicted_experience();
}
inline void CMsgAcknowledgeXP::clear_predicted_experience() {
  predicted_experience_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgAcknowledgeXP::_internal_predicted_experience() const {
  return predicted_experience_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgAcknowledgeXP::predicted_experience() const {
  // @@protoc_insertion_point(field_get:CMsgAcknowledgeXP.predicted_experience)
  return _internal_predicted_experience();
}
inline void CMsgAcknowledgeXP::_internal_set_predicted_experience(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  predicted_experience_ = value;
}
inline void CMsgAcknowledgeXP::set_predicted_experience(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_predicted_experience(value);
  // @@protoc_insertion_point(field_set:CMsgAcknowledgeXP.predicted_experience)
}

// -------------------------------------------------------------------

// CMsgTFXPSource

// optional .CMsgTFXPSource.XPSourceType type = 1 [default = SOURCE_SCORE, (.key_field) = true];
inline bool CMsgTFXPSource::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgTFXPSource::has_type() const {
  return _internal_has_type();
}
inline void CMsgTFXPSource::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::CMsgTFXPSource_XPSourceType CMsgTFXPSource::_internal_type() const {
  return static_cast< ::CMsgTFXPSource_XPSourceType >(type_);
}
inline ::CMsgTFXPSource_XPSourceType CMsgTFXPSource::type() const {
  // @@protoc_insertion_point(field_get:CMsgTFXPSource.type)
  return _internal_type();
}
inline void CMsgTFXPSource::_internal_set_type(::CMsgTFXPSource_XPSourceType value) {
  assert(::CMsgTFXPSource_XPSourceType_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  type_ = value;
}
inline void CMsgTFXPSource::set_type(::CMsgTFXPSource_XPSourceType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:CMsgTFXPSource.type)
}

// optional int32 amount = 2;
inline bool CMsgTFXPSource::_internal_has_amount() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgTFXPSource::has_amount() const {
  return _internal_has_amount();
}
inline void CMsgTFXPSource::clear_amount() {
  amount_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgTFXPSource::_internal_amount() const {
  return amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgTFXPSource::amount() const {
  // @@protoc_insertion_point(field_get:CMsgTFXPSource.amount)
  return _internal_amount();
}
inline void CMsgTFXPSource::_internal_set_amount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  amount_ = value;
}
inline void CMsgTFXPSource::set_amount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:CMsgTFXPSource.amount)
}

// optional int32 match_group = 3;
inline bool CMsgTFXPSource::_internal_has_match_group() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgTFXPSource::has_match_group() const {
  return _internal_has_match_group();
}
inline void CMsgTFXPSource::clear_match_group() {
  match_group_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgTFXPSource::_internal_match_group() const {
  return match_group_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgTFXPSource::match_group() const {
  // @@protoc_insertion_point(field_get:CMsgTFXPSource.match_group)
  return _internal_match_group();
}
inline void CMsgTFXPSource::_internal_set_match_group(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  match_group_ = value;
}
inline void CMsgTFXPSource::set_match_group(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_match_group(value);
  // @@protoc_insertion_point(field_set:CMsgTFXPSource.match_group)
}

// optional uint32 account_id = 4 [(.key_field) = true];
inline bool CMsgTFXPSource::_internal_has_account_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgTFXPSource::has_account_id() const {
  return _internal_has_account_id();
}
inline void CMsgTFXPSource::clear_account_id() {
  account_id_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgTFXPSource::_internal_account_id() const {
  return account_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgTFXPSource::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgTFXPSource.account_id)
  return _internal_account_id();
}
inline void CMsgTFXPSource::_internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  account_id_ = value;
}
inline void CMsgTFXPSource::set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgTFXPSource.account_id)
}

// optional uint64 match_id = 5 [(.key_field) = true];
inline bool CMsgTFXPSource::_internal_has_match_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgTFXPSource::has_match_id() const {
  return _internal_has_match_id();
}
inline void CMsgTFXPSource::clear_match_id() {
  match_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgTFXPSource::_internal_match_id() const {
  return match_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgTFXPSource::match_id() const {
  // @@protoc_insertion_point(field_get:CMsgTFXPSource.match_id)
  return _internal_match_id();
}
inline void CMsgTFXPSource::_internal_set_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  match_id_ = value;
}
inline void CMsgTFXPSource::set_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_match_id(value);
  // @@protoc_insertion_point(field_set:CMsgTFXPSource.match_id)
}

// -------------------------------------------------------------------

// CMsgTFXPSourceBreakdown

// repeated .CMsgTFXPSource sources = 1;
inline int CMsgTFXPSourceBreakdown::_internal_sources_size() const {
  return sources_.size();
}
inline int CMsgTFXPSourceBreakdown::sources_size() const {
  return _internal_sources_size();
}
inline void CMsgTFXPSourceBreakdown::clear_sources() {
  sources_.Clear();
}
inline ::CMsgTFXPSource* CMsgTFXPSourceBreakdown::mutable_sources(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgTFXPSourceBreakdown.sources)
  return sources_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgTFXPSource >*
CMsgTFXPSourceBreakdown::mutable_sources() {
  // @@protoc_insertion_point(field_mutable_list:CMsgTFXPSourceBreakdown.sources)
  return &sources_;
}
inline const ::CMsgTFXPSource& CMsgTFXPSourceBreakdown::_internal_sources(int index) const {
  return sources_.Get(index);
}
inline const ::CMsgTFXPSource& CMsgTFXPSourceBreakdown::sources(int index) const {
  // @@protoc_insertion_point(field_get:CMsgTFXPSourceBreakdown.sources)
  return _internal_sources(index);
}
inline ::CMsgTFXPSource* CMsgTFXPSourceBreakdown::_internal_add_sources() {
  return sources_.Add();
}
inline ::CMsgTFXPSource* CMsgTFXPSourceBreakdown::add_sources() {
  // @@protoc_insertion_point(field_add:CMsgTFXPSourceBreakdown.sources)
  return _internal_add_sources();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgTFXPSource >&
CMsgTFXPSourceBreakdown::sources() const {
  // @@protoc_insertion_point(field_list:CMsgTFXPSourceBreakdown.sources)
  return sources_;
}

// -------------------------------------------------------------------

// CMsgTFClientInit

// optional uint32 client_version = 1;
inline bool CMsgTFClientInit::_internal_has_client_version() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgTFClientInit::has_client_version() const {
  return _internal_has_client_version();
}
inline void CMsgTFClientInit::clear_client_version() {
  client_version_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgTFClientInit::_internal_client_version() const {
  return client_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgTFClientInit::client_version() const {
  // @@protoc_insertion_point(field_get:CMsgTFClientInit.client_version)
  return _internal_client_version();
}
inline void CMsgTFClientInit::_internal_set_client_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  client_version_ = value;
}
inline void CMsgTFClientInit::set_client_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_client_version(value);
  // @@protoc_insertion_point(field_set:CMsgTFClientInit.client_version)
}

// optional int32 language = 2;
inline bool CMsgTFClientInit::_internal_has_language() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgTFClientInit::has_language() const {
  return _internal_has_language();
}
inline void CMsgTFClientInit::clear_language() {
  language_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgTFClientInit::_internal_language() const {
  return language_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgTFClientInit::language() const {
  // @@protoc_insertion_point(field_get:CMsgTFClientInit.language)
  return _internal_language();
}
inline void CMsgTFClientInit::_internal_set_language(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  language_ = value;
}
inline void CMsgTFClientInit::set_language(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_language(value);
  // @@protoc_insertion_point(field_set:CMsgTFClientInit.language)
}

// -------------------------------------------------------------------

// CMsgGCNotification

// optional uint64 notification_id = 1 [(.key_field) = true];
inline bool CMsgGCNotification::_internal_has_notification_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCNotification::has_notification_id() const {
  return _internal_has_notification_id();
}
inline void CMsgGCNotification::clear_notification_id() {
  notification_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCNotification::_internal_notification_id() const {
  return notification_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCNotification::notification_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCNotification.notification_id)
  return _internal_notification_id();
}
inline void CMsgGCNotification::_internal_set_notification_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  notification_id_ = value;
}
inline void CMsgGCNotification::set_notification_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_notification_id(value);
  // @@protoc_insertion_point(field_set:CMsgGCNotification.notification_id)
}

// optional uint32 account_id = 2;
inline bool CMsgGCNotification::_internal_has_account_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGCNotification::has_account_id() const {
  return _internal_has_account_id();
}
inline void CMsgGCNotification::clear_account_id() {
  account_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCNotification::_internal_account_id() const {
  return account_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCNotification::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCNotification.account_id)
  return _internal_account_id();
}
inline void CMsgGCNotification::_internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  account_id_ = value;
}
inline void CMsgGCNotification::set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgGCNotification.account_id)
}

// optional fixed32 expiration_time = 3;
inline bool CMsgGCNotification::_internal_has_expiration_time() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgGCNotification::has_expiration_time() const {
  return _internal_has_expiration_time();
}
inline void CMsgGCNotification::clear_expiration_time() {
  expiration_time_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCNotification::_internal_expiration_time() const {
  return expiration_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCNotification::expiration_time() const {
  // @@protoc_insertion_point(field_get:CMsgGCNotification.expiration_time)
  return _internal_expiration_time();
}
inline void CMsgGCNotification::_internal_set_expiration_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  expiration_time_ = value;
}
inline void CMsgGCNotification::set_expiration_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_expiration_time(value);
  // @@protoc_insertion_point(field_set:CMsgGCNotification.expiration_time)
}

// optional .CMsgGCNotification.NotificationType type = 4 [default = NOTIFICATION_CUSTOM_STRING];
inline bool CMsgGCNotification::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgGCNotification::has_type() const {
  return _internal_has_type();
}
inline void CMsgGCNotification::clear_type() {
  type_ = 1;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::CMsgGCNotification_NotificationType CMsgGCNotification::_internal_type() const {
  return static_cast< ::CMsgGCNotification_NotificationType >(type_);
}
inline ::CMsgGCNotification_NotificationType CMsgGCNotification::type() const {
  // @@protoc_insertion_point(field_get:CMsgGCNotification.type)
  return _internal_type();
}
inline void CMsgGCNotification::_internal_set_type(::CMsgGCNotification_NotificationType value) {
  assert(::CMsgGCNotification_NotificationType_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  type_ = value;
}
inline void CMsgGCNotification::set_type(::CMsgGCNotification_NotificationType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:CMsgGCNotification.type)
}

// optional string notification_string = 5;
inline bool CMsgGCNotification::_internal_has_notification_string() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCNotification::has_notification_string() const {
  return _internal_has_notification_string();
}
inline void CMsgGCNotification::clear_notification_string() {
  notification_string_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgGCNotification::notification_string() const {
  // @@protoc_insertion_point(field_get:CMsgGCNotification.notification_string)
  return _internal_notification_string();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgGCNotification::set_notification_string(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 notification_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgGCNotification.notification_string)
}
inline std::string* CMsgGCNotification::mutable_notification_string() {
  // @@protoc_insertion_point(field_mutable:CMsgGCNotification.notification_string)
  return _internal_mutable_notification_string();
}
inline const std::string& CMsgGCNotification::_internal_notification_string() const {
  return notification_string_.Get();
}
inline void CMsgGCNotification::_internal_set_notification_string(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  notification_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgGCNotification::_internal_mutable_notification_string() {
  _has_bits_[0] |= 0x00000001u;
  return notification_string_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgGCNotification::release_notification_string() {
  // @@protoc_insertion_point(field_release:CMsgGCNotification.notification_string)
  if (!_internal_has_notification_string()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return notification_string_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CMsgGCNotification::set_allocated_notification_string(std::string* notification_string) {
  if (notification_string != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  notification_string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), notification_string,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CMsgGCNotification.notification_string)
}

// -------------------------------------------------------------------

// CMsgGCNotificationQueue

// repeated .CMsgGCNotification notifications = 1;
inline int CMsgGCNotificationQueue::_internal_notifications_size() const {
  return notifications_.size();
}
inline int CMsgGCNotificationQueue::notifications_size() const {
  return _internal_notifications_size();
}
inline void CMsgGCNotificationQueue::clear_notifications() {
  notifications_.Clear();
}
inline ::CMsgGCNotification* CMsgGCNotificationQueue::mutable_notifications(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGCNotificationQueue.notifications)
  return notifications_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCNotification >*
CMsgGCNotificationQueue::mutable_notifications() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCNotificationQueue.notifications)
  return &notifications_;
}
inline const ::CMsgGCNotification& CMsgGCNotificationQueue::_internal_notifications(int index) const {
  return notifications_.Get(index);
}
inline const ::CMsgGCNotification& CMsgGCNotificationQueue::notifications(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCNotificationQueue.notifications)
  return _internal_notifications(index);
}
inline ::CMsgGCNotification* CMsgGCNotificationQueue::_internal_add_notifications() {
  return notifications_.Add();
}
inline ::CMsgGCNotification* CMsgGCNotificationQueue::add_notifications() {
  // @@protoc_insertion_point(field_add:CMsgGCNotificationQueue.notifications)
  return _internal_add_notifications();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCNotification >&
CMsgGCNotificationQueue::notifications() const {
  // @@protoc_insertion_point(field_list:CMsgGCNotificationQueue.notifications)
  return notifications_;
}

// -------------------------------------------------------------------

// CMsgNotificationAcknowledge

// optional uint32 account_id = 1;
inline bool CMsgNotificationAcknowledge::_internal_has_account_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgNotificationAcknowledge::has_account_id() const {
  return _internal_has_account_id();
}
inline void CMsgNotificationAcknowledge::clear_account_id() {
  account_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgNotificationAcknowledge::_internal_account_id() const {
  return account_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgNotificationAcknowledge::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgNotificationAcknowledge.account_id)
  return _internal_account_id();
}
inline void CMsgNotificationAcknowledge::_internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  account_id_ = value;
}
inline void CMsgNotificationAcknowledge::set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgNotificationAcknowledge.account_id)
}

// optional uint64 notification_id = 2;
inline bool CMsgNotificationAcknowledge::_internal_has_notification_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgNotificationAcknowledge::has_notification_id() const {
  return _internal_has_notification_id();
}
inline void CMsgNotificationAcknowledge::clear_notification_id() {
  notification_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgNotificationAcknowledge::_internal_notification_id() const {
  return notification_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgNotificationAcknowledge::notification_id() const {
  // @@protoc_insertion_point(field_get:CMsgNotificationAcknowledge.notification_id)
  return _internal_notification_id();
}
inline void CMsgNotificationAcknowledge::_internal_set_notification_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  notification_id_ = value;
}
inline void CMsgNotificationAcknowledge::set_notification_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_notification_id(value);
  // @@protoc_insertion_point(field_set:CMsgNotificationAcknowledge.notification_id)
}

// -------------------------------------------------------------------

// CMsgNotificationAcknowledgeReply

// -------------------------------------------------------------------

// CMsgGC_Match_Result_Player

// optional fixed64 steam_id = 1;
inline bool CMsgGC_Match_Result_Player::_internal_has_steam_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGC_Match_Result_Player::has_steam_id() const {
  return _internal_has_steam_id();
}
inline void CMsgGC_Match_Result_Player::clear_steam_id() {
  steam_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGC_Match_Result_Player::_internal_steam_id() const {
  return steam_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGC_Match_Result_Player::steam_id() const {
  // @@protoc_insertion_point(field_get:CMsgGC_Match_Result.Player.steam_id)
  return _internal_steam_id();
}
inline void CMsgGC_Match_Result_Player::_internal_set_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  steam_id_ = value;
}
inline void CMsgGC_Match_Result_Player::set_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_steam_id(value);
  // @@protoc_insertion_point(field_set:CMsgGC_Match_Result.Player.steam_id)
}

// optional uint64 original_party_id = 2;
inline bool CMsgGC_Match_Result_Player::_internal_has_original_party_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGC_Match_Result_Player::has_original_party_id() const {
  return _internal_has_original_party_id();
}
inline void CMsgGC_Match_Result_Player::clear_original_party_id() {
  original_party_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGC_Match_Result_Player::_internal_original_party_id() const {
  return original_party_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGC_Match_Result_Player::original_party_id() const {
  // @@protoc_insertion_point(field_get:CMsgGC_Match_Result.Player.original_party_id)
  return _internal_original_party_id();
}
inline void CMsgGC_Match_Result_Player::_internal_set_original_party_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  original_party_id_ = value;
}
inline void CMsgGC_Match_Result_Player::set_original_party_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_original_party_id(value);
  // @@protoc_insertion_point(field_set:CMsgGC_Match_Result.Player.original_party_id)
}

// optional uint32 team = 3;
inline bool CMsgGC_Match_Result_Player::_internal_has_team() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGC_Match_Result_Player::has_team() const {
  return _internal_has_team();
}
inline void CMsgGC_Match_Result_Player::clear_team() {
  team_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_Match_Result_Player::_internal_team() const {
  return team_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_Match_Result_Player::team() const {
  // @@protoc_insertion_point(field_get:CMsgGC_Match_Result.Player.team)
  return _internal_team();
}
inline void CMsgGC_Match_Result_Player::_internal_set_team(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  team_ = value;
}
inline void CMsgGC_Match_Result_Player::set_team(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_team(value);
  // @@protoc_insertion_point(field_set:CMsgGC_Match_Result.Player.team)
}

// optional uint32 score = 4;
inline bool CMsgGC_Match_Result_Player::_internal_has_score() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgGC_Match_Result_Player::has_score() const {
  return _internal_has_score();
}
inline void CMsgGC_Match_Result_Player::clear_score() {
  score_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_Match_Result_Player::_internal_score() const {
  return score_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_Match_Result_Player::score() const {
  // @@protoc_insertion_point(field_get:CMsgGC_Match_Result.Player.score)
  return _internal_score();
}
inline void CMsgGC_Match_Result_Player::_internal_set_score(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  score_ = value;
}
inline void CMsgGC_Match_Result_Player::set_score(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:CMsgGC_Match_Result.Player.score)
}

// optional uint32 ping = 5;
inline bool CMsgGC_Match_Result_Player::_internal_has_ping() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgGC_Match_Result_Player::has_ping() const {
  return _internal_has_ping();
}
inline void CMsgGC_Match_Result_Player::clear_ping() {
  ping_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_Match_Result_Player::_internal_ping() const {
  return ping_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_Match_Result_Player::ping() const {
  // @@protoc_insertion_point(field_get:CMsgGC_Match_Result.Player.ping)
  return _internal_ping();
}
inline void CMsgGC_Match_Result_Player::_internal_set_ping(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  ping_ = value;
}
inline void CMsgGC_Match_Result_Player::set_ping(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ping(value);
  // @@protoc_insertion_point(field_set:CMsgGC_Match_Result.Player.ping)
}

// optional uint32 flags = 6;
inline bool CMsgGC_Match_Result_Player::_internal_has_flags() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgGC_Match_Result_Player::has_flags() const {
  return _internal_has_flags();
}
inline void CMsgGC_Match_Result_Player::clear_flags() {
  flags_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_Match_Result_Player::_internal_flags() const {
  return flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_Match_Result_Player::flags() const {
  // @@protoc_insertion_point(field_get:CMsgGC_Match_Result.Player.flags)
  return _internal_flags();
}
inline void CMsgGC_Match_Result_Player::_internal_set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  flags_ = value;
}
inline void CMsgGC_Match_Result_Player::set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:CMsgGC_Match_Result.Player.flags)
}

// optional uint32 rank = 9;
inline bool CMsgGC_Match_Result_Player::_internal_has_rank() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgGC_Match_Result_Player::has_rank() const {
  return _internal_has_rank();
}
inline void CMsgGC_Match_Result_Player::clear_rank() {
  rank_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_Match_Result_Player::_internal_rank() const {
  return rank_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_Match_Result_Player::rank() const {
  // @@protoc_insertion_point(field_get:CMsgGC_Match_Result.Player.rank)
  return _internal_rank();
}
inline void CMsgGC_Match_Result_Player::_internal_set_rank(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  rank_ = value;
}
inline void CMsgGC_Match_Result_Player::set_rank(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rank(value);
  // @@protoc_insertion_point(field_set:CMsgGC_Match_Result.Player.rank)
}

// optional uint32 classes_played = 10;
inline bool CMsgGC_Match_Result_Player::_internal_has_classes_played() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgGC_Match_Result_Player::has_classes_played() const {
  return _internal_has_classes_played();
}
inline void CMsgGC_Match_Result_Player::clear_classes_played() {
  classes_played_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_Match_Result_Player::_internal_classes_played() const {
  return classes_played_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_Match_Result_Player::classes_played() const {
  // @@protoc_insertion_point(field_get:CMsgGC_Match_Result.Player.classes_played)
  return _internal_classes_played();
}
inline void CMsgGC_Match_Result_Player::_internal_set_classes_played(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  classes_played_ = value;
}
inline void CMsgGC_Match_Result_Player::set_classes_played(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_classes_played(value);
  // @@protoc_insertion_point(field_set:CMsgGC_Match_Result.Player.classes_played)
}

// optional uint32 kills = 11;
inline bool CMsgGC_Match_Result_Player::_internal_has_kills() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgGC_Match_Result_Player::has_kills() const {
  return _internal_has_kills();
}
inline void CMsgGC_Match_Result_Player::clear_kills() {
  kills_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_Match_Result_Player::_internal_kills() const {
  return kills_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_Match_Result_Player::kills() const {
  // @@protoc_insertion_point(field_get:CMsgGC_Match_Result.Player.kills)
  return _internal_kills();
}
inline void CMsgGC_Match_Result_Player::_internal_set_kills(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  kills_ = value;
}
inline void CMsgGC_Match_Result_Player::set_kills(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_kills(value);
  // @@protoc_insertion_point(field_set:CMsgGC_Match_Result.Player.kills)
}

// optional uint32 deaths = 12;
inline bool CMsgGC_Match_Result_Player::_internal_has_deaths() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgGC_Match_Result_Player::has_deaths() const {
  return _internal_has_deaths();
}
inline void CMsgGC_Match_Result_Player::clear_deaths() {
  deaths_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_Match_Result_Player::_internal_deaths() const {
  return deaths_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_Match_Result_Player::deaths() const {
  // @@protoc_insertion_point(field_get:CMsgGC_Match_Result.Player.deaths)
  return _internal_deaths();
}
inline void CMsgGC_Match_Result_Player::_internal_set_deaths(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  deaths_ = value;
}
inline void CMsgGC_Match_Result_Player::set_deaths(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_deaths(value);
  // @@protoc_insertion_point(field_set:CMsgGC_Match_Result.Player.deaths)
}

// optional uint32 damage = 13;
inline bool CMsgGC_Match_Result_Player::_internal_has_damage() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgGC_Match_Result_Player::has_damage() const {
  return _internal_has_damage();
}
inline void CMsgGC_Match_Result_Player::clear_damage() {
  damage_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_Match_Result_Player::_internal_damage() const {
  return damage_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_Match_Result_Player::damage() const {
  // @@protoc_insertion_point(field_get:CMsgGC_Match_Result.Player.damage)
  return _internal_damage();
}
inline void CMsgGC_Match_Result_Player::_internal_set_damage(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  damage_ = value;
}
inline void CMsgGC_Match_Result_Player::set_damage(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_damage(value);
  // @@protoc_insertion_point(field_set:CMsgGC_Match_Result.Player.damage)
}

// optional uint32 healing = 14;
inline bool CMsgGC_Match_Result_Player::_internal_has_healing() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CMsgGC_Match_Result_Player::has_healing() const {
  return _internal_has_healing();
}
inline void CMsgGC_Match_Result_Player::clear_healing() {
  healing_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_Match_Result_Player::_internal_healing() const {
  return healing_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_Match_Result_Player::healing() const {
  // @@protoc_insertion_point(field_get:CMsgGC_Match_Result.Player.healing)
  return _internal_healing();
}
inline void CMsgGC_Match_Result_Player::_internal_set_healing(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  healing_ = value;
}
inline void CMsgGC_Match_Result_Player::set_healing(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_healing(value);
  // @@protoc_insertion_point(field_set:CMsgGC_Match_Result.Player.healing)
}

// optional uint32 support = 15;
inline bool CMsgGC_Match_Result_Player::_internal_has_support() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CMsgGC_Match_Result_Player::has_support() const {
  return _internal_has_support();
}
inline void CMsgGC_Match_Result_Player::clear_support() {
  support_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_Match_Result_Player::_internal_support() const {
  return support_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_Match_Result_Player::support() const {
  // @@protoc_insertion_point(field_get:CMsgGC_Match_Result.Player.support)
  return _internal_support();
}
inline void CMsgGC_Match_Result_Player::_internal_set_support(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  support_ = value;
}
inline void CMsgGC_Match_Result_Player::set_support(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_support(value);
  // @@protoc_insertion_point(field_set:CMsgGC_Match_Result.Player.support)
}

// optional uint32 score_medal = 16;
inline bool CMsgGC_Match_Result_Player::_internal_has_score_medal() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CMsgGC_Match_Result_Player::has_score_medal() const {
  return _internal_has_score_medal();
}
inline void CMsgGC_Match_Result_Player::clear_score_medal() {
  score_medal_ = 0u;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_Match_Result_Player::_internal_score_medal() const {
  return score_medal_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_Match_Result_Player::score_medal() const {
  // @@protoc_insertion_point(field_get:CMsgGC_Match_Result.Player.score_medal)
  return _internal_score_medal();
}
inline void CMsgGC_Match_Result_Player::_internal_set_score_medal(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00002000u;
  score_medal_ = value;
}
inline void CMsgGC_Match_Result_Player::set_score_medal(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_score_medal(value);
  // @@protoc_insertion_point(field_set:CMsgGC_Match_Result.Player.score_medal)
}

// optional uint32 kills_medal = 17;
inline bool CMsgGC_Match_Result_Player::_internal_has_kills_medal() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CMsgGC_Match_Result_Player::has_kills_medal() const {
  return _internal_has_kills_medal();
}
inline void CMsgGC_Match_Result_Player::clear_kills_medal() {
  kills_medal_ = 0u;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_Match_Result_Player::_internal_kills_medal() const {
  return kills_medal_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_Match_Result_Player::kills_medal() const {
  // @@protoc_insertion_point(field_get:CMsgGC_Match_Result.Player.kills_medal)
  return _internal_kills_medal();
}
inline void CMsgGC_Match_Result_Player::_internal_set_kills_medal(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00004000u;
  kills_medal_ = value;
}
inline void CMsgGC_Match_Result_Player::set_kills_medal(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_kills_medal(value);
  // @@protoc_insertion_point(field_set:CMsgGC_Match_Result.Player.kills_medal)
}

// optional uint32 damage_medal = 18;
inline bool CMsgGC_Match_Result_Player::_internal_has_damage_medal() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CMsgGC_Match_Result_Player::has_damage_medal() const {
  return _internal_has_damage_medal();
}
inline void CMsgGC_Match_Result_Player::clear_damage_medal() {
  damage_medal_ = 0u;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_Match_Result_Player::_internal_damage_medal() const {
  return damage_medal_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_Match_Result_Player::damage_medal() const {
  // @@protoc_insertion_point(field_get:CMsgGC_Match_Result.Player.damage_medal)
  return _internal_damage_medal();
}
inline void CMsgGC_Match_Result_Player::_internal_set_damage_medal(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00008000u;
  damage_medal_ = value;
}
inline void CMsgGC_Match_Result_Player::set_damage_medal(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_damage_medal(value);
  // @@protoc_insertion_point(field_set:CMsgGC_Match_Result.Player.damage_medal)
}

// optional uint32 healing_medal = 19;
inline bool CMsgGC_Match_Result_Player::_internal_has_healing_medal() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool CMsgGC_Match_Result_Player::has_healing_medal() const {
  return _internal_has_healing_medal();
}
inline void CMsgGC_Match_Result_Player::clear_healing_medal() {
  healing_medal_ = 0u;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_Match_Result_Player::_internal_healing_medal() const {
  return healing_medal_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_Match_Result_Player::healing_medal() const {
  // @@protoc_insertion_point(field_get:CMsgGC_Match_Result.Player.healing_medal)
  return _internal_healing_medal();
}
inline void CMsgGC_Match_Result_Player::_internal_set_healing_medal(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00010000u;
  healing_medal_ = value;
}
inline void CMsgGC_Match_Result_Player::set_healing_medal(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_healing_medal(value);
  // @@protoc_insertion_point(field_set:CMsgGC_Match_Result.Player.healing_medal)
}

// optional uint32 support_medal = 20;
inline bool CMsgGC_Match_Result_Player::_internal_has_support_medal() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool CMsgGC_Match_Result_Player::has_support_medal() const {
  return _internal_has_support_medal();
}
inline void CMsgGC_Match_Result_Player::clear_support_medal() {
  support_medal_ = 0u;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_Match_Result_Player::_internal_support_medal() const {
  return support_medal_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_Match_Result_Player::support_medal() const {
  // @@protoc_insertion_point(field_get:CMsgGC_Match_Result.Player.support_medal)
  return _internal_support_medal();
}
inline void CMsgGC_Match_Result_Player::_internal_set_support_medal(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00020000u;
  support_medal_ = value;
}
inline void CMsgGC_Match_Result_Player::set_support_medal(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_support_medal(value);
  // @@protoc_insertion_point(field_set:CMsgGC_Match_Result.Player.support_medal)
}

// repeated .CMsgTFXPSource xp_breakdown = 21;
inline int CMsgGC_Match_Result_Player::_internal_xp_breakdown_size() const {
  return xp_breakdown_.size();
}
inline int CMsgGC_Match_Result_Player::xp_breakdown_size() const {
  return _internal_xp_breakdown_size();
}
inline void CMsgGC_Match_Result_Player::clear_xp_breakdown() {
  xp_breakdown_.Clear();
}
inline ::CMsgTFXPSource* CMsgGC_Match_Result_Player::mutable_xp_breakdown(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGC_Match_Result.Player.xp_breakdown)
  return xp_breakdown_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgTFXPSource >*
CMsgGC_Match_Result_Player::mutable_xp_breakdown() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGC_Match_Result.Player.xp_breakdown)
  return &xp_breakdown_;
}
inline const ::CMsgTFXPSource& CMsgGC_Match_Result_Player::_internal_xp_breakdown(int index) const {
  return xp_breakdown_.Get(index);
}
inline const ::CMsgTFXPSource& CMsgGC_Match_Result_Player::xp_breakdown(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGC_Match_Result.Player.xp_breakdown)
  return _internal_xp_breakdown(index);
}
inline ::CMsgTFXPSource* CMsgGC_Match_Result_Player::_internal_add_xp_breakdown() {
  return xp_breakdown_.Add();
}
inline ::CMsgTFXPSource* CMsgGC_Match_Result_Player::add_xp_breakdown() {
  // @@protoc_insertion_point(field_add:CMsgGC_Match_Result.Player.xp_breakdown)
  return _internal_add_xp_breakdown();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgTFXPSource >&
CMsgGC_Match_Result_Player::xp_breakdown() const {
  // @@protoc_insertion_point(field_list:CMsgGC_Match_Result.Player.xp_breakdown)
  return xp_breakdown_;
}

// optional uint32 leave_time = 22;
inline bool CMsgGC_Match_Result_Player::_internal_has_leave_time() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool CMsgGC_Match_Result_Player::has_leave_time() const {
  return _internal_has_leave_time();
}
inline void CMsgGC_Match_Result_Player::clear_leave_time() {
  leave_time_ = 0u;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_Match_Result_Player::_internal_leave_time() const {
  return leave_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_Match_Result_Player::leave_time() const {
  // @@protoc_insertion_point(field_get:CMsgGC_Match_Result.Player.leave_time)
  return _internal_leave_time();
}
inline void CMsgGC_Match_Result_Player::_internal_set_leave_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00040000u;
  leave_time_ = value;
}
inline void CMsgGC_Match_Result_Player::set_leave_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_leave_time(value);
  // @@protoc_insertion_point(field_set:CMsgGC_Match_Result.Player.leave_time)
}

// optional .TFMatchLeaveReason leave_reason = 23 [default = TFMatchLeaveReason_UNSPECIFIED];
inline bool CMsgGC_Match_Result_Player::_internal_has_leave_reason() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool CMsgGC_Match_Result_Player::has_leave_reason() const {
  return _internal_has_leave_reason();
}
inline void CMsgGC_Match_Result_Player::clear_leave_reason() {
  leave_reason_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::TFMatchLeaveReason CMsgGC_Match_Result_Player::_internal_leave_reason() const {
  return static_cast< ::TFMatchLeaveReason >(leave_reason_);
}
inline ::TFMatchLeaveReason CMsgGC_Match_Result_Player::leave_reason() const {
  // @@protoc_insertion_point(field_get:CMsgGC_Match_Result.Player.leave_reason)
  return _internal_leave_reason();
}
inline void CMsgGC_Match_Result_Player::_internal_set_leave_reason(::TFMatchLeaveReason value) {
  assert(::TFMatchLeaveReason_IsValid(value));
  _has_bits_[0] |= 0x00080000u;
  leave_reason_ = value;
}
inline void CMsgGC_Match_Result_Player::set_leave_reason(::TFMatchLeaveReason value) {
  _internal_set_leave_reason(value);
  // @@protoc_insertion_point(field_set:CMsgGC_Match_Result.Player.leave_reason)
}

// optional uint32 connect_time = 24;
inline bool CMsgGC_Match_Result_Player::_internal_has_connect_time() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool CMsgGC_Match_Result_Player::has_connect_time() const {
  return _internal_has_connect_time();
}
inline void CMsgGC_Match_Result_Player::clear_connect_time() {
  connect_time_ = 0u;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_Match_Result_Player::_internal_connect_time() const {
  return connect_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_Match_Result_Player::connect_time() const {
  // @@protoc_insertion_point(field_get:CMsgGC_Match_Result.Player.connect_time)
  return _internal_connect_time();
}
inline void CMsgGC_Match_Result_Player::_internal_set_connect_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00100000u;
  connect_time_ = value;
}
inline void CMsgGC_Match_Result_Player::set_connect_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_connect_time(value);
  // @@protoc_insertion_point(field_set:CMsgGC_Match_Result.Player.connect_time)
}

// -------------------------------------------------------------------

// CMsgGC_Match_Result

// optional uint64 match_id = 1 [(.key_field) = true];
inline bool CMsgGC_Match_Result::_internal_has_match_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGC_Match_Result::has_match_id() const {
  return _internal_has_match_id();
}
inline void CMsgGC_Match_Result::clear_match_id() {
  match_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGC_Match_Result::_internal_match_id() const {
  return match_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGC_Match_Result::match_id() const {
  // @@protoc_insertion_point(field_get:CMsgGC_Match_Result.match_id)
  return _internal_match_id();
}
inline void CMsgGC_Match_Result::_internal_set_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  match_id_ = value;
}
inline void CMsgGC_Match_Result::set_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_match_id(value);
  // @@protoc_insertion_point(field_set:CMsgGC_Match_Result.match_id)
}

// optional int32 match_group = 2;
inline bool CMsgGC_Match_Result::_internal_has_match_group() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGC_Match_Result::has_match_group() const {
  return _internal_has_match_group();
}
inline void CMsgGC_Match_Result::clear_match_group() {
  match_group_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGC_Match_Result::_internal_match_group() const {
  return match_group_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGC_Match_Result::match_group() const {
  // @@protoc_insertion_point(field_get:CMsgGC_Match_Result.match_group)
  return _internal_match_group();
}
inline void CMsgGC_Match_Result::_internal_set_match_group(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  match_group_ = value;
}
inline void CMsgGC_Match_Result::set_match_group(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_match_group(value);
  // @@protoc_insertion_point(field_set:CMsgGC_Match_Result.match_group)
}

// optional .CMsgGC_Match_Result.Status status = 3 [default = MATCH_SUCCEEDED];
inline bool CMsgGC_Match_Result::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGC_Match_Result::has_status() const {
  return _internal_has_status();
}
inline void CMsgGC_Match_Result::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::CMsgGC_Match_Result_Status CMsgGC_Match_Result::_internal_status() const {
  return static_cast< ::CMsgGC_Match_Result_Status >(status_);
}
inline ::CMsgGC_Match_Result_Status CMsgGC_Match_Result::status() const {
  // @@protoc_insertion_point(field_get:CMsgGC_Match_Result.status)
  return _internal_status();
}
inline void CMsgGC_Match_Result::_internal_set_status(::CMsgGC_Match_Result_Status value) {
  assert(::CMsgGC_Match_Result_Status_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  status_ = value;
}
inline void CMsgGC_Match_Result::set_status(::CMsgGC_Match_Result_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:CMsgGC_Match_Result.status)
}

// optional uint32 duration = 4;
inline bool CMsgGC_Match_Result::_internal_has_duration() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgGC_Match_Result::has_duration() const {
  return _internal_has_duration();
}
inline void CMsgGC_Match_Result::clear_duration() {
  duration_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_Match_Result::_internal_duration() const {
  return duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_Match_Result::duration() const {
  // @@protoc_insertion_point(field_get:CMsgGC_Match_Result.duration)
  return _internal_duration();
}
inline void CMsgGC_Match_Result::_internal_set_duration(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  duration_ = value;
}
inline void CMsgGC_Match_Result::set_duration(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:CMsgGC_Match_Result.duration)
}

// optional uint32 red_score = 5;
inline bool CMsgGC_Match_Result::_internal_has_red_score() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgGC_Match_Result::has_red_score() const {
  return _internal_has_red_score();
}
inline void CMsgGC_Match_Result::clear_red_score() {
  red_score_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_Match_Result::_internal_red_score() const {
  return red_score_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_Match_Result::red_score() const {
  // @@protoc_insertion_point(field_get:CMsgGC_Match_Result.red_score)
  return _internal_red_score();
}
inline void CMsgGC_Match_Result::_internal_set_red_score(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  red_score_ = value;
}
inline void CMsgGC_Match_Result::set_red_score(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_red_score(value);
  // @@protoc_insertion_point(field_set:CMsgGC_Match_Result.red_score)
}

// optional uint32 blue_score = 6;
inline bool CMsgGC_Match_Result::_internal_has_blue_score() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgGC_Match_Result::has_blue_score() const {
  return _internal_has_blue_score();
}
inline void CMsgGC_Match_Result::clear_blue_score() {
  blue_score_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_Match_Result::_internal_blue_score() const {
  return blue_score_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_Match_Result::blue_score() const {
  // @@protoc_insertion_point(field_get:CMsgGC_Match_Result.blue_score)
  return _internal_blue_score();
}
inline void CMsgGC_Match_Result::_internal_set_blue_score(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  blue_score_ = value;
}
inline void CMsgGC_Match_Result::set_blue_score(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_blue_score(value);
  // @@protoc_insertion_point(field_set:CMsgGC_Match_Result.blue_score)
}

// optional uint32 winning_team = 7;
inline bool CMsgGC_Match_Result::_internal_has_winning_team() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgGC_Match_Result::has_winning_team() const {
  return _internal_has_winning_team();
}
inline void CMsgGC_Match_Result::clear_winning_team() {
  winning_team_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_Match_Result::_internal_winning_team() const {
  return winning_team_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_Match_Result::winning_team() const {
  // @@protoc_insertion_point(field_get:CMsgGC_Match_Result.winning_team)
  return _internal_winning_team();
}
inline void CMsgGC_Match_Result::_internal_set_winning_team(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  winning_team_ = value;
}
inline void CMsgGC_Match_Result::set_winning_team(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_winning_team(value);
  // @@protoc_insertion_point(field_set:CMsgGC_Match_Result.winning_team)
}

// optional uint32 map_index = 8;
inline bool CMsgGC_Match_Result::_internal_has_map_index() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgGC_Match_Result::has_map_index() const {
  return _internal_has_map_index();
}
inline void CMsgGC_Match_Result::clear_map_index() {
  map_index_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_Match_Result::_internal_map_index() const {
  return map_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_Match_Result::map_index() const {
  // @@protoc_insertion_point(field_get:CMsgGC_Match_Result.map_index)
  return _internal_map_index();
}
inline void CMsgGC_Match_Result::_internal_set_map_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  map_index_ = value;
}
inline void CMsgGC_Match_Result::set_map_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_map_index(value);
  // @@protoc_insertion_point(field_set:CMsgGC_Match_Result.map_index)
}

// optional uint32 game_type = 9 [default = 0];
inline bool CMsgGC_Match_Result::_internal_has_game_type() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgGC_Match_Result::has_game_type() const {
  return _internal_has_game_type();
}
inline void CMsgGC_Match_Result::clear_game_type() {
  game_type_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_Match_Result::_internal_game_type() const {
  return game_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_Match_Result::game_type() const {
  // @@protoc_insertion_point(field_get:CMsgGC_Match_Result.game_type)
  return _internal_game_type();
}
inline void CMsgGC_Match_Result::_internal_set_game_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  game_type_ = value;
}
inline void CMsgGC_Match_Result::set_game_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_game_type(value);
  // @@protoc_insertion_point(field_set:CMsgGC_Match_Result.game_type)
}

// repeated .CMsgGC_Match_Result.Player players = 10;
inline int CMsgGC_Match_Result::_internal_players_size() const {
  return players_.size();
}
inline int CMsgGC_Match_Result::players_size() const {
  return _internal_players_size();
}
inline void CMsgGC_Match_Result::clear_players() {
  players_.Clear();
}
inline ::CMsgGC_Match_Result_Player* CMsgGC_Match_Result::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGC_Match_Result.players)
  return players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGC_Match_Result_Player >*
CMsgGC_Match_Result::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGC_Match_Result.players)
  return &players_;
}
inline const ::CMsgGC_Match_Result_Player& CMsgGC_Match_Result::_internal_players(int index) const {
  return players_.Get(index);
}
inline const ::CMsgGC_Match_Result_Player& CMsgGC_Match_Result::players(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGC_Match_Result.players)
  return _internal_players(index);
}
inline ::CMsgGC_Match_Result_Player* CMsgGC_Match_Result::_internal_add_players() {
  return players_.Add();
}
inline ::CMsgGC_Match_Result_Player* CMsgGC_Match_Result::add_players() {
  // @@protoc_insertion_point(field_add:CMsgGC_Match_Result.players)
  return _internal_add_players();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGC_Match_Result_Player >&
CMsgGC_Match_Result::players() const {
  // @@protoc_insertion_point(field_list:CMsgGC_Match_Result.players)
  return players_;
}

// optional uint32 win_reason = 13;
inline bool CMsgGC_Match_Result::_internal_has_win_reason() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgGC_Match_Result::has_win_reason() const {
  return _internal_has_win_reason();
}
inline void CMsgGC_Match_Result::clear_win_reason() {
  win_reason_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_Match_Result::_internal_win_reason() const {
  return win_reason_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_Match_Result::win_reason() const {
  // @@protoc_insertion_point(field_get:CMsgGC_Match_Result.win_reason)
  return _internal_win_reason();
}
inline void CMsgGC_Match_Result::_internal_set_win_reason(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  win_reason_ = value;
}
inline void CMsgGC_Match_Result::set_win_reason(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_win_reason(value);
  // @@protoc_insertion_point(field_set:CMsgGC_Match_Result.win_reason)
}

// optional uint32 flags = 14;
inline bool CMsgGC_Match_Result::_internal_has_flags() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgGC_Match_Result::has_flags() const {
  return _internal_has_flags();
}
inline void CMsgGC_Match_Result::clear_flags() {
  flags_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_Match_Result::_internal_flags() const {
  return flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_Match_Result::flags() const {
  // @@protoc_insertion_point(field_get:CMsgGC_Match_Result.flags)
  return _internal_flags();
}
inline void CMsgGC_Match_Result::_internal_set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  flags_ = value;
}
inline void CMsgGC_Match_Result::set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:CMsgGC_Match_Result.flags)
}

// optional uint32 bots = 16;
inline bool CMsgGC_Match_Result::_internal_has_bots() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CMsgGC_Match_Result::has_bots() const {
  return _internal_has_bots();
}
inline void CMsgGC_Match_Result::clear_bots() {
  bots_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_Match_Result::_internal_bots() const {
  return bots_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_Match_Result::bots() const {
  // @@protoc_insertion_point(field_get:CMsgGC_Match_Result.bots)
  return _internal_bots();
}
inline void CMsgGC_Match_Result::_internal_set_bots(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  bots_ = value;
}
inline void CMsgGC_Match_Result::set_bots(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_bots(value);
  // @@protoc_insertion_point(field_set:CMsgGC_Match_Result.bots)
}

// -------------------------------------------------------------------

// CMsgGC_Match_ResultResponse

// -------------------------------------------------------------------

// CEconItemPreviewDataBlock

// optional .CSOEconItem econitem = 1;
inline bool CEconItemPreviewDataBlock::_internal_has_econitem() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || econitem_ != nullptr);
  return value;
}
inline bool CEconItemPreviewDataBlock::has_econitem() const {
  return _internal_has_econitem();
}
inline const ::CSOEconItem& CEconItemPreviewDataBlock::_internal_econitem() const {
  const ::CSOEconItem* p = econitem_;
  return p != nullptr ? *p : reinterpret_cast<const ::CSOEconItem&>(
      ::_CSOEconItem_default_instance_);
}
inline const ::CSOEconItem& CEconItemPreviewDataBlock::econitem() const {
  // @@protoc_insertion_point(field_get:CEconItemPreviewDataBlock.econitem)
  return _internal_econitem();
}
inline void CEconItemPreviewDataBlock::unsafe_arena_set_allocated_econitem(
    ::CSOEconItem* econitem) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(econitem_);
  }
  econitem_ = econitem;
  if (econitem) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CEconItemPreviewDataBlock.econitem)
}
inline ::CSOEconItem* CEconItemPreviewDataBlock::release_econitem() {
  _has_bits_[0] &= ~0x00000001u;
  ::CSOEconItem* temp = econitem_;
  econitem_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CSOEconItem* CEconItemPreviewDataBlock::unsafe_arena_release_econitem() {
  // @@protoc_insertion_point(field_release:CEconItemPreviewDataBlock.econitem)
  _has_bits_[0] &= ~0x00000001u;
  ::CSOEconItem* temp = econitem_;
  econitem_ = nullptr;
  return temp;
}
inline ::CSOEconItem* CEconItemPreviewDataBlock::_internal_mutable_econitem() {
  _has_bits_[0] |= 0x00000001u;
  if (econitem_ == nullptr) {
    auto* p = CreateMaybeMessage<::CSOEconItem>(GetArenaForAllocation());
    econitem_ = p;
  }
  return econitem_;
}
inline ::CSOEconItem* CEconItemPreviewDataBlock::mutable_econitem() {
  // @@protoc_insertion_point(field_mutable:CEconItemPreviewDataBlock.econitem)
  return _internal_mutable_econitem();
}
inline void CEconItemPreviewDataBlock::set_allocated_econitem(::CSOEconItem* econitem) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(econitem_);
  }
  if (econitem) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(econitem));
    if (message_arena != submessage_arena) {
      econitem = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, econitem, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  econitem_ = econitem;
  // @@protoc_insertion_point(field_set_allocated:CEconItemPreviewDataBlock.econitem)
}

// -------------------------------------------------------------------

// CMsgGC_Client2GCEconPreviewDataBlockRequest

// optional uint64 param_s = 1;
inline bool CMsgGC_Client2GCEconPreviewDataBlockRequest::_internal_has_param_s() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGC_Client2GCEconPreviewDataBlockRequest::has_param_s() const {
  return _internal_has_param_s();
}
inline void CMsgGC_Client2GCEconPreviewDataBlockRequest::clear_param_s() {
  param_s_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGC_Client2GCEconPreviewDataBlockRequest::_internal_param_s() const {
  return param_s_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGC_Client2GCEconPreviewDataBlockRequest::param_s() const {
  // @@protoc_insertion_point(field_get:CMsgGC_Client2GCEconPreviewDataBlockRequest.param_s)
  return _internal_param_s();
}
inline void CMsgGC_Client2GCEconPreviewDataBlockRequest::_internal_set_param_s(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  param_s_ = value;
}
inline void CMsgGC_Client2GCEconPreviewDataBlockRequest::set_param_s(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_param_s(value);
  // @@protoc_insertion_point(field_set:CMsgGC_Client2GCEconPreviewDataBlockRequest.param_s)
}

// optional uint64 param_a = 2;
inline bool CMsgGC_Client2GCEconPreviewDataBlockRequest::_internal_has_param_a() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGC_Client2GCEconPreviewDataBlockRequest::has_param_a() const {
  return _internal_has_param_a();
}
inline void CMsgGC_Client2GCEconPreviewDataBlockRequest::clear_param_a() {
  param_a_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGC_Client2GCEconPreviewDataBlockRequest::_internal_param_a() const {
  return param_a_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGC_Client2GCEconPreviewDataBlockRequest::param_a() const {
  // @@protoc_insertion_point(field_get:CMsgGC_Client2GCEconPreviewDataBlockRequest.param_a)
  return _internal_param_a();
}
inline void CMsgGC_Client2GCEconPreviewDataBlockRequest::_internal_set_param_a(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  param_a_ = value;
}
inline void CMsgGC_Client2GCEconPreviewDataBlockRequest::set_param_a(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_param_a(value);
  // @@protoc_insertion_point(field_set:CMsgGC_Client2GCEconPreviewDataBlockRequest.param_a)
}

// optional uint64 param_d = 3;
inline bool CMsgGC_Client2GCEconPreviewDataBlockRequest::_internal_has_param_d() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGC_Client2GCEconPreviewDataBlockRequest::has_param_d() const {
  return _internal_has_param_d();
}
inline void CMsgGC_Client2GCEconPreviewDataBlockRequest::clear_param_d() {
  param_d_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGC_Client2GCEconPreviewDataBlockRequest::_internal_param_d() const {
  return param_d_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGC_Client2GCEconPreviewDataBlockRequest::param_d() const {
  // @@protoc_insertion_point(field_get:CMsgGC_Client2GCEconPreviewDataBlockRequest.param_d)
  return _internal_param_d();
}
inline void CMsgGC_Client2GCEconPreviewDataBlockRequest::_internal_set_param_d(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  param_d_ = value;
}
inline void CMsgGC_Client2GCEconPreviewDataBlockRequest::set_param_d(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_param_d(value);
  // @@protoc_insertion_point(field_set:CMsgGC_Client2GCEconPreviewDataBlockRequest.param_d)
}

// optional uint64 param_m = 4;
inline bool CMsgGC_Client2GCEconPreviewDataBlockRequest::_internal_has_param_m() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgGC_Client2GCEconPreviewDataBlockRequest::has_param_m() const {
  return _internal_has_param_m();
}
inline void CMsgGC_Client2GCEconPreviewDataBlockRequest::clear_param_m() {
  param_m_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGC_Client2GCEconPreviewDataBlockRequest::_internal_param_m() const {
  return param_m_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGC_Client2GCEconPreviewDataBlockRequest::param_m() const {
  // @@protoc_insertion_point(field_get:CMsgGC_Client2GCEconPreviewDataBlockRequest.param_m)
  return _internal_param_m();
}
inline void CMsgGC_Client2GCEconPreviewDataBlockRequest::_internal_set_param_m(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  param_m_ = value;
}
inline void CMsgGC_Client2GCEconPreviewDataBlockRequest::set_param_m(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_param_m(value);
  // @@protoc_insertion_point(field_set:CMsgGC_Client2GCEconPreviewDataBlockRequest.param_m)
}

// -------------------------------------------------------------------

// CMsgGC_Client2GCEconPreviewDataBlockResponse

// optional .CEconItemPreviewDataBlock iteminfo = 1;
inline bool CMsgGC_Client2GCEconPreviewDataBlockResponse::_internal_has_iteminfo() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || iteminfo_ != nullptr);
  return value;
}
inline bool CMsgGC_Client2GCEconPreviewDataBlockResponse::has_iteminfo() const {
  return _internal_has_iteminfo();
}
inline void CMsgGC_Client2GCEconPreviewDataBlockResponse::clear_iteminfo() {
  if (iteminfo_ != nullptr) iteminfo_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CEconItemPreviewDataBlock& CMsgGC_Client2GCEconPreviewDataBlockResponse::_internal_iteminfo() const {
  const ::CEconItemPreviewDataBlock* p = iteminfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::CEconItemPreviewDataBlock&>(
      ::_CEconItemPreviewDataBlock_default_instance_);
}
inline const ::CEconItemPreviewDataBlock& CMsgGC_Client2GCEconPreviewDataBlockResponse::iteminfo() const {
  // @@protoc_insertion_point(field_get:CMsgGC_Client2GCEconPreviewDataBlockResponse.iteminfo)
  return _internal_iteminfo();
}
inline void CMsgGC_Client2GCEconPreviewDataBlockResponse::unsafe_arena_set_allocated_iteminfo(
    ::CEconItemPreviewDataBlock* iteminfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(iteminfo_);
  }
  iteminfo_ = iteminfo;
  if (iteminfo) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgGC_Client2GCEconPreviewDataBlockResponse.iteminfo)
}
inline ::CEconItemPreviewDataBlock* CMsgGC_Client2GCEconPreviewDataBlockResponse::release_iteminfo() {
  _has_bits_[0] &= ~0x00000001u;
  ::CEconItemPreviewDataBlock* temp = iteminfo_;
  iteminfo_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CEconItemPreviewDataBlock* CMsgGC_Client2GCEconPreviewDataBlockResponse::unsafe_arena_release_iteminfo() {
  // @@protoc_insertion_point(field_release:CMsgGC_Client2GCEconPreviewDataBlockResponse.iteminfo)
  _has_bits_[0] &= ~0x00000001u;
  ::CEconItemPreviewDataBlock* temp = iteminfo_;
  iteminfo_ = nullptr;
  return temp;
}
inline ::CEconItemPreviewDataBlock* CMsgGC_Client2GCEconPreviewDataBlockResponse::_internal_mutable_iteminfo() {
  _has_bits_[0] |= 0x00000001u;
  if (iteminfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::CEconItemPreviewDataBlock>(GetArenaForAllocation());
    iteminfo_ = p;
  }
  return iteminfo_;
}
inline ::CEconItemPreviewDataBlock* CMsgGC_Client2GCEconPreviewDataBlockResponse::mutable_iteminfo() {
  // @@protoc_insertion_point(field_mutable:CMsgGC_Client2GCEconPreviewDataBlockResponse.iteminfo)
  return _internal_mutable_iteminfo();
}
inline void CMsgGC_Client2GCEconPreviewDataBlockResponse::set_allocated_iteminfo(::CEconItemPreviewDataBlock* iteminfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete iteminfo_;
  }
  if (iteminfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CEconItemPreviewDataBlock>::GetOwningArena(iteminfo);
    if (message_arena != submessage_arena) {
      iteminfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, iteminfo, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  iteminfo_ = iteminfo;
  // @@protoc_insertion_point(field_set_allocated:CMsgGC_Client2GCEconPreviewDataBlockResponse.iteminfo)
}

// -------------------------------------------------------------------

// CSOTFLadderPlayerStats

// optional uint32 account_id = 1 [(.key_field) = true];
inline bool CSOTFLadderPlayerStats::_internal_has_account_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSOTFLadderPlayerStats::has_account_id() const {
  return _internal_has_account_id();
}
inline void CSOTFLadderPlayerStats::clear_account_id() {
  account_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFLadderPlayerStats::_internal_account_id() const {
  return account_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFLadderPlayerStats::account_id() const {
  // @@protoc_insertion_point(field_get:CSOTFLadderPlayerStats.account_id)
  return _internal_account_id();
}
inline void CSOTFLadderPlayerStats::_internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  account_id_ = value;
}
inline void CSOTFLadderPlayerStats::set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CSOTFLadderPlayerStats.account_id)
}

// optional int32 match_group = 2 [(.key_field) = true];
inline bool CSOTFLadderPlayerStats::_internal_has_match_group() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSOTFLadderPlayerStats::has_match_group() const {
  return _internal_has_match_group();
}
inline void CSOTFLadderPlayerStats::clear_match_group() {
  match_group_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSOTFLadderPlayerStats::_internal_match_group() const {
  return match_group_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSOTFLadderPlayerStats::match_group() const {
  // @@protoc_insertion_point(field_get:CSOTFLadderPlayerStats.match_group)
  return _internal_match_group();
}
inline void CSOTFLadderPlayerStats::_internal_set_match_group(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  match_group_ = value;
}
inline void CSOTFLadderPlayerStats::set_match_group(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_match_group(value);
  // @@protoc_insertion_point(field_set:CSOTFLadderPlayerStats.match_group)
}

// optional uint32 season_id = 3 [(.key_field) = true];
inline bool CSOTFLadderPlayerStats::_internal_has_season_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CSOTFLadderPlayerStats::has_season_id() const {
  return _internal_has_season_id();
}
inline void CSOTFLadderPlayerStats::clear_season_id() {
  season_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFLadderPlayerStats::_internal_season_id() const {
  return season_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFLadderPlayerStats::season_id() const {
  // @@protoc_insertion_point(field_get:CSOTFLadderPlayerStats.season_id)
  return _internal_season_id();
}
inline void CSOTFLadderPlayerStats::_internal_set_season_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  season_id_ = value;
}
inline void CSOTFLadderPlayerStats::set_season_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_season_id(value);
  // @@protoc_insertion_point(field_set:CSOTFLadderPlayerStats.season_id)
}

// optional uint32 games = 9;
inline bool CSOTFLadderPlayerStats::_internal_has_games() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CSOTFLadderPlayerStats::has_games() const {
  return _internal_has_games();
}
inline void CSOTFLadderPlayerStats::clear_games() {
  games_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFLadderPlayerStats::_internal_games() const {
  return games_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFLadderPlayerStats::games() const {
  // @@protoc_insertion_point(field_get:CSOTFLadderPlayerStats.games)
  return _internal_games();
}
inline void CSOTFLadderPlayerStats::_internal_set_games(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  games_ = value;
}
inline void CSOTFLadderPlayerStats::set_games(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_games(value);
  // @@protoc_insertion_point(field_set:CSOTFLadderPlayerStats.games)
}

// optional uint32 score = 10;
inline bool CSOTFLadderPlayerStats::_internal_has_score() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CSOTFLadderPlayerStats::has_score() const {
  return _internal_has_score();
}
inline void CSOTFLadderPlayerStats::clear_score() {
  score_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFLadderPlayerStats::_internal_score() const {
  return score_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFLadderPlayerStats::score() const {
  // @@protoc_insertion_point(field_get:CSOTFLadderPlayerStats.score)
  return _internal_score();
}
inline void CSOTFLadderPlayerStats::_internal_set_score(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  score_ = value;
}
inline void CSOTFLadderPlayerStats::set_score(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:CSOTFLadderPlayerStats.score)
}

// optional uint32 kills = 11;
inline bool CSOTFLadderPlayerStats::_internal_has_kills() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CSOTFLadderPlayerStats::has_kills() const {
  return _internal_has_kills();
}
inline void CSOTFLadderPlayerStats::clear_kills() {
  kills_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFLadderPlayerStats::_internal_kills() const {
  return kills_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFLadderPlayerStats::kills() const {
  // @@protoc_insertion_point(field_get:CSOTFLadderPlayerStats.kills)
  return _internal_kills();
}
inline void CSOTFLadderPlayerStats::_internal_set_kills(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  kills_ = value;
}
inline void CSOTFLadderPlayerStats::set_kills(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_kills(value);
  // @@protoc_insertion_point(field_set:CSOTFLadderPlayerStats.kills)
}

// optional uint32 deaths = 12;
inline bool CSOTFLadderPlayerStats::_internal_has_deaths() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CSOTFLadderPlayerStats::has_deaths() const {
  return _internal_has_deaths();
}
inline void CSOTFLadderPlayerStats::clear_deaths() {
  deaths_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFLadderPlayerStats::_internal_deaths() const {
  return deaths_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFLadderPlayerStats::deaths() const {
  // @@protoc_insertion_point(field_get:CSOTFLadderPlayerStats.deaths)
  return _internal_deaths();
}
inline void CSOTFLadderPlayerStats::_internal_set_deaths(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  deaths_ = value;
}
inline void CSOTFLadderPlayerStats::set_deaths(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_deaths(value);
  // @@protoc_insertion_point(field_set:CSOTFLadderPlayerStats.deaths)
}

// optional uint32 damage = 13;
inline bool CSOTFLadderPlayerStats::_internal_has_damage() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CSOTFLadderPlayerStats::has_damage() const {
  return _internal_has_damage();
}
inline void CSOTFLadderPlayerStats::clear_damage() {
  damage_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFLadderPlayerStats::_internal_damage() const {
  return damage_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFLadderPlayerStats::damage() const {
  // @@protoc_insertion_point(field_get:CSOTFLadderPlayerStats.damage)
  return _internal_damage();
}
inline void CSOTFLadderPlayerStats::_internal_set_damage(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  damage_ = value;
}
inline void CSOTFLadderPlayerStats::set_damage(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_damage(value);
  // @@protoc_insertion_point(field_set:CSOTFLadderPlayerStats.damage)
}

// optional uint32 healing = 14;
inline bool CSOTFLadderPlayerStats::_internal_has_healing() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CSOTFLadderPlayerStats::has_healing() const {
  return _internal_has_healing();
}
inline void CSOTFLadderPlayerStats::clear_healing() {
  healing_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFLadderPlayerStats::_internal_healing() const {
  return healing_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFLadderPlayerStats::healing() const {
  // @@protoc_insertion_point(field_get:CSOTFLadderPlayerStats.healing)
  return _internal_healing();
}
inline void CSOTFLadderPlayerStats::_internal_set_healing(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  healing_ = value;
}
inline void CSOTFLadderPlayerStats::set_healing(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_healing(value);
  // @@protoc_insertion_point(field_set:CSOTFLadderPlayerStats.healing)
}

// optional uint32 support = 15;
inline bool CSOTFLadderPlayerStats::_internal_has_support() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CSOTFLadderPlayerStats::has_support() const {
  return _internal_has_support();
}
inline void CSOTFLadderPlayerStats::clear_support() {
  support_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFLadderPlayerStats::_internal_support() const {
  return support_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFLadderPlayerStats::support() const {
  // @@protoc_insertion_point(field_get:CSOTFLadderPlayerStats.support)
  return _internal_support();
}
inline void CSOTFLadderPlayerStats::_internal_set_support(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  support_ = value;
}
inline void CSOTFLadderPlayerStats::set_support(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_support(value);
  // @@protoc_insertion_point(field_set:CSOTFLadderPlayerStats.support)
}

// optional uint32 score_bronze = 16;
inline bool CSOTFLadderPlayerStats::_internal_has_score_bronze() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CSOTFLadderPlayerStats::has_score_bronze() const {
  return _internal_has_score_bronze();
}
inline void CSOTFLadderPlayerStats::clear_score_bronze() {
  score_bronze_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFLadderPlayerStats::_internal_score_bronze() const {
  return score_bronze_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFLadderPlayerStats::score_bronze() const {
  // @@protoc_insertion_point(field_get:CSOTFLadderPlayerStats.score_bronze)
  return _internal_score_bronze();
}
inline void CSOTFLadderPlayerStats::_internal_set_score_bronze(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  score_bronze_ = value;
}
inline void CSOTFLadderPlayerStats::set_score_bronze(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_score_bronze(value);
  // @@protoc_insertion_point(field_set:CSOTFLadderPlayerStats.score_bronze)
}

// optional uint32 score_silver = 17;
inline bool CSOTFLadderPlayerStats::_internal_has_score_silver() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CSOTFLadderPlayerStats::has_score_silver() const {
  return _internal_has_score_silver();
}
inline void CSOTFLadderPlayerStats::clear_score_silver() {
  score_silver_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFLadderPlayerStats::_internal_score_silver() const {
  return score_silver_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFLadderPlayerStats::score_silver() const {
  // @@protoc_insertion_point(field_get:CSOTFLadderPlayerStats.score_silver)
  return _internal_score_silver();
}
inline void CSOTFLadderPlayerStats::_internal_set_score_silver(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  score_silver_ = value;
}
inline void CSOTFLadderPlayerStats::set_score_silver(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_score_silver(value);
  // @@protoc_insertion_point(field_set:CSOTFLadderPlayerStats.score_silver)
}

// optional uint32 score_gold = 18;
inline bool CSOTFLadderPlayerStats::_internal_has_score_gold() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CSOTFLadderPlayerStats::has_score_gold() const {
  return _internal_has_score_gold();
}
inline void CSOTFLadderPlayerStats::clear_score_gold() {
  score_gold_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFLadderPlayerStats::_internal_score_gold() const {
  return score_gold_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFLadderPlayerStats::score_gold() const {
  // @@protoc_insertion_point(field_get:CSOTFLadderPlayerStats.score_gold)
  return _internal_score_gold();
}
inline void CSOTFLadderPlayerStats::_internal_set_score_gold(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  score_gold_ = value;
}
inline void CSOTFLadderPlayerStats::set_score_gold(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_score_gold(value);
  // @@protoc_insertion_point(field_set:CSOTFLadderPlayerStats.score_gold)
}

// optional uint32 kills_bronze = 19;
inline bool CSOTFLadderPlayerStats::_internal_has_kills_bronze() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CSOTFLadderPlayerStats::has_kills_bronze() const {
  return _internal_has_kills_bronze();
}
inline void CSOTFLadderPlayerStats::clear_kills_bronze() {
  kills_bronze_ = 0u;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFLadderPlayerStats::_internal_kills_bronze() const {
  return kills_bronze_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFLadderPlayerStats::kills_bronze() const {
  // @@protoc_insertion_point(field_get:CSOTFLadderPlayerStats.kills_bronze)
  return _internal_kills_bronze();
}
inline void CSOTFLadderPlayerStats::_internal_set_kills_bronze(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00002000u;
  kills_bronze_ = value;
}
inline void CSOTFLadderPlayerStats::set_kills_bronze(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_kills_bronze(value);
  // @@protoc_insertion_point(field_set:CSOTFLadderPlayerStats.kills_bronze)
}

// optional uint32 kills_silver = 20;
inline bool CSOTFLadderPlayerStats::_internal_has_kills_silver() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CSOTFLadderPlayerStats::has_kills_silver() const {
  return _internal_has_kills_silver();
}
inline void CSOTFLadderPlayerStats::clear_kills_silver() {
  kills_silver_ = 0u;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFLadderPlayerStats::_internal_kills_silver() const {
  return kills_silver_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFLadderPlayerStats::kills_silver() const {
  // @@protoc_insertion_point(field_get:CSOTFLadderPlayerStats.kills_silver)
  return _internal_kills_silver();
}
inline void CSOTFLadderPlayerStats::_internal_set_kills_silver(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00004000u;
  kills_silver_ = value;
}
inline void CSOTFLadderPlayerStats::set_kills_silver(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_kills_silver(value);
  // @@protoc_insertion_point(field_set:CSOTFLadderPlayerStats.kills_silver)
}

// optional uint32 kills_gold = 21;
inline bool CSOTFLadderPlayerStats::_internal_has_kills_gold() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CSOTFLadderPlayerStats::has_kills_gold() const {
  return _internal_has_kills_gold();
}
inline void CSOTFLadderPlayerStats::clear_kills_gold() {
  kills_gold_ = 0u;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFLadderPlayerStats::_internal_kills_gold() const {
  return kills_gold_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFLadderPlayerStats::kills_gold() const {
  // @@protoc_insertion_point(field_get:CSOTFLadderPlayerStats.kills_gold)
  return _internal_kills_gold();
}
inline void CSOTFLadderPlayerStats::_internal_set_kills_gold(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00008000u;
  kills_gold_ = value;
}
inline void CSOTFLadderPlayerStats::set_kills_gold(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_kills_gold(value);
  // @@protoc_insertion_point(field_set:CSOTFLadderPlayerStats.kills_gold)
}

// optional uint32 damage_bronze = 22;
inline bool CSOTFLadderPlayerStats::_internal_has_damage_bronze() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool CSOTFLadderPlayerStats::has_damage_bronze() const {
  return _internal_has_damage_bronze();
}
inline void CSOTFLadderPlayerStats::clear_damage_bronze() {
  damage_bronze_ = 0u;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFLadderPlayerStats::_internal_damage_bronze() const {
  return damage_bronze_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFLadderPlayerStats::damage_bronze() const {
  // @@protoc_insertion_point(field_get:CSOTFLadderPlayerStats.damage_bronze)
  return _internal_damage_bronze();
}
inline void CSOTFLadderPlayerStats::_internal_set_damage_bronze(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00010000u;
  damage_bronze_ = value;
}
inline void CSOTFLadderPlayerStats::set_damage_bronze(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_damage_bronze(value);
  // @@protoc_insertion_point(field_set:CSOTFLadderPlayerStats.damage_bronze)
}

// optional uint32 damage_silver = 23;
inline bool CSOTFLadderPlayerStats::_internal_has_damage_silver() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool CSOTFLadderPlayerStats::has_damage_silver() const {
  return _internal_has_damage_silver();
}
inline void CSOTFLadderPlayerStats::clear_damage_silver() {
  damage_silver_ = 0u;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFLadderPlayerStats::_internal_damage_silver() const {
  return damage_silver_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFLadderPlayerStats::damage_silver() const {
  // @@protoc_insertion_point(field_get:CSOTFLadderPlayerStats.damage_silver)
  return _internal_damage_silver();
}
inline void CSOTFLadderPlayerStats::_internal_set_damage_silver(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00020000u;
  damage_silver_ = value;
}
inline void CSOTFLadderPlayerStats::set_damage_silver(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_damage_silver(value);
  // @@protoc_insertion_point(field_set:CSOTFLadderPlayerStats.damage_silver)
}

// optional uint32 damage_gold = 24;
inline bool CSOTFLadderPlayerStats::_internal_has_damage_gold() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool CSOTFLadderPlayerStats::has_damage_gold() const {
  return _internal_has_damage_gold();
}
inline void CSOTFLadderPlayerStats::clear_damage_gold() {
  damage_gold_ = 0u;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFLadderPlayerStats::_internal_damage_gold() const {
  return damage_gold_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFLadderPlayerStats::damage_gold() const {
  // @@protoc_insertion_point(field_get:CSOTFLadderPlayerStats.damage_gold)
  return _internal_damage_gold();
}
inline void CSOTFLadderPlayerStats::_internal_set_damage_gold(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00040000u;
  damage_gold_ = value;
}
inline void CSOTFLadderPlayerStats::set_damage_gold(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_damage_gold(value);
  // @@protoc_insertion_point(field_set:CSOTFLadderPlayerStats.damage_gold)
}

// optional uint32 healing_bronze = 25;
inline bool CSOTFLadderPlayerStats::_internal_has_healing_bronze() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool CSOTFLadderPlayerStats::has_healing_bronze() const {
  return _internal_has_healing_bronze();
}
inline void CSOTFLadderPlayerStats::clear_healing_bronze() {
  healing_bronze_ = 0u;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFLadderPlayerStats::_internal_healing_bronze() const {
  return healing_bronze_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFLadderPlayerStats::healing_bronze() const {
  // @@protoc_insertion_point(field_get:CSOTFLadderPlayerStats.healing_bronze)
  return _internal_healing_bronze();
}
inline void CSOTFLadderPlayerStats::_internal_set_healing_bronze(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00080000u;
  healing_bronze_ = value;
}
inline void CSOTFLadderPlayerStats::set_healing_bronze(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_healing_bronze(value);
  // @@protoc_insertion_point(field_set:CSOTFLadderPlayerStats.healing_bronze)
}

// optional uint32 healing_silver = 26;
inline bool CSOTFLadderPlayerStats::_internal_has_healing_silver() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool CSOTFLadderPlayerStats::has_healing_silver() const {
  return _internal_has_healing_silver();
}
inline void CSOTFLadderPlayerStats::clear_healing_silver() {
  healing_silver_ = 0u;
  _has_bits_[0] &= ~0x00200000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFLadderPlayerStats::_internal_healing_silver() const {
  return healing_silver_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFLadderPlayerStats::healing_silver() const {
  // @@protoc_insertion_point(field_get:CSOTFLadderPlayerStats.healing_silver)
  return _internal_healing_silver();
}
inline void CSOTFLadderPlayerStats::_internal_set_healing_silver(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00200000u;
  healing_silver_ = value;
}
inline void CSOTFLadderPlayerStats::set_healing_silver(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_healing_silver(value);
  // @@protoc_insertion_point(field_set:CSOTFLadderPlayerStats.healing_silver)
}

// optional uint32 healing_gold = 27;
inline bool CSOTFLadderPlayerStats::_internal_has_healing_gold() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool CSOTFLadderPlayerStats::has_healing_gold() const {
  return _internal_has_healing_gold();
}
inline void CSOTFLadderPlayerStats::clear_healing_gold() {
  healing_gold_ = 0u;
  _has_bits_[0] &= ~0x00400000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFLadderPlayerStats::_internal_healing_gold() const {
  return healing_gold_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFLadderPlayerStats::healing_gold() const {
  // @@protoc_insertion_point(field_get:CSOTFLadderPlayerStats.healing_gold)
  return _internal_healing_gold();
}
inline void CSOTFLadderPlayerStats::_internal_set_healing_gold(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00400000u;
  healing_gold_ = value;
}
inline void CSOTFLadderPlayerStats::set_healing_gold(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_healing_gold(value);
  // @@protoc_insertion_point(field_set:CSOTFLadderPlayerStats.healing_gold)
}

// optional uint32 support_bronze = 28;
inline bool CSOTFLadderPlayerStats::_internal_has_support_bronze() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool CSOTFLadderPlayerStats::has_support_bronze() const {
  return _internal_has_support_bronze();
}
inline void CSOTFLadderPlayerStats::clear_support_bronze() {
  support_bronze_ = 0u;
  _has_bits_[0] &= ~0x00800000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFLadderPlayerStats::_internal_support_bronze() const {
  return support_bronze_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFLadderPlayerStats::support_bronze() const {
  // @@protoc_insertion_point(field_get:CSOTFLadderPlayerStats.support_bronze)
  return _internal_support_bronze();
}
inline void CSOTFLadderPlayerStats::_internal_set_support_bronze(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00800000u;
  support_bronze_ = value;
}
inline void CSOTFLadderPlayerStats::set_support_bronze(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_support_bronze(value);
  // @@protoc_insertion_point(field_set:CSOTFLadderPlayerStats.support_bronze)
}

// optional uint32 support_silver = 29;
inline bool CSOTFLadderPlayerStats::_internal_has_support_silver() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool CSOTFLadderPlayerStats::has_support_silver() const {
  return _internal_has_support_silver();
}
inline void CSOTFLadderPlayerStats::clear_support_silver() {
  support_silver_ = 0u;
  _has_bits_[0] &= ~0x01000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFLadderPlayerStats::_internal_support_silver() const {
  return support_silver_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFLadderPlayerStats::support_silver() const {
  // @@protoc_insertion_point(field_get:CSOTFLadderPlayerStats.support_silver)
  return _internal_support_silver();
}
inline void CSOTFLadderPlayerStats::_internal_set_support_silver(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x01000000u;
  support_silver_ = value;
}
inline void CSOTFLadderPlayerStats::set_support_silver(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_support_silver(value);
  // @@protoc_insertion_point(field_set:CSOTFLadderPlayerStats.support_silver)
}

// optional uint32 support_gold = 30;
inline bool CSOTFLadderPlayerStats::_internal_has_support_gold() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool CSOTFLadderPlayerStats::has_support_gold() const {
  return _internal_has_support_gold();
}
inline void CSOTFLadderPlayerStats::clear_support_gold() {
  support_gold_ = 0u;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFLadderPlayerStats::_internal_support_gold() const {
  return support_gold_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFLadderPlayerStats::support_gold() const {
  // @@protoc_insertion_point(field_get:CSOTFLadderPlayerStats.support_gold)
  return _internal_support_gold();
}
inline void CSOTFLadderPlayerStats::_internal_set_support_gold(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00100000u;
  support_gold_ = value;
}
inline void CSOTFLadderPlayerStats::set_support_gold(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_support_gold(value);
  // @@protoc_insertion_point(field_set:CSOTFLadderPlayerStats.support_gold)
}

// -------------------------------------------------------------------

// CSOTFRatingData

// optional uint32 account_id = 1 [(.key_field) = true];
inline bool CSOTFRatingData::_internal_has_account_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSOTFRatingData::has_account_id() const {
  return _internal_has_account_id();
}
inline void CSOTFRatingData::clear_account_id() {
  account_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFRatingData::_internal_account_id() const {
  return account_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFRatingData::account_id() const {
  // @@protoc_insertion_point(field_get:CSOTFRatingData.account_id)
  return _internal_account_id();
}
inline void CSOTFRatingData::_internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  account_id_ = value;
}
inline void CSOTFRatingData::set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CSOTFRatingData.account_id)
}

// optional int32 rating_type = 2 [(.key_field) = true];
inline bool CSOTFRatingData::_internal_has_rating_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSOTFRatingData::has_rating_type() const {
  return _internal_has_rating_type();
}
inline void CSOTFRatingData::clear_rating_type() {
  rating_type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSOTFRatingData::_internal_rating_type() const {
  return rating_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSOTFRatingData::rating_type() const {
  // @@protoc_insertion_point(field_get:CSOTFRatingData.rating_type)
  return _internal_rating_type();
}
inline void CSOTFRatingData::_internal_set_rating_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  rating_type_ = value;
}
inline void CSOTFRatingData::set_rating_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rating_type(value);
  // @@protoc_insertion_point(field_set:CSOTFRatingData.rating_type)
}

// optional uint32 rating_primary = 3;
inline bool CSOTFRatingData::_internal_has_rating_primary() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CSOTFRatingData::has_rating_primary() const {
  return _internal_has_rating_primary();
}
inline void CSOTFRatingData::clear_rating_primary() {
  rating_primary_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFRatingData::_internal_rating_primary() const {
  return rating_primary_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFRatingData::rating_primary() const {
  // @@protoc_insertion_point(field_get:CSOTFRatingData.rating_primary)
  return _internal_rating_primary();
}
inline void CSOTFRatingData::_internal_set_rating_primary(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  rating_primary_ = value;
}
inline void CSOTFRatingData::set_rating_primary(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rating_primary(value);
  // @@protoc_insertion_point(field_set:CSOTFRatingData.rating_primary)
}

// optional uint32 rating_secondary = 4;
inline bool CSOTFRatingData::_internal_has_rating_secondary() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CSOTFRatingData::has_rating_secondary() const {
  return _internal_has_rating_secondary();
}
inline void CSOTFRatingData::clear_rating_secondary() {
  rating_secondary_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFRatingData::_internal_rating_secondary() const {
  return rating_secondary_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFRatingData::rating_secondary() const {
  // @@protoc_insertion_point(field_get:CSOTFRatingData.rating_secondary)
  return _internal_rating_secondary();
}
inline void CSOTFRatingData::_internal_set_rating_secondary(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  rating_secondary_ = value;
}
inline void CSOTFRatingData::set_rating_secondary(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rating_secondary(value);
  // @@protoc_insertion_point(field_set:CSOTFRatingData.rating_secondary)
}

// optional uint32 rating_tertiary = 5;
inline bool CSOTFRatingData::_internal_has_rating_tertiary() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CSOTFRatingData::has_rating_tertiary() const {
  return _internal_has_rating_tertiary();
}
inline void CSOTFRatingData::clear_rating_tertiary() {
  rating_tertiary_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFRatingData::_internal_rating_tertiary() const {
  return rating_tertiary_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFRatingData::rating_tertiary() const {
  // @@protoc_insertion_point(field_get:CSOTFRatingData.rating_tertiary)
  return _internal_rating_tertiary();
}
inline void CSOTFRatingData::_internal_set_rating_tertiary(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  rating_tertiary_ = value;
}
inline void CSOTFRatingData::set_rating_tertiary(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rating_tertiary(value);
  // @@protoc_insertion_point(field_set:CSOTFRatingData.rating_tertiary)
}

// -------------------------------------------------------------------

// CMsgGC_TFVoteKickPlayerRequest

// optional uint64 target_id = 2;
inline bool CMsgGC_TFVoteKickPlayerRequest::_internal_has_target_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGC_TFVoteKickPlayerRequest::has_target_id() const {
  return _internal_has_target_id();
}
inline void CMsgGC_TFVoteKickPlayerRequest::clear_target_id() {
  target_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGC_TFVoteKickPlayerRequest::_internal_target_id() const {
  return target_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGC_TFVoteKickPlayerRequest::target_id() const {
  // @@protoc_insertion_point(field_get:CMsgGC_TFVoteKickPlayerRequest.target_id)
  return _internal_target_id();
}
inline void CMsgGC_TFVoteKickPlayerRequest::_internal_set_target_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  target_id_ = value;
}
inline void CMsgGC_TFVoteKickPlayerRequest::set_target_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_target_id(value);
  // @@protoc_insertion_point(field_set:CMsgGC_TFVoteKickPlayerRequest.target_id)
}

// optional uint64 voter_id = 3;
inline bool CMsgGC_TFVoteKickPlayerRequest::_internal_has_voter_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGC_TFVoteKickPlayerRequest::has_voter_id() const {
  return _internal_has_voter_id();
}
inline void CMsgGC_TFVoteKickPlayerRequest::clear_voter_id() {
  voter_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGC_TFVoteKickPlayerRequest::_internal_voter_id() const {
  return voter_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGC_TFVoteKickPlayerRequest::voter_id() const {
  // @@protoc_insertion_point(field_get:CMsgGC_TFVoteKickPlayerRequest.voter_id)
  return _internal_voter_id();
}
inline void CMsgGC_TFVoteKickPlayerRequest::_internal_set_voter_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  voter_id_ = value;
}
inline void CMsgGC_TFVoteKickPlayerRequest::set_voter_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_voter_id(value);
  // @@protoc_insertion_point(field_set:CMsgGC_TFVoteKickPlayerRequest.voter_id)
}

// optional .TFVoteKickReason reason = 4 [default = TFVoteKickReason_Other];
inline bool CMsgGC_TFVoteKickPlayerRequest::_internal_has_reason() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgGC_TFVoteKickPlayerRequest::has_reason() const {
  return _internal_has_reason();
}
inline void CMsgGC_TFVoteKickPlayerRequest::clear_reason() {
  reason_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::TFVoteKickReason CMsgGC_TFVoteKickPlayerRequest::_internal_reason() const {
  return static_cast< ::TFVoteKickReason >(reason_);
}
inline ::TFVoteKickReason CMsgGC_TFVoteKickPlayerRequest::reason() const {
  // @@protoc_insertion_point(field_get:CMsgGC_TFVoteKickPlayerRequest.reason)
  return _internal_reason();
}
inline void CMsgGC_TFVoteKickPlayerRequest::_internal_set_reason(::TFVoteKickReason value) {
  assert(::TFVoteKickReason_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  reason_ = value;
}
inline void CMsgGC_TFVoteKickPlayerRequest::set_reason(::TFVoteKickReason value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:CMsgGC_TFVoteKickPlayerRequest.reason)
}

// optional uint64 match_id = 5;
inline bool CMsgGC_TFVoteKickPlayerRequest::_internal_has_match_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGC_TFVoteKickPlayerRequest::has_match_id() const {
  return _internal_has_match_id();
}
inline void CMsgGC_TFVoteKickPlayerRequest::clear_match_id() {
  match_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGC_TFVoteKickPlayerRequest::_internal_match_id() const {
  return match_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGC_TFVoteKickPlayerRequest::match_id() const {
  // @@protoc_insertion_point(field_get:CMsgGC_TFVoteKickPlayerRequest.match_id)
  return _internal_match_id();
}
inline void CMsgGC_TFVoteKickPlayerRequest::_internal_set_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  match_id_ = value;
}
inline void CMsgGC_TFVoteKickPlayerRequest::set_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_match_id(value);
  // @@protoc_insertion_point(field_set:CMsgGC_TFVoteKickPlayerRequest.match_id)
}

// -------------------------------------------------------------------

// CMsgGC_VoteKickPlayerRequestResponse

// optional bool allowed = 1;
inline bool CMsgGC_VoteKickPlayerRequestResponse::_internal_has_allowed() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGC_VoteKickPlayerRequestResponse::has_allowed() const {
  return _internal_has_allowed();
}
inline void CMsgGC_VoteKickPlayerRequestResponse::clear_allowed() {
  allowed_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CMsgGC_VoteKickPlayerRequestResponse::_internal_allowed() const {
  return allowed_;
}
inline bool CMsgGC_VoteKickPlayerRequestResponse::allowed() const {
  // @@protoc_insertion_point(field_get:CMsgGC_VoteKickPlayerRequestResponse.allowed)
  return _internal_allowed();
}
inline void CMsgGC_VoteKickPlayerRequestResponse::_internal_set_allowed(bool value) {
  _has_bits_[0] |= 0x00000001u;
  allowed_ = value;
}
inline void CMsgGC_VoteKickPlayerRequestResponse::set_allowed(bool value) {
  _internal_set_allowed(value);
  // @@protoc_insertion_point(field_set:CMsgGC_VoteKickPlayerRequestResponse.allowed)
}

// optional bool voter_inhibit = 3;
inline bool CMsgGC_VoteKickPlayerRequestResponse::_internal_has_voter_inhibit() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGC_VoteKickPlayerRequestResponse::has_voter_inhibit() const {
  return _internal_has_voter_inhibit();
}
inline void CMsgGC_VoteKickPlayerRequestResponse::clear_voter_inhibit() {
  voter_inhibit_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CMsgGC_VoteKickPlayerRequestResponse::_internal_voter_inhibit() const {
  return voter_inhibit_;
}
inline bool CMsgGC_VoteKickPlayerRequestResponse::voter_inhibit() const {
  // @@protoc_insertion_point(field_get:CMsgGC_VoteKickPlayerRequestResponse.voter_inhibit)
  return _internal_voter_inhibit();
}
inline void CMsgGC_VoteKickPlayerRequestResponse::_internal_set_voter_inhibit(bool value) {
  _has_bits_[0] |= 0x00000002u;
  voter_inhibit_ = value;
}
inline void CMsgGC_VoteKickPlayerRequestResponse::set_voter_inhibit(bool value) {
  _internal_set_voter_inhibit(value);
  // @@protoc_insertion_point(field_set:CMsgGC_VoteKickPlayerRequestResponse.voter_inhibit)
}

// optional bool target_inhibit = 4;
inline bool CMsgGC_VoteKickPlayerRequestResponse::_internal_has_target_inhibit() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGC_VoteKickPlayerRequestResponse::has_target_inhibit() const {
  return _internal_has_target_inhibit();
}
inline void CMsgGC_VoteKickPlayerRequestResponse::clear_target_inhibit() {
  target_inhibit_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CMsgGC_VoteKickPlayerRequestResponse::_internal_target_inhibit() const {
  return target_inhibit_;
}
inline bool CMsgGC_VoteKickPlayerRequestResponse::target_inhibit() const {
  // @@protoc_insertion_point(field_get:CMsgGC_VoteKickPlayerRequestResponse.target_inhibit)
  return _internal_target_inhibit();
}
inline void CMsgGC_VoteKickPlayerRequestResponse::_internal_set_target_inhibit(bool value) {
  _has_bits_[0] |= 0x00000004u;
  target_inhibit_ = value;
}
inline void CMsgGC_VoteKickPlayerRequestResponse::set_target_inhibit(bool value) {
  _internal_set_target_inhibit(value);
  // @@protoc_insertion_point(field_set:CMsgGC_VoteKickPlayerRequestResponse.target_inhibit)
}

// -------------------------------------------------------------------

// CMsgGC_DailyCompetitiveStatsRollup

// -------------------------------------------------------------------

// CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry

// optional uint32 rank = 1;
inline bool CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::_internal_has_rank() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::has_rank() const {
  return _internal_has_rank();
}
inline void CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::clear_rank() {
  rank_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::_internal_rank() const {
  return rank_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::rank() const {
  // @@protoc_insertion_point(field_get:CMsgGC_DailyCompetitiveStatsRollup_Response.RankBucketEntry.rank)
  return _internal_rank();
}
inline void CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::_internal_set_rank(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  rank_ = value;
}
inline void CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::set_rank(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rank(value);
  // @@protoc_insertion_point(field_set:CMsgGC_DailyCompetitiveStatsRollup_Response.RankBucketEntry.rank)
}

// optional uint32 records = 2;
inline bool CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::_internal_has_records() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::has_records() const {
  return _internal_has_records();
}
inline void CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::clear_records() {
  records_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::_internal_records() const {
  return records_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::records() const {
  // @@protoc_insertion_point(field_get:CMsgGC_DailyCompetitiveStatsRollup_Response.RankBucketEntry.records)
  return _internal_records();
}
inline void CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::_internal_set_records(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  records_ = value;
}
inline void CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::set_records(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_records(value);
  // @@protoc_insertion_point(field_set:CMsgGC_DailyCompetitiveStatsRollup_Response.RankBucketEntry.records)
}

// optional uint32 avg_score = 3;
inline bool CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::_internal_has_avg_score() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::has_avg_score() const {
  return _internal_has_avg_score();
}
inline void CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::clear_avg_score() {
  avg_score_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::_internal_avg_score() const {
  return avg_score_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::avg_score() const {
  // @@protoc_insertion_point(field_get:CMsgGC_DailyCompetitiveStatsRollup_Response.RankBucketEntry.avg_score)
  return _internal_avg_score();
}
inline void CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::_internal_set_avg_score(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  avg_score_ = value;
}
inline void CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::set_avg_score(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_avg_score(value);
  // @@protoc_insertion_point(field_set:CMsgGC_DailyCompetitiveStatsRollup_Response.RankBucketEntry.avg_score)
}

// optional uint32 stdev_score = 4;
inline bool CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::_internal_has_stdev_score() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::has_stdev_score() const {
  return _internal_has_stdev_score();
}
inline void CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::clear_stdev_score() {
  stdev_score_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::_internal_stdev_score() const {
  return stdev_score_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::stdev_score() const {
  // @@protoc_insertion_point(field_get:CMsgGC_DailyCompetitiveStatsRollup_Response.RankBucketEntry.stdev_score)
  return _internal_stdev_score();
}
inline void CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::_internal_set_stdev_score(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  stdev_score_ = value;
}
inline void CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::set_stdev_score(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_stdev_score(value);
  // @@protoc_insertion_point(field_set:CMsgGC_DailyCompetitiveStatsRollup_Response.RankBucketEntry.stdev_score)
}

// optional uint32 avg_kills = 5;
inline bool CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::_internal_has_avg_kills() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::has_avg_kills() const {
  return _internal_has_avg_kills();
}
inline void CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::clear_avg_kills() {
  avg_kills_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::_internal_avg_kills() const {
  return avg_kills_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::avg_kills() const {
  // @@protoc_insertion_point(field_get:CMsgGC_DailyCompetitiveStatsRollup_Response.RankBucketEntry.avg_kills)
  return _internal_avg_kills();
}
inline void CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::_internal_set_avg_kills(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  avg_kills_ = value;
}
inline void CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::set_avg_kills(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_avg_kills(value);
  // @@protoc_insertion_point(field_set:CMsgGC_DailyCompetitiveStatsRollup_Response.RankBucketEntry.avg_kills)
}

// optional uint32 stdev_kills = 6;
inline bool CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::_internal_has_stdev_kills() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::has_stdev_kills() const {
  return _internal_has_stdev_kills();
}
inline void CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::clear_stdev_kills() {
  stdev_kills_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::_internal_stdev_kills() const {
  return stdev_kills_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::stdev_kills() const {
  // @@protoc_insertion_point(field_get:CMsgGC_DailyCompetitiveStatsRollup_Response.RankBucketEntry.stdev_kills)
  return _internal_stdev_kills();
}
inline void CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::_internal_set_stdev_kills(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  stdev_kills_ = value;
}
inline void CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::set_stdev_kills(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_stdev_kills(value);
  // @@protoc_insertion_point(field_set:CMsgGC_DailyCompetitiveStatsRollup_Response.RankBucketEntry.stdev_kills)
}

// optional uint32 avg_damage = 7;
inline bool CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::_internal_has_avg_damage() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::has_avg_damage() const {
  return _internal_has_avg_damage();
}
inline void CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::clear_avg_damage() {
  avg_damage_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::_internal_avg_damage() const {
  return avg_damage_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::avg_damage() const {
  // @@protoc_insertion_point(field_get:CMsgGC_DailyCompetitiveStatsRollup_Response.RankBucketEntry.avg_damage)
  return _internal_avg_damage();
}
inline void CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::_internal_set_avg_damage(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  avg_damage_ = value;
}
inline void CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::set_avg_damage(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_avg_damage(value);
  // @@protoc_insertion_point(field_set:CMsgGC_DailyCompetitiveStatsRollup_Response.RankBucketEntry.avg_damage)
}

// optional uint32 stdev_damage = 8;
inline bool CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::_internal_has_stdev_damage() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::has_stdev_damage() const {
  return _internal_has_stdev_damage();
}
inline void CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::clear_stdev_damage() {
  stdev_damage_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::_internal_stdev_damage() const {
  return stdev_damage_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::stdev_damage() const {
  // @@protoc_insertion_point(field_get:CMsgGC_DailyCompetitiveStatsRollup_Response.RankBucketEntry.stdev_damage)
  return _internal_stdev_damage();
}
inline void CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::_internal_set_stdev_damage(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  stdev_damage_ = value;
}
inline void CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::set_stdev_damage(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_stdev_damage(value);
  // @@protoc_insertion_point(field_set:CMsgGC_DailyCompetitiveStatsRollup_Response.RankBucketEntry.stdev_damage)
}

// optional uint32 avg_healing = 9;
inline bool CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::_internal_has_avg_healing() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::has_avg_healing() const {
  return _internal_has_avg_healing();
}
inline void CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::clear_avg_healing() {
  avg_healing_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::_internal_avg_healing() const {
  return avg_healing_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::avg_healing() const {
  // @@protoc_insertion_point(field_get:CMsgGC_DailyCompetitiveStatsRollup_Response.RankBucketEntry.avg_healing)
  return _internal_avg_healing();
}
inline void CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::_internal_set_avg_healing(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  avg_healing_ = value;
}
inline void CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::set_avg_healing(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_avg_healing(value);
  // @@protoc_insertion_point(field_set:CMsgGC_DailyCompetitiveStatsRollup_Response.RankBucketEntry.avg_healing)
}

// optional uint32 stdev_healing = 10;
inline bool CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::_internal_has_stdev_healing() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::has_stdev_healing() const {
  return _internal_has_stdev_healing();
}
inline void CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::clear_stdev_healing() {
  stdev_healing_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::_internal_stdev_healing() const {
  return stdev_healing_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::stdev_healing() const {
  // @@protoc_insertion_point(field_get:CMsgGC_DailyCompetitiveStatsRollup_Response.RankBucketEntry.stdev_healing)
  return _internal_stdev_healing();
}
inline void CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::_internal_set_stdev_healing(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  stdev_healing_ = value;
}
inline void CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::set_stdev_healing(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_stdev_healing(value);
  // @@protoc_insertion_point(field_set:CMsgGC_DailyCompetitiveStatsRollup_Response.RankBucketEntry.stdev_healing)
}

// optional uint32 avg_support = 11;
inline bool CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::_internal_has_avg_support() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::has_avg_support() const {
  return _internal_has_avg_support();
}
inline void CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::clear_avg_support() {
  avg_support_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::_internal_avg_support() const {
  return avg_support_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::avg_support() const {
  // @@protoc_insertion_point(field_get:CMsgGC_DailyCompetitiveStatsRollup_Response.RankBucketEntry.avg_support)
  return _internal_avg_support();
}
inline void CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::_internal_set_avg_support(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  avg_support_ = value;
}
inline void CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::set_avg_support(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_avg_support(value);
  // @@protoc_insertion_point(field_set:CMsgGC_DailyCompetitiveStatsRollup_Response.RankBucketEntry.avg_support)
}

// optional uint32 stdev_support = 12;
inline bool CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::_internal_has_stdev_support() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::has_stdev_support() const {
  return _internal_has_stdev_support();
}
inline void CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::clear_stdev_support() {
  stdev_support_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::_internal_stdev_support() const {
  return stdev_support_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::stdev_support() const {
  // @@protoc_insertion_point(field_get:CMsgGC_DailyCompetitiveStatsRollup_Response.RankBucketEntry.stdev_support)
  return _internal_stdev_support();
}
inline void CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::_internal_set_stdev_support(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  stdev_support_ = value;
}
inline void CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::set_stdev_support(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_stdev_support(value);
  // @@protoc_insertion_point(field_set:CMsgGC_DailyCompetitiveStatsRollup_Response.RankBucketEntry.stdev_support)
}

// -------------------------------------------------------------------

// CMsgGC_DailyCompetitiveStatsRollup_Response

// repeated .CMsgGC_DailyCompetitiveStatsRollup_Response.RankBucketEntry rankdata = 1;
inline int CMsgGC_DailyCompetitiveStatsRollup_Response::_internal_rankdata_size() const {
  return rankdata_.size();
}
inline int CMsgGC_DailyCompetitiveStatsRollup_Response::rankdata_size() const {
  return _internal_rankdata_size();
}
inline void CMsgGC_DailyCompetitiveStatsRollup_Response::clear_rankdata() {
  rankdata_.Clear();
}
inline ::CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry* CMsgGC_DailyCompetitiveStatsRollup_Response::mutable_rankdata(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGC_DailyCompetitiveStatsRollup_Response.rankdata)
  return rankdata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry >*
CMsgGC_DailyCompetitiveStatsRollup_Response::mutable_rankdata() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGC_DailyCompetitiveStatsRollup_Response.rankdata)
  return &rankdata_;
}
inline const ::CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry& CMsgGC_DailyCompetitiveStatsRollup_Response::_internal_rankdata(int index) const {
  return rankdata_.Get(index);
}
inline const ::CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry& CMsgGC_DailyCompetitiveStatsRollup_Response::rankdata(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGC_DailyCompetitiveStatsRollup_Response.rankdata)
  return _internal_rankdata(index);
}
inline ::CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry* CMsgGC_DailyCompetitiveStatsRollup_Response::_internal_add_rankdata() {
  return rankdata_.Add();
}
inline ::CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry* CMsgGC_DailyCompetitiveStatsRollup_Response::add_rankdata() {
  // @@protoc_insertion_point(field_add:CMsgGC_DailyCompetitiveStatsRollup_Response.rankdata)
  return _internal_add_rankdata();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry >&
CMsgGC_DailyCompetitiveStatsRollup_Response::rankdata() const {
  // @@protoc_insertion_point(field_list:CMsgGC_DailyCompetitiveStatsRollup_Response.rankdata)
  return rankdata_;
}

// -------------------------------------------------------------------

// CMsgGC_ReportPlayer

// optional uint32 account_id_target = 1;
inline bool CMsgGC_ReportPlayer::_internal_has_account_id_target() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGC_ReportPlayer::has_account_id_target() const {
  return _internal_has_account_id_target();
}
inline void CMsgGC_ReportPlayer::clear_account_id_target() {
  account_id_target_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_ReportPlayer::_internal_account_id_target() const {
  return account_id_target_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_ReportPlayer::account_id_target() const {
  // @@protoc_insertion_point(field_get:CMsgGC_ReportPlayer.account_id_target)
  return _internal_account_id_target();
}
inline void CMsgGC_ReportPlayer::_internal_set_account_id_target(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  account_id_target_ = value;
}
inline void CMsgGC_ReportPlayer::set_account_id_target(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_account_id_target(value);
  // @@protoc_insertion_point(field_set:CMsgGC_ReportPlayer.account_id_target)
}

// optional .CMsgGC_ReportPlayer.EReason reason = 2 [default = kReason_INVALID];
inline bool CMsgGC_ReportPlayer::_internal_has_reason() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGC_ReportPlayer::has_reason() const {
  return _internal_has_reason();
}
inline void CMsgGC_ReportPlayer::clear_reason() {
  reason_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::CMsgGC_ReportPlayer_EReason CMsgGC_ReportPlayer::_internal_reason() const {
  return static_cast< ::CMsgGC_ReportPlayer_EReason >(reason_);
}
inline ::CMsgGC_ReportPlayer_EReason CMsgGC_ReportPlayer::reason() const {
  // @@protoc_insertion_point(field_get:CMsgGC_ReportPlayer.reason)
  return _internal_reason();
}
inline void CMsgGC_ReportPlayer::_internal_set_reason(::CMsgGC_ReportPlayer_EReason value) {
  assert(::CMsgGC_ReportPlayer_EReason_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  reason_ = value;
}
inline void CMsgGC_ReportPlayer::set_reason(::CMsgGC_ReportPlayer_EReason value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:CMsgGC_ReportPlayer.reason)
}

// -------------------------------------------------------------------

// CSOTFMatchResultPlayerStats

// optional uint64 match_id = 1 [(.key_field) = true];
inline bool CSOTFMatchResultPlayerStats::_internal_has_match_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSOTFMatchResultPlayerStats::has_match_id() const {
  return _internal_has_match_id();
}
inline void CSOTFMatchResultPlayerStats::clear_match_id() {
  match_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CSOTFMatchResultPlayerStats::_internal_match_id() const {
  return match_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CSOTFMatchResultPlayerStats::match_id() const {
  // @@protoc_insertion_point(field_get:CSOTFMatchResultPlayerStats.match_id)
  return _internal_match_id();
}
inline void CSOTFMatchResultPlayerStats::_internal_set_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  match_id_ = value;
}
inline void CSOTFMatchResultPlayerStats::set_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_match_id(value);
  // @@protoc_insertion_point(field_set:CSOTFMatchResultPlayerStats.match_id)
}

// optional uint32 account_id = 2 [(.key_field) = true];
inline bool CSOTFMatchResultPlayerStats::_internal_has_account_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSOTFMatchResultPlayerStats::has_account_id() const {
  return _internal_has_account_id();
}
inline void CSOTFMatchResultPlayerStats::clear_account_id() {
  account_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFMatchResultPlayerStats::_internal_account_id() const {
  return account_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFMatchResultPlayerStats::account_id() const {
  // @@protoc_insertion_point(field_get:CSOTFMatchResultPlayerStats.account_id)
  return _internal_account_id();
}
inline void CSOTFMatchResultPlayerStats::_internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  account_id_ = value;
}
inline void CSOTFMatchResultPlayerStats::set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CSOTFMatchResultPlayerStats.account_id)
}

// optional int32 match_group = 3 [(.key_field) = true];
inline bool CSOTFMatchResultPlayerStats::_internal_has_match_group() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CSOTFMatchResultPlayerStats::has_match_group() const {
  return _internal_has_match_group();
}
inline void CSOTFMatchResultPlayerStats::clear_match_group() {
  match_group_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSOTFMatchResultPlayerStats::_internal_match_group() const {
  return match_group_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSOTFMatchResultPlayerStats::match_group() const {
  // @@protoc_insertion_point(field_get:CSOTFMatchResultPlayerStats.match_group)
  return _internal_match_group();
}
inline void CSOTFMatchResultPlayerStats::_internal_set_match_group(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  match_group_ = value;
}
inline void CSOTFMatchResultPlayerStats::set_match_group(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_match_group(value);
  // @@protoc_insertion_point(field_set:CSOTFMatchResultPlayerStats.match_group)
}

// optional uint32 endtime = 4;
inline bool CSOTFMatchResultPlayerStats::_internal_has_endtime() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CSOTFMatchResultPlayerStats::has_endtime() const {
  return _internal_has_endtime();
}
inline void CSOTFMatchResultPlayerStats::clear_endtime() {
  endtime_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFMatchResultPlayerStats::_internal_endtime() const {
  return endtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFMatchResultPlayerStats::endtime() const {
  // @@protoc_insertion_point(field_get:CSOTFMatchResultPlayerStats.endtime)
  return _internal_endtime();
}
inline void CSOTFMatchResultPlayerStats::_internal_set_endtime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  endtime_ = value;
}
inline void CSOTFMatchResultPlayerStats::set_endtime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_endtime(value);
  // @@protoc_insertion_point(field_set:CSOTFMatchResultPlayerStats.endtime)
}

// optional uint32 season_id = 5;
inline bool CSOTFMatchResultPlayerStats::_internal_has_season_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CSOTFMatchResultPlayerStats::has_season_id() const {
  return _internal_has_season_id();
}
inline void CSOTFMatchResultPlayerStats::clear_season_id() {
  season_id_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFMatchResultPlayerStats::_internal_season_id() const {
  return season_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFMatchResultPlayerStats::season_id() const {
  // @@protoc_insertion_point(field_get:CSOTFMatchResultPlayerStats.season_id)
  return _internal_season_id();
}
inline void CSOTFMatchResultPlayerStats::_internal_set_season_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  season_id_ = value;
}
inline void CSOTFMatchResultPlayerStats::set_season_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_season_id(value);
  // @@protoc_insertion_point(field_set:CSOTFMatchResultPlayerStats.season_id)
}

// optional uint32 status = 6;
inline bool CSOTFMatchResultPlayerStats::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CSOTFMatchResultPlayerStats::has_status() const {
  return _internal_has_status();
}
inline void CSOTFMatchResultPlayerStats::clear_status() {
  status_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFMatchResultPlayerStats::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFMatchResultPlayerStats::status() const {
  // @@protoc_insertion_point(field_get:CSOTFMatchResultPlayerStats.status)
  return _internal_status();
}
inline void CSOTFMatchResultPlayerStats::_internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  status_ = value;
}
inline void CSOTFMatchResultPlayerStats::set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:CSOTFMatchResultPlayerStats.status)
}

// optional uint32 original_party_id = 7;
inline bool CSOTFMatchResultPlayerStats::_internal_has_original_party_id() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CSOTFMatchResultPlayerStats::has_original_party_id() const {
  return _internal_has_original_party_id();
}
inline void CSOTFMatchResultPlayerStats::clear_original_party_id() {
  original_party_id_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFMatchResultPlayerStats::_internal_original_party_id() const {
  return original_party_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFMatchResultPlayerStats::original_party_id() const {
  // @@protoc_insertion_point(field_get:CSOTFMatchResultPlayerStats.original_party_id)
  return _internal_original_party_id();
}
inline void CSOTFMatchResultPlayerStats::_internal_set_original_party_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  original_party_id_ = value;
}
inline void CSOTFMatchResultPlayerStats::set_original_party_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_original_party_id(value);
  // @@protoc_insertion_point(field_set:CSOTFMatchResultPlayerStats.original_party_id)
}

// optional uint32 team = 8;
inline bool CSOTFMatchResultPlayerStats::_internal_has_team() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CSOTFMatchResultPlayerStats::has_team() const {
  return _internal_has_team();
}
inline void CSOTFMatchResultPlayerStats::clear_team() {
  team_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFMatchResultPlayerStats::_internal_team() const {
  return team_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFMatchResultPlayerStats::team() const {
  // @@protoc_insertion_point(field_get:CSOTFMatchResultPlayerStats.team)
  return _internal_team();
}
inline void CSOTFMatchResultPlayerStats::_internal_set_team(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  team_ = value;
}
inline void CSOTFMatchResultPlayerStats::set_team(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_team(value);
  // @@protoc_insertion_point(field_set:CSOTFMatchResultPlayerStats.team)
}

// optional uint32 score = 9;
inline bool CSOTFMatchResultPlayerStats::_internal_has_score() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CSOTFMatchResultPlayerStats::has_score() const {
  return _internal_has_score();
}
inline void CSOTFMatchResultPlayerStats::clear_score() {
  score_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFMatchResultPlayerStats::_internal_score() const {
  return score_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFMatchResultPlayerStats::score() const {
  // @@protoc_insertion_point(field_get:CSOTFMatchResultPlayerStats.score)
  return _internal_score();
}
inline void CSOTFMatchResultPlayerStats::_internal_set_score(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  score_ = value;
}
inline void CSOTFMatchResultPlayerStats::set_score(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:CSOTFMatchResultPlayerStats.score)
}

// optional uint32 ping = 10;
inline bool CSOTFMatchResultPlayerStats::_internal_has_ping() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CSOTFMatchResultPlayerStats::has_ping() const {
  return _internal_has_ping();
}
inline void CSOTFMatchResultPlayerStats::clear_ping() {
  ping_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFMatchResultPlayerStats::_internal_ping() const {
  return ping_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFMatchResultPlayerStats::ping() const {
  // @@protoc_insertion_point(field_get:CSOTFMatchResultPlayerStats.ping)
  return _internal_ping();
}
inline void CSOTFMatchResultPlayerStats::_internal_set_ping(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  ping_ = value;
}
inline void CSOTFMatchResultPlayerStats::set_ping(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ping(value);
  // @@protoc_insertion_point(field_set:CSOTFMatchResultPlayerStats.ping)
}

// optional uint32 flags = 11;
inline bool CSOTFMatchResultPlayerStats::_internal_has_flags() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CSOTFMatchResultPlayerStats::has_flags() const {
  return _internal_has_flags();
}
inline void CSOTFMatchResultPlayerStats::clear_flags() {
  flags_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFMatchResultPlayerStats::_internal_flags() const {
  return flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFMatchResultPlayerStats::flags() const {
  // @@protoc_insertion_point(field_get:CSOTFMatchResultPlayerStats.flags)
  return _internal_flags();
}
inline void CSOTFMatchResultPlayerStats::_internal_set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  flags_ = value;
}
inline void CSOTFMatchResultPlayerStats::set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:CSOTFMatchResultPlayerStats.flags)
}

// optional uint32 display_rating = 12;
inline bool CSOTFMatchResultPlayerStats::_internal_has_display_rating() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CSOTFMatchResultPlayerStats::has_display_rating() const {
  return _internal_has_display_rating();
}
inline void CSOTFMatchResultPlayerStats::clear_display_rating() {
  display_rating_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFMatchResultPlayerStats::_internal_display_rating() const {
  return display_rating_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFMatchResultPlayerStats::display_rating() const {
  // @@protoc_insertion_point(field_get:CSOTFMatchResultPlayerStats.display_rating)
  return _internal_display_rating();
}
inline void CSOTFMatchResultPlayerStats::_internal_set_display_rating(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  display_rating_ = value;
}
inline void CSOTFMatchResultPlayerStats::set_display_rating(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_display_rating(value);
  // @@protoc_insertion_point(field_set:CSOTFMatchResultPlayerStats.display_rating)
}

// optional int32 display_rating_change = 13;
inline bool CSOTFMatchResultPlayerStats::_internal_has_display_rating_change() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CSOTFMatchResultPlayerStats::has_display_rating_change() const {
  return _internal_has_display_rating_change();
}
inline void CSOTFMatchResultPlayerStats::clear_display_rating_change() {
  display_rating_change_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSOTFMatchResultPlayerStats::_internal_display_rating_change() const {
  return display_rating_change_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSOTFMatchResultPlayerStats::display_rating_change() const {
  // @@protoc_insertion_point(field_get:CSOTFMatchResultPlayerStats.display_rating_change)
  return _internal_display_rating_change();
}
inline void CSOTFMatchResultPlayerStats::_internal_set_display_rating_change(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  display_rating_change_ = value;
}
inline void CSOTFMatchResultPlayerStats::set_display_rating_change(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_display_rating_change(value);
  // @@protoc_insertion_point(field_set:CSOTFMatchResultPlayerStats.display_rating_change)
}

// optional uint32 rank = 14;
inline bool CSOTFMatchResultPlayerStats::_internal_has_rank() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CSOTFMatchResultPlayerStats::has_rank() const {
  return _internal_has_rank();
}
inline void CSOTFMatchResultPlayerStats::clear_rank() {
  rank_ = 0u;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFMatchResultPlayerStats::_internal_rank() const {
  return rank_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFMatchResultPlayerStats::rank() const {
  // @@protoc_insertion_point(field_get:CSOTFMatchResultPlayerStats.rank)
  return _internal_rank();
}
inline void CSOTFMatchResultPlayerStats::_internal_set_rank(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00002000u;
  rank_ = value;
}
inline void CSOTFMatchResultPlayerStats::set_rank(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rank(value);
  // @@protoc_insertion_point(field_set:CSOTFMatchResultPlayerStats.rank)
}

// optional uint32 classes_played = 15;
inline bool CSOTFMatchResultPlayerStats::_internal_has_classes_played() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CSOTFMatchResultPlayerStats::has_classes_played() const {
  return _internal_has_classes_played();
}
inline void CSOTFMatchResultPlayerStats::clear_classes_played() {
  classes_played_ = 0u;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFMatchResultPlayerStats::_internal_classes_played() const {
  return classes_played_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFMatchResultPlayerStats::classes_played() const {
  // @@protoc_insertion_point(field_get:CSOTFMatchResultPlayerStats.classes_played)
  return _internal_classes_played();
}
inline void CSOTFMatchResultPlayerStats::_internal_set_classes_played(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00004000u;
  classes_played_ = value;
}
inline void CSOTFMatchResultPlayerStats::set_classes_played(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_classes_played(value);
  // @@protoc_insertion_point(field_set:CSOTFMatchResultPlayerStats.classes_played)
}

// optional uint32 kills = 16;
inline bool CSOTFMatchResultPlayerStats::_internal_has_kills() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CSOTFMatchResultPlayerStats::has_kills() const {
  return _internal_has_kills();
}
inline void CSOTFMatchResultPlayerStats::clear_kills() {
  kills_ = 0u;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFMatchResultPlayerStats::_internal_kills() const {
  return kills_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFMatchResultPlayerStats::kills() const {
  // @@protoc_insertion_point(field_get:CSOTFMatchResultPlayerStats.kills)
  return _internal_kills();
}
inline void CSOTFMatchResultPlayerStats::_internal_set_kills(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00008000u;
  kills_ = value;
}
inline void CSOTFMatchResultPlayerStats::set_kills(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_kills(value);
  // @@protoc_insertion_point(field_set:CSOTFMatchResultPlayerStats.kills)
}

// optional uint32 deaths = 17;
inline bool CSOTFMatchResultPlayerStats::_internal_has_deaths() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool CSOTFMatchResultPlayerStats::has_deaths() const {
  return _internal_has_deaths();
}
inline void CSOTFMatchResultPlayerStats::clear_deaths() {
  deaths_ = 0u;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFMatchResultPlayerStats::_internal_deaths() const {
  return deaths_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFMatchResultPlayerStats::deaths() const {
  // @@protoc_insertion_point(field_get:CSOTFMatchResultPlayerStats.deaths)
  return _internal_deaths();
}
inline void CSOTFMatchResultPlayerStats::_internal_set_deaths(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00010000u;
  deaths_ = value;
}
inline void CSOTFMatchResultPlayerStats::set_deaths(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_deaths(value);
  // @@protoc_insertion_point(field_set:CSOTFMatchResultPlayerStats.deaths)
}

// optional uint32 damage = 18;
inline bool CSOTFMatchResultPlayerStats::_internal_has_damage() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool CSOTFMatchResultPlayerStats::has_damage() const {
  return _internal_has_damage();
}
inline void CSOTFMatchResultPlayerStats::clear_damage() {
  damage_ = 0u;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFMatchResultPlayerStats::_internal_damage() const {
  return damage_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFMatchResultPlayerStats::damage() const {
  // @@protoc_insertion_point(field_get:CSOTFMatchResultPlayerStats.damage)
  return _internal_damage();
}
inline void CSOTFMatchResultPlayerStats::_internal_set_damage(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00020000u;
  damage_ = value;
}
inline void CSOTFMatchResultPlayerStats::set_damage(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_damage(value);
  // @@protoc_insertion_point(field_set:CSOTFMatchResultPlayerStats.damage)
}

// optional uint32 healing = 19;
inline bool CSOTFMatchResultPlayerStats::_internal_has_healing() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool CSOTFMatchResultPlayerStats::has_healing() const {
  return _internal_has_healing();
}
inline void CSOTFMatchResultPlayerStats::clear_healing() {
  healing_ = 0u;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFMatchResultPlayerStats::_internal_healing() const {
  return healing_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFMatchResultPlayerStats::healing() const {
  // @@protoc_insertion_point(field_get:CSOTFMatchResultPlayerStats.healing)
  return _internal_healing();
}
inline void CSOTFMatchResultPlayerStats::_internal_set_healing(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00040000u;
  healing_ = value;
}
inline void CSOTFMatchResultPlayerStats::set_healing(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_healing(value);
  // @@protoc_insertion_point(field_set:CSOTFMatchResultPlayerStats.healing)
}

// optional uint32 support = 20;
inline bool CSOTFMatchResultPlayerStats::_internal_has_support() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool CSOTFMatchResultPlayerStats::has_support() const {
  return _internal_has_support();
}
inline void CSOTFMatchResultPlayerStats::clear_support() {
  support_ = 0u;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFMatchResultPlayerStats::_internal_support() const {
  return support_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFMatchResultPlayerStats::support() const {
  // @@protoc_insertion_point(field_get:CSOTFMatchResultPlayerStats.support)
  return _internal_support();
}
inline void CSOTFMatchResultPlayerStats::_internal_set_support(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00080000u;
  support_ = value;
}
inline void CSOTFMatchResultPlayerStats::set_support(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_support(value);
  // @@protoc_insertion_point(field_set:CSOTFMatchResultPlayerStats.support)
}

// optional uint32 score_medal = 21;
inline bool CSOTFMatchResultPlayerStats::_internal_has_score_medal() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool CSOTFMatchResultPlayerStats::has_score_medal() const {
  return _internal_has_score_medal();
}
inline void CSOTFMatchResultPlayerStats::clear_score_medal() {
  score_medal_ = 0u;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFMatchResultPlayerStats::_internal_score_medal() const {
  return score_medal_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFMatchResultPlayerStats::score_medal() const {
  // @@protoc_insertion_point(field_get:CSOTFMatchResultPlayerStats.score_medal)
  return _internal_score_medal();
}
inline void CSOTFMatchResultPlayerStats::_internal_set_score_medal(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00100000u;
  score_medal_ = value;
}
inline void CSOTFMatchResultPlayerStats::set_score_medal(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_score_medal(value);
  // @@protoc_insertion_point(field_set:CSOTFMatchResultPlayerStats.score_medal)
}

// optional uint32 kills_medal = 22;
inline bool CSOTFMatchResultPlayerStats::_internal_has_kills_medal() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool CSOTFMatchResultPlayerStats::has_kills_medal() const {
  return _internal_has_kills_medal();
}
inline void CSOTFMatchResultPlayerStats::clear_kills_medal() {
  kills_medal_ = 0u;
  _has_bits_[0] &= ~0x00200000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFMatchResultPlayerStats::_internal_kills_medal() const {
  return kills_medal_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFMatchResultPlayerStats::kills_medal() const {
  // @@protoc_insertion_point(field_get:CSOTFMatchResultPlayerStats.kills_medal)
  return _internal_kills_medal();
}
inline void CSOTFMatchResultPlayerStats::_internal_set_kills_medal(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00200000u;
  kills_medal_ = value;
}
inline void CSOTFMatchResultPlayerStats::set_kills_medal(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_kills_medal(value);
  // @@protoc_insertion_point(field_set:CSOTFMatchResultPlayerStats.kills_medal)
}

// optional uint32 damage_medal = 23;
inline bool CSOTFMatchResultPlayerStats::_internal_has_damage_medal() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool CSOTFMatchResultPlayerStats::has_damage_medal() const {
  return _internal_has_damage_medal();
}
inline void CSOTFMatchResultPlayerStats::clear_damage_medal() {
  damage_medal_ = 0u;
  _has_bits_[0] &= ~0x00400000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFMatchResultPlayerStats::_internal_damage_medal() const {
  return damage_medal_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFMatchResultPlayerStats::damage_medal() const {
  // @@protoc_insertion_point(field_get:CSOTFMatchResultPlayerStats.damage_medal)
  return _internal_damage_medal();
}
inline void CSOTFMatchResultPlayerStats::_internal_set_damage_medal(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00400000u;
  damage_medal_ = value;
}
inline void CSOTFMatchResultPlayerStats::set_damage_medal(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_damage_medal(value);
  // @@protoc_insertion_point(field_set:CSOTFMatchResultPlayerStats.damage_medal)
}

// optional uint32 healing_medal = 24;
inline bool CSOTFMatchResultPlayerStats::_internal_has_healing_medal() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool CSOTFMatchResultPlayerStats::has_healing_medal() const {
  return _internal_has_healing_medal();
}
inline void CSOTFMatchResultPlayerStats::clear_healing_medal() {
  healing_medal_ = 0u;
  _has_bits_[0] &= ~0x00800000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFMatchResultPlayerStats::_internal_healing_medal() const {
  return healing_medal_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFMatchResultPlayerStats::healing_medal() const {
  // @@protoc_insertion_point(field_get:CSOTFMatchResultPlayerStats.healing_medal)
  return _internal_healing_medal();
}
inline void CSOTFMatchResultPlayerStats::_internal_set_healing_medal(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00800000u;
  healing_medal_ = value;
}
inline void CSOTFMatchResultPlayerStats::set_healing_medal(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_healing_medal(value);
  // @@protoc_insertion_point(field_set:CSOTFMatchResultPlayerStats.healing_medal)
}

// optional uint32 support_medal = 25;
inline bool CSOTFMatchResultPlayerStats::_internal_has_support_medal() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool CSOTFMatchResultPlayerStats::has_support_medal() const {
  return _internal_has_support_medal();
}
inline void CSOTFMatchResultPlayerStats::clear_support_medal() {
  support_medal_ = 0u;
  _has_bits_[0] &= ~0x01000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFMatchResultPlayerStats::_internal_support_medal() const {
  return support_medal_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFMatchResultPlayerStats::support_medal() const {
  // @@protoc_insertion_point(field_get:CSOTFMatchResultPlayerStats.support_medal)
  return _internal_support_medal();
}
inline void CSOTFMatchResultPlayerStats::_internal_set_support_medal(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x01000000u;
  support_medal_ = value;
}
inline void CSOTFMatchResultPlayerStats::set_support_medal(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_support_medal(value);
  // @@protoc_insertion_point(field_set:CSOTFMatchResultPlayerStats.support_medal)
}

// optional uint32 map_index = 26;
inline bool CSOTFMatchResultPlayerStats::_internal_has_map_index() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool CSOTFMatchResultPlayerStats::has_map_index() const {
  return _internal_has_map_index();
}
inline void CSOTFMatchResultPlayerStats::clear_map_index() {
  map_index_ = 0u;
  _has_bits_[0] &= ~0x02000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFMatchResultPlayerStats::_internal_map_index() const {
  return map_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFMatchResultPlayerStats::map_index() const {
  // @@protoc_insertion_point(field_get:CSOTFMatchResultPlayerStats.map_index)
  return _internal_map_index();
}
inline void CSOTFMatchResultPlayerStats::_internal_set_map_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x02000000u;
  map_index_ = value;
}
inline void CSOTFMatchResultPlayerStats::set_map_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_map_index(value);
  // @@protoc_insertion_point(field_set:CSOTFMatchResultPlayerStats.map_index)
}

// optional uint32 winning_team = 27;
inline bool CSOTFMatchResultPlayerStats::_internal_has_winning_team() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool CSOTFMatchResultPlayerStats::has_winning_team() const {
  return _internal_has_winning_team();
}
inline void CSOTFMatchResultPlayerStats::clear_winning_team() {
  winning_team_ = 0u;
  _has_bits_[0] &= ~0x04000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFMatchResultPlayerStats::_internal_winning_team() const {
  return winning_team_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOTFMatchResultPlayerStats::winning_team() const {
  // @@protoc_insertion_point(field_get:CSOTFMatchResultPlayerStats.winning_team)
  return _internal_winning_team();
}
inline void CSOTFMatchResultPlayerStats::_internal_set_winning_team(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x04000000u;
  winning_team_ = value;
}
inline void CSOTFMatchResultPlayerStats::set_winning_team(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_winning_team(value);
  // @@protoc_insertion_point(field_set:CSOTFMatchResultPlayerStats.winning_team)
}

// -------------------------------------------------------------------

// CMsgGCRequestMatchMakerStats

// -------------------------------------------------------------------

// CMsgGCDataCenterPopulation

// optional string name = 1;
inline bool CMsgGCDataCenterPopulation::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCDataCenterPopulation::has_name() const {
  return _internal_has_name();
}
inline void CMsgGCDataCenterPopulation::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgGCDataCenterPopulation::name() const {
  // @@protoc_insertion_point(field_get:CMsgGCDataCenterPopulation.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgGCDataCenterPopulation::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgGCDataCenterPopulation.name)
}
inline std::string* CMsgGCDataCenterPopulation::mutable_name() {
  // @@protoc_insertion_point(field_mutable:CMsgGCDataCenterPopulation.name)
  return _internal_mutable_name();
}
inline const std::string& CMsgGCDataCenterPopulation::_internal_name() const {
  return name_.Get();
}
inline void CMsgGCDataCenterPopulation::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgGCDataCenterPopulation::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgGCDataCenterPopulation::release_name() {
  // @@protoc_insertion_point(field_release:CMsgGCDataCenterPopulation.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CMsgGCDataCenterPopulation::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CMsgGCDataCenterPopulation.name)
}

// optional float health_ratio = 2;
inline bool CMsgGCDataCenterPopulation::_internal_has_health_ratio() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCDataCenterPopulation::has_health_ratio() const {
  return _internal_has_health_ratio();
}
inline void CMsgGCDataCenterPopulation::clear_health_ratio() {
  health_ratio_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float CMsgGCDataCenterPopulation::_internal_health_ratio() const {
  return health_ratio_;
}
inline float CMsgGCDataCenterPopulation::health_ratio() const {
  // @@protoc_insertion_point(field_get:CMsgGCDataCenterPopulation.health_ratio)
  return _internal_health_ratio();
}
inline void CMsgGCDataCenterPopulation::_internal_set_health_ratio(float value) {
  _has_bits_[0] |= 0x00000002u;
  health_ratio_ = value;
}
inline void CMsgGCDataCenterPopulation::set_health_ratio(float value) {
  _internal_set_health_ratio(value);
  // @@protoc_insertion_point(field_set:CMsgGCDataCenterPopulation.health_ratio)
}

// -------------------------------------------------------------------

// CMsgGCMatchGroupDataCenterPopulation

// repeated .CMsgGCDataCenterPopulation data_center_population = 1;
inline int CMsgGCMatchGroupDataCenterPopulation::_internal_data_center_population_size() const {
  return data_center_population_.size();
}
inline int CMsgGCMatchGroupDataCenterPopulation::data_center_population_size() const {
  return _internal_data_center_population_size();
}
inline void CMsgGCMatchGroupDataCenterPopulation::clear_data_center_population() {
  data_center_population_.Clear();
}
inline ::CMsgGCDataCenterPopulation* CMsgGCMatchGroupDataCenterPopulation::mutable_data_center_population(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGCMatchGroupDataCenterPopulation.data_center_population)
  return data_center_population_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCDataCenterPopulation >*
CMsgGCMatchGroupDataCenterPopulation::mutable_data_center_population() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCMatchGroupDataCenterPopulation.data_center_population)
  return &data_center_population_;
}
inline const ::CMsgGCDataCenterPopulation& CMsgGCMatchGroupDataCenterPopulation::_internal_data_center_population(int index) const {
  return data_center_population_.Get(index);
}
inline const ::CMsgGCDataCenterPopulation& CMsgGCMatchGroupDataCenterPopulation::data_center_population(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCMatchGroupDataCenterPopulation.data_center_population)
  return _internal_data_center_population(index);
}
inline ::CMsgGCDataCenterPopulation* CMsgGCMatchGroupDataCenterPopulation::_internal_add_data_center_population() {
  return data_center_population_.Add();
}
inline ::CMsgGCDataCenterPopulation* CMsgGCMatchGroupDataCenterPopulation::add_data_center_population() {
  // @@protoc_insertion_point(field_add:CMsgGCMatchGroupDataCenterPopulation.data_center_population)
  return _internal_add_data_center_population();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCDataCenterPopulation >&
CMsgGCMatchGroupDataCenterPopulation::data_center_population() const {
  // @@protoc_insertion_point(field_list:CMsgGCMatchGroupDataCenterPopulation.data_center_population)
  return data_center_population_;
}

// -------------------------------------------------------------------

// CMsgGCMatchMakerStatsResponse

// repeated uint32 map_count = 1;
inline int CMsgGCMatchMakerStatsResponse::_internal_map_count_size() const {
  return map_count_.size();
}
inline int CMsgGCMatchMakerStatsResponse::map_count_size() const {
  return _internal_map_count_size();
}
inline void CMsgGCMatchMakerStatsResponse::clear_map_count() {
  map_count_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCMatchMakerStatsResponse::_internal_map_count(int index) const {
  return map_count_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCMatchMakerStatsResponse::map_count(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCMatchMakerStatsResponse.map_count)
  return _internal_map_count(index);
}
inline void CMsgGCMatchMakerStatsResponse::set_map_count(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  map_count_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGCMatchMakerStatsResponse.map_count)
}
inline void CMsgGCMatchMakerStatsResponse::_internal_add_map_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  map_count_.Add(value);
}
inline void CMsgGCMatchMakerStatsResponse::add_map_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_map_count(value);
  // @@protoc_insertion_point(field_add:CMsgGCMatchMakerStatsResponse.map_count)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CMsgGCMatchMakerStatsResponse::_internal_map_count() const {
  return map_count_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CMsgGCMatchMakerStatsResponse::map_count() const {
  // @@protoc_insertion_point(field_list:CMsgGCMatchMakerStatsResponse.map_count)
  return _internal_map_count();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CMsgGCMatchMakerStatsResponse::_internal_mutable_map_count() {
  return &map_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CMsgGCMatchMakerStatsResponse::mutable_map_count() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCMatchMakerStatsResponse.map_count)
  return _internal_mutable_map_count();
}

// repeated .CMsgGCMatchGroupDataCenterPopulation matchgroup_data_center_population = 2;
inline int CMsgGCMatchMakerStatsResponse::_internal_matchgroup_data_center_population_size() const {
  return matchgroup_data_center_population_.size();
}
inline int CMsgGCMatchMakerStatsResponse::matchgroup_data_center_population_size() const {
  return _internal_matchgroup_data_center_population_size();
}
inline void CMsgGCMatchMakerStatsResponse::clear_matchgroup_data_center_population() {
  matchgroup_data_center_population_.Clear();
}
inline ::CMsgGCMatchGroupDataCenterPopulation* CMsgGCMatchMakerStatsResponse::mutable_matchgroup_data_center_population(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGCMatchMakerStatsResponse.matchgroup_data_center_population)
  return matchgroup_data_center_population_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCMatchGroupDataCenterPopulation >*
CMsgGCMatchMakerStatsResponse::mutable_matchgroup_data_center_population() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCMatchMakerStatsResponse.matchgroup_data_center_population)
  return &matchgroup_data_center_population_;
}
inline const ::CMsgGCMatchGroupDataCenterPopulation& CMsgGCMatchMakerStatsResponse::_internal_matchgroup_data_center_population(int index) const {
  return matchgroup_data_center_population_.Get(index);
}
inline const ::CMsgGCMatchGroupDataCenterPopulation& CMsgGCMatchMakerStatsResponse::matchgroup_data_center_population(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCMatchMakerStatsResponse.matchgroup_data_center_population)
  return _internal_matchgroup_data_center_population(index);
}
inline ::CMsgGCMatchGroupDataCenterPopulation* CMsgGCMatchMakerStatsResponse::_internal_add_matchgroup_data_center_population() {
  return matchgroup_data_center_population_.Add();
}
inline ::CMsgGCMatchGroupDataCenterPopulation* CMsgGCMatchMakerStatsResponse::add_matchgroup_data_center_population() {
  // @@protoc_insertion_point(field_add:CMsgGCMatchMakerStatsResponse.matchgroup_data_center_population)
  return _internal_add_matchgroup_data_center_population();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCMatchGroupDataCenterPopulation >&
CMsgGCMatchMakerStatsResponse::matchgroup_data_center_population() const {
  // @@protoc_insertion_point(field_list:CMsgGCMatchMakerStatsResponse.matchgroup_data_center_population)
  return matchgroup_data_center_population_;
}

// -------------------------------------------------------------------

// CMsgGCMatchHistoryLoad

// optional .ETFMatchGroup match_group = 1 [default = k_eTFMatchGroup_Invalid];
inline bool CMsgGCMatchHistoryLoad::_internal_has_match_group() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCMatchHistoryLoad::has_match_group() const {
  return _internal_has_match_group();
}
inline void CMsgGCMatchHistoryLoad::clear_match_group() {
  match_group_ = -1;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::ETFMatchGroup CMsgGCMatchHistoryLoad::_internal_match_group() const {
  return static_cast< ::ETFMatchGroup >(match_group_);
}
inline ::ETFMatchGroup CMsgGCMatchHistoryLoad::match_group() const {
  // @@protoc_insertion_point(field_get:CMsgGCMatchHistoryLoad.match_group)
  return _internal_match_group();
}
inline void CMsgGCMatchHistoryLoad::_internal_set_match_group(::ETFMatchGroup value) {
  assert(::ETFMatchGroup_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  match_group_ = value;
}
inline void CMsgGCMatchHistoryLoad::set_match_group(::ETFMatchGroup value) {
  _internal_set_match_group(value);
  // @@protoc_insertion_point(field_set:CMsgGCMatchHistoryLoad.match_group)
}

// -------------------------------------------------------------------

// CMsgGCDataCenterPing_Update_PingEntry

// optional string name = 1;
inline bool CMsgGCDataCenterPing_Update_PingEntry::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCDataCenterPing_Update_PingEntry::has_name() const {
  return _internal_has_name();
}
inline void CMsgGCDataCenterPing_Update_PingEntry::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgGCDataCenterPing_Update_PingEntry::name() const {
  // @@protoc_insertion_point(field_get:CMsgGCDataCenterPing_Update.PingEntry.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgGCDataCenterPing_Update_PingEntry::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgGCDataCenterPing_Update.PingEntry.name)
}
inline std::string* CMsgGCDataCenterPing_Update_PingEntry::mutable_name() {
  // @@protoc_insertion_point(field_mutable:CMsgGCDataCenterPing_Update.PingEntry.name)
  return _internal_mutable_name();
}
inline const std::string& CMsgGCDataCenterPing_Update_PingEntry::_internal_name() const {
  return name_.Get();
}
inline void CMsgGCDataCenterPing_Update_PingEntry::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgGCDataCenterPing_Update_PingEntry::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgGCDataCenterPing_Update_PingEntry::release_name() {
  // @@protoc_insertion_point(field_release:CMsgGCDataCenterPing_Update.PingEntry.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CMsgGCDataCenterPing_Update_PingEntry::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CMsgGCDataCenterPing_Update.PingEntry.name)
}

// optional uint32 ping = 2;
inline bool CMsgGCDataCenterPing_Update_PingEntry::_internal_has_ping() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCDataCenterPing_Update_PingEntry::has_ping() const {
  return _internal_has_ping();
}
inline void CMsgGCDataCenterPing_Update_PingEntry::clear_ping() {
  ping_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCDataCenterPing_Update_PingEntry::_internal_ping() const {
  return ping_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCDataCenterPing_Update_PingEntry::ping() const {
  // @@protoc_insertion_point(field_get:CMsgGCDataCenterPing_Update.PingEntry.ping)
  return _internal_ping();
}
inline void CMsgGCDataCenterPing_Update_PingEntry::_internal_set_ping(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  ping_ = value;
}
inline void CMsgGCDataCenterPing_Update_PingEntry::set_ping(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ping(value);
  // @@protoc_insertion_point(field_set:CMsgGCDataCenterPing_Update.PingEntry.ping)
}

// optional .CMsgGCDataCenterPing_Update.Status ping_status = 3 [default = Normal];
inline bool CMsgGCDataCenterPing_Update_PingEntry::_internal_has_ping_status() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGCDataCenterPing_Update_PingEntry::has_ping_status() const {
  return _internal_has_ping_status();
}
inline void CMsgGCDataCenterPing_Update_PingEntry::clear_ping_status() {
  ping_status_ = 1;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::CMsgGCDataCenterPing_Update_Status CMsgGCDataCenterPing_Update_PingEntry::_internal_ping_status() const {
  return static_cast< ::CMsgGCDataCenterPing_Update_Status >(ping_status_);
}
inline ::CMsgGCDataCenterPing_Update_Status CMsgGCDataCenterPing_Update_PingEntry::ping_status() const {
  // @@protoc_insertion_point(field_get:CMsgGCDataCenterPing_Update.PingEntry.ping_status)
  return _internal_ping_status();
}
inline void CMsgGCDataCenterPing_Update_PingEntry::_internal_set_ping_status(::CMsgGCDataCenterPing_Update_Status value) {
  assert(::CMsgGCDataCenterPing_Update_Status_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  ping_status_ = value;
}
inline void CMsgGCDataCenterPing_Update_PingEntry::set_ping_status(::CMsgGCDataCenterPing_Update_Status value) {
  _internal_set_ping_status(value);
  // @@protoc_insertion_point(field_set:CMsgGCDataCenterPing_Update.PingEntry.ping_status)
}

// -------------------------------------------------------------------

// CMsgGCDataCenterPing_Update

// repeated .CMsgGCDataCenterPing_Update.PingEntry pingdata = 1;
inline int CMsgGCDataCenterPing_Update::_internal_pingdata_size() const {
  return pingdata_.size();
}
inline int CMsgGCDataCenterPing_Update::pingdata_size() const {
  return _internal_pingdata_size();
}
inline void CMsgGCDataCenterPing_Update::clear_pingdata() {
  pingdata_.Clear();
}
inline ::CMsgGCDataCenterPing_Update_PingEntry* CMsgGCDataCenterPing_Update::mutable_pingdata(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGCDataCenterPing_Update.pingdata)
  return pingdata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCDataCenterPing_Update_PingEntry >*
CMsgGCDataCenterPing_Update::mutable_pingdata() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCDataCenterPing_Update.pingdata)
  return &pingdata_;
}
inline const ::CMsgGCDataCenterPing_Update_PingEntry& CMsgGCDataCenterPing_Update::_internal_pingdata(int index) const {
  return pingdata_.Get(index);
}
inline const ::CMsgGCDataCenterPing_Update_PingEntry& CMsgGCDataCenterPing_Update::pingdata(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCDataCenterPing_Update.pingdata)
  return _internal_pingdata(index);
}
inline ::CMsgGCDataCenterPing_Update_PingEntry* CMsgGCDataCenterPing_Update::_internal_add_pingdata() {
  return pingdata_.Add();
}
inline ::CMsgGCDataCenterPing_Update_PingEntry* CMsgGCDataCenterPing_Update::add_pingdata() {
  // @@protoc_insertion_point(field_add:CMsgGCDataCenterPing_Update.pingdata)
  return _internal_add_pingdata();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCDataCenterPing_Update_PingEntry >&
CMsgGCDataCenterPing_Update::pingdata() const {
  // @@protoc_insertion_point(field_list:CMsgGCDataCenterPing_Update.pingdata)
  return pingdata_;
}

// -------------------------------------------------------------------

// CMsgGC_KickPlayerFromLobby

// optional uint64 targetID = 1;
inline bool CMsgGC_KickPlayerFromLobby::_internal_has_targetid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGC_KickPlayerFromLobby::has_targetid() const {
  return _internal_has_targetid();
}
inline void CMsgGC_KickPlayerFromLobby::clear_targetid() {
  targetid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGC_KickPlayerFromLobby::_internal_targetid() const {
  return targetid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGC_KickPlayerFromLobby::targetid() const {
  // @@protoc_insertion_point(field_get:CMsgGC_KickPlayerFromLobby.targetID)
  return _internal_targetid();
}
inline void CMsgGC_KickPlayerFromLobby::_internal_set_targetid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  targetid_ = value;
}
inline void CMsgGC_KickPlayerFromLobby::set_targetid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_targetid(value);
  // @@protoc_insertion_point(field_set:CMsgGC_KickPlayerFromLobby.targetID)
}

// -------------------------------------------------------------------

// CMsgGCSurveyRequest

// optional .SurveyQuestionType question_type = 1 [default = QUESTION_MATCH_QUALITY];
inline bool CMsgGCSurveyRequest::_internal_has_question_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCSurveyRequest::has_question_type() const {
  return _internal_has_question_type();
}
inline void CMsgGCSurveyRequest::clear_question_type() {
  question_type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::SurveyQuestionType CMsgGCSurveyRequest::_internal_question_type() const {
  return static_cast< ::SurveyQuestionType >(question_type_);
}
inline ::SurveyQuestionType CMsgGCSurveyRequest::question_type() const {
  // @@protoc_insertion_point(field_get:CMsgGCSurveyRequest.question_type)
  return _internal_question_type();
}
inline void CMsgGCSurveyRequest::_internal_set_question_type(::SurveyQuestionType value) {
  assert(::SurveyQuestionType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  question_type_ = value;
}
inline void CMsgGCSurveyRequest::set_question_type(::SurveyQuestionType value) {
  _internal_set_question_type(value);
  // @@protoc_insertion_point(field_set:CMsgGCSurveyRequest.question_type)
}

// optional uint64 match_id = 2;
inline bool CMsgGCSurveyRequest::_internal_has_match_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCSurveyRequest::has_match_id() const {
  return _internal_has_match_id();
}
inline void CMsgGCSurveyRequest::clear_match_id() {
  match_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCSurveyRequest::_internal_match_id() const {
  return match_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCSurveyRequest::match_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCSurveyRequest.match_id)
  return _internal_match_id();
}
inline void CMsgGCSurveyRequest::_internal_set_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  match_id_ = value;
}
inline void CMsgGCSurveyRequest::set_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_match_id(value);
  // @@protoc_insertion_point(field_set:CMsgGCSurveyRequest.match_id)
}

// -------------------------------------------------------------------

// CMsgGCSurveyResponse

// optional .SurveyQuestionType question_type = 1 [default = QUESTION_MATCH_QUALITY];
inline bool CMsgGCSurveyResponse::_internal_has_question_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCSurveyResponse::has_question_type() const {
  return _internal_has_question_type();
}
inline void CMsgGCSurveyResponse::clear_question_type() {
  question_type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::SurveyQuestionType CMsgGCSurveyResponse::_internal_question_type() const {
  return static_cast< ::SurveyQuestionType >(question_type_);
}
inline ::SurveyQuestionType CMsgGCSurveyResponse::question_type() const {
  // @@protoc_insertion_point(field_get:CMsgGCSurveyResponse.question_type)
  return _internal_question_type();
}
inline void CMsgGCSurveyResponse::_internal_set_question_type(::SurveyQuestionType value) {
  assert(::SurveyQuestionType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  question_type_ = value;
}
inline void CMsgGCSurveyResponse::set_question_type(::SurveyQuestionType value) {
  _internal_set_question_type(value);
  // @@protoc_insertion_point(field_set:CMsgGCSurveyResponse.question_type)
}

// optional uint64 match_id = 2;
inline bool CMsgGCSurveyResponse::_internal_has_match_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCSurveyResponse::has_match_id() const {
  return _internal_has_match_id();
}
inline void CMsgGCSurveyResponse::clear_match_id() {
  match_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCSurveyResponse::_internal_match_id() const {
  return match_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCSurveyResponse::match_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCSurveyResponse.match_id)
  return _internal_match_id();
}
inline void CMsgGCSurveyResponse::_internal_set_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  match_id_ = value;
}
inline void CMsgGCSurveyResponse::set_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_match_id(value);
  // @@protoc_insertion_point(field_set:CMsgGCSurveyResponse.match_id)
}

// optional int32 response = 3;
inline bool CMsgGCSurveyResponse::_internal_has_response() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGCSurveyResponse::has_response() const {
  return _internal_has_response();
}
inline void CMsgGCSurveyResponse::clear_response() {
  response_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGCSurveyResponse::_internal_response() const {
  return response_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGCSurveyResponse::response() const {
  // @@protoc_insertion_point(field_get:CMsgGCSurveyResponse.response)
  return _internal_response();
}
inline void CMsgGCSurveyResponse::_internal_set_response(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  response_ = value;
}
inline void CMsgGCSurveyResponse::set_response(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_response(value);
  // @@protoc_insertion_point(field_set:CMsgGCSurveyResponse.response)
}

// -------------------------------------------------------------------

// CSOQuestMapNode

// optional uint32 account_id = 1 [(.key_field) = true];
inline bool CSOQuestMapNode::_internal_has_account_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSOQuestMapNode::has_account_id() const {
  return _internal_has_account_id();
}
inline void CSOQuestMapNode::clear_account_id() {
  account_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOQuestMapNode::_internal_account_id() const {
  return account_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOQuestMapNode::account_id() const {
  // @@protoc_insertion_point(field_get:CSOQuestMapNode.account_id)
  return _internal_account_id();
}
inline void CSOQuestMapNode::_internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  account_id_ = value;
}
inline void CSOQuestMapNode::set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CSOQuestMapNode.account_id)
}

// optional uint32 defindex = 3 [(.key_field) = true];
inline bool CSOQuestMapNode::_internal_has_defindex() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSOQuestMapNode::has_defindex() const {
  return _internal_has_defindex();
}
inline void CSOQuestMapNode::clear_defindex() {
  defindex_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOQuestMapNode::_internal_defindex() const {
  return defindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOQuestMapNode::defindex() const {
  // @@protoc_insertion_point(field_get:CSOQuestMapNode.defindex)
  return _internal_defindex();
}
inline void CSOQuestMapNode::_internal_set_defindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  defindex_ = value;
}
inline void CSOQuestMapNode::set_defindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_defindex(value);
  // @@protoc_insertion_point(field_set:CSOQuestMapNode.defindex)
}

// optional uint32 node_id = 4;
inline bool CSOQuestMapNode::_internal_has_node_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CSOQuestMapNode::has_node_id() const {
  return _internal_has_node_id();
}
inline void CSOQuestMapNode::clear_node_id() {
  node_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOQuestMapNode::_internal_node_id() const {
  return node_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOQuestMapNode::node_id() const {
  // @@protoc_insertion_point(field_get:CSOQuestMapNode.node_id)
  return _internal_node_id();
}
inline void CSOQuestMapNode::_internal_set_node_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  node_id_ = value;
}
inline void CSOQuestMapNode::set_node_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_node_id(value);
  // @@protoc_insertion_point(field_set:CSOQuestMapNode.node_id)
}

// optional bool star_0_earned = 6 [default = false];
inline bool CSOQuestMapNode::_internal_has_star_0_earned() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CSOQuestMapNode::has_star_0_earned() const {
  return _internal_has_star_0_earned();
}
inline void CSOQuestMapNode::clear_star_0_earned() {
  star_0_earned_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CSOQuestMapNode::_internal_star_0_earned() const {
  return star_0_earned_;
}
inline bool CSOQuestMapNode::star_0_earned() const {
  // @@protoc_insertion_point(field_get:CSOQuestMapNode.star_0_earned)
  return _internal_star_0_earned();
}
inline void CSOQuestMapNode::_internal_set_star_0_earned(bool value) {
  _has_bits_[0] |= 0x00000008u;
  star_0_earned_ = value;
}
inline void CSOQuestMapNode::set_star_0_earned(bool value) {
  _internal_set_star_0_earned(value);
  // @@protoc_insertion_point(field_set:CSOQuestMapNode.star_0_earned)
}

// optional bool star_1_earned = 7 [default = false];
inline bool CSOQuestMapNode::_internal_has_star_1_earned() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CSOQuestMapNode::has_star_1_earned() const {
  return _internal_has_star_1_earned();
}
inline void CSOQuestMapNode::clear_star_1_earned() {
  star_1_earned_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CSOQuestMapNode::_internal_star_1_earned() const {
  return star_1_earned_;
}
inline bool CSOQuestMapNode::star_1_earned() const {
  // @@protoc_insertion_point(field_get:CSOQuestMapNode.star_1_earned)
  return _internal_star_1_earned();
}
inline void CSOQuestMapNode::_internal_set_star_1_earned(bool value) {
  _has_bits_[0] |= 0x00000010u;
  star_1_earned_ = value;
}
inline void CSOQuestMapNode::set_star_1_earned(bool value) {
  _internal_set_star_1_earned(value);
  // @@protoc_insertion_point(field_set:CSOQuestMapNode.star_1_earned)
}

// optional bool star_2_earned = 8 [default = false];
inline bool CSOQuestMapNode::_internal_has_star_2_earned() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CSOQuestMapNode::has_star_2_earned() const {
  return _internal_has_star_2_earned();
}
inline void CSOQuestMapNode::clear_star_2_earned() {
  star_2_earned_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool CSOQuestMapNode::_internal_star_2_earned() const {
  return star_2_earned_;
}
inline bool CSOQuestMapNode::star_2_earned() const {
  // @@protoc_insertion_point(field_get:CSOQuestMapNode.star_2_earned)
  return _internal_star_2_earned();
}
inline void CSOQuestMapNode::_internal_set_star_2_earned(bool value) {
  _has_bits_[0] |= 0x00000020u;
  star_2_earned_ = value;
}
inline void CSOQuestMapNode::set_star_2_earned(bool value) {
  _internal_set_star_2_earned(value);
  // @@protoc_insertion_point(field_set:CSOQuestMapNode.star_2_earned)
}

// optional bool loot_claimed = 9 [default = false];
inline bool CSOQuestMapNode::_internal_has_loot_claimed() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CSOQuestMapNode::has_loot_claimed() const {
  return _internal_has_loot_claimed();
}
inline void CSOQuestMapNode::clear_loot_claimed() {
  loot_claimed_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool CSOQuestMapNode::_internal_loot_claimed() const {
  return loot_claimed_;
}
inline bool CSOQuestMapNode::loot_claimed() const {
  // @@protoc_insertion_point(field_get:CSOQuestMapNode.loot_claimed)
  return _internal_loot_claimed();
}
inline void CSOQuestMapNode::_internal_set_loot_claimed(bool value) {
  _has_bits_[0] |= 0x00000040u;
  loot_claimed_ = value;
}
inline void CSOQuestMapNode::set_loot_claimed(bool value) {
  _internal_set_loot_claimed(value);
  // @@protoc_insertion_point(field_set:CSOQuestMapNode.loot_claimed)
}

// optional uint32 selected_quest_def = 10 [default = 0];
inline bool CSOQuestMapNode::_internal_has_selected_quest_def() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CSOQuestMapNode::has_selected_quest_def() const {
  return _internal_has_selected_quest_def();
}
inline void CSOQuestMapNode::clear_selected_quest_def() {
  selected_quest_def_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOQuestMapNode::_internal_selected_quest_def() const {
  return selected_quest_def_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOQuestMapNode::selected_quest_def() const {
  // @@protoc_insertion_point(field_get:CSOQuestMapNode.selected_quest_def)
  return _internal_selected_quest_def();
}
inline void CSOQuestMapNode::_internal_set_selected_quest_def(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  selected_quest_def_ = value;
}
inline void CSOQuestMapNode::set_selected_quest_def(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_selected_quest_def(value);
  // @@protoc_insertion_point(field_set:CSOQuestMapNode.selected_quest_def)
}

// optional uint32 map_cycle = 11;
inline bool CSOQuestMapNode::_internal_has_map_cycle() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CSOQuestMapNode::has_map_cycle() const {
  return _internal_has_map_cycle();
}
inline void CSOQuestMapNode::clear_map_cycle() {
  map_cycle_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOQuestMapNode::_internal_map_cycle() const {
  return map_cycle_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOQuestMapNode::map_cycle() const {
  // @@protoc_insertion_point(field_get:CSOQuestMapNode.map_cycle)
  return _internal_map_cycle();
}
inline void CSOQuestMapNode::_internal_set_map_cycle(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  map_cycle_ = value;
}
inline void CSOQuestMapNode::set_map_cycle(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_map_cycle(value);
  // @@protoc_insertion_point(field_set:CSOQuestMapNode.map_cycle)
}

// -------------------------------------------------------------------

// CSOQuest

// optional uint32 account_id = 1;
inline bool CSOQuest::_internal_has_account_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSOQuest::has_account_id() const {
  return _internal_has_account_id();
}
inline void CSOQuest::clear_account_id() {
  account_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOQuest::_internal_account_id() const {
  return account_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOQuest::account_id() const {
  // @@protoc_insertion_point(field_get:CSOQuest.account_id)
  return _internal_account_id();
}
inline void CSOQuest::_internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  account_id_ = value;
}
inline void CSOQuest::set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CSOQuest.account_id)
}

// optional uint64 quest_id = 2 [(.key_field) = true];
inline bool CSOQuest::_internal_has_quest_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSOQuest::has_quest_id() const {
  return _internal_has_quest_id();
}
inline void CSOQuest::clear_quest_id() {
  quest_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CSOQuest::_internal_quest_id() const {
  return quest_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CSOQuest::quest_id() const {
  // @@protoc_insertion_point(field_get:CSOQuest.quest_id)
  return _internal_quest_id();
}
inline void CSOQuest::_internal_set_quest_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  quest_id_ = value;
}
inline void CSOQuest::set_quest_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_quest_id(value);
  // @@protoc_insertion_point(field_set:CSOQuest.quest_id)
}

// optional uint32 defindex = 3;
inline bool CSOQuest::_internal_has_defindex() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CSOQuest::has_defindex() const {
  return _internal_has_defindex();
}
inline void CSOQuest::clear_defindex() {
  defindex_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOQuest::_internal_defindex() const {
  return defindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOQuest::defindex() const {
  // @@protoc_insertion_point(field_get:CSOQuest.defindex)
  return _internal_defindex();
}
inline void CSOQuest::_internal_set_defindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  defindex_ = value;
}
inline void CSOQuest::set_defindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_defindex(value);
  // @@protoc_insertion_point(field_set:CSOQuest.defindex)
}

// optional bool active = 4 [default = false];
inline bool CSOQuest::_internal_has_active() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CSOQuest::has_active() const {
  return _internal_has_active();
}
inline void CSOQuest::clear_active() {
  active_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CSOQuest::_internal_active() const {
  return active_;
}
inline bool CSOQuest::active() const {
  // @@protoc_insertion_point(field_get:CSOQuest.active)
  return _internal_active();
}
inline void CSOQuest::_internal_set_active(bool value) {
  _has_bits_[0] |= 0x00000008u;
  active_ = value;
}
inline void CSOQuest::set_active(bool value) {
  _internal_set_active(value);
  // @@protoc_insertion_point(field_set:CSOQuest.active)
}

// optional uint32 points_0 = 5;
inline bool CSOQuest::_internal_has_points_0() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CSOQuest::has_points_0() const {
  return _internal_has_points_0();
}
inline void CSOQuest::clear_points_0() {
  points_0_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOQuest::_internal_points_0() const {
  return points_0_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOQuest::points_0() const {
  // @@protoc_insertion_point(field_get:CSOQuest.points_0)
  return _internal_points_0();
}
inline void CSOQuest::_internal_set_points_0(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  points_0_ = value;
}
inline void CSOQuest::set_points_0(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_points_0(value);
  // @@protoc_insertion_point(field_set:CSOQuest.points_0)
}

// optional uint32 points_1 = 6;
inline bool CSOQuest::_internal_has_points_1() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CSOQuest::has_points_1() const {
  return _internal_has_points_1();
}
inline void CSOQuest::clear_points_1() {
  points_1_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOQuest::_internal_points_1() const {
  return points_1_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOQuest::points_1() const {
  // @@protoc_insertion_point(field_get:CSOQuest.points_1)
  return _internal_points_1();
}
inline void CSOQuest::_internal_set_points_1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  points_1_ = value;
}
inline void CSOQuest::set_points_1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_points_1(value);
  // @@protoc_insertion_point(field_set:CSOQuest.points_1)
}

// optional uint32 points_2 = 7;
inline bool CSOQuest::_internal_has_points_2() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CSOQuest::has_points_2() const {
  return _internal_has_points_2();
}
inline void CSOQuest::clear_points_2() {
  points_2_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOQuest::_internal_points_2() const {
  return points_2_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOQuest::points_2() const {
  // @@protoc_insertion_point(field_get:CSOQuest.points_2)
  return _internal_points_2();
}
inline void CSOQuest::_internal_set_points_2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  points_2_ = value;
}
inline void CSOQuest::set_points_2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_points_2(value);
  // @@protoc_insertion_point(field_set:CSOQuest.points_2)
}

// optional uint32 quest_map_node_source_id = 8;
inline bool CSOQuest::_internal_has_quest_map_node_source_id() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CSOQuest::has_quest_map_node_source_id() const {
  return _internal_has_quest_map_node_source_id();
}
inline void CSOQuest::clear_quest_map_node_source_id() {
  quest_map_node_source_id_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOQuest::_internal_quest_map_node_source_id() const {
  return quest_map_node_source_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOQuest::quest_map_node_source_id() const {
  // @@protoc_insertion_point(field_get:CSOQuest.quest_map_node_source_id)
  return _internal_quest_map_node_source_id();
}
inline void CSOQuest::_internal_set_quest_map_node_source_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  quest_map_node_source_id_ = value;
}
inline void CSOQuest::set_quest_map_node_source_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_quest_map_node_source_id(value);
  // @@protoc_insertion_point(field_set:CSOQuest.quest_map_node_source_id)
}

// optional uint32 map_cycle = 9;
inline bool CSOQuest::_internal_has_map_cycle() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CSOQuest::has_map_cycle() const {
  return _internal_has_map_cycle();
}
inline void CSOQuest::clear_map_cycle() {
  map_cycle_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOQuest::_internal_map_cycle() const {
  return map_cycle_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOQuest::map_cycle() const {
  // @@protoc_insertion_point(field_get:CSOQuest.map_cycle)
  return _internal_map_cycle();
}
inline void CSOQuest::_internal_set_map_cycle(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  map_cycle_ = value;
}
inline void CSOQuest::set_map_cycle(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_map_cycle(value);
  // @@protoc_insertion_point(field_set:CSOQuest.map_cycle)
}

// -------------------------------------------------------------------

// CSOQuestMapRewardPurchase

// optional uint32 account_id = 1;
inline bool CSOQuestMapRewardPurchase::_internal_has_account_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSOQuestMapRewardPurchase::has_account_id() const {
  return _internal_has_account_id();
}
inline void CSOQuestMapRewardPurchase::clear_account_id() {
  account_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOQuestMapRewardPurchase::_internal_account_id() const {
  return account_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOQuestMapRewardPurchase::account_id() const {
  // @@protoc_insertion_point(field_get:CSOQuestMapRewardPurchase.account_id)
  return _internal_account_id();
}
inline void CSOQuestMapRewardPurchase::_internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  account_id_ = value;
}
inline void CSOQuestMapRewardPurchase::set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CSOQuestMapRewardPurchase.account_id)
}

// optional uint32 defindex = 2 [(.key_field) = true];
inline bool CSOQuestMapRewardPurchase::_internal_has_defindex() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSOQuestMapRewardPurchase::has_defindex() const {
  return _internal_has_defindex();
}
inline void CSOQuestMapRewardPurchase::clear_defindex() {
  defindex_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOQuestMapRewardPurchase::_internal_defindex() const {
  return defindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOQuestMapRewardPurchase::defindex() const {
  // @@protoc_insertion_point(field_get:CSOQuestMapRewardPurchase.defindex)
  return _internal_defindex();
}
inline void CSOQuestMapRewardPurchase::_internal_set_defindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  defindex_ = value;
}
inline void CSOQuestMapRewardPurchase::set_defindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_defindex(value);
  // @@protoc_insertion_point(field_set:CSOQuestMapRewardPurchase.defindex)
}

// optional uint32 count = 3;
inline bool CSOQuestMapRewardPurchase::_internal_has_count() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CSOQuestMapRewardPurchase::has_count() const {
  return _internal_has_count();
}
inline void CSOQuestMapRewardPurchase::clear_count() {
  count_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOQuestMapRewardPurchase::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOQuestMapRewardPurchase::count() const {
  // @@protoc_insertion_point(field_get:CSOQuestMapRewardPurchase.count)
  return _internal_count();
}
inline void CSOQuestMapRewardPurchase::_internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  count_ = value;
}
inline void CSOQuestMapRewardPurchase::set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:CSOQuestMapRewardPurchase.count)
}

// optional uint32 map_cycle = 4;
inline bool CSOQuestMapRewardPurchase::_internal_has_map_cycle() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CSOQuestMapRewardPurchase::has_map_cycle() const {
  return _internal_has_map_cycle();
}
inline void CSOQuestMapRewardPurchase::clear_map_cycle() {
  map_cycle_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOQuestMapRewardPurchase::_internal_map_cycle() const {
  return map_cycle_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOQuestMapRewardPurchase::map_cycle() const {
  // @@protoc_insertion_point(field_get:CSOQuestMapRewardPurchase.map_cycle)
  return _internal_map_cycle();
}
inline void CSOQuestMapRewardPurchase::_internal_set_map_cycle(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  map_cycle_ = value;
}
inline void CSOQuestMapRewardPurchase::set_map_cycle(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_map_cycle(value);
  // @@protoc_insertion_point(field_set:CSOQuestMapRewardPurchase.map_cycle)
}

// optional uint32 purchase_id = 5;
inline bool CSOQuestMapRewardPurchase::_internal_has_purchase_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CSOQuestMapRewardPurchase::has_purchase_id() const {
  return _internal_has_purchase_id();
}
inline void CSOQuestMapRewardPurchase::clear_purchase_id() {
  purchase_id_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOQuestMapRewardPurchase::_internal_purchase_id() const {
  return purchase_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOQuestMapRewardPurchase::purchase_id() const {
  // @@protoc_insertion_point(field_get:CSOQuestMapRewardPurchase.purchase_id)
  return _internal_purchase_id();
}
inline void CSOQuestMapRewardPurchase::_internal_set_purchase_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  purchase_id_ = value;
}
inline void CSOQuestMapRewardPurchase::set_purchase_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_purchase_id(value);
  // @@protoc_insertion_point(field_set:CSOQuestMapRewardPurchase.purchase_id)
}

// -------------------------------------------------------------------

// CMsgGCQuestIdentify

// optional uint64 quest_id = 1;
inline bool CMsgGCQuestIdentify::_internal_has_quest_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCQuestIdentify::has_quest_id() const {
  return _internal_has_quest_id();
}
inline void CMsgGCQuestIdentify::clear_quest_id() {
  quest_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCQuestIdentify::_internal_quest_id() const {
  return quest_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCQuestIdentify::quest_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCQuestIdentify.quest_id)
  return _internal_quest_id();
}
inline void CMsgGCQuestIdentify::_internal_set_quest_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  quest_id_ = value;
}
inline void CMsgGCQuestIdentify::set_quest_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_quest_id(value);
  // @@protoc_insertion_point(field_set:CMsgGCQuestIdentify.quest_id)
}

// -------------------------------------------------------------------

// CMsgGCQuestDevGive

// optional uint32 quest_def_index = 1;
inline bool CMsgGCQuestDevGive::_internal_has_quest_def_index() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCQuestDevGive::has_quest_def_index() const {
  return _internal_has_quest_def_index();
}
inline void CMsgGCQuestDevGive::clear_quest_def_index() {
  quest_def_index_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCQuestDevGive::_internal_quest_def_index() const {
  return quest_def_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCQuestDevGive::quest_def_index() const {
  // @@protoc_insertion_point(field_get:CMsgGCQuestDevGive.quest_def_index)
  return _internal_quest_def_index();
}
inline void CMsgGCQuestDevGive::_internal_set_quest_def_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  quest_def_index_ = value;
}
inline void CMsgGCQuestDevGive::set_quest_def_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_quest_def_index(value);
  // @@protoc_insertion_point(field_set:CMsgGCQuestDevGive.quest_def_index)
}

// -------------------------------------------------------------------

// CMsgGCQuestNodeTurnIn

// optional uint32 node_defindex = 1;
inline bool CMsgGCQuestNodeTurnIn::_internal_has_node_defindex() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCQuestNodeTurnIn::has_node_defindex() const {
  return _internal_has_node_defindex();
}
inline void CMsgGCQuestNodeTurnIn::clear_node_defindex() {
  node_defindex_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCQuestNodeTurnIn::_internal_node_defindex() const {
  return node_defindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCQuestNodeTurnIn::node_defindex() const {
  // @@protoc_insertion_point(field_get:CMsgGCQuestNodeTurnIn.node_defindex)
  return _internal_node_defindex();
}
inline void CMsgGCQuestNodeTurnIn::_internal_set_node_defindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  node_defindex_ = value;
}
inline void CMsgGCQuestNodeTurnIn::set_node_defindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_node_defindex(value);
  // @@protoc_insertion_point(field_set:CMsgGCQuestNodeTurnIn.node_defindex)
}

// -------------------------------------------------------------------

// CMsgGCQuestMapUnlockNode

// optional uint32 node_defindex = 1;
inline bool CMsgGCQuestMapUnlockNode::_internal_has_node_defindex() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCQuestMapUnlockNode::has_node_defindex() const {
  return _internal_has_node_defindex();
}
inline void CMsgGCQuestMapUnlockNode::clear_node_defindex() {
  node_defindex_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCQuestMapUnlockNode::_internal_node_defindex() const {
  return node_defindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCQuestMapUnlockNode::node_defindex() const {
  // @@protoc_insertion_point(field_get:CMsgGCQuestMapUnlockNode.node_defindex)
  return _internal_node_defindex();
}
inline void CMsgGCQuestMapUnlockNode::_internal_set_node_defindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  node_defindex_ = value;
}
inline void CMsgGCQuestMapUnlockNode::set_node_defindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_node_defindex(value);
  // @@protoc_insertion_point(field_set:CMsgGCQuestMapUnlockNode.node_defindex)
}

// optional uint32 quest_defindex = 2;
inline bool CMsgGCQuestMapUnlockNode::_internal_has_quest_defindex() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCQuestMapUnlockNode::has_quest_defindex() const {
  return _internal_has_quest_defindex();
}
inline void CMsgGCQuestMapUnlockNode::clear_quest_defindex() {
  quest_defindex_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCQuestMapUnlockNode::_internal_quest_defindex() const {
  return quest_defindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCQuestMapUnlockNode::quest_defindex() const {
  // @@protoc_insertion_point(field_get:CMsgGCQuestMapUnlockNode.quest_defindex)
  return _internal_quest_defindex();
}
inline void CMsgGCQuestMapUnlockNode::_internal_set_quest_defindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  quest_defindex_ = value;
}
inline void CMsgGCQuestMapUnlockNode::set_quest_defindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_quest_defindex(value);
  // @@protoc_insertion_point(field_set:CMsgGCQuestMapUnlockNode.quest_defindex)
}

// -------------------------------------------------------------------

// CMsgGCNewMatchForLobbyRequest

// optional uint64 current_match_id = 1;
inline bool CMsgGCNewMatchForLobbyRequest::_internal_has_current_match_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCNewMatchForLobbyRequest::has_current_match_id() const {
  return _internal_has_current_match_id();
}
inline void CMsgGCNewMatchForLobbyRequest::clear_current_match_id() {
  current_match_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCNewMatchForLobbyRequest::_internal_current_match_id() const {
  return current_match_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCNewMatchForLobbyRequest::current_match_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCNewMatchForLobbyRequest.current_match_id)
  return _internal_current_match_id();
}
inline void CMsgGCNewMatchForLobbyRequest::_internal_set_current_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  current_match_id_ = value;
}
inline void CMsgGCNewMatchForLobbyRequest::set_current_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_current_match_id(value);
  // @@protoc_insertion_point(field_set:CMsgGCNewMatchForLobbyRequest.current_match_id)
}

// optional uint32 next_map_id = 2;
inline bool CMsgGCNewMatchForLobbyRequest::_internal_has_next_map_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGCNewMatchForLobbyRequest::has_next_map_id() const {
  return _internal_has_next_map_id();
}
inline void CMsgGCNewMatchForLobbyRequest::clear_next_map_id() {
  next_map_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCNewMatchForLobbyRequest::_internal_next_map_id() const {
  return next_map_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCNewMatchForLobbyRequest::next_map_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCNewMatchForLobbyRequest.next_map_id)
  return _internal_next_map_id();
}
inline void CMsgGCNewMatchForLobbyRequest::_internal_set_next_map_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  next_map_id_ = value;
}
inline void CMsgGCNewMatchForLobbyRequest::set_next_map_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_next_map_id(value);
  // @@protoc_insertion_point(field_set:CMsgGCNewMatchForLobbyRequest.next_map_id)
}

// optional uint64 lobby_id = 3;
inline bool CMsgGCNewMatchForLobbyRequest::_internal_has_lobby_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCNewMatchForLobbyRequest::has_lobby_id() const {
  return _internal_has_lobby_id();
}
inline void CMsgGCNewMatchForLobbyRequest::clear_lobby_id() {
  lobby_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCNewMatchForLobbyRequest::_internal_lobby_id() const {
  return lobby_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCNewMatchForLobbyRequest::lobby_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCNewMatchForLobbyRequest.lobby_id)
  return _internal_lobby_id();
}
inline void CMsgGCNewMatchForLobbyRequest::_internal_set_lobby_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  lobby_id_ = value;
}
inline void CMsgGCNewMatchForLobbyRequest::set_lobby_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_lobby_id(value);
  // @@protoc_insertion_point(field_set:CMsgGCNewMatchForLobbyRequest.lobby_id)
}

// -------------------------------------------------------------------

// CMsgGCNewMatchForLobbyResponse

// optional bool success = 1;
inline bool CMsgGCNewMatchForLobbyResponse::_internal_has_success() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCNewMatchForLobbyResponse::has_success() const {
  return _internal_has_success();
}
inline void CMsgGCNewMatchForLobbyResponse::clear_success() {
  success_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CMsgGCNewMatchForLobbyResponse::_internal_success() const {
  return success_;
}
inline bool CMsgGCNewMatchForLobbyResponse::success() const {
  // @@protoc_insertion_point(field_get:CMsgGCNewMatchForLobbyResponse.success)
  return _internal_success();
}
inline void CMsgGCNewMatchForLobbyResponse::_internal_set_success(bool value) {
  _has_bits_[0] |= 0x00000001u;
  success_ = value;
}
inline void CMsgGCNewMatchForLobbyResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:CMsgGCNewMatchForLobbyResponse.success)
}

// -------------------------------------------------------------------

// CMsgGCChangeMatchPlayerTeamsRequest_Member

// optional uint64 member_id = 1;
inline bool CMsgGCChangeMatchPlayerTeamsRequest_Member::_internal_has_member_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCChangeMatchPlayerTeamsRequest_Member::has_member_id() const {
  return _internal_has_member_id();
}
inline void CMsgGCChangeMatchPlayerTeamsRequest_Member::clear_member_id() {
  member_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCChangeMatchPlayerTeamsRequest_Member::_internal_member_id() const {
  return member_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCChangeMatchPlayerTeamsRequest_Member::member_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCChangeMatchPlayerTeamsRequest.Member.member_id)
  return _internal_member_id();
}
inline void CMsgGCChangeMatchPlayerTeamsRequest_Member::_internal_set_member_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  member_id_ = value;
}
inline void CMsgGCChangeMatchPlayerTeamsRequest_Member::set_member_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_member_id(value);
  // @@protoc_insertion_point(field_set:CMsgGCChangeMatchPlayerTeamsRequest.Member.member_id)
}

// optional .TF_GC_TEAM new_team = 2 [default = TF_GC_TEAM_NOTEAM];
inline bool CMsgGCChangeMatchPlayerTeamsRequest_Member::_internal_has_new_team() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCChangeMatchPlayerTeamsRequest_Member::has_new_team() const {
  return _internal_has_new_team();
}
inline void CMsgGCChangeMatchPlayerTeamsRequest_Member::clear_new_team() {
  new_team_ = 5;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::TF_GC_TEAM CMsgGCChangeMatchPlayerTeamsRequest_Member::_internal_new_team() const {
  return static_cast< ::TF_GC_TEAM >(new_team_);
}
inline ::TF_GC_TEAM CMsgGCChangeMatchPlayerTeamsRequest_Member::new_team() const {
  // @@protoc_insertion_point(field_get:CMsgGCChangeMatchPlayerTeamsRequest.Member.new_team)
  return _internal_new_team();
}
inline void CMsgGCChangeMatchPlayerTeamsRequest_Member::_internal_set_new_team(::TF_GC_TEAM value) {
  assert(::TF_GC_TEAM_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  new_team_ = value;
}
inline void CMsgGCChangeMatchPlayerTeamsRequest_Member::set_new_team(::TF_GC_TEAM value) {
  _internal_set_new_team(value);
  // @@protoc_insertion_point(field_set:CMsgGCChangeMatchPlayerTeamsRequest.Member.new_team)
}

// -------------------------------------------------------------------

// CMsgGCChangeMatchPlayerTeamsRequest

// optional uint64 match_id = 1;
inline bool CMsgGCChangeMatchPlayerTeamsRequest::_internal_has_match_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCChangeMatchPlayerTeamsRequest::has_match_id() const {
  return _internal_has_match_id();
}
inline void CMsgGCChangeMatchPlayerTeamsRequest::clear_match_id() {
  match_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCChangeMatchPlayerTeamsRequest::_internal_match_id() const {
  return match_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCChangeMatchPlayerTeamsRequest::match_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCChangeMatchPlayerTeamsRequest.match_id)
  return _internal_match_id();
}
inline void CMsgGCChangeMatchPlayerTeamsRequest::_internal_set_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  match_id_ = value;
}
inline void CMsgGCChangeMatchPlayerTeamsRequest::set_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_match_id(value);
  // @@protoc_insertion_point(field_set:CMsgGCChangeMatchPlayerTeamsRequest.match_id)
}

// optional uint64 lobby_id = 2;
inline bool CMsgGCChangeMatchPlayerTeamsRequest::_internal_has_lobby_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCChangeMatchPlayerTeamsRequest::has_lobby_id() const {
  return _internal_has_lobby_id();
}
inline void CMsgGCChangeMatchPlayerTeamsRequest::clear_lobby_id() {
  lobby_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCChangeMatchPlayerTeamsRequest::_internal_lobby_id() const {
  return lobby_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCChangeMatchPlayerTeamsRequest::lobby_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCChangeMatchPlayerTeamsRequest.lobby_id)
  return _internal_lobby_id();
}
inline void CMsgGCChangeMatchPlayerTeamsRequest::_internal_set_lobby_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  lobby_id_ = value;
}
inline void CMsgGCChangeMatchPlayerTeamsRequest::set_lobby_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_lobby_id(value);
  // @@protoc_insertion_point(field_set:CMsgGCChangeMatchPlayerTeamsRequest.lobby_id)
}

// repeated .CMsgGCChangeMatchPlayerTeamsRequest.Member member = 3;
inline int CMsgGCChangeMatchPlayerTeamsRequest::_internal_member_size() const {
  return member_.size();
}
inline int CMsgGCChangeMatchPlayerTeamsRequest::member_size() const {
  return _internal_member_size();
}
inline void CMsgGCChangeMatchPlayerTeamsRequest::clear_member() {
  member_.Clear();
}
inline ::CMsgGCChangeMatchPlayerTeamsRequest_Member* CMsgGCChangeMatchPlayerTeamsRequest::mutable_member(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGCChangeMatchPlayerTeamsRequest.member)
  return member_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCChangeMatchPlayerTeamsRequest_Member >*
CMsgGCChangeMatchPlayerTeamsRequest::mutable_member() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCChangeMatchPlayerTeamsRequest.member)
  return &member_;
}
inline const ::CMsgGCChangeMatchPlayerTeamsRequest_Member& CMsgGCChangeMatchPlayerTeamsRequest::_internal_member(int index) const {
  return member_.Get(index);
}
inline const ::CMsgGCChangeMatchPlayerTeamsRequest_Member& CMsgGCChangeMatchPlayerTeamsRequest::member(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCChangeMatchPlayerTeamsRequest.member)
  return _internal_member(index);
}
inline ::CMsgGCChangeMatchPlayerTeamsRequest_Member* CMsgGCChangeMatchPlayerTeamsRequest::_internal_add_member() {
  return member_.Add();
}
inline ::CMsgGCChangeMatchPlayerTeamsRequest_Member* CMsgGCChangeMatchPlayerTeamsRequest::add_member() {
  // @@protoc_insertion_point(field_add:CMsgGCChangeMatchPlayerTeamsRequest.member)
  return _internal_add_member();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCChangeMatchPlayerTeamsRequest_Member >&
CMsgGCChangeMatchPlayerTeamsRequest::member() const {
  // @@protoc_insertion_point(field_list:CMsgGCChangeMatchPlayerTeamsRequest.member)
  return member_;
}

// -------------------------------------------------------------------

// CMsgGCChangeMatchPlayerTeamsResponse

// optional bool success = 1;
inline bool CMsgGCChangeMatchPlayerTeamsResponse::_internal_has_success() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCChangeMatchPlayerTeamsResponse::has_success() const {
  return _internal_has_success();
}
inline void CMsgGCChangeMatchPlayerTeamsResponse::clear_success() {
  success_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CMsgGCChangeMatchPlayerTeamsResponse::_internal_success() const {
  return success_;
}
inline bool CMsgGCChangeMatchPlayerTeamsResponse::success() const {
  // @@protoc_insertion_point(field_get:CMsgGCChangeMatchPlayerTeamsResponse.success)
  return _internal_success();
}
inline void CMsgGCChangeMatchPlayerTeamsResponse::_internal_set_success(bool value) {
  _has_bits_[0] |= 0x00000001u;
  success_ = value;
}
inline void CMsgGCChangeMatchPlayerTeamsResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:CMsgGCChangeMatchPlayerTeamsResponse.success)
}

// -------------------------------------------------------------------

// CMsgGCQuestComplete_Debug

// optional uint64 quest_id = 1;
inline bool CMsgGCQuestComplete_Debug::_internal_has_quest_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCQuestComplete_Debug::has_quest_id() const {
  return _internal_has_quest_id();
}
inline void CMsgGCQuestComplete_Debug::clear_quest_id() {
  quest_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCQuestComplete_Debug::_internal_quest_id() const {
  return quest_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCQuestComplete_Debug::quest_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCQuestComplete_Debug.quest_id)
  return _internal_quest_id();
}
inline void CMsgGCQuestComplete_Debug::_internal_set_quest_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  quest_id_ = value;
}
inline void CMsgGCQuestComplete_Debug::set_quest_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_quest_id(value);
  // @@protoc_insertion_point(field_set:CMsgGCQuestComplete_Debug.quest_id)
}

// optional uint32 points_type = 2;
inline bool CMsgGCQuestComplete_Debug::_internal_has_points_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCQuestComplete_Debug::has_points_type() const {
  return _internal_has_points_type();
}
inline void CMsgGCQuestComplete_Debug::clear_points_type() {
  points_type_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCQuestComplete_Debug::_internal_points_type() const {
  return points_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCQuestComplete_Debug::points_type() const {
  // @@protoc_insertion_point(field_get:CMsgGCQuestComplete_Debug.points_type)
  return _internal_points_type();
}
inline void CMsgGCQuestComplete_Debug::_internal_set_points_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  points_type_ = value;
}
inline void CMsgGCQuestComplete_Debug::set_points_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_points_type(value);
  // @@protoc_insertion_point(field_set:CMsgGCQuestComplete_Debug.points_type)
}

// -------------------------------------------------------------------

// CMsgGCQuestMap_Debug

// optional uint32 reset_operation = 1;
inline bool CMsgGCQuestMap_Debug::_internal_has_reset_operation() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCQuestMap_Debug::has_reset_operation() const {
  return _internal_has_reset_operation();
}
inline void CMsgGCQuestMap_Debug::clear_reset_operation() {
  reset_operation_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCQuestMap_Debug::_internal_reset_operation() const {
  return reset_operation_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCQuestMap_Debug::reset_operation() const {
  // @@protoc_insertion_point(field_get:CMsgGCQuestMap_Debug.reset_operation)
  return _internal_reset_operation();
}
inline void CMsgGCQuestMap_Debug::_internal_set_reset_operation(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  reset_operation_ = value;
}
inline void CMsgGCQuestMap_Debug::set_reset_operation(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_reset_operation(value);
  // @@protoc_insertion_point(field_set:CMsgGCQuestMap_Debug.reset_operation)
}

// optional uint32 give_credit = 2;
inline bool CMsgGCQuestMap_Debug::_internal_has_give_credit() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGCQuestMap_Debug::has_give_credit() const {
  return _internal_has_give_credit();
}
inline void CMsgGCQuestMap_Debug::clear_give_credit() {
  give_credit_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCQuestMap_Debug::_internal_give_credit() const {
  return give_credit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCQuestMap_Debug::give_credit() const {
  // @@protoc_insertion_point(field_get:CMsgGCQuestMap_Debug.give_credit)
  return _internal_give_credit();
}
inline void CMsgGCQuestMap_Debug::_internal_set_give_credit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  give_credit_ = value;
}
inline void CMsgGCQuestMap_Debug::set_give_credit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_give_credit(value);
  // @@protoc_insertion_point(field_set:CMsgGCQuestMap_Debug.give_credit)
}

// optional .CMsgGCQuestMapUnlockNode unlock_node = 3;
inline bool CMsgGCQuestMap_Debug::_internal_has_unlock_node() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || unlock_node_ != nullptr);
  return value;
}
inline bool CMsgGCQuestMap_Debug::has_unlock_node() const {
  return _internal_has_unlock_node();
}
inline void CMsgGCQuestMap_Debug::clear_unlock_node() {
  if (unlock_node_ != nullptr) unlock_node_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgGCQuestMapUnlockNode& CMsgGCQuestMap_Debug::_internal_unlock_node() const {
  const ::CMsgGCQuestMapUnlockNode* p = unlock_node_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgGCQuestMapUnlockNode&>(
      ::_CMsgGCQuestMapUnlockNode_default_instance_);
}
inline const ::CMsgGCQuestMapUnlockNode& CMsgGCQuestMap_Debug::unlock_node() const {
  // @@protoc_insertion_point(field_get:CMsgGCQuestMap_Debug.unlock_node)
  return _internal_unlock_node();
}
inline void CMsgGCQuestMap_Debug::unsafe_arena_set_allocated_unlock_node(
    ::CMsgGCQuestMapUnlockNode* unlock_node) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(unlock_node_);
  }
  unlock_node_ = unlock_node;
  if (unlock_node) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgGCQuestMap_Debug.unlock_node)
}
inline ::CMsgGCQuestMapUnlockNode* CMsgGCQuestMap_Debug::release_unlock_node() {
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgGCQuestMapUnlockNode* temp = unlock_node_;
  unlock_node_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgGCQuestMapUnlockNode* CMsgGCQuestMap_Debug::unsafe_arena_release_unlock_node() {
  // @@protoc_insertion_point(field_release:CMsgGCQuestMap_Debug.unlock_node)
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgGCQuestMapUnlockNode* temp = unlock_node_;
  unlock_node_ = nullptr;
  return temp;
}
inline ::CMsgGCQuestMapUnlockNode* CMsgGCQuestMap_Debug::_internal_mutable_unlock_node() {
  _has_bits_[0] |= 0x00000001u;
  if (unlock_node_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgGCQuestMapUnlockNode>(GetArenaForAllocation());
    unlock_node_ = p;
  }
  return unlock_node_;
}
inline ::CMsgGCQuestMapUnlockNode* CMsgGCQuestMap_Debug::mutable_unlock_node() {
  // @@protoc_insertion_point(field_mutable:CMsgGCQuestMap_Debug.unlock_node)
  return _internal_mutable_unlock_node();
}
inline void CMsgGCQuestMap_Debug::set_allocated_unlock_node(::CMsgGCQuestMapUnlockNode* unlock_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete unlock_node_;
  }
  if (unlock_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgGCQuestMapUnlockNode>::GetOwningArena(unlock_node);
    if (message_arena != submessage_arena) {
      unlock_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unlock_node, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  unlock_node_ = unlock_node;
  // @@protoc_insertion_point(field_set_allocated:CMsgGCQuestMap_Debug.unlock_node)
}

// -------------------------------------------------------------------

// CMsgGCQuestMapPurchaseReward

// optional uint32 store_item_defindex = 1;
inline bool CMsgGCQuestMapPurchaseReward::_internal_has_store_item_defindex() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCQuestMapPurchaseReward::has_store_item_defindex() const {
  return _internal_has_store_item_defindex();
}
inline void CMsgGCQuestMapPurchaseReward::clear_store_item_defindex() {
  store_item_defindex_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCQuestMapPurchaseReward::_internal_store_item_defindex() const {
  return store_item_defindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCQuestMapPurchaseReward::store_item_defindex() const {
  // @@protoc_insertion_point(field_get:CMsgGCQuestMapPurchaseReward.store_item_defindex)
  return _internal_store_item_defindex();
}
inline void CMsgGCQuestMapPurchaseReward::_internal_set_store_item_defindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  store_item_defindex_ = value;
}
inline void CMsgGCQuestMapPurchaseReward::set_store_item_defindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_store_item_defindex(value);
  // @@protoc_insertion_point(field_set:CMsgGCQuestMapPurchaseReward.store_item_defindex)
}

// -------------------------------------------------------------------

// CMsgGCQuestResponse

// optional bool success = 1 [default = false];
inline bool CMsgGCQuestResponse::_internal_has_success() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCQuestResponse::has_success() const {
  return _internal_has_success();
}
inline void CMsgGCQuestResponse::clear_success() {
  success_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CMsgGCQuestResponse::_internal_success() const {
  return success_;
}
inline bool CMsgGCQuestResponse::success() const {
  // @@protoc_insertion_point(field_get:CMsgGCQuestResponse.success)
  return _internal_success();
}
inline void CMsgGCQuestResponse::_internal_set_success(bool value) {
  _has_bits_[0] |= 0x00000001u;
  success_ = value;
}
inline void CMsgGCQuestResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:CMsgGCQuestResponse.success)
}

// -------------------------------------------------------------------

// CMsgGCSetDisablePartyQuestProgress

// optional bool state = 1;
inline bool CMsgGCSetDisablePartyQuestProgress::_internal_has_state() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCSetDisablePartyQuestProgress::has_state() const {
  return _internal_has_state();
}
inline void CMsgGCSetDisablePartyQuestProgress::clear_state() {
  state_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CMsgGCSetDisablePartyQuestProgress::_internal_state() const {
  return state_;
}
inline bool CMsgGCSetDisablePartyQuestProgress::state() const {
  // @@protoc_insertion_point(field_get:CMsgGCSetDisablePartyQuestProgress.state)
  return _internal_state();
}
inline void CMsgGCSetDisablePartyQuestProgress::_internal_set_state(bool value) {
  _has_bits_[0] |= 0x00000001u;
  state_ = value;
}
inline void CMsgGCSetDisablePartyQuestProgress::set_state(bool value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:CMsgGCSetDisablePartyQuestProgress.state)
}

// -------------------------------------------------------------------

// CMsgQuestProgressReport

// optional uint64 quest_id = 1;
inline bool CMsgQuestProgressReport::_internal_has_quest_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgQuestProgressReport::has_quest_id() const {
  return _internal_has_quest_id();
}
inline void CMsgQuestProgressReport::clear_quest_id() {
  quest_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgQuestProgressReport::_internal_quest_id() const {
  return quest_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgQuestProgressReport::quest_id() const {
  // @@protoc_insertion_point(field_get:CMsgQuestProgressReport.quest_id)
  return _internal_quest_id();
}
inline void CMsgQuestProgressReport::_internal_set_quest_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  quest_id_ = value;
}
inline void CMsgQuestProgressReport::set_quest_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_quest_id(value);
  // @@protoc_insertion_point(field_set:CMsgQuestProgressReport.quest_id)
}

// optional bool star_0_earned = 2;
inline bool CMsgQuestProgressReport::_internal_has_star_0_earned() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgQuestProgressReport::has_star_0_earned() const {
  return _internal_has_star_0_earned();
}
inline void CMsgQuestProgressReport::clear_star_0_earned() {
  star_0_earned_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CMsgQuestProgressReport::_internal_star_0_earned() const {
  return star_0_earned_;
}
inline bool CMsgQuestProgressReport::star_0_earned() const {
  // @@protoc_insertion_point(field_get:CMsgQuestProgressReport.star_0_earned)
  return _internal_star_0_earned();
}
inline void CMsgQuestProgressReport::_internal_set_star_0_earned(bool value) {
  _has_bits_[0] |= 0x00000002u;
  star_0_earned_ = value;
}
inline void CMsgQuestProgressReport::set_star_0_earned(bool value) {
  _internal_set_star_0_earned(value);
  // @@protoc_insertion_point(field_set:CMsgQuestProgressReport.star_0_earned)
}

// optional bool star_1_earned = 3;
inline bool CMsgQuestProgressReport::_internal_has_star_1_earned() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgQuestProgressReport::has_star_1_earned() const {
  return _internal_has_star_1_earned();
}
inline void CMsgQuestProgressReport::clear_star_1_earned() {
  star_1_earned_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CMsgQuestProgressReport::_internal_star_1_earned() const {
  return star_1_earned_;
}
inline bool CMsgQuestProgressReport::star_1_earned() const {
  // @@protoc_insertion_point(field_get:CMsgQuestProgressReport.star_1_earned)
  return _internal_star_1_earned();
}
inline void CMsgQuestProgressReport::_internal_set_star_1_earned(bool value) {
  _has_bits_[0] |= 0x00000004u;
  star_1_earned_ = value;
}
inline void CMsgQuestProgressReport::set_star_1_earned(bool value) {
  _internal_set_star_1_earned(value);
  // @@protoc_insertion_point(field_set:CMsgQuestProgressReport.star_1_earned)
}

// optional bool star_2_earned = 4;
inline bool CMsgQuestProgressReport::_internal_has_star_2_earned() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgQuestProgressReport::has_star_2_earned() const {
  return _internal_has_star_2_earned();
}
inline void CMsgQuestProgressReport::clear_star_2_earned() {
  star_2_earned_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CMsgQuestProgressReport::_internal_star_2_earned() const {
  return star_2_earned_;
}
inline bool CMsgQuestProgressReport::star_2_earned() const {
  // @@protoc_insertion_point(field_get:CMsgQuestProgressReport.star_2_earned)
  return _internal_star_2_earned();
}
inline void CMsgQuestProgressReport::_internal_set_star_2_earned(bool value) {
  _has_bits_[0] |= 0x00000008u;
  star_2_earned_ = value;
}
inline void CMsgQuestProgressReport::set_star_2_earned(bool value) {
  _internal_set_star_2_earned(value);
  // @@protoc_insertion_point(field_set:CMsgQuestProgressReport.star_2_earned)
}

// repeated uint64 items_earned = 5;
inline int CMsgQuestProgressReport::_internal_items_earned_size() const {
  return items_earned_.size();
}
inline int CMsgQuestProgressReport::items_earned_size() const {
  return _internal_items_earned_size();
}
inline void CMsgQuestProgressReport::clear_items_earned() {
  items_earned_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgQuestProgressReport::_internal_items_earned(int index) const {
  return items_earned_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgQuestProgressReport::items_earned(int index) const {
  // @@protoc_insertion_point(field_get:CMsgQuestProgressReport.items_earned)
  return _internal_items_earned(index);
}
inline void CMsgQuestProgressReport::set_items_earned(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  items_earned_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgQuestProgressReport.items_earned)
}
inline void CMsgQuestProgressReport::_internal_add_items_earned(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  items_earned_.Add(value);
}
inline void CMsgQuestProgressReport::add_items_earned(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_items_earned(value);
  // @@protoc_insertion_point(field_add:CMsgQuestProgressReport.items_earned)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
CMsgQuestProgressReport::_internal_items_earned() const {
  return items_earned_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
CMsgQuestProgressReport::items_earned() const {
  // @@protoc_insertion_point(field_list:CMsgQuestProgressReport.items_earned)
  return _internal_items_earned();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
CMsgQuestProgressReport::_internal_mutable_items_earned() {
  return &items_earned_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
CMsgQuestProgressReport::mutable_items_earned() {
  // @@protoc_insertion_point(field_mutable_list:CMsgQuestProgressReport.items_earned)
  return _internal_mutable_items_earned();
}

// optional uint32 reward_credits_earned = 6;
inline bool CMsgQuestProgressReport::_internal_has_reward_credits_earned() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgQuestProgressReport::has_reward_credits_earned() const {
  return _internal_has_reward_credits_earned();
}
inline void CMsgQuestProgressReport::clear_reward_credits_earned() {
  reward_credits_earned_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgQuestProgressReport::_internal_reward_credits_earned() const {
  return reward_credits_earned_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgQuestProgressReport::reward_credits_earned() const {
  // @@protoc_insertion_point(field_get:CMsgQuestProgressReport.reward_credits_earned)
  return _internal_reward_credits_earned();
}
inline void CMsgQuestProgressReport::_internal_set_reward_credits_earned(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  reward_credits_earned_ = value;
}
inline void CMsgQuestProgressReport::set_reward_credits_earned(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_reward_credits_earned(value);
  // @@protoc_insertion_point(field_set:CMsgQuestProgressReport.reward_credits_earned)
}

// optional bool contract_completed = 7;
inline bool CMsgQuestProgressReport::_internal_has_contract_completed() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgQuestProgressReport::has_contract_completed() const {
  return _internal_has_contract_completed();
}
inline void CMsgQuestProgressReport::clear_contract_completed() {
  contract_completed_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CMsgQuestProgressReport::_internal_contract_completed() const {
  return contract_completed_;
}
inline bool CMsgQuestProgressReport::contract_completed() const {
  // @@protoc_insertion_point(field_get:CMsgQuestProgressReport.contract_completed)
  return _internal_contract_completed();
}
inline void CMsgQuestProgressReport::_internal_set_contract_completed(bool value) {
  _has_bits_[0] |= 0x00000010u;
  contract_completed_ = value;
}
inline void CMsgQuestProgressReport::set_contract_completed(bool value) {
  _internal_set_contract_completed(value);
  // @@protoc_insertion_point(field_set:CMsgQuestProgressReport.contract_completed)
}

// -------------------------------------------------------------------

// CMsgConsumePaintkit

// optional fixed64 source_id = 1;
inline bool CMsgConsumePaintkit::_internal_has_source_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgConsumePaintkit::has_source_id() const {
  return _internal_has_source_id();
}
inline void CMsgConsumePaintkit::clear_source_id() {
  source_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgConsumePaintkit::_internal_source_id() const {
  return source_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgConsumePaintkit::source_id() const {
  // @@protoc_insertion_point(field_get:CMsgConsumePaintkit.source_id)
  return _internal_source_id();
}
inline void CMsgConsumePaintkit::_internal_set_source_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  source_id_ = value;
}
inline void CMsgConsumePaintkit::set_source_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_source_id(value);
  // @@protoc_insertion_point(field_set:CMsgConsumePaintkit.source_id)
}

// optional uint32 target_defindex = 2;
inline bool CMsgConsumePaintkit::_internal_has_target_defindex() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgConsumePaintkit::has_target_defindex() const {
  return _internal_has_target_defindex();
}
inline void CMsgConsumePaintkit::clear_target_defindex() {
  target_defindex_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgConsumePaintkit::_internal_target_defindex() const {
  return target_defindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgConsumePaintkit::target_defindex() const {
  // @@protoc_insertion_point(field_get:CMsgConsumePaintkit.target_defindex)
  return _internal_target_defindex();
}
inline void CMsgConsumePaintkit::_internal_set_target_defindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  target_defindex_ = value;
}
inline void CMsgConsumePaintkit::set_target_defindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_target_defindex(value);
  // @@protoc_insertion_point(field_set:CMsgConsumePaintkit.target_defindex)
}

// -------------------------------------------------------------------

// CMsgPainkitDevGrant

// optional uint32 paintkit_defindex = 1;
inline bool CMsgPainkitDevGrant::_internal_has_paintkit_defindex() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgPainkitDevGrant::has_paintkit_defindex() const {
  return _internal_has_paintkit_defindex();
}
inline void CMsgPainkitDevGrant::clear_paintkit_defindex() {
  paintkit_defindex_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgPainkitDevGrant::_internal_paintkit_defindex() const {
  return paintkit_defindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgPainkitDevGrant::paintkit_defindex() const {
  // @@protoc_insertion_point(field_get:CMsgPainkitDevGrant.paintkit_defindex)
  return _internal_paintkit_defindex();
}
inline void CMsgPainkitDevGrant::_internal_set_paintkit_defindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  paintkit_defindex_ = value;
}
inline void CMsgPainkitDevGrant::set_paintkit_defindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_paintkit_defindex(value);
  // @@protoc_insertion_point(field_set:CMsgPainkitDevGrant.paintkit_defindex)
}

// optional float wear = 2;
inline bool CMsgPainkitDevGrant::_internal_has_wear() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgPainkitDevGrant::has_wear() const {
  return _internal_has_wear();
}
inline void CMsgPainkitDevGrant::clear_wear() {
  wear_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float CMsgPainkitDevGrant::_internal_wear() const {
  return wear_;
}
inline float CMsgPainkitDevGrant::wear() const {
  // @@protoc_insertion_point(field_get:CMsgPainkitDevGrant.wear)
  return _internal_wear();
}
inline void CMsgPainkitDevGrant::_internal_set_wear(float value) {
  _has_bits_[0] |= 0x00000002u;
  wear_ = value;
}
inline void CMsgPainkitDevGrant::set_wear(float value) {
  _internal_set_wear(value);
  // @@protoc_insertion_point(field_set:CMsgPainkitDevGrant.wear)
}

// optional uint32 item_defindex = 3;
inline bool CMsgPainkitDevGrant::_internal_has_item_defindex() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgPainkitDevGrant::has_item_defindex() const {
  return _internal_has_item_defindex();
}
inline void CMsgPainkitDevGrant::clear_item_defindex() {
  item_defindex_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgPainkitDevGrant::_internal_item_defindex() const {
  return item_defindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgPainkitDevGrant::item_defindex() const {
  // @@protoc_insertion_point(field_get:CMsgPainkitDevGrant.item_defindex)
  return _internal_item_defindex();
}
inline void CMsgPainkitDevGrant::_internal_set_item_defindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  item_defindex_ = value;
}
inline void CMsgPainkitDevGrant::set_item_defindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_item_defindex(value);
  // @@protoc_insertion_point(field_set:CMsgPainkitDevGrant.item_defindex)
}

// -------------------------------------------------------------------

// GCQuestStrangeEvent

// optional uint32 owner_account_id = 1;
inline bool GCQuestStrangeEvent::_internal_has_owner_account_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GCQuestStrangeEvent::has_owner_account_id() const {
  return _internal_has_owner_account_id();
}
inline void GCQuestStrangeEvent::clear_owner_account_id() {
  owner_account_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GCQuestStrangeEvent::_internal_owner_account_id() const {
  return owner_account_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GCQuestStrangeEvent::owner_account_id() const {
  // @@protoc_insertion_point(field_get:GCQuestStrangeEvent.owner_account_id)
  return _internal_owner_account_id();
}
inline void GCQuestStrangeEvent::_internal_set_owner_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  owner_account_id_ = value;
}
inline void GCQuestStrangeEvent::set_owner_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_owner_account_id(value);
  // @@protoc_insertion_point(field_set:GCQuestStrangeEvent.owner_account_id)
}

// optional uint32 scorer_account_id = 2;
inline bool GCQuestStrangeEvent::_internal_has_scorer_account_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GCQuestStrangeEvent::has_scorer_account_id() const {
  return _internal_has_scorer_account_id();
}
inline void GCQuestStrangeEvent::clear_scorer_account_id() {
  scorer_account_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GCQuestStrangeEvent::_internal_scorer_account_id() const {
  return scorer_account_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GCQuestStrangeEvent::scorer_account_id() const {
  // @@protoc_insertion_point(field_get:GCQuestStrangeEvent.scorer_account_id)
  return _internal_scorer_account_id();
}
inline void GCQuestStrangeEvent::_internal_set_scorer_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  scorer_account_id_ = value;
}
inline void GCQuestStrangeEvent::set_scorer_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_scorer_account_id(value);
  // @@protoc_insertion_point(field_set:GCQuestStrangeEvent.scorer_account_id)
}

// optional uint64 quest_id = 3;
inline bool GCQuestStrangeEvent::_internal_has_quest_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GCQuestStrangeEvent::has_quest_id() const {
  return _internal_has_quest_id();
}
inline void GCQuestStrangeEvent::clear_quest_id() {
  quest_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GCQuestStrangeEvent::_internal_quest_id() const {
  return quest_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GCQuestStrangeEvent::quest_id() const {
  // @@protoc_insertion_point(field_get:GCQuestStrangeEvent.quest_id)
  return _internal_quest_id();
}
inline void GCQuestStrangeEvent::_internal_set_quest_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  quest_id_ = value;
}
inline void GCQuestStrangeEvent::set_quest_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_quest_id(value);
  // @@protoc_insertion_point(field_set:GCQuestStrangeEvent.quest_id)
}

// optional uint32 strange_event_id = 4;
inline bool GCQuestStrangeEvent::_internal_has_strange_event_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool GCQuestStrangeEvent::has_strange_event_id() const {
  return _internal_has_strange_event_id();
}
inline void GCQuestStrangeEvent::clear_strange_event_id() {
  strange_event_id_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GCQuestStrangeEvent::_internal_strange_event_id() const {
  return strange_event_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GCQuestStrangeEvent::strange_event_id() const {
  // @@protoc_insertion_point(field_get:GCQuestStrangeEvent.strange_event_id)
  return _internal_strange_event_id();
}
inline void GCQuestStrangeEvent::_internal_set_strange_event_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  strange_event_id_ = value;
}
inline void GCQuestStrangeEvent::set_strange_event_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_strange_event_id(value);
  // @@protoc_insertion_point(field_set:GCQuestStrangeEvent.strange_event_id)
}

// optional uint32 score = 5;
inline bool GCQuestStrangeEvent::_internal_has_score() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool GCQuestStrangeEvent::has_score() const {
  return _internal_has_score();
}
inline void GCQuestStrangeEvent::clear_score() {
  score_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GCQuestStrangeEvent::_internal_score() const {
  return score_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GCQuestStrangeEvent::score() const {
  // @@protoc_insertion_point(field_get:GCQuestStrangeEvent.score)
  return _internal_score();
}
inline void GCQuestStrangeEvent::_internal_set_score(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  score_ = value;
}
inline void GCQuestStrangeEvent::set_score(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:GCQuestStrangeEvent.score)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::CMsgGC_GameServer_CreateIdentityResponse_EStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgGC_GameServer_CreateIdentityResponse_EStatus>() {
  return ::CMsgGC_GameServer_CreateIdentityResponse_EStatus_descriptor();
}
template <> struct is_proto_enum< ::CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse>() {
  return ::CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse_descriptor();
}
template <> struct is_proto_enum< ::CMsgGC_GameServer_UseServerModificationItem_Response_EServerModificationItemServerResponse> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgGC_GameServer_UseServerModificationItem_Response_EServerModificationItemServerResponse>() {
  return ::CMsgGC_GameServer_UseServerModificationItem_Response_EServerModificationItemServerResponse_descriptor();
}
template <> struct is_proto_enum< ::TFPendingPartyMember_EType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TFPendingPartyMember_EType>() {
  return ::TFPendingPartyMember_EType_descriptor();
}
template <> struct is_proto_enum< ::CSOTFPartyInvite_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CSOTFPartyInvite_Type>() {
  return ::CSOTFPartyInvite_Type_descriptor();
}
template <> struct is_proto_enum< ::CTFLobbyPlayerProto_ConnectState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CTFLobbyPlayerProto_ConnectState>() {
  return ::CTFLobbyPlayerProto_ConnectState_descriptor();
}
template <> struct is_proto_enum< ::CTFLobbyPlayerProto_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CTFLobbyPlayerProto_Type>() {
  return ::CTFLobbyPlayerProto_Type_descriptor();
}
template <> struct is_proto_enum< ::CSOTFGameServerLobby_State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CSOTFGameServerLobby_State>() {
  return ::CSOTFGameServerLobby_State_descriptor();
}
template <> struct is_proto_enum< ::CSOTFGameServerLobby_WarMatch> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CSOTFGameServerLobby_WarMatch>() {
  return ::CSOTFGameServerLobby_WarMatch_descriptor();
}
template <> struct is_proto_enum< ::CMsgGameServerMatchmakingStatus_PlayerConnectState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgGameServerMatchmakingStatus_PlayerConnectState>() {
  return ::CMsgGameServerMatchmakingStatus_PlayerConnectState_descriptor();
}
template <> struct is_proto_enum< ::CMsgGameServerMatchmakingStatus_Event> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgGameServerMatchmakingStatus_Event>() {
  return ::CMsgGameServerMatchmakingStatus_Event_descriptor();
}
template <> struct is_proto_enum< ::CMsgMvMVictoryInfo_GrantReason> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgMvMVictoryInfo_GrantReason>() {
  return ::CMsgMvMVictoryInfo_GrantReason_descriptor();
}
template <> struct is_proto_enum< ::CMsgTFXPSource_XPSourceType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgTFXPSource_XPSourceType>() {
  return ::CMsgTFXPSource_XPSourceType_descriptor();
}
template <> struct is_proto_enum< ::CMsgGCNotification_NotificationType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgGCNotification_NotificationType>() {
  return ::CMsgGCNotification_NotificationType_descriptor();
}
template <> struct is_proto_enum< ::CMsgGC_Match_Result_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgGC_Match_Result_Status>() {
  return ::CMsgGC_Match_Result_Status_descriptor();
}
template <> struct is_proto_enum< ::CMsgGC_ReportPlayer_EReason> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgGC_ReportPlayer_EReason>() {
  return ::CMsgGC_ReportPlayer_EReason_descriptor();
}
template <> struct is_proto_enum< ::CMsgGCDataCenterPing_Update_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgGCDataCenterPing_Update_Status>() {
  return ::CMsgGCDataCenterPing_Update_Status_descriptor();
}
template <> struct is_proto_enum< ::ETFGCMsg> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ETFGCMsg>() {
  return ::ETFGCMsg_descriptor();
}
template <> struct is_proto_enum< ::EServerModificationItemType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EServerModificationItemType>() {
  return ::EServerModificationItemType_descriptor();
}
template <> struct is_proto_enum< ::ETFSyncedMMMenuStep> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ETFSyncedMMMenuStep>() {
  return ::ETFSyncedMMMenuStep_descriptor();
}
template <> struct is_proto_enum< ::ETFMatchGroup> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ETFMatchGroup>() {
  return ::ETFMatchGroup_descriptor();
}
template <> struct is_proto_enum< ::ETFPartyChatType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ETFPartyChatType>() {
  return ::ETFPartyChatType_descriptor();
}
template <> struct is_proto_enum< ::TF_GC_GameState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TF_GC_GameState>() {
  return ::TF_GC_GameState_descriptor();
}
template <> struct is_proto_enum< ::TF_GC_TEAM> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TF_GC_TEAM>() {
  return ::TF_GC_TEAM_descriptor();
}
template <> struct is_proto_enum< ::TFMatchLeaveReason> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TFMatchLeaveReason>() {
  return ::TFMatchLeaveReason_descriptor();
}
template <> struct is_proto_enum< ::TFVoteKickReason> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TFVoteKickReason>() {
  return ::TFVoteKickReason_descriptor();
}
template <> struct is_proto_enum< ::ServerMatchmakingState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ServerMatchmakingState>() {
  return ::ServerMatchmakingState_descriptor();
}
template <> struct is_proto_enum< ::SurveyQuestionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SurveyQuestionType>() {
  return ::SurveyQuestionType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tf_5fgcmessages_2eproto
