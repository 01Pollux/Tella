// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tf_gcmessages.proto
#pragma warning(push, 1)

#include "tf_gcmessages.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CMsgTFGoldenWrenchBroadcast::CMsgTFGoldenWrenchBroadcast(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , wrench_number_(0)
  , deleted_(false){}
struct CMsgTFGoldenWrenchBroadcastDefaultTypeInternal {
  constexpr CMsgTFGoldenWrenchBroadcastDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgTFGoldenWrenchBroadcastDefaultTypeInternal() {}
  union {
    CMsgTFGoldenWrenchBroadcast _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgTFGoldenWrenchBroadcastDefaultTypeInternal _CMsgTFGoldenWrenchBroadcast_default_instance_;
constexpr CMsgTFSaxxyBroadcast::CMsgTFSaxxyBroadcast(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , category_number_(0){}
struct CMsgTFSaxxyBroadcastDefaultTypeInternal {
  constexpr CMsgTFSaxxyBroadcastDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgTFSaxxyBroadcastDefaultTypeInternal() {}
  union {
    CMsgTFSaxxyBroadcast _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgTFSaxxyBroadcastDefaultTypeInternal _CMsgTFSaxxyBroadcast_default_instance_;
constexpr CMsgGCTFSpecificItemBroadcast::CMsgGCTFSpecificItemBroadcast(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , item_def_index_(0u)
  , was_destruction_(false){}
struct CMsgGCTFSpecificItemBroadcastDefaultTypeInternal {
  constexpr CMsgGCTFSpecificItemBroadcastDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCTFSpecificItemBroadcastDefaultTypeInternal() {}
  union {
    CMsgGCTFSpecificItemBroadcast _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCTFSpecificItemBroadcastDefaultTypeInternal _CMsgGCTFSpecificItemBroadcast_default_instance_;
constexpr CMsgTFWorldStatus::CMsgTFWorldStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : disabled_match_groups_()
  , beta_stress_test_event_active_(false)
  , event_expire_time_(0u)
  , active_client_version_(0u)
  , event_match_group_(-1)
{}
struct CMsgTFWorldStatusDefaultTypeInternal {
  constexpr CMsgTFWorldStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgTFWorldStatusDefaultTypeInternal() {}
  union {
    CMsgTFWorldStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgTFWorldStatusDefaultTypeInternal _CMsgTFWorldStatus_default_instance_;
constexpr CSOTFDuelSummary::CSOTFDuelSummary(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_id_(0u)
  , duel_wins_(0u)
  , duel_losses_(0u)
  , last_duel_account_id_(0u)
  , last_duel_timestamp_(0u)
  , last_duel_status_(0u){}
struct CSOTFDuelSummaryDefaultTypeInternal {
  constexpr CSOTFDuelSummaryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSOTFDuelSummaryDefaultTypeInternal() {}
  union {
    CSOTFDuelSummary _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSOTFDuelSummaryDefaultTypeInternal _CSOTFDuelSummary_default_instance_;
constexpr CSOTFMapContribution::CSOTFMapContribution(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_id_(0u)
  , def_index_(0u)
  , contribution_level_(0u){}
struct CSOTFMapContributionDefaultTypeInternal {
  constexpr CSOTFMapContributionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSOTFMapContributionDefaultTypeInternal() {}
  union {
    CSOTFMapContribution _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSOTFMapContributionDefaultTypeInternal _CSOTFMapContribution_default_instance_;
constexpr CMsgTFFreeTrialChooseMostHelpfulFriend::CMsgTFFreeTrialChooseMostHelpfulFriend(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_id_friend_(0u){}
struct CMsgTFFreeTrialChooseMostHelpfulFriendDefaultTypeInternal {
  constexpr CMsgTFFreeTrialChooseMostHelpfulFriendDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgTFFreeTrialChooseMostHelpfulFriendDefaultTypeInternal() {}
  union {
    CMsgTFFreeTrialChooseMostHelpfulFriend _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgTFFreeTrialChooseMostHelpfulFriendDefaultTypeInternal _CMsgTFFreeTrialChooseMostHelpfulFriend_default_instance_;
constexpr CMsgTFRequestTF2Friends::CMsgTFRequestTF2Friends(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_ids_(){}
struct CMsgTFRequestTF2FriendsDefaultTypeInternal {
  constexpr CMsgTFRequestTF2FriendsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgTFRequestTF2FriendsDefaultTypeInternal() {}
  union {
    CMsgTFRequestTF2Friends _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgTFRequestTF2FriendsDefaultTypeInternal _CMsgTFRequestTF2Friends_default_instance_;
constexpr CMsgTFRequestTF2FriendsResponse::CMsgTFRequestTF2FriendsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_ids_(){}
struct CMsgTFRequestTF2FriendsResponseDefaultTypeInternal {
  constexpr CMsgTFRequestTF2FriendsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgTFRequestTF2FriendsResponseDefaultTypeInternal() {}
  union {
    CMsgTFRequestTF2FriendsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgTFRequestTF2FriendsResponseDefaultTypeInternal _CMsgTFRequestTF2FriendsResponse_default_instance_;
constexpr CSOTFPlayerInfo::CSOTFPlayerInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : num_new_users_helped_(0u){}
struct CSOTFPlayerInfoDefaultTypeInternal {
  constexpr CSOTFPlayerInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSOTFPlayerInfoDefaultTypeInternal() {}
  union {
    CSOTFPlayerInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSOTFPlayerInfoDefaultTypeInternal _CSOTFPlayerInfo_default_instance_;
constexpr CMsgTFThankedBySomeone::CMsgTFThankedBySomeone(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : thanker_steam_id_(uint64_t{0u}){}
struct CMsgTFThankedBySomeoneDefaultTypeInternal {
  constexpr CMsgTFThankedBySomeoneDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgTFThankedBySomeoneDefaultTypeInternal() {}
  union {
    CMsgTFThankedBySomeone _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgTFThankedBySomeoneDefaultTypeInternal _CMsgTFThankedBySomeone_default_instance_;
constexpr CMsgTFThankedSomeone::CMsgTFThankedSomeone(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CMsgTFThankedSomeoneDefaultTypeInternal {
  constexpr CMsgTFThankedSomeoneDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgTFThankedSomeoneDefaultTypeInternal() {}
  union {
    CMsgTFThankedSomeone _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgTFThankedSomeoneDefaultTypeInternal _CMsgTFThankedSomeone_default_instance_;
constexpr CMsgTFFreeTrialConvertedToPremium::CMsgTFFreeTrialConvertedToPremium(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CMsgTFFreeTrialConvertedToPremiumDefaultTypeInternal {
  constexpr CMsgTFFreeTrialConvertedToPremiumDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgTFFreeTrialConvertedToPremiumDefaultTypeInternal() {}
  union {
    CMsgTFFreeTrialConvertedToPremium _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgTFFreeTrialConvertedToPremiumDefaultTypeInternal _CMsgTFFreeTrialConvertedToPremium_default_instance_;
constexpr CMsgSaxxyAwarded::CMsgSaxxyAwarded(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : winner_names_()
  , category_(0u){}
struct CMsgSaxxyAwardedDefaultTypeInternal {
  constexpr CMsgSaxxyAwardedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSaxxyAwardedDefaultTypeInternal() {}
  union {
    CMsgSaxxyAwarded _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSaxxyAwardedDefaultTypeInternal _CMsgSaxxyAwarded_default_instance_;
constexpr CMsgReplaySubmitContestEntry::CMsgReplaySubmitContestEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : youtube_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , category_(0u){}
struct CMsgReplaySubmitContestEntryDefaultTypeInternal {
  constexpr CMsgReplaySubmitContestEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgReplaySubmitContestEntryDefaultTypeInternal() {}
  union {
    CMsgReplaySubmitContestEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgReplaySubmitContestEntryDefaultTypeInternal _CMsgReplaySubmitContestEntry_default_instance_;
constexpr CMsgReplaySubmitContestEntryResponse::CMsgReplaySubmitContestEntryResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : success_(false){}
struct CMsgReplaySubmitContestEntryResponseDefaultTypeInternal {
  constexpr CMsgReplaySubmitContestEntryResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgReplaySubmitContestEntryResponseDefaultTypeInternal() {}
  union {
    CMsgReplaySubmitContestEntryResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgReplaySubmitContestEntryResponseDefaultTypeInternal _CMsgReplaySubmitContestEntryResponse_default_instance_;
constexpr CReplayCachedContestData::CReplayCachedContestData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : video_entry_ids_()
  , timestamp_(0u)
  , num_votes_last_day_(0u)
  , num_flags_last_day_(0u){}
struct CReplayCachedContestDataDefaultTypeInternal {
  constexpr CReplayCachedContestDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CReplayCachedContestDataDefaultTypeInternal() {}
  union {
    CReplayCachedContestData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CReplayCachedContestDataDefaultTypeInternal _CReplayCachedContestData_default_instance_;
constexpr CMsgTFCoaching_AddToCoaches::CMsgTFCoaching_AddToCoaches(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CMsgTFCoaching_AddToCoachesDefaultTypeInternal {
  constexpr CMsgTFCoaching_AddToCoachesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgTFCoaching_AddToCoachesDefaultTypeInternal() {}
  union {
    CMsgTFCoaching_AddToCoaches _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgTFCoaching_AddToCoachesDefaultTypeInternal _CMsgTFCoaching_AddToCoaches_default_instance_;
constexpr CMsgTFCoaching_RemoveFromCoaches::CMsgTFCoaching_RemoveFromCoaches(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CMsgTFCoaching_RemoveFromCoachesDefaultTypeInternal {
  constexpr CMsgTFCoaching_RemoveFromCoachesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgTFCoaching_RemoveFromCoachesDefaultTypeInternal() {}
  union {
    CMsgTFCoaching_RemoveFromCoaches _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgTFCoaching_RemoveFromCoachesDefaultTypeInternal _CMsgTFCoaching_RemoveFromCoaches_default_instance_;
constexpr CMsgTFCoaching_FindCoach::CMsgTFCoaching_FindCoach(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_id_friend_as_coach_(0u){}
struct CMsgTFCoaching_FindCoachDefaultTypeInternal {
  constexpr CMsgTFCoaching_FindCoachDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgTFCoaching_FindCoachDefaultTypeInternal() {}
  union {
    CMsgTFCoaching_FindCoach _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgTFCoaching_FindCoachDefaultTypeInternal _CMsgTFCoaching_FindCoach_default_instance_;
constexpr CMsgTFCoaching_FindCoachResponse::CMsgTFCoaching_FindCoachResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : coach_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , found_coach_(false)
  , num_likes_(0u){}
struct CMsgTFCoaching_FindCoachResponseDefaultTypeInternal {
  constexpr CMsgTFCoaching_FindCoachResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgTFCoaching_FindCoachResponseDefaultTypeInternal() {}
  union {
    CMsgTFCoaching_FindCoachResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgTFCoaching_FindCoachResponseDefaultTypeInternal _CMsgTFCoaching_FindCoachResponse_default_instance_;
constexpr CMsgTFCoaching_AskCoach::CMsgTFCoaching_AskCoach(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_id_student_(0u)
  , student_is_friend_(false){}
struct CMsgTFCoaching_AskCoachDefaultTypeInternal {
  constexpr CMsgTFCoaching_AskCoachDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgTFCoaching_AskCoachDefaultTypeInternal() {}
  union {
    CMsgTFCoaching_AskCoach _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgTFCoaching_AskCoachDefaultTypeInternal _CMsgTFCoaching_AskCoach_default_instance_;
constexpr CMsgTFCoaching_AskCoachResponse::CMsgTFCoaching_AskCoachResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : accept_coaching_assignment_(false){}
struct CMsgTFCoaching_AskCoachResponseDefaultTypeInternal {
  constexpr CMsgTFCoaching_AskCoachResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgTFCoaching_AskCoachResponseDefaultTypeInternal() {}
  union {
    CMsgTFCoaching_AskCoachResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgTFCoaching_AskCoachResponseDefaultTypeInternal _CMsgTFCoaching_AskCoachResponse_default_instance_;
constexpr CMsgTFCoaching_CoachJoinGame::CMsgTFCoaching_CoachJoinGame(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : join_game_(false)
  , server_address_(0u)
  , server_port_(0u)
  , account_id_student_(0u){}
struct CMsgTFCoaching_CoachJoinGameDefaultTypeInternal {
  constexpr CMsgTFCoaching_CoachJoinGameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgTFCoaching_CoachJoinGameDefaultTypeInternal() {}
  union {
    CMsgTFCoaching_CoachJoinGame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgTFCoaching_CoachJoinGameDefaultTypeInternal _CMsgTFCoaching_CoachJoinGame_default_instance_;
constexpr CMsgTFCoaching_CoachJoining::CMsgTFCoaching_CoachJoining(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_id_coach_(0u)
  , account_id_student_(0u){}
struct CMsgTFCoaching_CoachJoiningDefaultTypeInternal {
  constexpr CMsgTFCoaching_CoachJoiningDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgTFCoaching_CoachJoiningDefaultTypeInternal() {}
  union {
    CMsgTFCoaching_CoachJoining _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgTFCoaching_CoachJoiningDefaultTypeInternal _CMsgTFCoaching_CoachJoining_default_instance_;
constexpr CMsgTFCoaching_CoachJoined::CMsgTFCoaching_CoachJoined(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_id_coach_(0u){}
struct CMsgTFCoaching_CoachJoinedDefaultTypeInternal {
  constexpr CMsgTFCoaching_CoachJoinedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgTFCoaching_CoachJoinedDefaultTypeInternal() {}
  union {
    CMsgTFCoaching_CoachJoined _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgTFCoaching_CoachJoinedDefaultTypeInternal _CMsgTFCoaching_CoachJoined_default_instance_;
constexpr CMsgTFCoaching_LikeCurrentCoach::CMsgTFCoaching_LikeCurrentCoach(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : like_coach_(false){}
struct CMsgTFCoaching_LikeCurrentCoachDefaultTypeInternal {
  constexpr CMsgTFCoaching_LikeCurrentCoachDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgTFCoaching_LikeCurrentCoachDefaultTypeInternal() {}
  union {
    CMsgTFCoaching_LikeCurrentCoach _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgTFCoaching_LikeCurrentCoachDefaultTypeInternal _CMsgTFCoaching_LikeCurrentCoach_default_instance_;
constexpr CMsgTFCoaching_RemoveCurrentCoach::CMsgTFCoaching_RemoveCurrentCoach(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_id_coach_(0u){}
struct CMsgTFCoaching_RemoveCurrentCoachDefaultTypeInternal {
  constexpr CMsgTFCoaching_RemoveCurrentCoachDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgTFCoaching_RemoveCurrentCoachDefaultTypeInternal() {}
  union {
    CMsgTFCoaching_RemoveCurrentCoach _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgTFCoaching_RemoveCurrentCoachDefaultTypeInternal _CMsgTFCoaching_RemoveCurrentCoach_default_instance_;
constexpr CMsgTFQuickplay_ScoreServers_ServerInfo::CMsgTFQuickplay_ScoreServers_ServerInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : server_address_(0u)
  , server_port_(0u)
  , steam_id_(uint64_t{0u})
  , num_users_(0u)
  , max_users_(0u)
  , user_score_(0){}
struct CMsgTFQuickplay_ScoreServers_ServerInfoDefaultTypeInternal {
  constexpr CMsgTFQuickplay_ScoreServers_ServerInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgTFQuickplay_ScoreServers_ServerInfoDefaultTypeInternal() {}
  union {
    CMsgTFQuickplay_ScoreServers_ServerInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgTFQuickplay_ScoreServers_ServerInfoDefaultTypeInternal _CMsgTFQuickplay_ScoreServers_ServerInfo_default_instance_;
constexpr CMsgTFQuickplay_ScoreServers::CMsgTFQuickplay_ScoreServers(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : servers_(){}
struct CMsgTFQuickplay_ScoreServersDefaultTypeInternal {
  constexpr CMsgTFQuickplay_ScoreServersDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgTFQuickplay_ScoreServersDefaultTypeInternal() {}
  union {
    CMsgTFQuickplay_ScoreServers _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgTFQuickplay_ScoreServersDefaultTypeInternal _CMsgTFQuickplay_ScoreServers_default_instance_;
constexpr CMsgTFQuickplay_ScoreServersResponse_ServerInfo::CMsgTFQuickplay_ScoreServersResponse_ServerInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : server_address_(0u)
  , server_port_(0u)
  , steam_id_(uint64_t{0u})
  , total_score_(0)
  , options_score_(0u){}
struct CMsgTFQuickplay_ScoreServersResponse_ServerInfoDefaultTypeInternal {
  constexpr CMsgTFQuickplay_ScoreServersResponse_ServerInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgTFQuickplay_ScoreServersResponse_ServerInfoDefaultTypeInternal() {}
  union {
    CMsgTFQuickplay_ScoreServersResponse_ServerInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgTFQuickplay_ScoreServersResponse_ServerInfoDefaultTypeInternal _CMsgTFQuickplay_ScoreServersResponse_ServerInfo_default_instance_;
constexpr CMsgTFQuickplay_ScoreServersResponse::CMsgTFQuickplay_ScoreServersResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : servers_(){}
struct CMsgTFQuickplay_ScoreServersResponseDefaultTypeInternal {
  constexpr CMsgTFQuickplay_ScoreServersResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgTFQuickplay_ScoreServersResponseDefaultTypeInternal() {}
  union {
    CMsgTFQuickplay_ScoreServersResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgTFQuickplay_ScoreServersResponseDefaultTypeInternal _CMsgTFQuickplay_ScoreServersResponse_default_instance_;
constexpr CMsgTFQuickplay_PlayerJoining::CMsgTFQuickplay_PlayerJoining(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_id_(0u){}
struct CMsgTFQuickplay_PlayerJoiningDefaultTypeInternal {
  constexpr CMsgTFQuickplay_PlayerJoiningDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgTFQuickplay_PlayerJoiningDefaultTypeInternal() {}
  union {
    CMsgTFQuickplay_PlayerJoining _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgTFQuickplay_PlayerJoiningDefaultTypeInternal _CMsgTFQuickplay_PlayerJoining_default_instance_;
constexpr CMsgGC_GameServer_LevelInfo::CMsgGC_GameServer_LevelInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : level_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , level_loaded_(false){}
struct CMsgGC_GameServer_LevelInfoDefaultTypeInternal {
  constexpr CMsgGC_GameServer_LevelInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGC_GameServer_LevelInfoDefaultTypeInternal() {}
  union {
    CMsgGC_GameServer_LevelInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGC_GameServer_LevelInfoDefaultTypeInternal _CMsgGC_GameServer_LevelInfo_default_instance_;
constexpr CMsgGC_GameServer_AuthChallenge::CMsgGC_GameServer_AuthChallenge(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : challenge_string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CMsgGC_GameServer_AuthChallengeDefaultTypeInternal {
  constexpr CMsgGC_GameServer_AuthChallengeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGC_GameServer_AuthChallengeDefaultTypeInternal() {}
  union {
    CMsgGC_GameServer_AuthChallenge _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGC_GameServer_AuthChallengeDefaultTypeInternal _CMsgGC_GameServer_AuthChallenge_default_instance_;
constexpr CMsgGC_GameServer_AuthResult::CMsgGC_GameServer_AuthResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , game_server_standing_(0)
  , authenticated_(false)
  , is_valve_server_(false)
  , game_server_standing_trend_(0){}
struct CMsgGC_GameServer_AuthResultDefaultTypeInternal {
  constexpr CMsgGC_GameServer_AuthResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGC_GameServer_AuthResultDefaultTypeInternal() {}
  union {
    CMsgGC_GameServer_AuthResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGC_GameServer_AuthResultDefaultTypeInternal _CMsgGC_GameServer_AuthResult_default_instance_;
constexpr CMsgGC_GameServer_AuthChallengeResponse::CMsgGC_GameServer_AuthChallengeResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hashed_challenge_string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , game_server_account_id_(0u){}
struct CMsgGC_GameServer_AuthChallengeResponseDefaultTypeInternal {
  constexpr CMsgGC_GameServer_AuthChallengeResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGC_GameServer_AuthChallengeResponseDefaultTypeInternal() {}
  union {
    CMsgGC_GameServer_AuthChallengeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGC_GameServer_AuthChallengeResponseDefaultTypeInternal _CMsgGC_GameServer_AuthChallengeResponse_default_instance_;
constexpr CMsgGC_GameServer_CreateIdentity::CMsgGC_GameServer_CreateIdentity(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_id_(0u){}
struct CMsgGC_GameServer_CreateIdentityDefaultTypeInternal {
  constexpr CMsgGC_GameServer_CreateIdentityDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGC_GameServer_CreateIdentityDefaultTypeInternal() {}
  union {
    CMsgGC_GameServer_CreateIdentity _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGC_GameServer_CreateIdentityDefaultTypeInternal _CMsgGC_GameServer_CreateIdentity_default_instance_;
constexpr CMsgGC_GameServer_CreateIdentityResponse::CMsgGC_GameServer_CreateIdentityResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : game_server_identity_token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , account_created_(false)
  , game_server_account_id_(0u)
  , status_(0)
{}
struct CMsgGC_GameServer_CreateIdentityResponseDefaultTypeInternal {
  constexpr CMsgGC_GameServer_CreateIdentityResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGC_GameServer_CreateIdentityResponseDefaultTypeInternal() {}
  union {
    CMsgGC_GameServer_CreateIdentityResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGC_GameServer_CreateIdentityResponseDefaultTypeInternal _CMsgGC_GameServer_CreateIdentityResponse_default_instance_;
constexpr CMsgGC_GameServer_List::CMsgGC_GameServer_List(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_id_(0u){}
struct CMsgGC_GameServer_ListDefaultTypeInternal {
  constexpr CMsgGC_GameServer_ListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGC_GameServer_ListDefaultTypeInternal() {}
  union {
    CMsgGC_GameServer_List _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGC_GameServer_ListDefaultTypeInternal _CMsgGC_GameServer_List_default_instance_;
constexpr CMsgGC_GameServer_ListResponse_GameServerIdentity::CMsgGC_GameServer_ListResponse_GameServerIdentity(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : game_server_identity_token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , game_server_account_id_(0u)
  , game_server_standing_(0)
  , game_server_standing_trend_(0){}
struct CMsgGC_GameServer_ListResponse_GameServerIdentityDefaultTypeInternal {
  constexpr CMsgGC_GameServer_ListResponse_GameServerIdentityDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGC_GameServer_ListResponse_GameServerIdentityDefaultTypeInternal() {}
  union {
    CMsgGC_GameServer_ListResponse_GameServerIdentity _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGC_GameServer_ListResponse_GameServerIdentityDefaultTypeInternal _CMsgGC_GameServer_ListResponse_GameServerIdentity_default_instance_;
constexpr CMsgGC_GameServer_ListResponse::CMsgGC_GameServer_ListResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : owned_game_servers_(){}
struct CMsgGC_GameServer_ListResponseDefaultTypeInternal {
  constexpr CMsgGC_GameServer_ListResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGC_GameServer_ListResponseDefaultTypeInternal() {}
  union {
    CMsgGC_GameServer_ListResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGC_GameServer_ListResponseDefaultTypeInternal _CMsgGC_GameServer_ListResponse_default_instance_;
constexpr CMsgGC_GameServer_ResetIdentity::CMsgGC_GameServer_ResetIdentity(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : game_server_account_id_(0u){}
struct CMsgGC_GameServer_ResetIdentityDefaultTypeInternal {
  constexpr CMsgGC_GameServer_ResetIdentityDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGC_GameServer_ResetIdentityDefaultTypeInternal() {}
  union {
    CMsgGC_GameServer_ResetIdentity _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGC_GameServer_ResetIdentityDefaultTypeInternal _CMsgGC_GameServer_ResetIdentity_default_instance_;
constexpr CMsgGC_GameServer_ResetIdentityResponse::CMsgGC_GameServer_ResetIdentityResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : game_server_identity_token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , game_server_identity_token_reset_(false)
  , game_server_account_id_(0u){}
struct CMsgGC_GameServer_ResetIdentityResponseDefaultTypeInternal {
  constexpr CMsgGC_GameServer_ResetIdentityResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGC_GameServer_ResetIdentityResponseDefaultTypeInternal() {}
  union {
    CMsgGC_GameServer_ResetIdentityResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGC_GameServer_ResetIdentityResponseDefaultTypeInternal _CMsgGC_GameServer_ResetIdentityResponse_default_instance_;
constexpr CMsgGC_GameServer_AckPolicy::CMsgGC_GameServer_AckPolicy(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CMsgGC_GameServer_AckPolicyDefaultTypeInternal {
  constexpr CMsgGC_GameServer_AckPolicyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGC_GameServer_AckPolicyDefaultTypeInternal() {}
  union {
    CMsgGC_GameServer_AckPolicy _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGC_GameServer_AckPolicyDefaultTypeInternal _CMsgGC_GameServer_AckPolicy_default_instance_;
constexpr CMsgGC_GameServer_AckPolicyResponse::CMsgGC_GameServer_AckPolicyResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , result_(0u){}
struct CMsgGC_GameServer_AckPolicyResponseDefaultTypeInternal {
  constexpr CMsgGC_GameServer_AckPolicyResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGC_GameServer_AckPolicyResponseDefaultTypeInternal() {}
  union {
    CMsgGC_GameServer_AckPolicyResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGC_GameServer_AckPolicyResponseDefaultTypeInternal _CMsgGC_GameServer_AckPolicyResponse_default_instance_;
constexpr CMsgGC_Client_UseServerModificationItem::CMsgGC_Client_UseServerModificationItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_id_(uint64_t{0u}){}
struct CMsgGC_Client_UseServerModificationItemDefaultTypeInternal {
  constexpr CMsgGC_Client_UseServerModificationItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGC_Client_UseServerModificationItemDefaultTypeInternal() {}
  union {
    CMsgGC_Client_UseServerModificationItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGC_Client_UseServerModificationItemDefaultTypeInternal _CMsgGC_Client_UseServerModificationItem_default_instance_;
constexpr CMsgGC_Client_UseServerModificationItem_Response::CMsgGC_Client_UseServerModificationItem_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : response_code_(1)
{}
struct CMsgGC_Client_UseServerModificationItem_ResponseDefaultTypeInternal {
  constexpr CMsgGC_Client_UseServerModificationItem_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGC_Client_UseServerModificationItem_ResponseDefaultTypeInternal() {}
  union {
    CMsgGC_Client_UseServerModificationItem_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGC_Client_UseServerModificationItem_ResponseDefaultTypeInternal _CMsgGC_Client_UseServerModificationItem_Response_default_instance_;
constexpr CMsgGC_GameServer_UseServerModificationItem::CMsgGC_GameServer_UseServerModificationItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : modification_type_(1)
{}
struct CMsgGC_GameServer_UseServerModificationItemDefaultTypeInternal {
  constexpr CMsgGC_GameServer_UseServerModificationItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGC_GameServer_UseServerModificationItemDefaultTypeInternal() {}
  union {
    CMsgGC_GameServer_UseServerModificationItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGC_GameServer_UseServerModificationItemDefaultTypeInternal _CMsgGC_GameServer_UseServerModificationItem_default_instance_;
constexpr CMsgGC_GameServer_UseServerModificationItem_Response::CMsgGC_GameServer_UseServerModificationItem_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : modification_type_(1)

  , server_response_code_(1)
{}
struct CMsgGC_GameServer_UseServerModificationItem_ResponseDefaultTypeInternal {
  constexpr CMsgGC_GameServer_UseServerModificationItem_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGC_GameServer_UseServerModificationItem_ResponseDefaultTypeInternal() {}
  union {
    CMsgGC_GameServer_UseServerModificationItem_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGC_GameServer_UseServerModificationItem_ResponseDefaultTypeInternal _CMsgGC_GameServer_UseServerModificationItem_Response_default_instance_;
constexpr CMsgGC_GameServer_ServerModificationItemExpired::CMsgGC_GameServer_ServerModificationItemExpired(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : modification_type_(1)
{}
struct CMsgGC_GameServer_ServerModificationItemExpiredDefaultTypeInternal {
  constexpr CMsgGC_GameServer_ServerModificationItemExpiredDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGC_GameServer_ServerModificationItemExpiredDefaultTypeInternal() {}
  union {
    CMsgGC_GameServer_ServerModificationItemExpired _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGC_GameServer_ServerModificationItemExpiredDefaultTypeInternal _CMsgGC_GameServer_ServerModificationItemExpired_default_instance_;
constexpr CMsgGC_GameServer_ServerModificationItem::CMsgGC_GameServer_ServerModificationItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : active_(false)
  , modification_type_(1)
{}
struct CMsgGC_GameServer_ServerModificationItemDefaultTypeInternal {
  constexpr CMsgGC_GameServer_ServerModificationItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGC_GameServer_ServerModificationItemDefaultTypeInternal() {}
  union {
    CMsgGC_GameServer_ServerModificationItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGC_GameServer_ServerModificationItemDefaultTypeInternal _CMsgGC_GameServer_ServerModificationItem_default_instance_;
constexpr CMsgGC_Halloween_ReservedItem::CMsgGC_Halloween_ReservedItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_()
  , y_()
  , z_()
  , spawn_meta_info_(0u){}
struct CMsgGC_Halloween_ReservedItemDefaultTypeInternal {
  constexpr CMsgGC_Halloween_ReservedItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGC_Halloween_ReservedItemDefaultTypeInternal() {}
  union {
    CMsgGC_Halloween_ReservedItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGC_Halloween_ReservedItemDefaultTypeInternal _CMsgGC_Halloween_ReservedItem_default_instance_;
constexpr CMsgGC_Halloween_GrantItem::CMsgGC_Halloween_GrantItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : recipient_account_id_(0u)
  , level_id_(0u)
  , flagged_(false){}
struct CMsgGC_Halloween_GrantItemDefaultTypeInternal {
  constexpr CMsgGC_Halloween_GrantItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGC_Halloween_GrantItemDefaultTypeInternal() {}
  union {
    CMsgGC_Halloween_GrantItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGC_Halloween_GrantItemDefaultTypeInternal _CMsgGC_Halloween_GrantItem_default_instance_;
constexpr CMsgGC_Halloween_GrantItemResponse::CMsgGC_Halloween_GrantItemResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : recipient_account_id_(0u){}
struct CMsgGC_Halloween_GrantItemResponseDefaultTypeInternal {
  constexpr CMsgGC_Halloween_GrantItemResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGC_Halloween_GrantItemResponseDefaultTypeInternal() {}
  union {
    CMsgGC_Halloween_GrantItemResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGC_Halloween_GrantItemResponseDefaultTypeInternal _CMsgGC_Halloween_GrantItemResponse_default_instance_;
constexpr CMsgGC_Halloween_ItemClaimed::CMsgGC_Halloween_ItemClaimed(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CMsgGC_Halloween_ItemClaimedDefaultTypeInternal {
  constexpr CMsgGC_Halloween_ItemClaimedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGC_Halloween_ItemClaimedDefaultTypeInternal() {}
  union {
    CMsgGC_Halloween_ItemClaimed _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGC_Halloween_ItemClaimedDefaultTypeInternal _CMsgGC_Halloween_ItemClaimed_default_instance_;
constexpr CMsgGC_PickupItemEligibility_Query::CMsgGC_PickupItemEligibility_Query(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_id_(0u)
  , seconds_ago_(0u){}
struct CMsgGC_PickupItemEligibility_QueryDefaultTypeInternal {
  constexpr CMsgGC_PickupItemEligibility_QueryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGC_PickupItemEligibility_QueryDefaultTypeInternal() {}
  union {
    CMsgGC_PickupItemEligibility_Query _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGC_PickupItemEligibility_QueryDefaultTypeInternal _CMsgGC_PickupItemEligibility_Query_default_instance_;
constexpr CMsgGC_PickupItemEligibility_QueryResponse::CMsgGC_PickupItemEligibility_QueryResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_id_(0u)
  , was_eligible_(false)
  , level_id_(0u){}
struct CMsgGC_PickupItemEligibility_QueryResponseDefaultTypeInternal {
  constexpr CMsgGC_PickupItemEligibility_QueryResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGC_PickupItemEligibility_QueryResponseDefaultTypeInternal() {}
  union {
    CMsgGC_PickupItemEligibility_QueryResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGC_PickupItemEligibility_QueryResponseDefaultTypeInternal _CMsgGC_PickupItemEligibility_QueryResponse_default_instance_;
constexpr CSOTFPartyMember_Activity::CSOTFPartyMember_Activity(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : lobby_id_(uint64_t{0u})
  , multiqueue_blocked_(false)
  , online_(false)
  , client_version_(0u)
  , lobby_match_group_(-1)
{}
struct CSOTFPartyMember_ActivityDefaultTypeInternal {
  constexpr CSOTFPartyMember_ActivityDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSOTFPartyMember_ActivityDefaultTypeInternal() {}
  union {
    CSOTFPartyMember_Activity _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSOTFPartyMember_ActivityDefaultTypeInternal _CSOTFPartyMember_Activity_default_instance_;
constexpr CSOTFPartyMember::CSOTFPartyMember(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_criteria_(nullptr)
  , activity_(nullptr)
  , completed_missions_(0u)
  , badge_level_(0u)
  , owns_ticket_(false)
  , competitive_access_(false)
  , casual_banned_(false)
  , ranked_banned_(false)
  , experience_(0u)
  , casual_low_priority_(false)
  , ranked_low_priority_(false)
  , lobby_standby_(false){}
struct CSOTFPartyMemberDefaultTypeInternal {
  constexpr CSOTFPartyMemberDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSOTFPartyMemberDefaultTypeInternal() {}
  union {
    CSOTFPartyMember _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSOTFPartyMemberDefaultTypeInternal _CSOTFPartyMember_default_instance_;
constexpr TFPendingPartyMember::TFPendingPartyMember(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamid_(uint64_t{0u})
  , inviter_(uint64_t{0u})
  , type_(0)
{}
struct TFPendingPartyMemberDefaultTypeInternal {
  constexpr TFPendingPartyMemberDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TFPendingPartyMemberDefaultTypeInternal() {}
  union {
    TFPendingPartyMember _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TFPendingPartyMemberDefaultTypeInternal _TFPendingPartyMember_default_instance_;
constexpr TFSyncedMMUIState::TFSyncedMMUIState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : menu_step_(0)

  , match_group_(-1)
{}
struct TFSyncedMMUIStateDefaultTypeInternal {
  constexpr TFSyncedMMUIStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TFSyncedMMUIStateDefaultTypeInternal() {}
  union {
    TFSyncedMMUIState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TFSyncedMMUIStateDefaultTypeInternal _TFSyncedMMUIState_default_instance_;
constexpr CTFGroupMatchCriteriaProto::CTFGroupMatchCriteriaProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mvm_mannup_missions_()
  , mvm_bootcamp_missions_()
  , mvm_mannup_tour_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , casual_criteria_(nullptr)
  , late_join_ok_(false)
  , custom_ping_tolerance_(0u){}
struct CTFGroupMatchCriteriaProtoDefaultTypeInternal {
  constexpr CTFGroupMatchCriteriaProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CTFGroupMatchCriteriaProtoDefaultTypeInternal() {}
  union {
    CTFGroupMatchCriteriaProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CTFGroupMatchCriteriaProtoDefaultTypeInternal _CTFGroupMatchCriteriaProto_default_instance_;
constexpr CTFCasualMatchCriteria::CTFCasualMatchCriteria(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : selected_maps_bits_(){}
struct CTFCasualMatchCriteriaDefaultTypeInternal {
  constexpr CTFCasualMatchCriteriaDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CTFCasualMatchCriteriaDefaultTypeInternal() {}
  union {
    CTFCasualMatchCriteria _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CTFCasualMatchCriteriaDefaultTypeInternal _CTFCasualMatchCriteria_default_instance_;
constexpr CTFPerPlayerMatchCriteriaProto::CTFPerPlayerMatchCriteriaProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mvm_squad_surplus_(false){}
struct CTFPerPlayerMatchCriteriaProtoDefaultTypeInternal {
  constexpr CTFPerPlayerMatchCriteriaProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CTFPerPlayerMatchCriteriaProtoDefaultTypeInternal() {}
  union {
    CTFPerPlayerMatchCriteriaProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CTFPerPlayerMatchCriteriaProtoDefaultTypeInternal _CTFPerPlayerMatchCriteriaProto_default_instance_;
constexpr CTFPartyOptions::CTFPartyOptions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : group_criteria_(nullptr)
  , player_criteria_(nullptr)
  , player_uistate_(nullptr)
  , overwrite_existing_(false){}
struct CTFPartyOptionsDefaultTypeInternal {
  constexpr CTFPartyOptionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CTFPartyOptionsDefaultTypeInternal() {}
  union {
    CTFPartyOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CTFPartyOptionsDefaultTypeInternal _CTFPartyOptions_default_instance_;
constexpr CMsgPartySetOptions::CMsgPartySetOptions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : options_(nullptr)
  , party_id_(uint64_t{0u}){}
struct CMsgPartySetOptionsDefaultTypeInternal {
  constexpr CMsgPartySetOptionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgPartySetOptionsDefaultTypeInternal() {}
  union {
    CMsgPartySetOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgPartySetOptionsDefaultTypeInternal _CMsgPartySetOptions_default_instance_;
constexpr CMsgPartySetOptionsResponse::CMsgPartySetOptionsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CMsgPartySetOptionsResponseDefaultTypeInternal {
  constexpr CMsgPartySetOptionsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgPartySetOptionsResponseDefaultTypeInternal() {}
  union {
    CMsgPartySetOptionsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgPartySetOptionsResponseDefaultTypeInternal _CMsgPartySetOptionsResponse_default_instance_;
constexpr CMsgPartyQueueForMatch::CMsgPartyQueueForMatch(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : final_options_(nullptr)
  , party_id_(uint64_t{0u})
  , match_group_(-1)
{}
struct CMsgPartyQueueForMatchDefaultTypeInternal {
  constexpr CMsgPartyQueueForMatchDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgPartyQueueForMatchDefaultTypeInternal() {}
  union {
    CMsgPartyQueueForMatch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgPartyQueueForMatchDefaultTypeInternal _CMsgPartyQueueForMatch_default_instance_;
constexpr CMsgPartyQueueForMatchResponse::CMsgPartyQueueForMatchResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CMsgPartyQueueForMatchResponseDefaultTypeInternal {
  constexpr CMsgPartyQueueForMatchResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgPartyQueueForMatchResponseDefaultTypeInternal() {}
  union {
    CMsgPartyQueueForMatchResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgPartyQueueForMatchResponseDefaultTypeInternal _CMsgPartyQueueForMatchResponse_default_instance_;
constexpr CMsgPartyQueueForStandby::CMsgPartyQueueForStandby(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : party_id_(uint64_t{0u})
  , party_lobby_id_(uint64_t{0u}){}
struct CMsgPartyQueueForStandbyDefaultTypeInternal {
  constexpr CMsgPartyQueueForStandbyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgPartyQueueForStandbyDefaultTypeInternal() {}
  union {
    CMsgPartyQueueForStandby _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgPartyQueueForStandbyDefaultTypeInternal _CMsgPartyQueueForStandby_default_instance_;
constexpr CMsgPartyQueueForStandbyResponse::CMsgPartyQueueForStandbyResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CMsgPartyQueueForStandbyResponseDefaultTypeInternal {
  constexpr CMsgPartyQueueForStandbyResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgPartyQueueForStandbyResponseDefaultTypeInternal() {}
  union {
    CMsgPartyQueueForStandbyResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgPartyQueueForStandbyResponseDefaultTypeInternal _CMsgPartyQueueForStandbyResponse_default_instance_;
constexpr CMsgPartyRemoveFromQueue::CMsgPartyRemoveFromQueue(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : party_id_(uint64_t{0u})
  , match_group_(-1)
{}
struct CMsgPartyRemoveFromQueueDefaultTypeInternal {
  constexpr CMsgPartyRemoveFromQueueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgPartyRemoveFromQueueDefaultTypeInternal() {}
  union {
    CMsgPartyRemoveFromQueue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgPartyRemoveFromQueueDefaultTypeInternal _CMsgPartyRemoveFromQueue_default_instance_;
constexpr CMsgPartyRemoveFromQueueResponse::CMsgPartyRemoveFromQueueResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CMsgPartyRemoveFromQueueResponseDefaultTypeInternal {
  constexpr CMsgPartyRemoveFromQueueResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgPartyRemoveFromQueueResponseDefaultTypeInternal() {}
  union {
    CMsgPartyRemoveFromQueueResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgPartyRemoveFromQueueResponseDefaultTypeInternal _CMsgPartyRemoveFromQueueResponse_default_instance_;
constexpr CMsgPartyRemoveFromStandbyQueue::CMsgPartyRemoveFromStandbyQueue(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : party_id_(uint64_t{0u}){}
struct CMsgPartyRemoveFromStandbyQueueDefaultTypeInternal {
  constexpr CMsgPartyRemoveFromStandbyQueueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgPartyRemoveFromStandbyQueueDefaultTypeInternal() {}
  union {
    CMsgPartyRemoveFromStandbyQueue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgPartyRemoveFromStandbyQueueDefaultTypeInternal _CMsgPartyRemoveFromStandbyQueue_default_instance_;
constexpr CMsgPartyRemoveFromStandbyQueueResponse::CMsgPartyRemoveFromStandbyQueueResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CMsgPartyRemoveFromStandbyQueueResponseDefaultTypeInternal {
  constexpr CMsgPartyRemoveFromStandbyQueueResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgPartyRemoveFromStandbyQueueResponseDefaultTypeInternal() {}
  union {
    CMsgPartyRemoveFromStandbyQueueResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgPartyRemoveFromStandbyQueueResponseDefaultTypeInternal _CMsgPartyRemoveFromStandbyQueueResponse_default_instance_;
constexpr CMsgPartyInvitePlayer::CMsgPartyInvitePlayer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : party_id_(uint64_t{0u})
  , player_id_(uint64_t{0u})
  , expecting_request_to_join_(false){}
struct CMsgPartyInvitePlayerDefaultTypeInternal {
  constexpr CMsgPartyInvitePlayerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgPartyInvitePlayerDefaultTypeInternal() {}
  union {
    CMsgPartyInvitePlayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgPartyInvitePlayerDefaultTypeInternal _CMsgPartyInvitePlayer_default_instance_;
constexpr CMsgPartyRequestJoinPlayer::CMsgPartyRequestJoinPlayer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : current_party_id_(uint64_t{0u})
  , join_player_id_(uint64_t{0u})
  , join_party_id_(uint64_t{0u})
  , expecting_invite_(false){}
struct CMsgPartyRequestJoinPlayerDefaultTypeInternal {
  constexpr CMsgPartyRequestJoinPlayerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgPartyRequestJoinPlayerDefaultTypeInternal() {}
  union {
    CMsgPartyRequestJoinPlayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgPartyRequestJoinPlayerDefaultTypeInternal _CMsgPartyRequestJoinPlayer_default_instance_;
constexpr CMsgPartyClearPendingPlayer::CMsgPartyClearPendingPlayer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : party_id_(uint64_t{0u})
  , pending_player_id_(uint64_t{0u}){}
struct CMsgPartyClearPendingPlayerDefaultTypeInternal {
  constexpr CMsgPartyClearPendingPlayerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgPartyClearPendingPlayerDefaultTypeInternal() {}
  union {
    CMsgPartyClearPendingPlayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgPartyClearPendingPlayerDefaultTypeInternal _CMsgPartyClearPendingPlayer_default_instance_;
constexpr CMsgPartyClearPendingPlayerResponse::CMsgPartyClearPendingPlayerResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CMsgPartyClearPendingPlayerResponseDefaultTypeInternal {
  constexpr CMsgPartyClearPendingPlayerResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgPartyClearPendingPlayerResponseDefaultTypeInternal() {}
  union {
    CMsgPartyClearPendingPlayerResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgPartyClearPendingPlayerResponseDefaultTypeInternal _CMsgPartyClearPendingPlayerResponse_default_instance_;
constexpr CMsgPartyClearOtherPartyRequest::CMsgPartyClearOtherPartyRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : other_party_id_(uint64_t{0u}){}
struct CMsgPartyClearOtherPartyRequestDefaultTypeInternal {
  constexpr CMsgPartyClearOtherPartyRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgPartyClearOtherPartyRequestDefaultTypeInternal() {}
  union {
    CMsgPartyClearOtherPartyRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgPartyClearOtherPartyRequestDefaultTypeInternal _CMsgPartyClearOtherPartyRequest_default_instance_;
constexpr CMsgPartyClearOtherPartyRequestResponse::CMsgPartyClearOtherPartyRequestResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CMsgPartyClearOtherPartyRequestResponseDefaultTypeInternal {
  constexpr CMsgPartyClearOtherPartyRequestResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgPartyClearOtherPartyRequestResponseDefaultTypeInternal() {}
  union {
    CMsgPartyClearOtherPartyRequestResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgPartyClearOtherPartyRequestResponseDefaultTypeInternal _CMsgPartyClearOtherPartyRequestResponse_default_instance_;
constexpr CMsgPartyPromoteToLeader::CMsgPartyPromoteToLeader(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : party_id_(uint64_t{0u})
  , new_leader_id_(uint64_t{0u}){}
struct CMsgPartyPromoteToLeaderDefaultTypeInternal {
  constexpr CMsgPartyPromoteToLeaderDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgPartyPromoteToLeaderDefaultTypeInternal() {}
  union {
    CMsgPartyPromoteToLeader _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgPartyPromoteToLeaderDefaultTypeInternal _CMsgPartyPromoteToLeader_default_instance_;
constexpr CMsgPartyKickMember::CMsgPartyKickMember(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : party_id_(uint64_t{0u})
  , target_id_(uint64_t{0u}){}
struct CMsgPartyKickMemberDefaultTypeInternal {
  constexpr CMsgPartyKickMemberDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgPartyKickMemberDefaultTypeInternal() {}
  union {
    CMsgPartyKickMember _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgPartyKickMemberDefaultTypeInternal _CMsgPartyKickMember_default_instance_;
constexpr CMsgPartySendChat::CMsgPartySendChat(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , party_id_(uint64_t{0u}){}
struct CMsgPartySendChatDefaultTypeInternal {
  constexpr CMsgPartySendChatDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgPartySendChatDefaultTypeInternal() {}
  union {
    CMsgPartySendChat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgPartySendChatDefaultTypeInternal _CMsgPartySendChat_default_instance_;
constexpr CMsgPartyChatMsg::CMsgPartyChatMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , actor_id_(uint64_t{0u})
  , type_(0)
{}
struct CMsgPartyChatMsgDefaultTypeInternal {
  constexpr CMsgPartyChatMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgPartyChatMsgDefaultTypeInternal() {}
  union {
    CMsgPartyChatMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgPartyChatMsgDefaultTypeInternal _CMsgPartyChatMsg_default_instance_;
constexpr CSOTFParty_QueueEntry::CSOTFParty_QueueEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : queued_time_(0u)
  , match_group_(-1)
{}
struct CSOTFParty_QueueEntryDefaultTypeInternal {
  constexpr CSOTFParty_QueueEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSOTFParty_QueueEntryDefaultTypeInternal() {}
  union {
    CSOTFParty_QueueEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSOTFParty_QueueEntryDefaultTypeInternal _CSOTFParty_QueueEntry_default_instance_;
constexpr CSOTFParty::CSOTFParty(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : member_ids_()
  , members_()
  , pending_members_()
  , matchmaking_queues_()
  , group_criteria_(nullptr)
  , leader_ui_state_(nullptr)
  , party_id_(uint64_t{0u})
  , leader_id_(uint64_t{0u})
  , casual_banned_time_(0u)
  , casual_low_priority_time_(0u)
  , associated_lobby_id_(uint64_t{0u})
  , ranked_banned_time_(0u)
  , ranked_low_priority_time_(0u)
  , associated_lobby_match_group_(-1)
{}
struct CSOTFPartyDefaultTypeInternal {
  constexpr CSOTFPartyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSOTFPartyDefaultTypeInternal() {}
  union {
    CSOTFParty _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSOTFPartyDefaultTypeInternal _CSOTFParty_default_instance_;
constexpr CSOTFPartyInvite_PartyMember::CSOTFPartyInvite_PartyMember(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamid_(uint64_t{0u}){}
struct CSOTFPartyInvite_PartyMemberDefaultTypeInternal {
  constexpr CSOTFPartyInvite_PartyMemberDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSOTFPartyInvite_PartyMemberDefaultTypeInternal() {}
  union {
    CSOTFPartyInvite_PartyMember _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSOTFPartyInvite_PartyMemberDefaultTypeInternal _CSOTFPartyInvite_PartyMember_default_instance_;
constexpr CSOTFPartyInvite::CSOTFPartyInvite(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : members_()
  , group_id_(uint64_t{0u})
  , inviter_(uint64_t{0u})
  , type_(1)
{}
struct CSOTFPartyInviteDefaultTypeInternal {
  constexpr CSOTFPartyInviteDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSOTFPartyInviteDefaultTypeInternal() {}
  union {
    CSOTFPartyInvite _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSOTFPartyInviteDefaultTypeInternal _CSOTFPartyInvite_default_instance_;
constexpr CTFLobbyPlayerProto::CTFLobbyPlayerProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(uint64_t{0u})
  , team_(0)

  , connect_state_(0)

  , original_party_id_(uint64_t{0u})
  , rank_(0u)
  , badge_level_(0u)
  , last_connect_time_(0u)
  , squad_surplus_(false)
  , chat_suspension_(false)
  , type_(0)

  , normalized_rating_(0)
  , normalized_uncertainty_(0){}
struct CTFLobbyPlayerProtoDefaultTypeInternal {
  constexpr CTFLobbyPlayerProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CTFLobbyPlayerProtoDefaultTypeInternal() {}
  union {
    CTFLobbyPlayerProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CTFLobbyPlayerProtoDefaultTypeInternal _CTFLobbyPlayerProto_default_instance_;
constexpr CTFLobbyInviteProto::CTFLobbyInviteProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : lobby_id_(uint64_t{0u})
  , match_group_(-1)
{}
struct CTFLobbyInviteProtoDefaultTypeInternal {
  constexpr CTFLobbyInviteProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CTFLobbyInviteProtoDefaultTypeInternal() {}
  union {
    CTFLobbyInviteProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CTFLobbyInviteProtoDefaultTypeInternal _CTFLobbyInviteProto_default_instance_;
constexpr CSOTFGameServerLobby::CSOTFGameServerLobby(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : members_()
  , next_maps_for_vote_()
  , pending_members_()
  , connect_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , map_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , mission_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , mannup_tour_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , lobby_id_(uint64_t{0u})
  , server_id_(uint64_t{0u})
  , state_(0)

  , game_state_(0)

  , lobby_mm_version_(0u)
  , match_id_(uint64_t{0u})
  , initial_average_mm_rating_(0)
  , formed_time_(0u)
  , match_group_(0u)
  , flags_(0u)
  , late_join_eligible_(false)
  , fixed_match_size_(0u)
  , is_war_match_(0)
{}
struct CSOTFGameServerLobbyDefaultTypeInternal {
  constexpr CSOTFGameServerLobbyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSOTFGameServerLobbyDefaultTypeInternal() {}
  union {
    CSOTFGameServerLobby _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSOTFGameServerLobbyDefaultTypeInternal _CSOTFGameServerLobby_default_instance_;
constexpr CMsgExitMatchmaking::CMsgExitMatchmaking(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : party_id_(uint64_t{0u})
  , lobby_id_(uint64_t{0u})
  , explicit_abandon_(false){}
struct CMsgExitMatchmakingDefaultTypeInternal {
  constexpr CMsgExitMatchmakingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgExitMatchmakingDefaultTypeInternal() {}
  union {
    CMsgExitMatchmaking _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgExitMatchmakingDefaultTypeInternal _CMsgExitMatchmaking_default_instance_;
constexpr CMsgAcceptLobbyInvite::CMsgAcceptLobbyInvite(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : abandoning_invite_lobby_ids_()
  , invited_lobby_id_(uint64_t{0u})
  , abandoning_match_id_(uint64_t{0u}){}
struct CMsgAcceptLobbyInviteDefaultTypeInternal {
  constexpr CMsgAcceptLobbyInviteDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgAcceptLobbyInviteDefaultTypeInternal() {}
  union {
    CMsgAcceptLobbyInvite _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgAcceptLobbyInviteDefaultTypeInternal _CMsgAcceptLobbyInvite_default_instance_;
constexpr CMsgAcceptLobbyInviteReply::CMsgAcceptLobbyInviteReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CMsgAcceptLobbyInviteReplyDefaultTypeInternal {
  constexpr CMsgAcceptLobbyInviteReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgAcceptLobbyInviteReplyDefaultTypeInternal() {}
  union {
    CMsgAcceptLobbyInviteReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgAcceptLobbyInviteReplyDefaultTypeInternal _CMsgAcceptLobbyInviteReply_default_instance_;
constexpr CMsgMatchmakingSearchCountRequest::CMsgMatchmakingSearchCountRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CMsgMatchmakingSearchCountRequestDefaultTypeInternal {
  constexpr CMsgMatchmakingSearchCountRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgMatchmakingSearchCountRequestDefaultTypeInternal() {}
  union {
    CMsgMatchmakingSearchCountRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgMatchmakingSearchCountRequestDefaultTypeInternal _CMsgMatchmakingSearchCountRequest_default_instance_;
constexpr CMsgMatchmakingSearchCountResponse::CMsgMatchmakingSearchCountResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : searching_players_by_group_(){}
struct CMsgMatchmakingSearchCountResponseDefaultTypeInternal {
  constexpr CMsgMatchmakingSearchCountResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgMatchmakingSearchCountResponseDefaultTypeInternal() {}
  union {
    CMsgMatchmakingSearchCountResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgMatchmakingSearchCountResponseDefaultTypeInternal _CMsgMatchmakingSearchCountResponse_default_instance_;
constexpr CMsgKickedFromMatchmakingQueue::CMsgKickedFromMatchmakingQueue(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CMsgKickedFromMatchmakingQueueDefaultTypeInternal {
  constexpr CMsgKickedFromMatchmakingQueueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgKickedFromMatchmakingQueueDefaultTypeInternal() {}
  union {
    CMsgKickedFromMatchmakingQueue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgKickedFromMatchmakingQueueDefaultTypeInternal _CMsgKickedFromMatchmakingQueue_default_instance_;
constexpr CMsgGameServerMatchmakingStatus_Player::CMsgGameServerMatchmakingStatus_Player(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steam_id_(uint64_t{0u})
  , connect_state_(0)
{}
struct CMsgGameServerMatchmakingStatus_PlayerDefaultTypeInternal {
  constexpr CMsgGameServerMatchmakingStatus_PlayerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGameServerMatchmakingStatus_PlayerDefaultTypeInternal() {}
  union {
    CMsgGameServerMatchmakingStatus_Player _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGameServerMatchmakingStatus_PlayerDefaultTypeInternal _CMsgGameServerMatchmakingStatus_Player_default_instance_;
constexpr CMsgGameServerMatchmakingStatus::CMsgGameServerMatchmakingStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : players_()
  , map_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , tags_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , matchmaking_state_(0)

  , bot_count_(0u)
  , num_spectators_(0u)
  , max_players_(0u)
  , slots_free_(0u)
  , server_region_(0u)
  , server_loadavg_(0)
  , server_trusted_(false)
  , server_dedicated_(false)
  , game_state_(0)

  , event_(0)

  , strict_(0u)
  , mvm_wave_(0u)
  , mvm_credits_acquired_(0u)
  , mvm_credits_dropped_(0u)
  , lobby_mm_version_(0u)
  , server_version_(1225u)
  , match_group_(-1){}
struct CMsgGameServerMatchmakingStatusDefaultTypeInternal {
  constexpr CMsgGameServerMatchmakingStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGameServerMatchmakingStatusDefaultTypeInternal() {}
  union {
    CMsgGameServerMatchmakingStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGameServerMatchmakingStatusDefaultTypeInternal _CMsgGameServerMatchmakingStatus_default_instance_;
constexpr CMsgMatchmakingProgress::CMsgMatchmakingProgress(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : urgency_pct_(0u)
  , avg_wait_time_new_(0u)
  , avg_wait_time_join_late_(0u)
  , your_wait_time_(0u)
  , matching_worldwide_searching_players_(0u)
  , matching_near_you_searching_players_(0u)
  , total_worldwide_searching_players_(0u)
  , total_near_you_searching_players_(0u)
  , matching_worldwide_active_players_(0u)
  , matching_near_you_active_players_(0u)
  , total_worldwide_active_players_(0u)
  , total_near_you_active_players_(0u)
  , matching_worldwide_empty_gameservers_(0u)
  , matching_near_you_empty_gameservers_(0u)
  , total_worldwide_empty_gameservers_(0u)
  , total_near_you_empty_gameservers_(0u){}
struct CMsgMatchmakingProgressDefaultTypeInternal {
  constexpr CMsgMatchmakingProgressDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgMatchmakingProgressDefaultTypeInternal() {}
  union {
    CMsgMatchmakingProgress _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgMatchmakingProgressDefaultTypeInternal _CMsgMatchmakingProgress_default_instance_;
constexpr CMsgMvMVictoryInfo_Item::CMsgMvMVictoryInfo_Item(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , squad_surplus_claimer_steam_id_(uint64_t{0u})
  , grant_reason_(0)
{}
struct CMsgMvMVictoryInfo_ItemDefaultTypeInternal {
  constexpr CMsgMvMVictoryInfo_ItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgMvMVictoryInfo_ItemDefaultTypeInternal() {}
  union {
    CMsgMvMVictoryInfo_Item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgMvMVictoryInfo_ItemDefaultTypeInternal _CMsgMvMVictoryInfo_Item_default_instance_;
constexpr CMsgMvMVictoryInfo_Player::CMsgMvMVictoryInfo_Player(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : items_()
  , steam_id_(uint64_t{0u})
  , badge_granted_(false)
  , badge_progress_updated_(false)
  , badge_leveled_(false)
  , voucher_missing_(false)
  , badge_level_(0u)
  , badge_progress_bits_(0u)
  , badge_points_(0u){}
struct CMsgMvMVictoryInfo_PlayerDefaultTypeInternal {
  constexpr CMsgMvMVictoryInfo_PlayerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgMvMVictoryInfo_PlayerDefaultTypeInternal() {}
  union {
    CMsgMvMVictoryInfo_Player _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgMvMVictoryInfo_PlayerDefaultTypeInternal _CMsgMvMVictoryInfo_Player_default_instance_;
constexpr CMsgMvMVictoryInfo::CMsgMvMVictoryInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : players_()
  , tour_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , mission_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CMsgMvMVictoryInfoDefaultTypeInternal {
  constexpr CMsgMvMVictoryInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgMvMVictoryInfoDefaultTypeInternal() {}
  union {
    CMsgMvMVictoryInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgMvMVictoryInfoDefaultTypeInternal _CMsgMvMVictoryInfo_default_instance_;
constexpr CGCMsgTFHelloResponse::CGCMsgTFHelloResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : version_checksum_()
  , version_check_(0u)
  , version_verbose_(0u){}
struct CGCMsgTFHelloResponseDefaultTypeInternal {
  constexpr CGCMsgTFHelloResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGCMsgTFHelloResponseDefaultTypeInternal() {}
  union {
    CGCMsgTFHelloResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGCMsgTFHelloResponseDefaultTypeInternal _CGCMsgTFHelloResponse_default_instance_;
constexpr CGCMsgTFSync::CGCMsgTFSync(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : version_checksum_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , version_checksum_ex_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , version_check_(0u)
  , version_check_ex_(0u)
  , version_check_ex2_(0u){}
struct CGCMsgTFSyncDefaultTypeInternal {
  constexpr CGCMsgTFSyncDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGCMsgTFSyncDefaultTypeInternal() {}
  union {
    CGCMsgTFSync _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGCMsgTFSyncDefaultTypeInternal _CGCMsgTFSync_default_instance_;
constexpr CGCMsgTFSyncEx::CGCMsgTFSyncEx(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : version_checksum_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , version_checksum_ex_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , version_check_(0u){}
struct CGCMsgTFSyncExDefaultTypeInternal {
  constexpr CGCMsgTFSyncExDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGCMsgTFSyncExDefaultTypeInternal() {}
  union {
    CGCMsgTFSyncEx _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGCMsgTFSyncExDefaultTypeInternal _CGCMsgTFSyncEx_default_instance_;
constexpr CMsgMvMVictory_Player::CMsgMvMVictory_Player(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steam_id_(uint64_t{0u})
  , squad_surplus_(false){}
struct CMsgMvMVictory_PlayerDefaultTypeInternal {
  constexpr CMsgMvMVictory_PlayerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgMvMVictory_PlayerDefaultTypeInternal() {}
  union {
    CMsgMvMVictory_Player _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgMvMVictory_PlayerDefaultTypeInternal _CMsgMvMVictory_Player_default_instance_;
constexpr CMsgMvMVictory::CMsgMvMVictory(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : players_()
  , tour_name_mannup_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , mission_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , legacy_mission_index_(0u)
  , event_time_(0u)
  , lobby_id_(uint64_t{0u}){}
struct CMsgMvMVictoryDefaultTypeInternal {
  constexpr CMsgMvMVictoryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgMvMVictoryDefaultTypeInternal() {}
  union {
    CMsgMvMVictory _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgMvMVictoryDefaultTypeInternal _CMsgMvMVictory_default_instance_;
constexpr CMsgMvMMannUpVictoryReply::CMsgMvMMannUpVictoryReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CMsgMvMMannUpVictoryReplyDefaultTypeInternal {
  constexpr CMsgMvMMannUpVictoryReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgMvMMannUpVictoryReplyDefaultTypeInternal() {}
  union {
    CMsgMvMMannUpVictoryReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgMvMMannUpVictoryReplyDefaultTypeInternal _CMsgMvMMannUpVictoryReply_default_instance_;
constexpr CMsgGameServerKickingLobby::CMsgGameServerKickingLobby(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : lobby_id_(uint64_t{0u})
  , match_id_(uint64_t{0u}){}
struct CMsgGameServerKickingLobbyDefaultTypeInternal {
  constexpr CMsgGameServerKickingLobbyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGameServerKickingLobbyDefaultTypeInternal() {}
  union {
    CMsgGameServerKickingLobby _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGameServerKickingLobbyDefaultTypeInternal _CMsgGameServerKickingLobby_default_instance_;
constexpr CMsgGameServerKickingLobbyResponse::CMsgGameServerKickingLobbyResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CMsgGameServerKickingLobbyResponseDefaultTypeInternal {
  constexpr CMsgGameServerKickingLobbyResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGameServerKickingLobbyResponseDefaultTypeInternal() {}
  union {
    CMsgGameServerKickingLobbyResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGameServerKickingLobbyResponseDefaultTypeInternal _CMsgGameServerKickingLobbyResponse_default_instance_;
constexpr CMsgLeaveGameAndPrepareToJoinParty::CMsgLeaveGameAndPrepareToJoinParty(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : party_id_(uint64_t{0u}){}
struct CMsgLeaveGameAndPrepareToJoinPartyDefaultTypeInternal {
  constexpr CMsgLeaveGameAndPrepareToJoinPartyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgLeaveGameAndPrepareToJoinPartyDefaultTypeInternal() {}
  union {
    CMsgLeaveGameAndPrepareToJoinParty _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgLeaveGameAndPrepareToJoinPartyDefaultTypeInternal _CMsgLeaveGameAndPrepareToJoinParty_default_instance_;
constexpr CMsgPlayerLeftMatch::CMsgPlayerLeftMatch(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : xp_breakdown_()
  , steam_id_(uint64_t{0u})
  , leave_reason_(0)

  , was_abandon_(false)
  , lobby_id_(uint64_t{0u})
  , match_id_(uint64_t{0u}){}
struct CMsgPlayerLeftMatchDefaultTypeInternal {
  constexpr CMsgPlayerLeftMatchDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgPlayerLeftMatchDefaultTypeInternal() {}
  union {
    CMsgPlayerLeftMatch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgPlayerLeftMatchDefaultTypeInternal _CMsgPlayerLeftMatch_default_instance_;
constexpr CMsgPlayerLeftMatchResponse::CMsgPlayerLeftMatchResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CMsgPlayerLeftMatchResponseDefaultTypeInternal {
  constexpr CMsgPlayerLeftMatchResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgPlayerLeftMatchResponseDefaultTypeInternal() {}
  union {
    CMsgPlayerLeftMatchResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgPlayerLeftMatchResponseDefaultTypeInternal _CMsgPlayerLeftMatchResponse_default_instance_;
constexpr CMsgProcessMatchVoteKick_Vote::CMsgProcessMatchVoteKick_Vote(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steam_id_(uint64_t{0u})
  , vote_yay_(false){}
struct CMsgProcessMatchVoteKick_VoteDefaultTypeInternal {
  constexpr CMsgProcessMatchVoteKick_VoteDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgProcessMatchVoteKick_VoteDefaultTypeInternal() {}
  union {
    CMsgProcessMatchVoteKick_Vote _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgProcessMatchVoteKick_VoteDefaultTypeInternal _CMsgProcessMatchVoteKick_Vote_default_instance_;
constexpr CMsgProcessMatchVoteKick::CMsgProcessMatchVoteKick(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : votes_()
  , match_id_(uint64_t{0u})
  , initiator_steam_id_(uint64_t{0u})
  , target_steam_id_(uint64_t{0u})
  , reason_(0)

  , default_pass_(false){}
struct CMsgProcessMatchVoteKickDefaultTypeInternal {
  constexpr CMsgProcessMatchVoteKickDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgProcessMatchVoteKickDefaultTypeInternal() {}
  union {
    CMsgProcessMatchVoteKick _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgProcessMatchVoteKickDefaultTypeInternal _CMsgProcessMatchVoteKick_default_instance_;
constexpr CMsgProcessMatchVoteKickResponse::CMsgProcessMatchVoteKickResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rip_(false){}
struct CMsgProcessMatchVoteKickResponseDefaultTypeInternal {
  constexpr CMsgProcessMatchVoteKickResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgProcessMatchVoteKickResponseDefaultTypeInternal() {}
  union {
    CMsgProcessMatchVoteKickResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgProcessMatchVoteKickResponseDefaultTypeInternal _CMsgProcessMatchVoteKickResponse_default_instance_;
constexpr CMsgPlayerVoteKickedAfterLeavingMatchResponse::CMsgPlayerVoteKickedAfterLeavingMatchResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CMsgPlayerVoteKickedAfterLeavingMatchResponseDefaultTypeInternal {
  constexpr CMsgPlayerVoteKickedAfterLeavingMatchResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgPlayerVoteKickedAfterLeavingMatchResponseDefaultTypeInternal() {}
  union {
    CMsgPlayerVoteKickedAfterLeavingMatchResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgPlayerVoteKickedAfterLeavingMatchResponseDefaultTypeInternal _CMsgPlayerVoteKickedAfterLeavingMatchResponse_default_instance_;
constexpr CMsgHalloween_ServerBossEvent::CMsgHalloween_ServerBossEvent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : event_counter_(0u)
  , timestamp_(0u)
  , boss_type_(0u)
  , boss_level_(0u)
  , event_type_(0u)
  , players_involved_(0u)
  , elapsed_time_(0){}
struct CMsgHalloween_ServerBossEventDefaultTypeInternal {
  constexpr CMsgHalloween_ServerBossEventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgHalloween_ServerBossEventDefaultTypeInternal() {}
  union {
    CMsgHalloween_ServerBossEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgHalloween_ServerBossEventDefaultTypeInternal _CMsgHalloween_ServerBossEvent_default_instance_;
constexpr CMsgHalloween_Merasmus2012::CMsgHalloween_Merasmus2012(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : event_counter_(0u)
  , time_submitted_(0u)
  , is_valve_server_(false)
  , boss_level_(0u)
  , spawned_health_(0u)
  , remaining_health_(0u)
  , life_time_(0u)
  , bomb_kills_(0u)
  , staff_kills_(0u)
  , pvp_kills_(0u)
  , prophunt_time1_(0u)
  , prophunt_time2_(0u)
  , dmg_scout_(0u)
  , dmg_sniper_(0u)
  , dmg_soldier_(0u)
  , dmg_demo_(0u)
  , dmg_medic_(0u)
  , dmg_heavy_(0u)
  , dmg_pyro_(0u)
  , dmg_spy_(0u)
  , dmg_engineer_(0u)
  , scout_count_(0u)
  , sniper_count_(0u)
  , solider_count_(0u)
  , demo_count_(0u)
  , medic_count_(0u)
  , heavy_count_(0u)
  , pyro_count_(0u)
  , spy_count_(0u)
  , engineer_count_(0u){}
struct CMsgHalloween_Merasmus2012DefaultTypeInternal {
  constexpr CMsgHalloween_Merasmus2012DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgHalloween_Merasmus2012DefaultTypeInternal() {}
  union {
    CMsgHalloween_Merasmus2012 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgHalloween_Merasmus2012DefaultTypeInternal _CMsgHalloween_Merasmus2012_default_instance_;
constexpr CMsgUpdateHalloweenMerasmusLootLevel_Player::CMsgUpdateHalloweenMerasmusLootLevel_Player(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steam_id_(uint64_t{0u}){}
struct CMsgUpdateHalloweenMerasmusLootLevel_PlayerDefaultTypeInternal {
  constexpr CMsgUpdateHalloweenMerasmusLootLevel_PlayerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgUpdateHalloweenMerasmusLootLevel_PlayerDefaultTypeInternal() {}
  union {
    CMsgUpdateHalloweenMerasmusLootLevel_Player _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgUpdateHalloweenMerasmusLootLevel_PlayerDefaultTypeInternal _CMsgUpdateHalloweenMerasmusLootLevel_Player_default_instance_;
constexpr CMsgUpdateHalloweenMerasmusLootLevel::CMsgUpdateHalloweenMerasmusLootLevel(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : players_()
  , merasmus_level_(0u){}
struct CMsgUpdateHalloweenMerasmusLootLevelDefaultTypeInternal {
  constexpr CMsgUpdateHalloweenMerasmusLootLevelDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgUpdateHalloweenMerasmusLootLevelDefaultTypeInternal() {}
  union {
    CMsgUpdateHalloweenMerasmusLootLevel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgUpdateHalloweenMerasmusLootLevelDefaultTypeInternal _CMsgUpdateHalloweenMerasmusLootLevel_default_instance_;
constexpr CAttribute_String::CAttribute_String(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CAttribute_StringDefaultTypeInternal {
  constexpr CAttribute_StringDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CAttribute_StringDefaultTypeInternal() {}
  union {
    CAttribute_String _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CAttribute_StringDefaultTypeInternal _CAttribute_String_default_instance_;
constexpr CAttribute_DynamicRecipeComponent::CAttribute_DynamicRecipeComponent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : attributes_string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , def_index_(0u)
  , item_quality_(0u)
  , component_flags_(0u)
  , num_required_(0u)
  , num_fulfilled_(0u){}
struct CAttribute_DynamicRecipeComponentDefaultTypeInternal {
  constexpr CAttribute_DynamicRecipeComponentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CAttribute_DynamicRecipeComponentDefaultTypeInternal() {}
  union {
    CAttribute_DynamicRecipeComponent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CAttribute_DynamicRecipeComponentDefaultTypeInternal _CAttribute_DynamicRecipeComponent_default_instance_;
constexpr CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : attributes_string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , def_index_(0u)
  , item_def_(0u)
  , item_quality_(0u)
  , component_flags_(0u)
  , item_flags_(0u)
  , num_required_(0u)
  , item_count_(0u)
  , num_fulfilled_(0u)
  , items_fulfilled_(0u){}
struct CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUTDefaultTypeInternal {
  constexpr CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUTDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUTDefaultTypeInternal() {}
  union {
    CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUTDefaultTypeInternal _CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT_default_instance_;
constexpr CAttribute_ItemSlotCriteria::CAttribute_ItemSlotCriteria(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tags_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CAttribute_ItemSlotCriteriaDefaultTypeInternal {
  constexpr CAttribute_ItemSlotCriteriaDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CAttribute_ItemSlotCriteriaDefaultTypeInternal() {}
  union {
    CAttribute_ItemSlotCriteria _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CAttribute_ItemSlotCriteriaDefaultTypeInternal _CAttribute_ItemSlotCriteria_default_instance_;
constexpr CMsgSetItemSlotAttribute::CMsgSetItemSlotAttribute(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_id_(uint64_t{0u})
  , slot_item_original_id_(uint64_t{0u})
  , slot_index_(0u){}
struct CMsgSetItemSlotAttributeDefaultTypeInternal {
  constexpr CMsgSetItemSlotAttributeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSetItemSlotAttributeDefaultTypeInternal() {}
  union {
    CMsgSetItemSlotAttribute _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSetItemSlotAttributeDefaultTypeInternal _CMsgSetItemSlotAttribute_default_instance_;
constexpr CSOWarData::CSOWarData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_id_(0u)
  , war_id_(0u)
  , affiliation_(0u)
  , points_scored_(0u){}
struct CSOWarDataDefaultTypeInternal {
  constexpr CSOWarDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSOWarDataDefaultTypeInternal() {}
  union {
    CSOWarData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSOWarDataDefaultTypeInternal _CSOWarData_default_instance_;
constexpr CGCMsgGC_War_IndividualUpdate::CGCMsgGC_War_IndividualUpdate(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steam_id_(uint64_t{0u})
  , war_id_(0u)
  , score_(0u){}
struct CGCMsgGC_War_IndividualUpdateDefaultTypeInternal {
  constexpr CGCMsgGC_War_IndividualUpdateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGCMsgGC_War_IndividualUpdateDefaultTypeInternal() {}
  union {
    CGCMsgGC_War_IndividualUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGCMsgGC_War_IndividualUpdateDefaultTypeInternal _CGCMsgGC_War_IndividualUpdate_default_instance_;
constexpr CGCMsgGC_War_JoinWar::CGCMsgGC_War_JoinWar(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : affiliation_(0u)
  , war_id_(0u){}
struct CGCMsgGC_War_JoinWarDefaultTypeInternal {
  constexpr CGCMsgGC_War_JoinWarDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGCMsgGC_War_JoinWarDefaultTypeInternal() {}
  union {
    CGCMsgGC_War_JoinWar _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGCMsgGC_War_JoinWarDefaultTypeInternal _CGCMsgGC_War_JoinWar_default_instance_;
constexpr CGCMsgGC_War_RequestGlobalStats::CGCMsgGC_War_RequestGlobalStats(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : war_id_(0u){}
struct CGCMsgGC_War_RequestGlobalStatsDefaultTypeInternal {
  constexpr CGCMsgGC_War_RequestGlobalStatsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGCMsgGC_War_RequestGlobalStatsDefaultTypeInternal() {}
  union {
    CGCMsgGC_War_RequestGlobalStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGCMsgGC_War_RequestGlobalStatsDefaultTypeInternal _CGCMsgGC_War_RequestGlobalStats_default_instance_;
constexpr CGCMsgGC_War_GlobalStatsResponse_SideScore::CGCMsgGC_War_GlobalStatsResponse_SideScore(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : score_(uint64_t{0u})
  , side_(0u){}
struct CGCMsgGC_War_GlobalStatsResponse_SideScoreDefaultTypeInternal {
  constexpr CGCMsgGC_War_GlobalStatsResponse_SideScoreDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGCMsgGC_War_GlobalStatsResponse_SideScoreDefaultTypeInternal() {}
  union {
    CGCMsgGC_War_GlobalStatsResponse_SideScore _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGCMsgGC_War_GlobalStatsResponse_SideScoreDefaultTypeInternal _CGCMsgGC_War_GlobalStatsResponse_SideScore_default_instance_;
constexpr CGCMsgGC_War_GlobalStatsResponse::CGCMsgGC_War_GlobalStatsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : side_scores_()
  , war_id_(0u){}
struct CGCMsgGC_War_GlobalStatsResponseDefaultTypeInternal {
  constexpr CGCMsgGC_War_GlobalStatsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGCMsgGC_War_GlobalStatsResponseDefaultTypeInternal() {}
  union {
    CGCMsgGC_War_GlobalStatsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGCMsgGC_War_GlobalStatsResponseDefaultTypeInternal _CGCMsgGC_War_GlobalStatsResponse_default_instance_;
constexpr CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : score_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , score_(0u)
  , type_(0u)
  , score_check_(0u){}
struct CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdateDefaultTypeInternal {
  constexpr CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdateDefaultTypeInternal() {}
  union {
    CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdateDefaultTypeInternal _CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate_default_instance_;
constexpr CAttribute_WorldItemPlacement::CAttribute_WorldItemPlacement(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : original_item_id_(uint64_t{0u})
  , pos_x_(0)
  , pos_y_(0)
  , pos_z_(0)
  , ang_x_(0)
  , ang_y_(0)
  , ang_z_(0){}
struct CAttribute_WorldItemPlacementDefaultTypeInternal {
  constexpr CAttribute_WorldItemPlacementDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CAttribute_WorldItemPlacementDefaultTypeInternal() {}
  union {
    CAttribute_WorldItemPlacement _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CAttribute_WorldItemPlacementDefaultTypeInternal _CAttribute_WorldItemPlacement_default_instance_;
constexpr CGCMsg_WorldItemPlacement_Update::CGCMsg_WorldItemPlacement_Update(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : attrib_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , original_item_id_(uint64_t{0u})
  , pos_x_(0)
  , pos_y_(0)
  , pos_z_(0)
  , ang_x_(0)
  , ang_y_(0)
  , ang_z_(0)
  , force_remove_all_(false){}
struct CGCMsg_WorldItemPlacement_UpdateDefaultTypeInternal {
  constexpr CGCMsg_WorldItemPlacement_UpdateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGCMsg_WorldItemPlacement_UpdateDefaultTypeInternal() {}
  union {
    CGCMsg_WorldItemPlacement_Update _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGCMsg_WorldItemPlacement_UpdateDefaultTypeInternal _CGCMsg_WorldItemPlacement_Update_default_instance_;
constexpr CMsgAcknowledgeXP::CMsgAcknowledgeXP(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : match_group_(0)
  , predicted_experience_(0u){}
struct CMsgAcknowledgeXPDefaultTypeInternal {
  constexpr CMsgAcknowledgeXPDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgAcknowledgeXPDefaultTypeInternal() {}
  union {
    CMsgAcknowledgeXP _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgAcknowledgeXPDefaultTypeInternal _CMsgAcknowledgeXP_default_instance_;
constexpr CMsgTFXPSource::CMsgTFXPSource(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_(0)

  , amount_(0)
  , match_group_(0)
  , account_id_(0u)
  , match_id_(uint64_t{0u}){}
struct CMsgTFXPSourceDefaultTypeInternal {
  constexpr CMsgTFXPSourceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgTFXPSourceDefaultTypeInternal() {}
  union {
    CMsgTFXPSource _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgTFXPSourceDefaultTypeInternal _CMsgTFXPSource_default_instance_;
constexpr CMsgTFXPSourceBreakdown::CMsgTFXPSourceBreakdown(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sources_(){}
struct CMsgTFXPSourceBreakdownDefaultTypeInternal {
  constexpr CMsgTFXPSourceBreakdownDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgTFXPSourceBreakdownDefaultTypeInternal() {}
  union {
    CMsgTFXPSourceBreakdown _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgTFXPSourceBreakdownDefaultTypeInternal _CMsgTFXPSourceBreakdown_default_instance_;
constexpr CMsgTFClientInit::CMsgTFClientInit(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : client_version_(0u)
  , language_(0){}
struct CMsgTFClientInitDefaultTypeInternal {
  constexpr CMsgTFClientInitDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgTFClientInitDefaultTypeInternal() {}
  union {
    CMsgTFClientInit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgTFClientInitDefaultTypeInternal _CMsgTFClientInit_default_instance_;
constexpr CMsgGCNotification::CMsgGCNotification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : notification_string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , notification_id_(uint64_t{0u})
  , account_id_(0u)
  , expiration_time_(0u)
  , type_(1)
{}
struct CMsgGCNotificationDefaultTypeInternal {
  constexpr CMsgGCNotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCNotificationDefaultTypeInternal() {}
  union {
    CMsgGCNotification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCNotificationDefaultTypeInternal _CMsgGCNotification_default_instance_;
constexpr CMsgGCNotificationQueue::CMsgGCNotificationQueue(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : notifications_(){}
struct CMsgGCNotificationQueueDefaultTypeInternal {
  constexpr CMsgGCNotificationQueueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCNotificationQueueDefaultTypeInternal() {}
  union {
    CMsgGCNotificationQueue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCNotificationQueueDefaultTypeInternal _CMsgGCNotificationQueue_default_instance_;
constexpr CMsgNotificationAcknowledge::CMsgNotificationAcknowledge(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : notification_id_(uint64_t{0u})
  , account_id_(0u){}
struct CMsgNotificationAcknowledgeDefaultTypeInternal {
  constexpr CMsgNotificationAcknowledgeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgNotificationAcknowledgeDefaultTypeInternal() {}
  union {
    CMsgNotificationAcknowledge _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgNotificationAcknowledgeDefaultTypeInternal _CMsgNotificationAcknowledge_default_instance_;
constexpr CMsgNotificationAcknowledgeReply::CMsgNotificationAcknowledgeReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CMsgNotificationAcknowledgeReplyDefaultTypeInternal {
  constexpr CMsgNotificationAcknowledgeReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgNotificationAcknowledgeReplyDefaultTypeInternal() {}
  union {
    CMsgNotificationAcknowledgeReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgNotificationAcknowledgeReplyDefaultTypeInternal _CMsgNotificationAcknowledgeReply_default_instance_;
constexpr CMsgGC_Match_Result_Player::CMsgGC_Match_Result_Player(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : xp_breakdown_()
  , steam_id_(uint64_t{0u})
  , original_party_id_(uint64_t{0u})
  , team_(0u)
  , score_(0u)
  , ping_(0u)
  , flags_(0u)
  , rank_(0u)
  , classes_played_(0u)
  , kills_(0u)
  , deaths_(0u)
  , damage_(0u)
  , healing_(0u)
  , support_(0u)
  , score_medal_(0u)
  , kills_medal_(0u)
  , damage_medal_(0u)
  , healing_medal_(0u)
  , support_medal_(0u)
  , leave_time_(0u)
  , leave_reason_(0)

  , connect_time_(0u){}
struct CMsgGC_Match_Result_PlayerDefaultTypeInternal {
  constexpr CMsgGC_Match_Result_PlayerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGC_Match_Result_PlayerDefaultTypeInternal() {}
  union {
    CMsgGC_Match_Result_Player _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGC_Match_Result_PlayerDefaultTypeInternal _CMsgGC_Match_Result_Player_default_instance_;
constexpr CMsgGC_Match_Result::CMsgGC_Match_Result(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : players_()
  , match_id_(uint64_t{0u})
  , match_group_(0)
  , status_(0)

  , duration_(0u)
  , red_score_(0u)
  , blue_score_(0u)
  , winning_team_(0u)
  , map_index_(0u)
  , game_type_(0u)
  , win_reason_(0u)
  , flags_(0u)
  , bots_(0u){}
struct CMsgGC_Match_ResultDefaultTypeInternal {
  constexpr CMsgGC_Match_ResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGC_Match_ResultDefaultTypeInternal() {}
  union {
    CMsgGC_Match_Result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGC_Match_ResultDefaultTypeInternal _CMsgGC_Match_Result_default_instance_;
constexpr CMsgGC_Match_ResultResponse::CMsgGC_Match_ResultResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CMsgGC_Match_ResultResponseDefaultTypeInternal {
  constexpr CMsgGC_Match_ResultResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGC_Match_ResultResponseDefaultTypeInternal() {}
  union {
    CMsgGC_Match_ResultResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGC_Match_ResultResponseDefaultTypeInternal _CMsgGC_Match_ResultResponse_default_instance_;
constexpr CEconItemPreviewDataBlock::CEconItemPreviewDataBlock(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : econitem_(nullptr){}
struct CEconItemPreviewDataBlockDefaultTypeInternal {
  constexpr CEconItemPreviewDataBlockDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CEconItemPreviewDataBlockDefaultTypeInternal() {}
  union {
    CEconItemPreviewDataBlock _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CEconItemPreviewDataBlockDefaultTypeInternal _CEconItemPreviewDataBlock_default_instance_;
constexpr CMsgGC_Client2GCEconPreviewDataBlockRequest::CMsgGC_Client2GCEconPreviewDataBlockRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : param_s_(uint64_t{0u})
  , param_a_(uint64_t{0u})
  , param_d_(uint64_t{0u})
  , param_m_(uint64_t{0u}){}
struct CMsgGC_Client2GCEconPreviewDataBlockRequestDefaultTypeInternal {
  constexpr CMsgGC_Client2GCEconPreviewDataBlockRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGC_Client2GCEconPreviewDataBlockRequestDefaultTypeInternal() {}
  union {
    CMsgGC_Client2GCEconPreviewDataBlockRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGC_Client2GCEconPreviewDataBlockRequestDefaultTypeInternal _CMsgGC_Client2GCEconPreviewDataBlockRequest_default_instance_;
constexpr CMsgGC_Client2GCEconPreviewDataBlockResponse::CMsgGC_Client2GCEconPreviewDataBlockResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : iteminfo_(nullptr){}
struct CMsgGC_Client2GCEconPreviewDataBlockResponseDefaultTypeInternal {
  constexpr CMsgGC_Client2GCEconPreviewDataBlockResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGC_Client2GCEconPreviewDataBlockResponseDefaultTypeInternal() {}
  union {
    CMsgGC_Client2GCEconPreviewDataBlockResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGC_Client2GCEconPreviewDataBlockResponseDefaultTypeInternal _CMsgGC_Client2GCEconPreviewDataBlockResponse_default_instance_;
constexpr CSOTFLadderPlayerStats::CSOTFLadderPlayerStats(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_id_(0u)
  , match_group_(0)
  , season_id_(0u)
  , games_(0u)
  , score_(0u)
  , kills_(0u)
  , deaths_(0u)
  , damage_(0u)
  , healing_(0u)
  , support_(0u)
  , score_bronze_(0u)
  , score_silver_(0u)
  , score_gold_(0u)
  , kills_bronze_(0u)
  , kills_silver_(0u)
  , kills_gold_(0u)
  , damage_bronze_(0u)
  , damage_silver_(0u)
  , damage_gold_(0u)
  , healing_bronze_(0u)
  , support_gold_(0u)
  , healing_silver_(0u)
  , healing_gold_(0u)
  , support_bronze_(0u)
  , support_silver_(0u){}
struct CSOTFLadderPlayerStatsDefaultTypeInternal {
  constexpr CSOTFLadderPlayerStatsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSOTFLadderPlayerStatsDefaultTypeInternal() {}
  union {
    CSOTFLadderPlayerStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSOTFLadderPlayerStatsDefaultTypeInternal _CSOTFLadderPlayerStats_default_instance_;
constexpr CSOTFRatingData::CSOTFRatingData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_id_(0u)
  , rating_type_(0)
  , rating_primary_(0u)
  , rating_secondary_(0u)
  , rating_tertiary_(0u){}
struct CSOTFRatingDataDefaultTypeInternal {
  constexpr CSOTFRatingDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSOTFRatingDataDefaultTypeInternal() {}
  union {
    CSOTFRatingData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSOTFRatingDataDefaultTypeInternal _CSOTFRatingData_default_instance_;
constexpr CMsgGC_TFVoteKickPlayerRequest::CMsgGC_TFVoteKickPlayerRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : target_id_(uint64_t{0u})
  , voter_id_(uint64_t{0u})
  , match_id_(uint64_t{0u})
  , reason_(0)
{}
struct CMsgGC_TFVoteKickPlayerRequestDefaultTypeInternal {
  constexpr CMsgGC_TFVoteKickPlayerRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGC_TFVoteKickPlayerRequestDefaultTypeInternal() {}
  union {
    CMsgGC_TFVoteKickPlayerRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGC_TFVoteKickPlayerRequestDefaultTypeInternal _CMsgGC_TFVoteKickPlayerRequest_default_instance_;
constexpr CMsgGC_VoteKickPlayerRequestResponse::CMsgGC_VoteKickPlayerRequestResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : allowed_(false)
  , voter_inhibit_(false)
  , target_inhibit_(false){}
struct CMsgGC_VoteKickPlayerRequestResponseDefaultTypeInternal {
  constexpr CMsgGC_VoteKickPlayerRequestResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGC_VoteKickPlayerRequestResponseDefaultTypeInternal() {}
  union {
    CMsgGC_VoteKickPlayerRequestResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGC_VoteKickPlayerRequestResponseDefaultTypeInternal _CMsgGC_VoteKickPlayerRequestResponse_default_instance_;
constexpr CMsgGC_DailyCompetitiveStatsRollup::CMsgGC_DailyCompetitiveStatsRollup(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CMsgGC_DailyCompetitiveStatsRollupDefaultTypeInternal {
  constexpr CMsgGC_DailyCompetitiveStatsRollupDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGC_DailyCompetitiveStatsRollupDefaultTypeInternal() {}
  union {
    CMsgGC_DailyCompetitiveStatsRollup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGC_DailyCompetitiveStatsRollupDefaultTypeInternal _CMsgGC_DailyCompetitiveStatsRollup_default_instance_;
constexpr CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rank_(0u)
  , records_(0u)
  , avg_score_(0u)
  , stdev_score_(0u)
  , avg_kills_(0u)
  , stdev_kills_(0u)
  , avg_damage_(0u)
  , stdev_damage_(0u)
  , avg_healing_(0u)
  , stdev_healing_(0u)
  , avg_support_(0u)
  , stdev_support_(0u){}
struct CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntryDefaultTypeInternal {
  constexpr CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntryDefaultTypeInternal() {}
  union {
    CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntryDefaultTypeInternal _CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry_default_instance_;
constexpr CMsgGC_DailyCompetitiveStatsRollup_Response::CMsgGC_DailyCompetitiveStatsRollup_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rankdata_(){}
struct CMsgGC_DailyCompetitiveStatsRollup_ResponseDefaultTypeInternal {
  constexpr CMsgGC_DailyCompetitiveStatsRollup_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGC_DailyCompetitiveStatsRollup_ResponseDefaultTypeInternal() {}
  union {
    CMsgGC_DailyCompetitiveStatsRollup_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGC_DailyCompetitiveStatsRollup_ResponseDefaultTypeInternal _CMsgGC_DailyCompetitiveStatsRollup_Response_default_instance_;
constexpr CMsgGC_ReportPlayer::CMsgGC_ReportPlayer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_id_target_(0u)
  , reason_(0)
{}
struct CMsgGC_ReportPlayerDefaultTypeInternal {
  constexpr CMsgGC_ReportPlayerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGC_ReportPlayerDefaultTypeInternal() {}
  union {
    CMsgGC_ReportPlayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGC_ReportPlayerDefaultTypeInternal _CMsgGC_ReportPlayer_default_instance_;
constexpr CSOTFMatchResultPlayerStats::CSOTFMatchResultPlayerStats(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : match_id_(uint64_t{0u})
  , account_id_(0u)
  , match_group_(0)
  , endtime_(0u)
  , season_id_(0u)
  , status_(0u)
  , original_party_id_(0u)
  , team_(0u)
  , score_(0u)
  , ping_(0u)
  , flags_(0u)
  , display_rating_(0u)
  , display_rating_change_(0)
  , rank_(0u)
  , classes_played_(0u)
  , kills_(0u)
  , deaths_(0u)
  , damage_(0u)
  , healing_(0u)
  , support_(0u)
  , score_medal_(0u)
  , kills_medal_(0u)
  , damage_medal_(0u)
  , healing_medal_(0u)
  , support_medal_(0u)
  , map_index_(0u)
  , winning_team_(0u){}
struct CSOTFMatchResultPlayerStatsDefaultTypeInternal {
  constexpr CSOTFMatchResultPlayerStatsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSOTFMatchResultPlayerStatsDefaultTypeInternal() {}
  union {
    CSOTFMatchResultPlayerStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSOTFMatchResultPlayerStatsDefaultTypeInternal _CSOTFMatchResultPlayerStats_default_instance_;
constexpr CMsgGCRequestMatchMakerStats::CMsgGCRequestMatchMakerStats(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CMsgGCRequestMatchMakerStatsDefaultTypeInternal {
  constexpr CMsgGCRequestMatchMakerStatsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCRequestMatchMakerStatsDefaultTypeInternal() {}
  union {
    CMsgGCRequestMatchMakerStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCRequestMatchMakerStatsDefaultTypeInternal _CMsgGCRequestMatchMakerStats_default_instance_;
constexpr CMsgGCDataCenterPopulation::CMsgGCDataCenterPopulation(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , health_ratio_(0){}
struct CMsgGCDataCenterPopulationDefaultTypeInternal {
  constexpr CMsgGCDataCenterPopulationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCDataCenterPopulationDefaultTypeInternal() {}
  union {
    CMsgGCDataCenterPopulation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCDataCenterPopulationDefaultTypeInternal _CMsgGCDataCenterPopulation_default_instance_;
constexpr CMsgGCMatchGroupDataCenterPopulation::CMsgGCMatchGroupDataCenterPopulation(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_center_population_(){}
struct CMsgGCMatchGroupDataCenterPopulationDefaultTypeInternal {
  constexpr CMsgGCMatchGroupDataCenterPopulationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCMatchGroupDataCenterPopulationDefaultTypeInternal() {}
  union {
    CMsgGCMatchGroupDataCenterPopulation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCMatchGroupDataCenterPopulationDefaultTypeInternal _CMsgGCMatchGroupDataCenterPopulation_default_instance_;
constexpr CMsgGCMatchMakerStatsResponse::CMsgGCMatchMakerStatsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : map_count_()
  , matchgroup_data_center_population_(){}
struct CMsgGCMatchMakerStatsResponseDefaultTypeInternal {
  constexpr CMsgGCMatchMakerStatsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCMatchMakerStatsResponseDefaultTypeInternal() {}
  union {
    CMsgGCMatchMakerStatsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCMatchMakerStatsResponseDefaultTypeInternal _CMsgGCMatchMakerStatsResponse_default_instance_;
constexpr CMsgGCMatchHistoryLoad::CMsgGCMatchHistoryLoad(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : match_group_(-1)
{}
struct CMsgGCMatchHistoryLoadDefaultTypeInternal {
  constexpr CMsgGCMatchHistoryLoadDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCMatchHistoryLoadDefaultTypeInternal() {}
  union {
    CMsgGCMatchHistoryLoad _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCMatchHistoryLoadDefaultTypeInternal _CMsgGCMatchHistoryLoad_default_instance_;
constexpr CMsgGCDataCenterPing_Update_PingEntry::CMsgGCDataCenterPing_Update_PingEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ping_(0u)
  , ping_status_(1)
{}
struct CMsgGCDataCenterPing_Update_PingEntryDefaultTypeInternal {
  constexpr CMsgGCDataCenterPing_Update_PingEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCDataCenterPing_Update_PingEntryDefaultTypeInternal() {}
  union {
    CMsgGCDataCenterPing_Update_PingEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCDataCenterPing_Update_PingEntryDefaultTypeInternal _CMsgGCDataCenterPing_Update_PingEntry_default_instance_;
constexpr CMsgGCDataCenterPing_Update::CMsgGCDataCenterPing_Update(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pingdata_(){}
struct CMsgGCDataCenterPing_UpdateDefaultTypeInternal {
  constexpr CMsgGCDataCenterPing_UpdateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCDataCenterPing_UpdateDefaultTypeInternal() {}
  union {
    CMsgGCDataCenterPing_Update _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCDataCenterPing_UpdateDefaultTypeInternal _CMsgGCDataCenterPing_Update_default_instance_;
constexpr CMsgGC_KickPlayerFromLobby::CMsgGC_KickPlayerFromLobby(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : targetid_(uint64_t{0u}){}
struct CMsgGC_KickPlayerFromLobbyDefaultTypeInternal {
  constexpr CMsgGC_KickPlayerFromLobbyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGC_KickPlayerFromLobbyDefaultTypeInternal() {}
  union {
    CMsgGC_KickPlayerFromLobby _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGC_KickPlayerFromLobbyDefaultTypeInternal _CMsgGC_KickPlayerFromLobby_default_instance_;
constexpr CMsgGCSurveyRequest::CMsgGCSurveyRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : match_id_(uint64_t{0u})
  , question_type_(0)
{}
struct CMsgGCSurveyRequestDefaultTypeInternal {
  constexpr CMsgGCSurveyRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCSurveyRequestDefaultTypeInternal() {}
  union {
    CMsgGCSurveyRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCSurveyRequestDefaultTypeInternal _CMsgGCSurveyRequest_default_instance_;
constexpr CMsgGCSurveyResponse::CMsgGCSurveyResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : match_id_(uint64_t{0u})
  , question_type_(0)

  , response_(0){}
struct CMsgGCSurveyResponseDefaultTypeInternal {
  constexpr CMsgGCSurveyResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCSurveyResponseDefaultTypeInternal() {}
  union {
    CMsgGCSurveyResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCSurveyResponseDefaultTypeInternal _CMsgGCSurveyResponse_default_instance_;
constexpr CSOQuestMapNode::CSOQuestMapNode(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_id_(0u)
  , defindex_(0u)
  , node_id_(0u)
  , star_0_earned_(false)
  , star_1_earned_(false)
  , star_2_earned_(false)
  , loot_claimed_(false)
  , selected_quest_def_(0u)
  , map_cycle_(0u){}
struct CSOQuestMapNodeDefaultTypeInternal {
  constexpr CSOQuestMapNodeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSOQuestMapNodeDefaultTypeInternal() {}
  union {
    CSOQuestMapNode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSOQuestMapNodeDefaultTypeInternal _CSOQuestMapNode_default_instance_;
constexpr CSOQuest::CSOQuest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : quest_id_(uint64_t{0u})
  , account_id_(0u)
  , defindex_(0u)
  , active_(false)
  , points_0_(0u)
  , points_1_(0u)
  , points_2_(0u)
  , quest_map_node_source_id_(0u)
  , map_cycle_(0u){}
struct CSOQuestDefaultTypeInternal {
  constexpr CSOQuestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSOQuestDefaultTypeInternal() {}
  union {
    CSOQuest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSOQuestDefaultTypeInternal _CSOQuest_default_instance_;
constexpr CSOQuestMapRewardPurchase::CSOQuestMapRewardPurchase(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_id_(0u)
  , defindex_(0u)
  , count_(0u)
  , map_cycle_(0u)
  , purchase_id_(0u){}
struct CSOQuestMapRewardPurchaseDefaultTypeInternal {
  constexpr CSOQuestMapRewardPurchaseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSOQuestMapRewardPurchaseDefaultTypeInternal() {}
  union {
    CSOQuestMapRewardPurchase _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSOQuestMapRewardPurchaseDefaultTypeInternal _CSOQuestMapRewardPurchase_default_instance_;
constexpr CMsgGCQuestIdentify::CMsgGCQuestIdentify(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : quest_id_(uint64_t{0u}){}
struct CMsgGCQuestIdentifyDefaultTypeInternal {
  constexpr CMsgGCQuestIdentifyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCQuestIdentifyDefaultTypeInternal() {}
  union {
    CMsgGCQuestIdentify _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCQuestIdentifyDefaultTypeInternal _CMsgGCQuestIdentify_default_instance_;
constexpr CMsgGCQuestDevGive::CMsgGCQuestDevGive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : quest_def_index_(0u){}
struct CMsgGCQuestDevGiveDefaultTypeInternal {
  constexpr CMsgGCQuestDevGiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCQuestDevGiveDefaultTypeInternal() {}
  union {
    CMsgGCQuestDevGive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCQuestDevGiveDefaultTypeInternal _CMsgGCQuestDevGive_default_instance_;
constexpr CMsgGCQuestNodeTurnIn::CMsgGCQuestNodeTurnIn(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : node_defindex_(0u){}
struct CMsgGCQuestNodeTurnInDefaultTypeInternal {
  constexpr CMsgGCQuestNodeTurnInDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCQuestNodeTurnInDefaultTypeInternal() {}
  union {
    CMsgGCQuestNodeTurnIn _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCQuestNodeTurnInDefaultTypeInternal _CMsgGCQuestNodeTurnIn_default_instance_;
constexpr CMsgGCQuestMapUnlockNode::CMsgGCQuestMapUnlockNode(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : node_defindex_(0u)
  , quest_defindex_(0u){}
struct CMsgGCQuestMapUnlockNodeDefaultTypeInternal {
  constexpr CMsgGCQuestMapUnlockNodeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCQuestMapUnlockNodeDefaultTypeInternal() {}
  union {
    CMsgGCQuestMapUnlockNode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCQuestMapUnlockNodeDefaultTypeInternal _CMsgGCQuestMapUnlockNode_default_instance_;
constexpr CMsgGCNewMatchForLobbyRequest::CMsgGCNewMatchForLobbyRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : current_match_id_(uint64_t{0u})
  , lobby_id_(uint64_t{0u})
  , next_map_id_(0u){}
struct CMsgGCNewMatchForLobbyRequestDefaultTypeInternal {
  constexpr CMsgGCNewMatchForLobbyRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCNewMatchForLobbyRequestDefaultTypeInternal() {}
  union {
    CMsgGCNewMatchForLobbyRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCNewMatchForLobbyRequestDefaultTypeInternal _CMsgGCNewMatchForLobbyRequest_default_instance_;
constexpr CMsgGCNewMatchForLobbyResponse::CMsgGCNewMatchForLobbyResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : success_(false){}
struct CMsgGCNewMatchForLobbyResponseDefaultTypeInternal {
  constexpr CMsgGCNewMatchForLobbyResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCNewMatchForLobbyResponseDefaultTypeInternal() {}
  union {
    CMsgGCNewMatchForLobbyResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCNewMatchForLobbyResponseDefaultTypeInternal _CMsgGCNewMatchForLobbyResponse_default_instance_;
constexpr CMsgGCChangeMatchPlayerTeamsRequest_Member::CMsgGCChangeMatchPlayerTeamsRequest_Member(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : member_id_(uint64_t{0u})
  , new_team_(5)
{}
struct CMsgGCChangeMatchPlayerTeamsRequest_MemberDefaultTypeInternal {
  constexpr CMsgGCChangeMatchPlayerTeamsRequest_MemberDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCChangeMatchPlayerTeamsRequest_MemberDefaultTypeInternal() {}
  union {
    CMsgGCChangeMatchPlayerTeamsRequest_Member _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCChangeMatchPlayerTeamsRequest_MemberDefaultTypeInternal _CMsgGCChangeMatchPlayerTeamsRequest_Member_default_instance_;
constexpr CMsgGCChangeMatchPlayerTeamsRequest::CMsgGCChangeMatchPlayerTeamsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : member_()
  , match_id_(uint64_t{0u})
  , lobby_id_(uint64_t{0u}){}
struct CMsgGCChangeMatchPlayerTeamsRequestDefaultTypeInternal {
  constexpr CMsgGCChangeMatchPlayerTeamsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCChangeMatchPlayerTeamsRequestDefaultTypeInternal() {}
  union {
    CMsgGCChangeMatchPlayerTeamsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCChangeMatchPlayerTeamsRequestDefaultTypeInternal _CMsgGCChangeMatchPlayerTeamsRequest_default_instance_;
constexpr CMsgGCChangeMatchPlayerTeamsResponse::CMsgGCChangeMatchPlayerTeamsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : success_(false){}
struct CMsgGCChangeMatchPlayerTeamsResponseDefaultTypeInternal {
  constexpr CMsgGCChangeMatchPlayerTeamsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCChangeMatchPlayerTeamsResponseDefaultTypeInternal() {}
  union {
    CMsgGCChangeMatchPlayerTeamsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCChangeMatchPlayerTeamsResponseDefaultTypeInternal _CMsgGCChangeMatchPlayerTeamsResponse_default_instance_;
constexpr CMsgGCQuestComplete_Debug::CMsgGCQuestComplete_Debug(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : quest_id_(uint64_t{0u})
  , points_type_(0u){}
struct CMsgGCQuestComplete_DebugDefaultTypeInternal {
  constexpr CMsgGCQuestComplete_DebugDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCQuestComplete_DebugDefaultTypeInternal() {}
  union {
    CMsgGCQuestComplete_Debug _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCQuestComplete_DebugDefaultTypeInternal _CMsgGCQuestComplete_Debug_default_instance_;
constexpr CMsgGCQuestMap_Debug::CMsgGCQuestMap_Debug(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : unlock_node_(nullptr)
  , reset_operation_(0u)
  , give_credit_(0u){}
struct CMsgGCQuestMap_DebugDefaultTypeInternal {
  constexpr CMsgGCQuestMap_DebugDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCQuestMap_DebugDefaultTypeInternal() {}
  union {
    CMsgGCQuestMap_Debug _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCQuestMap_DebugDefaultTypeInternal _CMsgGCQuestMap_Debug_default_instance_;
constexpr CMsgGCQuestMapPurchaseReward::CMsgGCQuestMapPurchaseReward(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : store_item_defindex_(0u){}
struct CMsgGCQuestMapPurchaseRewardDefaultTypeInternal {
  constexpr CMsgGCQuestMapPurchaseRewardDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCQuestMapPurchaseRewardDefaultTypeInternal() {}
  union {
    CMsgGCQuestMapPurchaseReward _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCQuestMapPurchaseRewardDefaultTypeInternal _CMsgGCQuestMapPurchaseReward_default_instance_;
constexpr CMsgGCQuestResponse::CMsgGCQuestResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : success_(false){}
struct CMsgGCQuestResponseDefaultTypeInternal {
  constexpr CMsgGCQuestResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCQuestResponseDefaultTypeInternal() {}
  union {
    CMsgGCQuestResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCQuestResponseDefaultTypeInternal _CMsgGCQuestResponse_default_instance_;
constexpr CMsgGCSetDisablePartyQuestProgress::CMsgGCSetDisablePartyQuestProgress(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : state_(false){}
struct CMsgGCSetDisablePartyQuestProgressDefaultTypeInternal {
  constexpr CMsgGCSetDisablePartyQuestProgressDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCSetDisablePartyQuestProgressDefaultTypeInternal() {}
  union {
    CMsgGCSetDisablePartyQuestProgress _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCSetDisablePartyQuestProgressDefaultTypeInternal _CMsgGCSetDisablePartyQuestProgress_default_instance_;
constexpr CMsgQuestProgressReport::CMsgQuestProgressReport(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : items_earned_()
  , quest_id_(uint64_t{0u})
  , star_0_earned_(false)
  , star_1_earned_(false)
  , star_2_earned_(false)
  , contract_completed_(false)
  , reward_credits_earned_(0u){}
struct CMsgQuestProgressReportDefaultTypeInternal {
  constexpr CMsgQuestProgressReportDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgQuestProgressReportDefaultTypeInternal() {}
  union {
    CMsgQuestProgressReport _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgQuestProgressReportDefaultTypeInternal _CMsgQuestProgressReport_default_instance_;
constexpr CMsgConsumePaintkit::CMsgConsumePaintkit(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : source_id_(uint64_t{0u})
  , target_defindex_(0u){}
struct CMsgConsumePaintkitDefaultTypeInternal {
  constexpr CMsgConsumePaintkitDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgConsumePaintkitDefaultTypeInternal() {}
  union {
    CMsgConsumePaintkit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgConsumePaintkitDefaultTypeInternal _CMsgConsumePaintkit_default_instance_;
constexpr CMsgPainkitDevGrant::CMsgPainkitDevGrant(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : paintkit_defindex_(0u)
  , wear_(0)
  , item_defindex_(0u){}
struct CMsgPainkitDevGrantDefaultTypeInternal {
  constexpr CMsgPainkitDevGrantDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgPainkitDevGrantDefaultTypeInternal() {}
  union {
    CMsgPainkitDevGrant _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgPainkitDevGrantDefaultTypeInternal _CMsgPainkitDevGrant_default_instance_;
constexpr GCQuestStrangeEvent::GCQuestStrangeEvent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : owner_account_id_(0u)
  , scorer_account_id_(0u)
  , quest_id_(uint64_t{0u})
  , strange_event_id_(0u)
  , score_(0u){}
struct GCQuestStrangeEventDefaultTypeInternal {
  constexpr GCQuestStrangeEventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GCQuestStrangeEventDefaultTypeInternal() {}
  union {
    GCQuestStrangeEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GCQuestStrangeEventDefaultTypeInternal _GCQuestStrangeEvent_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_tf_5fgcmessages_2eproto[192];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_tf_5fgcmessages_2eproto[28];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_tf_5fgcmessages_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_tf_5fgcmessages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CMsgTFGoldenWrenchBroadcast, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgTFGoldenWrenchBroadcast, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgTFGoldenWrenchBroadcast, wrench_number_),
  PROTOBUF_FIELD_OFFSET(::CMsgTFGoldenWrenchBroadcast, deleted_),
  PROTOBUF_FIELD_OFFSET(::CMsgTFGoldenWrenchBroadcast, user_name_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgTFSaxxyBroadcast, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgTFSaxxyBroadcast, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgTFSaxxyBroadcast, category_number_),
  PROTOBUF_FIELD_OFFSET(::CMsgTFSaxxyBroadcast, user_name_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCTFSpecificItemBroadcast, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCTFSpecificItemBroadcast, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCTFSpecificItemBroadcast, item_def_index_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCTFSpecificItemBroadcast, was_destruction_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCTFSpecificItemBroadcast, user_name_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgTFWorldStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgTFWorldStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgTFWorldStatus, beta_stress_test_event_active_),
  PROTOBUF_FIELD_OFFSET(::CMsgTFWorldStatus, event_match_group_),
  PROTOBUF_FIELD_OFFSET(::CMsgTFWorldStatus, event_expire_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgTFWorldStatus, active_client_version_),
  PROTOBUF_FIELD_OFFSET(::CMsgTFWorldStatus, disabled_match_groups_),
  0,
  3,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CSOTFDuelSummary, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSOTFDuelSummary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSOTFDuelSummary, account_id_),
  PROTOBUF_FIELD_OFFSET(::CSOTFDuelSummary, duel_wins_),
  PROTOBUF_FIELD_OFFSET(::CSOTFDuelSummary, duel_losses_),
  PROTOBUF_FIELD_OFFSET(::CSOTFDuelSummary, last_duel_account_id_),
  PROTOBUF_FIELD_OFFSET(::CSOTFDuelSummary, last_duel_timestamp_),
  PROTOBUF_FIELD_OFFSET(::CSOTFDuelSummary, last_duel_status_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CSOTFMapContribution, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSOTFMapContribution, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSOTFMapContribution, account_id_),
  PROTOBUF_FIELD_OFFSET(::CSOTFMapContribution, def_index_),
  PROTOBUF_FIELD_OFFSET(::CSOTFMapContribution, contribution_level_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgTFFreeTrialChooseMostHelpfulFriend, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgTFFreeTrialChooseMostHelpfulFriend, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgTFFreeTrialChooseMostHelpfulFriend, account_id_friend_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgTFRequestTF2Friends, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgTFRequestTF2Friends, account_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgTFRequestTF2FriendsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgTFRequestTF2FriendsResponse, account_ids_),
  PROTOBUF_FIELD_OFFSET(::CSOTFPlayerInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSOTFPlayerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSOTFPlayerInfo, num_new_users_helped_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgTFThankedBySomeone, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgTFThankedBySomeone, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgTFThankedBySomeone, thanker_steam_id_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgTFThankedSomeone, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgTFFreeTrialConvertedToPremium, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSaxxyAwarded, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSaxxyAwarded, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSaxxyAwarded, category_),
  PROTOBUF_FIELD_OFFSET(::CMsgSaxxyAwarded, winner_names_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgReplaySubmitContestEntry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgReplaySubmitContestEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgReplaySubmitContestEntry, youtube_url_),
  PROTOBUF_FIELD_OFFSET(::CMsgReplaySubmitContestEntry, category_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgReplaySubmitContestEntryResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgReplaySubmitContestEntryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgReplaySubmitContestEntryResponse, success_),
  0,
  PROTOBUF_FIELD_OFFSET(::CReplayCachedContestData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CReplayCachedContestData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CReplayCachedContestData, timestamp_),
  PROTOBUF_FIELD_OFFSET(::CReplayCachedContestData, num_votes_last_day_),
  PROTOBUF_FIELD_OFFSET(::CReplayCachedContestData, video_entry_ids_),
  PROTOBUF_FIELD_OFFSET(::CReplayCachedContestData, num_flags_last_day_),
  0,
  1,
  ~0u,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgTFCoaching_AddToCoaches, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgTFCoaching_RemoveFromCoaches, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgTFCoaching_FindCoach, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgTFCoaching_FindCoach, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgTFCoaching_FindCoach, account_id_friend_as_coach_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgTFCoaching_FindCoachResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgTFCoaching_FindCoachResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgTFCoaching_FindCoachResponse, found_coach_),
  PROTOBUF_FIELD_OFFSET(::CMsgTFCoaching_FindCoachResponse, num_likes_),
  PROTOBUF_FIELD_OFFSET(::CMsgTFCoaching_FindCoachResponse, coach_name_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgTFCoaching_AskCoach, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgTFCoaching_AskCoach, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgTFCoaching_AskCoach, account_id_student_),
  PROTOBUF_FIELD_OFFSET(::CMsgTFCoaching_AskCoach, student_is_friend_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgTFCoaching_AskCoachResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgTFCoaching_AskCoachResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgTFCoaching_AskCoachResponse, accept_coaching_assignment_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgTFCoaching_CoachJoinGame, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgTFCoaching_CoachJoinGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgTFCoaching_CoachJoinGame, join_game_),
  PROTOBUF_FIELD_OFFSET(::CMsgTFCoaching_CoachJoinGame, server_address_),
  PROTOBUF_FIELD_OFFSET(::CMsgTFCoaching_CoachJoinGame, server_port_),
  PROTOBUF_FIELD_OFFSET(::CMsgTFCoaching_CoachJoinGame, account_id_student_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgTFCoaching_CoachJoining, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgTFCoaching_CoachJoining, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgTFCoaching_CoachJoining, account_id_coach_),
  PROTOBUF_FIELD_OFFSET(::CMsgTFCoaching_CoachJoining, account_id_student_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgTFCoaching_CoachJoined, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgTFCoaching_CoachJoined, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgTFCoaching_CoachJoined, account_id_coach_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgTFCoaching_LikeCurrentCoach, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgTFCoaching_LikeCurrentCoach, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgTFCoaching_LikeCurrentCoach, like_coach_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgTFCoaching_RemoveCurrentCoach, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgTFCoaching_RemoveCurrentCoach, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgTFCoaching_RemoveCurrentCoach, account_id_coach_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgTFQuickplay_ScoreServers_ServerInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgTFQuickplay_ScoreServers_ServerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgTFQuickplay_ScoreServers_ServerInfo, server_address_),
  PROTOBUF_FIELD_OFFSET(::CMsgTFQuickplay_ScoreServers_ServerInfo, server_port_),
  PROTOBUF_FIELD_OFFSET(::CMsgTFQuickplay_ScoreServers_ServerInfo, num_users_),
  PROTOBUF_FIELD_OFFSET(::CMsgTFQuickplay_ScoreServers_ServerInfo, steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgTFQuickplay_ScoreServers_ServerInfo, max_users_),
  PROTOBUF_FIELD_OFFSET(::CMsgTFQuickplay_ScoreServers_ServerInfo, user_score_),
  0,
  1,
  3,
  2,
  4,
  5,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgTFQuickplay_ScoreServers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgTFQuickplay_ScoreServers, servers_),
  PROTOBUF_FIELD_OFFSET(::CMsgTFQuickplay_ScoreServersResponse_ServerInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgTFQuickplay_ScoreServersResponse_ServerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgTFQuickplay_ScoreServersResponse_ServerInfo, server_address_),
  PROTOBUF_FIELD_OFFSET(::CMsgTFQuickplay_ScoreServersResponse_ServerInfo, server_port_),
  PROTOBUF_FIELD_OFFSET(::CMsgTFQuickplay_ScoreServersResponse_ServerInfo, total_score_),
  PROTOBUF_FIELD_OFFSET(::CMsgTFQuickplay_ScoreServersResponse_ServerInfo, steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgTFQuickplay_ScoreServersResponse_ServerInfo, options_score_),
  0,
  1,
  3,
  2,
  4,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgTFQuickplay_ScoreServersResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgTFQuickplay_ScoreServersResponse, servers_),
  PROTOBUF_FIELD_OFFSET(::CMsgTFQuickplay_PlayerJoining, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgTFQuickplay_PlayerJoining, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgTFQuickplay_PlayerJoining, account_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGC_GameServer_LevelInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_GameServer_LevelInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGC_GameServer_LevelInfo, level_loaded_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_GameServer_LevelInfo, level_name_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGC_GameServer_AuthChallenge, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_GameServer_AuthChallenge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGC_GameServer_AuthChallenge, challenge_string_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGC_GameServer_AuthResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_GameServer_AuthResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGC_GameServer_AuthResult, authenticated_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_GameServer_AuthResult, game_server_standing_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_GameServer_AuthResult, game_server_standing_trend_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_GameServer_AuthResult, is_valve_server_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_GameServer_AuthResult, message_),
  2,
  1,
  4,
  3,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGC_GameServer_AuthChallengeResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_GameServer_AuthChallengeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGC_GameServer_AuthChallengeResponse, game_server_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_GameServer_AuthChallengeResponse, hashed_challenge_string_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGC_GameServer_CreateIdentity, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_GameServer_CreateIdentity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGC_GameServer_CreateIdentity, account_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGC_GameServer_CreateIdentityResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_GameServer_CreateIdentityResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGC_GameServer_CreateIdentityResponse, account_created_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_GameServer_CreateIdentityResponse, game_server_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_GameServer_CreateIdentityResponse, game_server_identity_token_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_GameServer_CreateIdentityResponse, status_),
  1,
  2,
  0,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgGC_GameServer_List, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_GameServer_List, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGC_GameServer_List, account_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGC_GameServer_ListResponse_GameServerIdentity, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_GameServer_ListResponse_GameServerIdentity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGC_GameServer_ListResponse_GameServerIdentity, game_server_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_GameServer_ListResponse_GameServerIdentity, game_server_identity_token_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_GameServer_ListResponse_GameServerIdentity, game_server_standing_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_GameServer_ListResponse_GameServerIdentity, game_server_standing_trend_),
  1,
  0,
  2,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGC_GameServer_ListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGC_GameServer_ListResponse, owned_game_servers_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_GameServer_ResetIdentity, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_GameServer_ResetIdentity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGC_GameServer_ResetIdentity, game_server_account_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGC_GameServer_ResetIdentityResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_GameServer_ResetIdentityResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGC_GameServer_ResetIdentityResponse, game_server_identity_token_reset_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_GameServer_ResetIdentityResponse, game_server_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_GameServer_ResetIdentityResponse, game_server_identity_token_),
  1,
  2,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGC_GameServer_AckPolicy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGC_GameServer_AckPolicyResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_GameServer_AckPolicyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGC_GameServer_AckPolicyResponse, result_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_GameServer_AckPolicyResponse, message_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGC_Client_UseServerModificationItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_Client_UseServerModificationItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGC_Client_UseServerModificationItem, item_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGC_Client_UseServerModificationItem_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_Client_UseServerModificationItem_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGC_Client_UseServerModificationItem_Response, response_code_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGC_GameServer_UseServerModificationItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_GameServer_UseServerModificationItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGC_GameServer_UseServerModificationItem, modification_type_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGC_GameServer_UseServerModificationItem_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_GameServer_UseServerModificationItem_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGC_GameServer_UseServerModificationItem_Response, modification_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_GameServer_UseServerModificationItem_Response, server_response_code_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgGC_GameServer_ServerModificationItemExpired, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_GameServer_ServerModificationItemExpired, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGC_GameServer_ServerModificationItemExpired, modification_type_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGC_GameServer_ServerModificationItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_GameServer_ServerModificationItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGC_GameServer_ServerModificationItem, modification_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_GameServer_ServerModificationItem, active_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGC_Halloween_ReservedItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_Halloween_ReservedItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGC_Halloween_ReservedItem, x_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_Halloween_ReservedItem, y_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_Halloween_ReservedItem, z_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_Halloween_ReservedItem, spawn_meta_info_),
  ~0u,
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGC_Halloween_GrantItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_Halloween_GrantItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGC_Halloween_GrantItem, recipient_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_Halloween_GrantItem, level_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_Halloween_GrantItem, flagged_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgGC_Halloween_GrantItemResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_Halloween_GrantItemResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGC_Halloween_GrantItemResponse, recipient_account_id_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGC_Halloween_ItemClaimed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGC_PickupItemEligibility_Query, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_PickupItemEligibility_Query, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGC_PickupItemEligibility_Query, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_PickupItemEligibility_Query, seconds_ago_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgGC_PickupItemEligibility_QueryResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_PickupItemEligibility_QueryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGC_PickupItemEligibility_QueryResponse, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_PickupItemEligibility_QueryResponse, was_eligible_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_PickupItemEligibility_QueryResponse, level_id_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CSOTFPartyMember_Activity, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSOTFPartyMember_Activity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSOTFPartyMember_Activity, lobby_id_),
  PROTOBUF_FIELD_OFFSET(::CSOTFPartyMember_Activity, lobby_match_group_),
  PROTOBUF_FIELD_OFFSET(::CSOTFPartyMember_Activity, multiqueue_blocked_),
  PROTOBUF_FIELD_OFFSET(::CSOTFPartyMember_Activity, online_),
  PROTOBUF_FIELD_OFFSET(::CSOTFPartyMember_Activity, client_version_),
  0,
  4,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CSOTFPartyMember, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSOTFPartyMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSOTFPartyMember, owns_ticket_),
  PROTOBUF_FIELD_OFFSET(::CSOTFPartyMember, completed_missions_),
  PROTOBUF_FIELD_OFFSET(::CSOTFPartyMember, badge_level_),
  PROTOBUF_FIELD_OFFSET(::CSOTFPartyMember, competitive_access_),
  PROTOBUF_FIELD_OFFSET(::CSOTFPartyMember, experience_),
  PROTOBUF_FIELD_OFFSET(::CSOTFPartyMember, player_criteria_),
  PROTOBUF_FIELD_OFFSET(::CSOTFPartyMember, activity_),
  PROTOBUF_FIELD_OFFSET(::CSOTFPartyMember, casual_banned_),
  PROTOBUF_FIELD_OFFSET(::CSOTFPartyMember, ranked_banned_),
  PROTOBUF_FIELD_OFFSET(::CSOTFPartyMember, casual_low_priority_),
  PROTOBUF_FIELD_OFFSET(::CSOTFPartyMember, ranked_low_priority_),
  PROTOBUF_FIELD_OFFSET(::CSOTFPartyMember, lobby_standby_),
  4,
  2,
  3,
  5,
  8,
  0,
  1,
  6,
  7,
  9,
  10,
  11,
  PROTOBUF_FIELD_OFFSET(::TFPendingPartyMember, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TFPendingPartyMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TFPendingPartyMember, steamid_),
  PROTOBUF_FIELD_OFFSET(::TFPendingPartyMember, type_),
  PROTOBUF_FIELD_OFFSET(::TFPendingPartyMember, inviter_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::TFSyncedMMUIState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TFSyncedMMUIState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TFSyncedMMUIState, menu_step_),
  PROTOBUF_FIELD_OFFSET(::TFSyncedMMUIState, match_group_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CTFGroupMatchCriteriaProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CTFGroupMatchCriteriaProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CTFGroupMatchCriteriaProto, late_join_ok_),
  PROTOBUF_FIELD_OFFSET(::CTFGroupMatchCriteriaProto, custom_ping_tolerance_),
  PROTOBUF_FIELD_OFFSET(::CTFGroupMatchCriteriaProto, mvm_mannup_tour_),
  PROTOBUF_FIELD_OFFSET(::CTFGroupMatchCriteriaProto, mvm_mannup_missions_),
  PROTOBUF_FIELD_OFFSET(::CTFGroupMatchCriteriaProto, mvm_bootcamp_missions_),
  PROTOBUF_FIELD_OFFSET(::CTFGroupMatchCriteriaProto, casual_criteria_),
  2,
  3,
  0,
  ~0u,
  ~0u,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CTFCasualMatchCriteria, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CTFCasualMatchCriteria, selected_maps_bits_),
  PROTOBUF_FIELD_OFFSET(::CTFPerPlayerMatchCriteriaProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CTFPerPlayerMatchCriteriaProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CTFPerPlayerMatchCriteriaProto, mvm_squad_surplus_),
  0,
  PROTOBUF_FIELD_OFFSET(::CTFPartyOptions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CTFPartyOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CTFPartyOptions, overwrite_existing_),
  PROTOBUF_FIELD_OFFSET(::CTFPartyOptions, group_criteria_),
  PROTOBUF_FIELD_OFFSET(::CTFPartyOptions, player_criteria_),
  PROTOBUF_FIELD_OFFSET(::CTFPartyOptions, player_uistate_),
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgPartySetOptions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgPartySetOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgPartySetOptions, party_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgPartySetOptions, options_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgPartySetOptionsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgPartyQueueForMatch, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgPartyQueueForMatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgPartyQueueForMatch, party_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgPartyQueueForMatch, final_options_),
  PROTOBUF_FIELD_OFFSET(::CMsgPartyQueueForMatch, match_group_),
  1,
  0,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgPartyQueueForMatchResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgPartyQueueForStandby, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgPartyQueueForStandby, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgPartyQueueForStandby, party_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgPartyQueueForStandby, party_lobby_id_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgPartyQueueForStandbyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgPartyRemoveFromQueue, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgPartyRemoveFromQueue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgPartyRemoveFromQueue, party_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgPartyRemoveFromQueue, match_group_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgPartyRemoveFromQueueResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgPartyRemoveFromStandbyQueue, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgPartyRemoveFromStandbyQueue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgPartyRemoveFromStandbyQueue, party_id_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgPartyRemoveFromStandbyQueueResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgPartyInvitePlayer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgPartyInvitePlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgPartyInvitePlayer, party_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgPartyInvitePlayer, player_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgPartyInvitePlayer, expecting_request_to_join_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgPartyRequestJoinPlayer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgPartyRequestJoinPlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgPartyRequestJoinPlayer, current_party_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgPartyRequestJoinPlayer, join_player_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgPartyRequestJoinPlayer, join_party_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgPartyRequestJoinPlayer, expecting_invite_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgPartyClearPendingPlayer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgPartyClearPendingPlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgPartyClearPendingPlayer, party_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgPartyClearPendingPlayer, pending_player_id_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgPartyClearPendingPlayerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgPartyClearOtherPartyRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgPartyClearOtherPartyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgPartyClearOtherPartyRequest, other_party_id_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgPartyClearOtherPartyRequestResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgPartyPromoteToLeader, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgPartyPromoteToLeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgPartyPromoteToLeader, party_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgPartyPromoteToLeader, new_leader_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgPartyKickMember, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgPartyKickMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgPartyKickMember, party_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgPartyKickMember, target_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgPartySendChat, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgPartySendChat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgPartySendChat, party_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgPartySendChat, msg_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgPartyChatMsg, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgPartyChatMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgPartyChatMsg, type_),
  PROTOBUF_FIELD_OFFSET(::CMsgPartyChatMsg, actor_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgPartyChatMsg, msg_),
  2,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CSOTFParty_QueueEntry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSOTFParty_QueueEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSOTFParty_QueueEntry, match_group_),
  PROTOBUF_FIELD_OFFSET(::CSOTFParty_QueueEntry, queued_time_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CSOTFParty, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSOTFParty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSOTFParty, party_id_),
  PROTOBUF_FIELD_OFFSET(::CSOTFParty, leader_id_),
  PROTOBUF_FIELD_OFFSET(::CSOTFParty, member_ids_),
  PROTOBUF_FIELD_OFFSET(::CSOTFParty, members_),
  PROTOBUF_FIELD_OFFSET(::CSOTFParty, associated_lobby_id_),
  PROTOBUF_FIELD_OFFSET(::CSOTFParty, associated_lobby_match_group_),
  PROTOBUF_FIELD_OFFSET(::CSOTFParty, matchmaking_queues_),
  PROTOBUF_FIELD_OFFSET(::CSOTFParty, group_criteria_),
  PROTOBUF_FIELD_OFFSET(::CSOTFParty, casual_banned_time_),
  PROTOBUF_FIELD_OFFSET(::CSOTFParty, casual_low_priority_time_),
  PROTOBUF_FIELD_OFFSET(::CSOTFParty, ranked_banned_time_),
  PROTOBUF_FIELD_OFFSET(::CSOTFParty, ranked_low_priority_time_),
  PROTOBUF_FIELD_OFFSET(::CSOTFParty, leader_ui_state_),
  PROTOBUF_FIELD_OFFSET(::CSOTFParty, pending_members_),
  2,
  3,
  ~0u,
  ~0u,
  6,
  9,
  ~0u,
  0,
  4,
  5,
  7,
  8,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CSOTFPartyInvite_PartyMember, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSOTFPartyInvite_PartyMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSOTFPartyInvite_PartyMember, steamid_),
  0,
  PROTOBUF_FIELD_OFFSET(::CSOTFPartyInvite, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSOTFPartyInvite, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSOTFPartyInvite, group_id_),
  PROTOBUF_FIELD_OFFSET(::CSOTFPartyInvite, inviter_),
  PROTOBUF_FIELD_OFFSET(::CSOTFPartyInvite, members_),
  PROTOBUF_FIELD_OFFSET(::CSOTFPartyInvite, type_),
  0,
  1,
  ~0u,
  2,
  PROTOBUF_FIELD_OFFSET(::CTFLobbyPlayerProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CTFLobbyPlayerProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CTFLobbyPlayerProto, id_),
  PROTOBUF_FIELD_OFFSET(::CTFLobbyPlayerProto, team_),
  PROTOBUF_FIELD_OFFSET(::CTFLobbyPlayerProto, connect_state_),
  PROTOBUF_FIELD_OFFSET(::CTFLobbyPlayerProto, name_),
  PROTOBUF_FIELD_OFFSET(::CTFLobbyPlayerProto, original_party_id_),
  PROTOBUF_FIELD_OFFSET(::CTFLobbyPlayerProto, squad_surplus_),
  PROTOBUF_FIELD_OFFSET(::CTFLobbyPlayerProto, badge_level_),
  PROTOBUF_FIELD_OFFSET(::CTFLobbyPlayerProto, last_connect_time_),
  PROTOBUF_FIELD_OFFSET(::CTFLobbyPlayerProto, type_),
  PROTOBUF_FIELD_OFFSET(::CTFLobbyPlayerProto, normalized_rating_),
  PROTOBUF_FIELD_OFFSET(::CTFLobbyPlayerProto, normalized_uncertainty_),
  PROTOBUF_FIELD_OFFSET(::CTFLobbyPlayerProto, rank_),
  PROTOBUF_FIELD_OFFSET(::CTFLobbyPlayerProto, chat_suspension_),
  1,
  2,
  3,
  0,
  4,
  8,
  6,
  7,
  10,
  11,
  12,
  5,
  9,
  PROTOBUF_FIELD_OFFSET(::CTFLobbyInviteProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CTFLobbyInviteProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CTFLobbyInviteProto, lobby_id_),
  PROTOBUF_FIELD_OFFSET(::CTFLobbyInviteProto, match_group_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CSOTFGameServerLobby, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSOTFGameServerLobby, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSOTFGameServerLobby, lobby_id_),
  PROTOBUF_FIELD_OFFSET(::CSOTFGameServerLobby, members_),
  PROTOBUF_FIELD_OFFSET(::CSOTFGameServerLobby, server_id_),
  PROTOBUF_FIELD_OFFSET(::CSOTFGameServerLobby, state_),
  PROTOBUF_FIELD_OFFSET(::CSOTFGameServerLobby, connect_),
  PROTOBUF_FIELD_OFFSET(::CSOTFGameServerLobby, game_state_),
  PROTOBUF_FIELD_OFFSET(::CSOTFGameServerLobby, initial_average_mm_rating_),
  PROTOBUF_FIELD_OFFSET(::CSOTFGameServerLobby, mannup_tour_name_),
  PROTOBUF_FIELD_OFFSET(::CSOTFGameServerLobby, map_name_),
  PROTOBUF_FIELD_OFFSET(::CSOTFGameServerLobby, mission_name_),
  PROTOBUF_FIELD_OFFSET(::CSOTFGameServerLobby, match_group_),
  PROTOBUF_FIELD_OFFSET(::CSOTFGameServerLobby, match_id_),
  PROTOBUF_FIELD_OFFSET(::CSOTFGameServerLobby, formed_time_),
  PROTOBUF_FIELD_OFFSET(::CSOTFGameServerLobby, flags_),
  PROTOBUF_FIELD_OFFSET(::CSOTFGameServerLobby, late_join_eligible_),
  PROTOBUF_FIELD_OFFSET(::CSOTFGameServerLobby, fixed_match_size_),
  PROTOBUF_FIELD_OFFSET(::CSOTFGameServerLobby, is_war_match_),
  PROTOBUF_FIELD_OFFSET(::CSOTFGameServerLobby, next_maps_for_vote_),
  PROTOBUF_FIELD_OFFSET(::CSOTFGameServerLobby, lobby_mm_version_),
  PROTOBUF_FIELD_OFFSET(::CSOTFGameServerLobby, pending_members_),
  4,
  ~0u,
  5,
  6,
  0,
  7,
  10,
  3,
  1,
  2,
  12,
  9,
  11,
  13,
  14,
  15,
  16,
  ~0u,
  8,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgExitMatchmaking, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgExitMatchmaking, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgExitMatchmaking, explicit_abandon_),
  PROTOBUF_FIELD_OFFSET(::CMsgExitMatchmaking, party_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgExitMatchmaking, lobby_id_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgAcceptLobbyInvite, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgAcceptLobbyInvite, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgAcceptLobbyInvite, invited_lobby_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgAcceptLobbyInvite, abandoning_match_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgAcceptLobbyInvite, abandoning_invite_lobby_ids_),
  0,
  1,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgAcceptLobbyInviteReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgMatchmakingSearchCountRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgMatchmakingSearchCountResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgMatchmakingSearchCountResponse, searching_players_by_group_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgKickedFromMatchmakingQueue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerMatchmakingStatus_Player, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerMatchmakingStatus_Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerMatchmakingStatus_Player, steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerMatchmakingStatus_Player, connect_state_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerMatchmakingStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerMatchmakingStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerMatchmakingStatus, server_version_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerMatchmakingStatus, matchmaking_state_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerMatchmakingStatus, map_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerMatchmakingStatus, tags_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerMatchmakingStatus, bot_count_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerMatchmakingStatus, num_spectators_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerMatchmakingStatus, max_players_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerMatchmakingStatus, slots_free_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerMatchmakingStatus, server_region_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerMatchmakingStatus, server_loadavg_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerMatchmakingStatus, server_trusted_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerMatchmakingStatus, server_dedicated_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerMatchmakingStatus, strict_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerMatchmakingStatus, players_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerMatchmakingStatus, game_state_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerMatchmakingStatus, event_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerMatchmakingStatus, mvm_wave_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerMatchmakingStatus, mvm_credits_acquired_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerMatchmakingStatus, mvm_credits_dropped_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerMatchmakingStatus, match_group_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerMatchmakingStatus, lobby_mm_version_),
  18,
  2,
  0,
  1,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  13,
  ~0u,
  11,
  12,
  14,
  15,
  16,
  19,
  17,
  PROTOBUF_FIELD_OFFSET(::CMsgMatchmakingProgress, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchmakingProgress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgMatchmakingProgress, avg_wait_time_new_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchmakingProgress, avg_wait_time_join_late_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchmakingProgress, your_wait_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchmakingProgress, matching_worldwide_searching_players_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchmakingProgress, matching_near_you_searching_players_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchmakingProgress, total_worldwide_searching_players_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchmakingProgress, total_near_you_searching_players_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchmakingProgress, matching_worldwide_active_players_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchmakingProgress, matching_near_you_active_players_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchmakingProgress, total_worldwide_active_players_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchmakingProgress, total_near_you_active_players_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchmakingProgress, matching_worldwide_empty_gameservers_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchmakingProgress, matching_near_you_empty_gameservers_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchmakingProgress, total_worldwide_empty_gameservers_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchmakingProgress, total_near_you_empty_gameservers_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchmakingProgress, urgency_pct_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgMvMVictoryInfo_Item, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgMvMVictoryInfo_Item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgMvMVictoryInfo_Item, grant_reason_),
  PROTOBUF_FIELD_OFFSET(::CMsgMvMVictoryInfo_Item, item_data_),
  PROTOBUF_FIELD_OFFSET(::CMsgMvMVictoryInfo_Item, squad_surplus_claimer_steam_id_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgMvMVictoryInfo_Player, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgMvMVictoryInfo_Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgMvMVictoryInfo_Player, steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgMvMVictoryInfo_Player, badge_granted_),
  PROTOBUF_FIELD_OFFSET(::CMsgMvMVictoryInfo_Player, badge_progress_updated_),
  PROTOBUF_FIELD_OFFSET(::CMsgMvMVictoryInfo_Player, badge_leveled_),
  PROTOBUF_FIELD_OFFSET(::CMsgMvMVictoryInfo_Player, badge_level_),
  PROTOBUF_FIELD_OFFSET(::CMsgMvMVictoryInfo_Player, badge_progress_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgMvMVictoryInfo_Player, items_),
  PROTOBUF_FIELD_OFFSET(::CMsgMvMVictoryInfo_Player, voucher_missing_),
  PROTOBUF_FIELD_OFFSET(::CMsgMvMVictoryInfo_Player, badge_points_),
  0,
  1,
  2,
  3,
  5,
  6,
  ~0u,
  4,
  7,
  PROTOBUF_FIELD_OFFSET(::CMsgMvMVictoryInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgMvMVictoryInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgMvMVictoryInfo, players_),
  PROTOBUF_FIELD_OFFSET(::CMsgMvMVictoryInfo, tour_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgMvMVictoryInfo, mission_name_),
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CGCMsgTFHelloResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgTFHelloResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGCMsgTFHelloResponse, version_check_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgTFHelloResponse, version_checksum_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgTFHelloResponse, version_verbose_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::CGCMsgTFSync, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgTFSync, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGCMsgTFSync, version_checksum_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgTFSync, version_check_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgTFSync, version_check_ex_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgTFSync, version_check_ex2_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgTFSync, version_checksum_ex_),
  0,
  2,
  3,
  4,
  1,
  PROTOBUF_FIELD_OFFSET(::CGCMsgTFSyncEx, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgTFSyncEx, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGCMsgTFSyncEx, version_checksum_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgTFSyncEx, version_checksum_ex_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgTFSyncEx, version_check_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgMvMVictory_Player, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgMvMVictory_Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgMvMVictory_Player, steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgMvMVictory_Player, squad_surplus_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgMvMVictory, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgMvMVictory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgMvMVictory, legacy_mission_index_),
  PROTOBUF_FIELD_OFFSET(::CMsgMvMVictory, tour_name_mannup_),
  PROTOBUF_FIELD_OFFSET(::CMsgMvMVictory, mission_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgMvMVictory, players_),
  PROTOBUF_FIELD_OFFSET(::CMsgMvMVictory, lobby_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgMvMVictory, event_time_),
  2,
  0,
  1,
  ~0u,
  4,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgMvMMannUpVictoryReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerKickingLobby, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerKickingLobby, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerKickingLobby, lobby_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerKickingLobby, match_id_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerKickingLobbyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgLeaveGameAndPrepareToJoinParty, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgLeaveGameAndPrepareToJoinParty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgLeaveGameAndPrepareToJoinParty, party_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgPlayerLeftMatch, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgPlayerLeftMatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgPlayerLeftMatch, steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgPlayerLeftMatch, leave_reason_),
  PROTOBUF_FIELD_OFFSET(::CMsgPlayerLeftMatch, was_abandon_),
  PROTOBUF_FIELD_OFFSET(::CMsgPlayerLeftMatch, lobby_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgPlayerLeftMatch, match_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgPlayerLeftMatch, xp_breakdown_),
  0,
  1,
  2,
  3,
  4,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgPlayerLeftMatchResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgProcessMatchVoteKick_Vote, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgProcessMatchVoteKick_Vote, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgProcessMatchVoteKick_Vote, steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgProcessMatchVoteKick_Vote, vote_yay_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgProcessMatchVoteKick, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgProcessMatchVoteKick, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgProcessMatchVoteKick, match_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgProcessMatchVoteKick, initiator_steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgProcessMatchVoteKick, target_steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgProcessMatchVoteKick, reason_),
  PROTOBUF_FIELD_OFFSET(::CMsgProcessMatchVoteKick, votes_),
  PROTOBUF_FIELD_OFFSET(::CMsgProcessMatchVoteKick, default_pass_),
  0,
  1,
  2,
  3,
  ~0u,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgProcessMatchVoteKickResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgProcessMatchVoteKickResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgProcessMatchVoteKickResponse, rip_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgPlayerVoteKickedAfterLeavingMatchResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgHalloween_ServerBossEvent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgHalloween_ServerBossEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgHalloween_ServerBossEvent, event_counter_),
  PROTOBUF_FIELD_OFFSET(::CMsgHalloween_ServerBossEvent, timestamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgHalloween_ServerBossEvent, boss_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgHalloween_ServerBossEvent, boss_level_),
  PROTOBUF_FIELD_OFFSET(::CMsgHalloween_ServerBossEvent, event_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgHalloween_ServerBossEvent, players_involved_),
  PROTOBUF_FIELD_OFFSET(::CMsgHalloween_ServerBossEvent, elapsed_time_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::CMsgHalloween_Merasmus2012, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgHalloween_Merasmus2012, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgHalloween_Merasmus2012, event_counter_),
  PROTOBUF_FIELD_OFFSET(::CMsgHalloween_Merasmus2012, time_submitted_),
  PROTOBUF_FIELD_OFFSET(::CMsgHalloween_Merasmus2012, is_valve_server_),
  PROTOBUF_FIELD_OFFSET(::CMsgHalloween_Merasmus2012, boss_level_),
  PROTOBUF_FIELD_OFFSET(::CMsgHalloween_Merasmus2012, spawned_health_),
  PROTOBUF_FIELD_OFFSET(::CMsgHalloween_Merasmus2012, remaining_health_),
  PROTOBUF_FIELD_OFFSET(::CMsgHalloween_Merasmus2012, life_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgHalloween_Merasmus2012, bomb_kills_),
  PROTOBUF_FIELD_OFFSET(::CMsgHalloween_Merasmus2012, staff_kills_),
  PROTOBUF_FIELD_OFFSET(::CMsgHalloween_Merasmus2012, pvp_kills_),
  PROTOBUF_FIELD_OFFSET(::CMsgHalloween_Merasmus2012, prophunt_time1_),
  PROTOBUF_FIELD_OFFSET(::CMsgHalloween_Merasmus2012, prophunt_time2_),
  PROTOBUF_FIELD_OFFSET(::CMsgHalloween_Merasmus2012, dmg_scout_),
  PROTOBUF_FIELD_OFFSET(::CMsgHalloween_Merasmus2012, dmg_sniper_),
  PROTOBUF_FIELD_OFFSET(::CMsgHalloween_Merasmus2012, dmg_soldier_),
  PROTOBUF_FIELD_OFFSET(::CMsgHalloween_Merasmus2012, dmg_demo_),
  PROTOBUF_FIELD_OFFSET(::CMsgHalloween_Merasmus2012, dmg_medic_),
  PROTOBUF_FIELD_OFFSET(::CMsgHalloween_Merasmus2012, dmg_heavy_),
  PROTOBUF_FIELD_OFFSET(::CMsgHalloween_Merasmus2012, dmg_pyro_),
  PROTOBUF_FIELD_OFFSET(::CMsgHalloween_Merasmus2012, dmg_spy_),
  PROTOBUF_FIELD_OFFSET(::CMsgHalloween_Merasmus2012, dmg_engineer_),
  PROTOBUF_FIELD_OFFSET(::CMsgHalloween_Merasmus2012, scout_count_),
  PROTOBUF_FIELD_OFFSET(::CMsgHalloween_Merasmus2012, sniper_count_),
  PROTOBUF_FIELD_OFFSET(::CMsgHalloween_Merasmus2012, solider_count_),
  PROTOBUF_FIELD_OFFSET(::CMsgHalloween_Merasmus2012, demo_count_),
  PROTOBUF_FIELD_OFFSET(::CMsgHalloween_Merasmus2012, medic_count_),
  PROTOBUF_FIELD_OFFSET(::CMsgHalloween_Merasmus2012, heavy_count_),
  PROTOBUF_FIELD_OFFSET(::CMsgHalloween_Merasmus2012, pyro_count_),
  PROTOBUF_FIELD_OFFSET(::CMsgHalloween_Merasmus2012, spy_count_),
  PROTOBUF_FIELD_OFFSET(::CMsgHalloween_Merasmus2012, engineer_count_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  PROTOBUF_FIELD_OFFSET(::CMsgUpdateHalloweenMerasmusLootLevel_Player, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgUpdateHalloweenMerasmusLootLevel_Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgUpdateHalloweenMerasmusLootLevel_Player, steam_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgUpdateHalloweenMerasmusLootLevel, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgUpdateHalloweenMerasmusLootLevel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgUpdateHalloweenMerasmusLootLevel, players_),
  PROTOBUF_FIELD_OFFSET(::CMsgUpdateHalloweenMerasmusLootLevel, merasmus_level_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::CAttribute_String, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CAttribute_String, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CAttribute_String, value_),
  0,
  PROTOBUF_FIELD_OFFSET(::CAttribute_DynamicRecipeComponent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CAttribute_DynamicRecipeComponent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CAttribute_DynamicRecipeComponent, def_index_),
  PROTOBUF_FIELD_OFFSET(::CAttribute_DynamicRecipeComponent, item_quality_),
  PROTOBUF_FIELD_OFFSET(::CAttribute_DynamicRecipeComponent, component_flags_),
  PROTOBUF_FIELD_OFFSET(::CAttribute_DynamicRecipeComponent, attributes_string_),
  PROTOBUF_FIELD_OFFSET(::CAttribute_DynamicRecipeComponent, num_required_),
  PROTOBUF_FIELD_OFFSET(::CAttribute_DynamicRecipeComponent, num_fulfilled_),
  1,
  2,
  3,
  0,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT, def_index_),
  PROTOBUF_FIELD_OFFSET(::CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT, item_def_),
  PROTOBUF_FIELD_OFFSET(::CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT, item_quality_),
  PROTOBUF_FIELD_OFFSET(::CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT, component_flags_),
  PROTOBUF_FIELD_OFFSET(::CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT, item_flags_),
  PROTOBUF_FIELD_OFFSET(::CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT, attributes_string_),
  PROTOBUF_FIELD_OFFSET(::CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT, num_required_),
  PROTOBUF_FIELD_OFFSET(::CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT, item_count_),
  PROTOBUF_FIELD_OFFSET(::CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT, num_fulfilled_),
  PROTOBUF_FIELD_OFFSET(::CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT, items_fulfilled_),
  1,
  2,
  3,
  4,
  5,
  0,
  6,
  7,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::CAttribute_ItemSlotCriteria, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CAttribute_ItemSlotCriteria, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CAttribute_ItemSlotCriteria, tags_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgSetItemSlotAttribute, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSetItemSlotAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSetItemSlotAttribute, item_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSetItemSlotAttribute, slot_item_original_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSetItemSlotAttribute, slot_index_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CSOWarData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSOWarData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSOWarData, account_id_),
  PROTOBUF_FIELD_OFFSET(::CSOWarData, war_id_),
  PROTOBUF_FIELD_OFFSET(::CSOWarData, affiliation_),
  PROTOBUF_FIELD_OFFSET(::CSOWarData, points_scored_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CGCMsgGC_War_IndividualUpdate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgGC_War_IndividualUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGCMsgGC_War_IndividualUpdate, steam_id_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgGC_War_IndividualUpdate, war_id_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgGC_War_IndividualUpdate, score_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CGCMsgGC_War_JoinWar, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgGC_War_JoinWar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGCMsgGC_War_JoinWar, affiliation_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgGC_War_JoinWar, war_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CGCMsgGC_War_RequestGlobalStats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgGC_War_RequestGlobalStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGCMsgGC_War_RequestGlobalStats, war_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CGCMsgGC_War_GlobalStatsResponse_SideScore, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgGC_War_GlobalStatsResponse_SideScore, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGCMsgGC_War_GlobalStatsResponse_SideScore, side_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgGC_War_GlobalStatsResponse_SideScore, score_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CGCMsgGC_War_GlobalStatsResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgGC_War_GlobalStatsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGCMsgGC_War_GlobalStatsResponse, side_scores_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgGC_War_GlobalStatsResponse, war_id_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate, score_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate, type_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate, score_id_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate, score_check_),
  1,
  2,
  0,
  3,
  PROTOBUF_FIELD_OFFSET(::CAttribute_WorldItemPlacement, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CAttribute_WorldItemPlacement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CAttribute_WorldItemPlacement, original_item_id_),
  PROTOBUF_FIELD_OFFSET(::CAttribute_WorldItemPlacement, pos_x_),
  PROTOBUF_FIELD_OFFSET(::CAttribute_WorldItemPlacement, pos_y_),
  PROTOBUF_FIELD_OFFSET(::CAttribute_WorldItemPlacement, pos_z_),
  PROTOBUF_FIELD_OFFSET(::CAttribute_WorldItemPlacement, ang_x_),
  PROTOBUF_FIELD_OFFSET(::CAttribute_WorldItemPlacement, ang_y_),
  PROTOBUF_FIELD_OFFSET(::CAttribute_WorldItemPlacement, ang_z_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::CGCMsg_WorldItemPlacement_Update, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGCMsg_WorldItemPlacement_Update, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGCMsg_WorldItemPlacement_Update, original_item_id_),
  PROTOBUF_FIELD_OFFSET(::CGCMsg_WorldItemPlacement_Update, pos_x_),
  PROTOBUF_FIELD_OFFSET(::CGCMsg_WorldItemPlacement_Update, pos_y_),
  PROTOBUF_FIELD_OFFSET(::CGCMsg_WorldItemPlacement_Update, pos_z_),
  PROTOBUF_FIELD_OFFSET(::CGCMsg_WorldItemPlacement_Update, ang_x_),
  PROTOBUF_FIELD_OFFSET(::CGCMsg_WorldItemPlacement_Update, ang_y_),
  PROTOBUF_FIELD_OFFSET(::CGCMsg_WorldItemPlacement_Update, ang_z_),
  PROTOBUF_FIELD_OFFSET(::CGCMsg_WorldItemPlacement_Update, force_remove_all_),
  PROTOBUF_FIELD_OFFSET(::CGCMsg_WorldItemPlacement_Update, attrib_name_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgAcknowledgeXP, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgAcknowledgeXP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgAcknowledgeXP, match_group_),
  PROTOBUF_FIELD_OFFSET(::CMsgAcknowledgeXP, predicted_experience_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgTFXPSource, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgTFXPSource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgTFXPSource, type_),
  PROTOBUF_FIELD_OFFSET(::CMsgTFXPSource, amount_),
  PROTOBUF_FIELD_OFFSET(::CMsgTFXPSource, match_group_),
  PROTOBUF_FIELD_OFFSET(::CMsgTFXPSource, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgTFXPSource, match_id_),
  0,
  1,
  2,
  3,
  4,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgTFXPSourceBreakdown, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgTFXPSourceBreakdown, sources_),
  PROTOBUF_FIELD_OFFSET(::CMsgTFClientInit, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgTFClientInit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgTFClientInit, client_version_),
  PROTOBUF_FIELD_OFFSET(::CMsgTFClientInit, language_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgGCNotification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCNotification, notification_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCNotification, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCNotification, expiration_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCNotification, type_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCNotification, notification_string_),
  1,
  2,
  3,
  4,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGCNotificationQueue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCNotificationQueue, notifications_),
  PROTOBUF_FIELD_OFFSET(::CMsgNotificationAcknowledge, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgNotificationAcknowledge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgNotificationAcknowledge, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgNotificationAcknowledge, notification_id_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgNotificationAcknowledgeReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGC_Match_Result_Player, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_Match_Result_Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGC_Match_Result_Player, steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_Match_Result_Player, original_party_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_Match_Result_Player, team_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_Match_Result_Player, score_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_Match_Result_Player, ping_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_Match_Result_Player, flags_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_Match_Result_Player, rank_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_Match_Result_Player, classes_played_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_Match_Result_Player, kills_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_Match_Result_Player, deaths_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_Match_Result_Player, damage_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_Match_Result_Player, healing_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_Match_Result_Player, support_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_Match_Result_Player, score_medal_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_Match_Result_Player, kills_medal_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_Match_Result_Player, damage_medal_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_Match_Result_Player, healing_medal_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_Match_Result_Player, support_medal_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_Match_Result_Player, xp_breakdown_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_Match_Result_Player, leave_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_Match_Result_Player, leave_reason_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_Match_Result_Player, connect_time_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  ~0u,
  18,
  19,
  20,
  PROTOBUF_FIELD_OFFSET(::CMsgGC_Match_Result, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_Match_Result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGC_Match_Result, match_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_Match_Result, match_group_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_Match_Result, status_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_Match_Result, duration_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_Match_Result, red_score_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_Match_Result, blue_score_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_Match_Result, winning_team_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_Match_Result, map_index_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_Match_Result, game_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_Match_Result, players_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_Match_Result, win_reason_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_Match_Result, flags_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_Match_Result, bots_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  ~0u,
  9,
  10,
  11,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGC_Match_ResultResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CEconItemPreviewDataBlock, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CEconItemPreviewDataBlock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CEconItemPreviewDataBlock, econitem_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGC_Client2GCEconPreviewDataBlockRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_Client2GCEconPreviewDataBlockRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGC_Client2GCEconPreviewDataBlockRequest, param_s_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_Client2GCEconPreviewDataBlockRequest, param_a_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_Client2GCEconPreviewDataBlockRequest, param_d_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_Client2GCEconPreviewDataBlockRequest, param_m_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgGC_Client2GCEconPreviewDataBlockResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_Client2GCEconPreviewDataBlockResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGC_Client2GCEconPreviewDataBlockResponse, iteminfo_),
  0,
  PROTOBUF_FIELD_OFFSET(::CSOTFLadderPlayerStats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSOTFLadderPlayerStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSOTFLadderPlayerStats, account_id_),
  PROTOBUF_FIELD_OFFSET(::CSOTFLadderPlayerStats, match_group_),
  PROTOBUF_FIELD_OFFSET(::CSOTFLadderPlayerStats, season_id_),
  PROTOBUF_FIELD_OFFSET(::CSOTFLadderPlayerStats, games_),
  PROTOBUF_FIELD_OFFSET(::CSOTFLadderPlayerStats, score_),
  PROTOBUF_FIELD_OFFSET(::CSOTFLadderPlayerStats, kills_),
  PROTOBUF_FIELD_OFFSET(::CSOTFLadderPlayerStats, deaths_),
  PROTOBUF_FIELD_OFFSET(::CSOTFLadderPlayerStats, damage_),
  PROTOBUF_FIELD_OFFSET(::CSOTFLadderPlayerStats, healing_),
  PROTOBUF_FIELD_OFFSET(::CSOTFLadderPlayerStats, support_),
  PROTOBUF_FIELD_OFFSET(::CSOTFLadderPlayerStats, score_bronze_),
  PROTOBUF_FIELD_OFFSET(::CSOTFLadderPlayerStats, score_silver_),
  PROTOBUF_FIELD_OFFSET(::CSOTFLadderPlayerStats, score_gold_),
  PROTOBUF_FIELD_OFFSET(::CSOTFLadderPlayerStats, kills_bronze_),
  PROTOBUF_FIELD_OFFSET(::CSOTFLadderPlayerStats, kills_silver_),
  PROTOBUF_FIELD_OFFSET(::CSOTFLadderPlayerStats, kills_gold_),
  PROTOBUF_FIELD_OFFSET(::CSOTFLadderPlayerStats, damage_bronze_),
  PROTOBUF_FIELD_OFFSET(::CSOTFLadderPlayerStats, damage_silver_),
  PROTOBUF_FIELD_OFFSET(::CSOTFLadderPlayerStats, damage_gold_),
  PROTOBUF_FIELD_OFFSET(::CSOTFLadderPlayerStats, healing_bronze_),
  PROTOBUF_FIELD_OFFSET(::CSOTFLadderPlayerStats, healing_silver_),
  PROTOBUF_FIELD_OFFSET(::CSOTFLadderPlayerStats, healing_gold_),
  PROTOBUF_FIELD_OFFSET(::CSOTFLadderPlayerStats, support_bronze_),
  PROTOBUF_FIELD_OFFSET(::CSOTFLadderPlayerStats, support_silver_),
  PROTOBUF_FIELD_OFFSET(::CSOTFLadderPlayerStats, support_gold_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  21,
  22,
  23,
  24,
  20,
  PROTOBUF_FIELD_OFFSET(::CSOTFRatingData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSOTFRatingData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSOTFRatingData, account_id_),
  PROTOBUF_FIELD_OFFSET(::CSOTFRatingData, rating_type_),
  PROTOBUF_FIELD_OFFSET(::CSOTFRatingData, rating_primary_),
  PROTOBUF_FIELD_OFFSET(::CSOTFRatingData, rating_secondary_),
  PROTOBUF_FIELD_OFFSET(::CSOTFRatingData, rating_tertiary_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgGC_TFVoteKickPlayerRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_TFVoteKickPlayerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGC_TFVoteKickPlayerRequest, target_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_TFVoteKickPlayerRequest, voter_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_TFVoteKickPlayerRequest, reason_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_TFVoteKickPlayerRequest, match_id_),
  0,
  1,
  3,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgGC_VoteKickPlayerRequestResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_VoteKickPlayerRequestResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGC_VoteKickPlayerRequestResponse, allowed_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_VoteKickPlayerRequestResponse, voter_inhibit_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_VoteKickPlayerRequestResponse, target_inhibit_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGC_DailyCompetitiveStatsRollup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry, rank_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry, records_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry, avg_score_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry, stdev_score_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry, avg_kills_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry, stdev_kills_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry, avg_damage_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry, stdev_damage_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry, avg_healing_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry, stdev_healing_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry, avg_support_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry, stdev_support_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGC_DailyCompetitiveStatsRollup_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGC_DailyCompetitiveStatsRollup_Response, rankdata_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_ReportPlayer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_ReportPlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGC_ReportPlayer, account_id_target_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_ReportPlayer, reason_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CSOTFMatchResultPlayerStats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSOTFMatchResultPlayerStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSOTFMatchResultPlayerStats, match_id_),
  PROTOBUF_FIELD_OFFSET(::CSOTFMatchResultPlayerStats, account_id_),
  PROTOBUF_FIELD_OFFSET(::CSOTFMatchResultPlayerStats, match_group_),
  PROTOBUF_FIELD_OFFSET(::CSOTFMatchResultPlayerStats, endtime_),
  PROTOBUF_FIELD_OFFSET(::CSOTFMatchResultPlayerStats, season_id_),
  PROTOBUF_FIELD_OFFSET(::CSOTFMatchResultPlayerStats, status_),
  PROTOBUF_FIELD_OFFSET(::CSOTFMatchResultPlayerStats, original_party_id_),
  PROTOBUF_FIELD_OFFSET(::CSOTFMatchResultPlayerStats, team_),
  PROTOBUF_FIELD_OFFSET(::CSOTFMatchResultPlayerStats, score_),
  PROTOBUF_FIELD_OFFSET(::CSOTFMatchResultPlayerStats, ping_),
  PROTOBUF_FIELD_OFFSET(::CSOTFMatchResultPlayerStats, flags_),
  PROTOBUF_FIELD_OFFSET(::CSOTFMatchResultPlayerStats, display_rating_),
  PROTOBUF_FIELD_OFFSET(::CSOTFMatchResultPlayerStats, display_rating_change_),
  PROTOBUF_FIELD_OFFSET(::CSOTFMatchResultPlayerStats, rank_),
  PROTOBUF_FIELD_OFFSET(::CSOTFMatchResultPlayerStats, classes_played_),
  PROTOBUF_FIELD_OFFSET(::CSOTFMatchResultPlayerStats, kills_),
  PROTOBUF_FIELD_OFFSET(::CSOTFMatchResultPlayerStats, deaths_),
  PROTOBUF_FIELD_OFFSET(::CSOTFMatchResultPlayerStats, damage_),
  PROTOBUF_FIELD_OFFSET(::CSOTFMatchResultPlayerStats, healing_),
  PROTOBUF_FIELD_OFFSET(::CSOTFMatchResultPlayerStats, support_),
  PROTOBUF_FIELD_OFFSET(::CSOTFMatchResultPlayerStats, score_medal_),
  PROTOBUF_FIELD_OFFSET(::CSOTFMatchResultPlayerStats, kills_medal_),
  PROTOBUF_FIELD_OFFSET(::CSOTFMatchResultPlayerStats, damage_medal_),
  PROTOBUF_FIELD_OFFSET(::CSOTFMatchResultPlayerStats, healing_medal_),
  PROTOBUF_FIELD_OFFSET(::CSOTFMatchResultPlayerStats, support_medal_),
  PROTOBUF_FIELD_OFFSET(::CSOTFMatchResultPlayerStats, map_index_),
  PROTOBUF_FIELD_OFFSET(::CSOTFMatchResultPlayerStats, winning_team_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGCRequestMatchMakerStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCDataCenterPopulation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCDataCenterPopulation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCDataCenterPopulation, name_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCDataCenterPopulation, health_ratio_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGCMatchGroupDataCenterPopulation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCMatchGroupDataCenterPopulation, data_center_population_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGCMatchMakerStatsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCMatchMakerStatsResponse, map_count_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCMatchMakerStatsResponse, matchgroup_data_center_population_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCMatchHistoryLoad, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCMatchHistoryLoad, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCMatchHistoryLoad, match_group_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCDataCenterPing_Update_PingEntry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCDataCenterPing_Update_PingEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCDataCenterPing_Update_PingEntry, name_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCDataCenterPing_Update_PingEntry, ping_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCDataCenterPing_Update_PingEntry, ping_status_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGCDataCenterPing_Update, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCDataCenterPing_Update, pingdata_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_KickPlayerFromLobby, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_KickPlayerFromLobby, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGC_KickPlayerFromLobby, targetid_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCSurveyRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCSurveyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCSurveyRequest, question_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCSurveyRequest, match_id_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCSurveyResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCSurveyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCSurveyResponse, question_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCSurveyResponse, match_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCSurveyResponse, response_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::CSOQuestMapNode, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSOQuestMapNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSOQuestMapNode, account_id_),
  PROTOBUF_FIELD_OFFSET(::CSOQuestMapNode, defindex_),
  PROTOBUF_FIELD_OFFSET(::CSOQuestMapNode, node_id_),
  PROTOBUF_FIELD_OFFSET(::CSOQuestMapNode, star_0_earned_),
  PROTOBUF_FIELD_OFFSET(::CSOQuestMapNode, star_1_earned_),
  PROTOBUF_FIELD_OFFSET(::CSOQuestMapNode, star_2_earned_),
  PROTOBUF_FIELD_OFFSET(::CSOQuestMapNode, loot_claimed_),
  PROTOBUF_FIELD_OFFSET(::CSOQuestMapNode, selected_quest_def_),
  PROTOBUF_FIELD_OFFSET(::CSOQuestMapNode, map_cycle_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::CSOQuest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSOQuest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSOQuest, account_id_),
  PROTOBUF_FIELD_OFFSET(::CSOQuest, quest_id_),
  PROTOBUF_FIELD_OFFSET(::CSOQuest, defindex_),
  PROTOBUF_FIELD_OFFSET(::CSOQuest, active_),
  PROTOBUF_FIELD_OFFSET(::CSOQuest, points_0_),
  PROTOBUF_FIELD_OFFSET(::CSOQuest, points_1_),
  PROTOBUF_FIELD_OFFSET(::CSOQuest, points_2_),
  PROTOBUF_FIELD_OFFSET(::CSOQuest, quest_map_node_source_id_),
  PROTOBUF_FIELD_OFFSET(::CSOQuest, map_cycle_),
  1,
  0,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::CSOQuestMapRewardPurchase, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSOQuestMapRewardPurchase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSOQuestMapRewardPurchase, account_id_),
  PROTOBUF_FIELD_OFFSET(::CSOQuestMapRewardPurchase, defindex_),
  PROTOBUF_FIELD_OFFSET(::CSOQuestMapRewardPurchase, count_),
  PROTOBUF_FIELD_OFFSET(::CSOQuestMapRewardPurchase, map_cycle_),
  PROTOBUF_FIELD_OFFSET(::CSOQuestMapRewardPurchase, purchase_id_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgGCQuestIdentify, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCQuestIdentify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCQuestIdentify, quest_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCQuestDevGive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCQuestDevGive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCQuestDevGive, quest_def_index_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCQuestNodeTurnIn, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCQuestNodeTurnIn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCQuestNodeTurnIn, node_defindex_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCQuestMapUnlockNode, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCQuestMapUnlockNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCQuestMapUnlockNode, node_defindex_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCQuestMapUnlockNode, quest_defindex_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgGCNewMatchForLobbyRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCNewMatchForLobbyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCNewMatchForLobbyRequest, current_match_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCNewMatchForLobbyRequest, next_map_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCNewMatchForLobbyRequest, lobby_id_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgGCNewMatchForLobbyResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCNewMatchForLobbyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCNewMatchForLobbyResponse, success_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCChangeMatchPlayerTeamsRequest_Member, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCChangeMatchPlayerTeamsRequest_Member, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCChangeMatchPlayerTeamsRequest_Member, member_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCChangeMatchPlayerTeamsRequest_Member, new_team_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgGCChangeMatchPlayerTeamsRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCChangeMatchPlayerTeamsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCChangeMatchPlayerTeamsRequest, match_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCChangeMatchPlayerTeamsRequest, lobby_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCChangeMatchPlayerTeamsRequest, member_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgGCChangeMatchPlayerTeamsResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCChangeMatchPlayerTeamsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCChangeMatchPlayerTeamsResponse, success_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCQuestComplete_Debug, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCQuestComplete_Debug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCQuestComplete_Debug, quest_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCQuestComplete_Debug, points_type_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgGCQuestMap_Debug, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCQuestMap_Debug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCQuestMap_Debug, reset_operation_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCQuestMap_Debug, give_credit_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCQuestMap_Debug, unlock_node_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCQuestMapPurchaseReward, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCQuestMapPurchaseReward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCQuestMapPurchaseReward, store_item_defindex_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCQuestResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCQuestResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCQuestResponse, success_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCSetDisablePartyQuestProgress, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCSetDisablePartyQuestProgress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCSetDisablePartyQuestProgress, state_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgQuestProgressReport, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuestProgressReport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgQuestProgressReport, quest_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuestProgressReport, star_0_earned_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuestProgressReport, star_1_earned_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuestProgressReport, star_2_earned_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuestProgressReport, items_earned_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuestProgressReport, reward_credits_earned_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuestProgressReport, contract_completed_),
  0,
  1,
  2,
  3,
  ~0u,
  5,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgConsumePaintkit, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgConsumePaintkit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgConsumePaintkit, source_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgConsumePaintkit, target_defindex_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgPainkitDevGrant, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgPainkitDevGrant, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgPainkitDevGrant, paintkit_defindex_),
  PROTOBUF_FIELD_OFFSET(::CMsgPainkitDevGrant, wear_),
  PROTOBUF_FIELD_OFFSET(::CMsgPainkitDevGrant, item_defindex_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::GCQuestStrangeEvent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GCQuestStrangeEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GCQuestStrangeEvent, owner_account_id_),
  PROTOBUF_FIELD_OFFSET(::GCQuestStrangeEvent, scorer_account_id_),
  PROTOBUF_FIELD_OFFSET(::GCQuestStrangeEvent, quest_id_),
  PROTOBUF_FIELD_OFFSET(::GCQuestStrangeEvent, strange_event_id_),
  PROTOBUF_FIELD_OFFSET(::GCQuestStrangeEvent, score_),
  0,
  1,
  2,
  3,
  4,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::CMsgTFGoldenWrenchBroadcast)},
  { 11, 18, sizeof(::CMsgTFSaxxyBroadcast)},
  { 20, 28, sizeof(::CMsgGCTFSpecificItemBroadcast)},
  { 31, 41, sizeof(::CMsgTFWorldStatus)},
  { 46, 57, sizeof(::CSOTFDuelSummary)},
  { 63, 71, sizeof(::CSOTFMapContribution)},
  { 74, 80, sizeof(::CMsgTFFreeTrialChooseMostHelpfulFriend)},
  { 81, -1, sizeof(::CMsgTFRequestTF2Friends)},
  { 87, -1, sizeof(::CMsgTFRequestTF2FriendsResponse)},
  { 93, 99, sizeof(::CSOTFPlayerInfo)},
  { 100, 106, sizeof(::CMsgTFThankedBySomeone)},
  { 107, -1, sizeof(::CMsgTFThankedSomeone)},
  { 112, -1, sizeof(::CMsgTFFreeTrialConvertedToPremium)},
  { 117, 124, sizeof(::CMsgSaxxyAwarded)},
  { 126, 133, sizeof(::CMsgReplaySubmitContestEntry)},
  { 135, 141, sizeof(::CMsgReplaySubmitContestEntryResponse)},
  { 142, 151, sizeof(::CReplayCachedContestData)},
  { 155, -1, sizeof(::CMsgTFCoaching_AddToCoaches)},
  { 160, -1, sizeof(::CMsgTFCoaching_RemoveFromCoaches)},
  { 165, 171, sizeof(::CMsgTFCoaching_FindCoach)},
  { 172, 180, sizeof(::CMsgTFCoaching_FindCoachResponse)},
  { 183, 190, sizeof(::CMsgTFCoaching_AskCoach)},
  { 192, 198, sizeof(::CMsgTFCoaching_AskCoachResponse)},
  { 199, 208, sizeof(::CMsgTFCoaching_CoachJoinGame)},
  { 212, 219, sizeof(::CMsgTFCoaching_CoachJoining)},
  { 221, 227, sizeof(::CMsgTFCoaching_CoachJoined)},
  { 228, 234, sizeof(::CMsgTFCoaching_LikeCurrentCoach)},
  { 235, 241, sizeof(::CMsgTFCoaching_RemoveCurrentCoach)},
  { 242, 253, sizeof(::CMsgTFQuickplay_ScoreServers_ServerInfo)},
  { 259, -1, sizeof(::CMsgTFQuickplay_ScoreServers)},
  { 265, 275, sizeof(::CMsgTFQuickplay_ScoreServersResponse_ServerInfo)},
  { 280, -1, sizeof(::CMsgTFQuickplay_ScoreServersResponse)},
  { 286, 292, sizeof(::CMsgTFQuickplay_PlayerJoining)},
  { 293, 300, sizeof(::CMsgGC_GameServer_LevelInfo)},
  { 302, 308, sizeof(::CMsgGC_GameServer_AuthChallenge)},
  { 309, 319, sizeof(::CMsgGC_GameServer_AuthResult)},
  { 324, 331, sizeof(::CMsgGC_GameServer_AuthChallengeResponse)},
  { 333, 339, sizeof(::CMsgGC_GameServer_CreateIdentity)},
  { 340, 349, sizeof(::CMsgGC_GameServer_CreateIdentityResponse)},
  { 353, 359, sizeof(::CMsgGC_GameServer_List)},
  { 360, 369, sizeof(::CMsgGC_GameServer_ListResponse_GameServerIdentity)},
  { 373, -1, sizeof(::CMsgGC_GameServer_ListResponse)},
  { 379, 385, sizeof(::CMsgGC_GameServer_ResetIdentity)},
  { 386, 394, sizeof(::CMsgGC_GameServer_ResetIdentityResponse)},
  { 397, -1, sizeof(::CMsgGC_GameServer_AckPolicy)},
  { 402, 409, sizeof(::CMsgGC_GameServer_AckPolicyResponse)},
  { 411, 417, sizeof(::CMsgGC_Client_UseServerModificationItem)},
  { 418, 424, sizeof(::CMsgGC_Client_UseServerModificationItem_Response)},
  { 425, 431, sizeof(::CMsgGC_GameServer_UseServerModificationItem)},
  { 432, 439, sizeof(::CMsgGC_GameServer_UseServerModificationItem_Response)},
  { 441, 447, sizeof(::CMsgGC_GameServer_ServerModificationItemExpired)},
  { 448, 455, sizeof(::CMsgGC_GameServer_ServerModificationItem)},
  { 457, 466, sizeof(::CMsgGC_Halloween_ReservedItem)},
  { 470, 478, sizeof(::CMsgGC_Halloween_GrantItem)},
  { 481, 487, sizeof(::CMsgGC_Halloween_GrantItemResponse)},
  { 488, -1, sizeof(::CMsgGC_Halloween_ItemClaimed)},
  { 493, 500, sizeof(::CMsgGC_PickupItemEligibility_Query)},
  { 502, 510, sizeof(::CMsgGC_PickupItemEligibility_QueryResponse)},
  { 513, 523, sizeof(::CSOTFPartyMember_Activity)},
  { 528, 545, sizeof(::CSOTFPartyMember)},
  { 557, 565, sizeof(::TFPendingPartyMember)},
  { 568, 575, sizeof(::TFSyncedMMUIState)},
  { 577, 588, sizeof(::CTFGroupMatchCriteriaProto)},
  { 594, -1, sizeof(::CTFCasualMatchCriteria)},
  { 600, 606, sizeof(::CTFPerPlayerMatchCriteriaProto)},
  { 607, 616, sizeof(::CTFPartyOptions)},
  { 620, 627, sizeof(::CMsgPartySetOptions)},
  { 629, -1, sizeof(::CMsgPartySetOptionsResponse)},
  { 634, 642, sizeof(::CMsgPartyQueueForMatch)},
  { 645, -1, sizeof(::CMsgPartyQueueForMatchResponse)},
  { 650, 657, sizeof(::CMsgPartyQueueForStandby)},
  { 659, -1, sizeof(::CMsgPartyQueueForStandbyResponse)},
  { 664, 671, sizeof(::CMsgPartyRemoveFromQueue)},
  { 673, -1, sizeof(::CMsgPartyRemoveFromQueueResponse)},
  { 678, 684, sizeof(::CMsgPartyRemoveFromStandbyQueue)},
  { 685, -1, sizeof(::CMsgPartyRemoveFromStandbyQueueResponse)},
  { 690, 698, sizeof(::CMsgPartyInvitePlayer)},
  { 701, 710, sizeof(::CMsgPartyRequestJoinPlayer)},
  { 714, 721, sizeof(::CMsgPartyClearPendingPlayer)},
  { 723, -1, sizeof(::CMsgPartyClearPendingPlayerResponse)},
  { 728, 734, sizeof(::CMsgPartyClearOtherPartyRequest)},
  { 735, -1, sizeof(::CMsgPartyClearOtherPartyRequestResponse)},
  { 740, 747, sizeof(::CMsgPartyPromoteToLeader)},
  { 749, 756, sizeof(::CMsgPartyKickMember)},
  { 758, 765, sizeof(::CMsgPartySendChat)},
  { 767, 775, sizeof(::CMsgPartyChatMsg)},
  { 778, 785, sizeof(::CSOTFParty_QueueEntry)},
  { 787, 806, sizeof(::CSOTFParty)},
  { 820, 826, sizeof(::CSOTFPartyInvite_PartyMember)},
  { 827, 836, sizeof(::CSOTFPartyInvite)},
  { 840, 858, sizeof(::CTFLobbyPlayerProto)},
  { 871, 878, sizeof(::CTFLobbyInviteProto)},
  { 880, 905, sizeof(::CSOTFGameServerLobby)},
  { 925, 933, sizeof(::CMsgExitMatchmaking)},
  { 936, 944, sizeof(::CMsgAcceptLobbyInvite)},
  { 947, -1, sizeof(::CMsgAcceptLobbyInviteReply)},
  { 952, -1, sizeof(::CMsgMatchmakingSearchCountRequest)},
  { 957, -1, sizeof(::CMsgMatchmakingSearchCountResponse)},
  { 963, -1, sizeof(::CMsgKickedFromMatchmakingQueue)},
  { 968, 975, sizeof(::CMsgGameServerMatchmakingStatus_Player)},
  { 977, 1003, sizeof(::CMsgGameServerMatchmakingStatus)},
  { 1024, 1045, sizeof(::CMsgMatchmakingProgress)},
  { 1061, 1069, sizeof(::CMsgMvMVictoryInfo_Item)},
  { 1072, 1086, sizeof(::CMsgMvMVictoryInfo_Player)},
  { 1095, 1103, sizeof(::CMsgMvMVictoryInfo)},
  { 1106, 1114, sizeof(::CGCMsgTFHelloResponse)},
  { 1117, 1127, sizeof(::CGCMsgTFSync)},
  { 1132, 1140, sizeof(::CGCMsgTFSyncEx)},
  { 1143, 1150, sizeof(::CMsgMvMVictory_Player)},
  { 1152, 1163, sizeof(::CMsgMvMVictory)},
  { 1169, -1, sizeof(::CMsgMvMMannUpVictoryReply)},
  { 1174, 1181, sizeof(::CMsgGameServerKickingLobby)},
  { 1183, -1, sizeof(::CMsgGameServerKickingLobbyResponse)},
  { 1188, 1194, sizeof(::CMsgLeaveGameAndPrepareToJoinParty)},
  { 1195, 1206, sizeof(::CMsgPlayerLeftMatch)},
  { 1212, -1, sizeof(::CMsgPlayerLeftMatchResponse)},
  { 1217, 1224, sizeof(::CMsgProcessMatchVoteKick_Vote)},
  { 1226, 1237, sizeof(::CMsgProcessMatchVoteKick)},
  { 1243, 1249, sizeof(::CMsgProcessMatchVoteKickResponse)},
  { 1250, -1, sizeof(::CMsgPlayerVoteKickedAfterLeavingMatchResponse)},
  { 1255, 1267, sizeof(::CMsgHalloween_ServerBossEvent)},
  { 1274, 1309, sizeof(::CMsgHalloween_Merasmus2012)},
  { 1339, 1345, sizeof(::CMsgUpdateHalloweenMerasmusLootLevel_Player)},
  { 1346, 1353, sizeof(::CMsgUpdateHalloweenMerasmusLootLevel)},
  { 1355, 1361, sizeof(::CAttribute_String)},
  { 1362, 1373, sizeof(::CAttribute_DynamicRecipeComponent)},
  { 1379, 1394, sizeof(::CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT)},
  { 1404, 1410, sizeof(::CAttribute_ItemSlotCriteria)},
  { 1411, 1419, sizeof(::CMsgSetItemSlotAttribute)},
  { 1422, 1431, sizeof(::CSOWarData)},
  { 1435, 1443, sizeof(::CGCMsgGC_War_IndividualUpdate)},
  { 1446, 1453, sizeof(::CGCMsgGC_War_JoinWar)},
  { 1455, 1461, sizeof(::CGCMsgGC_War_RequestGlobalStats)},
  { 1462, 1469, sizeof(::CGCMsgGC_War_GlobalStatsResponse_SideScore)},
  { 1471, 1478, sizeof(::CGCMsgGC_War_GlobalStatsResponse)},
  { 1480, 1489, sizeof(::CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate)},
  { 1493, 1505, sizeof(::CAttribute_WorldItemPlacement)},
  { 1512, 1526, sizeof(::CGCMsg_WorldItemPlacement_Update)},
  { 1535, 1542, sizeof(::CMsgAcknowledgeXP)},
  { 1544, 1554, sizeof(::CMsgTFXPSource)},
  { 1559, -1, sizeof(::CMsgTFXPSourceBreakdown)},
  { 1565, 1572, sizeof(::CMsgTFClientInit)},
  { 1574, 1584, sizeof(::CMsgGCNotification)},
  { 1589, -1, sizeof(::CMsgGCNotificationQueue)},
  { 1595, 1602, sizeof(::CMsgNotificationAcknowledge)},
  { 1604, -1, sizeof(::CMsgNotificationAcknowledgeReply)},
  { 1609, 1636, sizeof(::CMsgGC_Match_Result_Player)},
  { 1658, 1676, sizeof(::CMsgGC_Match_Result)},
  { 1689, -1, sizeof(::CMsgGC_Match_ResultResponse)},
  { 1694, 1700, sizeof(::CEconItemPreviewDataBlock)},
  { 1701, 1710, sizeof(::CMsgGC_Client2GCEconPreviewDataBlockRequest)},
  { 1714, 1720, sizeof(::CMsgGC_Client2GCEconPreviewDataBlockResponse)},
  { 1721, 1751, sizeof(::CSOTFLadderPlayerStats)},
  { 1776, 1786, sizeof(::CSOTFRatingData)},
  { 1791, 1800, sizeof(::CMsgGC_TFVoteKickPlayerRequest)},
  { 1804, 1812, sizeof(::CMsgGC_VoteKickPlayerRequestResponse)},
  { 1815, -1, sizeof(::CMsgGC_DailyCompetitiveStatsRollup)},
  { 1820, 1837, sizeof(::CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry)},
  { 1849, -1, sizeof(::CMsgGC_DailyCompetitiveStatsRollup_Response)},
  { 1855, 1862, sizeof(::CMsgGC_ReportPlayer)},
  { 1864, 1896, sizeof(::CSOTFMatchResultPlayerStats)},
  { 1923, -1, sizeof(::CMsgGCRequestMatchMakerStats)},
  { 1928, 1935, sizeof(::CMsgGCDataCenterPopulation)},
  { 1937, -1, sizeof(::CMsgGCMatchGroupDataCenterPopulation)},
  { 1943, -1, sizeof(::CMsgGCMatchMakerStatsResponse)},
  { 1950, 1956, sizeof(::CMsgGCMatchHistoryLoad)},
  { 1957, 1965, sizeof(::CMsgGCDataCenterPing_Update_PingEntry)},
  { 1968, -1, sizeof(::CMsgGCDataCenterPing_Update)},
  { 1974, 1980, sizeof(::CMsgGC_KickPlayerFromLobby)},
  { 1981, 1988, sizeof(::CMsgGCSurveyRequest)},
  { 1990, 1998, sizeof(::CMsgGCSurveyResponse)},
  { 2001, 2015, sizeof(::CSOQuestMapNode)},
  { 2024, 2038, sizeof(::CSOQuest)},
  { 2047, 2057, sizeof(::CSOQuestMapRewardPurchase)},
  { 2062, 2068, sizeof(::CMsgGCQuestIdentify)},
  { 2069, 2075, sizeof(::CMsgGCQuestDevGive)},
  { 2076, 2082, sizeof(::CMsgGCQuestNodeTurnIn)},
  { 2083, 2090, sizeof(::CMsgGCQuestMapUnlockNode)},
  { 2092, 2100, sizeof(::CMsgGCNewMatchForLobbyRequest)},
  { 2103, 2109, sizeof(::CMsgGCNewMatchForLobbyResponse)},
  { 2110, 2117, sizeof(::CMsgGCChangeMatchPlayerTeamsRequest_Member)},
  { 2119, 2127, sizeof(::CMsgGCChangeMatchPlayerTeamsRequest)},
  { 2130, 2136, sizeof(::CMsgGCChangeMatchPlayerTeamsResponse)},
  { 2137, 2144, sizeof(::CMsgGCQuestComplete_Debug)},
  { 2146, 2154, sizeof(::CMsgGCQuestMap_Debug)},
  { 2157, 2163, sizeof(::CMsgGCQuestMapPurchaseReward)},
  { 2164, 2170, sizeof(::CMsgGCQuestResponse)},
  { 2171, 2177, sizeof(::CMsgGCSetDisablePartyQuestProgress)},
  { 2178, 2190, sizeof(::CMsgQuestProgressReport)},
  { 2197, 2204, sizeof(::CMsgConsumePaintkit)},
  { 2206, 2214, sizeof(::CMsgPainkitDevGrant)},
  { 2217, 2227, sizeof(::GCQuestStrangeEvent)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgTFGoldenWrenchBroadcast_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgTFSaxxyBroadcast_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCTFSpecificItemBroadcast_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgTFWorldStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSOTFDuelSummary_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSOTFMapContribution_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgTFFreeTrialChooseMostHelpfulFriend_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgTFRequestTF2Friends_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgTFRequestTF2FriendsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSOTFPlayerInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgTFThankedBySomeone_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgTFThankedSomeone_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgTFFreeTrialConvertedToPremium_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSaxxyAwarded_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgReplaySubmitContestEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgReplaySubmitContestEntryResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CReplayCachedContestData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgTFCoaching_AddToCoaches_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgTFCoaching_RemoveFromCoaches_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgTFCoaching_FindCoach_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgTFCoaching_FindCoachResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgTFCoaching_AskCoach_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgTFCoaching_AskCoachResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgTFCoaching_CoachJoinGame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgTFCoaching_CoachJoining_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgTFCoaching_CoachJoined_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgTFCoaching_LikeCurrentCoach_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgTFCoaching_RemoveCurrentCoach_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgTFQuickplay_ScoreServers_ServerInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgTFQuickplay_ScoreServers_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgTFQuickplay_ScoreServersResponse_ServerInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgTFQuickplay_ScoreServersResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgTFQuickplay_PlayerJoining_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGC_GameServer_LevelInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGC_GameServer_AuthChallenge_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGC_GameServer_AuthResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGC_GameServer_AuthChallengeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGC_GameServer_CreateIdentity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGC_GameServer_CreateIdentityResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGC_GameServer_List_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGC_GameServer_ListResponse_GameServerIdentity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGC_GameServer_ListResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGC_GameServer_ResetIdentity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGC_GameServer_ResetIdentityResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGC_GameServer_AckPolicy_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGC_GameServer_AckPolicyResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGC_Client_UseServerModificationItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGC_Client_UseServerModificationItem_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGC_GameServer_UseServerModificationItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGC_GameServer_UseServerModificationItem_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGC_GameServer_ServerModificationItemExpired_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGC_GameServer_ServerModificationItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGC_Halloween_ReservedItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGC_Halloween_GrantItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGC_Halloween_GrantItemResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGC_Halloween_ItemClaimed_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGC_PickupItemEligibility_Query_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGC_PickupItemEligibility_QueryResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSOTFPartyMember_Activity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSOTFPartyMember_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TFPendingPartyMember_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TFSyncedMMUIState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CTFGroupMatchCriteriaProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CTFCasualMatchCriteria_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CTFPerPlayerMatchCriteriaProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CTFPartyOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgPartySetOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgPartySetOptionsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgPartyQueueForMatch_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgPartyQueueForMatchResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgPartyQueueForStandby_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgPartyQueueForStandbyResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgPartyRemoveFromQueue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgPartyRemoveFromQueueResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgPartyRemoveFromStandbyQueue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgPartyRemoveFromStandbyQueueResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgPartyInvitePlayer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgPartyRequestJoinPlayer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgPartyClearPendingPlayer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgPartyClearPendingPlayerResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgPartyClearOtherPartyRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgPartyClearOtherPartyRequestResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgPartyPromoteToLeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgPartyKickMember_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgPartySendChat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgPartyChatMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSOTFParty_QueueEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSOTFParty_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSOTFPartyInvite_PartyMember_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSOTFPartyInvite_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CTFLobbyPlayerProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CTFLobbyInviteProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSOTFGameServerLobby_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgExitMatchmaking_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgAcceptLobbyInvite_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgAcceptLobbyInviteReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgMatchmakingSearchCountRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgMatchmakingSearchCountResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgKickedFromMatchmakingQueue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGameServerMatchmakingStatus_Player_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGameServerMatchmakingStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgMatchmakingProgress_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgMvMVictoryInfo_Item_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgMvMVictoryInfo_Player_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgMvMVictoryInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGCMsgTFHelloResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGCMsgTFSync_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGCMsgTFSyncEx_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgMvMVictory_Player_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgMvMVictory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgMvMMannUpVictoryReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGameServerKickingLobby_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGameServerKickingLobbyResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgLeaveGameAndPrepareToJoinParty_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgPlayerLeftMatch_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgPlayerLeftMatchResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgProcessMatchVoteKick_Vote_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgProcessMatchVoteKick_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgProcessMatchVoteKickResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgPlayerVoteKickedAfterLeavingMatchResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgHalloween_ServerBossEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgHalloween_Merasmus2012_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgUpdateHalloweenMerasmusLootLevel_Player_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgUpdateHalloweenMerasmusLootLevel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CAttribute_String_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CAttribute_DynamicRecipeComponent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CAttribute_ItemSlotCriteria_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSetItemSlotAttribute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSOWarData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGCMsgGC_War_IndividualUpdate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGCMsgGC_War_JoinWar_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGCMsgGC_War_RequestGlobalStats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGCMsgGC_War_GlobalStatsResponse_SideScore_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGCMsgGC_War_GlobalStatsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CAttribute_WorldItemPlacement_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGCMsg_WorldItemPlacement_Update_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgAcknowledgeXP_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgTFXPSource_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgTFXPSourceBreakdown_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgTFClientInit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCNotification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCNotificationQueue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgNotificationAcknowledge_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgNotificationAcknowledgeReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGC_Match_Result_Player_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGC_Match_Result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGC_Match_ResultResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CEconItemPreviewDataBlock_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGC_Client2GCEconPreviewDataBlockRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGC_Client2GCEconPreviewDataBlockResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSOTFLadderPlayerStats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSOTFRatingData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGC_TFVoteKickPlayerRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGC_VoteKickPlayerRequestResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGC_DailyCompetitiveStatsRollup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGC_DailyCompetitiveStatsRollup_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGC_ReportPlayer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSOTFMatchResultPlayerStats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCRequestMatchMakerStats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCDataCenterPopulation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCMatchGroupDataCenterPopulation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCMatchMakerStatsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCMatchHistoryLoad_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCDataCenterPing_Update_PingEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCDataCenterPing_Update_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGC_KickPlayerFromLobby_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCSurveyRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCSurveyResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSOQuestMapNode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSOQuest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSOQuestMapRewardPurchase_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCQuestIdentify_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCQuestDevGive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCQuestNodeTurnIn_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCQuestMapUnlockNode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCNewMatchForLobbyRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCNewMatchForLobbyResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCChangeMatchPlayerTeamsRequest_Member_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCChangeMatchPlayerTeamsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCChangeMatchPlayerTeamsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCQuestComplete_Debug_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCQuestMap_Debug_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCQuestMapPurchaseReward_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCQuestResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCSetDisablePartyQuestProgress_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgQuestProgressReport_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgConsumePaintkit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgPainkitDevGrant_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GCQuestStrangeEvent_default_instance_),
};

const char descriptor_table_protodef_tf_5fgcmessages_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023tf_gcmessages.proto\032\023steammessages.pro"
  "to\032\025base_gcmessages.proto\"X\n\033CMsgTFGolde"
  "nWrenchBroadcast\022\025\n\rwrench_number\030\001 \001(\005\022"
  "\017\n\007deleted\030\002 \001(\010\022\021\n\tuser_name\030\003 \001(\t\"B\n\024C"
  "MsgTFSaxxyBroadcast\022\027\n\017category_number\030\001"
  " \001(\005\022\021\n\tuser_name\030\002 \001(\t\"c\n\035CMsgGCTFSpeci"
  "ficItemBroadcast\022\026\n\016item_def_index\030\001 \001(\r"
  "\022\027\n\017was_destruction\030\002 \001(\010\022\021\n\tuser_name\030\003"
  " \001(\t\"\361\001\n\021CMsgTFWorldStatus\022,\n\035beta_stres"
  "s_test_event_active\030\001 \001(\010:\005false\022B\n\021even"
  "t_match_group\030\002 \001(\0162\016.ETFMatchGroup:\027k_e"
  "TFMatchGroup_Invalid\022\034\n\021event_expire_tim"
  "e\030\003 \001(\007:\0010\022\035\n\025active_client_version\030\004 \001("
  "\r\022-\n\025disabled_match_groups\030\005 \003(\0162\016.ETFMa"
  "tchGroup\"\251\001\n\020CSOTFDuelSummary\022\030\n\naccount"
  "_id\030\001 \001(\rB\004\200\246\035\001\022\021\n\tduel_wins\030\002 \001(\r\022\023\n\013du"
  "el_losses\030\003 \001(\r\022\034\n\024last_duel_account_id\030"
  "\004 \001(\r\022\033\n\023last_duel_timestamp\030\005 \001(\r\022\030\n\020la"
  "st_duel_status\030\006 \001(\r\"e\n\024CSOTFMapContribu"
  "tion\022\030\n\naccount_id\030\001 \001(\rB\004\200\246\035\001\022\027\n\tdef_in"
  "dex\030\002 \001(\rB\004\200\246\035\001\022\032\n\022contribution_level\030\003 "
  "\001(\r\"C\n&CMsgTFFreeTrialChooseMostHelpfulF"
  "riend\022\031\n\021account_id_friend\030\001 \001(\r\".\n\027CMsg"
  "TFRequestTF2Friends\022\023\n\013account_ids\030\001 \003(\r"
  "\"6\n\037CMsgTFRequestTF2FriendsResponse\022\023\n\013a"
  "ccount_ids\030\001 \003(\r\"/\n\017CSOTFPlayerInfo\022\034\n\024n"
  "um_new_users_helped\030\001 \001(\r\"2\n\026CMsgTFThank"
  "edBySomeone\022\030\n\020thanker_steam_id\030\001 \001(\004\"\026\n"
  "\024CMsgTFThankedSomeone\"#\n!CMsgTFFreeTrial"
  "ConvertedToPremium\":\n\020CMsgSaxxyAwarded\022\020"
  "\n\010category\030\001 \001(\r\022\024\n\014winner_names\030\002 \003(\t\"E"
  "\n\034CMsgReplaySubmitContestEntry\022\023\n\013youtub"
  "e_url\030\001 \001(\t\022\020\n\010category\030\002 \001(\r\"7\n$CMsgRep"
  "laySubmitContestEntryResponse\022\017\n\007success"
  "\030\001 \001(\010\"~\n\030CReplayCachedContestData\022\021\n\tti"
  "mestamp\030\001 \001(\007\022\032\n\022num_votes_last_day\030\002 \001("
  "\r\022\027\n\017video_entry_ids\030\003 \003(\r\022\032\n\022num_flags_"
  "last_day\030\004 \001(\r\"\035\n\033CMsgTFCoaching_AddToCo"
  "aches\"\"\n CMsgTFCoaching_RemoveFromCoache"
  "s\">\n\030CMsgTFCoaching_FindCoach\022\"\n\032account"
  "_id_friend_as_coach\030\001 \001(\r\"^\n CMsgTFCoach"
  "ing_FindCoachResponse\022\023\n\013found_coach\030\001 \001"
  "(\010\022\021\n\tnum_likes\030\002 \001(\r\022\022\n\ncoach_name\030\003 \001("
  "\t\"P\n\027CMsgTFCoaching_AskCoach\022\032\n\022account_"
  "id_student\030\001 \001(\r\022\031\n\021student_is_friend\030\002 "
  "\001(\010\"E\n\037CMsgTFCoaching_AskCoachResponse\022\""
  "\n\032accept_coaching_assignment\030\001 \001(\010\"z\n\034CM"
  "sgTFCoaching_CoachJoinGame\022\021\n\tjoin_game\030"
  "\001 \001(\010\022\026\n\016server_address\030\002 \001(\r\022\023\n\013server_"
  "port\030\003 \001(\r\022\032\n\022account_id_student\030\004 \001(\r\"S"
  "\n\033CMsgTFCoaching_CoachJoining\022\030\n\020account"
  "_id_coach\030\001 \001(\r\022\032\n\022account_id_student\030\002 "
  "\001(\r\"6\n\032CMsgTFCoaching_CoachJoined\022\030\n\020acc"
  "ount_id_coach\030\001 \001(\r\"5\n\037CMsgTFCoaching_Li"
  "keCurrentCoach\022\022\n\nlike_coach\030\001 \001(\010\"=\n!CM"
  "sgTFCoaching_RemoveCurrentCoach\022\030\n\020accou"
  "nt_id_coach\030\001 \001(\r\"\341\001\n\034CMsgTFQuickplay_Sc"
  "oreServers\0229\n\007servers\030\001 \003(\0132(.CMsgTFQuic"
  "kplay_ScoreServers.ServerInfo\032\205\001\n\nServer"
  "Info\022\026\n\016server_address\030\001 \001(\r\022\023\n\013server_p"
  "ort\030\002 \001(\r\022\021\n\tnum_users\030\003 \001(\r\022\020\n\010steam_id"
  "\030\004 \001(\004\022\021\n\tmax_users\030\005 \001(\r\022\022\n\nuser_score\030"
  "\006 \001(\002\"\342\001\n$CMsgTFQuickplay_ScoreServersRe"
  "sponse\022A\n\007servers\030\001 \003(\01320.CMsgTFQuickpla"
  "y_ScoreServersResponse.ServerInfo\032w\n\nSer"
  "verInfo\022\026\n\016server_address\030\001 \001(\r\022\023\n\013serve"
  "r_port\030\002 \001(\r\022\023\n\013total_score\030\003 \001(\002\022\020\n\010ste"
  "am_id\030\004 \001(\004\022\025\n\roptions_score\030\005 \001(\r\"3\n\035CM"
  "sgTFQuickplay_PlayerJoining\022\022\n\naccount_i"
  "d\030\001 \001(\r\"G\n\033CMsgGC_GameServer_LevelInfo\022\024"
  "\n\014level_loaded\030\001 \001(\010\022\022\n\nlevel_name\030\002 \001(\t"
  "\";\n\037CMsgGC_GameServer_AuthChallenge\022\030\n\020c"
  "hallenge_string\030\001 \001(\t\"\241\001\n\034CMsgGC_GameSer"
  "ver_AuthResult\022\025\n\rauthenticated\030\001 \001(\010\022\034\n"
  "\024game_server_standing\030\002 \001(\005\022\"\n\032game_serv"
  "er_standing_trend\030\003 \001(\005\022\027\n\017is_valve_serv"
  "er\030\004 \001(\010\022\017\n\007message\030\005 \001(\t\"j\n\'CMsgGC_Game"
  "Server_AuthChallengeResponse\022\036\n\026game_ser"
  "ver_account_id\030\001 \001(\r\022\037\n\027hashed_challenge"
  "_string\030\002 \001(\014\"6\n CMsgGC_GameServer_Creat"
  "eIdentity\022\022\n\naccount_id\030\001 \001(\r\"\332\002\n(CMsgGC"
  "_GameServer_CreateIdentityResponse\022\027\n\017ac"
  "count_created\030\001 \001(\010\022\036\n\026game_server_accou"
  "nt_id\030\002 \001(\r\022\"\n\032game_server_identity_toke"
  "n\030\003 \001(\t\022Y\n\006status\030\004 \001(\01621.CMsgGC_GameSer"
  "ver_CreateIdentityResponse.EStatus:\026kSta"
  "tus_GenericFailure\"v\n\007EStatus\022\032\n\026kStatus"
  "_GenericFailure\020\000\022\034\n\017kStatus_TooMany\020\377\377\377"
  "\377\377\377\377\377\377\001\022\034\n\017kStatus_NoPrivs\020\376\377\377\377\377\377\377\377\377\001\022\023\n"
  "\017kStatus_Created\020\001\",\n\026CMsgGC_GameServer_"
  "List\022\022\n\naccount_id\030\001 \001(\r\"\215\002\n\036CMsgGC_Game"
  "Server_ListResponse\022N\n\022owned_game_server"
  "s\030\001 \003(\01322.CMsgGC_GameServer_ListResponse"
  ".GameServerIdentity\032\232\001\n\022GameServerIdenti"
  "ty\022\036\n\026game_server_account_id\030\001 \001(\r\022\"\n\032ga"
  "me_server_identity_token\030\002 \001(\t\022\034\n\024game_s"
  "erver_standing\030\003 \001(\005\022\"\n\032game_server_stan"
  "ding_trend\030\004 \001(\005\"A\n\037CMsgGC_GameServer_Re"
  "setIdentity\022\036\n\026game_server_account_id\030\001 "
  "\001(\r\"\227\001\n\'CMsgGC_GameServer_ResetIdentityR"
  "esponse\022(\n game_server_identity_token_re"
  "set\030\001 \001(\010\022\036\n\026game_server_account_id\030\002 \001("
  "\r\022\"\n\032game_server_identity_token\030\003 \001(\t\"\035\n"
  "\033CMsgGC_GameServer_AckPolicy\"F\n#CMsgGC_G"
  "ameServer_AckPolicyResponse\022\016\n\006result\030\001 "
  "\001(\r\022\017\n\007message\030\002 \001(\t\":\n\'CMsgGC_Client_Us"
  "eServerModificationItem\022\017\n\007item_id\030\001 \001(\004"
  "\"\374\003\n0CMsgGC_Client_UseServerModification"
  "Item_Response\022\226\001\n\rresponse_code\030\001 \001(\0162Q."
  "CMsgGC_Client_UseServerModificationItem_"
  "Response.EServerModificationItemResponse"
  ":,kServerModificationItemResponse_Alread"
  "yInUse\"\256\002\n\037EServerModificationItemRespon"
  "se\0220\n,kServerModificationItemResponse_Al"
  "readyInUse\020\001\022<\n8kServerModificationItemR"
  "esponse_NotOnAuthenticatedServer\020\002\0220\n,kS"
  "erverModificationItemResponse_ServerReje"
  "ct\020\003\0221\n-kServerModificationItemResponse_"
  "InternalError\020\004\0226\n2kServerModificationIt"
  "emResponse_EventAlreadyActive\020\005\"\215\001\n+CMsg"
  "GC_GameServer_UseServerModificationItem\022"
  "^\n\021modification_type\030\001 \001(\0162\034.EServerModi"
  "ficationItemType:%kGameServerModificatio"
  "nItem_Halloween\"\216\004\n4CMsgGC_GameServer_Us"
  "eServerModificationItem_Response\022^\n\021modi"
  "fication_type\030\001 \001(\0162\034.EServerModificatio"
  "nItemType:%kGameServerModificationItem_H"
  "alloween\022\251\001\n\024server_response_code\030\002 \001(\0162"
  "[.CMsgGC_GameServer_UseServerModificatio"
  "nItem_Response.EServerModificationItemSe"
  "rverResponse:.kServerModificationItemSer"
  "verResponse_Accepted\"\311\001\n%EServerModifica"
  "tionItemServerResponse\0222\n.kServerModific"
  "ationItemServerResponse_Accepted\020\001\0226\n2kS"
  "erverModificationItemServerResponse_NoVo"
  "teCalled\020\002\0224\n0kServerModificationItemSer"
  "verResponse_VoteFailed\020\003\"\221\001\n/CMsgGC_Game"
  "Server_ServerModificationItemExpired\022^\n\021"
  "modification_type\030\001 \001(\0162\034.EServerModific"
  "ationItemType:%kGameServerModificationIt"
  "em_Halloween\"\232\001\n(CMsgGC_GameServer_Serve"
  "rModificationItem\022^\n\021modification_type\030\001"
  " \001(\0162\034.EServerModificationItemType:%kGam"
  "eServerModificationItem_Halloween\022\016\n\006act"
  "ive\030\002 \001(\010\"Y\n\035CMsgGC_Halloween_ReservedIt"
  "em\022\t\n\001x\030\001 \003(\002\022\t\n\001y\030\002 \003(\002\022\t\n\001z\030\003 \003(\002\022\027\n\017s"
  "pawn_meta_info\030\007 \001(\r\"]\n\032CMsgGC_Halloween"
  "_GrantItem\022\034\n\024recipient_account_id\030\001 \001(\r"
  "\022\020\n\010level_id\030\002 \001(\r\022\017\n\007flagged\030\003 \001(\010\"B\n\"C"
  "MsgGC_Halloween_GrantItemResponse\022\034\n\024rec"
  "ipient_account_id\030\001 \001(\r\"\036\n\034CMsgGC_Hallow"
  "een_ItemClaimed\"M\n\"CMsgGC_PickupItemElig"
  "ibility_Query\022\022\n\naccount_id\030\001 \001(\r\022\023\n\013sec"
  "onds_ago\030\002 \001(\r\"h\n*CMsgGC_PickupItemEligi"
  "bility_QueryResponse\022\022\n\naccount_id\030\001 \001(\r"
  "\022\024\n\014was_eligible\030\002 \001(\010\022\020\n\010level_id\030\003 \001(\r"
  "\"\226\004\n\020CSOTFPartyMember\022\023\n\013owns_ticket\030\002 \001"
  "(\010\022\032\n\022completed_missions\030\003 \001(\r\022\023\n\013badge_"
  "level\030\004 \001(\r\022\032\n\022competitive_access\030\t \001(\010\022"
  "\022\n\nexperience\030\016 \001(\r\0228\n\017player_criteria\030\020"
  " \001(\0132\037.CTFPerPlayerMatchCriteriaProto\022,\n"
  "\010activity\030\021 \001(\0132\032.CSOTFPartyMember.Activ"
  "ity\022\025\n\rcasual_banned\030\022 \001(\010\022\025\n\rranked_ban"
  "ned\030\023 \001(\010\022\033\n\023casual_low_priority\030\024 \001(\010\022\033"
  "\n\023ranked_low_priority\030\025 \001(\010\022\025\n\rlobby_sta"
  "ndby\030\026 \001(\010\032\244\001\n\010Activity\022\020\n\010lobby_id\030\001 \001("
  "\006\022B\n\021lobby_match_group\030\002 \001(\0162\016.ETFMatchG"
  "roup:\027k_eTFMatchGroup_Invalid\022\032\n\022multiqu"
  "eue_blocked\030\003 \001(\010\022\016\n\006online\030\004 \001(\010\022\026\n\016cli"
  "ent_version\030\005 \001(\r\"\227\001\n\024TFPendingPartyMemb"
  "er\022\017\n\007steamid\030\001 \001(\006\0222\n\004type\030\002 \001(\0162\033.TFPe"
  "ndingPartyMember.EType:\007Invited\022\017\n\007invit"
  "er\030\003 \001(\006\")\n\005EType\022\013\n\007Invited\020\000\022\023\n\017Reques"
  "tedToJoin\020\001\"\226\001\n\021TFSyncedMMUIState\022C\n\tmen"
  "u_step\030\001 \001(\0162\024.ETFSyncedMMMenuStep:\032k_eT"
  "FSyncedMMMenuStep_None\022<\n\013match_group\030\002 "
  "\001(\0162\016.ETFMatchGroup:\027k_eTFMatchGroup_Inv"
  "alid\"\333\001\n\032CTFGroupMatchCriteriaProto\022\024\n\014l"
  "ate_join_ok\030\005 \001(\010\022 \n\025custom_ping_toleran"
  "ce\030\r \001(\r:\0010\022\027\n\017mvm_mannup_tour\030\n \001(\t\022\033\n\023"
  "mvm_mannup_missions\030\017 \003(\t\022\035\n\025mvm_bootcam"
  "p_missions\030\020 \003(\t\0220\n\017casual_criteria\030\014 \001("
  "\0132\027.CTFCasualMatchCriteria\"4\n\026CTFCasualM"
  "atchCriteria\022\032\n\022selected_maps_bits\030\003 \003(\007"
  "\";\n\036CTFPerPlayerMatchCriteriaProto\022\031\n\021mv"
  "m_squad_surplus\030\001 \001(\010\"\310\001\n\017CTFPartyOption"
  "s\022\032\n\022overwrite_existing\030\001 \001(\010\0223\n\016group_c"
  "riteria\030\002 \001(\0132\033.CTFGroupMatchCriteriaPro"
  "to\0228\n\017player_criteria\030\003 \001(\0132\037.CTFPerPlay"
  "erMatchCriteriaProto\022*\n\016player_uistate\030\005"
  " \001(\0132\022.TFSyncedMMUIState\"J\n\023CMsgPartySet"
  "Options\022\020\n\010party_id\030\001 \001(\006\022!\n\007options\030\002 \001"
  "(\0132\020.CTFPartyOptions\"\035\n\033CMsgPartySetOpti"
  "onsResponse\"\221\001\n\026CMsgPartyQueueForMatch\022\020"
  "\n\010party_id\030\001 \001(\006\022\'\n\rfinal_options\030\002 \001(\0132"
  "\020.CTFPartyOptions\022<\n\013match_group\030\003 \001(\0162\016"
  ".ETFMatchGroup:\027k_eTFMatchGroup_Invalid\""
  " \n\036CMsgPartyQueueForMatchResponse\"D\n\030CMs"
  "gPartyQueueForStandby\022\020\n\010party_id\030\001 \001(\006\022"
  "\026\n\016party_lobby_id\030\002 \001(\006\"\"\n CMsgPartyQueu"
  "eForStandbyResponse\"j\n\030CMsgPartyRemoveFr"
  "omQueue\022\020\n\010party_id\030\001 \001(\006\022<\n\013match_group"
  "\030\002 \001(\0162\016.ETFMatchGroup:\027k_eTFMatchGroup_"
  "Invalid\"\"\n CMsgPartyRemoveFromQueueRespo"
  "nse\"3\n\037CMsgPartyRemoveFromStandbyQueue\022\020"
  "\n\010party_id\030\001 \001(\006\")\n\'CMsgPartyRemoveFromS"
  "tandbyQueueResponse\"_\n\025CMsgPartyInvitePl"
  "ayer\022\020\n\010party_id\030\001 \001(\006\022\021\n\tplayer_id\030\002 \001("
  "\006\022!\n\031expecting_request_to_join\030\003 \001(\010\"\177\n\032"
  "CMsgPartyRequestJoinPlayer\022\030\n\020current_pa"
  "rty_id\030\001 \001(\006\022\026\n\016join_player_id\030\002 \001(\006\022\025\n\r"
  "join_party_id\030\003 \001(\006\022\030\n\020expecting_invite\030"
  "\004 \001(\010\"J\n\033CMsgPartyClearPendingPlayer\022\020\n\010"
  "party_id\030\001 \001(\006\022\031\n\021pending_player_id\030\002 \001("
  "\006\"%\n#CMsgPartyClearPendingPlayerResponse"
  "\"9\n\037CMsgPartyClearOtherPartyRequest\022\026\n\016o"
  "ther_party_id\030\001 \001(\006\")\n\'CMsgPartyClearOth"
  "erPartyRequestResponse\"C\n\030CMsgPartyPromo"
  "teToLeader\022\020\n\010party_id\030\001 \001(\006\022\025\n\rnew_lead"
  "er_id\030\002 \001(\006\":\n\023CMsgPartyKickMember\022\020\n\010pa"
  "rty_id\030\001 \001(\006\022\021\n\ttarget_id\030\002 \001(\006\"2\n\021CMsgP"
  "artySendChat\022\020\n\010party_id\030\001 \001(\006\022\013\n\003msg\030\002 "
  "\001(\t\"n\n\020CMsgPartyChatMsg\022;\n\004type\030\001 \001(\0162\021."
  "ETFPartyChatType:\032k_eTFPartyChatType_Inv"
  "alid\022\020\n\010actor_id\030\002 \001(\006\022\013\n\003msg\030\003 \001(\t\"\376\004\n\n"
  "CSOTFParty\022\026\n\010party_id\030\001 \001(\004B\004\200\246\035\001\022\021\n\tle"
  "ader_id\030\002 \001(\006\022\022\n\nmember_ids\030\003 \003(\006\022\"\n\007mem"
  "bers\030\r \003(\0132\021.CSOTFPartyMember\022\033\n\023associa"
  "ted_lobby_id\030# \001(\004\022M\n\034associated_lobby_m"
  "atch_group\030( \001(\0162\016.ETFMatchGroup:\027k_eTFM"
  "atchGroup_Invalid\0222\n\022matchmaking_queues\030"
  "+ \003(\0132\026.CSOTFParty.QueueEntry\0223\n\016group_c"
  "riteria\030% \001(\0132\033.CTFGroupMatchCriteriaPro"
  "to\022\032\n\022casual_banned_time\030\022 \001(\r\022 \n\030casual"
  "_low_priority_time\030\024 \001(\r\022\032\n\022ranked_banne"
  "d_time\030) \001(\r\022 \n\030ranked_low_priority_time"
  "\030* \001(\r\022+\n\017leader_ui_state\030, \001(\0132\022.TFSync"
  "edMMUIState\022.\n\017pending_members\030\' \003(\0132\025.T"
  "FPendingPartyMember\032_\n\nQueueEntry\022<\n\013mat"
  "ch_group\030\001 \001(\0162\016.ETFMatchGroup:\027k_eTFMat"
  "chGroup_Invalid\022\023\n\013queued_time\030\002 \001(\007\"\367\001\n"
  "\020CSOTFPartyInvite\022\026\n\010group_id\030\001 \001(\004B\004\200\246\035"
  "\001\022\017\n\007inviter\030\002 \001(\006\022.\n\007members\030\004 \003(\0132\035.CS"
  "OTFPartyInvite.PartyMember\0224\n\004type\030\005 \001(\016"
  "2\026.CSOTFPartyInvite.Type:\016PENDING_INVITE"
  "\032\036\n\013PartyMember\022\017\n\007steamid\030\002 \001(\006\"4\n\004Type"
  "\022\022\n\016PENDING_INVITE\020\001\022\030\n\024PENDING_JOIN_REQ"
  "UEST\020\002\"\343\004\n\023CTFLobbyPlayerProto\022\020\n\002id\030\001 \001"
  "(\006B\004\200\246\035\001\022/\n\004team\030\003 \001(\0162\013.TF_GC_TEAM:\024TF_"
  "GC_TEAM_DEFENDERS\022A\n\rconnect_state\030\r \001(\016"
  "2!.CTFLobbyPlayerProto.ConnectState:\007INV"
  "ALID\022\014\n\004name\030\006 \001(\t\022\031\n\021original_party_id\030"
  "\014 \001(\004\022\025\n\rsquad_surplus\030\016 \001(\010\022\023\n\013badge_le"
  "vel\030\017 \001(\r\022\031\n\021last_connect_time\030\021 \001(\r\0227\n\004"
  "type\030\023 \001(\0162\031.CTFLobbyPlayerProto.Type:\016I"
  "NVALID_PLAYER\022\031\n\021normalized_rating\030\024 \001(\001"
  "\022\036\n\026normalized_uncertainty\030\026 \001(\001\022\014\n\004rank"
  "\030\025 \001(\r\022\027\n\017chat_suspension\030\027 \001(\010\"c\n\014Conne"
  "ctState\022\013\n\007INVALID\020\000\022\027\n\023RESERVATION_PEND"
  "ING\020\001\022\014\n\010RESERVED\020\002\022\r\n\tCONNECTED\020\003\022\020\n\014DI"
  "SCONNECTED\020\005\"V\n\004Type\022\022\n\016INVALID_PLAYER\020\000"
  "\022\020\n\014MATCH_PLAYER\020\001\022\022\n\016STANDBY_PLAYER\020\002\022\024"
  "\n\020OBSERVING_PLAYER\020\003\"k\n\023CTFLobbyInvitePr"
  "oto\022\026\n\010lobby_id\030\001 \001(\006B\004\200\246\035\001\022<\n\013match_gro"
  "up\030\002 \001(\0162\016.ETFMatchGroup:\027k_eTFMatchGrou"
  "p_Invalid\"\362\005\n\024CSOTFGameServerLobby\022\026\n\010lo"
  "bby_id\030\001 \001(\004B\004\200\246\035\001\022%\n\007members\030\002 \003(\0132\024.CT"
  "FLobbyPlayerProto\022\024\n\tserver_id\030\006 \001(\006:\0010\022"
  "3\n\005state\030\004 \001(\0162\033.CSOTFGameServerLobby.St"
  "ate:\007UNKNOWN\022\017\n\007connect\030\005 \001(\t\022@\n\ngame_st"
  "ate\030\026 \001(\0162\020.TF_GC_GameState:\032TF_GC_GAMES"
  "TATE_STATE_INIT\022!\n\031initial_average_mm_ra"
  "ting\030  \001(\001\022\030\n\020mannup_tour_name\030* \001(\t\022\020\n\010"
  "map_name\030& \001(\t\022\024\n\014mission_name\030\' \001(\t\022\023\n\013"
  "match_group\030) \001(\r\022\023\n\010match_id\030\036 \001(\004:\0010\022\023"
  "\n\013formed_time\030$ \001(\r\022\r\n\005flags\030+ \001(\r\022\032\n\022la"
  "te_join_eligible\030, \001(\010\022\030\n\020fixed_match_si"
  "ze\030- \001(\r\022:\n\014is_war_match\030. \001(\0162\036.CSOTFGa"
  "meServerLobby.WarMatch:\004NOPE\022\032\n\022next_map"
  "s_for_vote\030/ \003(\r\022\030\n\020lobby_mm_version\0300 \001"
  "(\r\022-\n\017pending_members\0301 \003(\0132\024.CTFLobbyPl"
  "ayerProto\".\n\005State\022\013\n\007UNKNOWN\020\000\022\017\n\013SERVE"
  "RSETUP\020\001\022\007\n\003RUN\020\002\"C\n\010WarMatch\022\010\n\004NOPE\020\000\022"
  "\025\n\021INVADERS_ARE_PYRO\020\001\022\026\n\022INVADERS_ARE_H"
  "EAVY\020\002\"S\n\023CMsgExitMatchmaking\022\030\n\020explici"
  "t_abandon\030\001 \001(\010\022\020\n\010party_id\030\002 \001(\004\022\020\n\010lob"
  "by_id\030\003 \001(\004\"s\n\025CMsgAcceptLobbyInvite\022\030\n\020"
  "invited_lobby_id\030\001 \001(\004\022\033\n\023abandoning_mat"
  "ch_id\030\002 \001(\004\022#\n\033abandoning_invite_lobby_i"
  "ds\030\003 \003(\004\"\034\n\032CMsgAcceptLobbyInviteReply\"#"
  "\n!CMsgMatchmakingSearchCountRequest\"H\n\"C"
  "MsgMatchmakingSearchCountResponse\022\"\n\032sea"
  "rching_players_by_group\030\001 \003(\r\" \n\036CMsgKic"
  "kedFromMatchmakingQueue\"\247\007\n\037CMsgGameServ"
  "erMatchmakingStatus\022\034\n\016server_version\030\020 "
  "\001(\r:\0041225\022R\n\021matchmaking_state\030\001 \001(\0162\027.S"
  "erverMatchmakingState:\036ServerMatchmaking"
  "State_INVALID\022\013\n\003map\030\003 \001(\t\022\014\n\004tags\030\004 \001(\t"
  "\022\021\n\tbot_count\030\005 \001(\r\022\026\n\016num_spectators\030\006 "
  "\001(\r\022\023\n\013max_players\030\007 \001(\r\022\022\n\nslots_free\030\010"
  " \001(\r\022\025\n\rserver_region\030\t \001(\r\022\026\n\016server_lo"
  "adavg\030\n \001(\002\022\026\n\016server_trusted\030\013 \001(\010\022\030\n\020s"
  "erver_dedicated\030\014 \001(\010\022\016\n\006strict\030\021 \001(\r\0228\n"
  "\007players\030\r \003(\0132\'.CMsgGameServerMatchmaki"
  "ngStatus.Player\022@\n\ngame_state\030\016 \001(\0162\020.TF"
  "_GC_GameState:\032TF_GC_GAMESTATE_STATE_INI"
  "T\022;\n\005event\030\017 \001(\0162&.CMsgGameServerMatchma"
  "kingStatus.Event:\004None\022\020\n\010mvm_wave\030\022 \001(\r"
  "\022\034\n\024mvm_credits_acquired\030\023 \001(\r\022\033\n\023mvm_cr"
  "edits_dropped\030\024 \001(\r\022\027\n\013match_group\030\027 \001(\021"
  ":\002-1\022\030\n\020lobby_mm_version\030\030 \001(\r\032o\n\006Player"
  "\022\020\n\010steam_id\030\001 \001(\006\022S\n\rconnect_state\030\002 \001("
  "\01623.CMsgGameServerMatchmakingStatus.Play"
  "erConnectState:\007INVALID\">\n\022PlayerConnect"
  "State\022\013\n\007INVALID\020\000\022\r\n\tCONNECTED\020\001\022\014\n\010RES"
  "ERVED\020\002\"H\n\005Event\022\010\n\004None\020\000\022\016\n\nMvMVictory"
  "\020\001\022\r\n\tMvMDefeat\020\002\022\026\n\022AcknowledgePlayers\020"
  "\003\"\206\005\n\027CMsgMatchmakingProgress\022\031\n\021avg_wai"
  "t_time_new\030\004 \001(\r\022\037\n\027avg_wait_time_join_l"
  "ate\030\005 \001(\r\022\026\n\016your_wait_time\030\006 \001(\r\022,\n$mat"
  "ching_worldwide_searching_players\030\010 \001(\r\022"
  "+\n#matching_near_you_searching_players\030\t"
  " \001(\r\022)\n!total_worldwide_searching_player"
  "s\030\r \001(\r\022(\n total_near_you_searching_play"
  "ers\030\016 \001(\r\022)\n!matching_worldwide_active_p"
  "layers\030\017 \001(\r\022(\n matching_near_you_active"
  "_players\030\020 \001(\r\022&\n\036total_worldwide_active"
  "_players\030\021 \001(\r\022%\n\035total_near_you_active_"
  "players\030\022 \001(\r\022,\n$matching_worldwide_empt"
  "y_gameservers\030\023 \001(\r\022+\n#matching_near_you"
  "_empty_gameservers\030\024 \001(\r\022)\n!total_worldw"
  "ide_empty_gameservers\030\025 \001(\r\022(\n total_nea"
  "r_you_empty_gameservers\030\026 \001(\r\022\023\n\013urgency"
  "_pct\030\001 \001(\r\"\303\004\n\022CMsgMvMVictoryInfo\022+\n\007pla"
  "yers\030\001 \003(\0132\032.CMsgMvMVictoryInfo.Player\022\021"
  "\n\ttour_name\030\002 \001(\t\022\024\n\014mission_name\030\003 \001(\t\032"
  "\201\001\n\004Item\022>\n\014grant_reason\030\001 \001(\0162\037.CMsgMvM"
  "VictoryInfo.GrantReason:\007INVALID\022\021\n\titem"
  "_data\030\002 \001(\014\022&\n\036squad_surplus_claimer_ste"
  "am_id\030\003 \001(\006\032\362\001\n\006Player\022\020\n\010steam_id\030\001 \001(\006"
  "\022\025\n\rbadge_granted\030\003 \001(\010\022\036\n\026badge_progres"
  "s_updated\030\004 \001(\010\022\025\n\rbadge_leveled\030\005 \001(\010\022\023"
  "\n\013badge_level\030\006 \001(\r\022\033\n\023badge_progress_bi"
  "ts\030\007 \001(\r\022\'\n\005items\030\010 \003(\0132\030.CMsgMvMVictory"
  "Info.Item\022\027\n\017voucher_missing\030\t \001(\010\022\024\n\014ba"
  "dge_points\030\n \001(\r\"^\n\013GrantReason\022\013\n\007INVAL"
  "ID\020\000\022\021\n\rBADGE_LEVELED\020\001\022\021\n\rSQUAD_SURPLUS"
  "\020\002\022\013\n\007MANN_UP\020\003\022\017\n\013HELP_A_NOOB\020\004\"a\n\025CGCM"
  "sgTFHelloResponse\022\025\n\rversion_check\030\001 \001(\r"
  "\022\030\n\020version_checksum\030\002 \003(\004\022\027\n\017version_ve"
  "rbose\030\003 \001(\r\"\221\001\n\014CGCMsgTFSync\022\030\n\020version_"
  "checksum\030\001 \001(\014\022\025\n\rversion_check\030\002 \001(\r\022\030\n"
  "\020version_check_ex\030\003 \001(\r\022\031\n\021version_check"
  "_ex2\030\004 \001(\r\022\033\n\023version_checksum_ex\030\005 \001(\014\""
  "^\n\016CGCMsgTFSyncEx\022\030\n\020version_checksum\030\001 "
  "\001(\t\022\033\n\023version_checksum_ex\030\002 \001(\014\022\025\n\rvers"
  "ion_check\030\003 \001(\r\"\340\001\n\016CMsgMvMVictory\022\034\n\024le"
  "gacy_mission_index\030\001 \001(\r\022\030\n\020tour_name_ma"
  "nnup\030\005 \001(\t\022\024\n\014mission_name\030\006 \001(\t\022\'\n\007play"
  "ers\030\002 \003(\0132\026.CMsgMvMVictory.Player\022\020\n\010lob"
  "by_id\030\003 \001(\004\022\022\n\nevent_time\030\004 \001(\007\0321\n\006Playe"
  "r\022\020\n\010steam_id\030\001 \001(\006\022\025\n\rsquad_surplus\030\002 \001"
  "(\010\"\033\n\031CMsgMvMMannUpVictoryReply\"@\n\032CMsgG"
  "ameServerKickingLobby\022\020\n\010lobby_id\030\003 \001(\004\022"
  "\020\n\010match_id\030\004 \001(\004\"$\n\"CMsgGameServerKicki"
  "ngLobbyResponse\"6\n\"CMsgLeaveGameAndPrepa"
  "reToJoinParty\022\020\n\010party_id\030\001 \001(\006\"\322\001\n\023CMsg"
  "PlayerLeftMatch\022\020\n\010steam_id\030\001 \001(\006\022I\n\014lea"
  "ve_reason\030\002 \001(\0162\023.TFMatchLeaveReason:\036TF"
  "MatchLeaveReason_UNSPECIFIED\022\023\n\013was_aban"
  "don\030\003 \001(\010\022\020\n\010lobby_id\030\004 \001(\004\022\020\n\010match_id\030"
  "\005 \001(\004\022%\n\014xp_breakdown\030\006 \003(\0132\017.CMsgTFXPSo"
  "urce\"\035\n\033CMsgPlayerLeftMatchResponse\"\215\002\n\030"
  "CMsgProcessMatchVoteKick\022\020\n\010match_id\030\001 \001"
  "(\006\022\032\n\022initiator_steam_id\030\002 \001(\006\022\027\n\017target"
  "_steam_id\030\003 \001(\006\0229\n\006reason\030\004 \001(\0162\021.TFVote"
  "KickReason:\026TFVoteKickReason_Other\022-\n\005vo"
  "tes\030\005 \003(\0132\036.CMsgProcessMatchVoteKick.Vot"
  "e\022\024\n\014default_pass\030\006 \001(\010\032*\n\004Vote\022\020\n\010steam"
  "_id\030\001 \001(\006\022\020\n\010vote_yay\030\002 \001(\010\"/\n CMsgProce"
  "ssMatchVoteKickResponse\022\013\n\003rip\030\001 \001(\010\"/\n-"
  "CMsgPlayerVoteKickedAfterLeavingMatchRes"
  "ponse\"\264\001\n\035CMsgHalloween_ServerBossEvent\022"
  "\025\n\revent_counter\030\001 \001(\r\022\021\n\ttimestamp\030\002 \001("
  "\r\022\021\n\tboss_type\030\003 \001(\r\022\022\n\nboss_level\030\004 \001(\r"
  "\022\022\n\nevent_type\030\005 \001(\r\022\030\n\020players_involved"
  "\030\006 \001(\r\022\024\n\014elapsed_time\030\007 \001(\002\"\225\005\n\032CMsgHal"
  "loween_Merasmus2012\022\025\n\revent_counter\030\001 \001"
  "(\r\022\026\n\016time_submitted\030\002 \001(\007\022\027\n\017is_valve_s"
  "erver\030\003 \001(\010\022\022\n\nboss_level\030\004 \001(\r\022\026\n\016spawn"
  "ed_health\030\005 \001(\r\022\030\n\020remaining_health\030\006 \001("
  "\r\022\021\n\tlife_time\030\007 \001(\r\022\022\n\nbomb_kills\030\010 \001(\r"
  "\022\023\n\013staff_kills\030\t \001(\r\022\021\n\tpvp_kills\030\n \001(\r"
  "\022\026\n\016prophunt_time1\030\013 \001(\r\022\026\n\016prophunt_tim"
  "e2\030\014 \001(\r\022\021\n\tdmg_scout\030\r \001(\r\022\022\n\ndmg_snipe"
  "r\030\016 \001(\r\022\023\n\013dmg_soldier\030\017 \001(\r\022\020\n\010dmg_demo"
  "\030\020 \001(\r\022\021\n\tdmg_medic\030\021 \001(\r\022\021\n\tdmg_heavy\030\022"
  " \001(\r\022\020\n\010dmg_pyro\030\023 \001(\r\022\017\n\007dmg_spy\030\024 \001(\r\022"
  "\024\n\014dmg_engineer\030\025 \001(\r\022\023\n\013scout_count\030\026 \001"
  "(\r\022\024\n\014sniper_count\030\027 \001(\r\022\025\n\rsolider_coun"
  "t\030\030 \001(\r\022\022\n\ndemo_count\030\031 \001(\r\022\023\n\013medic_cou"
  "nt\030\032 \001(\r\022\023\n\013heavy_count\030\033 \001(\r\022\022\n\npyro_co"
  "unt\030\034 \001(\r\022\021\n\tspy_count\030\035 \001(\r\022\026\n\016engineer"
  "_count\030\036 \001(\r\"\231\001\n$CMsgUpdateHalloweenMera"
  "smusLootLevel\022=\n\007players\030\001 \003(\0132,.CMsgUpd"
  "ateHalloweenMerasmusLootLevel.Player\022\026\n\016"
  "merasmus_level\030\002 \001(\r\032\032\n\006Player\022\020\n\010steam_"
  "id\030\001 \001(\006\"\"\n\021CAttribute_String\022\r\n\005value\030\001"
  " \001(\t\"\255\001\n!CAttribute_DynamicRecipeCompone"
  "nt\022\021\n\tdef_index\030\001 \001(\r\022\024\n\014item_quality\030\002 "
  "\001(\r\022\027\n\017component_flags\030\003 \001(\r\022\031\n\021attribut"
  "es_string\030\004 \001(\t\022\024\n\014num_required\030\005 \001(\r\022\025\n"
  "\rnum_fulfilled\030\006 \001(\r\"\240\002\nACAttribute_Dyna"
  "micRecipeComponent_COMPAT_NEVER_SERIALIZ"
  "E_THIS_OUT\022\021\n\tdef_index\030\001 \001(\r\022\020\n\010item_de"
  "f\030\002 \001(\r\022\024\n\014item_quality\030\003 \001(\r\022\027\n\017compone"
  "nt_flags\030\004 \001(\r\022\022\n\nitem_flags\030\005 \001(\r\022\031\n\021at"
  "tributes_string\030\006 \001(\t\022\024\n\014num_required\030\007 "
  "\001(\r\022\022\n\nitem_count\030\010 \001(\r\022\025\n\rnum_fulfilled"
  "\030\t \001(\r\022\027\n\017items_fulfilled\030\n \001(\r\"+\n\033CAttr"
  "ibute_ItemSlotCriteria\022\014\n\004tags\030\001 \001(\t\"^\n\030"
  "CMsgSetItemSlotAttribute\022\017\n\007item_id\030\001 \001("
  "\004\022\035\n\025slot_item_original_id\030\002 \001(\004\022\022\n\nslot"
  "_index\030\003 \001(\r\"h\n\nCSOWarData\022\030\n\naccount_id"
  "\030\001 \001(\rB\004\200\246\035\001\022\024\n\006war_id\030\002 \001(\rB\004\200\246\035\001\022\023\n\013af"
  "filiation\030\003 \001(\r\022\025\n\rpoints_scored\030\004 \001(\r\"P"
  "\n\035CGCMsgGC_War_IndividualUpdate\022\020\n\010steam"
  "_id\030\001 \001(\006\022\016\n\006war_id\030\002 \001(\r\022\r\n\005score\030\003 \001(\r"
  "\";\n\024CGCMsgGC_War_JoinWar\022\023\n\013affiliation\030"
  "\001 \001(\r\022\016\n\006war_id\030\002 \001(\r\"1\n\037CGCMsgGC_War_Re"
  "questGlobalStats\022\016\n\006war_id\030\001 \001(\r\"\236\001\n CGC"
  "MsgGC_War_GlobalStatsResponse\022@\n\013side_sc"
  "ores\030\001 \003(\0132+.CGCMsgGC_War_GlobalStatsRes"
  "ponse.SideScore\022\016\n\006war_id\030\002 \001(\r\032(\n\tSideS"
  "core\022\014\n\004side\030\001 \001(\r\022\r\n\005score\030\002 \001(\004\"u\n/CGC"
  "MsgGC_PlayerDuckLeaderboard_IndividualUp"
  "date\022\r\n\005score\030\002 \001(\r\022\014\n\004type\030\003 \001(\r\022\020\n\010sco"
  "re_id\030\004 \001(\014\022\023\n\013score_check\030\005 \001(\r\"\223\001\n\035CAt"
  "tribute_WorldItemPlacement\022\030\n\020original_i"
  "tem_id\030\001 \001(\004\022\r\n\005pos_x\030\002 \001(\002\022\r\n\005pos_y\030\003 \001"
  "(\002\022\r\n\005pos_z\030\004 \001(\002\022\r\n\005ang_x\030\005 \001(\002\022\r\n\005ang_"
  "y\030\006 \001(\002\022\r\n\005ang_z\030\007 \001(\002\"\305\001\n CGCMsg_WorldI"
  "temPlacement_Update\022\030\n\020original_item_id\030"
  "\001 \001(\004\022\r\n\005pos_x\030\002 \001(\002\022\r\n\005pos_y\030\003 \001(\002\022\r\n\005p"
  "os_z\030\004 \001(\002\022\r\n\005ang_x\030\005 \001(\002\022\r\n\005ang_y\030\006 \001(\002"
  "\022\r\n\005ang_z\030\007 \001(\002\022\030\n\020force_remove_all\030\010 \001("
  "\010\022\023\n\013attrib_name\030\t \001(\t\"F\n\021CMsgAcknowledg"
  "eXP\022\023\n\013match_group\030\001 \001(\005\022\034\n\024predicted_ex"
  "perience\030\002 \001(\r\"\224\003\n\016CMsgTFXPSource\022>\n\004typ"
  "e\030\001 \001(\0162\034.CMsgTFXPSource.XPSourceType:\014S"
  "OURCE_SCOREB\004\200\246\035\001\022\016\n\006amount\030\002 \001(\005\022\023\n\013mat"
  "ch_group\030\003 \001(\005\022\030\n\naccount_id\030\004 \001(\rB\004\200\246\035\001"
  "\022\026\n\010match_id\030\005 \001(\004B\004\200\246\035\001\"\352\001\n\014XPSourceTyp"
  "e\022\020\n\014SOURCE_SCORE\020\000\022\032\n\026SOURCE_OBJECTIVE_"
  "BONUS\020\001\022\032\n\026SOURCE_COMPLETED_MATCH\020\002\022\036\n\032S"
  "OURCE_COMPETITIVE_ABANDON\020\003\022\032\n\026SOURCE_CO"
  "MPETITIVE_WIN\020\004\022\033\n\027SOURCE_COMPETITIVE_LO"
  "SS\020\005\022\034\n\030SOURCE_AUTOBALANCE_BONUS\020\006\022\031\n\025SO"
  "URCE_PRESTIGE_BONUS\020\007\";\n\027CMsgTFXPSourceB"
  "reakdown\022 \n\007sources\030\001 \003(\0132\017.CMsgTFXPSour"
  "ce\"<\n\020CMsgTFClientInit\022\026\n\016client_version"
  "\030\001 \001(\r\022\020\n\010language\030\002 \001(\005\"\310\003\n\022CMsgGCNotif"
  "ication\022\035\n\017notification_id\030\001 \001(\004B\004\200\246\035\001\022\022"
  "\n\naccount_id\030\002 \001(\r\022\027\n\017expiration_time\030\003 "
  "\001(\007\022N\n\004type\030\004 \001(\0162$.CMsgGCNotification.N"
  "otificationType:\032NOTIFICATION_CUSTOM_STR"
  "ING\022\033\n\023notification_string\030\005 \001(\t\"\370\001\n\020Not"
  "ificationType\022\'\n#NOTIFICATION_REPORTED_P"
  "LAYER_BANNED\020\000\022\036\n\032NOTIFICATION_CUSTOM_ST"
  "RING\020\001\0220\n,NOTIFICATION_MM_BAN_DUE_TO_EXC"
  "ESSIVE_REPORTS\020\002\022+\n\'NOTIFICATION_REPORTE"
  "D_PLAYER_WAS_BANNED\020\003\022 \n\034NOTIFICATION_SU"
  "PPORT_MESSAGE\020\004\022\032\n\026NOTIFICATION_NUM_TYPE"
  "S\020\005\"E\n\027CMsgGCNotificationQueue\022*\n\rnotifi"
  "cations\030\001 \003(\0132\023.CMsgGCNotification\"J\n\033CM"
  "sgNotificationAcknowledge\022\022\n\naccount_id\030"
  "\001 \001(\r\022\027\n\017notification_id\030\002 \001(\004\"\"\n CMsgNo"
  "tificationAcknowledgeReply\"\203\010\n\023CMsgGC_Ma"
  "tch_Result\022\026\n\010match_id\030\001 \001(\004B\004\200\246\035\001\022\023\n\013ma"
  "tch_group\030\002 \001(\005\022<\n\006status\030\003 \001(\0162\033.CMsgGC"
  "_Match_Result.Status:\017MATCH_SUCCEEDED\022\020\n"
  "\010duration\030\004 \001(\r\022\021\n\tred_score\030\005 \001(\r\022\022\n\nbl"
  "ue_score\030\006 \001(\r\022\024\n\014winning_team\030\007 \001(\r\022\021\n\t"
  "map_index\030\010 \001(\r\022\024\n\tgame_type\030\t \001(\r:\0010\022,\n"
  "\007players\030\n \003(\0132\033.CMsgGC_Match_Result.Pla"
  "yer\022\022\n\nwin_reason\030\r \001(\r\022\r\n\005flags\030\016 \001(\r\022\014"
  "\n\004bots\030\020 \001(\r\032\360\003\n\006Player\022\020\n\010steam_id\030\001 \001("
  "\006\022\031\n\021original_party_id\030\002 \001(\004\022\014\n\004team\030\003 \001"
  "(\r\022\r\n\005score\030\004 \001(\r\022\014\n\004ping\030\005 \001(\r\022\r\n\005flags"
  "\030\006 \001(\r\022\014\n\004rank\030\t \001(\r\022\026\n\016classes_played\030\n"
  " \001(\r\022\r\n\005kills\030\013 \001(\r\022\016\n\006deaths\030\014 \001(\r\022\016\n\006d"
  "amage\030\r \001(\r\022\017\n\007healing\030\016 \001(\r\022\017\n\007support\030"
  "\017 \001(\r\022\023\n\013score_medal\030\020 \001(\r\022\023\n\013kills_meda"
  "l\030\021 \001(\r\022\024\n\014damage_medal\030\022 \001(\r\022\025\n\rhealing"
  "_medal\030\023 \001(\r\022\025\n\rsupport_medal\030\024 \001(\r\022%\n\014x"
  "p_breakdown\030\025 \003(\0132\017.CMsgTFXPSource\022\022\n\nle"
  "ave_time\030\026 \001(\r\022I\n\014leave_reason\030\027 \001(\0162\023.T"
  "FMatchLeaveReason:\036TFMatchLeaveReason_UN"
  "SPECIFIED\022\024\n\014connect_time\030\030 \001(\r\"\266\001\n\006Stat"
  "us\022\023\n\017MATCH_SUCCEEDED\020\000\022\023\n\017MATCH_FAILED_"
  "GC\020\001\022\030\n\024MATCH_FAILED_TRUSTED\020\002\022\030\n\024MATCH_"
  "FAILED_ABANDON\020\003\022\030\n\024MATCH_FAILED_UNKNOWN"
  "\020\005\022\030\n\024MATCH_FAILED_TIMEOUT\020\006\022\032\n\026MATCH_FI"
  "NISHED_ABANDON\020\007\"\035\n\033CMsgGC_Match_ResultR"
  "esponse\";\n\031CEconItemPreviewDataBlock\022\036\n\010"
  "econitem\030\001 \001(\0132\014.CSOEconItem\"q\n+CMsgGC_C"
  "lient2GCEconPreviewDataBlockRequest\022\017\n\007p"
  "aram_s\030\001 \001(\004\022\017\n\007param_a\030\002 \001(\004\022\017\n\007param_d"
  "\030\003 \001(\004\022\017\n\007param_m\030\004 \001(\004\"\\\n,CMsgGC_Client"
  "2GCEconPreviewDataBlockResponse\022,\n\010itemi"
  "nfo\030\001 \001(\0132\032.CEconItemPreviewDataBlock\"\244\004"
  "\n\026CSOTFLadderPlayerStats\022\030\n\naccount_id\030\001"
  " \001(\rB\004\200\246\035\001\022\031\n\013match_group\030\002 \001(\005B\004\200\246\035\001\022\027\n"
  "\tseason_id\030\003 \001(\rB\004\200\246\035\001\022\r\n\005games\030\t \001(\r\022\r\n"
  "\005score\030\n \001(\r\022\r\n\005kills\030\013 \001(\r\022\016\n\006deaths\030\014 "
  "\001(\r\022\016\n\006damage\030\r \001(\r\022\017\n\007healing\030\016 \001(\r\022\017\n\007"
  "support\030\017 \001(\r\022\024\n\014score_bronze\030\020 \001(\r\022\024\n\014s"
  "core_silver\030\021 \001(\r\022\022\n\nscore_gold\030\022 \001(\r\022\024\n"
  "\014kills_bronze\030\023 \001(\r\022\024\n\014kills_silver\030\024 \001("
  "\r\022\022\n\nkills_gold\030\025 \001(\r\022\025\n\rdamage_bronze\030\026"
  " \001(\r\022\025\n\rdamage_silver\030\027 \001(\r\022\023\n\013damage_go"
  "ld\030\030 \001(\r\022\026\n\016healing_bronze\030\031 \001(\r\022\026\n\016heal"
  "ing_silver\030\032 \001(\r\022\024\n\014healing_gold\030\033 \001(\r\022\026"
  "\n\016support_bronze\030\034 \001(\r\022\026\n\016support_silver"
  "\030\035 \001(\r\022\024\n\014support_gold\030\036 \001(\r\"\221\001\n\017CSOTFRa"
  "tingData\022\030\n\naccount_id\030\001 \001(\rB\004\200\246\035\001\022\031\n\013ra"
  "ting_type\030\002 \001(\005B\004\200\246\035\001\022\026\n\016rating_primary\030"
  "\003 \001(\r\022\030\n\020rating_secondary\030\004 \001(\r\022\027\n\017ratin"
  "g_tertiary\030\005 \001(\r\"\222\001\n\036CMsgGC_TFVoteKickPl"
  "ayerRequest\022\021\n\ttarget_id\030\002 \001(\004\022\020\n\010voter_"
  "id\030\003 \001(\004\0229\n\006reason\030\004 \001(\0162\021.TFVoteKickRea"
  "son:\026TFVoteKickReason_Other\022\020\n\010match_id\030"
  "\005 \001(\004\"f\n$CMsgGC_VoteKickPlayerRequestRes"
  "ponse\022\017\n\007allowed\030\001 \001(\010\022\025\n\rvoter_inhibit\030"
  "\003 \001(\010\022\026\n\016target_inhibit\030\004 \001(\010\"$\n\"CMsgGC_"
  "DailyCompetitiveStatsRollup\"\202\003\n+CMsgGC_D"
  "ailyCompetitiveStatsRollup_Response\022N\n\010r"
  "ankdata\030\001 \003(\0132<.CMsgGC_DailyCompetitiveS"
  "tatsRollup_Response.RankBucketEntry\032\202\002\n\017"
  "RankBucketEntry\022\014\n\004rank\030\001 \001(\r\022\017\n\007records"
  "\030\002 \001(\r\022\021\n\tavg_score\030\003 \001(\r\022\023\n\013stdev_score"
  "\030\004 \001(\r\022\021\n\tavg_kills\030\005 \001(\r\022\023\n\013stdev_kills"
  "\030\006 \001(\r\022\022\n\navg_damage\030\007 \001(\r\022\024\n\014stdev_dama"
  "ge\030\010 \001(\r\022\023\n\013avg_healing\030\t \001(\r\022\025\n\rstdev_h"
  "ealing\030\n \001(\r\022\023\n\013avg_support\030\013 \001(\r\022\025\n\rstd"
  "ev_support\030\014 \001(\r\"\371\001\n\023CMsgGC_ReportPlayer"
  "\022\031\n\021account_id_target\030\001 \001(\r\022=\n\006reason\030\002 "
  "\001(\0162\034.CMsgGC_ReportPlayer.EReason:\017kReas"
  "on_INVALID\"\207\001\n\007EReason\022\023\n\017kReason_INVALI"
  "D\020\000\022\024\n\020kReason_CHEATING\020\001\022\020\n\014kReason_IDL"
  "E\020\002\022\026\n\022kReason_HARASSMENT\020\003\022\024\n\020kReason_G"
  "RIEFING\020\004\022\021\n\rkReason_COUNT\020\005\"\270\004\n\033CSOTFMa"
  "tchResultPlayerStats\022\026\n\010match_id\030\001 \001(\004B\004"
  "\200\246\035\001\022\030\n\naccount_id\030\002 \001(\rB\004\200\246\035\001\022\031\n\013match_"
  "group\030\003 \001(\005B\004\200\246\035\001\022\017\n\007endtime\030\004 \001(\r\022\021\n\tse"
  "ason_id\030\005 \001(\r\022\016\n\006status\030\006 \001(\r\022\031\n\021origina"
  "l_party_id\030\007 \001(\r\022\014\n\004team\030\010 \001(\r\022\r\n\005score\030"
  "\t \001(\r\022\014\n\004ping\030\n \001(\r\022\r\n\005flags\030\013 \001(\r\022\026\n\016di"
  "splay_rating\030\014 \001(\r\022\035\n\025display_rating_cha"
  "nge\030\r \001(\005\022\014\n\004rank\030\016 \001(\r\022\026\n\016classes_playe"
  "d\030\017 \001(\r\022\r\n\005kills\030\020 \001(\r\022\016\n\006deaths\030\021 \001(\r\022\016"
  "\n\006damage\030\022 \001(\r\022\017\n\007healing\030\023 \001(\r\022\017\n\007suppo"
  "rt\030\024 \001(\r\022\023\n\013score_medal\030\025 \001(\r\022\023\n\013kills_m"
  "edal\030\026 \001(\r\022\024\n\014damage_medal\030\027 \001(\r\022\025\n\rheal"
  "ing_medal\030\030 \001(\r\022\025\n\rsupport_medal\030\031 \001(\r\022\021"
  "\n\tmap_index\030\032 \001(\r\022\024\n\014winning_team\030\033 \001(\r\""
  "\036\n\034CMsgGCRequestMatchMakerStats\"@\n\032CMsgG"
  "CDataCenterPopulation\022\014\n\004name\030\001 \001(\t\022\024\n\014h"
  "ealth_ratio\030\002 \001(\002\"c\n$CMsgGCMatchGroupDat"
  "aCenterPopulation\022;\n\026data_center_populat"
  "ion\030\001 \003(\0132\033.CMsgGCDataCenterPopulation\"\204"
  "\001\n\035CMsgGCMatchMakerStatsResponse\022\021\n\tmap_"
  "count\030\001 \003(\r\022P\n!matchgroup_data_center_po"
  "pulation\030\002 \003(\0132%.CMsgGCMatchGroupDataCen"
  "terPopulation\"V\n\026CMsgGCMatchHistoryLoad\022"
  "<\n\013match_group\030\001 \001(\0162\016.ETFMatchGroup:\027k_"
  "eTFMatchGroup_Invalid\"\214\002\n\033CMsgGCDataCent"
  "erPing_Update\0228\n\010pingdata\030\001 \003(\0132&.CMsgGC"
  "DataCenterPing_Update.PingEntry\032i\n\tPingE"
  "ntry\022\014\n\004name\030\001 \001(\t\022\014\n\004ping\030\002 \001(\r\022@\n\013ping"
  "_status\030\003 \001(\0162#.CMsgGCDataCenterPing_Upd"
  "ate.Status:\006Normal\"H\n\006Status\022\013\n\007Invalid\020"
  "\000\022\n\n\006Normal\020\001\022\017\n\013Unreachable\020\002\022\024\n\020Fallba"
  "ckToDCPing\020\003\".\n\032CMsgGC_KickPlayerFromLob"
  "by\022\020\n\010targetID\030\001 \001(\004\"k\n\023CMsgGCSurveyRequ"
  "est\022B\n\rquestion_type\030\001 \001(\0162\023.SurveyQuest"
  "ionType:\026QUESTION_MATCH_QUALITY\022\020\n\010match"
  "_id\030\002 \001(\004\"~\n\024CMsgGCSurveyResponse\022B\n\rque"
  "stion_type\030\001 \001(\0162\023.SurveyQuestionType:\026Q"
  "UESTION_MATCH_QUALITY\022\020\n\010match_id\030\002 \001(\004\022"
  "\020\n\010response\030\003 \001(\005\"\375\001\n\017CSOQuestMapNode\022\030\n"
  "\naccount_id\030\001 \001(\rB\004\200\246\035\001\022\026\n\010defindex\030\003 \001("
  "\rB\004\200\246\035\001\022\017\n\007node_id\030\004 \001(\r\022\034\n\rstar_0_earne"
  "d\030\006 \001(\010:\005false\022\034\n\rstar_1_earned\030\007 \001(\010:\005f"
  "alse\022\034\n\rstar_2_earned\030\010 \001(\010:\005false\022\033\n\014lo"
  "ot_claimed\030\t \001(\010:\005false\022\035\n\022selected_ques"
  "t_def\030\n \001(\r:\0010\022\021\n\tmap_cycle\030\013 \001(\r\"\312\001\n\010CS"
  "OQuest\022\022\n\naccount_id\030\001 \001(\r\022\026\n\010quest_id\030\002"
  " \001(\004B\004\200\246\035\001\022\020\n\010defindex\030\003 \001(\r\022\025\n\006active\030\004"
  " \001(\010:\005false\022\020\n\010points_0\030\005 \001(\r\022\020\n\010points_"
  "1\030\006 \001(\r\022\020\n\010points_2\030\007 \001(\r\022 \n\030quest_map_n"
  "ode_source_id\030\010 \001(\r\022\021\n\tmap_cycle\030\t \001(\r\"~"
  "\n\031CSOQuestMapRewardPurchase\022\022\n\naccount_i"
  "d\030\001 \001(\r\022\026\n\010defindex\030\002 \001(\rB\004\200\246\035\001\022\r\n\005count"
  "\030\003 \001(\r\022\021\n\tmap_cycle\030\004 \001(\r\022\023\n\013purchase_id"
  "\030\005 \001(\r\"\'\n\023CMsgGCQuestIdentify\022\020\n\010quest_i"
  "d\030\001 \001(\004\"-\n\022CMsgGCQuestDevGive\022\027\n\017quest_d"
  "ef_index\030\001 \001(\r\".\n\025CMsgGCQuestNodeTurnIn\022"
  "\025\n\rnode_defindex\030\001 \001(\r\"I\n\030CMsgGCQuestMap"
  "UnlockNode\022\025\n\rnode_defindex\030\001 \001(\r\022\026\n\016que"
  "st_defindex\030\002 \001(\r\"`\n\035CMsgGCNewMatchForLo"
  "bbyRequest\022\030\n\020current_match_id\030\001 \001(\004\022\023\n\013"
  "next_map_id\030\002 \001(\r\022\020\n\010lobby_id\030\003 \001(\004\"1\n\036C"
  "MsgGCNewMatchForLobbyResponse\022\017\n\007success"
  "\030\001 \001(\010\"\325\001\n#CMsgGCChangeMatchPlayerTeamsR"
  "equest\022\020\n\010match_id\030\001 \001(\004\022\020\n\010lobby_id\030\002 \001"
  "(\004\022;\n\006member\030\003 \003(\0132+.CMsgGCChangeMatchPl"
  "ayerTeamsRequest.Member\032M\n\006Member\022\021\n\tmem"
  "ber_id\030\001 \001(\004\0220\n\010new_team\030\002 \001(\0162\013.TF_GC_T"
  "EAM:\021TF_GC_TEAM_NOTEAM\"7\n$CMsgGCChangeMa"
  "tchPlayerTeamsResponse\022\017\n\007success\030\001 \001(\010\""
  "B\n\031CMsgGCQuestComplete_Debug\022\020\n\010quest_id"
  "\030\001 \001(\004\022\023\n\013points_type\030\002 \001(\r\"t\n\024CMsgGCQue"
  "stMap_Debug\022\027\n\017reset_operation\030\001 \001(\r\022\023\n\013"
  "give_credit\030\002 \001(\r\022.\n\013unlock_node\030\003 \001(\0132\031"
  ".CMsgGCQuestMapUnlockNode\";\n\034CMsgGCQuest"
  "MapPurchaseReward\022\033\n\023store_item_defindex"
  "\030\001 \001(\r\"-\n\023CMsgGCQuestResponse\022\026\n\007success"
  "\030\001 \001(\010:\005false\"3\n\"CMsgGCSetDisablePartyQu"
  "estProgress\022\r\n\005state\030\001 \001(\010\"\301\001\n\027CMsgQuest"
  "ProgressReport\022\020\n\010quest_id\030\001 \001(\004\022\025\n\rstar"
  "_0_earned\030\002 \001(\010\022\025\n\rstar_1_earned\030\003 \001(\010\022\025"
  "\n\rstar_2_earned\030\004 \001(\010\022\024\n\014items_earned\030\005 "
  "\003(\004\022\035\n\025reward_credits_earned\030\006 \001(\r\022\032\n\022co"
  "ntract_completed\030\007 \001(\010\"A\n\023CMsgConsumePai"
  "ntkit\022\021\n\tsource_id\030\001 \001(\006\022\027\n\017target_defin"
  "dex\030\002 \001(\r\"U\n\023CMsgPainkitDevGrant\022\031\n\021pain"
  "tkit_defindex\030\001 \001(\r\022\014\n\004wear\030\002 \001(\002\022\025\n\rite"
  "m_defindex\030\003 \001(\r\"\205\001\n\023GCQuestStrangeEvent"
  "\022\030\n\020owner_account_id\030\001 \001(\r\022\031\n\021scorer_acc"
  "ount_id\030\002 \001(\r\022\020\n\010quest_id\030\003 \001(\004\022\030\n\020stran"
  "ge_event_id\030\004 \001(\r\022\r\n\005score\030\005 \001(\r*\3512\n\010ETF"
  "GCMsg\022\032\n\025k_EMsgGCReportWarKill\020\211\'\022\"\n\035k_E"
  "MsgGCKickPlayer_DEPRECATED\020\234\'\022\'\n\"k_EMsgG"
  "CStartedTraining_DEPRECATED\020\235\'\022.\n)k_EMsg"
  "GCFreeTrial_ChooseMostHelpfulFriend\020\236\'\022\036"
  "\n\031k_EMsgGCRequestTF2Friends\020\237\'\022&\n!k_EMsg"
  "GCRequestTF2FriendsResponse\020\240\'\022&\n!k_EMsg"
  "GCReplay_SubmitContestEntry\020\242\'\022.\n)k_EMsg"
  "GCReplay_SubmitContestEntryResponse\020\243\'\022\032"
  "\n\025k_EMsgGCSaxxy_Awarded\020\245\'\022\'\n\"k_EMsgGCFr"
  "eeTrial_ThankedBySomeone\020\244\'\022%\n k_EMsgGCF"
  "reeTrial_ThankedSomeone\020\246\'\022)\n$k_EMsgGCFr"
  "eeTrial_ConvertedToPremium\020\247\'\0228\n3k_EMsgG"
  "CMeetThePyroSilliness_BananaCraft_DEPREC"
  "ATED\020\250\'\0226\n1k_EMsgGCMVMARG_HighFiveSucces"
  "sResponse_DEPRECATED\020\251\'\022/\n*k_EMsgGCMVMAR"
  "G_HighFiveOnClient_DEPRECATED\020\252\'\022\"\n\035k_EM"
  "sgGCCoaching_AddToCoaches\020\320(\022*\n%k_EMsgGC"
  "Coaching_AddToCoachesResponse\020\321(\022\'\n\"k_EM"
  "sgGCCoaching_RemoveFromCoaches\020\322(\022/\n*k_E"
  "MsgGCCoaching_RemoveFromCoachesResponse\020"
  "\323(\022\037\n\032k_EMsgGCCoaching_FindCoach\020\324(\022\'\n\"k"
  "_EMsgGCCoaching_FindCoachResponse\020\325(\022\036\n\031"
  "k_EMsgGCCoaching_AskCoach\020\326(\022&\n!k_EMsgGC"
  "Coaching_AskCoachResponse\020\327(\022#\n\036k_EMsgGC"
  "Coaching_CoachJoinGame\020\330(\022\"\n\035k_EMsgGCCoa"
  "ching_CoachJoining\020\331(\022!\n\034k_EMsgGCCoachin"
  "g_CoachJoined\020\332(\022&\n!k_EMsgGCCoaching_Lik"
  "eCurrentCoach\020\333(\022(\n#k_EMsgGCCoaching_Rem"
  "oveCurrentCoach\020\334(\022\'\n\"k_EMsgGCCoaching_A"
  "lreadyRatedCoach\020\335(\022\032\n\025k_EMsgGC_Duel_Req"
  "uest\020\374*\022\033\n\026k_EMsgGC_Duel_Response\020\375*\022\032\n\025"
  "k_EMsgGC_Duel_Results\020\376*\022\031\n\024k_EMsgGC_Due"
  "l_Status\020\377*\022/\n*k_EMsgGC_Halloween_Reserv"
  "edItem_DEPRECATED\020\340+\022,\n\'k_EMsgGC_Hallowe"
  "en_GrantItem_DEPRECATED\020\341+\0224\n/k_EMsgGC_H"
  "alloween_GrantItemResponse_DEPRECATED\020\344+"
  "\0226\n1k_EMsgGC_Halloween_Cheat_QueryRespon"
  "se_DEPRECATED\020\345+\022.\n)k_EMsgGC_Halloween_I"
  "temClaimed_DEPRECATED\020\346+\022$\n\037k_EMsgGC_Hal"
  "loween_ReservedItem\020\347+\022!\n\034k_EMsgGC_Hallo"
  "ween_GrantItem\020\350+\022)\n$k_EMsgGC_Halloween_"
  "GrantItemResponse\020\351+\0228\n3k_EMsgGC_Hallowe"
  "en_Cheat_QueryResponse_DEPRECATED_2\020\352+\0220"
  "\n+k_EMsgGC_Halloween_ItemClaimed_DEPRECA"
  "TED_2\020\353+\022\'\n\"k_EMsgGC_Halloween_ServerBos"
  "sEvent\020\354+\022$\n\037k_EMsgGC_Halloween_Merasmus"
  "2012\020\355+\022/\n*k_EMsgGC_Halloween_UpdateMera"
  "smusLootLevel\020\356+\022\"\n\035k_EMsgGC_GameServer_"
  "LevelInfo\020\304,\022&\n!k_EMsgGC_GameServer_Auth"
  "Challenge\020\305,\022.\n)k_EMsgGC_GameServer_Auth"
  "ChallengeResponse\020\306,\022\'\n\"k_EMsgGC_GameSer"
  "ver_CreateIdentity\020\307,\022/\n*k_EMsgGC_GameSe"
  "rver_CreateIdentityResponse\020\310,\022\035\n\030k_EMsg"
  "GC_GameServer_List\020\311,\022%\n k_EMsgGC_GameSe"
  "rver_ListResponse\020\312,\022#\n\036k_EMsgGC_GameSer"
  "ver_AuthResult\020\313,\022&\n!k_EMsgGC_GameServer"
  "_ResetIdentity\020\314,\022.\n)k_EMsgGC_GameServer"
  "_ResetIdentityResponse\020\315,\022.\n)k_EMsgGC_Cl"
  "ient_UseServerModificationItem\020\316,\0227\n2k_E"
  "MsgGC_Client_UseServerModificationItem_R"
  "esponse\020\317,\0222\n-k_EMsgGC_GameServer_UseSer"
  "verModificationItem\020\320,\022;\n6k_EMsgGC_GameS"
  "erver_UseServerModificationItem_Response"
  "\020\321,\0226\n1k_EMsgGC_GameServer_ServerModific"
  "ationItemExpired\020\322,\022.\n)k_EMsgGC_GameServ"
  "er_ModificationItemState\020\323,\022\"\n\035k_EMsgGC_"
  "GameServer_AckPolicy\020\324,\022*\n%k_EMsgGC_Game"
  "Server_AckPolicyResponse\020\325,\022\035\n\030k_EMsgGC_"
  "QP_ScoreServers\020\250-\022%\n k_EMsgGC_QP_ScoreS"
  "erversResponse\020\251-\022\036\n\031k_EMsgGC_QP_PlayerJ"
  "oining\020\252-\0224\n/k_EMsgGC_PickupItemEligibil"
  "ity_Query_DEPRECATED\020\360.\0226\n1k_EMsgGC_Pick"
  "upItemEligibility_Query_DEPRECATED_2\020\361.\022"
  "4\n/k_EMsgGC_IncrementKillCountAttribute_"
  "DEPRECATED\020\324/\0223\n.k_EMsgGC_IncrementKillC"
  "ountResponse_DEPRECATED\020\325/\022\037\n\032k_EMsgGCAb"
  "andonCurrentGame\020\3330\022\035\n\030k_EMsgForceSOCach"
  "eResend\020\3350\022#\n\036k_EMsgGCRequestChatChannel"
  "List\020\3640\022+\n&k_EMsgGCRequestChatChannelLis"
  "tResponse\020\3650\022\024\n\017k_EMsgGCReadyUp\020\3760\022\'\n\"k_"
  "EMsgGCKickedFromMatchmakingQueue\020\3770\022\033\n\026k"
  "_EMsgGCLeaverDetected\020\2001\022#\n\036k_EMsgGCLeav"
  "erDetectedResponse\020\2171\022\034\n\027k_EMsgGCExitMat"
  "chmaking\020\2211\022 \n\033k_EMsgGCMatchmakingProgre"
  "ss\020\2251\022\033\n\026k_EMsgGCMvMVictoryInfo\020\2261\022(\n#k_"
  "EMsgGCGameServerMatchmakingStatus\020\2271\022\027\n\022"
  "k_EMsgGCMvMVictory\020\2311\022\034\n\027k_EMsgGCMvMVict"
  "oryReply\020\2321\022#\n\036k_EMsgGCGameServerKicking"
  "Lobby\020\2331\022+\n&k_EMsgGCLeaveGameAndPrepareT"
  "oJoinParty\020\2341\022!\n\034k_EMsgGC_UpdatePeriodic"
  "Event\020\2002\022.\n)k_EMsgGC_DuckLeaderboard_Ind"
  "ividualUpdate\020\2012\0222\n-k_EMsgGC_Client2GCEc"
  "onPreviewDataBlockRequest\020\2022\0223\n.k_EMsgGC"
  "_Client2GCEconPreviewDataBlockResponse\020\203"
  "2\022)\n$k_EMsgGC_ClientVerificationChalleng"
  "e\020\3442\0221\n,k_EMsgGC_ClientVerificationChall"
  "engeResponse\020\3452\022/\n*k_EMsgGC_ClientVerifi"
  "cationVerboseResponse\020\3462\022(\n#k_EMsgGC_Cli"
  "entSetItemSlotAttribute\020\3472\022\"\n\035k_EMsgGC_W"
  "ar_IndividualUpdate\020\3512\022\031\n\024k_EMsgGC_War_J"
  "oinWar\020\3522\022$\n\037k_EMsgGC_War_RequestGlobalS"
  "tats\020\3532\022%\n k_EMsgGC_War_GlobalStatsRespo"
  "nse\020\3542\022*\n%k_EMsgGC_WorldItemPlacement_At"
  "tribute\020\3562\022\'\n\"k_EMsgGC_WorldItemPlacemen"
  "t_Update\020\3572\022\032\n\025k_EMsgGC_Match_Result\020\3602\022"
  "\"\n\035k_EMsgGCVoteKickPlayerRequest\020\3612\022*\n%k"
  "_EMsgGCVoteKickPlayerRequestResponse\020\3622\022"
  ")\n$k_EMsgGC_DailyCompetitiveStatsRollup\020"
  "\3642\0222\n-k_EMsgGC_DailyCompetitiveStatsRoll"
  "up_Response\020\3652\022\"\n\035k_EMsgGC_WorldStatusBr"
  "oadcast\020\3662\022\032\n\025k_EMsgGC_ReportPlayer\020\3672\022\""
  "\n\035k_EMsgGC_Match_ResultResponse\020\3702\022+\n&k_"
  "EMsgGCGameServerKickingLobbyResponse\020\3712\022"
  "\034\n\027k_EMsgGCPlayerLeftMatch\020\3722\022$\n\037k_EMsgG"
  "CPlayerLeftMatchResponse\020\3732\022#\n\036k_EMsgGCR"
  "equestMatchMakerStats\020\3742\022$\n\037k_EMsgGCMatc"
  "hMakerStatsResponse\020\3752\022\035\n\030k_EMsgGCMatchH"
  "istoryLoad\020\3762\022\033\n\026k_EMsgGC_AcknowledgeXP\020"
  "\3772\022\"\n\035k_EMsgGCDataCenterPing_Update\020\2003\022%"
  "\n k_EMsgGC_NotificationAcknowledge\020\2013\022*\n"
  "%k_EMsgGC_NotificationAcknowledgeReply\020\202"
  "3\022!\n\034k_EMsgGC_KickPlayerFromLobby\020\2033\022#\n\036"
  "k_EMsgGC_SurveyQuestionRequest\020\2063\022$\n\037k_E"
  "MsgGC_SurveyQuestionResponse\020\2073\022\032\n\025k_EMs"
  "gGC_TFClientInit\020\2103\022%\n k_EMsgGC_NewMatch"
  "ForLobbyRequest\020\2113\022&\n!k_EMsgGC_NewMatchF"
  "orLobbyResponse\020\2123\022+\n&k_EMsgGC_ChangeMat"
  "chPlayerTeamsRequest\020\2133\022,\n\'k_EMsgGC_Chan"
  "geMatchPlayerTeamsResponse\020\2143\022\033\n\026k_EMsgG"
  "C_QuestIdentify\020\2153\022\032\n\025k_EMsgGC_QuestDevG"
  "ive\020\2163\022 \n\033k_EMsgGCQuestComplete_Debug\020\2203"
  "\022\033\n\026k_EMsgGC_QuestMapDebug\020\2213\022 \n\033k_EMsgG"
  "C_QuestMapUnlockNode\020\2233\022$\n\037k_EMsgGC_Ques"
  "tMapPurchaseReward\020\2253\022*\n%k_EMsgGC_SetDis"
  "ablePartyQuestProgress\020\2263\022 \n\033k_EMsgGCQue"
  "stProgressReport\020\2313\022\035\n\030k_EMsgGCParty_Set"
  "Options\020\2323\022%\n k_EMsgGCParty_SetOptionsRe"
  "sponse\020\2333\022 \n\033k_EMsgGCParty_QueueForMatch"
  "\020\2343\022(\n#k_EMsgGCParty_QueueForMatchRespon"
  "se\020\2353\022\"\n\035k_EMsgGCParty_RemoveFromQueue\020\236"
  "3\022*\n%k_EMsgGCParty_RemoveFromQueueRespon"
  "se\020\2373\022\037\n\032k_EMsgGCParty_InvitePlayer\020\2403\022$"
  "\n\037k_EMsgGCParty_RequestJoinPlayer\020\2413\022\033\n\026"
  "k_EMsgGCParty_SendChat\020\2423\022\032\n\025k_EMsgGCPar"
  "ty_ChatMsg\020\2433\022\034\n\027k_EMsgGCQuestNodeTurnIn"
  "\020\2443\022\034\n\027k_EMsgGCConsumePaintKit\020\2453\022\036\n\031k_E"
  "MsgGC_Painkit_DevGrant\020\2463\022\"\n\035k_EMsgGCPar"
  "ty_QueueForStandby\020\2473\022*\n%k_EMsgGCParty_Q"
  "ueueForStandbyResponse\020\2503\022)\n$k_EMsgGCPar"
  "ty_RemoveFromStandbyQueue\020\2513\0221\n,k_EMsgGC"
  "Party_RemoveFromStandbyQueueResponse\020\2523\022"
  "%\n k_EMsgGCParty_ClearPendingPlayer\020\2533\022-"
  "\n(k_EMsgGCParty_ClearPendingPlayerRespon"
  "se\020\2543\022)\n$k_EMsgGCParty_ClearOtherPartyRe"
  "quest\020\2553\0221\n,k_EMsgGCParty_ClearOtherPart"
  "yRequestResponse\020\2563\022\"\n\035k_EMsgGCParty_Pro"
  "moteToLeader\020\2573\022\035\n\030k_EMsgGCParty_KickMem"
  "ber\020\2603\022\036\n\031k_EMsgGCQuestStrangeEvent\020\2613\022\037"
  "\n\032k_EMsgGC_AcceptLobbyInvite\020\2623\022$\n\037k_EMs"
  "gGC_AcceptLobbyInviteReply\020\2633\022\"\n\035k_EMsgG"
  "C_ProcessMatchVoteKick\020\2653\022*\n%k_EMsgGC_Pr"
  "ocessMatchVoteKickResponse\020\2663\022\035\n\030k_EMsgG"
  "CDev_GrantWarKill\020\221N*H\n\033EServerModificat"
  "ionItemType\022)\n%kGameServerModificationIt"
  "em_Halloween\020\001*\233\002\n\023ETFSyncedMMMenuStep\022*"
  "\n\035k_eTFSyncedMMMenuStep_Invalid\020\377\377\377\377\377\377\377\377"
  "\377\001\022\036\n\032k_eTFSyncedMMMenuStep_None\020\000\022*\n&k_"
  "eTFSyncedMMMenuStep_Configuring_Mode\020\001\022,"
  "\n(k_eTFSyncedMMMenuStep_MvM_Selecting_Mo"
  "de\020\002\022,\n(k_eTFSyncedMMMenuStep_MvM_Select"
  "ing_Tour\020\003\0220\n,k_eTFSyncedMMMenuStep_MvM_"
  "Selecting_Missions\020\004*\221\006\n\rETFMatchGroup\022$"
  "\n\027k_eTFMatchGroup_Invalid\020\377\377\377\377\377\377\377\377\377\001\022 \n\034"
  "k_eTFMatchGroup_MvM_Practice\020\000\022\036\n\032k_eTFM"
  "atchGroup_MvM_MannUp\020\001\022\031\n\025k_eTFMatchGrou"
  "p_First\020\000\022\037\n\033k_eTFMatchGroup_MvM_Default"
  "\020\000\022\035\n\031k_eTFMatchGroup_MvM_First\020\000\022\034\n\030k_e"
  "TFMatchGroup_MvM_Last\020\001\022\036\n\032k_eTFMatchGro"
  "up_Ladder_6v6\020\002\022\036\n\032k_eTFMatchGroup_Ladde"
  "r_9v9\020\003\022 \n\034k_eTFMatchGroup_Ladder_12v12\020"
  "\004\022\"\n\036k_eTFMatchGroup_Ladder_Default\020\002\022 \n"
  "\034k_eTFMatchGroup_Ladder_First\020\002\022\037\n\033k_eTF"
  "MatchGroup_Ladder_Last\020\004\022\036\n\032k_eTFMatchGr"
  "oup_Casual_6v6\020\005\022\036\n\032k_eTFMatchGroup_Casu"
  "al_9v9\020\006\022 \n\034k_eTFMatchGroup_Casual_12v12"
  "\020\007\022\"\n\036k_eTFMatchGroup_Casual_Default\020\007\022 "
  "\n\034k_eTFMatchGroup_Casual_First\020\005\022\037\n\033k_eT"
  "FMatchGroup_Casual_Last\020\007\022%\n!k_eTFMatchG"
  "roup_Event_Placeholder\020\010\022!\n\035k_eTFMatchGr"
  "oup_Event_Default\020\010\022\037\n\033k_eTFMatchGroup_E"
  "vent_First\020\010\022\036\n\032k_eTFMatchGroup_Event_La"
  "st\020\010\032\002\020\001*\301\002\n\020ETFPartyChatType\022\036\n\032k_eTFPa"
  "rtyChatType_Invalid\020\000\022!\n\035k_eTFPartyChatT"
  "ype_MemberChat\020\001\022,\n\'k_eTFPartyChatType_S"
  "ynthetic_MemberJoin\020\350\007\022-\n(k_eTFPartyChat"
  "Type_Synthetic_MemberLeave\020\351\007\022,\n\'k_eTFPa"
  "rtyChatType_Synthetic_SendFailed\020\352\007\022.\n)k"
  "_eTFPartyChatType_Synthetic_MemberOnline"
  "\020\353\007\022/\n*k_eTFPartyChatType_Synthetic_Memb"
  "erOffline\020\354\007*\201\002\n\017TF_GC_GameState\022\036\n\032TF_G"
  "C_GAMESTATE_STATE_INIT\020\000\022,\n(TF_GC_GAMEST"
  "ATE_WAIT_FOR_PLAYERS_TO_LOAD\020\001\022!\n\035TF_GC_"
  "GAMESTATE_STRATEGY_TIME\020\003\022$\n TF_GC_GAMES"
  "TATE_GAME_IN_PROGRESS\020\005\022\035\n\031TF_GC_GAMESTA"
  "TE_POST_GAME\020\006\022\036\n\032TF_GC_GAMESTATE_DISCON"
  "NECT\020\007\022\030\n\024TF_GC_GAMESTATE_LAST\020\010*\250\001\n\nTF_"
  "GC_TEAM\022\030\n\024TF_GC_TEAM_DEFENDERS\020\000\022\027\n\023TF_"
  "GC_TEAM_INVADERS\020\001\022\032\n\026TF_GC_TEAM_BROADCA"
  "STER\020\002\022\030\n\024TF_GC_TEAM_SPECTATOR\020\003\022\032\n\026TF_G"
  "C_TEAM_PLAYER_POOL\020\004\022\025\n\021TF_GC_TEAM_NOTEA"
  "M\020\005*\372\001\n\022TFMatchLeaveReason\022\"\n\036TFMatchLea"
  "veReason_UNSPECIFIED\020\000\022 \n\034TFMatchLeaveRe"
  "ason_VOTE_KICK\020\001\022\033\n\027TFMatchLeaveReason_I"
  "DLE\020\002\022!\n\035TFMatchLeaveReason_ADMIN_KICK\020\003"
  "\022\033\n\027TFMatchLeaveReason_AWOL\020\004\022\036\n\032TFMatch"
  "LeaveReason_NO_SHOW\020\005\022!\n\035TFMatchLeaveRea"
  "son_GC_REMOVED\020\006*\207\001\n\020TFVoteKickReason\022\032\n"
  "\026TFVoteKickReason_Other\020\000\022\035\n\031TFVoteKickR"
  "eason_Cheating\020\001\022\031\n\025TFVoteKickReason_Idl"
  "e\020\002\022\035\n\031TFVoteKickReason_Scamming\020\003*\363\001\n\026S"
  "erverMatchmakingState\022\"\n\036ServerMatchmaki"
  "ngState_INVALID\020\000\022,\n(ServerMatchmakingSt"
  "ate_NOT_PARTICIPATING\020\001\022 \n\034ServerMatchma"
  "kingState_EMPTY\020\002\022<\n8ServerMatchmakingSt"
  "ate_ACTIVE_MATCH_REQUESTING_LATE_JOIN\020\003\022"
  "\'\n#ServerMatchmakingState_ACTIVE_MATCH\020\004"
  "*\234\001\n\022SurveyQuestionType\022\032\n\026QUESTION_MATC"
  "H_QUALITY\020\000\022\030\n\024QUESTION_MAP_QUALITY\020\001\022\031\n"
  "\025QUESTION_COMP_INQUIRY\020\002\022\033\n\027QUESTION_CAS"
  "UAL_INQUIRY\020\003\022\030\n\024QUESTION_RANDOM_CRIT\020\004B"
  "\005H\001\200\001\000"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_tf_5fgcmessages_2eproto_deps[2] = {
  &::descriptor_table_base_5fgcmessages_2eproto,
  &::descriptor_table_steammessages_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_tf_5fgcmessages_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tf_5fgcmessages_2eproto = {
  false, false, 34886, descriptor_table_protodef_tf_5fgcmessages_2eproto, "tf_gcmessages.proto", 
  &descriptor_table_tf_5fgcmessages_2eproto_once, descriptor_table_tf_5fgcmessages_2eproto_deps, 2, 192,
  schemas, file_default_instances, TableStruct_tf_5fgcmessages_2eproto::offsets,
  file_level_metadata_tf_5fgcmessages_2eproto, file_level_enum_descriptors_tf_5fgcmessages_2eproto, file_level_service_descriptors_tf_5fgcmessages_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_tf_5fgcmessages_2eproto_getter() {
  return &descriptor_table_tf_5fgcmessages_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_tf_5fgcmessages_2eproto(&descriptor_table_tf_5fgcmessages_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgGC_GameServer_CreateIdentityResponse_EStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tf_5fgcmessages_2eproto);
  return file_level_enum_descriptors_tf_5fgcmessages_2eproto[0];
}
bool CMsgGC_GameServer_CreateIdentityResponse_EStatus_IsValid(int value) {
  switch (value) {
    case -2:
    case -1:
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgGC_GameServer_CreateIdentityResponse_EStatus CMsgGC_GameServer_CreateIdentityResponse::kStatus_GenericFailure;
constexpr CMsgGC_GameServer_CreateIdentityResponse_EStatus CMsgGC_GameServer_CreateIdentityResponse::kStatus_TooMany;
constexpr CMsgGC_GameServer_CreateIdentityResponse_EStatus CMsgGC_GameServer_CreateIdentityResponse::kStatus_NoPrivs;
constexpr CMsgGC_GameServer_CreateIdentityResponse_EStatus CMsgGC_GameServer_CreateIdentityResponse::kStatus_Created;
constexpr CMsgGC_GameServer_CreateIdentityResponse_EStatus CMsgGC_GameServer_CreateIdentityResponse::EStatus_MIN;
constexpr CMsgGC_GameServer_CreateIdentityResponse_EStatus CMsgGC_GameServer_CreateIdentityResponse::EStatus_MAX;
constexpr int CMsgGC_GameServer_CreateIdentityResponse::EStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tf_5fgcmessages_2eproto);
  return file_level_enum_descriptors_tf_5fgcmessages_2eproto[1];
}
bool CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse CMsgGC_Client_UseServerModificationItem_Response::kServerModificationItemResponse_AlreadyInUse;
constexpr CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse CMsgGC_Client_UseServerModificationItem_Response::kServerModificationItemResponse_NotOnAuthenticatedServer;
constexpr CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse CMsgGC_Client_UseServerModificationItem_Response::kServerModificationItemResponse_ServerReject;
constexpr CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse CMsgGC_Client_UseServerModificationItem_Response::kServerModificationItemResponse_InternalError;
constexpr CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse CMsgGC_Client_UseServerModificationItem_Response::kServerModificationItemResponse_EventAlreadyActive;
constexpr CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse CMsgGC_Client_UseServerModificationItem_Response::EServerModificationItemResponse_MIN;
constexpr CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse CMsgGC_Client_UseServerModificationItem_Response::EServerModificationItemResponse_MAX;
constexpr int CMsgGC_Client_UseServerModificationItem_Response::EServerModificationItemResponse_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgGC_GameServer_UseServerModificationItem_Response_EServerModificationItemServerResponse_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tf_5fgcmessages_2eproto);
  return file_level_enum_descriptors_tf_5fgcmessages_2eproto[2];
}
bool CMsgGC_GameServer_UseServerModificationItem_Response_EServerModificationItemServerResponse_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgGC_GameServer_UseServerModificationItem_Response_EServerModificationItemServerResponse CMsgGC_GameServer_UseServerModificationItem_Response::kServerModificationItemServerResponse_Accepted;
constexpr CMsgGC_GameServer_UseServerModificationItem_Response_EServerModificationItemServerResponse CMsgGC_GameServer_UseServerModificationItem_Response::kServerModificationItemServerResponse_NoVoteCalled;
constexpr CMsgGC_GameServer_UseServerModificationItem_Response_EServerModificationItemServerResponse CMsgGC_GameServer_UseServerModificationItem_Response::kServerModificationItemServerResponse_VoteFailed;
constexpr CMsgGC_GameServer_UseServerModificationItem_Response_EServerModificationItemServerResponse CMsgGC_GameServer_UseServerModificationItem_Response::EServerModificationItemServerResponse_MIN;
constexpr CMsgGC_GameServer_UseServerModificationItem_Response_EServerModificationItemServerResponse CMsgGC_GameServer_UseServerModificationItem_Response::EServerModificationItemServerResponse_MAX;
constexpr int CMsgGC_GameServer_UseServerModificationItem_Response::EServerModificationItemServerResponse_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TFPendingPartyMember_EType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tf_5fgcmessages_2eproto);
  return file_level_enum_descriptors_tf_5fgcmessages_2eproto[3];
}
bool TFPendingPartyMember_EType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TFPendingPartyMember_EType TFPendingPartyMember::Invited;
constexpr TFPendingPartyMember_EType TFPendingPartyMember::RequestedToJoin;
constexpr TFPendingPartyMember_EType TFPendingPartyMember::EType_MIN;
constexpr TFPendingPartyMember_EType TFPendingPartyMember::EType_MAX;
constexpr int TFPendingPartyMember::EType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CSOTFPartyInvite_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tf_5fgcmessages_2eproto);
  return file_level_enum_descriptors_tf_5fgcmessages_2eproto[4];
}
bool CSOTFPartyInvite_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CSOTFPartyInvite_Type CSOTFPartyInvite::PENDING_INVITE;
constexpr CSOTFPartyInvite_Type CSOTFPartyInvite::PENDING_JOIN_REQUEST;
constexpr CSOTFPartyInvite_Type CSOTFPartyInvite::Type_MIN;
constexpr CSOTFPartyInvite_Type CSOTFPartyInvite::Type_MAX;
constexpr int CSOTFPartyInvite::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CTFLobbyPlayerProto_ConnectState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tf_5fgcmessages_2eproto);
  return file_level_enum_descriptors_tf_5fgcmessages_2eproto[5];
}
bool CTFLobbyPlayerProto_ConnectState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CTFLobbyPlayerProto_ConnectState CTFLobbyPlayerProto::INVALID;
constexpr CTFLobbyPlayerProto_ConnectState CTFLobbyPlayerProto::RESERVATION_PENDING;
constexpr CTFLobbyPlayerProto_ConnectState CTFLobbyPlayerProto::RESERVED;
constexpr CTFLobbyPlayerProto_ConnectState CTFLobbyPlayerProto::CONNECTED;
constexpr CTFLobbyPlayerProto_ConnectState CTFLobbyPlayerProto::DISCONNECTED;
constexpr CTFLobbyPlayerProto_ConnectState CTFLobbyPlayerProto::ConnectState_MIN;
constexpr CTFLobbyPlayerProto_ConnectState CTFLobbyPlayerProto::ConnectState_MAX;
constexpr int CTFLobbyPlayerProto::ConnectState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CTFLobbyPlayerProto_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tf_5fgcmessages_2eproto);
  return file_level_enum_descriptors_tf_5fgcmessages_2eproto[6];
}
bool CTFLobbyPlayerProto_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CTFLobbyPlayerProto_Type CTFLobbyPlayerProto::INVALID_PLAYER;
constexpr CTFLobbyPlayerProto_Type CTFLobbyPlayerProto::MATCH_PLAYER;
constexpr CTFLobbyPlayerProto_Type CTFLobbyPlayerProto::STANDBY_PLAYER;
constexpr CTFLobbyPlayerProto_Type CTFLobbyPlayerProto::OBSERVING_PLAYER;
constexpr CTFLobbyPlayerProto_Type CTFLobbyPlayerProto::Type_MIN;
constexpr CTFLobbyPlayerProto_Type CTFLobbyPlayerProto::Type_MAX;
constexpr int CTFLobbyPlayerProto::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CSOTFGameServerLobby_State_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tf_5fgcmessages_2eproto);
  return file_level_enum_descriptors_tf_5fgcmessages_2eproto[7];
}
bool CSOTFGameServerLobby_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CSOTFGameServerLobby_State CSOTFGameServerLobby::UNKNOWN;
constexpr CSOTFGameServerLobby_State CSOTFGameServerLobby::SERVERSETUP;
constexpr CSOTFGameServerLobby_State CSOTFGameServerLobby::RUN;
constexpr CSOTFGameServerLobby_State CSOTFGameServerLobby::State_MIN;
constexpr CSOTFGameServerLobby_State CSOTFGameServerLobby::State_MAX;
constexpr int CSOTFGameServerLobby::State_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CSOTFGameServerLobby_WarMatch_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tf_5fgcmessages_2eproto);
  return file_level_enum_descriptors_tf_5fgcmessages_2eproto[8];
}
bool CSOTFGameServerLobby_WarMatch_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CSOTFGameServerLobby_WarMatch CSOTFGameServerLobby::NOPE;
constexpr CSOTFGameServerLobby_WarMatch CSOTFGameServerLobby::INVADERS_ARE_PYRO;
constexpr CSOTFGameServerLobby_WarMatch CSOTFGameServerLobby::INVADERS_ARE_HEAVY;
constexpr CSOTFGameServerLobby_WarMatch CSOTFGameServerLobby::WarMatch_MIN;
constexpr CSOTFGameServerLobby_WarMatch CSOTFGameServerLobby::WarMatch_MAX;
constexpr int CSOTFGameServerLobby::WarMatch_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgGameServerMatchmakingStatus_PlayerConnectState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tf_5fgcmessages_2eproto);
  return file_level_enum_descriptors_tf_5fgcmessages_2eproto[9];
}
bool CMsgGameServerMatchmakingStatus_PlayerConnectState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgGameServerMatchmakingStatus_PlayerConnectState CMsgGameServerMatchmakingStatus::INVALID;
constexpr CMsgGameServerMatchmakingStatus_PlayerConnectState CMsgGameServerMatchmakingStatus::CONNECTED;
constexpr CMsgGameServerMatchmakingStatus_PlayerConnectState CMsgGameServerMatchmakingStatus::RESERVED;
constexpr CMsgGameServerMatchmakingStatus_PlayerConnectState CMsgGameServerMatchmakingStatus::PlayerConnectState_MIN;
constexpr CMsgGameServerMatchmakingStatus_PlayerConnectState CMsgGameServerMatchmakingStatus::PlayerConnectState_MAX;
constexpr int CMsgGameServerMatchmakingStatus::PlayerConnectState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgGameServerMatchmakingStatus_Event_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tf_5fgcmessages_2eproto);
  return file_level_enum_descriptors_tf_5fgcmessages_2eproto[10];
}
bool CMsgGameServerMatchmakingStatus_Event_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgGameServerMatchmakingStatus_Event CMsgGameServerMatchmakingStatus::None;
constexpr CMsgGameServerMatchmakingStatus_Event CMsgGameServerMatchmakingStatus::MvMVictory;
constexpr CMsgGameServerMatchmakingStatus_Event CMsgGameServerMatchmakingStatus::MvMDefeat;
constexpr CMsgGameServerMatchmakingStatus_Event CMsgGameServerMatchmakingStatus::AcknowledgePlayers;
constexpr CMsgGameServerMatchmakingStatus_Event CMsgGameServerMatchmakingStatus::Event_MIN;
constexpr CMsgGameServerMatchmakingStatus_Event CMsgGameServerMatchmakingStatus::Event_MAX;
constexpr int CMsgGameServerMatchmakingStatus::Event_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgMvMVictoryInfo_GrantReason_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tf_5fgcmessages_2eproto);
  return file_level_enum_descriptors_tf_5fgcmessages_2eproto[11];
}
bool CMsgMvMVictoryInfo_GrantReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgMvMVictoryInfo_GrantReason CMsgMvMVictoryInfo::INVALID;
constexpr CMsgMvMVictoryInfo_GrantReason CMsgMvMVictoryInfo::BADGE_LEVELED;
constexpr CMsgMvMVictoryInfo_GrantReason CMsgMvMVictoryInfo::SQUAD_SURPLUS;
constexpr CMsgMvMVictoryInfo_GrantReason CMsgMvMVictoryInfo::MANN_UP;
constexpr CMsgMvMVictoryInfo_GrantReason CMsgMvMVictoryInfo::HELP_A_NOOB;
constexpr CMsgMvMVictoryInfo_GrantReason CMsgMvMVictoryInfo::GrantReason_MIN;
constexpr CMsgMvMVictoryInfo_GrantReason CMsgMvMVictoryInfo::GrantReason_MAX;
constexpr int CMsgMvMVictoryInfo::GrantReason_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgTFXPSource_XPSourceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tf_5fgcmessages_2eproto);
  return file_level_enum_descriptors_tf_5fgcmessages_2eproto[12];
}
bool CMsgTFXPSource_XPSourceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgTFXPSource_XPSourceType CMsgTFXPSource::SOURCE_SCORE;
constexpr CMsgTFXPSource_XPSourceType CMsgTFXPSource::SOURCE_OBJECTIVE_BONUS;
constexpr CMsgTFXPSource_XPSourceType CMsgTFXPSource::SOURCE_COMPLETED_MATCH;
constexpr CMsgTFXPSource_XPSourceType CMsgTFXPSource::SOURCE_COMPETITIVE_ABANDON;
constexpr CMsgTFXPSource_XPSourceType CMsgTFXPSource::SOURCE_COMPETITIVE_WIN;
constexpr CMsgTFXPSource_XPSourceType CMsgTFXPSource::SOURCE_COMPETITIVE_LOSS;
constexpr CMsgTFXPSource_XPSourceType CMsgTFXPSource::SOURCE_AUTOBALANCE_BONUS;
constexpr CMsgTFXPSource_XPSourceType CMsgTFXPSource::SOURCE_PRESTIGE_BONUS;
constexpr CMsgTFXPSource_XPSourceType CMsgTFXPSource::XPSourceType_MIN;
constexpr CMsgTFXPSource_XPSourceType CMsgTFXPSource::XPSourceType_MAX;
constexpr int CMsgTFXPSource::XPSourceType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgGCNotification_NotificationType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tf_5fgcmessages_2eproto);
  return file_level_enum_descriptors_tf_5fgcmessages_2eproto[13];
}
bool CMsgGCNotification_NotificationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgGCNotification_NotificationType CMsgGCNotification::NOTIFICATION_REPORTED_PLAYER_BANNED;
constexpr CMsgGCNotification_NotificationType CMsgGCNotification::NOTIFICATION_CUSTOM_STRING;
constexpr CMsgGCNotification_NotificationType CMsgGCNotification::NOTIFICATION_MM_BAN_DUE_TO_EXCESSIVE_REPORTS;
constexpr CMsgGCNotification_NotificationType CMsgGCNotification::NOTIFICATION_REPORTED_PLAYER_WAS_BANNED;
constexpr CMsgGCNotification_NotificationType CMsgGCNotification::NOTIFICATION_SUPPORT_MESSAGE;
constexpr CMsgGCNotification_NotificationType CMsgGCNotification::NOTIFICATION_NUM_TYPES;
constexpr CMsgGCNotification_NotificationType CMsgGCNotification::NotificationType_MIN;
constexpr CMsgGCNotification_NotificationType CMsgGCNotification::NotificationType_MAX;
constexpr int CMsgGCNotification::NotificationType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgGC_Match_Result_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tf_5fgcmessages_2eproto);
  return file_level_enum_descriptors_tf_5fgcmessages_2eproto[14];
}
bool CMsgGC_Match_Result_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgGC_Match_Result_Status CMsgGC_Match_Result::MATCH_SUCCEEDED;
constexpr CMsgGC_Match_Result_Status CMsgGC_Match_Result::MATCH_FAILED_GC;
constexpr CMsgGC_Match_Result_Status CMsgGC_Match_Result::MATCH_FAILED_TRUSTED;
constexpr CMsgGC_Match_Result_Status CMsgGC_Match_Result::MATCH_FAILED_ABANDON;
constexpr CMsgGC_Match_Result_Status CMsgGC_Match_Result::MATCH_FAILED_UNKNOWN;
constexpr CMsgGC_Match_Result_Status CMsgGC_Match_Result::MATCH_FAILED_TIMEOUT;
constexpr CMsgGC_Match_Result_Status CMsgGC_Match_Result::MATCH_FINISHED_ABANDON;
constexpr CMsgGC_Match_Result_Status CMsgGC_Match_Result::Status_MIN;
constexpr CMsgGC_Match_Result_Status CMsgGC_Match_Result::Status_MAX;
constexpr int CMsgGC_Match_Result::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgGC_ReportPlayer_EReason_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tf_5fgcmessages_2eproto);
  return file_level_enum_descriptors_tf_5fgcmessages_2eproto[15];
}
bool CMsgGC_ReportPlayer_EReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgGC_ReportPlayer_EReason CMsgGC_ReportPlayer::kReason_INVALID;
constexpr CMsgGC_ReportPlayer_EReason CMsgGC_ReportPlayer::kReason_CHEATING;
constexpr CMsgGC_ReportPlayer_EReason CMsgGC_ReportPlayer::kReason_IDLE;
constexpr CMsgGC_ReportPlayer_EReason CMsgGC_ReportPlayer::kReason_HARASSMENT;
constexpr CMsgGC_ReportPlayer_EReason CMsgGC_ReportPlayer::kReason_GRIEFING;
constexpr CMsgGC_ReportPlayer_EReason CMsgGC_ReportPlayer::kReason_COUNT;
constexpr CMsgGC_ReportPlayer_EReason CMsgGC_ReportPlayer::EReason_MIN;
constexpr CMsgGC_ReportPlayer_EReason CMsgGC_ReportPlayer::EReason_MAX;
constexpr int CMsgGC_ReportPlayer::EReason_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgGCDataCenterPing_Update_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tf_5fgcmessages_2eproto);
  return file_level_enum_descriptors_tf_5fgcmessages_2eproto[16];
}
bool CMsgGCDataCenterPing_Update_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgGCDataCenterPing_Update_Status CMsgGCDataCenterPing_Update::Invalid;
constexpr CMsgGCDataCenterPing_Update_Status CMsgGCDataCenterPing_Update::Normal;
constexpr CMsgGCDataCenterPing_Update_Status CMsgGCDataCenterPing_Update::Unreachable;
constexpr CMsgGCDataCenterPing_Update_Status CMsgGCDataCenterPing_Update::FallbackToDCPing;
constexpr CMsgGCDataCenterPing_Update_Status CMsgGCDataCenterPing_Update::Status_MIN;
constexpr CMsgGCDataCenterPing_Update_Status CMsgGCDataCenterPing_Update::Status_MAX;
constexpr int CMsgGCDataCenterPing_Update::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ETFGCMsg_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tf_5fgcmessages_2eproto);
  return file_level_enum_descriptors_tf_5fgcmessages_2eproto[17];
}
bool ETFGCMsg_IsValid(int value) {
  switch (value) {
    case 5001:
    case 5020:
    case 5021:
    case 5022:
    case 5023:
    case 5024:
    case 5026:
    case 5027:
    case 5028:
    case 5029:
    case 5030:
    case 5031:
    case 5032:
    case 5033:
    case 5034:
    case 5200:
    case 5201:
    case 5202:
    case 5203:
    case 5204:
    case 5205:
    case 5206:
    case 5207:
    case 5208:
    case 5209:
    case 5210:
    case 5211:
    case 5212:
    case 5213:
    case 5500:
    case 5501:
    case 5502:
    case 5503:
    case 5600:
    case 5601:
    case 5604:
    case 5605:
    case 5606:
    case 5607:
    case 5608:
    case 5609:
    case 5610:
    case 5611:
    case 5612:
    case 5613:
    case 5614:
    case 5700:
    case 5701:
    case 5702:
    case 5703:
    case 5704:
    case 5705:
    case 5706:
    case 5707:
    case 5708:
    case 5709:
    case 5710:
    case 5711:
    case 5712:
    case 5713:
    case 5714:
    case 5715:
    case 5716:
    case 5717:
    case 5800:
    case 5801:
    case 5802:
    case 6000:
    case 6001:
    case 6100:
    case 6101:
    case 6235:
    case 6237:
    case 6260:
    case 6261:
    case 6270:
    case 6271:
    case 6272:
    case 6287:
    case 6289:
    case 6293:
    case 6294:
    case 6295:
    case 6297:
    case 6298:
    case 6299:
    case 6300:
    case 6400:
    case 6401:
    case 6402:
    case 6403:
    case 6500:
    case 6501:
    case 6502:
    case 6503:
    case 6505:
    case 6506:
    case 6507:
    case 6508:
    case 6510:
    case 6511:
    case 6512:
    case 6513:
    case 6514:
    case 6516:
    case 6517:
    case 6518:
    case 6519:
    case 6520:
    case 6521:
    case 6522:
    case 6523:
    case 6524:
    case 6525:
    case 6526:
    case 6527:
    case 6528:
    case 6529:
    case 6530:
    case 6531:
    case 6534:
    case 6535:
    case 6536:
    case 6537:
    case 6538:
    case 6539:
    case 6540:
    case 6541:
    case 6542:
    case 6544:
    case 6545:
    case 6547:
    case 6549:
    case 6550:
    case 6553:
    case 6554:
    case 6555:
    case 6556:
    case 6557:
    case 6558:
    case 6559:
    case 6560:
    case 6561:
    case 6562:
    case 6563:
    case 6564:
    case 6565:
    case 6566:
    case 6567:
    case 6568:
    case 6569:
    case 6570:
    case 6571:
    case 6572:
    case 6573:
    case 6574:
    case 6575:
    case 6576:
    case 6577:
    case 6578:
    case 6579:
    case 6581:
    case 6582:
    case 10001:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EServerModificationItemType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tf_5fgcmessages_2eproto);
  return file_level_enum_descriptors_tf_5fgcmessages_2eproto[18];
}
bool EServerModificationItemType_IsValid(int value) {
  switch (value) {
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ETFSyncedMMMenuStep_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tf_5fgcmessages_2eproto);
  return file_level_enum_descriptors_tf_5fgcmessages_2eproto[19];
}
bool ETFSyncedMMMenuStep_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ETFMatchGroup_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tf_5fgcmessages_2eproto);
  return file_level_enum_descriptors_tf_5fgcmessages_2eproto[20];
}
bool ETFMatchGroup_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ETFPartyChatType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tf_5fgcmessages_2eproto);
  return file_level_enum_descriptors_tf_5fgcmessages_2eproto[21];
}
bool ETFPartyChatType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 1000:
    case 1001:
    case 1002:
    case 1003:
    case 1004:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TF_GC_GameState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tf_5fgcmessages_2eproto);
  return file_level_enum_descriptors_tf_5fgcmessages_2eproto[22];
}
bool TF_GC_GameState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 3:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TF_GC_TEAM_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tf_5fgcmessages_2eproto);
  return file_level_enum_descriptors_tf_5fgcmessages_2eproto[23];
}
bool TF_GC_TEAM_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TFMatchLeaveReason_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tf_5fgcmessages_2eproto);
  return file_level_enum_descriptors_tf_5fgcmessages_2eproto[24];
}
bool TFMatchLeaveReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TFVoteKickReason_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tf_5fgcmessages_2eproto);
  return file_level_enum_descriptors_tf_5fgcmessages_2eproto[25];
}
bool TFVoteKickReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServerMatchmakingState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tf_5fgcmessages_2eproto);
  return file_level_enum_descriptors_tf_5fgcmessages_2eproto[26];
}
bool ServerMatchmakingState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SurveyQuestionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tf_5fgcmessages_2eproto);
  return file_level_enum_descriptors_tf_5fgcmessages_2eproto[27];
}
bool SurveyQuestionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CMsgTFGoldenWrenchBroadcast::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgTFGoldenWrenchBroadcast>()._has_bits_);
  static void set_has_wrench_number(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_deleted(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_user_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgTFGoldenWrenchBroadcast::CMsgTFGoldenWrenchBroadcast(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgTFGoldenWrenchBroadcast)
}
CMsgTFGoldenWrenchBroadcast::CMsgTFGoldenWrenchBroadcast(const CMsgTFGoldenWrenchBroadcast& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_name()) {
    user_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&wrench_number_, &from.wrench_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&deleted_) -
    reinterpret_cast<char*>(&wrench_number_)) + sizeof(deleted_));
  // @@protoc_insertion_point(copy_constructor:CMsgTFGoldenWrenchBroadcast)
}

void CMsgTFGoldenWrenchBroadcast::SharedCtor() {
user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&wrench_number_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&deleted_) -
    reinterpret_cast<char*>(&wrench_number_)) + sizeof(deleted_));
}

CMsgTFGoldenWrenchBroadcast::~CMsgTFGoldenWrenchBroadcast() {
  // @@protoc_insertion_point(destructor:CMsgTFGoldenWrenchBroadcast)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgTFGoldenWrenchBroadcast::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  user_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgTFGoldenWrenchBroadcast::ArenaDtor(void* object) {
  CMsgTFGoldenWrenchBroadcast* _this = reinterpret_cast< CMsgTFGoldenWrenchBroadcast* >(object);
  (void)_this;
}
void CMsgTFGoldenWrenchBroadcast::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgTFGoldenWrenchBroadcast::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgTFGoldenWrenchBroadcast::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgTFGoldenWrenchBroadcast)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    user_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&wrench_number_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&deleted_) -
        reinterpret_cast<char*>(&wrench_number_)) + sizeof(deleted_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgTFGoldenWrenchBroadcast::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 wrench_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_wrench_number(&has_bits);
          wrench_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool deleted = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_deleted(&has_bits);
          deleted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string user_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_user_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgTFGoldenWrenchBroadcast.user_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgTFGoldenWrenchBroadcast::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTFGoldenWrenchBroadcast)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 wrench_number = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_wrench_number(), target);
  }

  // optional bool deleted = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_deleted(), target);
  }

  // optional string user_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_name().data(), static_cast<int>(this->_internal_user_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgTFGoldenWrenchBroadcast.user_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_user_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTFGoldenWrenchBroadcast)
  return target;
}

size_t CMsgTFGoldenWrenchBroadcast::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgTFGoldenWrenchBroadcast)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string user_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_name());
    }

    // optional int32 wrench_number = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_wrench_number());
    }

    // optional bool deleted = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgTFGoldenWrenchBroadcast::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgTFGoldenWrenchBroadcast)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTFGoldenWrenchBroadcast* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgTFGoldenWrenchBroadcast>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgTFGoldenWrenchBroadcast)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgTFGoldenWrenchBroadcast)
    MergeFrom(*source);
  }
}

void CMsgTFGoldenWrenchBroadcast::MergeFrom(const CMsgTFGoldenWrenchBroadcast& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgTFGoldenWrenchBroadcast)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_user_name(from._internal_user_name());
    }
    if (cached_has_bits & 0x00000002u) {
      wrench_number_ = from.wrench_number_;
    }
    if (cached_has_bits & 0x00000004u) {
      deleted_ = from.deleted_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgTFGoldenWrenchBroadcast::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgTFGoldenWrenchBroadcast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFGoldenWrenchBroadcast::CopyFrom(const CMsgTFGoldenWrenchBroadcast& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgTFGoldenWrenchBroadcast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFGoldenWrenchBroadcast::IsInitialized() const {
  return true;
}

void CMsgTFGoldenWrenchBroadcast::InternalSwap(CMsgTFGoldenWrenchBroadcast* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &user_name_, GetArenaForAllocation(),
      &other->user_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgTFGoldenWrenchBroadcast, deleted_)
      + sizeof(CMsgTFGoldenWrenchBroadcast::deleted_)
      - PROTOBUF_FIELD_OFFSET(CMsgTFGoldenWrenchBroadcast, wrench_number_)>(
          reinterpret_cast<char*>(&wrench_number_),
          reinterpret_cast<char*>(&other->wrench_number_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgTFGoldenWrenchBroadcast::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[0]);
}

// ===================================================================

class CMsgTFSaxxyBroadcast::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgTFSaxxyBroadcast>()._has_bits_);
  static void set_has_category_number(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_user_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgTFSaxxyBroadcast::CMsgTFSaxxyBroadcast(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgTFSaxxyBroadcast)
}
CMsgTFSaxxyBroadcast::CMsgTFSaxxyBroadcast(const CMsgTFSaxxyBroadcast& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_name()) {
    user_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_name(), 
      GetArenaForAllocation());
  }
  category_number_ = from.category_number_;
  // @@protoc_insertion_point(copy_constructor:CMsgTFSaxxyBroadcast)
}

void CMsgTFSaxxyBroadcast::SharedCtor() {
user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
category_number_ = 0;
}

CMsgTFSaxxyBroadcast::~CMsgTFSaxxyBroadcast() {
  // @@protoc_insertion_point(destructor:CMsgTFSaxxyBroadcast)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgTFSaxxyBroadcast::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  user_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgTFSaxxyBroadcast::ArenaDtor(void* object) {
  CMsgTFSaxxyBroadcast* _this = reinterpret_cast< CMsgTFSaxxyBroadcast* >(object);
  (void)_this;
}
void CMsgTFSaxxyBroadcast::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgTFSaxxyBroadcast::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgTFSaxxyBroadcast::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgTFSaxxyBroadcast)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    user_name_.ClearNonDefaultToEmpty();
  }
  category_number_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgTFSaxxyBroadcast::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 category_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_category_number(&has_bits);
          category_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string user_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_user_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgTFSaxxyBroadcast.user_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgTFSaxxyBroadcast::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTFSaxxyBroadcast)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 category_number = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_category_number(), target);
  }

  // optional string user_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_name().data(), static_cast<int>(this->_internal_user_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgTFSaxxyBroadcast.user_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTFSaxxyBroadcast)
  return target;
}

size_t CMsgTFSaxxyBroadcast::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgTFSaxxyBroadcast)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string user_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_name());
    }

    // optional int32 category_number = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_category_number());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgTFSaxxyBroadcast::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgTFSaxxyBroadcast)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTFSaxxyBroadcast* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgTFSaxxyBroadcast>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgTFSaxxyBroadcast)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgTFSaxxyBroadcast)
    MergeFrom(*source);
  }
}

void CMsgTFSaxxyBroadcast::MergeFrom(const CMsgTFSaxxyBroadcast& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgTFSaxxyBroadcast)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_user_name(from._internal_user_name());
    }
    if (cached_has_bits & 0x00000002u) {
      category_number_ = from.category_number_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgTFSaxxyBroadcast::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgTFSaxxyBroadcast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFSaxxyBroadcast::CopyFrom(const CMsgTFSaxxyBroadcast& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgTFSaxxyBroadcast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFSaxxyBroadcast::IsInitialized() const {
  return true;
}

void CMsgTFSaxxyBroadcast::InternalSwap(CMsgTFSaxxyBroadcast* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &user_name_, GetArenaForAllocation(),
      &other->user_name_, other->GetArenaForAllocation()
  );
  swap(category_number_, other->category_number_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgTFSaxxyBroadcast::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[1]);
}

// ===================================================================

class CMsgGCTFSpecificItemBroadcast::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCTFSpecificItemBroadcast>()._has_bits_);
  static void set_has_item_def_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_was_destruction(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_user_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCTFSpecificItemBroadcast::CMsgGCTFSpecificItemBroadcast(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCTFSpecificItemBroadcast)
}
CMsgGCTFSpecificItemBroadcast::CMsgGCTFSpecificItemBroadcast(const CMsgGCTFSpecificItemBroadcast& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_name()) {
    user_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&item_def_index_, &from.item_def_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&was_destruction_) -
    reinterpret_cast<char*>(&item_def_index_)) + sizeof(was_destruction_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCTFSpecificItemBroadcast)
}

void CMsgGCTFSpecificItemBroadcast::SharedCtor() {
user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&item_def_index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&was_destruction_) -
    reinterpret_cast<char*>(&item_def_index_)) + sizeof(was_destruction_));
}

CMsgGCTFSpecificItemBroadcast::~CMsgGCTFSpecificItemBroadcast() {
  // @@protoc_insertion_point(destructor:CMsgGCTFSpecificItemBroadcast)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCTFSpecificItemBroadcast::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  user_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCTFSpecificItemBroadcast::ArenaDtor(void* object) {
  CMsgGCTFSpecificItemBroadcast* _this = reinterpret_cast< CMsgGCTFSpecificItemBroadcast* >(object);
  (void)_this;
}
void CMsgGCTFSpecificItemBroadcast::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCTFSpecificItemBroadcast::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCTFSpecificItemBroadcast::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCTFSpecificItemBroadcast)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    user_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&item_def_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&was_destruction_) -
        reinterpret_cast<char*>(&item_def_index_)) + sizeof(was_destruction_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCTFSpecificItemBroadcast::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 item_def_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_item_def_index(&has_bits);
          item_def_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool was_destruction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_was_destruction(&has_bits);
          was_destruction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string user_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_user_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGCTFSpecificItemBroadcast.user_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCTFSpecificItemBroadcast::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCTFSpecificItemBroadcast)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 item_def_index = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_item_def_index(), target);
  }

  // optional bool was_destruction = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_was_destruction(), target);
  }

  // optional string user_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_name().data(), static_cast<int>(this->_internal_user_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCTFSpecificItemBroadcast.user_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_user_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCTFSpecificItemBroadcast)
  return target;
}

size_t CMsgGCTFSpecificItemBroadcast::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCTFSpecificItemBroadcast)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string user_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_name());
    }

    // optional uint32 item_def_index = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_item_def_index());
    }

    // optional bool was_destruction = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCTFSpecificItemBroadcast::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCTFSpecificItemBroadcast)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCTFSpecificItemBroadcast* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCTFSpecificItemBroadcast>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCTFSpecificItemBroadcast)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCTFSpecificItemBroadcast)
    MergeFrom(*source);
  }
}

void CMsgGCTFSpecificItemBroadcast::MergeFrom(const CMsgGCTFSpecificItemBroadcast& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCTFSpecificItemBroadcast)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_user_name(from._internal_user_name());
    }
    if (cached_has_bits & 0x00000002u) {
      item_def_index_ = from.item_def_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      was_destruction_ = from.was_destruction_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCTFSpecificItemBroadcast::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCTFSpecificItemBroadcast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCTFSpecificItemBroadcast::CopyFrom(const CMsgGCTFSpecificItemBroadcast& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCTFSpecificItemBroadcast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCTFSpecificItemBroadcast::IsInitialized() const {
  return true;
}

void CMsgGCTFSpecificItemBroadcast::InternalSwap(CMsgGCTFSpecificItemBroadcast* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &user_name_, GetArenaForAllocation(),
      &other->user_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCTFSpecificItemBroadcast, was_destruction_)
      + sizeof(CMsgGCTFSpecificItemBroadcast::was_destruction_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCTFSpecificItemBroadcast, item_def_index_)>(
          reinterpret_cast<char*>(&item_def_index_),
          reinterpret_cast<char*>(&other->item_def_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCTFSpecificItemBroadcast::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[2]);
}

// ===================================================================

class CMsgTFWorldStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgTFWorldStatus>()._has_bits_);
  static void set_has_beta_stress_test_event_active(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_event_match_group(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_event_expire_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_active_client_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgTFWorldStatus::CMsgTFWorldStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  disabled_match_groups_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgTFWorldStatus)
}
CMsgTFWorldStatus::CMsgTFWorldStatus(const CMsgTFWorldStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      disabled_match_groups_(from.disabled_match_groups_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&beta_stress_test_event_active_, &from.beta_stress_test_event_active_,
    static_cast<size_t>(reinterpret_cast<char*>(&event_match_group_) -
    reinterpret_cast<char*>(&beta_stress_test_event_active_)) + sizeof(event_match_group_));
  // @@protoc_insertion_point(copy_constructor:CMsgTFWorldStatus)
}

void CMsgTFWorldStatus::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&beta_stress_test_event_active_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&active_client_version_) -
    reinterpret_cast<char*>(&beta_stress_test_event_active_)) + sizeof(active_client_version_));
event_match_group_ = -1;
}

CMsgTFWorldStatus::~CMsgTFWorldStatus() {
  // @@protoc_insertion_point(destructor:CMsgTFWorldStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgTFWorldStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgTFWorldStatus::ArenaDtor(void* object) {
  CMsgTFWorldStatus* _this = reinterpret_cast< CMsgTFWorldStatus* >(object);
  (void)_this;
}
void CMsgTFWorldStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgTFWorldStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgTFWorldStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgTFWorldStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  disabled_match_groups_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&beta_stress_test_event_active_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&active_client_version_) -
        reinterpret_cast<char*>(&beta_stress_test_event_active_)) + sizeof(active_client_version_));
    event_match_group_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgTFWorldStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool beta_stress_test_event_active = 1 [default = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_beta_stress_test_event_active(&has_bits);
          beta_stress_test_event_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ETFMatchGroup event_match_group = 2 [default = k_eTFMatchGroup_Invalid];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ETFMatchGroup_IsValid(val))) {
            _internal_set_event_match_group(static_cast<::ETFMatchGroup>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional fixed32 event_expire_time = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_event_expire_time(&has_bits);
          event_expire_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional uint32 active_client_version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_active_client_version(&has_bits);
          active_client_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ETFMatchGroup disabled_match_groups = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::ETFMatchGroup_IsValid(val))) {
              _internal_add_disabled_match_groups(static_cast<::ETFMatchGroup>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_disabled_match_groups(), ptr, ctx, ::ETFMatchGroup_IsValid, &_internal_metadata_, 5);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgTFWorldStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTFWorldStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool beta_stress_test_event_active = 1 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_beta_stress_test_event_active(), target);
  }

  // optional .ETFMatchGroup event_match_group = 2 [default = k_eTFMatchGroup_Invalid];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_event_match_group(), target);
  }

  // optional fixed32 event_expire_time = 3 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(3, this->_internal_event_expire_time(), target);
  }

  // optional uint32 active_client_version = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_active_client_version(), target);
  }

  // repeated .ETFMatchGroup disabled_match_groups = 5;
  for (int i = 0, n = this->_internal_disabled_match_groups_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        5, this->_internal_disabled_match_groups(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTFWorldStatus)
  return target;
}

size_t CMsgTFWorldStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgTFWorldStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ETFMatchGroup disabled_match_groups = 5;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_disabled_match_groups_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_disabled_match_groups(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bool beta_stress_test_event_active = 1 [default = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional fixed32 event_expire_time = 3 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional uint32 active_client_version = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_active_client_version());
    }

    // optional .ETFMatchGroup event_match_group = 2 [default = k_eTFMatchGroup_Invalid];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_match_group());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgTFWorldStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgTFWorldStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTFWorldStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgTFWorldStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgTFWorldStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgTFWorldStatus)
    MergeFrom(*source);
  }
}

void CMsgTFWorldStatus::MergeFrom(const CMsgTFWorldStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgTFWorldStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  disabled_match_groups_.MergeFrom(from.disabled_match_groups_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      beta_stress_test_event_active_ = from.beta_stress_test_event_active_;
    }
    if (cached_has_bits & 0x00000002u) {
      event_expire_time_ = from.event_expire_time_;
    }
    if (cached_has_bits & 0x00000004u) {
      active_client_version_ = from.active_client_version_;
    }
    if (cached_has_bits & 0x00000008u) {
      event_match_group_ = from.event_match_group_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgTFWorldStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgTFWorldStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFWorldStatus::CopyFrom(const CMsgTFWorldStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgTFWorldStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFWorldStatus::IsInitialized() const {
  return true;
}

void CMsgTFWorldStatus::InternalSwap(CMsgTFWorldStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  disabled_match_groups_.InternalSwap(&other->disabled_match_groups_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgTFWorldStatus, active_client_version_)
      + sizeof(CMsgTFWorldStatus::active_client_version_)
      - PROTOBUF_FIELD_OFFSET(CMsgTFWorldStatus, beta_stress_test_event_active_)>(
          reinterpret_cast<char*>(&beta_stress_test_event_active_),
          reinterpret_cast<char*>(&other->beta_stress_test_event_active_));
  swap(event_match_group_, other->event_match_group_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgTFWorldStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[3]);
}

// ===================================================================

class CSOTFDuelSummary::_Internal {
 public:
  using HasBits = decltype(std::declval<CSOTFDuelSummary>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_duel_wins(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_duel_losses(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_last_duel_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_last_duel_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_last_duel_status(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CSOTFDuelSummary::CSOTFDuelSummary(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSOTFDuelSummary)
}
CSOTFDuelSummary::CSOTFDuelSummary(const CSOTFDuelSummary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_duel_status_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(last_duel_status_));
  // @@protoc_insertion_point(copy_constructor:CSOTFDuelSummary)
}

void CSOTFDuelSummary::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&last_duel_status_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(last_duel_status_));
}

CSOTFDuelSummary::~CSOTFDuelSummary() {
  // @@protoc_insertion_point(destructor:CSOTFDuelSummary)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSOTFDuelSummary::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSOTFDuelSummary::ArenaDtor(void* object) {
  CSOTFDuelSummary* _this = reinterpret_cast< CSOTFDuelSummary* >(object);
  (void)_this;
}
void CSOTFDuelSummary::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSOTFDuelSummary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSOTFDuelSummary::Clear() {
// @@protoc_insertion_point(message_clear_start:CSOTFDuelSummary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&last_duel_status_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(last_duel_status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSOTFDuelSummary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1 [(.key_field) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 duel_wins = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_duel_wins(&has_bits);
          duel_wins_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 duel_losses = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_duel_losses(&has_bits);
          duel_losses_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 last_duel_account_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_last_duel_account_id(&has_bits);
          last_duel_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 last_duel_timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_last_duel_timestamp(&has_bits);
          last_duel_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 last_duel_status = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_last_duel_status(&has_bits);
          last_duel_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSOTFDuelSummary::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSOTFDuelSummary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1 [(.key_field) = true];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint32 duel_wins = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_duel_wins(), target);
  }

  // optional uint32 duel_losses = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_duel_losses(), target);
  }

  // optional uint32 last_duel_account_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_last_duel_account_id(), target);
  }

  // optional uint32 last_duel_timestamp = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_last_duel_timestamp(), target);
  }

  // optional uint32 last_duel_status = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_last_duel_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSOTFDuelSummary)
  return target;
}

size_t CSOTFDuelSummary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSOTFDuelSummary)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint32 account_id = 1 [(.key_field) = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional uint32 duel_wins = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_duel_wins());
    }

    // optional uint32 duel_losses = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_duel_losses());
    }

    // optional uint32 last_duel_account_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_last_duel_account_id());
    }

    // optional uint32 last_duel_timestamp = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_last_duel_timestamp());
    }

    // optional uint32 last_duel_status = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_last_duel_status());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSOTFDuelSummary::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSOTFDuelSummary)
  GOOGLE_DCHECK_NE(&from, this);
  const CSOTFDuelSummary* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSOTFDuelSummary>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSOTFDuelSummary)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSOTFDuelSummary)
    MergeFrom(*source);
  }
}

void CSOTFDuelSummary::MergeFrom(const CSOTFDuelSummary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSOTFDuelSummary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      duel_wins_ = from.duel_wins_;
    }
    if (cached_has_bits & 0x00000004u) {
      duel_losses_ = from.duel_losses_;
    }
    if (cached_has_bits & 0x00000008u) {
      last_duel_account_id_ = from.last_duel_account_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      last_duel_timestamp_ = from.last_duel_timestamp_;
    }
    if (cached_has_bits & 0x00000020u) {
      last_duel_status_ = from.last_duel_status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSOTFDuelSummary::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSOTFDuelSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOTFDuelSummary::CopyFrom(const CSOTFDuelSummary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSOTFDuelSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOTFDuelSummary::IsInitialized() const {
  return true;
}

void CSOTFDuelSummary::InternalSwap(CSOTFDuelSummary* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSOTFDuelSummary, last_duel_status_)
      + sizeof(CSOTFDuelSummary::last_duel_status_)
      - PROTOBUF_FIELD_OFFSET(CSOTFDuelSummary, account_id_)>(
          reinterpret_cast<char*>(&account_id_),
          reinterpret_cast<char*>(&other->account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSOTFDuelSummary::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[4]);
}

// ===================================================================

class CSOTFMapContribution::_Internal {
 public:
  using HasBits = decltype(std::declval<CSOTFMapContribution>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_def_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_contribution_level(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CSOTFMapContribution::CSOTFMapContribution(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSOTFMapContribution)
}
CSOTFMapContribution::CSOTFMapContribution(const CSOTFMapContribution& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&contribution_level_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(contribution_level_));
  // @@protoc_insertion_point(copy_constructor:CSOTFMapContribution)
}

void CSOTFMapContribution::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&contribution_level_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(contribution_level_));
}

CSOTFMapContribution::~CSOTFMapContribution() {
  // @@protoc_insertion_point(destructor:CSOTFMapContribution)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSOTFMapContribution::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSOTFMapContribution::ArenaDtor(void* object) {
  CSOTFMapContribution* _this = reinterpret_cast< CSOTFMapContribution* >(object);
  (void)_this;
}
void CSOTFMapContribution::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSOTFMapContribution::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSOTFMapContribution::Clear() {
// @@protoc_insertion_point(message_clear_start:CSOTFMapContribution)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&contribution_level_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(contribution_level_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSOTFMapContribution::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1 [(.key_field) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 def_index = 2 [(.key_field) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_def_index(&has_bits);
          def_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 contribution_level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_contribution_level(&has_bits);
          contribution_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSOTFMapContribution::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSOTFMapContribution)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1 [(.key_field) = true];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint32 def_index = 2 [(.key_field) = true];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_def_index(), target);
  }

  // optional uint32 contribution_level = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_contribution_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSOTFMapContribution)
  return target;
}

size_t CSOTFMapContribution::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSOTFMapContribution)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 account_id = 1 [(.key_field) = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional uint32 def_index = 2 [(.key_field) = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_def_index());
    }

    // optional uint32 contribution_level = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_contribution_level());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSOTFMapContribution::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSOTFMapContribution)
  GOOGLE_DCHECK_NE(&from, this);
  const CSOTFMapContribution* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSOTFMapContribution>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSOTFMapContribution)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSOTFMapContribution)
    MergeFrom(*source);
  }
}

void CSOTFMapContribution::MergeFrom(const CSOTFMapContribution& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSOTFMapContribution)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      def_index_ = from.def_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      contribution_level_ = from.contribution_level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSOTFMapContribution::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSOTFMapContribution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOTFMapContribution::CopyFrom(const CSOTFMapContribution& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSOTFMapContribution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOTFMapContribution::IsInitialized() const {
  return true;
}

void CSOTFMapContribution::InternalSwap(CSOTFMapContribution* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSOTFMapContribution, contribution_level_)
      + sizeof(CSOTFMapContribution::contribution_level_)
      - PROTOBUF_FIELD_OFFSET(CSOTFMapContribution, account_id_)>(
          reinterpret_cast<char*>(&account_id_),
          reinterpret_cast<char*>(&other->account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSOTFMapContribution::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[5]);
}

// ===================================================================

class CMsgTFFreeTrialChooseMostHelpfulFriend::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgTFFreeTrialChooseMostHelpfulFriend>()._has_bits_);
  static void set_has_account_id_friend(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgTFFreeTrialChooseMostHelpfulFriend::CMsgTFFreeTrialChooseMostHelpfulFriend(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgTFFreeTrialChooseMostHelpfulFriend)
}
CMsgTFFreeTrialChooseMostHelpfulFriend::CMsgTFFreeTrialChooseMostHelpfulFriend(const CMsgTFFreeTrialChooseMostHelpfulFriend& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_id_friend_ = from.account_id_friend_;
  // @@protoc_insertion_point(copy_constructor:CMsgTFFreeTrialChooseMostHelpfulFriend)
}

void CMsgTFFreeTrialChooseMostHelpfulFriend::SharedCtor() {
account_id_friend_ = 0u;
}

CMsgTFFreeTrialChooseMostHelpfulFriend::~CMsgTFFreeTrialChooseMostHelpfulFriend() {
  // @@protoc_insertion_point(destructor:CMsgTFFreeTrialChooseMostHelpfulFriend)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgTFFreeTrialChooseMostHelpfulFriend::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgTFFreeTrialChooseMostHelpfulFriend::ArenaDtor(void* object) {
  CMsgTFFreeTrialChooseMostHelpfulFriend* _this = reinterpret_cast< CMsgTFFreeTrialChooseMostHelpfulFriend* >(object);
  (void)_this;
}
void CMsgTFFreeTrialChooseMostHelpfulFriend::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgTFFreeTrialChooseMostHelpfulFriend::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgTFFreeTrialChooseMostHelpfulFriend::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgTFFreeTrialChooseMostHelpfulFriend)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_id_friend_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgTFFreeTrialChooseMostHelpfulFriend::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id_friend = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id_friend(&has_bits);
          account_id_friend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgTFFreeTrialChooseMostHelpfulFriend::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTFFreeTrialChooseMostHelpfulFriend)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id_friend = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id_friend(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTFFreeTrialChooseMostHelpfulFriend)
  return target;
}

size_t CMsgTFFreeTrialChooseMostHelpfulFriend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgTFFreeTrialChooseMostHelpfulFriend)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 account_id_friend = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_account_id_friend());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgTFFreeTrialChooseMostHelpfulFriend::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgTFFreeTrialChooseMostHelpfulFriend)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTFFreeTrialChooseMostHelpfulFriend* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgTFFreeTrialChooseMostHelpfulFriend>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgTFFreeTrialChooseMostHelpfulFriend)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgTFFreeTrialChooseMostHelpfulFriend)
    MergeFrom(*source);
  }
}

void CMsgTFFreeTrialChooseMostHelpfulFriend::MergeFrom(const CMsgTFFreeTrialChooseMostHelpfulFriend& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgTFFreeTrialChooseMostHelpfulFriend)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_account_id_friend()) {
    _internal_set_account_id_friend(from._internal_account_id_friend());
  }
}

void CMsgTFFreeTrialChooseMostHelpfulFriend::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgTFFreeTrialChooseMostHelpfulFriend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFFreeTrialChooseMostHelpfulFriend::CopyFrom(const CMsgTFFreeTrialChooseMostHelpfulFriend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgTFFreeTrialChooseMostHelpfulFriend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFFreeTrialChooseMostHelpfulFriend::IsInitialized() const {
  return true;
}

void CMsgTFFreeTrialChooseMostHelpfulFriend::InternalSwap(CMsgTFFreeTrialChooseMostHelpfulFriend* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(account_id_friend_, other->account_id_friend_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgTFFreeTrialChooseMostHelpfulFriend::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[6]);
}

// ===================================================================

class CMsgTFRequestTF2Friends::_Internal {
 public:
};

CMsgTFRequestTF2Friends::CMsgTFRequestTF2Friends(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  account_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgTFRequestTF2Friends)
}
CMsgTFRequestTF2Friends::CMsgTFRequestTF2Friends(const CMsgTFRequestTF2Friends& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      account_ids_(from.account_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgTFRequestTF2Friends)
}

void CMsgTFRequestTF2Friends::SharedCtor() {
}

CMsgTFRequestTF2Friends::~CMsgTFRequestTF2Friends() {
  // @@protoc_insertion_point(destructor:CMsgTFRequestTF2Friends)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgTFRequestTF2Friends::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgTFRequestTF2Friends::ArenaDtor(void* object) {
  CMsgTFRequestTF2Friends* _this = reinterpret_cast< CMsgTFRequestTF2Friends* >(object);
  (void)_this;
}
void CMsgTFRequestTF2Friends::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgTFRequestTF2Friends::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgTFRequestTF2Friends::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgTFRequestTF2Friends)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_ids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgTFRequestTF2Friends::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 account_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_account_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_account_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgTFRequestTF2Friends::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTFRequestTF2Friends)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 account_ids = 1;
  for (int i = 0, n = this->_internal_account_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_ids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTFRequestTF2Friends)
  return target;
}

size_t CMsgTFRequestTF2Friends::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgTFRequestTF2Friends)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 account_ids = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->account_ids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_account_ids_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgTFRequestTF2Friends::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgTFRequestTF2Friends)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTFRequestTF2Friends* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgTFRequestTF2Friends>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgTFRequestTF2Friends)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgTFRequestTF2Friends)
    MergeFrom(*source);
  }
}

void CMsgTFRequestTF2Friends::MergeFrom(const CMsgTFRequestTF2Friends& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgTFRequestTF2Friends)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  account_ids_.MergeFrom(from.account_ids_);
}

void CMsgTFRequestTF2Friends::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgTFRequestTF2Friends)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFRequestTF2Friends::CopyFrom(const CMsgTFRequestTF2Friends& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgTFRequestTF2Friends)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFRequestTF2Friends::IsInitialized() const {
  return true;
}

void CMsgTFRequestTF2Friends::InternalSwap(CMsgTFRequestTF2Friends* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  account_ids_.InternalSwap(&other->account_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgTFRequestTF2Friends::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[7]);
}

// ===================================================================

class CMsgTFRequestTF2FriendsResponse::_Internal {
 public:
};

CMsgTFRequestTF2FriendsResponse::CMsgTFRequestTF2FriendsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  account_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgTFRequestTF2FriendsResponse)
}
CMsgTFRequestTF2FriendsResponse::CMsgTFRequestTF2FriendsResponse(const CMsgTFRequestTF2FriendsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      account_ids_(from.account_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgTFRequestTF2FriendsResponse)
}

void CMsgTFRequestTF2FriendsResponse::SharedCtor() {
}

CMsgTFRequestTF2FriendsResponse::~CMsgTFRequestTF2FriendsResponse() {
  // @@protoc_insertion_point(destructor:CMsgTFRequestTF2FriendsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgTFRequestTF2FriendsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgTFRequestTF2FriendsResponse::ArenaDtor(void* object) {
  CMsgTFRequestTF2FriendsResponse* _this = reinterpret_cast< CMsgTFRequestTF2FriendsResponse* >(object);
  (void)_this;
}
void CMsgTFRequestTF2FriendsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgTFRequestTF2FriendsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgTFRequestTF2FriendsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgTFRequestTF2FriendsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_ids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgTFRequestTF2FriendsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 account_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_account_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_account_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgTFRequestTF2FriendsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTFRequestTF2FriendsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 account_ids = 1;
  for (int i = 0, n = this->_internal_account_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_ids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTFRequestTF2FriendsResponse)
  return target;
}

size_t CMsgTFRequestTF2FriendsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgTFRequestTF2FriendsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 account_ids = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->account_ids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_account_ids_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgTFRequestTF2FriendsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgTFRequestTF2FriendsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTFRequestTF2FriendsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgTFRequestTF2FriendsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgTFRequestTF2FriendsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgTFRequestTF2FriendsResponse)
    MergeFrom(*source);
  }
}

void CMsgTFRequestTF2FriendsResponse::MergeFrom(const CMsgTFRequestTF2FriendsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgTFRequestTF2FriendsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  account_ids_.MergeFrom(from.account_ids_);
}

void CMsgTFRequestTF2FriendsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgTFRequestTF2FriendsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFRequestTF2FriendsResponse::CopyFrom(const CMsgTFRequestTF2FriendsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgTFRequestTF2FriendsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFRequestTF2FriendsResponse::IsInitialized() const {
  return true;
}

void CMsgTFRequestTF2FriendsResponse::InternalSwap(CMsgTFRequestTF2FriendsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  account_ids_.InternalSwap(&other->account_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgTFRequestTF2FriendsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[8]);
}

// ===================================================================

class CSOTFPlayerInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CSOTFPlayerInfo>()._has_bits_);
  static void set_has_num_new_users_helped(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CSOTFPlayerInfo::CSOTFPlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSOTFPlayerInfo)
}
CSOTFPlayerInfo::CSOTFPlayerInfo(const CSOTFPlayerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  num_new_users_helped_ = from.num_new_users_helped_;
  // @@protoc_insertion_point(copy_constructor:CSOTFPlayerInfo)
}

void CSOTFPlayerInfo::SharedCtor() {
num_new_users_helped_ = 0u;
}

CSOTFPlayerInfo::~CSOTFPlayerInfo() {
  // @@protoc_insertion_point(destructor:CSOTFPlayerInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSOTFPlayerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSOTFPlayerInfo::ArenaDtor(void* object) {
  CSOTFPlayerInfo* _this = reinterpret_cast< CSOTFPlayerInfo* >(object);
  (void)_this;
}
void CSOTFPlayerInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSOTFPlayerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSOTFPlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CSOTFPlayerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  num_new_users_helped_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSOTFPlayerInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 num_new_users_helped = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_num_new_users_helped(&has_bits);
          num_new_users_helped_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSOTFPlayerInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSOTFPlayerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 num_new_users_helped = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_num_new_users_helped(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSOTFPlayerInfo)
  return target;
}

size_t CSOTFPlayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSOTFPlayerInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 num_new_users_helped = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_new_users_helped());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSOTFPlayerInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSOTFPlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CSOTFPlayerInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSOTFPlayerInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSOTFPlayerInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSOTFPlayerInfo)
    MergeFrom(*source);
  }
}

void CSOTFPlayerInfo::MergeFrom(const CSOTFPlayerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSOTFPlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_num_new_users_helped()) {
    _internal_set_num_new_users_helped(from._internal_num_new_users_helped());
  }
}

void CSOTFPlayerInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSOTFPlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOTFPlayerInfo::CopyFrom(const CSOTFPlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSOTFPlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOTFPlayerInfo::IsInitialized() const {
  return true;
}

void CSOTFPlayerInfo::InternalSwap(CSOTFPlayerInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(num_new_users_helped_, other->num_new_users_helped_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSOTFPlayerInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[9]);
}

// ===================================================================

class CMsgTFThankedBySomeone::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgTFThankedBySomeone>()._has_bits_);
  static void set_has_thanker_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgTFThankedBySomeone::CMsgTFThankedBySomeone(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgTFThankedBySomeone)
}
CMsgTFThankedBySomeone::CMsgTFThankedBySomeone(const CMsgTFThankedBySomeone& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  thanker_steam_id_ = from.thanker_steam_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgTFThankedBySomeone)
}

void CMsgTFThankedBySomeone::SharedCtor() {
thanker_steam_id_ = uint64_t{0u};
}

CMsgTFThankedBySomeone::~CMsgTFThankedBySomeone() {
  // @@protoc_insertion_point(destructor:CMsgTFThankedBySomeone)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgTFThankedBySomeone::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgTFThankedBySomeone::ArenaDtor(void* object) {
  CMsgTFThankedBySomeone* _this = reinterpret_cast< CMsgTFThankedBySomeone* >(object);
  (void)_this;
}
void CMsgTFThankedBySomeone::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgTFThankedBySomeone::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgTFThankedBySomeone::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgTFThankedBySomeone)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  thanker_steam_id_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgTFThankedBySomeone::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 thanker_steam_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_thanker_steam_id(&has_bits);
          thanker_steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgTFThankedBySomeone::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTFThankedBySomeone)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 thanker_steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_thanker_steam_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTFThankedBySomeone)
  return target;
}

size_t CMsgTFThankedBySomeone::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgTFThankedBySomeone)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 thanker_steam_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_thanker_steam_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgTFThankedBySomeone::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgTFThankedBySomeone)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTFThankedBySomeone* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgTFThankedBySomeone>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgTFThankedBySomeone)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgTFThankedBySomeone)
    MergeFrom(*source);
  }
}

void CMsgTFThankedBySomeone::MergeFrom(const CMsgTFThankedBySomeone& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgTFThankedBySomeone)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_thanker_steam_id()) {
    _internal_set_thanker_steam_id(from._internal_thanker_steam_id());
  }
}

void CMsgTFThankedBySomeone::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgTFThankedBySomeone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFThankedBySomeone::CopyFrom(const CMsgTFThankedBySomeone& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgTFThankedBySomeone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFThankedBySomeone::IsInitialized() const {
  return true;
}

void CMsgTFThankedBySomeone::InternalSwap(CMsgTFThankedBySomeone* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(thanker_steam_id_, other->thanker_steam_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgTFThankedBySomeone::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[10]);
}

// ===================================================================

class CMsgTFThankedSomeone::_Internal {
 public:
};

CMsgTFThankedSomeone::CMsgTFThankedSomeone(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgTFThankedSomeone)
}
CMsgTFThankedSomeone::CMsgTFThankedSomeone(const CMsgTFThankedSomeone& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgTFThankedSomeone)
}

void CMsgTFThankedSomeone::SharedCtor() {
}

CMsgTFThankedSomeone::~CMsgTFThankedSomeone() {
  // @@protoc_insertion_point(destructor:CMsgTFThankedSomeone)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgTFThankedSomeone::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgTFThankedSomeone::ArenaDtor(void* object) {
  CMsgTFThankedSomeone* _this = reinterpret_cast< CMsgTFThankedSomeone* >(object);
  (void)_this;
}
void CMsgTFThankedSomeone::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgTFThankedSomeone::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgTFThankedSomeone::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgTFThankedSomeone)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgTFThankedSomeone::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgTFThankedSomeone::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTFThankedSomeone)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTFThankedSomeone)
  return target;
}

size_t CMsgTFThankedSomeone::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgTFThankedSomeone)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgTFThankedSomeone::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgTFThankedSomeone)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTFThankedSomeone* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgTFThankedSomeone>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgTFThankedSomeone)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgTFThankedSomeone)
    MergeFrom(*source);
  }
}

void CMsgTFThankedSomeone::MergeFrom(const CMsgTFThankedSomeone& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgTFThankedSomeone)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgTFThankedSomeone::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgTFThankedSomeone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFThankedSomeone::CopyFrom(const CMsgTFThankedSomeone& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgTFThankedSomeone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFThankedSomeone::IsInitialized() const {
  return true;
}

void CMsgTFThankedSomeone::InternalSwap(CMsgTFThankedSomeone* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgTFThankedSomeone::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[11]);
}

// ===================================================================

class CMsgTFFreeTrialConvertedToPremium::_Internal {
 public:
};

CMsgTFFreeTrialConvertedToPremium::CMsgTFFreeTrialConvertedToPremium(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgTFFreeTrialConvertedToPremium)
}
CMsgTFFreeTrialConvertedToPremium::CMsgTFFreeTrialConvertedToPremium(const CMsgTFFreeTrialConvertedToPremium& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgTFFreeTrialConvertedToPremium)
}

void CMsgTFFreeTrialConvertedToPremium::SharedCtor() {
}

CMsgTFFreeTrialConvertedToPremium::~CMsgTFFreeTrialConvertedToPremium() {
  // @@protoc_insertion_point(destructor:CMsgTFFreeTrialConvertedToPremium)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgTFFreeTrialConvertedToPremium::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgTFFreeTrialConvertedToPremium::ArenaDtor(void* object) {
  CMsgTFFreeTrialConvertedToPremium* _this = reinterpret_cast< CMsgTFFreeTrialConvertedToPremium* >(object);
  (void)_this;
}
void CMsgTFFreeTrialConvertedToPremium::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgTFFreeTrialConvertedToPremium::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgTFFreeTrialConvertedToPremium::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgTFFreeTrialConvertedToPremium)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgTFFreeTrialConvertedToPremium::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgTFFreeTrialConvertedToPremium::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTFFreeTrialConvertedToPremium)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTFFreeTrialConvertedToPremium)
  return target;
}

size_t CMsgTFFreeTrialConvertedToPremium::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgTFFreeTrialConvertedToPremium)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgTFFreeTrialConvertedToPremium::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgTFFreeTrialConvertedToPremium)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTFFreeTrialConvertedToPremium* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgTFFreeTrialConvertedToPremium>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgTFFreeTrialConvertedToPremium)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgTFFreeTrialConvertedToPremium)
    MergeFrom(*source);
  }
}

void CMsgTFFreeTrialConvertedToPremium::MergeFrom(const CMsgTFFreeTrialConvertedToPremium& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgTFFreeTrialConvertedToPremium)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgTFFreeTrialConvertedToPremium::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgTFFreeTrialConvertedToPremium)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFFreeTrialConvertedToPremium::CopyFrom(const CMsgTFFreeTrialConvertedToPremium& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgTFFreeTrialConvertedToPremium)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFFreeTrialConvertedToPremium::IsInitialized() const {
  return true;
}

void CMsgTFFreeTrialConvertedToPremium::InternalSwap(CMsgTFFreeTrialConvertedToPremium* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgTFFreeTrialConvertedToPremium::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[12]);
}

// ===================================================================

class CMsgSaxxyAwarded::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSaxxyAwarded>()._has_bits_);
  static void set_has_category(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgSaxxyAwarded::CMsgSaxxyAwarded(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  winner_names_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSaxxyAwarded)
}
CMsgSaxxyAwarded::CMsgSaxxyAwarded(const CMsgSaxxyAwarded& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      winner_names_(from.winner_names_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  category_ = from.category_;
  // @@protoc_insertion_point(copy_constructor:CMsgSaxxyAwarded)
}

void CMsgSaxxyAwarded::SharedCtor() {
category_ = 0u;
}

CMsgSaxxyAwarded::~CMsgSaxxyAwarded() {
  // @@protoc_insertion_point(destructor:CMsgSaxxyAwarded)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSaxxyAwarded::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgSaxxyAwarded::ArenaDtor(void* object) {
  CMsgSaxxyAwarded* _this = reinterpret_cast< CMsgSaxxyAwarded* >(object);
  (void)_this;
}
void CMsgSaxxyAwarded::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSaxxyAwarded::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSaxxyAwarded::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSaxxyAwarded)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  winner_names_.Clear();
  category_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSaxxyAwarded::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 category = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_category(&has_bits);
          category_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string winner_names = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_winner_names();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgSaxxyAwarded.winner_names");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSaxxyAwarded::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSaxxyAwarded)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 category = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_category(), target);
  }

  // repeated string winner_names = 2;
  for (int i = 0, n = this->_internal_winner_names_size(); i < n; i++) {
    const auto& s = this->_internal_winner_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgSaxxyAwarded.winner_names");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSaxxyAwarded)
  return target;
}

size_t CMsgSaxxyAwarded::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSaxxyAwarded)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string winner_names = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(winner_names_.size());
  for (int i = 0, n = winner_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      winner_names_.Get(i));
  }

  // optional uint32 category = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_category());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSaxxyAwarded::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSaxxyAwarded)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSaxxyAwarded* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSaxxyAwarded>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSaxxyAwarded)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSaxxyAwarded)
    MergeFrom(*source);
  }
}

void CMsgSaxxyAwarded::MergeFrom(const CMsgSaxxyAwarded& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSaxxyAwarded)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  winner_names_.MergeFrom(from.winner_names_);
  if (from._internal_has_category()) {
    _internal_set_category(from._internal_category());
  }
}

void CMsgSaxxyAwarded::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSaxxyAwarded)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSaxxyAwarded::CopyFrom(const CMsgSaxxyAwarded& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSaxxyAwarded)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSaxxyAwarded::IsInitialized() const {
  return true;
}

void CMsgSaxxyAwarded::InternalSwap(CMsgSaxxyAwarded* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  winner_names_.InternalSwap(&other->winner_names_);
  swap(category_, other->category_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSaxxyAwarded::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[13]);
}

// ===================================================================

class CMsgReplaySubmitContestEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgReplaySubmitContestEntry>()._has_bits_);
  static void set_has_youtube_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_category(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgReplaySubmitContestEntry::CMsgReplaySubmitContestEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgReplaySubmitContestEntry)
}
CMsgReplaySubmitContestEntry::CMsgReplaySubmitContestEntry(const CMsgReplaySubmitContestEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  youtube_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_youtube_url()) {
    youtube_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_youtube_url(), 
      GetArenaForAllocation());
  }
  category_ = from.category_;
  // @@protoc_insertion_point(copy_constructor:CMsgReplaySubmitContestEntry)
}

void CMsgReplaySubmitContestEntry::SharedCtor() {
youtube_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
category_ = 0u;
}

CMsgReplaySubmitContestEntry::~CMsgReplaySubmitContestEntry() {
  // @@protoc_insertion_point(destructor:CMsgReplaySubmitContestEntry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgReplaySubmitContestEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  youtube_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgReplaySubmitContestEntry::ArenaDtor(void* object) {
  CMsgReplaySubmitContestEntry* _this = reinterpret_cast< CMsgReplaySubmitContestEntry* >(object);
  (void)_this;
}
void CMsgReplaySubmitContestEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgReplaySubmitContestEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgReplaySubmitContestEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgReplaySubmitContestEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    youtube_url_.ClearNonDefaultToEmpty();
  }
  category_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgReplaySubmitContestEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string youtube_url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_youtube_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgReplaySubmitContestEntry.youtube_url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 category = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_category(&has_bits);
          category_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgReplaySubmitContestEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgReplaySubmitContestEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string youtube_url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_youtube_url().data(), static_cast<int>(this->_internal_youtube_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgReplaySubmitContestEntry.youtube_url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_youtube_url(), target);
  }

  // optional uint32 category = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_category(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgReplaySubmitContestEntry)
  return target;
}

size_t CMsgReplaySubmitContestEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgReplaySubmitContestEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string youtube_url = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_youtube_url());
    }

    // optional uint32 category = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_category());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgReplaySubmitContestEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgReplaySubmitContestEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgReplaySubmitContestEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgReplaySubmitContestEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgReplaySubmitContestEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgReplaySubmitContestEntry)
    MergeFrom(*source);
  }
}

void CMsgReplaySubmitContestEntry::MergeFrom(const CMsgReplaySubmitContestEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgReplaySubmitContestEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_youtube_url(from._internal_youtube_url());
    }
    if (cached_has_bits & 0x00000002u) {
      category_ = from.category_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgReplaySubmitContestEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgReplaySubmitContestEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgReplaySubmitContestEntry::CopyFrom(const CMsgReplaySubmitContestEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgReplaySubmitContestEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgReplaySubmitContestEntry::IsInitialized() const {
  return true;
}

void CMsgReplaySubmitContestEntry::InternalSwap(CMsgReplaySubmitContestEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &youtube_url_, GetArenaForAllocation(),
      &other->youtube_url_, other->GetArenaForAllocation()
  );
  swap(category_, other->category_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgReplaySubmitContestEntry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[14]);
}

// ===================================================================

class CMsgReplaySubmitContestEntryResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgReplaySubmitContestEntryResponse>()._has_bits_);
  static void set_has_success(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgReplaySubmitContestEntryResponse::CMsgReplaySubmitContestEntryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgReplaySubmitContestEntryResponse)
}
CMsgReplaySubmitContestEntryResponse::CMsgReplaySubmitContestEntryResponse(const CMsgReplaySubmitContestEntryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:CMsgReplaySubmitContestEntryResponse)
}

void CMsgReplaySubmitContestEntryResponse::SharedCtor() {
success_ = false;
}

CMsgReplaySubmitContestEntryResponse::~CMsgReplaySubmitContestEntryResponse() {
  // @@protoc_insertion_point(destructor:CMsgReplaySubmitContestEntryResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgReplaySubmitContestEntryResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgReplaySubmitContestEntryResponse::ArenaDtor(void* object) {
  CMsgReplaySubmitContestEntryResponse* _this = reinterpret_cast< CMsgReplaySubmitContestEntryResponse* >(object);
  (void)_this;
}
void CMsgReplaySubmitContestEntryResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgReplaySubmitContestEntryResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgReplaySubmitContestEntryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgReplaySubmitContestEntryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  success_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgReplaySubmitContestEntryResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_success(&has_bits);
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgReplaySubmitContestEntryResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgReplaySubmitContestEntryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool success = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgReplaySubmitContestEntryResponse)
  return target;
}

size_t CMsgReplaySubmitContestEntryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgReplaySubmitContestEntryResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool success = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgReplaySubmitContestEntryResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgReplaySubmitContestEntryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgReplaySubmitContestEntryResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgReplaySubmitContestEntryResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgReplaySubmitContestEntryResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgReplaySubmitContestEntryResponse)
    MergeFrom(*source);
  }
}

void CMsgReplaySubmitContestEntryResponse::MergeFrom(const CMsgReplaySubmitContestEntryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgReplaySubmitContestEntryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_success()) {
    _internal_set_success(from._internal_success());
  }
}

void CMsgReplaySubmitContestEntryResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgReplaySubmitContestEntryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgReplaySubmitContestEntryResponse::CopyFrom(const CMsgReplaySubmitContestEntryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgReplaySubmitContestEntryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgReplaySubmitContestEntryResponse::IsInitialized() const {
  return true;
}

void CMsgReplaySubmitContestEntryResponse::InternalSwap(CMsgReplaySubmitContestEntryResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgReplaySubmitContestEntryResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[15]);
}

// ===================================================================

class CReplayCachedContestData::_Internal {
 public:
  using HasBits = decltype(std::declval<CReplayCachedContestData>()._has_bits_);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_num_votes_last_day(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_num_flags_last_day(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CReplayCachedContestData::CReplayCachedContestData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  video_entry_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CReplayCachedContestData)
}
CReplayCachedContestData::CReplayCachedContestData(const CReplayCachedContestData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      video_entry_ids_(from.video_entry_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_flags_last_day_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(num_flags_last_day_));
  // @@protoc_insertion_point(copy_constructor:CReplayCachedContestData)
}

void CReplayCachedContestData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&timestamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&num_flags_last_day_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(num_flags_last_day_));
}

CReplayCachedContestData::~CReplayCachedContestData() {
  // @@protoc_insertion_point(destructor:CReplayCachedContestData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CReplayCachedContestData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CReplayCachedContestData::ArenaDtor(void* object) {
  CReplayCachedContestData* _this = reinterpret_cast< CReplayCachedContestData* >(object);
  (void)_this;
}
void CReplayCachedContestData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CReplayCachedContestData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CReplayCachedContestData::Clear() {
// @@protoc_insertion_point(message_clear_start:CReplayCachedContestData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  video_entry_ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_flags_last_day_) -
        reinterpret_cast<char*>(&timestamp_)) + sizeof(num_flags_last_day_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CReplayCachedContestData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed32 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional uint32 num_votes_last_day = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_num_votes_last_day(&has_bits);
          num_votes_last_day_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 video_entry_ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_video_entry_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_video_entry_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 num_flags_last_day = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_num_flags_last_day(&has_bits);
          num_flags_last_day_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CReplayCachedContestData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CReplayCachedContestData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(1, this->_internal_timestamp(), target);
  }

  // optional uint32 num_votes_last_day = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_num_votes_last_day(), target);
  }

  // repeated uint32 video_entry_ids = 3;
  for (int i = 0, n = this->_internal_video_entry_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_video_entry_ids(i), target);
  }

  // optional uint32 num_flags_last_day = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_num_flags_last_day(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CReplayCachedContestData)
  return target;
}

size_t CReplayCachedContestData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CReplayCachedContestData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 video_entry_ids = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->video_entry_ids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_video_entry_ids_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional fixed32 timestamp = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional uint32 num_votes_last_day = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_num_votes_last_day());
    }

    // optional uint32 num_flags_last_day = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_num_flags_last_day());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CReplayCachedContestData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CReplayCachedContestData)
  GOOGLE_DCHECK_NE(&from, this);
  const CReplayCachedContestData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CReplayCachedContestData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CReplayCachedContestData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CReplayCachedContestData)
    MergeFrom(*source);
  }
}

void CReplayCachedContestData::MergeFrom(const CReplayCachedContestData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CReplayCachedContestData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  video_entry_ids_.MergeFrom(from.video_entry_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000002u) {
      num_votes_last_day_ = from.num_votes_last_day_;
    }
    if (cached_has_bits & 0x00000004u) {
      num_flags_last_day_ = from.num_flags_last_day_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CReplayCachedContestData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CReplayCachedContestData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CReplayCachedContestData::CopyFrom(const CReplayCachedContestData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CReplayCachedContestData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CReplayCachedContestData::IsInitialized() const {
  return true;
}

void CReplayCachedContestData::InternalSwap(CReplayCachedContestData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  video_entry_ids_.InternalSwap(&other->video_entry_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CReplayCachedContestData, num_flags_last_day_)
      + sizeof(CReplayCachedContestData::num_flags_last_day_)
      - PROTOBUF_FIELD_OFFSET(CReplayCachedContestData, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CReplayCachedContestData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[16]);
}

// ===================================================================

class CMsgTFCoaching_AddToCoaches::_Internal {
 public:
};

CMsgTFCoaching_AddToCoaches::CMsgTFCoaching_AddToCoaches(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgTFCoaching_AddToCoaches)
}
CMsgTFCoaching_AddToCoaches::CMsgTFCoaching_AddToCoaches(const CMsgTFCoaching_AddToCoaches& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgTFCoaching_AddToCoaches)
}

void CMsgTFCoaching_AddToCoaches::SharedCtor() {
}

CMsgTFCoaching_AddToCoaches::~CMsgTFCoaching_AddToCoaches() {
  // @@protoc_insertion_point(destructor:CMsgTFCoaching_AddToCoaches)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgTFCoaching_AddToCoaches::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgTFCoaching_AddToCoaches::ArenaDtor(void* object) {
  CMsgTFCoaching_AddToCoaches* _this = reinterpret_cast< CMsgTFCoaching_AddToCoaches* >(object);
  (void)_this;
}
void CMsgTFCoaching_AddToCoaches::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgTFCoaching_AddToCoaches::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgTFCoaching_AddToCoaches::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgTFCoaching_AddToCoaches)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgTFCoaching_AddToCoaches::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgTFCoaching_AddToCoaches::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTFCoaching_AddToCoaches)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTFCoaching_AddToCoaches)
  return target;
}

size_t CMsgTFCoaching_AddToCoaches::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgTFCoaching_AddToCoaches)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgTFCoaching_AddToCoaches::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgTFCoaching_AddToCoaches)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTFCoaching_AddToCoaches* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgTFCoaching_AddToCoaches>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgTFCoaching_AddToCoaches)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgTFCoaching_AddToCoaches)
    MergeFrom(*source);
  }
}

void CMsgTFCoaching_AddToCoaches::MergeFrom(const CMsgTFCoaching_AddToCoaches& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgTFCoaching_AddToCoaches)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgTFCoaching_AddToCoaches::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgTFCoaching_AddToCoaches)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFCoaching_AddToCoaches::CopyFrom(const CMsgTFCoaching_AddToCoaches& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgTFCoaching_AddToCoaches)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFCoaching_AddToCoaches::IsInitialized() const {
  return true;
}

void CMsgTFCoaching_AddToCoaches::InternalSwap(CMsgTFCoaching_AddToCoaches* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgTFCoaching_AddToCoaches::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[17]);
}

// ===================================================================

class CMsgTFCoaching_RemoveFromCoaches::_Internal {
 public:
};

CMsgTFCoaching_RemoveFromCoaches::CMsgTFCoaching_RemoveFromCoaches(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgTFCoaching_RemoveFromCoaches)
}
CMsgTFCoaching_RemoveFromCoaches::CMsgTFCoaching_RemoveFromCoaches(const CMsgTFCoaching_RemoveFromCoaches& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgTFCoaching_RemoveFromCoaches)
}

void CMsgTFCoaching_RemoveFromCoaches::SharedCtor() {
}

CMsgTFCoaching_RemoveFromCoaches::~CMsgTFCoaching_RemoveFromCoaches() {
  // @@protoc_insertion_point(destructor:CMsgTFCoaching_RemoveFromCoaches)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgTFCoaching_RemoveFromCoaches::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgTFCoaching_RemoveFromCoaches::ArenaDtor(void* object) {
  CMsgTFCoaching_RemoveFromCoaches* _this = reinterpret_cast< CMsgTFCoaching_RemoveFromCoaches* >(object);
  (void)_this;
}
void CMsgTFCoaching_RemoveFromCoaches::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgTFCoaching_RemoveFromCoaches::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgTFCoaching_RemoveFromCoaches::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgTFCoaching_RemoveFromCoaches)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgTFCoaching_RemoveFromCoaches::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgTFCoaching_RemoveFromCoaches::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTFCoaching_RemoveFromCoaches)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTFCoaching_RemoveFromCoaches)
  return target;
}

size_t CMsgTFCoaching_RemoveFromCoaches::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgTFCoaching_RemoveFromCoaches)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgTFCoaching_RemoveFromCoaches::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgTFCoaching_RemoveFromCoaches)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTFCoaching_RemoveFromCoaches* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgTFCoaching_RemoveFromCoaches>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgTFCoaching_RemoveFromCoaches)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgTFCoaching_RemoveFromCoaches)
    MergeFrom(*source);
  }
}

void CMsgTFCoaching_RemoveFromCoaches::MergeFrom(const CMsgTFCoaching_RemoveFromCoaches& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgTFCoaching_RemoveFromCoaches)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgTFCoaching_RemoveFromCoaches::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgTFCoaching_RemoveFromCoaches)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFCoaching_RemoveFromCoaches::CopyFrom(const CMsgTFCoaching_RemoveFromCoaches& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgTFCoaching_RemoveFromCoaches)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFCoaching_RemoveFromCoaches::IsInitialized() const {
  return true;
}

void CMsgTFCoaching_RemoveFromCoaches::InternalSwap(CMsgTFCoaching_RemoveFromCoaches* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgTFCoaching_RemoveFromCoaches::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[18]);
}

// ===================================================================

class CMsgTFCoaching_FindCoach::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgTFCoaching_FindCoach>()._has_bits_);
  static void set_has_account_id_friend_as_coach(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgTFCoaching_FindCoach::CMsgTFCoaching_FindCoach(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgTFCoaching_FindCoach)
}
CMsgTFCoaching_FindCoach::CMsgTFCoaching_FindCoach(const CMsgTFCoaching_FindCoach& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_id_friend_as_coach_ = from.account_id_friend_as_coach_;
  // @@protoc_insertion_point(copy_constructor:CMsgTFCoaching_FindCoach)
}

void CMsgTFCoaching_FindCoach::SharedCtor() {
account_id_friend_as_coach_ = 0u;
}

CMsgTFCoaching_FindCoach::~CMsgTFCoaching_FindCoach() {
  // @@protoc_insertion_point(destructor:CMsgTFCoaching_FindCoach)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgTFCoaching_FindCoach::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgTFCoaching_FindCoach::ArenaDtor(void* object) {
  CMsgTFCoaching_FindCoach* _this = reinterpret_cast< CMsgTFCoaching_FindCoach* >(object);
  (void)_this;
}
void CMsgTFCoaching_FindCoach::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgTFCoaching_FindCoach::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgTFCoaching_FindCoach::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgTFCoaching_FindCoach)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_id_friend_as_coach_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgTFCoaching_FindCoach::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id_friend_as_coach = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id_friend_as_coach(&has_bits);
          account_id_friend_as_coach_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgTFCoaching_FindCoach::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTFCoaching_FindCoach)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id_friend_as_coach = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id_friend_as_coach(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTFCoaching_FindCoach)
  return target;
}

size_t CMsgTFCoaching_FindCoach::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgTFCoaching_FindCoach)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 account_id_friend_as_coach = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_account_id_friend_as_coach());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgTFCoaching_FindCoach::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgTFCoaching_FindCoach)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTFCoaching_FindCoach* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgTFCoaching_FindCoach>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgTFCoaching_FindCoach)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgTFCoaching_FindCoach)
    MergeFrom(*source);
  }
}

void CMsgTFCoaching_FindCoach::MergeFrom(const CMsgTFCoaching_FindCoach& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgTFCoaching_FindCoach)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_account_id_friend_as_coach()) {
    _internal_set_account_id_friend_as_coach(from._internal_account_id_friend_as_coach());
  }
}

void CMsgTFCoaching_FindCoach::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgTFCoaching_FindCoach)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFCoaching_FindCoach::CopyFrom(const CMsgTFCoaching_FindCoach& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgTFCoaching_FindCoach)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFCoaching_FindCoach::IsInitialized() const {
  return true;
}

void CMsgTFCoaching_FindCoach::InternalSwap(CMsgTFCoaching_FindCoach* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(account_id_friend_as_coach_, other->account_id_friend_as_coach_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgTFCoaching_FindCoach::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[19]);
}

// ===================================================================

class CMsgTFCoaching_FindCoachResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgTFCoaching_FindCoachResponse>()._has_bits_);
  static void set_has_found_coach(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_num_likes(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_coach_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgTFCoaching_FindCoachResponse::CMsgTFCoaching_FindCoachResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgTFCoaching_FindCoachResponse)
}
CMsgTFCoaching_FindCoachResponse::CMsgTFCoaching_FindCoachResponse(const CMsgTFCoaching_FindCoachResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  coach_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_coach_name()) {
    coach_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_coach_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&found_coach_, &from.found_coach_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_likes_) -
    reinterpret_cast<char*>(&found_coach_)) + sizeof(num_likes_));
  // @@protoc_insertion_point(copy_constructor:CMsgTFCoaching_FindCoachResponse)
}

void CMsgTFCoaching_FindCoachResponse::SharedCtor() {
coach_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&found_coach_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&num_likes_) -
    reinterpret_cast<char*>(&found_coach_)) + sizeof(num_likes_));
}

CMsgTFCoaching_FindCoachResponse::~CMsgTFCoaching_FindCoachResponse() {
  // @@protoc_insertion_point(destructor:CMsgTFCoaching_FindCoachResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgTFCoaching_FindCoachResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  coach_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgTFCoaching_FindCoachResponse::ArenaDtor(void* object) {
  CMsgTFCoaching_FindCoachResponse* _this = reinterpret_cast< CMsgTFCoaching_FindCoachResponse* >(object);
  (void)_this;
}
void CMsgTFCoaching_FindCoachResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgTFCoaching_FindCoachResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgTFCoaching_FindCoachResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgTFCoaching_FindCoachResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    coach_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&found_coach_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_likes_) -
        reinterpret_cast<char*>(&found_coach_)) + sizeof(num_likes_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgTFCoaching_FindCoachResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool found_coach = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_found_coach(&has_bits);
          found_coach_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 num_likes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_num_likes(&has_bits);
          num_likes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string coach_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_coach_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgTFCoaching_FindCoachResponse.coach_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgTFCoaching_FindCoachResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTFCoaching_FindCoachResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool found_coach = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_found_coach(), target);
  }

  // optional uint32 num_likes = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_num_likes(), target);
  }

  // optional string coach_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_coach_name().data(), static_cast<int>(this->_internal_coach_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgTFCoaching_FindCoachResponse.coach_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_coach_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTFCoaching_FindCoachResponse)
  return target;
}

size_t CMsgTFCoaching_FindCoachResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgTFCoaching_FindCoachResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string coach_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_coach_name());
    }

    // optional bool found_coach = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional uint32 num_likes = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_num_likes());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgTFCoaching_FindCoachResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgTFCoaching_FindCoachResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTFCoaching_FindCoachResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgTFCoaching_FindCoachResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgTFCoaching_FindCoachResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgTFCoaching_FindCoachResponse)
    MergeFrom(*source);
  }
}

void CMsgTFCoaching_FindCoachResponse::MergeFrom(const CMsgTFCoaching_FindCoachResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgTFCoaching_FindCoachResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_coach_name(from._internal_coach_name());
    }
    if (cached_has_bits & 0x00000002u) {
      found_coach_ = from.found_coach_;
    }
    if (cached_has_bits & 0x00000004u) {
      num_likes_ = from.num_likes_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgTFCoaching_FindCoachResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgTFCoaching_FindCoachResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFCoaching_FindCoachResponse::CopyFrom(const CMsgTFCoaching_FindCoachResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgTFCoaching_FindCoachResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFCoaching_FindCoachResponse::IsInitialized() const {
  return true;
}

void CMsgTFCoaching_FindCoachResponse::InternalSwap(CMsgTFCoaching_FindCoachResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &coach_name_, GetArenaForAllocation(),
      &other->coach_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgTFCoaching_FindCoachResponse, num_likes_)
      + sizeof(CMsgTFCoaching_FindCoachResponse::num_likes_)
      - PROTOBUF_FIELD_OFFSET(CMsgTFCoaching_FindCoachResponse, found_coach_)>(
          reinterpret_cast<char*>(&found_coach_),
          reinterpret_cast<char*>(&other->found_coach_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgTFCoaching_FindCoachResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[20]);
}

// ===================================================================

class CMsgTFCoaching_AskCoach::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgTFCoaching_AskCoach>()._has_bits_);
  static void set_has_account_id_student(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_student_is_friend(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgTFCoaching_AskCoach::CMsgTFCoaching_AskCoach(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgTFCoaching_AskCoach)
}
CMsgTFCoaching_AskCoach::CMsgTFCoaching_AskCoach(const CMsgTFCoaching_AskCoach& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&account_id_student_, &from.account_id_student_,
    static_cast<size_t>(reinterpret_cast<char*>(&student_is_friend_) -
    reinterpret_cast<char*>(&account_id_student_)) + sizeof(student_is_friend_));
  // @@protoc_insertion_point(copy_constructor:CMsgTFCoaching_AskCoach)
}

void CMsgTFCoaching_AskCoach::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_id_student_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&student_is_friend_) -
    reinterpret_cast<char*>(&account_id_student_)) + sizeof(student_is_friend_));
}

CMsgTFCoaching_AskCoach::~CMsgTFCoaching_AskCoach() {
  // @@protoc_insertion_point(destructor:CMsgTFCoaching_AskCoach)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgTFCoaching_AskCoach::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgTFCoaching_AskCoach::ArenaDtor(void* object) {
  CMsgTFCoaching_AskCoach* _this = reinterpret_cast< CMsgTFCoaching_AskCoach* >(object);
  (void)_this;
}
void CMsgTFCoaching_AskCoach::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgTFCoaching_AskCoach::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgTFCoaching_AskCoach::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgTFCoaching_AskCoach)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&account_id_student_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&student_is_friend_) -
        reinterpret_cast<char*>(&account_id_student_)) + sizeof(student_is_friend_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgTFCoaching_AskCoach::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id_student = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id_student(&has_bits);
          account_id_student_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool student_is_friend = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_student_is_friend(&has_bits);
          student_is_friend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgTFCoaching_AskCoach::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTFCoaching_AskCoach)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id_student = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id_student(), target);
  }

  // optional bool student_is_friend = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_student_is_friend(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTFCoaching_AskCoach)
  return target;
}

size_t CMsgTFCoaching_AskCoach::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgTFCoaching_AskCoach)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 account_id_student = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id_student());
    }

    // optional bool student_is_friend = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgTFCoaching_AskCoach::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgTFCoaching_AskCoach)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTFCoaching_AskCoach* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgTFCoaching_AskCoach>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgTFCoaching_AskCoach)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgTFCoaching_AskCoach)
    MergeFrom(*source);
  }
}

void CMsgTFCoaching_AskCoach::MergeFrom(const CMsgTFCoaching_AskCoach& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgTFCoaching_AskCoach)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_student_ = from.account_id_student_;
    }
    if (cached_has_bits & 0x00000002u) {
      student_is_friend_ = from.student_is_friend_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgTFCoaching_AskCoach::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgTFCoaching_AskCoach)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFCoaching_AskCoach::CopyFrom(const CMsgTFCoaching_AskCoach& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgTFCoaching_AskCoach)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFCoaching_AskCoach::IsInitialized() const {
  return true;
}

void CMsgTFCoaching_AskCoach::InternalSwap(CMsgTFCoaching_AskCoach* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgTFCoaching_AskCoach, student_is_friend_)
      + sizeof(CMsgTFCoaching_AskCoach::student_is_friend_)
      - PROTOBUF_FIELD_OFFSET(CMsgTFCoaching_AskCoach, account_id_student_)>(
          reinterpret_cast<char*>(&account_id_student_),
          reinterpret_cast<char*>(&other->account_id_student_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgTFCoaching_AskCoach::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[21]);
}

// ===================================================================

class CMsgTFCoaching_AskCoachResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgTFCoaching_AskCoachResponse>()._has_bits_);
  static void set_has_accept_coaching_assignment(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgTFCoaching_AskCoachResponse::CMsgTFCoaching_AskCoachResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgTFCoaching_AskCoachResponse)
}
CMsgTFCoaching_AskCoachResponse::CMsgTFCoaching_AskCoachResponse(const CMsgTFCoaching_AskCoachResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  accept_coaching_assignment_ = from.accept_coaching_assignment_;
  // @@protoc_insertion_point(copy_constructor:CMsgTFCoaching_AskCoachResponse)
}

void CMsgTFCoaching_AskCoachResponse::SharedCtor() {
accept_coaching_assignment_ = false;
}

CMsgTFCoaching_AskCoachResponse::~CMsgTFCoaching_AskCoachResponse() {
  // @@protoc_insertion_point(destructor:CMsgTFCoaching_AskCoachResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgTFCoaching_AskCoachResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgTFCoaching_AskCoachResponse::ArenaDtor(void* object) {
  CMsgTFCoaching_AskCoachResponse* _this = reinterpret_cast< CMsgTFCoaching_AskCoachResponse* >(object);
  (void)_this;
}
void CMsgTFCoaching_AskCoachResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgTFCoaching_AskCoachResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgTFCoaching_AskCoachResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgTFCoaching_AskCoachResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  accept_coaching_assignment_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgTFCoaching_AskCoachResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool accept_coaching_assignment = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_accept_coaching_assignment(&has_bits);
          accept_coaching_assignment_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgTFCoaching_AskCoachResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTFCoaching_AskCoachResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool accept_coaching_assignment = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_accept_coaching_assignment(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTFCoaching_AskCoachResponse)
  return target;
}

size_t CMsgTFCoaching_AskCoachResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgTFCoaching_AskCoachResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool accept_coaching_assignment = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgTFCoaching_AskCoachResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgTFCoaching_AskCoachResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTFCoaching_AskCoachResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgTFCoaching_AskCoachResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgTFCoaching_AskCoachResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgTFCoaching_AskCoachResponse)
    MergeFrom(*source);
  }
}

void CMsgTFCoaching_AskCoachResponse::MergeFrom(const CMsgTFCoaching_AskCoachResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgTFCoaching_AskCoachResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_accept_coaching_assignment()) {
    _internal_set_accept_coaching_assignment(from._internal_accept_coaching_assignment());
  }
}

void CMsgTFCoaching_AskCoachResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgTFCoaching_AskCoachResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFCoaching_AskCoachResponse::CopyFrom(const CMsgTFCoaching_AskCoachResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgTFCoaching_AskCoachResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFCoaching_AskCoachResponse::IsInitialized() const {
  return true;
}

void CMsgTFCoaching_AskCoachResponse::InternalSwap(CMsgTFCoaching_AskCoachResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(accept_coaching_assignment_, other->accept_coaching_assignment_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgTFCoaching_AskCoachResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[22]);
}

// ===================================================================

class CMsgTFCoaching_CoachJoinGame::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgTFCoaching_CoachJoinGame>()._has_bits_);
  static void set_has_join_game(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_server_address(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_server_port(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_account_id_student(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgTFCoaching_CoachJoinGame::CMsgTFCoaching_CoachJoinGame(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgTFCoaching_CoachJoinGame)
}
CMsgTFCoaching_CoachJoinGame::CMsgTFCoaching_CoachJoinGame(const CMsgTFCoaching_CoachJoinGame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&join_game_, &from.join_game_,
    static_cast<size_t>(reinterpret_cast<char*>(&account_id_student_) -
    reinterpret_cast<char*>(&join_game_)) + sizeof(account_id_student_));
  // @@protoc_insertion_point(copy_constructor:CMsgTFCoaching_CoachJoinGame)
}

void CMsgTFCoaching_CoachJoinGame::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&join_game_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&account_id_student_) -
    reinterpret_cast<char*>(&join_game_)) + sizeof(account_id_student_));
}

CMsgTFCoaching_CoachJoinGame::~CMsgTFCoaching_CoachJoinGame() {
  // @@protoc_insertion_point(destructor:CMsgTFCoaching_CoachJoinGame)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgTFCoaching_CoachJoinGame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgTFCoaching_CoachJoinGame::ArenaDtor(void* object) {
  CMsgTFCoaching_CoachJoinGame* _this = reinterpret_cast< CMsgTFCoaching_CoachJoinGame* >(object);
  (void)_this;
}
void CMsgTFCoaching_CoachJoinGame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgTFCoaching_CoachJoinGame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgTFCoaching_CoachJoinGame::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgTFCoaching_CoachJoinGame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&join_game_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&account_id_student_) -
        reinterpret_cast<char*>(&join_game_)) + sizeof(account_id_student_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgTFCoaching_CoachJoinGame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool join_game = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_join_game(&has_bits);
          join_game_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 server_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_server_address(&has_bits);
          server_address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 server_port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_server_port(&has_bits);
          server_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 account_id_student = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_account_id_student(&has_bits);
          account_id_student_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgTFCoaching_CoachJoinGame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTFCoaching_CoachJoinGame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool join_game = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_join_game(), target);
  }

  // optional uint32 server_address = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_server_address(), target);
  }

  // optional uint32 server_port = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_server_port(), target);
  }

  // optional uint32 account_id_student = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_account_id_student(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTFCoaching_CoachJoinGame)
  return target;
}

size_t CMsgTFCoaching_CoachJoinGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgTFCoaching_CoachJoinGame)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bool join_game = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional uint32 server_address = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_server_address());
    }

    // optional uint32 server_port = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_server_port());
    }

    // optional uint32 account_id_student = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id_student());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgTFCoaching_CoachJoinGame::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgTFCoaching_CoachJoinGame)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTFCoaching_CoachJoinGame* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgTFCoaching_CoachJoinGame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgTFCoaching_CoachJoinGame)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgTFCoaching_CoachJoinGame)
    MergeFrom(*source);
  }
}

void CMsgTFCoaching_CoachJoinGame::MergeFrom(const CMsgTFCoaching_CoachJoinGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgTFCoaching_CoachJoinGame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      join_game_ = from.join_game_;
    }
    if (cached_has_bits & 0x00000002u) {
      server_address_ = from.server_address_;
    }
    if (cached_has_bits & 0x00000004u) {
      server_port_ = from.server_port_;
    }
    if (cached_has_bits & 0x00000008u) {
      account_id_student_ = from.account_id_student_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgTFCoaching_CoachJoinGame::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgTFCoaching_CoachJoinGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFCoaching_CoachJoinGame::CopyFrom(const CMsgTFCoaching_CoachJoinGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgTFCoaching_CoachJoinGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFCoaching_CoachJoinGame::IsInitialized() const {
  return true;
}

void CMsgTFCoaching_CoachJoinGame::InternalSwap(CMsgTFCoaching_CoachJoinGame* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgTFCoaching_CoachJoinGame, account_id_student_)
      + sizeof(CMsgTFCoaching_CoachJoinGame::account_id_student_)
      - PROTOBUF_FIELD_OFFSET(CMsgTFCoaching_CoachJoinGame, join_game_)>(
          reinterpret_cast<char*>(&join_game_),
          reinterpret_cast<char*>(&other->join_game_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgTFCoaching_CoachJoinGame::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[23]);
}

// ===================================================================

class CMsgTFCoaching_CoachJoining::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgTFCoaching_CoachJoining>()._has_bits_);
  static void set_has_account_id_coach(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_account_id_student(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgTFCoaching_CoachJoining::CMsgTFCoaching_CoachJoining(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgTFCoaching_CoachJoining)
}
CMsgTFCoaching_CoachJoining::CMsgTFCoaching_CoachJoining(const CMsgTFCoaching_CoachJoining& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&account_id_coach_, &from.account_id_coach_,
    static_cast<size_t>(reinterpret_cast<char*>(&account_id_student_) -
    reinterpret_cast<char*>(&account_id_coach_)) + sizeof(account_id_student_));
  // @@protoc_insertion_point(copy_constructor:CMsgTFCoaching_CoachJoining)
}

void CMsgTFCoaching_CoachJoining::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_id_coach_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&account_id_student_) -
    reinterpret_cast<char*>(&account_id_coach_)) + sizeof(account_id_student_));
}

CMsgTFCoaching_CoachJoining::~CMsgTFCoaching_CoachJoining() {
  // @@protoc_insertion_point(destructor:CMsgTFCoaching_CoachJoining)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgTFCoaching_CoachJoining::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgTFCoaching_CoachJoining::ArenaDtor(void* object) {
  CMsgTFCoaching_CoachJoining* _this = reinterpret_cast< CMsgTFCoaching_CoachJoining* >(object);
  (void)_this;
}
void CMsgTFCoaching_CoachJoining::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgTFCoaching_CoachJoining::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgTFCoaching_CoachJoining::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgTFCoaching_CoachJoining)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&account_id_coach_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&account_id_student_) -
        reinterpret_cast<char*>(&account_id_coach_)) + sizeof(account_id_student_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgTFCoaching_CoachJoining::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id_coach = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id_coach(&has_bits);
          account_id_coach_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 account_id_student = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_account_id_student(&has_bits);
          account_id_student_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgTFCoaching_CoachJoining::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTFCoaching_CoachJoining)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id_coach = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id_coach(), target);
  }

  // optional uint32 account_id_student = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_account_id_student(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTFCoaching_CoachJoining)
  return target;
}

size_t CMsgTFCoaching_CoachJoining::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgTFCoaching_CoachJoining)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 account_id_coach = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id_coach());
    }

    // optional uint32 account_id_student = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id_student());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgTFCoaching_CoachJoining::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgTFCoaching_CoachJoining)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTFCoaching_CoachJoining* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgTFCoaching_CoachJoining>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgTFCoaching_CoachJoining)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgTFCoaching_CoachJoining)
    MergeFrom(*source);
  }
}

void CMsgTFCoaching_CoachJoining::MergeFrom(const CMsgTFCoaching_CoachJoining& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgTFCoaching_CoachJoining)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_coach_ = from.account_id_coach_;
    }
    if (cached_has_bits & 0x00000002u) {
      account_id_student_ = from.account_id_student_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgTFCoaching_CoachJoining::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgTFCoaching_CoachJoining)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFCoaching_CoachJoining::CopyFrom(const CMsgTFCoaching_CoachJoining& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgTFCoaching_CoachJoining)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFCoaching_CoachJoining::IsInitialized() const {
  return true;
}

void CMsgTFCoaching_CoachJoining::InternalSwap(CMsgTFCoaching_CoachJoining* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgTFCoaching_CoachJoining, account_id_student_)
      + sizeof(CMsgTFCoaching_CoachJoining::account_id_student_)
      - PROTOBUF_FIELD_OFFSET(CMsgTFCoaching_CoachJoining, account_id_coach_)>(
          reinterpret_cast<char*>(&account_id_coach_),
          reinterpret_cast<char*>(&other->account_id_coach_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgTFCoaching_CoachJoining::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[24]);
}

// ===================================================================

class CMsgTFCoaching_CoachJoined::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgTFCoaching_CoachJoined>()._has_bits_);
  static void set_has_account_id_coach(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgTFCoaching_CoachJoined::CMsgTFCoaching_CoachJoined(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgTFCoaching_CoachJoined)
}
CMsgTFCoaching_CoachJoined::CMsgTFCoaching_CoachJoined(const CMsgTFCoaching_CoachJoined& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_id_coach_ = from.account_id_coach_;
  // @@protoc_insertion_point(copy_constructor:CMsgTFCoaching_CoachJoined)
}

void CMsgTFCoaching_CoachJoined::SharedCtor() {
account_id_coach_ = 0u;
}

CMsgTFCoaching_CoachJoined::~CMsgTFCoaching_CoachJoined() {
  // @@protoc_insertion_point(destructor:CMsgTFCoaching_CoachJoined)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgTFCoaching_CoachJoined::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgTFCoaching_CoachJoined::ArenaDtor(void* object) {
  CMsgTFCoaching_CoachJoined* _this = reinterpret_cast< CMsgTFCoaching_CoachJoined* >(object);
  (void)_this;
}
void CMsgTFCoaching_CoachJoined::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgTFCoaching_CoachJoined::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgTFCoaching_CoachJoined::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgTFCoaching_CoachJoined)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_id_coach_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgTFCoaching_CoachJoined::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id_coach = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id_coach(&has_bits);
          account_id_coach_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgTFCoaching_CoachJoined::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTFCoaching_CoachJoined)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id_coach = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id_coach(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTFCoaching_CoachJoined)
  return target;
}

size_t CMsgTFCoaching_CoachJoined::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgTFCoaching_CoachJoined)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 account_id_coach = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_account_id_coach());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgTFCoaching_CoachJoined::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgTFCoaching_CoachJoined)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTFCoaching_CoachJoined* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgTFCoaching_CoachJoined>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgTFCoaching_CoachJoined)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgTFCoaching_CoachJoined)
    MergeFrom(*source);
  }
}

void CMsgTFCoaching_CoachJoined::MergeFrom(const CMsgTFCoaching_CoachJoined& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgTFCoaching_CoachJoined)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_account_id_coach()) {
    _internal_set_account_id_coach(from._internal_account_id_coach());
  }
}

void CMsgTFCoaching_CoachJoined::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgTFCoaching_CoachJoined)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFCoaching_CoachJoined::CopyFrom(const CMsgTFCoaching_CoachJoined& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgTFCoaching_CoachJoined)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFCoaching_CoachJoined::IsInitialized() const {
  return true;
}

void CMsgTFCoaching_CoachJoined::InternalSwap(CMsgTFCoaching_CoachJoined* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(account_id_coach_, other->account_id_coach_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgTFCoaching_CoachJoined::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[25]);
}

// ===================================================================

class CMsgTFCoaching_LikeCurrentCoach::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgTFCoaching_LikeCurrentCoach>()._has_bits_);
  static void set_has_like_coach(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgTFCoaching_LikeCurrentCoach::CMsgTFCoaching_LikeCurrentCoach(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgTFCoaching_LikeCurrentCoach)
}
CMsgTFCoaching_LikeCurrentCoach::CMsgTFCoaching_LikeCurrentCoach(const CMsgTFCoaching_LikeCurrentCoach& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  like_coach_ = from.like_coach_;
  // @@protoc_insertion_point(copy_constructor:CMsgTFCoaching_LikeCurrentCoach)
}

void CMsgTFCoaching_LikeCurrentCoach::SharedCtor() {
like_coach_ = false;
}

CMsgTFCoaching_LikeCurrentCoach::~CMsgTFCoaching_LikeCurrentCoach() {
  // @@protoc_insertion_point(destructor:CMsgTFCoaching_LikeCurrentCoach)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgTFCoaching_LikeCurrentCoach::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgTFCoaching_LikeCurrentCoach::ArenaDtor(void* object) {
  CMsgTFCoaching_LikeCurrentCoach* _this = reinterpret_cast< CMsgTFCoaching_LikeCurrentCoach* >(object);
  (void)_this;
}
void CMsgTFCoaching_LikeCurrentCoach::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgTFCoaching_LikeCurrentCoach::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgTFCoaching_LikeCurrentCoach::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgTFCoaching_LikeCurrentCoach)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  like_coach_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgTFCoaching_LikeCurrentCoach::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool like_coach = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_like_coach(&has_bits);
          like_coach_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgTFCoaching_LikeCurrentCoach::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTFCoaching_LikeCurrentCoach)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool like_coach = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_like_coach(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTFCoaching_LikeCurrentCoach)
  return target;
}

size_t CMsgTFCoaching_LikeCurrentCoach::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgTFCoaching_LikeCurrentCoach)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool like_coach = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgTFCoaching_LikeCurrentCoach::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgTFCoaching_LikeCurrentCoach)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTFCoaching_LikeCurrentCoach* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgTFCoaching_LikeCurrentCoach>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgTFCoaching_LikeCurrentCoach)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgTFCoaching_LikeCurrentCoach)
    MergeFrom(*source);
  }
}

void CMsgTFCoaching_LikeCurrentCoach::MergeFrom(const CMsgTFCoaching_LikeCurrentCoach& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgTFCoaching_LikeCurrentCoach)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_like_coach()) {
    _internal_set_like_coach(from._internal_like_coach());
  }
}

void CMsgTFCoaching_LikeCurrentCoach::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgTFCoaching_LikeCurrentCoach)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFCoaching_LikeCurrentCoach::CopyFrom(const CMsgTFCoaching_LikeCurrentCoach& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgTFCoaching_LikeCurrentCoach)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFCoaching_LikeCurrentCoach::IsInitialized() const {
  return true;
}

void CMsgTFCoaching_LikeCurrentCoach::InternalSwap(CMsgTFCoaching_LikeCurrentCoach* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(like_coach_, other->like_coach_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgTFCoaching_LikeCurrentCoach::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[26]);
}

// ===================================================================

class CMsgTFCoaching_RemoveCurrentCoach::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgTFCoaching_RemoveCurrentCoach>()._has_bits_);
  static void set_has_account_id_coach(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgTFCoaching_RemoveCurrentCoach::CMsgTFCoaching_RemoveCurrentCoach(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgTFCoaching_RemoveCurrentCoach)
}
CMsgTFCoaching_RemoveCurrentCoach::CMsgTFCoaching_RemoveCurrentCoach(const CMsgTFCoaching_RemoveCurrentCoach& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_id_coach_ = from.account_id_coach_;
  // @@protoc_insertion_point(copy_constructor:CMsgTFCoaching_RemoveCurrentCoach)
}

void CMsgTFCoaching_RemoveCurrentCoach::SharedCtor() {
account_id_coach_ = 0u;
}

CMsgTFCoaching_RemoveCurrentCoach::~CMsgTFCoaching_RemoveCurrentCoach() {
  // @@protoc_insertion_point(destructor:CMsgTFCoaching_RemoveCurrentCoach)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgTFCoaching_RemoveCurrentCoach::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgTFCoaching_RemoveCurrentCoach::ArenaDtor(void* object) {
  CMsgTFCoaching_RemoveCurrentCoach* _this = reinterpret_cast< CMsgTFCoaching_RemoveCurrentCoach* >(object);
  (void)_this;
}
void CMsgTFCoaching_RemoveCurrentCoach::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgTFCoaching_RemoveCurrentCoach::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgTFCoaching_RemoveCurrentCoach::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgTFCoaching_RemoveCurrentCoach)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_id_coach_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgTFCoaching_RemoveCurrentCoach::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id_coach = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id_coach(&has_bits);
          account_id_coach_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgTFCoaching_RemoveCurrentCoach::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTFCoaching_RemoveCurrentCoach)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id_coach = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id_coach(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTFCoaching_RemoveCurrentCoach)
  return target;
}

size_t CMsgTFCoaching_RemoveCurrentCoach::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgTFCoaching_RemoveCurrentCoach)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 account_id_coach = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_account_id_coach());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgTFCoaching_RemoveCurrentCoach::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgTFCoaching_RemoveCurrentCoach)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTFCoaching_RemoveCurrentCoach* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgTFCoaching_RemoveCurrentCoach>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgTFCoaching_RemoveCurrentCoach)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgTFCoaching_RemoveCurrentCoach)
    MergeFrom(*source);
  }
}

void CMsgTFCoaching_RemoveCurrentCoach::MergeFrom(const CMsgTFCoaching_RemoveCurrentCoach& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgTFCoaching_RemoveCurrentCoach)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_account_id_coach()) {
    _internal_set_account_id_coach(from._internal_account_id_coach());
  }
}

void CMsgTFCoaching_RemoveCurrentCoach::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgTFCoaching_RemoveCurrentCoach)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFCoaching_RemoveCurrentCoach::CopyFrom(const CMsgTFCoaching_RemoveCurrentCoach& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgTFCoaching_RemoveCurrentCoach)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFCoaching_RemoveCurrentCoach::IsInitialized() const {
  return true;
}

void CMsgTFCoaching_RemoveCurrentCoach::InternalSwap(CMsgTFCoaching_RemoveCurrentCoach* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(account_id_coach_, other->account_id_coach_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgTFCoaching_RemoveCurrentCoach::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[27]);
}

// ===================================================================

class CMsgTFQuickplay_ScoreServers_ServerInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgTFQuickplay_ScoreServers_ServerInfo>()._has_bits_);
  static void set_has_server_address(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_server_port(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_num_users(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_max_users(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_user_score(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CMsgTFQuickplay_ScoreServers_ServerInfo::CMsgTFQuickplay_ScoreServers_ServerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgTFQuickplay_ScoreServers.ServerInfo)
}
CMsgTFQuickplay_ScoreServers_ServerInfo::CMsgTFQuickplay_ScoreServers_ServerInfo(const CMsgTFQuickplay_ScoreServers_ServerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&server_address_, &from.server_address_,
    static_cast<size_t>(reinterpret_cast<char*>(&user_score_) -
    reinterpret_cast<char*>(&server_address_)) + sizeof(user_score_));
  // @@protoc_insertion_point(copy_constructor:CMsgTFQuickplay_ScoreServers.ServerInfo)
}

void CMsgTFQuickplay_ScoreServers_ServerInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&server_address_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&user_score_) -
    reinterpret_cast<char*>(&server_address_)) + sizeof(user_score_));
}

CMsgTFQuickplay_ScoreServers_ServerInfo::~CMsgTFQuickplay_ScoreServers_ServerInfo() {
  // @@protoc_insertion_point(destructor:CMsgTFQuickplay_ScoreServers.ServerInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgTFQuickplay_ScoreServers_ServerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgTFQuickplay_ScoreServers_ServerInfo::ArenaDtor(void* object) {
  CMsgTFQuickplay_ScoreServers_ServerInfo* _this = reinterpret_cast< CMsgTFQuickplay_ScoreServers_ServerInfo* >(object);
  (void)_this;
}
void CMsgTFQuickplay_ScoreServers_ServerInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgTFQuickplay_ScoreServers_ServerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgTFQuickplay_ScoreServers_ServerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgTFQuickplay_ScoreServers.ServerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&server_address_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&user_score_) -
        reinterpret_cast<char*>(&server_address_)) + sizeof(user_score_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgTFQuickplay_ScoreServers_ServerInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 server_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_server_address(&has_bits);
          server_address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 server_port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_server_port(&has_bits);
          server_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 num_users = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_num_users(&has_bits);
          num_users_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 steam_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_steam_id(&has_bits);
          steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_users = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_max_users(&has_bits);
          max_users_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float user_score = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_user_score(&has_bits);
          user_score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgTFQuickplay_ScoreServers_ServerInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTFQuickplay_ScoreServers.ServerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 server_address = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_server_address(), target);
  }

  // optional uint32 server_port = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_server_port(), target);
  }

  // optional uint32 num_users = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_num_users(), target);
  }

  // optional uint64 steam_id = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_steam_id(), target);
  }

  // optional uint32 max_users = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_max_users(), target);
  }

  // optional float user_score = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_user_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTFQuickplay_ScoreServers.ServerInfo)
  return target;
}

size_t CMsgTFQuickplay_ScoreServers_ServerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgTFQuickplay_ScoreServers.ServerInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint32 server_address = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_server_address());
    }

    // optional uint32 server_port = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_server_port());
    }

    // optional uint64 steam_id = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_steam_id());
    }

    // optional uint32 num_users = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_num_users());
    }

    // optional uint32 max_users = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_users());
    }

    // optional float user_score = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgTFQuickplay_ScoreServers_ServerInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgTFQuickplay_ScoreServers.ServerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTFQuickplay_ScoreServers_ServerInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgTFQuickplay_ScoreServers_ServerInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgTFQuickplay_ScoreServers.ServerInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgTFQuickplay_ScoreServers.ServerInfo)
    MergeFrom(*source);
  }
}

void CMsgTFQuickplay_ScoreServers_ServerInfo::MergeFrom(const CMsgTFQuickplay_ScoreServers_ServerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgTFQuickplay_ScoreServers.ServerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      server_address_ = from.server_address_;
    }
    if (cached_has_bits & 0x00000002u) {
      server_port_ = from.server_port_;
    }
    if (cached_has_bits & 0x00000004u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      num_users_ = from.num_users_;
    }
    if (cached_has_bits & 0x00000010u) {
      max_users_ = from.max_users_;
    }
    if (cached_has_bits & 0x00000020u) {
      user_score_ = from.user_score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgTFQuickplay_ScoreServers_ServerInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgTFQuickplay_ScoreServers.ServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFQuickplay_ScoreServers_ServerInfo::CopyFrom(const CMsgTFQuickplay_ScoreServers_ServerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgTFQuickplay_ScoreServers.ServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFQuickplay_ScoreServers_ServerInfo::IsInitialized() const {
  return true;
}

void CMsgTFQuickplay_ScoreServers_ServerInfo::InternalSwap(CMsgTFQuickplay_ScoreServers_ServerInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgTFQuickplay_ScoreServers_ServerInfo, user_score_)
      + sizeof(CMsgTFQuickplay_ScoreServers_ServerInfo::user_score_)
      - PROTOBUF_FIELD_OFFSET(CMsgTFQuickplay_ScoreServers_ServerInfo, server_address_)>(
          reinterpret_cast<char*>(&server_address_),
          reinterpret_cast<char*>(&other->server_address_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgTFQuickplay_ScoreServers_ServerInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[28]);
}

// ===================================================================

class CMsgTFQuickplay_ScoreServers::_Internal {
 public:
};

CMsgTFQuickplay_ScoreServers::CMsgTFQuickplay_ScoreServers(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  servers_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgTFQuickplay_ScoreServers)
}
CMsgTFQuickplay_ScoreServers::CMsgTFQuickplay_ScoreServers(const CMsgTFQuickplay_ScoreServers& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      servers_(from.servers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgTFQuickplay_ScoreServers)
}

void CMsgTFQuickplay_ScoreServers::SharedCtor() {
}

CMsgTFQuickplay_ScoreServers::~CMsgTFQuickplay_ScoreServers() {
  // @@protoc_insertion_point(destructor:CMsgTFQuickplay_ScoreServers)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgTFQuickplay_ScoreServers::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgTFQuickplay_ScoreServers::ArenaDtor(void* object) {
  CMsgTFQuickplay_ScoreServers* _this = reinterpret_cast< CMsgTFQuickplay_ScoreServers* >(object);
  (void)_this;
}
void CMsgTFQuickplay_ScoreServers::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgTFQuickplay_ScoreServers::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgTFQuickplay_ScoreServers::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgTFQuickplay_ScoreServers)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  servers_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgTFQuickplay_ScoreServers::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgTFQuickplay_ScoreServers.ServerInfo servers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_servers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgTFQuickplay_ScoreServers::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTFQuickplay_ScoreServers)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgTFQuickplay_ScoreServers.ServerInfo servers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_servers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_servers(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTFQuickplay_ScoreServers)
  return target;
}

size_t CMsgTFQuickplay_ScoreServers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgTFQuickplay_ScoreServers)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgTFQuickplay_ScoreServers.ServerInfo servers = 1;
  total_size += 1UL * this->_internal_servers_size();
  for (const auto& msg : this->servers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgTFQuickplay_ScoreServers::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgTFQuickplay_ScoreServers)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTFQuickplay_ScoreServers* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgTFQuickplay_ScoreServers>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgTFQuickplay_ScoreServers)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgTFQuickplay_ScoreServers)
    MergeFrom(*source);
  }
}

void CMsgTFQuickplay_ScoreServers::MergeFrom(const CMsgTFQuickplay_ScoreServers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgTFQuickplay_ScoreServers)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  servers_.MergeFrom(from.servers_);
}

void CMsgTFQuickplay_ScoreServers::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgTFQuickplay_ScoreServers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFQuickplay_ScoreServers::CopyFrom(const CMsgTFQuickplay_ScoreServers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgTFQuickplay_ScoreServers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFQuickplay_ScoreServers::IsInitialized() const {
  return true;
}

void CMsgTFQuickplay_ScoreServers::InternalSwap(CMsgTFQuickplay_ScoreServers* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  servers_.InternalSwap(&other->servers_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgTFQuickplay_ScoreServers::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[29]);
}

// ===================================================================

class CMsgTFQuickplay_ScoreServersResponse_ServerInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgTFQuickplay_ScoreServersResponse_ServerInfo>()._has_bits_);
  static void set_has_server_address(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_server_port(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_total_score(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_options_score(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgTFQuickplay_ScoreServersResponse_ServerInfo::CMsgTFQuickplay_ScoreServersResponse_ServerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgTFQuickplay_ScoreServersResponse.ServerInfo)
}
CMsgTFQuickplay_ScoreServersResponse_ServerInfo::CMsgTFQuickplay_ScoreServersResponse_ServerInfo(const CMsgTFQuickplay_ScoreServersResponse_ServerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&server_address_, &from.server_address_,
    static_cast<size_t>(reinterpret_cast<char*>(&options_score_) -
    reinterpret_cast<char*>(&server_address_)) + sizeof(options_score_));
  // @@protoc_insertion_point(copy_constructor:CMsgTFQuickplay_ScoreServersResponse.ServerInfo)
}

void CMsgTFQuickplay_ScoreServersResponse_ServerInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&server_address_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&options_score_) -
    reinterpret_cast<char*>(&server_address_)) + sizeof(options_score_));
}

CMsgTFQuickplay_ScoreServersResponse_ServerInfo::~CMsgTFQuickplay_ScoreServersResponse_ServerInfo() {
  // @@protoc_insertion_point(destructor:CMsgTFQuickplay_ScoreServersResponse.ServerInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgTFQuickplay_ScoreServersResponse_ServerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgTFQuickplay_ScoreServersResponse_ServerInfo::ArenaDtor(void* object) {
  CMsgTFQuickplay_ScoreServersResponse_ServerInfo* _this = reinterpret_cast< CMsgTFQuickplay_ScoreServersResponse_ServerInfo* >(object);
  (void)_this;
}
void CMsgTFQuickplay_ScoreServersResponse_ServerInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgTFQuickplay_ScoreServersResponse_ServerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgTFQuickplay_ScoreServersResponse_ServerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgTFQuickplay_ScoreServersResponse.ServerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&server_address_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&options_score_) -
        reinterpret_cast<char*>(&server_address_)) + sizeof(options_score_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgTFQuickplay_ScoreServersResponse_ServerInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 server_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_server_address(&has_bits);
          server_address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 server_port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_server_port(&has_bits);
          server_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float total_score = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_total_score(&has_bits);
          total_score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint64 steam_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_steam_id(&has_bits);
          steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 options_score = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_options_score(&has_bits);
          options_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgTFQuickplay_ScoreServersResponse_ServerInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTFQuickplay_ScoreServersResponse.ServerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 server_address = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_server_address(), target);
  }

  // optional uint32 server_port = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_server_port(), target);
  }

  // optional float total_score = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_total_score(), target);
  }

  // optional uint64 steam_id = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_steam_id(), target);
  }

  // optional uint32 options_score = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_options_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTFQuickplay_ScoreServersResponse.ServerInfo)
  return target;
}

size_t CMsgTFQuickplay_ScoreServersResponse_ServerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgTFQuickplay_ScoreServersResponse.ServerInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 server_address = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_server_address());
    }

    // optional uint32 server_port = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_server_port());
    }

    // optional uint64 steam_id = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_steam_id());
    }

    // optional float total_score = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional uint32 options_score = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_options_score());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgTFQuickplay_ScoreServersResponse_ServerInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgTFQuickplay_ScoreServersResponse.ServerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTFQuickplay_ScoreServersResponse_ServerInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgTFQuickplay_ScoreServersResponse_ServerInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgTFQuickplay_ScoreServersResponse.ServerInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgTFQuickplay_ScoreServersResponse.ServerInfo)
    MergeFrom(*source);
  }
}

void CMsgTFQuickplay_ScoreServersResponse_ServerInfo::MergeFrom(const CMsgTFQuickplay_ScoreServersResponse_ServerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgTFQuickplay_ScoreServersResponse.ServerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      server_address_ = from.server_address_;
    }
    if (cached_has_bits & 0x00000002u) {
      server_port_ = from.server_port_;
    }
    if (cached_has_bits & 0x00000004u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      total_score_ = from.total_score_;
    }
    if (cached_has_bits & 0x00000010u) {
      options_score_ = from.options_score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgTFQuickplay_ScoreServersResponse_ServerInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgTFQuickplay_ScoreServersResponse.ServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFQuickplay_ScoreServersResponse_ServerInfo::CopyFrom(const CMsgTFQuickplay_ScoreServersResponse_ServerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgTFQuickplay_ScoreServersResponse.ServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFQuickplay_ScoreServersResponse_ServerInfo::IsInitialized() const {
  return true;
}

void CMsgTFQuickplay_ScoreServersResponse_ServerInfo::InternalSwap(CMsgTFQuickplay_ScoreServersResponse_ServerInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgTFQuickplay_ScoreServersResponse_ServerInfo, options_score_)
      + sizeof(CMsgTFQuickplay_ScoreServersResponse_ServerInfo::options_score_)
      - PROTOBUF_FIELD_OFFSET(CMsgTFQuickplay_ScoreServersResponse_ServerInfo, server_address_)>(
          reinterpret_cast<char*>(&server_address_),
          reinterpret_cast<char*>(&other->server_address_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgTFQuickplay_ScoreServersResponse_ServerInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[30]);
}

// ===================================================================

class CMsgTFQuickplay_ScoreServersResponse::_Internal {
 public:
};

CMsgTFQuickplay_ScoreServersResponse::CMsgTFQuickplay_ScoreServersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  servers_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgTFQuickplay_ScoreServersResponse)
}
CMsgTFQuickplay_ScoreServersResponse::CMsgTFQuickplay_ScoreServersResponse(const CMsgTFQuickplay_ScoreServersResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      servers_(from.servers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgTFQuickplay_ScoreServersResponse)
}

void CMsgTFQuickplay_ScoreServersResponse::SharedCtor() {
}

CMsgTFQuickplay_ScoreServersResponse::~CMsgTFQuickplay_ScoreServersResponse() {
  // @@protoc_insertion_point(destructor:CMsgTFQuickplay_ScoreServersResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgTFQuickplay_ScoreServersResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgTFQuickplay_ScoreServersResponse::ArenaDtor(void* object) {
  CMsgTFQuickplay_ScoreServersResponse* _this = reinterpret_cast< CMsgTFQuickplay_ScoreServersResponse* >(object);
  (void)_this;
}
void CMsgTFQuickplay_ScoreServersResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgTFQuickplay_ScoreServersResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgTFQuickplay_ScoreServersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgTFQuickplay_ScoreServersResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  servers_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgTFQuickplay_ScoreServersResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgTFQuickplay_ScoreServersResponse.ServerInfo servers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_servers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgTFQuickplay_ScoreServersResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTFQuickplay_ScoreServersResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgTFQuickplay_ScoreServersResponse.ServerInfo servers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_servers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_servers(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTFQuickplay_ScoreServersResponse)
  return target;
}

size_t CMsgTFQuickplay_ScoreServersResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgTFQuickplay_ScoreServersResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgTFQuickplay_ScoreServersResponse.ServerInfo servers = 1;
  total_size += 1UL * this->_internal_servers_size();
  for (const auto& msg : this->servers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgTFQuickplay_ScoreServersResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgTFQuickplay_ScoreServersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTFQuickplay_ScoreServersResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgTFQuickplay_ScoreServersResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgTFQuickplay_ScoreServersResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgTFQuickplay_ScoreServersResponse)
    MergeFrom(*source);
  }
}

void CMsgTFQuickplay_ScoreServersResponse::MergeFrom(const CMsgTFQuickplay_ScoreServersResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgTFQuickplay_ScoreServersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  servers_.MergeFrom(from.servers_);
}

void CMsgTFQuickplay_ScoreServersResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgTFQuickplay_ScoreServersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFQuickplay_ScoreServersResponse::CopyFrom(const CMsgTFQuickplay_ScoreServersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgTFQuickplay_ScoreServersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFQuickplay_ScoreServersResponse::IsInitialized() const {
  return true;
}

void CMsgTFQuickplay_ScoreServersResponse::InternalSwap(CMsgTFQuickplay_ScoreServersResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  servers_.InternalSwap(&other->servers_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgTFQuickplay_ScoreServersResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[31]);
}

// ===================================================================

class CMsgTFQuickplay_PlayerJoining::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgTFQuickplay_PlayerJoining>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgTFQuickplay_PlayerJoining::CMsgTFQuickplay_PlayerJoining(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgTFQuickplay_PlayerJoining)
}
CMsgTFQuickplay_PlayerJoining::CMsgTFQuickplay_PlayerJoining(const CMsgTFQuickplay_PlayerJoining& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_id_ = from.account_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgTFQuickplay_PlayerJoining)
}

void CMsgTFQuickplay_PlayerJoining::SharedCtor() {
account_id_ = 0u;
}

CMsgTFQuickplay_PlayerJoining::~CMsgTFQuickplay_PlayerJoining() {
  // @@protoc_insertion_point(destructor:CMsgTFQuickplay_PlayerJoining)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgTFQuickplay_PlayerJoining::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgTFQuickplay_PlayerJoining::ArenaDtor(void* object) {
  CMsgTFQuickplay_PlayerJoining* _this = reinterpret_cast< CMsgTFQuickplay_PlayerJoining* >(object);
  (void)_this;
}
void CMsgTFQuickplay_PlayerJoining::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgTFQuickplay_PlayerJoining::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgTFQuickplay_PlayerJoining::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgTFQuickplay_PlayerJoining)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgTFQuickplay_PlayerJoining::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgTFQuickplay_PlayerJoining::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTFQuickplay_PlayerJoining)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTFQuickplay_PlayerJoining)
  return target;
}

size_t CMsgTFQuickplay_PlayerJoining::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgTFQuickplay_PlayerJoining)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 account_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_account_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgTFQuickplay_PlayerJoining::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgTFQuickplay_PlayerJoining)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTFQuickplay_PlayerJoining* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgTFQuickplay_PlayerJoining>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgTFQuickplay_PlayerJoining)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgTFQuickplay_PlayerJoining)
    MergeFrom(*source);
  }
}

void CMsgTFQuickplay_PlayerJoining::MergeFrom(const CMsgTFQuickplay_PlayerJoining& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgTFQuickplay_PlayerJoining)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_account_id()) {
    _internal_set_account_id(from._internal_account_id());
  }
}

void CMsgTFQuickplay_PlayerJoining::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgTFQuickplay_PlayerJoining)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFQuickplay_PlayerJoining::CopyFrom(const CMsgTFQuickplay_PlayerJoining& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgTFQuickplay_PlayerJoining)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFQuickplay_PlayerJoining::IsInitialized() const {
  return true;
}

void CMsgTFQuickplay_PlayerJoining::InternalSwap(CMsgTFQuickplay_PlayerJoining* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(account_id_, other->account_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgTFQuickplay_PlayerJoining::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[32]);
}

// ===================================================================

class CMsgGC_GameServer_LevelInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGC_GameServer_LevelInfo>()._has_bits_);
  static void set_has_level_loaded(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_level_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGC_GameServer_LevelInfo::CMsgGC_GameServer_LevelInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGC_GameServer_LevelInfo)
}
CMsgGC_GameServer_LevelInfo::CMsgGC_GameServer_LevelInfo(const CMsgGC_GameServer_LevelInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  level_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_level_name()) {
    level_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_level_name(), 
      GetArenaForAllocation());
  }
  level_loaded_ = from.level_loaded_;
  // @@protoc_insertion_point(copy_constructor:CMsgGC_GameServer_LevelInfo)
}

void CMsgGC_GameServer_LevelInfo::SharedCtor() {
level_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
level_loaded_ = false;
}

CMsgGC_GameServer_LevelInfo::~CMsgGC_GameServer_LevelInfo() {
  // @@protoc_insertion_point(destructor:CMsgGC_GameServer_LevelInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGC_GameServer_LevelInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  level_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgGC_GameServer_LevelInfo::ArenaDtor(void* object) {
  CMsgGC_GameServer_LevelInfo* _this = reinterpret_cast< CMsgGC_GameServer_LevelInfo* >(object);
  (void)_this;
}
void CMsgGC_GameServer_LevelInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGC_GameServer_LevelInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGC_GameServer_LevelInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGC_GameServer_LevelInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    level_name_.ClearNonDefaultToEmpty();
  }
  level_loaded_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGC_GameServer_LevelInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool level_loaded = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_level_loaded(&has_bits);
          level_loaded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string level_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_level_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGC_GameServer_LevelInfo.level_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGC_GameServer_LevelInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGC_GameServer_LevelInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool level_loaded = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_level_loaded(), target);
  }

  // optional string level_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_level_name().data(), static_cast<int>(this->_internal_level_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGC_GameServer_LevelInfo.level_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_level_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGC_GameServer_LevelInfo)
  return target;
}

size_t CMsgGC_GameServer_LevelInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGC_GameServer_LevelInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string level_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_level_name());
    }

    // optional bool level_loaded = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGC_GameServer_LevelInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGC_GameServer_LevelInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGC_GameServer_LevelInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGC_GameServer_LevelInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGC_GameServer_LevelInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGC_GameServer_LevelInfo)
    MergeFrom(*source);
  }
}

void CMsgGC_GameServer_LevelInfo::MergeFrom(const CMsgGC_GameServer_LevelInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGC_GameServer_LevelInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_level_name(from._internal_level_name());
    }
    if (cached_has_bits & 0x00000002u) {
      level_loaded_ = from.level_loaded_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGC_GameServer_LevelInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGC_GameServer_LevelInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_GameServer_LevelInfo::CopyFrom(const CMsgGC_GameServer_LevelInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGC_GameServer_LevelInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_GameServer_LevelInfo::IsInitialized() const {
  return true;
}

void CMsgGC_GameServer_LevelInfo::InternalSwap(CMsgGC_GameServer_LevelInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &level_name_, GetArenaForAllocation(),
      &other->level_name_, other->GetArenaForAllocation()
  );
  swap(level_loaded_, other->level_loaded_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGC_GameServer_LevelInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[33]);
}

// ===================================================================

class CMsgGC_GameServer_AuthChallenge::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGC_GameServer_AuthChallenge>()._has_bits_);
  static void set_has_challenge_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGC_GameServer_AuthChallenge::CMsgGC_GameServer_AuthChallenge(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGC_GameServer_AuthChallenge)
}
CMsgGC_GameServer_AuthChallenge::CMsgGC_GameServer_AuthChallenge(const CMsgGC_GameServer_AuthChallenge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  challenge_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_challenge_string()) {
    challenge_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_challenge_string(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CMsgGC_GameServer_AuthChallenge)
}

void CMsgGC_GameServer_AuthChallenge::SharedCtor() {
challenge_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CMsgGC_GameServer_AuthChallenge::~CMsgGC_GameServer_AuthChallenge() {
  // @@protoc_insertion_point(destructor:CMsgGC_GameServer_AuthChallenge)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGC_GameServer_AuthChallenge::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  challenge_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgGC_GameServer_AuthChallenge::ArenaDtor(void* object) {
  CMsgGC_GameServer_AuthChallenge* _this = reinterpret_cast< CMsgGC_GameServer_AuthChallenge* >(object);
  (void)_this;
}
void CMsgGC_GameServer_AuthChallenge::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGC_GameServer_AuthChallenge::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGC_GameServer_AuthChallenge::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGC_GameServer_AuthChallenge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    challenge_string_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGC_GameServer_AuthChallenge::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string challenge_string = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_challenge_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGC_GameServer_AuthChallenge.challenge_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGC_GameServer_AuthChallenge::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGC_GameServer_AuthChallenge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string challenge_string = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_challenge_string().data(), static_cast<int>(this->_internal_challenge_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGC_GameServer_AuthChallenge.challenge_string");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_challenge_string(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGC_GameServer_AuthChallenge)
  return target;
}

size_t CMsgGC_GameServer_AuthChallenge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGC_GameServer_AuthChallenge)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string challenge_string = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_challenge_string());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGC_GameServer_AuthChallenge::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGC_GameServer_AuthChallenge)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGC_GameServer_AuthChallenge* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGC_GameServer_AuthChallenge>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGC_GameServer_AuthChallenge)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGC_GameServer_AuthChallenge)
    MergeFrom(*source);
  }
}

void CMsgGC_GameServer_AuthChallenge::MergeFrom(const CMsgGC_GameServer_AuthChallenge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGC_GameServer_AuthChallenge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_challenge_string()) {
    _internal_set_challenge_string(from._internal_challenge_string());
  }
}

void CMsgGC_GameServer_AuthChallenge::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGC_GameServer_AuthChallenge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_GameServer_AuthChallenge::CopyFrom(const CMsgGC_GameServer_AuthChallenge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGC_GameServer_AuthChallenge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_GameServer_AuthChallenge::IsInitialized() const {
  return true;
}

void CMsgGC_GameServer_AuthChallenge::InternalSwap(CMsgGC_GameServer_AuthChallenge* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &challenge_string_, GetArenaForAllocation(),
      &other->challenge_string_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGC_GameServer_AuthChallenge::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[34]);
}

// ===================================================================

class CMsgGC_GameServer_AuthResult::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGC_GameServer_AuthResult>()._has_bits_);
  static void set_has_authenticated(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_game_server_standing(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_game_server_standing_trend(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_is_valve_server(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGC_GameServer_AuthResult::CMsgGC_GameServer_AuthResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGC_GameServer_AuthResult)
}
CMsgGC_GameServer_AuthResult::CMsgGC_GameServer_AuthResult(const CMsgGC_GameServer_AuthResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_message()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArenaForAllocation());
  }
  ::memcpy(&game_server_standing_, &from.game_server_standing_,
    static_cast<size_t>(reinterpret_cast<char*>(&game_server_standing_trend_) -
    reinterpret_cast<char*>(&game_server_standing_)) + sizeof(game_server_standing_trend_));
  // @@protoc_insertion_point(copy_constructor:CMsgGC_GameServer_AuthResult)
}

void CMsgGC_GameServer_AuthResult::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&game_server_standing_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&game_server_standing_trend_) -
    reinterpret_cast<char*>(&game_server_standing_)) + sizeof(game_server_standing_trend_));
}

CMsgGC_GameServer_AuthResult::~CMsgGC_GameServer_AuthResult() {
  // @@protoc_insertion_point(destructor:CMsgGC_GameServer_AuthResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGC_GameServer_AuthResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgGC_GameServer_AuthResult::ArenaDtor(void* object) {
  CMsgGC_GameServer_AuthResult* _this = reinterpret_cast< CMsgGC_GameServer_AuthResult* >(object);
  (void)_this;
}
void CMsgGC_GameServer_AuthResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGC_GameServer_AuthResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGC_GameServer_AuthResult::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGC_GameServer_AuthResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&game_server_standing_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&game_server_standing_trend_) -
        reinterpret_cast<char*>(&game_server_standing_)) + sizeof(game_server_standing_trend_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGC_GameServer_AuthResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool authenticated = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_authenticated(&has_bits);
          authenticated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 game_server_standing = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_game_server_standing(&has_bits);
          game_server_standing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 game_server_standing_trend = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_game_server_standing_trend(&has_bits);
          game_server_standing_trend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_valve_server = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_is_valve_server(&has_bits);
          is_valve_server_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string message = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGC_GameServer_AuthResult.message");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGC_GameServer_AuthResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGC_GameServer_AuthResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool authenticated = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_authenticated(), target);
  }

  // optional int32 game_server_standing = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_game_server_standing(), target);
  }

  // optional int32 game_server_standing_trend = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_game_server_standing_trend(), target);
  }

  // optional bool is_valve_server = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_valve_server(), target);
  }

  // optional string message = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGC_GameServer_AuthResult.message");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGC_GameServer_AuthResult)
  return target;
}

size_t CMsgGC_GameServer_AuthResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGC_GameServer_AuthResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string message = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_message());
    }

    // optional int32 game_server_standing = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_game_server_standing());
    }

    // optional bool authenticated = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool is_valve_server = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional int32 game_server_standing_trend = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_game_server_standing_trend());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGC_GameServer_AuthResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGC_GameServer_AuthResult)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGC_GameServer_AuthResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGC_GameServer_AuthResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGC_GameServer_AuthResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGC_GameServer_AuthResult)
    MergeFrom(*source);
  }
}

void CMsgGC_GameServer_AuthResult::MergeFrom(const CMsgGC_GameServer_AuthResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGC_GameServer_AuthResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_message(from._internal_message());
    }
    if (cached_has_bits & 0x00000002u) {
      game_server_standing_ = from.game_server_standing_;
    }
    if (cached_has_bits & 0x00000004u) {
      authenticated_ = from.authenticated_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_valve_server_ = from.is_valve_server_;
    }
    if (cached_has_bits & 0x00000010u) {
      game_server_standing_trend_ = from.game_server_standing_trend_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGC_GameServer_AuthResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGC_GameServer_AuthResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_GameServer_AuthResult::CopyFrom(const CMsgGC_GameServer_AuthResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGC_GameServer_AuthResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_GameServer_AuthResult::IsInitialized() const {
  return true;
}

void CMsgGC_GameServer_AuthResult::InternalSwap(CMsgGC_GameServer_AuthResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &message_, GetArenaForAllocation(),
      &other->message_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGC_GameServer_AuthResult, game_server_standing_trend_)
      + sizeof(CMsgGC_GameServer_AuthResult::game_server_standing_trend_)
      - PROTOBUF_FIELD_OFFSET(CMsgGC_GameServer_AuthResult, game_server_standing_)>(
          reinterpret_cast<char*>(&game_server_standing_),
          reinterpret_cast<char*>(&other->game_server_standing_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGC_GameServer_AuthResult::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[35]);
}

// ===================================================================

class CMsgGC_GameServer_AuthChallengeResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGC_GameServer_AuthChallengeResponse>()._has_bits_);
  static void set_has_game_server_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_hashed_challenge_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGC_GameServer_AuthChallengeResponse::CMsgGC_GameServer_AuthChallengeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGC_GameServer_AuthChallengeResponse)
}
CMsgGC_GameServer_AuthChallengeResponse::CMsgGC_GameServer_AuthChallengeResponse(const CMsgGC_GameServer_AuthChallengeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hashed_challenge_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_hashed_challenge_string()) {
    hashed_challenge_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_hashed_challenge_string(), 
      GetArenaForAllocation());
  }
  game_server_account_id_ = from.game_server_account_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgGC_GameServer_AuthChallengeResponse)
}

void CMsgGC_GameServer_AuthChallengeResponse::SharedCtor() {
hashed_challenge_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
game_server_account_id_ = 0u;
}

CMsgGC_GameServer_AuthChallengeResponse::~CMsgGC_GameServer_AuthChallengeResponse() {
  // @@protoc_insertion_point(destructor:CMsgGC_GameServer_AuthChallengeResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGC_GameServer_AuthChallengeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  hashed_challenge_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgGC_GameServer_AuthChallengeResponse::ArenaDtor(void* object) {
  CMsgGC_GameServer_AuthChallengeResponse* _this = reinterpret_cast< CMsgGC_GameServer_AuthChallengeResponse* >(object);
  (void)_this;
}
void CMsgGC_GameServer_AuthChallengeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGC_GameServer_AuthChallengeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGC_GameServer_AuthChallengeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGC_GameServer_AuthChallengeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    hashed_challenge_string_.ClearNonDefaultToEmpty();
  }
  game_server_account_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGC_GameServer_AuthChallengeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 game_server_account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_game_server_account_id(&has_bits);
          game_server_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes hashed_challenge_string = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_hashed_challenge_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGC_GameServer_AuthChallengeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGC_GameServer_AuthChallengeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 game_server_account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_game_server_account_id(), target);
  }

  // optional bytes hashed_challenge_string = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_hashed_challenge_string(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGC_GameServer_AuthChallengeResponse)
  return target;
}

size_t CMsgGC_GameServer_AuthChallengeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGC_GameServer_AuthChallengeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes hashed_challenge_string = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_hashed_challenge_string());
    }

    // optional uint32 game_server_account_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_game_server_account_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGC_GameServer_AuthChallengeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGC_GameServer_AuthChallengeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGC_GameServer_AuthChallengeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGC_GameServer_AuthChallengeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGC_GameServer_AuthChallengeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGC_GameServer_AuthChallengeResponse)
    MergeFrom(*source);
  }
}

void CMsgGC_GameServer_AuthChallengeResponse::MergeFrom(const CMsgGC_GameServer_AuthChallengeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGC_GameServer_AuthChallengeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_hashed_challenge_string(from._internal_hashed_challenge_string());
    }
    if (cached_has_bits & 0x00000002u) {
      game_server_account_id_ = from.game_server_account_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGC_GameServer_AuthChallengeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGC_GameServer_AuthChallengeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_GameServer_AuthChallengeResponse::CopyFrom(const CMsgGC_GameServer_AuthChallengeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGC_GameServer_AuthChallengeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_GameServer_AuthChallengeResponse::IsInitialized() const {
  return true;
}

void CMsgGC_GameServer_AuthChallengeResponse::InternalSwap(CMsgGC_GameServer_AuthChallengeResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &hashed_challenge_string_, GetArenaForAllocation(),
      &other->hashed_challenge_string_, other->GetArenaForAllocation()
  );
  swap(game_server_account_id_, other->game_server_account_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGC_GameServer_AuthChallengeResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[36]);
}

// ===================================================================

class CMsgGC_GameServer_CreateIdentity::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGC_GameServer_CreateIdentity>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGC_GameServer_CreateIdentity::CMsgGC_GameServer_CreateIdentity(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGC_GameServer_CreateIdentity)
}
CMsgGC_GameServer_CreateIdentity::CMsgGC_GameServer_CreateIdentity(const CMsgGC_GameServer_CreateIdentity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_id_ = from.account_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgGC_GameServer_CreateIdentity)
}

void CMsgGC_GameServer_CreateIdentity::SharedCtor() {
account_id_ = 0u;
}

CMsgGC_GameServer_CreateIdentity::~CMsgGC_GameServer_CreateIdentity() {
  // @@protoc_insertion_point(destructor:CMsgGC_GameServer_CreateIdentity)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGC_GameServer_CreateIdentity::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGC_GameServer_CreateIdentity::ArenaDtor(void* object) {
  CMsgGC_GameServer_CreateIdentity* _this = reinterpret_cast< CMsgGC_GameServer_CreateIdentity* >(object);
  (void)_this;
}
void CMsgGC_GameServer_CreateIdentity::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGC_GameServer_CreateIdentity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGC_GameServer_CreateIdentity::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGC_GameServer_CreateIdentity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGC_GameServer_CreateIdentity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGC_GameServer_CreateIdentity::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGC_GameServer_CreateIdentity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGC_GameServer_CreateIdentity)
  return target;
}

size_t CMsgGC_GameServer_CreateIdentity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGC_GameServer_CreateIdentity)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 account_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_account_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGC_GameServer_CreateIdentity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGC_GameServer_CreateIdentity)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGC_GameServer_CreateIdentity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGC_GameServer_CreateIdentity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGC_GameServer_CreateIdentity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGC_GameServer_CreateIdentity)
    MergeFrom(*source);
  }
}

void CMsgGC_GameServer_CreateIdentity::MergeFrom(const CMsgGC_GameServer_CreateIdentity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGC_GameServer_CreateIdentity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_account_id()) {
    _internal_set_account_id(from._internal_account_id());
  }
}

void CMsgGC_GameServer_CreateIdentity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGC_GameServer_CreateIdentity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_GameServer_CreateIdentity::CopyFrom(const CMsgGC_GameServer_CreateIdentity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGC_GameServer_CreateIdentity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_GameServer_CreateIdentity::IsInitialized() const {
  return true;
}

void CMsgGC_GameServer_CreateIdentity::InternalSwap(CMsgGC_GameServer_CreateIdentity* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(account_id_, other->account_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGC_GameServer_CreateIdentity::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[37]);
}

// ===================================================================

class CMsgGC_GameServer_CreateIdentityResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGC_GameServer_CreateIdentityResponse>()._has_bits_);
  static void set_has_account_created(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_game_server_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_game_server_identity_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgGC_GameServer_CreateIdentityResponse::CMsgGC_GameServer_CreateIdentityResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGC_GameServer_CreateIdentityResponse)
}
CMsgGC_GameServer_CreateIdentityResponse::CMsgGC_GameServer_CreateIdentityResponse(const CMsgGC_GameServer_CreateIdentityResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  game_server_identity_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_game_server_identity_token()) {
    game_server_identity_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_game_server_identity_token(), 
      GetArenaForAllocation());
  }
  ::memcpy(&account_created_, &from.account_created_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&account_created_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:CMsgGC_GameServer_CreateIdentityResponse)
}

void CMsgGC_GameServer_CreateIdentityResponse::SharedCtor() {
game_server_identity_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_created_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&account_created_)) + sizeof(status_));
}

CMsgGC_GameServer_CreateIdentityResponse::~CMsgGC_GameServer_CreateIdentityResponse() {
  // @@protoc_insertion_point(destructor:CMsgGC_GameServer_CreateIdentityResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGC_GameServer_CreateIdentityResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  game_server_identity_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgGC_GameServer_CreateIdentityResponse::ArenaDtor(void* object) {
  CMsgGC_GameServer_CreateIdentityResponse* _this = reinterpret_cast< CMsgGC_GameServer_CreateIdentityResponse* >(object);
  (void)_this;
}
void CMsgGC_GameServer_CreateIdentityResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGC_GameServer_CreateIdentityResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGC_GameServer_CreateIdentityResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGC_GameServer_CreateIdentityResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    game_server_identity_token_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&account_created_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&status_) -
        reinterpret_cast<char*>(&account_created_)) + sizeof(status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGC_GameServer_CreateIdentityResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool account_created = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_created(&has_bits);
          account_created_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 game_server_account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_game_server_account_id(&has_bits);
          game_server_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string game_server_identity_token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_game_server_identity_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGC_GameServer_CreateIdentityResponse.game_server_identity_token");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgGC_GameServer_CreateIdentityResponse.EStatus status = 4 [default = kStatus_GenericFailure];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgGC_GameServer_CreateIdentityResponse_EStatus_IsValid(val))) {
            _internal_set_status(static_cast<::CMsgGC_GameServer_CreateIdentityResponse_EStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGC_GameServer_CreateIdentityResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGC_GameServer_CreateIdentityResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool account_created = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_account_created(), target);
  }

  // optional uint32 game_server_account_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_game_server_account_id(), target);
  }

  // optional string game_server_identity_token = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_game_server_identity_token().data(), static_cast<int>(this->_internal_game_server_identity_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGC_GameServer_CreateIdentityResponse.game_server_identity_token");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_game_server_identity_token(), target);
  }

  // optional .CMsgGC_GameServer_CreateIdentityResponse.EStatus status = 4 [default = kStatus_GenericFailure];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGC_GameServer_CreateIdentityResponse)
  return target;
}

size_t CMsgGC_GameServer_CreateIdentityResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGC_GameServer_CreateIdentityResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string game_server_identity_token = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_game_server_identity_token());
    }

    // optional bool account_created = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional uint32 game_server_account_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_game_server_account_id());
    }

    // optional .CMsgGC_GameServer_CreateIdentityResponse.EStatus status = 4 [default = kStatus_GenericFailure];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGC_GameServer_CreateIdentityResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGC_GameServer_CreateIdentityResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGC_GameServer_CreateIdentityResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGC_GameServer_CreateIdentityResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGC_GameServer_CreateIdentityResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGC_GameServer_CreateIdentityResponse)
    MergeFrom(*source);
  }
}

void CMsgGC_GameServer_CreateIdentityResponse::MergeFrom(const CMsgGC_GameServer_CreateIdentityResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGC_GameServer_CreateIdentityResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_game_server_identity_token(from._internal_game_server_identity_token());
    }
    if (cached_has_bits & 0x00000002u) {
      account_created_ = from.account_created_;
    }
    if (cached_has_bits & 0x00000004u) {
      game_server_account_id_ = from.game_server_account_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGC_GameServer_CreateIdentityResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGC_GameServer_CreateIdentityResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_GameServer_CreateIdentityResponse::CopyFrom(const CMsgGC_GameServer_CreateIdentityResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGC_GameServer_CreateIdentityResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_GameServer_CreateIdentityResponse::IsInitialized() const {
  return true;
}

void CMsgGC_GameServer_CreateIdentityResponse::InternalSwap(CMsgGC_GameServer_CreateIdentityResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &game_server_identity_token_, GetArenaForAllocation(),
      &other->game_server_identity_token_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGC_GameServer_CreateIdentityResponse, status_)
      + sizeof(CMsgGC_GameServer_CreateIdentityResponse::status_)
      - PROTOBUF_FIELD_OFFSET(CMsgGC_GameServer_CreateIdentityResponse, account_created_)>(
          reinterpret_cast<char*>(&account_created_),
          reinterpret_cast<char*>(&other->account_created_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGC_GameServer_CreateIdentityResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[38]);
}

// ===================================================================

class CMsgGC_GameServer_List::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGC_GameServer_List>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGC_GameServer_List::CMsgGC_GameServer_List(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGC_GameServer_List)
}
CMsgGC_GameServer_List::CMsgGC_GameServer_List(const CMsgGC_GameServer_List& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_id_ = from.account_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgGC_GameServer_List)
}

void CMsgGC_GameServer_List::SharedCtor() {
account_id_ = 0u;
}

CMsgGC_GameServer_List::~CMsgGC_GameServer_List() {
  // @@protoc_insertion_point(destructor:CMsgGC_GameServer_List)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGC_GameServer_List::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGC_GameServer_List::ArenaDtor(void* object) {
  CMsgGC_GameServer_List* _this = reinterpret_cast< CMsgGC_GameServer_List* >(object);
  (void)_this;
}
void CMsgGC_GameServer_List::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGC_GameServer_List::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGC_GameServer_List::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGC_GameServer_List)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGC_GameServer_List::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGC_GameServer_List::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGC_GameServer_List)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGC_GameServer_List)
  return target;
}

size_t CMsgGC_GameServer_List::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGC_GameServer_List)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 account_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_account_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGC_GameServer_List::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGC_GameServer_List)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGC_GameServer_List* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGC_GameServer_List>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGC_GameServer_List)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGC_GameServer_List)
    MergeFrom(*source);
  }
}

void CMsgGC_GameServer_List::MergeFrom(const CMsgGC_GameServer_List& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGC_GameServer_List)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_account_id()) {
    _internal_set_account_id(from._internal_account_id());
  }
}

void CMsgGC_GameServer_List::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGC_GameServer_List)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_GameServer_List::CopyFrom(const CMsgGC_GameServer_List& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGC_GameServer_List)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_GameServer_List::IsInitialized() const {
  return true;
}

void CMsgGC_GameServer_List::InternalSwap(CMsgGC_GameServer_List* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(account_id_, other->account_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGC_GameServer_List::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[39]);
}

// ===================================================================

class CMsgGC_GameServer_ListResponse_GameServerIdentity::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGC_GameServer_ListResponse_GameServerIdentity>()._has_bits_);
  static void set_has_game_server_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_game_server_identity_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_game_server_standing(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_game_server_standing_trend(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgGC_GameServer_ListResponse_GameServerIdentity::CMsgGC_GameServer_ListResponse_GameServerIdentity(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGC_GameServer_ListResponse.GameServerIdentity)
}
CMsgGC_GameServer_ListResponse_GameServerIdentity::CMsgGC_GameServer_ListResponse_GameServerIdentity(const CMsgGC_GameServer_ListResponse_GameServerIdentity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  game_server_identity_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_game_server_identity_token()) {
    game_server_identity_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_game_server_identity_token(), 
      GetArenaForAllocation());
  }
  ::memcpy(&game_server_account_id_, &from.game_server_account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&game_server_standing_trend_) -
    reinterpret_cast<char*>(&game_server_account_id_)) + sizeof(game_server_standing_trend_));
  // @@protoc_insertion_point(copy_constructor:CMsgGC_GameServer_ListResponse.GameServerIdentity)
}

void CMsgGC_GameServer_ListResponse_GameServerIdentity::SharedCtor() {
game_server_identity_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&game_server_account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&game_server_standing_trend_) -
    reinterpret_cast<char*>(&game_server_account_id_)) + sizeof(game_server_standing_trend_));
}

CMsgGC_GameServer_ListResponse_GameServerIdentity::~CMsgGC_GameServer_ListResponse_GameServerIdentity() {
  // @@protoc_insertion_point(destructor:CMsgGC_GameServer_ListResponse.GameServerIdentity)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGC_GameServer_ListResponse_GameServerIdentity::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  game_server_identity_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgGC_GameServer_ListResponse_GameServerIdentity::ArenaDtor(void* object) {
  CMsgGC_GameServer_ListResponse_GameServerIdentity* _this = reinterpret_cast< CMsgGC_GameServer_ListResponse_GameServerIdentity* >(object);
  (void)_this;
}
void CMsgGC_GameServer_ListResponse_GameServerIdentity::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGC_GameServer_ListResponse_GameServerIdentity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGC_GameServer_ListResponse_GameServerIdentity::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGC_GameServer_ListResponse.GameServerIdentity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    game_server_identity_token_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&game_server_account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&game_server_standing_trend_) -
        reinterpret_cast<char*>(&game_server_account_id_)) + sizeof(game_server_standing_trend_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGC_GameServer_ListResponse_GameServerIdentity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 game_server_account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_game_server_account_id(&has_bits);
          game_server_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string game_server_identity_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_game_server_identity_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGC_GameServer_ListResponse.GameServerIdentity.game_server_identity_token");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 game_server_standing = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_game_server_standing(&has_bits);
          game_server_standing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 game_server_standing_trend = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_game_server_standing_trend(&has_bits);
          game_server_standing_trend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGC_GameServer_ListResponse_GameServerIdentity::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGC_GameServer_ListResponse.GameServerIdentity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 game_server_account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_game_server_account_id(), target);
  }

  // optional string game_server_identity_token = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_game_server_identity_token().data(), static_cast<int>(this->_internal_game_server_identity_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGC_GameServer_ListResponse.GameServerIdentity.game_server_identity_token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_game_server_identity_token(), target);
  }

  // optional int32 game_server_standing = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_game_server_standing(), target);
  }

  // optional int32 game_server_standing_trend = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_game_server_standing_trend(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGC_GameServer_ListResponse.GameServerIdentity)
  return target;
}

size_t CMsgGC_GameServer_ListResponse_GameServerIdentity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGC_GameServer_ListResponse.GameServerIdentity)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string game_server_identity_token = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_game_server_identity_token());
    }

    // optional uint32 game_server_account_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_game_server_account_id());
    }

    // optional int32 game_server_standing = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_game_server_standing());
    }

    // optional int32 game_server_standing_trend = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_game_server_standing_trend());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGC_GameServer_ListResponse_GameServerIdentity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGC_GameServer_ListResponse.GameServerIdentity)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGC_GameServer_ListResponse_GameServerIdentity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGC_GameServer_ListResponse_GameServerIdentity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGC_GameServer_ListResponse.GameServerIdentity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGC_GameServer_ListResponse.GameServerIdentity)
    MergeFrom(*source);
  }
}

void CMsgGC_GameServer_ListResponse_GameServerIdentity::MergeFrom(const CMsgGC_GameServer_ListResponse_GameServerIdentity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGC_GameServer_ListResponse.GameServerIdentity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_game_server_identity_token(from._internal_game_server_identity_token());
    }
    if (cached_has_bits & 0x00000002u) {
      game_server_account_id_ = from.game_server_account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      game_server_standing_ = from.game_server_standing_;
    }
    if (cached_has_bits & 0x00000008u) {
      game_server_standing_trend_ = from.game_server_standing_trend_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGC_GameServer_ListResponse_GameServerIdentity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGC_GameServer_ListResponse.GameServerIdentity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_GameServer_ListResponse_GameServerIdentity::CopyFrom(const CMsgGC_GameServer_ListResponse_GameServerIdentity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGC_GameServer_ListResponse.GameServerIdentity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_GameServer_ListResponse_GameServerIdentity::IsInitialized() const {
  return true;
}

void CMsgGC_GameServer_ListResponse_GameServerIdentity::InternalSwap(CMsgGC_GameServer_ListResponse_GameServerIdentity* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &game_server_identity_token_, GetArenaForAllocation(),
      &other->game_server_identity_token_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGC_GameServer_ListResponse_GameServerIdentity, game_server_standing_trend_)
      + sizeof(CMsgGC_GameServer_ListResponse_GameServerIdentity::game_server_standing_trend_)
      - PROTOBUF_FIELD_OFFSET(CMsgGC_GameServer_ListResponse_GameServerIdentity, game_server_account_id_)>(
          reinterpret_cast<char*>(&game_server_account_id_),
          reinterpret_cast<char*>(&other->game_server_account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGC_GameServer_ListResponse_GameServerIdentity::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[40]);
}

// ===================================================================

class CMsgGC_GameServer_ListResponse::_Internal {
 public:
};

CMsgGC_GameServer_ListResponse::CMsgGC_GameServer_ListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  owned_game_servers_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGC_GameServer_ListResponse)
}
CMsgGC_GameServer_ListResponse::CMsgGC_GameServer_ListResponse(const CMsgGC_GameServer_ListResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      owned_game_servers_(from.owned_game_servers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGC_GameServer_ListResponse)
}

void CMsgGC_GameServer_ListResponse::SharedCtor() {
}

CMsgGC_GameServer_ListResponse::~CMsgGC_GameServer_ListResponse() {
  // @@protoc_insertion_point(destructor:CMsgGC_GameServer_ListResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGC_GameServer_ListResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGC_GameServer_ListResponse::ArenaDtor(void* object) {
  CMsgGC_GameServer_ListResponse* _this = reinterpret_cast< CMsgGC_GameServer_ListResponse* >(object);
  (void)_this;
}
void CMsgGC_GameServer_ListResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGC_GameServer_ListResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGC_GameServer_ListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGC_GameServer_ListResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  owned_game_servers_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGC_GameServer_ListResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgGC_GameServer_ListResponse.GameServerIdentity owned_game_servers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_owned_game_servers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGC_GameServer_ListResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGC_GameServer_ListResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgGC_GameServer_ListResponse.GameServerIdentity owned_game_servers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_owned_game_servers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_owned_game_servers(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGC_GameServer_ListResponse)
  return target;
}

size_t CMsgGC_GameServer_ListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGC_GameServer_ListResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgGC_GameServer_ListResponse.GameServerIdentity owned_game_servers = 1;
  total_size += 1UL * this->_internal_owned_game_servers_size();
  for (const auto& msg : this->owned_game_servers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGC_GameServer_ListResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGC_GameServer_ListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGC_GameServer_ListResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGC_GameServer_ListResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGC_GameServer_ListResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGC_GameServer_ListResponse)
    MergeFrom(*source);
  }
}

void CMsgGC_GameServer_ListResponse::MergeFrom(const CMsgGC_GameServer_ListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGC_GameServer_ListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  owned_game_servers_.MergeFrom(from.owned_game_servers_);
}

void CMsgGC_GameServer_ListResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGC_GameServer_ListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_GameServer_ListResponse::CopyFrom(const CMsgGC_GameServer_ListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGC_GameServer_ListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_GameServer_ListResponse::IsInitialized() const {
  return true;
}

void CMsgGC_GameServer_ListResponse::InternalSwap(CMsgGC_GameServer_ListResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  owned_game_servers_.InternalSwap(&other->owned_game_servers_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGC_GameServer_ListResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[41]);
}

// ===================================================================

class CMsgGC_GameServer_ResetIdentity::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGC_GameServer_ResetIdentity>()._has_bits_);
  static void set_has_game_server_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGC_GameServer_ResetIdentity::CMsgGC_GameServer_ResetIdentity(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGC_GameServer_ResetIdentity)
}
CMsgGC_GameServer_ResetIdentity::CMsgGC_GameServer_ResetIdentity(const CMsgGC_GameServer_ResetIdentity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  game_server_account_id_ = from.game_server_account_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgGC_GameServer_ResetIdentity)
}

void CMsgGC_GameServer_ResetIdentity::SharedCtor() {
game_server_account_id_ = 0u;
}

CMsgGC_GameServer_ResetIdentity::~CMsgGC_GameServer_ResetIdentity() {
  // @@protoc_insertion_point(destructor:CMsgGC_GameServer_ResetIdentity)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGC_GameServer_ResetIdentity::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGC_GameServer_ResetIdentity::ArenaDtor(void* object) {
  CMsgGC_GameServer_ResetIdentity* _this = reinterpret_cast< CMsgGC_GameServer_ResetIdentity* >(object);
  (void)_this;
}
void CMsgGC_GameServer_ResetIdentity::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGC_GameServer_ResetIdentity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGC_GameServer_ResetIdentity::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGC_GameServer_ResetIdentity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  game_server_account_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGC_GameServer_ResetIdentity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 game_server_account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_game_server_account_id(&has_bits);
          game_server_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGC_GameServer_ResetIdentity::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGC_GameServer_ResetIdentity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 game_server_account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_game_server_account_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGC_GameServer_ResetIdentity)
  return target;
}

size_t CMsgGC_GameServer_ResetIdentity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGC_GameServer_ResetIdentity)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 game_server_account_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_game_server_account_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGC_GameServer_ResetIdentity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGC_GameServer_ResetIdentity)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGC_GameServer_ResetIdentity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGC_GameServer_ResetIdentity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGC_GameServer_ResetIdentity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGC_GameServer_ResetIdentity)
    MergeFrom(*source);
  }
}

void CMsgGC_GameServer_ResetIdentity::MergeFrom(const CMsgGC_GameServer_ResetIdentity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGC_GameServer_ResetIdentity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_game_server_account_id()) {
    _internal_set_game_server_account_id(from._internal_game_server_account_id());
  }
}

void CMsgGC_GameServer_ResetIdentity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGC_GameServer_ResetIdentity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_GameServer_ResetIdentity::CopyFrom(const CMsgGC_GameServer_ResetIdentity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGC_GameServer_ResetIdentity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_GameServer_ResetIdentity::IsInitialized() const {
  return true;
}

void CMsgGC_GameServer_ResetIdentity::InternalSwap(CMsgGC_GameServer_ResetIdentity* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(game_server_account_id_, other->game_server_account_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGC_GameServer_ResetIdentity::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[42]);
}

// ===================================================================

class CMsgGC_GameServer_ResetIdentityResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGC_GameServer_ResetIdentityResponse>()._has_bits_);
  static void set_has_game_server_identity_token_reset(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_game_server_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_game_server_identity_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGC_GameServer_ResetIdentityResponse::CMsgGC_GameServer_ResetIdentityResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGC_GameServer_ResetIdentityResponse)
}
CMsgGC_GameServer_ResetIdentityResponse::CMsgGC_GameServer_ResetIdentityResponse(const CMsgGC_GameServer_ResetIdentityResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  game_server_identity_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_game_server_identity_token()) {
    game_server_identity_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_game_server_identity_token(), 
      GetArenaForAllocation());
  }
  ::memcpy(&game_server_identity_token_reset_, &from.game_server_identity_token_reset_,
    static_cast<size_t>(reinterpret_cast<char*>(&game_server_account_id_) -
    reinterpret_cast<char*>(&game_server_identity_token_reset_)) + sizeof(game_server_account_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgGC_GameServer_ResetIdentityResponse)
}

void CMsgGC_GameServer_ResetIdentityResponse::SharedCtor() {
game_server_identity_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&game_server_identity_token_reset_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&game_server_account_id_) -
    reinterpret_cast<char*>(&game_server_identity_token_reset_)) + sizeof(game_server_account_id_));
}

CMsgGC_GameServer_ResetIdentityResponse::~CMsgGC_GameServer_ResetIdentityResponse() {
  // @@protoc_insertion_point(destructor:CMsgGC_GameServer_ResetIdentityResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGC_GameServer_ResetIdentityResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  game_server_identity_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgGC_GameServer_ResetIdentityResponse::ArenaDtor(void* object) {
  CMsgGC_GameServer_ResetIdentityResponse* _this = reinterpret_cast< CMsgGC_GameServer_ResetIdentityResponse* >(object);
  (void)_this;
}
void CMsgGC_GameServer_ResetIdentityResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGC_GameServer_ResetIdentityResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGC_GameServer_ResetIdentityResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGC_GameServer_ResetIdentityResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    game_server_identity_token_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&game_server_identity_token_reset_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&game_server_account_id_) -
        reinterpret_cast<char*>(&game_server_identity_token_reset_)) + sizeof(game_server_account_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGC_GameServer_ResetIdentityResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool game_server_identity_token_reset = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_game_server_identity_token_reset(&has_bits);
          game_server_identity_token_reset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 game_server_account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_game_server_account_id(&has_bits);
          game_server_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string game_server_identity_token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_game_server_identity_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGC_GameServer_ResetIdentityResponse.game_server_identity_token");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGC_GameServer_ResetIdentityResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGC_GameServer_ResetIdentityResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool game_server_identity_token_reset = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_game_server_identity_token_reset(), target);
  }

  // optional uint32 game_server_account_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_game_server_account_id(), target);
  }

  // optional string game_server_identity_token = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_game_server_identity_token().data(), static_cast<int>(this->_internal_game_server_identity_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGC_GameServer_ResetIdentityResponse.game_server_identity_token");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_game_server_identity_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGC_GameServer_ResetIdentityResponse)
  return target;
}

size_t CMsgGC_GameServer_ResetIdentityResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGC_GameServer_ResetIdentityResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string game_server_identity_token = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_game_server_identity_token());
    }

    // optional bool game_server_identity_token_reset = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional uint32 game_server_account_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_game_server_account_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGC_GameServer_ResetIdentityResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGC_GameServer_ResetIdentityResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGC_GameServer_ResetIdentityResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGC_GameServer_ResetIdentityResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGC_GameServer_ResetIdentityResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGC_GameServer_ResetIdentityResponse)
    MergeFrom(*source);
  }
}

void CMsgGC_GameServer_ResetIdentityResponse::MergeFrom(const CMsgGC_GameServer_ResetIdentityResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGC_GameServer_ResetIdentityResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_game_server_identity_token(from._internal_game_server_identity_token());
    }
    if (cached_has_bits & 0x00000002u) {
      game_server_identity_token_reset_ = from.game_server_identity_token_reset_;
    }
    if (cached_has_bits & 0x00000004u) {
      game_server_account_id_ = from.game_server_account_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGC_GameServer_ResetIdentityResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGC_GameServer_ResetIdentityResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_GameServer_ResetIdentityResponse::CopyFrom(const CMsgGC_GameServer_ResetIdentityResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGC_GameServer_ResetIdentityResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_GameServer_ResetIdentityResponse::IsInitialized() const {
  return true;
}

void CMsgGC_GameServer_ResetIdentityResponse::InternalSwap(CMsgGC_GameServer_ResetIdentityResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &game_server_identity_token_, GetArenaForAllocation(),
      &other->game_server_identity_token_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGC_GameServer_ResetIdentityResponse, game_server_account_id_)
      + sizeof(CMsgGC_GameServer_ResetIdentityResponse::game_server_account_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgGC_GameServer_ResetIdentityResponse, game_server_identity_token_reset_)>(
          reinterpret_cast<char*>(&game_server_identity_token_reset_),
          reinterpret_cast<char*>(&other->game_server_identity_token_reset_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGC_GameServer_ResetIdentityResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[43]);
}

// ===================================================================

class CMsgGC_GameServer_AckPolicy::_Internal {
 public:
};

CMsgGC_GameServer_AckPolicy::CMsgGC_GameServer_AckPolicy(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGC_GameServer_AckPolicy)
}
CMsgGC_GameServer_AckPolicy::CMsgGC_GameServer_AckPolicy(const CMsgGC_GameServer_AckPolicy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGC_GameServer_AckPolicy)
}

void CMsgGC_GameServer_AckPolicy::SharedCtor() {
}

CMsgGC_GameServer_AckPolicy::~CMsgGC_GameServer_AckPolicy() {
  // @@protoc_insertion_point(destructor:CMsgGC_GameServer_AckPolicy)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGC_GameServer_AckPolicy::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGC_GameServer_AckPolicy::ArenaDtor(void* object) {
  CMsgGC_GameServer_AckPolicy* _this = reinterpret_cast< CMsgGC_GameServer_AckPolicy* >(object);
  (void)_this;
}
void CMsgGC_GameServer_AckPolicy::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGC_GameServer_AckPolicy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGC_GameServer_AckPolicy::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGC_GameServer_AckPolicy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGC_GameServer_AckPolicy::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGC_GameServer_AckPolicy::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGC_GameServer_AckPolicy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGC_GameServer_AckPolicy)
  return target;
}

size_t CMsgGC_GameServer_AckPolicy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGC_GameServer_AckPolicy)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGC_GameServer_AckPolicy::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGC_GameServer_AckPolicy)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGC_GameServer_AckPolicy* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGC_GameServer_AckPolicy>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGC_GameServer_AckPolicy)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGC_GameServer_AckPolicy)
    MergeFrom(*source);
  }
}

void CMsgGC_GameServer_AckPolicy::MergeFrom(const CMsgGC_GameServer_AckPolicy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGC_GameServer_AckPolicy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgGC_GameServer_AckPolicy::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGC_GameServer_AckPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_GameServer_AckPolicy::CopyFrom(const CMsgGC_GameServer_AckPolicy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGC_GameServer_AckPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_GameServer_AckPolicy::IsInitialized() const {
  return true;
}

void CMsgGC_GameServer_AckPolicy::InternalSwap(CMsgGC_GameServer_AckPolicy* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGC_GameServer_AckPolicy::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[44]);
}

// ===================================================================

class CMsgGC_GameServer_AckPolicyResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGC_GameServer_AckPolicyResponse>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGC_GameServer_AckPolicyResponse::CMsgGC_GameServer_AckPolicyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGC_GameServer_AckPolicyResponse)
}
CMsgGC_GameServer_AckPolicyResponse::CMsgGC_GameServer_AckPolicyResponse(const CMsgGC_GameServer_AckPolicyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_message()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArenaForAllocation());
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:CMsgGC_GameServer_AckPolicyResponse)
}

void CMsgGC_GameServer_AckPolicyResponse::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
result_ = 0u;
}

CMsgGC_GameServer_AckPolicyResponse::~CMsgGC_GameServer_AckPolicyResponse() {
  // @@protoc_insertion_point(destructor:CMsgGC_GameServer_AckPolicyResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGC_GameServer_AckPolicyResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgGC_GameServer_AckPolicyResponse::ArenaDtor(void* object) {
  CMsgGC_GameServer_AckPolicyResponse* _this = reinterpret_cast< CMsgGC_GameServer_AckPolicyResponse* >(object);
  (void)_this;
}
void CMsgGC_GameServer_AckPolicyResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGC_GameServer_AckPolicyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGC_GameServer_AckPolicyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGC_GameServer_AckPolicyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_.ClearNonDefaultToEmpty();
  }
  result_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGC_GameServer_AckPolicyResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_result(&has_bits);
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGC_GameServer_AckPolicyResponse.message");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGC_GameServer_AckPolicyResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGC_GameServer_AckPolicyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 result = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_result(), target);
  }

  // optional string message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGC_GameServer_AckPolicyResponse.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGC_GameServer_AckPolicyResponse)
  return target;
}

size_t CMsgGC_GameServer_AckPolicyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGC_GameServer_AckPolicyResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string message = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_message());
    }

    // optional uint32 result = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_result());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGC_GameServer_AckPolicyResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGC_GameServer_AckPolicyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGC_GameServer_AckPolicyResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGC_GameServer_AckPolicyResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGC_GameServer_AckPolicyResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGC_GameServer_AckPolicyResponse)
    MergeFrom(*source);
  }
}

void CMsgGC_GameServer_AckPolicyResponse::MergeFrom(const CMsgGC_GameServer_AckPolicyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGC_GameServer_AckPolicyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_message(from._internal_message());
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGC_GameServer_AckPolicyResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGC_GameServer_AckPolicyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_GameServer_AckPolicyResponse::CopyFrom(const CMsgGC_GameServer_AckPolicyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGC_GameServer_AckPolicyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_GameServer_AckPolicyResponse::IsInitialized() const {
  return true;
}

void CMsgGC_GameServer_AckPolicyResponse::InternalSwap(CMsgGC_GameServer_AckPolicyResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &message_, GetArenaForAllocation(),
      &other->message_, other->GetArenaForAllocation()
  );
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGC_GameServer_AckPolicyResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[45]);
}

// ===================================================================

class CMsgGC_Client_UseServerModificationItem::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGC_Client_UseServerModificationItem>()._has_bits_);
  static void set_has_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGC_Client_UseServerModificationItem::CMsgGC_Client_UseServerModificationItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGC_Client_UseServerModificationItem)
}
CMsgGC_Client_UseServerModificationItem::CMsgGC_Client_UseServerModificationItem(const CMsgGC_Client_UseServerModificationItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  item_id_ = from.item_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgGC_Client_UseServerModificationItem)
}

void CMsgGC_Client_UseServerModificationItem::SharedCtor() {
item_id_ = uint64_t{0u};
}

CMsgGC_Client_UseServerModificationItem::~CMsgGC_Client_UseServerModificationItem() {
  // @@protoc_insertion_point(destructor:CMsgGC_Client_UseServerModificationItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGC_Client_UseServerModificationItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGC_Client_UseServerModificationItem::ArenaDtor(void* object) {
  CMsgGC_Client_UseServerModificationItem* _this = reinterpret_cast< CMsgGC_Client_UseServerModificationItem* >(object);
  (void)_this;
}
void CMsgGC_Client_UseServerModificationItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGC_Client_UseServerModificationItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGC_Client_UseServerModificationItem::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGC_Client_UseServerModificationItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_id_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGC_Client_UseServerModificationItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_item_id(&has_bits);
          item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGC_Client_UseServerModificationItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGC_Client_UseServerModificationItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_item_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGC_Client_UseServerModificationItem)
  return target;
}

size_t CMsgGC_Client_UseServerModificationItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGC_Client_UseServerModificationItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 item_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_item_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGC_Client_UseServerModificationItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGC_Client_UseServerModificationItem)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGC_Client_UseServerModificationItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGC_Client_UseServerModificationItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGC_Client_UseServerModificationItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGC_Client_UseServerModificationItem)
    MergeFrom(*source);
  }
}

void CMsgGC_Client_UseServerModificationItem::MergeFrom(const CMsgGC_Client_UseServerModificationItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGC_Client_UseServerModificationItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_item_id()) {
    _internal_set_item_id(from._internal_item_id());
  }
}

void CMsgGC_Client_UseServerModificationItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGC_Client_UseServerModificationItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_Client_UseServerModificationItem::CopyFrom(const CMsgGC_Client_UseServerModificationItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGC_Client_UseServerModificationItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_Client_UseServerModificationItem::IsInitialized() const {
  return true;
}

void CMsgGC_Client_UseServerModificationItem::InternalSwap(CMsgGC_Client_UseServerModificationItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(item_id_, other->item_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGC_Client_UseServerModificationItem::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[46]);
}

// ===================================================================

class CMsgGC_Client_UseServerModificationItem_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGC_Client_UseServerModificationItem_Response>()._has_bits_);
  static void set_has_response_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGC_Client_UseServerModificationItem_Response::CMsgGC_Client_UseServerModificationItem_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGC_Client_UseServerModificationItem_Response)
}
CMsgGC_Client_UseServerModificationItem_Response::CMsgGC_Client_UseServerModificationItem_Response(const CMsgGC_Client_UseServerModificationItem_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  response_code_ = from.response_code_;
  // @@protoc_insertion_point(copy_constructor:CMsgGC_Client_UseServerModificationItem_Response)
}

void CMsgGC_Client_UseServerModificationItem_Response::SharedCtor() {
response_code_ = 1;
}

CMsgGC_Client_UseServerModificationItem_Response::~CMsgGC_Client_UseServerModificationItem_Response() {
  // @@protoc_insertion_point(destructor:CMsgGC_Client_UseServerModificationItem_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGC_Client_UseServerModificationItem_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGC_Client_UseServerModificationItem_Response::ArenaDtor(void* object) {
  CMsgGC_Client_UseServerModificationItem_Response* _this = reinterpret_cast< CMsgGC_Client_UseServerModificationItem_Response* >(object);
  (void)_this;
}
void CMsgGC_Client_UseServerModificationItem_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGC_Client_UseServerModificationItem_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGC_Client_UseServerModificationItem_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGC_Client_UseServerModificationItem_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  response_code_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGC_Client_UseServerModificationItem_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgGC_Client_UseServerModificationItem_Response.EServerModificationItemResponse response_code = 1 [default = kServerModificationItemResponse_AlreadyInUse];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse_IsValid(val))) {
            _internal_set_response_code(static_cast<::CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGC_Client_UseServerModificationItem_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGC_Client_UseServerModificationItem_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgGC_Client_UseServerModificationItem_Response.EServerModificationItemResponse response_code = 1 [default = kServerModificationItemResponse_AlreadyInUse];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_response_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGC_Client_UseServerModificationItem_Response)
  return target;
}

size_t CMsgGC_Client_UseServerModificationItem_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGC_Client_UseServerModificationItem_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CMsgGC_Client_UseServerModificationItem_Response.EServerModificationItemResponse response_code = 1 [default = kServerModificationItemResponse_AlreadyInUse];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_response_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGC_Client_UseServerModificationItem_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGC_Client_UseServerModificationItem_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGC_Client_UseServerModificationItem_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGC_Client_UseServerModificationItem_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGC_Client_UseServerModificationItem_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGC_Client_UseServerModificationItem_Response)
    MergeFrom(*source);
  }
}

void CMsgGC_Client_UseServerModificationItem_Response::MergeFrom(const CMsgGC_Client_UseServerModificationItem_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGC_Client_UseServerModificationItem_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_response_code()) {
    _internal_set_response_code(from._internal_response_code());
  }
}

void CMsgGC_Client_UseServerModificationItem_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGC_Client_UseServerModificationItem_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_Client_UseServerModificationItem_Response::CopyFrom(const CMsgGC_Client_UseServerModificationItem_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGC_Client_UseServerModificationItem_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_Client_UseServerModificationItem_Response::IsInitialized() const {
  return true;
}

void CMsgGC_Client_UseServerModificationItem_Response::InternalSwap(CMsgGC_Client_UseServerModificationItem_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(response_code_, other->response_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGC_Client_UseServerModificationItem_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[47]);
}

// ===================================================================

class CMsgGC_GameServer_UseServerModificationItem::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGC_GameServer_UseServerModificationItem>()._has_bits_);
  static void set_has_modification_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGC_GameServer_UseServerModificationItem::CMsgGC_GameServer_UseServerModificationItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGC_GameServer_UseServerModificationItem)
}
CMsgGC_GameServer_UseServerModificationItem::CMsgGC_GameServer_UseServerModificationItem(const CMsgGC_GameServer_UseServerModificationItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  modification_type_ = from.modification_type_;
  // @@protoc_insertion_point(copy_constructor:CMsgGC_GameServer_UseServerModificationItem)
}

void CMsgGC_GameServer_UseServerModificationItem::SharedCtor() {
modification_type_ = 1;
}

CMsgGC_GameServer_UseServerModificationItem::~CMsgGC_GameServer_UseServerModificationItem() {
  // @@protoc_insertion_point(destructor:CMsgGC_GameServer_UseServerModificationItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGC_GameServer_UseServerModificationItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGC_GameServer_UseServerModificationItem::ArenaDtor(void* object) {
  CMsgGC_GameServer_UseServerModificationItem* _this = reinterpret_cast< CMsgGC_GameServer_UseServerModificationItem* >(object);
  (void)_this;
}
void CMsgGC_GameServer_UseServerModificationItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGC_GameServer_UseServerModificationItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGC_GameServer_UseServerModificationItem::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGC_GameServer_UseServerModificationItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  modification_type_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGC_GameServer_UseServerModificationItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .EServerModificationItemType modification_type = 1 [default = kGameServerModificationItem_Halloween];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EServerModificationItemType_IsValid(val))) {
            _internal_set_modification_type(static_cast<::EServerModificationItemType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGC_GameServer_UseServerModificationItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGC_GameServer_UseServerModificationItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .EServerModificationItemType modification_type = 1 [default = kGameServerModificationItem_Halloween];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_modification_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGC_GameServer_UseServerModificationItem)
  return target;
}

size_t CMsgGC_GameServer_UseServerModificationItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGC_GameServer_UseServerModificationItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .EServerModificationItemType modification_type = 1 [default = kGameServerModificationItem_Halloween];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_modification_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGC_GameServer_UseServerModificationItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGC_GameServer_UseServerModificationItem)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGC_GameServer_UseServerModificationItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGC_GameServer_UseServerModificationItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGC_GameServer_UseServerModificationItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGC_GameServer_UseServerModificationItem)
    MergeFrom(*source);
  }
}

void CMsgGC_GameServer_UseServerModificationItem::MergeFrom(const CMsgGC_GameServer_UseServerModificationItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGC_GameServer_UseServerModificationItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_modification_type()) {
    _internal_set_modification_type(from._internal_modification_type());
  }
}

void CMsgGC_GameServer_UseServerModificationItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGC_GameServer_UseServerModificationItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_GameServer_UseServerModificationItem::CopyFrom(const CMsgGC_GameServer_UseServerModificationItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGC_GameServer_UseServerModificationItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_GameServer_UseServerModificationItem::IsInitialized() const {
  return true;
}

void CMsgGC_GameServer_UseServerModificationItem::InternalSwap(CMsgGC_GameServer_UseServerModificationItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(modification_type_, other->modification_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGC_GameServer_UseServerModificationItem::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[48]);
}

// ===================================================================

class CMsgGC_GameServer_UseServerModificationItem_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGC_GameServer_UseServerModificationItem_Response>()._has_bits_);
  static void set_has_modification_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_server_response_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGC_GameServer_UseServerModificationItem_Response::CMsgGC_GameServer_UseServerModificationItem_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGC_GameServer_UseServerModificationItem_Response)
}
CMsgGC_GameServer_UseServerModificationItem_Response::CMsgGC_GameServer_UseServerModificationItem_Response(const CMsgGC_GameServer_UseServerModificationItem_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&modification_type_, &from.modification_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&server_response_code_) -
    reinterpret_cast<char*>(&modification_type_)) + sizeof(server_response_code_));
  // @@protoc_insertion_point(copy_constructor:CMsgGC_GameServer_UseServerModificationItem_Response)
}

void CMsgGC_GameServer_UseServerModificationItem_Response::SharedCtor() {
modification_type_ = 1;
server_response_code_ = 1;
}

CMsgGC_GameServer_UseServerModificationItem_Response::~CMsgGC_GameServer_UseServerModificationItem_Response() {
  // @@protoc_insertion_point(destructor:CMsgGC_GameServer_UseServerModificationItem_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGC_GameServer_UseServerModificationItem_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGC_GameServer_UseServerModificationItem_Response::ArenaDtor(void* object) {
  CMsgGC_GameServer_UseServerModificationItem_Response* _this = reinterpret_cast< CMsgGC_GameServer_UseServerModificationItem_Response* >(object);
  (void)_this;
}
void CMsgGC_GameServer_UseServerModificationItem_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGC_GameServer_UseServerModificationItem_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGC_GameServer_UseServerModificationItem_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGC_GameServer_UseServerModificationItem_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    modification_type_ = 1;
    server_response_code_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGC_GameServer_UseServerModificationItem_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .EServerModificationItemType modification_type = 1 [default = kGameServerModificationItem_Halloween];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EServerModificationItemType_IsValid(val))) {
            _internal_set_modification_type(static_cast<::EServerModificationItemType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .CMsgGC_GameServer_UseServerModificationItem_Response.EServerModificationItemServerResponse server_response_code = 2 [default = kServerModificationItemServerResponse_Accepted];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgGC_GameServer_UseServerModificationItem_Response_EServerModificationItemServerResponse_IsValid(val))) {
            _internal_set_server_response_code(static_cast<::CMsgGC_GameServer_UseServerModificationItem_Response_EServerModificationItemServerResponse>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGC_GameServer_UseServerModificationItem_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGC_GameServer_UseServerModificationItem_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .EServerModificationItemType modification_type = 1 [default = kGameServerModificationItem_Halloween];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_modification_type(), target);
  }

  // optional .CMsgGC_GameServer_UseServerModificationItem_Response.EServerModificationItemServerResponse server_response_code = 2 [default = kServerModificationItemServerResponse_Accepted];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_server_response_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGC_GameServer_UseServerModificationItem_Response)
  return target;
}

size_t CMsgGC_GameServer_UseServerModificationItem_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGC_GameServer_UseServerModificationItem_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .EServerModificationItemType modification_type = 1 [default = kGameServerModificationItem_Halloween];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_modification_type());
    }

    // optional .CMsgGC_GameServer_UseServerModificationItem_Response.EServerModificationItemServerResponse server_response_code = 2 [default = kServerModificationItemServerResponse_Accepted];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_server_response_code());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGC_GameServer_UseServerModificationItem_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGC_GameServer_UseServerModificationItem_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGC_GameServer_UseServerModificationItem_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGC_GameServer_UseServerModificationItem_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGC_GameServer_UseServerModificationItem_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGC_GameServer_UseServerModificationItem_Response)
    MergeFrom(*source);
  }
}

void CMsgGC_GameServer_UseServerModificationItem_Response::MergeFrom(const CMsgGC_GameServer_UseServerModificationItem_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGC_GameServer_UseServerModificationItem_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      modification_type_ = from.modification_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      server_response_code_ = from.server_response_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGC_GameServer_UseServerModificationItem_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGC_GameServer_UseServerModificationItem_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_GameServer_UseServerModificationItem_Response::CopyFrom(const CMsgGC_GameServer_UseServerModificationItem_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGC_GameServer_UseServerModificationItem_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_GameServer_UseServerModificationItem_Response::IsInitialized() const {
  return true;
}

void CMsgGC_GameServer_UseServerModificationItem_Response::InternalSwap(CMsgGC_GameServer_UseServerModificationItem_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(modification_type_, other->modification_type_);
  swap(server_response_code_, other->server_response_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGC_GameServer_UseServerModificationItem_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[49]);
}

// ===================================================================

class CMsgGC_GameServer_ServerModificationItemExpired::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGC_GameServer_ServerModificationItemExpired>()._has_bits_);
  static void set_has_modification_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGC_GameServer_ServerModificationItemExpired::CMsgGC_GameServer_ServerModificationItemExpired(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGC_GameServer_ServerModificationItemExpired)
}
CMsgGC_GameServer_ServerModificationItemExpired::CMsgGC_GameServer_ServerModificationItemExpired(const CMsgGC_GameServer_ServerModificationItemExpired& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  modification_type_ = from.modification_type_;
  // @@protoc_insertion_point(copy_constructor:CMsgGC_GameServer_ServerModificationItemExpired)
}

void CMsgGC_GameServer_ServerModificationItemExpired::SharedCtor() {
modification_type_ = 1;
}

CMsgGC_GameServer_ServerModificationItemExpired::~CMsgGC_GameServer_ServerModificationItemExpired() {
  // @@protoc_insertion_point(destructor:CMsgGC_GameServer_ServerModificationItemExpired)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGC_GameServer_ServerModificationItemExpired::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGC_GameServer_ServerModificationItemExpired::ArenaDtor(void* object) {
  CMsgGC_GameServer_ServerModificationItemExpired* _this = reinterpret_cast< CMsgGC_GameServer_ServerModificationItemExpired* >(object);
  (void)_this;
}
void CMsgGC_GameServer_ServerModificationItemExpired::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGC_GameServer_ServerModificationItemExpired::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGC_GameServer_ServerModificationItemExpired::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGC_GameServer_ServerModificationItemExpired)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  modification_type_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGC_GameServer_ServerModificationItemExpired::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .EServerModificationItemType modification_type = 1 [default = kGameServerModificationItem_Halloween];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EServerModificationItemType_IsValid(val))) {
            _internal_set_modification_type(static_cast<::EServerModificationItemType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGC_GameServer_ServerModificationItemExpired::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGC_GameServer_ServerModificationItemExpired)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .EServerModificationItemType modification_type = 1 [default = kGameServerModificationItem_Halloween];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_modification_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGC_GameServer_ServerModificationItemExpired)
  return target;
}

size_t CMsgGC_GameServer_ServerModificationItemExpired::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGC_GameServer_ServerModificationItemExpired)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .EServerModificationItemType modification_type = 1 [default = kGameServerModificationItem_Halloween];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_modification_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGC_GameServer_ServerModificationItemExpired::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGC_GameServer_ServerModificationItemExpired)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGC_GameServer_ServerModificationItemExpired* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGC_GameServer_ServerModificationItemExpired>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGC_GameServer_ServerModificationItemExpired)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGC_GameServer_ServerModificationItemExpired)
    MergeFrom(*source);
  }
}

void CMsgGC_GameServer_ServerModificationItemExpired::MergeFrom(const CMsgGC_GameServer_ServerModificationItemExpired& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGC_GameServer_ServerModificationItemExpired)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_modification_type()) {
    _internal_set_modification_type(from._internal_modification_type());
  }
}

void CMsgGC_GameServer_ServerModificationItemExpired::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGC_GameServer_ServerModificationItemExpired)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_GameServer_ServerModificationItemExpired::CopyFrom(const CMsgGC_GameServer_ServerModificationItemExpired& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGC_GameServer_ServerModificationItemExpired)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_GameServer_ServerModificationItemExpired::IsInitialized() const {
  return true;
}

void CMsgGC_GameServer_ServerModificationItemExpired::InternalSwap(CMsgGC_GameServer_ServerModificationItemExpired* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(modification_type_, other->modification_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGC_GameServer_ServerModificationItemExpired::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[50]);
}

// ===================================================================

class CMsgGC_GameServer_ServerModificationItem::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGC_GameServer_ServerModificationItem>()._has_bits_);
  static void set_has_modification_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_active(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGC_GameServer_ServerModificationItem::CMsgGC_GameServer_ServerModificationItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGC_GameServer_ServerModificationItem)
}
CMsgGC_GameServer_ServerModificationItem::CMsgGC_GameServer_ServerModificationItem(const CMsgGC_GameServer_ServerModificationItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&active_, &from.active_,
    static_cast<size_t>(reinterpret_cast<char*>(&modification_type_) -
    reinterpret_cast<char*>(&active_)) + sizeof(modification_type_));
  // @@protoc_insertion_point(copy_constructor:CMsgGC_GameServer_ServerModificationItem)
}

void CMsgGC_GameServer_ServerModificationItem::SharedCtor() {
active_ = false;
modification_type_ = 1;
}

CMsgGC_GameServer_ServerModificationItem::~CMsgGC_GameServer_ServerModificationItem() {
  // @@protoc_insertion_point(destructor:CMsgGC_GameServer_ServerModificationItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGC_GameServer_ServerModificationItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGC_GameServer_ServerModificationItem::ArenaDtor(void* object) {
  CMsgGC_GameServer_ServerModificationItem* _this = reinterpret_cast< CMsgGC_GameServer_ServerModificationItem* >(object);
  (void)_this;
}
void CMsgGC_GameServer_ServerModificationItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGC_GameServer_ServerModificationItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGC_GameServer_ServerModificationItem::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGC_GameServer_ServerModificationItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    active_ = false;
    modification_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGC_GameServer_ServerModificationItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .EServerModificationItemType modification_type = 1 [default = kGameServerModificationItem_Halloween];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EServerModificationItemType_IsValid(val))) {
            _internal_set_modification_type(static_cast<::EServerModificationItemType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool active = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_active(&has_bits);
          active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGC_GameServer_ServerModificationItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGC_GameServer_ServerModificationItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .EServerModificationItemType modification_type = 1 [default = kGameServerModificationItem_Halloween];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_modification_type(), target);
  }

  // optional bool active = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_active(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGC_GameServer_ServerModificationItem)
  return target;
}

size_t CMsgGC_GameServer_ServerModificationItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGC_GameServer_ServerModificationItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool active = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional .EServerModificationItemType modification_type = 1 [default = kGameServerModificationItem_Halloween];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_modification_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGC_GameServer_ServerModificationItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGC_GameServer_ServerModificationItem)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGC_GameServer_ServerModificationItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGC_GameServer_ServerModificationItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGC_GameServer_ServerModificationItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGC_GameServer_ServerModificationItem)
    MergeFrom(*source);
  }
}

void CMsgGC_GameServer_ServerModificationItem::MergeFrom(const CMsgGC_GameServer_ServerModificationItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGC_GameServer_ServerModificationItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      active_ = from.active_;
    }
    if (cached_has_bits & 0x00000002u) {
      modification_type_ = from.modification_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGC_GameServer_ServerModificationItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGC_GameServer_ServerModificationItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_GameServer_ServerModificationItem::CopyFrom(const CMsgGC_GameServer_ServerModificationItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGC_GameServer_ServerModificationItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_GameServer_ServerModificationItem::IsInitialized() const {
  return true;
}

void CMsgGC_GameServer_ServerModificationItem::InternalSwap(CMsgGC_GameServer_ServerModificationItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(active_, other->active_);
  swap(modification_type_, other->modification_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGC_GameServer_ServerModificationItem::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[51]);
}

// ===================================================================

class CMsgGC_Halloween_ReservedItem::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGC_Halloween_ReservedItem>()._has_bits_);
  static void set_has_spawn_meta_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGC_Halloween_ReservedItem::CMsgGC_Halloween_ReservedItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  x_(arena),
  y_(arena),
  z_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGC_Halloween_ReservedItem)
}
CMsgGC_Halloween_ReservedItem::CMsgGC_Halloween_ReservedItem(const CMsgGC_Halloween_ReservedItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      x_(from.x_),
      y_(from.y_),
      z_(from.z_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  spawn_meta_info_ = from.spawn_meta_info_;
  // @@protoc_insertion_point(copy_constructor:CMsgGC_Halloween_ReservedItem)
}

void CMsgGC_Halloween_ReservedItem::SharedCtor() {
spawn_meta_info_ = 0u;
}

CMsgGC_Halloween_ReservedItem::~CMsgGC_Halloween_ReservedItem() {
  // @@protoc_insertion_point(destructor:CMsgGC_Halloween_ReservedItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGC_Halloween_ReservedItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGC_Halloween_ReservedItem::ArenaDtor(void* object) {
  CMsgGC_Halloween_ReservedItem* _this = reinterpret_cast< CMsgGC_Halloween_ReservedItem* >(object);
  (void)_this;
}
void CMsgGC_Halloween_ReservedItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGC_Halloween_ReservedItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGC_Halloween_ReservedItem::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGC_Halloween_ReservedItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  x_.Clear();
  y_.Clear();
  z_.Clear();
  spawn_meta_info_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGC_Halloween_ReservedItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_x(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<13>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_x(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_y(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<21>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_y(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_z(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<29>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_z(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 spawn_meta_info = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_spawn_meta_info(&has_bits);
          spawn_meta_info_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGC_Halloween_ReservedItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGC_Halloween_ReservedItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float x = 1;
  for (int i = 0, n = this->_internal_x_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(i), target);
  }

  // repeated float y = 2;
  for (int i = 0, n = this->_internal_y_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(i), target);
  }

  // repeated float z = 3;
  for (int i = 0, n = this->_internal_z_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 spawn_meta_info = 7;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_spawn_meta_info(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGC_Halloween_ReservedItem)
  return target;
}

size_t CMsgGC_Halloween_ReservedItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGC_Halloween_ReservedItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float x = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_x_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_x_size());
    total_size += data_size;
  }

  // repeated float y = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_y_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_y_size());
    total_size += data_size;
  }

  // repeated float z = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_z_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_z_size());
    total_size += data_size;
  }

  // optional uint32 spawn_meta_info = 7;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_spawn_meta_info());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGC_Halloween_ReservedItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGC_Halloween_ReservedItem)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGC_Halloween_ReservedItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGC_Halloween_ReservedItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGC_Halloween_ReservedItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGC_Halloween_ReservedItem)
    MergeFrom(*source);
  }
}

void CMsgGC_Halloween_ReservedItem::MergeFrom(const CMsgGC_Halloween_ReservedItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGC_Halloween_ReservedItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  x_.MergeFrom(from.x_);
  y_.MergeFrom(from.y_);
  z_.MergeFrom(from.z_);
  if (from._internal_has_spawn_meta_info()) {
    _internal_set_spawn_meta_info(from._internal_spawn_meta_info());
  }
}

void CMsgGC_Halloween_ReservedItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGC_Halloween_ReservedItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_Halloween_ReservedItem::CopyFrom(const CMsgGC_Halloween_ReservedItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGC_Halloween_ReservedItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_Halloween_ReservedItem::IsInitialized() const {
  return true;
}

void CMsgGC_Halloween_ReservedItem::InternalSwap(CMsgGC_Halloween_ReservedItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  x_.InternalSwap(&other->x_);
  y_.InternalSwap(&other->y_);
  z_.InternalSwap(&other->z_);
  swap(spawn_meta_info_, other->spawn_meta_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGC_Halloween_ReservedItem::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[52]);
}

// ===================================================================

class CMsgGC_Halloween_GrantItem::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGC_Halloween_GrantItem>()._has_bits_);
  static void set_has_recipient_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_level_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_flagged(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgGC_Halloween_GrantItem::CMsgGC_Halloween_GrantItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGC_Halloween_GrantItem)
}
CMsgGC_Halloween_GrantItem::CMsgGC_Halloween_GrantItem(const CMsgGC_Halloween_GrantItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&recipient_account_id_, &from.recipient_account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&flagged_) -
    reinterpret_cast<char*>(&recipient_account_id_)) + sizeof(flagged_));
  // @@protoc_insertion_point(copy_constructor:CMsgGC_Halloween_GrantItem)
}

void CMsgGC_Halloween_GrantItem::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&recipient_account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&flagged_) -
    reinterpret_cast<char*>(&recipient_account_id_)) + sizeof(flagged_));
}

CMsgGC_Halloween_GrantItem::~CMsgGC_Halloween_GrantItem() {
  // @@protoc_insertion_point(destructor:CMsgGC_Halloween_GrantItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGC_Halloween_GrantItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGC_Halloween_GrantItem::ArenaDtor(void* object) {
  CMsgGC_Halloween_GrantItem* _this = reinterpret_cast< CMsgGC_Halloween_GrantItem* >(object);
  (void)_this;
}
void CMsgGC_Halloween_GrantItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGC_Halloween_GrantItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGC_Halloween_GrantItem::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGC_Halloween_GrantItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&recipient_account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&flagged_) -
        reinterpret_cast<char*>(&recipient_account_id_)) + sizeof(flagged_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGC_Halloween_GrantItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 recipient_account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_recipient_account_id(&has_bits);
          recipient_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 level_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_level_id(&has_bits);
          level_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool flagged = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_flagged(&has_bits);
          flagged_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGC_Halloween_GrantItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGC_Halloween_GrantItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 recipient_account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_recipient_account_id(), target);
  }

  // optional uint32 level_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_level_id(), target);
  }

  // optional bool flagged = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_flagged(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGC_Halloween_GrantItem)
  return target;
}

size_t CMsgGC_Halloween_GrantItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGC_Halloween_GrantItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 recipient_account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_recipient_account_id());
    }

    // optional uint32 level_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_level_id());
    }

    // optional bool flagged = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGC_Halloween_GrantItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGC_Halloween_GrantItem)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGC_Halloween_GrantItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGC_Halloween_GrantItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGC_Halloween_GrantItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGC_Halloween_GrantItem)
    MergeFrom(*source);
  }
}

void CMsgGC_Halloween_GrantItem::MergeFrom(const CMsgGC_Halloween_GrantItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGC_Halloween_GrantItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      recipient_account_id_ = from.recipient_account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      level_id_ = from.level_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      flagged_ = from.flagged_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGC_Halloween_GrantItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGC_Halloween_GrantItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_Halloween_GrantItem::CopyFrom(const CMsgGC_Halloween_GrantItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGC_Halloween_GrantItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_Halloween_GrantItem::IsInitialized() const {
  return true;
}

void CMsgGC_Halloween_GrantItem::InternalSwap(CMsgGC_Halloween_GrantItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGC_Halloween_GrantItem, flagged_)
      + sizeof(CMsgGC_Halloween_GrantItem::flagged_)
      - PROTOBUF_FIELD_OFFSET(CMsgGC_Halloween_GrantItem, recipient_account_id_)>(
          reinterpret_cast<char*>(&recipient_account_id_),
          reinterpret_cast<char*>(&other->recipient_account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGC_Halloween_GrantItem::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[53]);
}

// ===================================================================

class CMsgGC_Halloween_GrantItemResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGC_Halloween_GrantItemResponse>()._has_bits_);
  static void set_has_recipient_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGC_Halloween_GrantItemResponse::CMsgGC_Halloween_GrantItemResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGC_Halloween_GrantItemResponse)
}
CMsgGC_Halloween_GrantItemResponse::CMsgGC_Halloween_GrantItemResponse(const CMsgGC_Halloween_GrantItemResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  recipient_account_id_ = from.recipient_account_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgGC_Halloween_GrantItemResponse)
}

void CMsgGC_Halloween_GrantItemResponse::SharedCtor() {
recipient_account_id_ = 0u;
}

CMsgGC_Halloween_GrantItemResponse::~CMsgGC_Halloween_GrantItemResponse() {
  // @@protoc_insertion_point(destructor:CMsgGC_Halloween_GrantItemResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGC_Halloween_GrantItemResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGC_Halloween_GrantItemResponse::ArenaDtor(void* object) {
  CMsgGC_Halloween_GrantItemResponse* _this = reinterpret_cast< CMsgGC_Halloween_GrantItemResponse* >(object);
  (void)_this;
}
void CMsgGC_Halloween_GrantItemResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGC_Halloween_GrantItemResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGC_Halloween_GrantItemResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGC_Halloween_GrantItemResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  recipient_account_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGC_Halloween_GrantItemResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 recipient_account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_recipient_account_id(&has_bits);
          recipient_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGC_Halloween_GrantItemResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGC_Halloween_GrantItemResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 recipient_account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_recipient_account_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGC_Halloween_GrantItemResponse)
  return target;
}

size_t CMsgGC_Halloween_GrantItemResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGC_Halloween_GrantItemResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 recipient_account_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_recipient_account_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGC_Halloween_GrantItemResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGC_Halloween_GrantItemResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGC_Halloween_GrantItemResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGC_Halloween_GrantItemResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGC_Halloween_GrantItemResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGC_Halloween_GrantItemResponse)
    MergeFrom(*source);
  }
}

void CMsgGC_Halloween_GrantItemResponse::MergeFrom(const CMsgGC_Halloween_GrantItemResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGC_Halloween_GrantItemResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_recipient_account_id()) {
    _internal_set_recipient_account_id(from._internal_recipient_account_id());
  }
}

void CMsgGC_Halloween_GrantItemResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGC_Halloween_GrantItemResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_Halloween_GrantItemResponse::CopyFrom(const CMsgGC_Halloween_GrantItemResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGC_Halloween_GrantItemResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_Halloween_GrantItemResponse::IsInitialized() const {
  return true;
}

void CMsgGC_Halloween_GrantItemResponse::InternalSwap(CMsgGC_Halloween_GrantItemResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(recipient_account_id_, other->recipient_account_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGC_Halloween_GrantItemResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[54]);
}

// ===================================================================

class CMsgGC_Halloween_ItemClaimed::_Internal {
 public:
};

CMsgGC_Halloween_ItemClaimed::CMsgGC_Halloween_ItemClaimed(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGC_Halloween_ItemClaimed)
}
CMsgGC_Halloween_ItemClaimed::CMsgGC_Halloween_ItemClaimed(const CMsgGC_Halloween_ItemClaimed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGC_Halloween_ItemClaimed)
}

void CMsgGC_Halloween_ItemClaimed::SharedCtor() {
}

CMsgGC_Halloween_ItemClaimed::~CMsgGC_Halloween_ItemClaimed() {
  // @@protoc_insertion_point(destructor:CMsgGC_Halloween_ItemClaimed)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGC_Halloween_ItemClaimed::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGC_Halloween_ItemClaimed::ArenaDtor(void* object) {
  CMsgGC_Halloween_ItemClaimed* _this = reinterpret_cast< CMsgGC_Halloween_ItemClaimed* >(object);
  (void)_this;
}
void CMsgGC_Halloween_ItemClaimed::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGC_Halloween_ItemClaimed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGC_Halloween_ItemClaimed::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGC_Halloween_ItemClaimed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGC_Halloween_ItemClaimed::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGC_Halloween_ItemClaimed::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGC_Halloween_ItemClaimed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGC_Halloween_ItemClaimed)
  return target;
}

size_t CMsgGC_Halloween_ItemClaimed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGC_Halloween_ItemClaimed)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGC_Halloween_ItemClaimed::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGC_Halloween_ItemClaimed)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGC_Halloween_ItemClaimed* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGC_Halloween_ItemClaimed>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGC_Halloween_ItemClaimed)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGC_Halloween_ItemClaimed)
    MergeFrom(*source);
  }
}

void CMsgGC_Halloween_ItemClaimed::MergeFrom(const CMsgGC_Halloween_ItemClaimed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGC_Halloween_ItemClaimed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgGC_Halloween_ItemClaimed::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGC_Halloween_ItemClaimed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_Halloween_ItemClaimed::CopyFrom(const CMsgGC_Halloween_ItemClaimed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGC_Halloween_ItemClaimed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_Halloween_ItemClaimed::IsInitialized() const {
  return true;
}

void CMsgGC_Halloween_ItemClaimed::InternalSwap(CMsgGC_Halloween_ItemClaimed* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGC_Halloween_ItemClaimed::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[55]);
}

// ===================================================================

class CMsgGC_PickupItemEligibility_Query::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGC_PickupItemEligibility_Query>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_seconds_ago(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGC_PickupItemEligibility_Query::CMsgGC_PickupItemEligibility_Query(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGC_PickupItemEligibility_Query)
}
CMsgGC_PickupItemEligibility_Query::CMsgGC_PickupItemEligibility_Query(const CMsgGC_PickupItemEligibility_Query& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&seconds_ago_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(seconds_ago_));
  // @@protoc_insertion_point(copy_constructor:CMsgGC_PickupItemEligibility_Query)
}

void CMsgGC_PickupItemEligibility_Query::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&seconds_ago_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(seconds_ago_));
}

CMsgGC_PickupItemEligibility_Query::~CMsgGC_PickupItemEligibility_Query() {
  // @@protoc_insertion_point(destructor:CMsgGC_PickupItemEligibility_Query)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGC_PickupItemEligibility_Query::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGC_PickupItemEligibility_Query::ArenaDtor(void* object) {
  CMsgGC_PickupItemEligibility_Query* _this = reinterpret_cast< CMsgGC_PickupItemEligibility_Query* >(object);
  (void)_this;
}
void CMsgGC_PickupItemEligibility_Query::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGC_PickupItemEligibility_Query::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGC_PickupItemEligibility_Query::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGC_PickupItemEligibility_Query)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&seconds_ago_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(seconds_ago_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGC_PickupItemEligibility_Query::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 seconds_ago = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_seconds_ago(&has_bits);
          seconds_ago_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGC_PickupItemEligibility_Query::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGC_PickupItemEligibility_Query)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint32 seconds_ago = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_seconds_ago(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGC_PickupItemEligibility_Query)
  return target;
}

size_t CMsgGC_PickupItemEligibility_Query::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGC_PickupItemEligibility_Query)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional uint32 seconds_ago = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_seconds_ago());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGC_PickupItemEligibility_Query::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGC_PickupItemEligibility_Query)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGC_PickupItemEligibility_Query* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGC_PickupItemEligibility_Query>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGC_PickupItemEligibility_Query)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGC_PickupItemEligibility_Query)
    MergeFrom(*source);
  }
}

void CMsgGC_PickupItemEligibility_Query::MergeFrom(const CMsgGC_PickupItemEligibility_Query& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGC_PickupItemEligibility_Query)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      seconds_ago_ = from.seconds_ago_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGC_PickupItemEligibility_Query::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGC_PickupItemEligibility_Query)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_PickupItemEligibility_Query::CopyFrom(const CMsgGC_PickupItemEligibility_Query& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGC_PickupItemEligibility_Query)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_PickupItemEligibility_Query::IsInitialized() const {
  return true;
}

void CMsgGC_PickupItemEligibility_Query::InternalSwap(CMsgGC_PickupItemEligibility_Query* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGC_PickupItemEligibility_Query, seconds_ago_)
      + sizeof(CMsgGC_PickupItemEligibility_Query::seconds_ago_)
      - PROTOBUF_FIELD_OFFSET(CMsgGC_PickupItemEligibility_Query, account_id_)>(
          reinterpret_cast<char*>(&account_id_),
          reinterpret_cast<char*>(&other->account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGC_PickupItemEligibility_Query::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[56]);
}

// ===================================================================

class CMsgGC_PickupItemEligibility_QueryResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGC_PickupItemEligibility_QueryResponse>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_was_eligible(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_level_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgGC_PickupItemEligibility_QueryResponse::CMsgGC_PickupItemEligibility_QueryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGC_PickupItemEligibility_QueryResponse)
}
CMsgGC_PickupItemEligibility_QueryResponse::CMsgGC_PickupItemEligibility_QueryResponse(const CMsgGC_PickupItemEligibility_QueryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_id_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(level_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgGC_PickupItemEligibility_QueryResponse)
}

void CMsgGC_PickupItemEligibility_QueryResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&level_id_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(level_id_));
}

CMsgGC_PickupItemEligibility_QueryResponse::~CMsgGC_PickupItemEligibility_QueryResponse() {
  // @@protoc_insertion_point(destructor:CMsgGC_PickupItemEligibility_QueryResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGC_PickupItemEligibility_QueryResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGC_PickupItemEligibility_QueryResponse::ArenaDtor(void* object) {
  CMsgGC_PickupItemEligibility_QueryResponse* _this = reinterpret_cast< CMsgGC_PickupItemEligibility_QueryResponse* >(object);
  (void)_this;
}
void CMsgGC_PickupItemEligibility_QueryResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGC_PickupItemEligibility_QueryResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGC_PickupItemEligibility_QueryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGC_PickupItemEligibility_QueryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&level_id_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(level_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGC_PickupItemEligibility_QueryResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool was_eligible = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_was_eligible(&has_bits);
          was_eligible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 level_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_level_id(&has_bits);
          level_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGC_PickupItemEligibility_QueryResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGC_PickupItemEligibility_QueryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional bool was_eligible = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_was_eligible(), target);
  }

  // optional uint32 level_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_level_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGC_PickupItemEligibility_QueryResponse)
  return target;
}

size_t CMsgGC_PickupItemEligibility_QueryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGC_PickupItemEligibility_QueryResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional bool was_eligible = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional uint32 level_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_level_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGC_PickupItemEligibility_QueryResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGC_PickupItemEligibility_QueryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGC_PickupItemEligibility_QueryResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGC_PickupItemEligibility_QueryResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGC_PickupItemEligibility_QueryResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGC_PickupItemEligibility_QueryResponse)
    MergeFrom(*source);
  }
}

void CMsgGC_PickupItemEligibility_QueryResponse::MergeFrom(const CMsgGC_PickupItemEligibility_QueryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGC_PickupItemEligibility_QueryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      was_eligible_ = from.was_eligible_;
    }
    if (cached_has_bits & 0x00000004u) {
      level_id_ = from.level_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGC_PickupItemEligibility_QueryResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGC_PickupItemEligibility_QueryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_PickupItemEligibility_QueryResponse::CopyFrom(const CMsgGC_PickupItemEligibility_QueryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGC_PickupItemEligibility_QueryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_PickupItemEligibility_QueryResponse::IsInitialized() const {
  return true;
}

void CMsgGC_PickupItemEligibility_QueryResponse::InternalSwap(CMsgGC_PickupItemEligibility_QueryResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGC_PickupItemEligibility_QueryResponse, level_id_)
      + sizeof(CMsgGC_PickupItemEligibility_QueryResponse::level_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgGC_PickupItemEligibility_QueryResponse, account_id_)>(
          reinterpret_cast<char*>(&account_id_),
          reinterpret_cast<char*>(&other->account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGC_PickupItemEligibility_QueryResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[57]);
}

// ===================================================================

class CSOTFPartyMember_Activity::_Internal {
 public:
  using HasBits = decltype(std::declval<CSOTFPartyMember_Activity>()._has_bits_);
  static void set_has_lobby_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_lobby_match_group(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_multiqueue_blocked(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_online(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_client_version(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CSOTFPartyMember_Activity::CSOTFPartyMember_Activity(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSOTFPartyMember.Activity)
}
CSOTFPartyMember_Activity::CSOTFPartyMember_Activity(const CSOTFPartyMember_Activity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&lobby_id_, &from.lobby_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&lobby_match_group_) -
    reinterpret_cast<char*>(&lobby_id_)) + sizeof(lobby_match_group_));
  // @@protoc_insertion_point(copy_constructor:CSOTFPartyMember.Activity)
}

void CSOTFPartyMember_Activity::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&lobby_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&client_version_) -
    reinterpret_cast<char*>(&lobby_id_)) + sizeof(client_version_));
lobby_match_group_ = -1;
}

CSOTFPartyMember_Activity::~CSOTFPartyMember_Activity() {
  // @@protoc_insertion_point(destructor:CSOTFPartyMember.Activity)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSOTFPartyMember_Activity::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSOTFPartyMember_Activity::ArenaDtor(void* object) {
  CSOTFPartyMember_Activity* _this = reinterpret_cast< CSOTFPartyMember_Activity* >(object);
  (void)_this;
}
void CSOTFPartyMember_Activity::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSOTFPartyMember_Activity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSOTFPartyMember_Activity::Clear() {
// @@protoc_insertion_point(message_clear_start:CSOTFPartyMember.Activity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&lobby_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&client_version_) -
        reinterpret_cast<char*>(&lobby_id_)) + sizeof(client_version_));
    lobby_match_group_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSOTFPartyMember_Activity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 lobby_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_lobby_id(&has_bits);
          lobby_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional .ETFMatchGroup lobby_match_group = 2 [default = k_eTFMatchGroup_Invalid];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ETFMatchGroup_IsValid(val))) {
            _internal_set_lobby_match_group(static_cast<::ETFMatchGroup>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool multiqueue_blocked = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_multiqueue_blocked(&has_bits);
          multiqueue_blocked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool online = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_online(&has_bits);
          online_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 client_version = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_client_version(&has_bits);
          client_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSOTFPartyMember_Activity::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSOTFPartyMember.Activity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 lobby_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_lobby_id(), target);
  }

  // optional .ETFMatchGroup lobby_match_group = 2 [default = k_eTFMatchGroup_Invalid];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_lobby_match_group(), target);
  }

  // optional bool multiqueue_blocked = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_multiqueue_blocked(), target);
  }

  // optional bool online = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_online(), target);
  }

  // optional uint32 client_version = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_client_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSOTFPartyMember.Activity)
  return target;
}

size_t CSOTFPartyMember_Activity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSOTFPartyMember.Activity)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional fixed64 lobby_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional bool multiqueue_blocked = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool online = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional uint32 client_version = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_client_version());
    }

    // optional .ETFMatchGroup lobby_match_group = 2 [default = k_eTFMatchGroup_Invalid];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_lobby_match_group());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSOTFPartyMember_Activity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSOTFPartyMember.Activity)
  GOOGLE_DCHECK_NE(&from, this);
  const CSOTFPartyMember_Activity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSOTFPartyMember_Activity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSOTFPartyMember.Activity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSOTFPartyMember.Activity)
    MergeFrom(*source);
  }
}

void CSOTFPartyMember_Activity::MergeFrom(const CSOTFPartyMember_Activity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSOTFPartyMember.Activity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      lobby_id_ = from.lobby_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      multiqueue_blocked_ = from.multiqueue_blocked_;
    }
    if (cached_has_bits & 0x00000004u) {
      online_ = from.online_;
    }
    if (cached_has_bits & 0x00000008u) {
      client_version_ = from.client_version_;
    }
    if (cached_has_bits & 0x00000010u) {
      lobby_match_group_ = from.lobby_match_group_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSOTFPartyMember_Activity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSOTFPartyMember.Activity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOTFPartyMember_Activity::CopyFrom(const CSOTFPartyMember_Activity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSOTFPartyMember.Activity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOTFPartyMember_Activity::IsInitialized() const {
  return true;
}

void CSOTFPartyMember_Activity::InternalSwap(CSOTFPartyMember_Activity* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSOTFPartyMember_Activity, client_version_)
      + sizeof(CSOTFPartyMember_Activity::client_version_)
      - PROTOBUF_FIELD_OFFSET(CSOTFPartyMember_Activity, lobby_id_)>(
          reinterpret_cast<char*>(&lobby_id_),
          reinterpret_cast<char*>(&other->lobby_id_));
  swap(lobby_match_group_, other->lobby_match_group_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSOTFPartyMember_Activity::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[58]);
}

// ===================================================================

class CSOTFPartyMember::_Internal {
 public:
  using HasBits = decltype(std::declval<CSOTFPartyMember>()._has_bits_);
  static void set_has_owns_ticket(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_completed_missions(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_badge_level(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_competitive_access(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_experience(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::CTFPerPlayerMatchCriteriaProto& player_criteria(const CSOTFPartyMember* msg);
  static void set_has_player_criteria(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CSOTFPartyMember_Activity& activity(const CSOTFPartyMember* msg);
  static void set_has_activity(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_casual_banned(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_ranked_banned(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_casual_low_priority(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_ranked_low_priority(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_lobby_standby(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

const ::CTFPerPlayerMatchCriteriaProto&
CSOTFPartyMember::_Internal::player_criteria(const CSOTFPartyMember* msg) {
  return *msg->player_criteria_;
}
const ::CSOTFPartyMember_Activity&
CSOTFPartyMember::_Internal::activity(const CSOTFPartyMember* msg) {
  return *msg->activity_;
}
CSOTFPartyMember::CSOTFPartyMember(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSOTFPartyMember)
}
CSOTFPartyMember::CSOTFPartyMember(const CSOTFPartyMember& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_criteria()) {
    player_criteria_ = new ::CTFPerPlayerMatchCriteriaProto(*from.player_criteria_);
  } else {
    player_criteria_ = nullptr;
  }
  if (from._internal_has_activity()) {
    activity_ = new ::CSOTFPartyMember_Activity(*from.activity_);
  } else {
    activity_ = nullptr;
  }
  ::memcpy(&completed_missions_, &from.completed_missions_,
    static_cast<size_t>(reinterpret_cast<char*>(&lobby_standby_) -
    reinterpret_cast<char*>(&completed_missions_)) + sizeof(lobby_standby_));
  // @@protoc_insertion_point(copy_constructor:CSOTFPartyMember)
}

void CSOTFPartyMember::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_criteria_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&lobby_standby_) -
    reinterpret_cast<char*>(&player_criteria_)) + sizeof(lobby_standby_));
}

CSOTFPartyMember::~CSOTFPartyMember() {
  // @@protoc_insertion_point(destructor:CSOTFPartyMember)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSOTFPartyMember::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_criteria_;
  if (this != internal_default_instance()) delete activity_;
}

void CSOTFPartyMember::ArenaDtor(void* object) {
  CSOTFPartyMember* _this = reinterpret_cast< CSOTFPartyMember* >(object);
  (void)_this;
}
void CSOTFPartyMember::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSOTFPartyMember::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSOTFPartyMember::Clear() {
// @@protoc_insertion_point(message_clear_start:CSOTFPartyMember)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(player_criteria_ != nullptr);
      player_criteria_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(activity_ != nullptr);
      activity_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&completed_missions_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ranked_banned_) -
        reinterpret_cast<char*>(&completed_missions_)) + sizeof(ranked_banned_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&experience_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lobby_standby_) -
        reinterpret_cast<char*>(&experience_)) + sizeof(lobby_standby_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSOTFPartyMember::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool owns_ticket = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_owns_ticket(&has_bits);
          owns_ticket_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 completed_missions = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_completed_missions(&has_bits);
          completed_missions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 badge_level = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_badge_level(&has_bits);
          badge_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool competitive_access = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_competitive_access(&has_bits);
          competitive_access_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 experience = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_experience(&has_bits);
          experience_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CTFPerPlayerMatchCriteriaProto player_criteria = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_criteria(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CSOTFPartyMember.Activity activity = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_activity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool casual_banned = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_casual_banned(&has_bits);
          casual_banned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool ranked_banned = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_ranked_banned(&has_bits);
          ranked_banned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool casual_low_priority = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_casual_low_priority(&has_bits);
          casual_low_priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool ranked_low_priority = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_ranked_low_priority(&has_bits);
          ranked_low_priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool lobby_standby = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_lobby_standby(&has_bits);
          lobby_standby_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSOTFPartyMember::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSOTFPartyMember)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool owns_ticket = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_owns_ticket(), target);
  }

  // optional uint32 completed_missions = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_completed_missions(), target);
  }

  // optional uint32 badge_level = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_badge_level(), target);
  }

  // optional bool competitive_access = 9;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_competitive_access(), target);
  }

  // optional uint32 experience = 14;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_experience(), target);
  }

  // optional .CTFPerPlayerMatchCriteriaProto player_criteria = 16;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::player_criteria(this), target, stream);
  }

  // optional .CSOTFPartyMember.Activity activity = 17;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::activity(this), target, stream);
  }

  // optional bool casual_banned = 18;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->_internal_casual_banned(), target);
  }

  // optional bool ranked_banned = 19;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->_internal_ranked_banned(), target);
  }

  // optional bool casual_low_priority = 20;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20, this->_internal_casual_low_priority(), target);
  }

  // optional bool ranked_low_priority = 21;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(21, this->_internal_ranked_low_priority(), target);
  }

  // optional bool lobby_standby = 22;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(22, this->_internal_lobby_standby(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSOTFPartyMember)
  return target;
}

size_t CSOTFPartyMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSOTFPartyMember)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .CTFPerPlayerMatchCriteriaProto player_criteria = 16;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *player_criteria_);
    }

    // optional .CSOTFPartyMember.Activity activity = 17;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *activity_);
    }

    // optional uint32 completed_missions = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_completed_missions());
    }

    // optional uint32 badge_level = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_badge_level());
    }

    // optional bool owns_ticket = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool competitive_access = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool casual_banned = 18;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 1;
    }

    // optional bool ranked_banned = 19;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional uint32 experience = 14;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_experience());
    }

    // optional bool casual_low_priority = 20;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 1;
    }

    // optional bool ranked_low_priority = 21;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 1;
    }

    // optional bool lobby_standby = 22;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSOTFPartyMember::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSOTFPartyMember)
  GOOGLE_DCHECK_NE(&from, this);
  const CSOTFPartyMember* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSOTFPartyMember>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSOTFPartyMember)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSOTFPartyMember)
    MergeFrom(*source);
  }
}

void CSOTFPartyMember::MergeFrom(const CSOTFPartyMember& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSOTFPartyMember)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_player_criteria()->::CTFPerPlayerMatchCriteriaProto::MergeFrom(from._internal_player_criteria());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_activity()->::CSOTFPartyMember_Activity::MergeFrom(from._internal_activity());
    }
    if (cached_has_bits & 0x00000004u) {
      completed_missions_ = from.completed_missions_;
    }
    if (cached_has_bits & 0x00000008u) {
      badge_level_ = from.badge_level_;
    }
    if (cached_has_bits & 0x00000010u) {
      owns_ticket_ = from.owns_ticket_;
    }
    if (cached_has_bits & 0x00000020u) {
      competitive_access_ = from.competitive_access_;
    }
    if (cached_has_bits & 0x00000040u) {
      casual_banned_ = from.casual_banned_;
    }
    if (cached_has_bits & 0x00000080u) {
      ranked_banned_ = from.ranked_banned_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      experience_ = from.experience_;
    }
    if (cached_has_bits & 0x00000200u) {
      casual_low_priority_ = from.casual_low_priority_;
    }
    if (cached_has_bits & 0x00000400u) {
      ranked_low_priority_ = from.ranked_low_priority_;
    }
    if (cached_has_bits & 0x00000800u) {
      lobby_standby_ = from.lobby_standby_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSOTFPartyMember::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSOTFPartyMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOTFPartyMember::CopyFrom(const CSOTFPartyMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSOTFPartyMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOTFPartyMember::IsInitialized() const {
  return true;
}

void CSOTFPartyMember::InternalSwap(CSOTFPartyMember* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSOTFPartyMember, lobby_standby_)
      + sizeof(CSOTFPartyMember::lobby_standby_)
      - PROTOBUF_FIELD_OFFSET(CSOTFPartyMember, player_criteria_)>(
          reinterpret_cast<char*>(&player_criteria_),
          reinterpret_cast<char*>(&other->player_criteria_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSOTFPartyMember::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[59]);
}

// ===================================================================

class TFPendingPartyMember::_Internal {
 public:
  using HasBits = decltype(std::declval<TFPendingPartyMember>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_inviter(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

TFPendingPartyMember::TFPendingPartyMember(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TFPendingPartyMember)
}
TFPendingPartyMember::TFPendingPartyMember(const TFPendingPartyMember& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:TFPendingPartyMember)
}

void TFPendingPartyMember::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(type_));
}

TFPendingPartyMember::~TFPendingPartyMember() {
  // @@protoc_insertion_point(destructor:TFPendingPartyMember)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TFPendingPartyMember::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TFPendingPartyMember::ArenaDtor(void* object) {
  TFPendingPartyMember* _this = reinterpret_cast< TFPendingPartyMember* >(object);
  (void)_this;
}
void TFPendingPartyMember::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TFPendingPartyMember::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TFPendingPartyMember::Clear() {
// @@protoc_insertion_point(message_clear_start:TFPendingPartyMember)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TFPendingPartyMember::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional .TFPendingPartyMember.EType type = 2 [default = Invited];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TFPendingPartyMember_EType_IsValid(val))) {
            _internal_set_type(static_cast<::TFPendingPartyMember_EType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional fixed64 inviter = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_inviter(&has_bits);
          inviter_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TFPendingPartyMember::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TFPendingPartyMember)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional .TFPendingPartyMember.EType type = 2 [default = Invited];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // optional fixed64 inviter = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_inviter(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TFPendingPartyMember)
  return target;
}

size_t TFPendingPartyMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TFPendingPartyMember)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed64 inviter = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional .TFPendingPartyMember.EType type = 2 [default = Invited];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TFPendingPartyMember::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TFPendingPartyMember)
  GOOGLE_DCHECK_NE(&from, this);
  const TFPendingPartyMember* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TFPendingPartyMember>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TFPendingPartyMember)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TFPendingPartyMember)
    MergeFrom(*source);
  }
}

void TFPendingPartyMember::MergeFrom(const TFPendingPartyMember& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TFPendingPartyMember)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      inviter_ = from.inviter_;
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TFPendingPartyMember::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TFPendingPartyMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFPendingPartyMember::CopyFrom(const TFPendingPartyMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TFPendingPartyMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFPendingPartyMember::IsInitialized() const {
  return true;
}

void TFPendingPartyMember::InternalSwap(TFPendingPartyMember* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TFPendingPartyMember, type_)
      + sizeof(TFPendingPartyMember::type_)
      - PROTOBUF_FIELD_OFFSET(TFPendingPartyMember, steamid_)>(
          reinterpret_cast<char*>(&steamid_),
          reinterpret_cast<char*>(&other->steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TFPendingPartyMember::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[60]);
}

// ===================================================================

class TFSyncedMMUIState::_Internal {
 public:
  using HasBits = decltype(std::declval<TFSyncedMMUIState>()._has_bits_);
  static void set_has_menu_step(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_match_group(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

TFSyncedMMUIState::TFSyncedMMUIState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TFSyncedMMUIState)
}
TFSyncedMMUIState::TFSyncedMMUIState(const TFSyncedMMUIState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&menu_step_, &from.menu_step_,
    static_cast<size_t>(reinterpret_cast<char*>(&match_group_) -
    reinterpret_cast<char*>(&menu_step_)) + sizeof(match_group_));
  // @@protoc_insertion_point(copy_constructor:TFSyncedMMUIState)
}

void TFSyncedMMUIState::SharedCtor() {
menu_step_ = 0;
match_group_ = -1;
}

TFSyncedMMUIState::~TFSyncedMMUIState() {
  // @@protoc_insertion_point(destructor:TFSyncedMMUIState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TFSyncedMMUIState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TFSyncedMMUIState::ArenaDtor(void* object) {
  TFSyncedMMUIState* _this = reinterpret_cast< TFSyncedMMUIState* >(object);
  (void)_this;
}
void TFSyncedMMUIState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TFSyncedMMUIState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TFSyncedMMUIState::Clear() {
// @@protoc_insertion_point(message_clear_start:TFSyncedMMUIState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    menu_step_ = 0;
    match_group_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TFSyncedMMUIState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .ETFSyncedMMMenuStep menu_step = 1 [default = k_eTFSyncedMMMenuStep_None];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ETFSyncedMMMenuStep_IsValid(val))) {
            _internal_set_menu_step(static_cast<::ETFSyncedMMMenuStep>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .ETFMatchGroup match_group = 2 [default = k_eTFMatchGroup_Invalid];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ETFMatchGroup_IsValid(val))) {
            _internal_set_match_group(static_cast<::ETFMatchGroup>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TFSyncedMMUIState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TFSyncedMMUIState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ETFSyncedMMMenuStep menu_step = 1 [default = k_eTFSyncedMMMenuStep_None];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_menu_step(), target);
  }

  // optional .ETFMatchGroup match_group = 2 [default = k_eTFMatchGroup_Invalid];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_match_group(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TFSyncedMMUIState)
  return target;
}

size_t TFSyncedMMUIState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TFSyncedMMUIState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .ETFSyncedMMMenuStep menu_step = 1 [default = k_eTFSyncedMMMenuStep_None];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_menu_step());
    }

    // optional .ETFMatchGroup match_group = 2 [default = k_eTFMatchGroup_Invalid];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_match_group());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TFSyncedMMUIState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TFSyncedMMUIState)
  GOOGLE_DCHECK_NE(&from, this);
  const TFSyncedMMUIState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TFSyncedMMUIState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TFSyncedMMUIState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TFSyncedMMUIState)
    MergeFrom(*source);
  }
}

void TFSyncedMMUIState::MergeFrom(const TFSyncedMMUIState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TFSyncedMMUIState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      menu_step_ = from.menu_step_;
    }
    if (cached_has_bits & 0x00000002u) {
      match_group_ = from.match_group_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TFSyncedMMUIState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TFSyncedMMUIState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFSyncedMMUIState::CopyFrom(const TFSyncedMMUIState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TFSyncedMMUIState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFSyncedMMUIState::IsInitialized() const {
  return true;
}

void TFSyncedMMUIState::InternalSwap(TFSyncedMMUIState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(menu_step_, other->menu_step_);
  swap(match_group_, other->match_group_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TFSyncedMMUIState::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[61]);
}

// ===================================================================

class CTFGroupMatchCriteriaProto::_Internal {
 public:
  using HasBits = decltype(std::declval<CTFGroupMatchCriteriaProto>()._has_bits_);
  static void set_has_late_join_ok(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_custom_ping_tolerance(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_mvm_mannup_tour(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CTFCasualMatchCriteria& casual_criteria(const CTFGroupMatchCriteriaProto* msg);
  static void set_has_casual_criteria(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CTFCasualMatchCriteria&
CTFGroupMatchCriteriaProto::_Internal::casual_criteria(const CTFGroupMatchCriteriaProto* msg) {
  return *msg->casual_criteria_;
}
CTFGroupMatchCriteriaProto::CTFGroupMatchCriteriaProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  mvm_mannup_missions_(arena),
  mvm_bootcamp_missions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CTFGroupMatchCriteriaProto)
}
CTFGroupMatchCriteriaProto::CTFGroupMatchCriteriaProto(const CTFGroupMatchCriteriaProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      mvm_mannup_missions_(from.mvm_mannup_missions_),
      mvm_bootcamp_missions_(from.mvm_bootcamp_missions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mvm_mannup_tour_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_mvm_mannup_tour()) {
    mvm_mannup_tour_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mvm_mannup_tour(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_casual_criteria()) {
    casual_criteria_ = new ::CTFCasualMatchCriteria(*from.casual_criteria_);
  } else {
    casual_criteria_ = nullptr;
  }
  ::memcpy(&late_join_ok_, &from.late_join_ok_,
    static_cast<size_t>(reinterpret_cast<char*>(&custom_ping_tolerance_) -
    reinterpret_cast<char*>(&late_join_ok_)) + sizeof(custom_ping_tolerance_));
  // @@protoc_insertion_point(copy_constructor:CTFGroupMatchCriteriaProto)
}

void CTFGroupMatchCriteriaProto::SharedCtor() {
mvm_mannup_tour_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&casual_criteria_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&custom_ping_tolerance_) -
    reinterpret_cast<char*>(&casual_criteria_)) + sizeof(custom_ping_tolerance_));
}

CTFGroupMatchCriteriaProto::~CTFGroupMatchCriteriaProto() {
  // @@protoc_insertion_point(destructor:CTFGroupMatchCriteriaProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CTFGroupMatchCriteriaProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  mvm_mannup_tour_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete casual_criteria_;
}

void CTFGroupMatchCriteriaProto::ArenaDtor(void* object) {
  CTFGroupMatchCriteriaProto* _this = reinterpret_cast< CTFGroupMatchCriteriaProto* >(object);
  (void)_this;
}
void CTFGroupMatchCriteriaProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CTFGroupMatchCriteriaProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CTFGroupMatchCriteriaProto::Clear() {
// @@protoc_insertion_point(message_clear_start:CTFGroupMatchCriteriaProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mvm_mannup_missions_.Clear();
  mvm_bootcamp_missions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mvm_mannup_tour_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(casual_criteria_ != nullptr);
      casual_criteria_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&late_join_ok_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&custom_ping_tolerance_) -
        reinterpret_cast<char*>(&late_join_ok_)) + sizeof(custom_ping_tolerance_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CTFGroupMatchCriteriaProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool late_join_ok = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_late_join_ok(&has_bits);
          late_join_ok_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string mvm_mannup_tour = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_mvm_mannup_tour();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CTFGroupMatchCriteriaProto.mvm_mannup_tour");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CTFCasualMatchCriteria casual_criteria = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_casual_criteria(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 custom_ping_tolerance = 13 [default = 0];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_custom_ping_tolerance(&has_bits);
          custom_ping_tolerance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string mvm_mannup_missions = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_mvm_mannup_missions();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CTFGroupMatchCriteriaProto.mvm_mannup_missions");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string mvm_bootcamp_missions = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_mvm_bootcamp_missions();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CTFGroupMatchCriteriaProto.mvm_bootcamp_missions");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CTFGroupMatchCriteriaProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CTFGroupMatchCriteriaProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool late_join_ok = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_late_join_ok(), target);
  }

  // optional string mvm_mannup_tour = 10;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_mvm_mannup_tour().data(), static_cast<int>(this->_internal_mvm_mannup_tour().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CTFGroupMatchCriteriaProto.mvm_mannup_tour");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_mvm_mannup_tour(), target);
  }

  // optional .CTFCasualMatchCriteria casual_criteria = 12;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::casual_criteria(this), target, stream);
  }

  // optional uint32 custom_ping_tolerance = 13 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_custom_ping_tolerance(), target);
  }

  // repeated string mvm_mannup_missions = 15;
  for (int i = 0, n = this->_internal_mvm_mannup_missions_size(); i < n; i++) {
    const auto& s = this->_internal_mvm_mannup_missions(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CTFGroupMatchCriteriaProto.mvm_mannup_missions");
    target = stream->WriteString(15, s, target);
  }

  // repeated string mvm_bootcamp_missions = 16;
  for (int i = 0, n = this->_internal_mvm_bootcamp_missions_size(); i < n; i++) {
    const auto& s = this->_internal_mvm_bootcamp_missions(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CTFGroupMatchCriteriaProto.mvm_bootcamp_missions");
    target = stream->WriteString(16, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CTFGroupMatchCriteriaProto)
  return target;
}

size_t CTFGroupMatchCriteriaProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CTFGroupMatchCriteriaProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string mvm_mannup_missions = 15;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(mvm_mannup_missions_.size());
  for (int i = 0, n = mvm_mannup_missions_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      mvm_mannup_missions_.Get(i));
  }

  // repeated string mvm_bootcamp_missions = 16;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(mvm_bootcamp_missions_.size());
  for (int i = 0, n = mvm_bootcamp_missions_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      mvm_bootcamp_missions_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string mvm_mannup_tour = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mvm_mannup_tour());
    }

    // optional .CTFCasualMatchCriteria casual_criteria = 12;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *casual_criteria_);
    }

    // optional bool late_join_ok = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional uint32 custom_ping_tolerance = 13 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_custom_ping_tolerance());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CTFGroupMatchCriteriaProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CTFGroupMatchCriteriaProto)
  GOOGLE_DCHECK_NE(&from, this);
  const CTFGroupMatchCriteriaProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CTFGroupMatchCriteriaProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CTFGroupMatchCriteriaProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CTFGroupMatchCriteriaProto)
    MergeFrom(*source);
  }
}

void CTFGroupMatchCriteriaProto::MergeFrom(const CTFGroupMatchCriteriaProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CTFGroupMatchCriteriaProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mvm_mannup_missions_.MergeFrom(from.mvm_mannup_missions_);
  mvm_bootcamp_missions_.MergeFrom(from.mvm_bootcamp_missions_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_mvm_mannup_tour(from._internal_mvm_mannup_tour());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_casual_criteria()->::CTFCasualMatchCriteria::MergeFrom(from._internal_casual_criteria());
    }
    if (cached_has_bits & 0x00000004u) {
      late_join_ok_ = from.late_join_ok_;
    }
    if (cached_has_bits & 0x00000008u) {
      custom_ping_tolerance_ = from.custom_ping_tolerance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CTFGroupMatchCriteriaProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CTFGroupMatchCriteriaProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTFGroupMatchCriteriaProto::CopyFrom(const CTFGroupMatchCriteriaProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CTFGroupMatchCriteriaProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTFGroupMatchCriteriaProto::IsInitialized() const {
  return true;
}

void CTFGroupMatchCriteriaProto::InternalSwap(CTFGroupMatchCriteriaProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  mvm_mannup_missions_.InternalSwap(&other->mvm_mannup_missions_);
  mvm_bootcamp_missions_.InternalSwap(&other->mvm_bootcamp_missions_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &mvm_mannup_tour_, GetArenaForAllocation(),
      &other->mvm_mannup_tour_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CTFGroupMatchCriteriaProto, custom_ping_tolerance_)
      + sizeof(CTFGroupMatchCriteriaProto::custom_ping_tolerance_)
      - PROTOBUF_FIELD_OFFSET(CTFGroupMatchCriteriaProto, casual_criteria_)>(
          reinterpret_cast<char*>(&casual_criteria_),
          reinterpret_cast<char*>(&other->casual_criteria_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CTFGroupMatchCriteriaProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[62]);
}

// ===================================================================

class CTFCasualMatchCriteria::_Internal {
 public:
};

CTFCasualMatchCriteria::CTFCasualMatchCriteria(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  selected_maps_bits_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CTFCasualMatchCriteria)
}
CTFCasualMatchCriteria::CTFCasualMatchCriteria(const CTFCasualMatchCriteria& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      selected_maps_bits_(from.selected_maps_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CTFCasualMatchCriteria)
}

void CTFCasualMatchCriteria::SharedCtor() {
}

CTFCasualMatchCriteria::~CTFCasualMatchCriteria() {
  // @@protoc_insertion_point(destructor:CTFCasualMatchCriteria)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CTFCasualMatchCriteria::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CTFCasualMatchCriteria::ArenaDtor(void* object) {
  CTFCasualMatchCriteria* _this = reinterpret_cast< CTFCasualMatchCriteria* >(object);
  (void)_this;
}
void CTFCasualMatchCriteria::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CTFCasualMatchCriteria::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CTFCasualMatchCriteria::Clear() {
// @@protoc_insertion_point(message_clear_start:CTFCasualMatchCriteria)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  selected_maps_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CTFCasualMatchCriteria::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated fixed32 selected_maps_bits = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_selected_maps_bits(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr));
            ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<29>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed32Parser(_internal_mutable_selected_maps_bits(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CTFCasualMatchCriteria::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CTFCasualMatchCriteria)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated fixed32 selected_maps_bits = 3;
  for (int i = 0, n = this->_internal_selected_maps_bits_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(3, this->_internal_selected_maps_bits(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CTFCasualMatchCriteria)
  return target;
}

size_t CTFCasualMatchCriteria::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CTFCasualMatchCriteria)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed32 selected_maps_bits = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_selected_maps_bits_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_selected_maps_bits_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CTFCasualMatchCriteria::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CTFCasualMatchCriteria)
  GOOGLE_DCHECK_NE(&from, this);
  const CTFCasualMatchCriteria* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CTFCasualMatchCriteria>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CTFCasualMatchCriteria)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CTFCasualMatchCriteria)
    MergeFrom(*source);
  }
}

void CTFCasualMatchCriteria::MergeFrom(const CTFCasualMatchCriteria& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CTFCasualMatchCriteria)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  selected_maps_bits_.MergeFrom(from.selected_maps_bits_);
}

void CTFCasualMatchCriteria::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CTFCasualMatchCriteria)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTFCasualMatchCriteria::CopyFrom(const CTFCasualMatchCriteria& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CTFCasualMatchCriteria)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTFCasualMatchCriteria::IsInitialized() const {
  return true;
}

void CTFCasualMatchCriteria::InternalSwap(CTFCasualMatchCriteria* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  selected_maps_bits_.InternalSwap(&other->selected_maps_bits_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CTFCasualMatchCriteria::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[63]);
}

// ===================================================================

class CTFPerPlayerMatchCriteriaProto::_Internal {
 public:
  using HasBits = decltype(std::declval<CTFPerPlayerMatchCriteriaProto>()._has_bits_);
  static void set_has_mvm_squad_surplus(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CTFPerPlayerMatchCriteriaProto::CTFPerPlayerMatchCriteriaProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CTFPerPlayerMatchCriteriaProto)
}
CTFPerPlayerMatchCriteriaProto::CTFPerPlayerMatchCriteriaProto(const CTFPerPlayerMatchCriteriaProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mvm_squad_surplus_ = from.mvm_squad_surplus_;
  // @@protoc_insertion_point(copy_constructor:CTFPerPlayerMatchCriteriaProto)
}

void CTFPerPlayerMatchCriteriaProto::SharedCtor() {
mvm_squad_surplus_ = false;
}

CTFPerPlayerMatchCriteriaProto::~CTFPerPlayerMatchCriteriaProto() {
  // @@protoc_insertion_point(destructor:CTFPerPlayerMatchCriteriaProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CTFPerPlayerMatchCriteriaProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CTFPerPlayerMatchCriteriaProto::ArenaDtor(void* object) {
  CTFPerPlayerMatchCriteriaProto* _this = reinterpret_cast< CTFPerPlayerMatchCriteriaProto* >(object);
  (void)_this;
}
void CTFPerPlayerMatchCriteriaProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CTFPerPlayerMatchCriteriaProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CTFPerPlayerMatchCriteriaProto::Clear() {
// @@protoc_insertion_point(message_clear_start:CTFPerPlayerMatchCriteriaProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mvm_squad_surplus_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CTFPerPlayerMatchCriteriaProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool mvm_squad_surplus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_mvm_squad_surplus(&has_bits);
          mvm_squad_surplus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CTFPerPlayerMatchCriteriaProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CTFPerPlayerMatchCriteriaProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool mvm_squad_surplus = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_mvm_squad_surplus(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CTFPerPlayerMatchCriteriaProto)
  return target;
}

size_t CTFPerPlayerMatchCriteriaProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CTFPerPlayerMatchCriteriaProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool mvm_squad_surplus = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CTFPerPlayerMatchCriteriaProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CTFPerPlayerMatchCriteriaProto)
  GOOGLE_DCHECK_NE(&from, this);
  const CTFPerPlayerMatchCriteriaProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CTFPerPlayerMatchCriteriaProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CTFPerPlayerMatchCriteriaProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CTFPerPlayerMatchCriteriaProto)
    MergeFrom(*source);
  }
}

void CTFPerPlayerMatchCriteriaProto::MergeFrom(const CTFPerPlayerMatchCriteriaProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CTFPerPlayerMatchCriteriaProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mvm_squad_surplus()) {
    _internal_set_mvm_squad_surplus(from._internal_mvm_squad_surplus());
  }
}

void CTFPerPlayerMatchCriteriaProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CTFPerPlayerMatchCriteriaProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTFPerPlayerMatchCriteriaProto::CopyFrom(const CTFPerPlayerMatchCriteriaProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CTFPerPlayerMatchCriteriaProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTFPerPlayerMatchCriteriaProto::IsInitialized() const {
  return true;
}

void CTFPerPlayerMatchCriteriaProto::InternalSwap(CTFPerPlayerMatchCriteriaProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(mvm_squad_surplus_, other->mvm_squad_surplus_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CTFPerPlayerMatchCriteriaProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[64]);
}

// ===================================================================

class CTFPartyOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<CTFPartyOptions>()._has_bits_);
  static void set_has_overwrite_existing(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::CTFGroupMatchCriteriaProto& group_criteria(const CTFPartyOptions* msg);
  static void set_has_group_criteria(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CTFPerPlayerMatchCriteriaProto& player_criteria(const CTFPartyOptions* msg);
  static void set_has_player_criteria(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TFSyncedMMUIState& player_uistate(const CTFPartyOptions* msg);
  static void set_has_player_uistate(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::CTFGroupMatchCriteriaProto&
CTFPartyOptions::_Internal::group_criteria(const CTFPartyOptions* msg) {
  return *msg->group_criteria_;
}
const ::CTFPerPlayerMatchCriteriaProto&
CTFPartyOptions::_Internal::player_criteria(const CTFPartyOptions* msg) {
  return *msg->player_criteria_;
}
const ::TFSyncedMMUIState&
CTFPartyOptions::_Internal::player_uistate(const CTFPartyOptions* msg) {
  return *msg->player_uistate_;
}
CTFPartyOptions::CTFPartyOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CTFPartyOptions)
}
CTFPartyOptions::CTFPartyOptions(const CTFPartyOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_group_criteria()) {
    group_criteria_ = new ::CTFGroupMatchCriteriaProto(*from.group_criteria_);
  } else {
    group_criteria_ = nullptr;
  }
  if (from._internal_has_player_criteria()) {
    player_criteria_ = new ::CTFPerPlayerMatchCriteriaProto(*from.player_criteria_);
  } else {
    player_criteria_ = nullptr;
  }
  if (from._internal_has_player_uistate()) {
    player_uistate_ = new ::TFSyncedMMUIState(*from.player_uistate_);
  } else {
    player_uistate_ = nullptr;
  }
  overwrite_existing_ = from.overwrite_existing_;
  // @@protoc_insertion_point(copy_constructor:CTFPartyOptions)
}

void CTFPartyOptions::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&group_criteria_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&overwrite_existing_) -
    reinterpret_cast<char*>(&group_criteria_)) + sizeof(overwrite_existing_));
}

CTFPartyOptions::~CTFPartyOptions() {
  // @@protoc_insertion_point(destructor:CTFPartyOptions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CTFPartyOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete group_criteria_;
  if (this != internal_default_instance()) delete player_criteria_;
  if (this != internal_default_instance()) delete player_uistate_;
}

void CTFPartyOptions::ArenaDtor(void* object) {
  CTFPartyOptions* _this = reinterpret_cast< CTFPartyOptions* >(object);
  (void)_this;
}
void CTFPartyOptions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CTFPartyOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CTFPartyOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:CTFPartyOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(group_criteria_ != nullptr);
      group_criteria_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(player_criteria_ != nullptr);
      player_criteria_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(player_uistate_ != nullptr);
      player_uistate_->Clear();
    }
  }
  overwrite_existing_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CTFPartyOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool overwrite_existing = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_overwrite_existing(&has_bits);
          overwrite_existing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CTFGroupMatchCriteriaProto group_criteria = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_group_criteria(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CTFPerPlayerMatchCriteriaProto player_criteria = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_criteria(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TFSyncedMMUIState player_uistate = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_uistate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CTFPartyOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CTFPartyOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool overwrite_existing = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_overwrite_existing(), target);
  }

  // optional .CTFGroupMatchCriteriaProto group_criteria = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::group_criteria(this), target, stream);
  }

  // optional .CTFPerPlayerMatchCriteriaProto player_criteria = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::player_criteria(this), target, stream);
  }

  // optional .TFSyncedMMUIState player_uistate = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::player_uistate(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CTFPartyOptions)
  return target;
}

size_t CTFPartyOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CTFPartyOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .CTFGroupMatchCriteriaProto group_criteria = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *group_criteria_);
    }

    // optional .CTFPerPlayerMatchCriteriaProto player_criteria = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *player_criteria_);
    }

    // optional .TFSyncedMMUIState player_uistate = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *player_uistate_);
    }

    // optional bool overwrite_existing = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CTFPartyOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CTFPartyOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const CTFPartyOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CTFPartyOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CTFPartyOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CTFPartyOptions)
    MergeFrom(*source);
  }
}

void CTFPartyOptions::MergeFrom(const CTFPartyOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CTFPartyOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_group_criteria()->::CTFGroupMatchCriteriaProto::MergeFrom(from._internal_group_criteria());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_player_criteria()->::CTFPerPlayerMatchCriteriaProto::MergeFrom(from._internal_player_criteria());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_player_uistate()->::TFSyncedMMUIState::MergeFrom(from._internal_player_uistate());
    }
    if (cached_has_bits & 0x00000008u) {
      overwrite_existing_ = from.overwrite_existing_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CTFPartyOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CTFPartyOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTFPartyOptions::CopyFrom(const CTFPartyOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CTFPartyOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTFPartyOptions::IsInitialized() const {
  return true;
}

void CTFPartyOptions::InternalSwap(CTFPartyOptions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CTFPartyOptions, overwrite_existing_)
      + sizeof(CTFPartyOptions::overwrite_existing_)
      - PROTOBUF_FIELD_OFFSET(CTFPartyOptions, group_criteria_)>(
          reinterpret_cast<char*>(&group_criteria_),
          reinterpret_cast<char*>(&other->group_criteria_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CTFPartyOptions::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[65]);
}

// ===================================================================

class CMsgPartySetOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgPartySetOptions>()._has_bits_);
  static void set_has_party_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CTFPartyOptions& options(const CMsgPartySetOptions* msg);
  static void set_has_options(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CTFPartyOptions&
CMsgPartySetOptions::_Internal::options(const CMsgPartySetOptions* msg) {
  return *msg->options_;
}
CMsgPartySetOptions::CMsgPartySetOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgPartySetOptions)
}
CMsgPartySetOptions::CMsgPartySetOptions(const CMsgPartySetOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_options()) {
    options_ = new ::CTFPartyOptions(*from.options_);
  } else {
    options_ = nullptr;
  }
  party_id_ = from.party_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgPartySetOptions)
}

void CMsgPartySetOptions::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&options_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&party_id_) -
    reinterpret_cast<char*>(&options_)) + sizeof(party_id_));
}

CMsgPartySetOptions::~CMsgPartySetOptions() {
  // @@protoc_insertion_point(destructor:CMsgPartySetOptions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgPartySetOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete options_;
}

void CMsgPartySetOptions::ArenaDtor(void* object) {
  CMsgPartySetOptions* _this = reinterpret_cast< CMsgPartySetOptions* >(object);
  (void)_this;
}
void CMsgPartySetOptions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgPartySetOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgPartySetOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPartySetOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(options_ != nullptr);
    options_->Clear();
  }
  party_id_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPartySetOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 party_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_party_id(&has_bits);
          party_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional .CTFPartyOptions options = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgPartySetOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPartySetOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 party_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_party_id(), target);
  }

  // optional .CTFPartyOptions options = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::options(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPartySetOptions)
  return target;
}

size_t CMsgPartySetOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPartySetOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CTFPartyOptions options = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *options_);
    }

    // optional fixed64 party_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPartySetOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgPartySetOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPartySetOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgPartySetOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgPartySetOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgPartySetOptions)
    MergeFrom(*source);
  }
}

void CMsgPartySetOptions::MergeFrom(const CMsgPartySetOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgPartySetOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_options()->::CTFPartyOptions::MergeFrom(from._internal_options());
    }
    if (cached_has_bits & 0x00000002u) {
      party_id_ = from.party_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgPartySetOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgPartySetOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPartySetOptions::CopyFrom(const CMsgPartySetOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPartySetOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPartySetOptions::IsInitialized() const {
  return true;
}

void CMsgPartySetOptions::InternalSwap(CMsgPartySetOptions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgPartySetOptions, party_id_)
      + sizeof(CMsgPartySetOptions::party_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgPartySetOptions, options_)>(
          reinterpret_cast<char*>(&options_),
          reinterpret_cast<char*>(&other->options_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPartySetOptions::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[66]);
}

// ===================================================================

class CMsgPartySetOptionsResponse::_Internal {
 public:
};

CMsgPartySetOptionsResponse::CMsgPartySetOptionsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgPartySetOptionsResponse)
}
CMsgPartySetOptionsResponse::CMsgPartySetOptionsResponse(const CMsgPartySetOptionsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgPartySetOptionsResponse)
}

void CMsgPartySetOptionsResponse::SharedCtor() {
}

CMsgPartySetOptionsResponse::~CMsgPartySetOptionsResponse() {
  // @@protoc_insertion_point(destructor:CMsgPartySetOptionsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgPartySetOptionsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgPartySetOptionsResponse::ArenaDtor(void* object) {
  CMsgPartySetOptionsResponse* _this = reinterpret_cast< CMsgPartySetOptionsResponse* >(object);
  (void)_this;
}
void CMsgPartySetOptionsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgPartySetOptionsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgPartySetOptionsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPartySetOptionsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPartySetOptionsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgPartySetOptionsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPartySetOptionsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPartySetOptionsResponse)
  return target;
}

size_t CMsgPartySetOptionsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPartySetOptionsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPartySetOptionsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgPartySetOptionsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPartySetOptionsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgPartySetOptionsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgPartySetOptionsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgPartySetOptionsResponse)
    MergeFrom(*source);
  }
}

void CMsgPartySetOptionsResponse::MergeFrom(const CMsgPartySetOptionsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgPartySetOptionsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgPartySetOptionsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgPartySetOptionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPartySetOptionsResponse::CopyFrom(const CMsgPartySetOptionsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPartySetOptionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPartySetOptionsResponse::IsInitialized() const {
  return true;
}

void CMsgPartySetOptionsResponse::InternalSwap(CMsgPartySetOptionsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPartySetOptionsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[67]);
}

// ===================================================================

class CMsgPartyQueueForMatch::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgPartyQueueForMatch>()._has_bits_);
  static void set_has_party_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CTFPartyOptions& final_options(const CMsgPartyQueueForMatch* msg);
  static void set_has_final_options(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_match_group(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::CTFPartyOptions&
CMsgPartyQueueForMatch::_Internal::final_options(const CMsgPartyQueueForMatch* msg) {
  return *msg->final_options_;
}
CMsgPartyQueueForMatch::CMsgPartyQueueForMatch(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgPartyQueueForMatch)
}
CMsgPartyQueueForMatch::CMsgPartyQueueForMatch(const CMsgPartyQueueForMatch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_final_options()) {
    final_options_ = new ::CTFPartyOptions(*from.final_options_);
  } else {
    final_options_ = nullptr;
  }
  ::memcpy(&party_id_, &from.party_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&match_group_) -
    reinterpret_cast<char*>(&party_id_)) + sizeof(match_group_));
  // @@protoc_insertion_point(copy_constructor:CMsgPartyQueueForMatch)
}

void CMsgPartyQueueForMatch::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&final_options_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&party_id_) -
    reinterpret_cast<char*>(&final_options_)) + sizeof(party_id_));
match_group_ = -1;
}

CMsgPartyQueueForMatch::~CMsgPartyQueueForMatch() {
  // @@protoc_insertion_point(destructor:CMsgPartyQueueForMatch)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgPartyQueueForMatch::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete final_options_;
}

void CMsgPartyQueueForMatch::ArenaDtor(void* object) {
  CMsgPartyQueueForMatch* _this = reinterpret_cast< CMsgPartyQueueForMatch* >(object);
  (void)_this;
}
void CMsgPartyQueueForMatch::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgPartyQueueForMatch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgPartyQueueForMatch::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPartyQueueForMatch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(final_options_ != nullptr);
    final_options_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    party_id_ = uint64_t{0u};
    match_group_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPartyQueueForMatch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 party_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_party_id(&has_bits);
          party_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional .CTFPartyOptions final_options = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_final_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ETFMatchGroup match_group = 3 [default = k_eTFMatchGroup_Invalid];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ETFMatchGroup_IsValid(val))) {
            _internal_set_match_group(static_cast<::ETFMatchGroup>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgPartyQueueForMatch::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPartyQueueForMatch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 party_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_party_id(), target);
  }

  // optional .CTFPartyOptions final_options = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::final_options(this), target, stream);
  }

  // optional .ETFMatchGroup match_group = 3 [default = k_eTFMatchGroup_Invalid];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_match_group(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPartyQueueForMatch)
  return target;
}

size_t CMsgPartyQueueForMatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPartyQueueForMatch)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .CTFPartyOptions final_options = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *final_options_);
    }

    // optional fixed64 party_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional .ETFMatchGroup match_group = 3 [default = k_eTFMatchGroup_Invalid];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_match_group());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPartyQueueForMatch::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgPartyQueueForMatch)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPartyQueueForMatch* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgPartyQueueForMatch>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgPartyQueueForMatch)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgPartyQueueForMatch)
    MergeFrom(*source);
  }
}

void CMsgPartyQueueForMatch::MergeFrom(const CMsgPartyQueueForMatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgPartyQueueForMatch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_final_options()->::CTFPartyOptions::MergeFrom(from._internal_final_options());
    }
    if (cached_has_bits & 0x00000002u) {
      party_id_ = from.party_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      match_group_ = from.match_group_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgPartyQueueForMatch::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgPartyQueueForMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPartyQueueForMatch::CopyFrom(const CMsgPartyQueueForMatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPartyQueueForMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPartyQueueForMatch::IsInitialized() const {
  return true;
}

void CMsgPartyQueueForMatch::InternalSwap(CMsgPartyQueueForMatch* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgPartyQueueForMatch, party_id_)
      + sizeof(CMsgPartyQueueForMatch::party_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgPartyQueueForMatch, final_options_)>(
          reinterpret_cast<char*>(&final_options_),
          reinterpret_cast<char*>(&other->final_options_));
  swap(match_group_, other->match_group_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPartyQueueForMatch::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[68]);
}

// ===================================================================

class CMsgPartyQueueForMatchResponse::_Internal {
 public:
};

CMsgPartyQueueForMatchResponse::CMsgPartyQueueForMatchResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgPartyQueueForMatchResponse)
}
CMsgPartyQueueForMatchResponse::CMsgPartyQueueForMatchResponse(const CMsgPartyQueueForMatchResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgPartyQueueForMatchResponse)
}

void CMsgPartyQueueForMatchResponse::SharedCtor() {
}

CMsgPartyQueueForMatchResponse::~CMsgPartyQueueForMatchResponse() {
  // @@protoc_insertion_point(destructor:CMsgPartyQueueForMatchResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgPartyQueueForMatchResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgPartyQueueForMatchResponse::ArenaDtor(void* object) {
  CMsgPartyQueueForMatchResponse* _this = reinterpret_cast< CMsgPartyQueueForMatchResponse* >(object);
  (void)_this;
}
void CMsgPartyQueueForMatchResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgPartyQueueForMatchResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgPartyQueueForMatchResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPartyQueueForMatchResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPartyQueueForMatchResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgPartyQueueForMatchResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPartyQueueForMatchResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPartyQueueForMatchResponse)
  return target;
}

size_t CMsgPartyQueueForMatchResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPartyQueueForMatchResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPartyQueueForMatchResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgPartyQueueForMatchResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPartyQueueForMatchResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgPartyQueueForMatchResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgPartyQueueForMatchResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgPartyQueueForMatchResponse)
    MergeFrom(*source);
  }
}

void CMsgPartyQueueForMatchResponse::MergeFrom(const CMsgPartyQueueForMatchResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgPartyQueueForMatchResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgPartyQueueForMatchResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgPartyQueueForMatchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPartyQueueForMatchResponse::CopyFrom(const CMsgPartyQueueForMatchResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPartyQueueForMatchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPartyQueueForMatchResponse::IsInitialized() const {
  return true;
}

void CMsgPartyQueueForMatchResponse::InternalSwap(CMsgPartyQueueForMatchResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPartyQueueForMatchResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[69]);
}

// ===================================================================

class CMsgPartyQueueForStandby::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgPartyQueueForStandby>()._has_bits_);
  static void set_has_party_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_party_lobby_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgPartyQueueForStandby::CMsgPartyQueueForStandby(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgPartyQueueForStandby)
}
CMsgPartyQueueForStandby::CMsgPartyQueueForStandby(const CMsgPartyQueueForStandby& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&party_id_, &from.party_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&party_lobby_id_) -
    reinterpret_cast<char*>(&party_id_)) + sizeof(party_lobby_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgPartyQueueForStandby)
}

void CMsgPartyQueueForStandby::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&party_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&party_lobby_id_) -
    reinterpret_cast<char*>(&party_id_)) + sizeof(party_lobby_id_));
}

CMsgPartyQueueForStandby::~CMsgPartyQueueForStandby() {
  // @@protoc_insertion_point(destructor:CMsgPartyQueueForStandby)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgPartyQueueForStandby::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgPartyQueueForStandby::ArenaDtor(void* object) {
  CMsgPartyQueueForStandby* _this = reinterpret_cast< CMsgPartyQueueForStandby* >(object);
  (void)_this;
}
void CMsgPartyQueueForStandby::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgPartyQueueForStandby::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgPartyQueueForStandby::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPartyQueueForStandby)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&party_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&party_lobby_id_) -
        reinterpret_cast<char*>(&party_id_)) + sizeof(party_lobby_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPartyQueueForStandby::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 party_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_party_id(&has_bits);
          party_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed64 party_lobby_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_party_lobby_id(&has_bits);
          party_lobby_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgPartyQueueForStandby::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPartyQueueForStandby)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 party_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_party_id(), target);
  }

  // optional fixed64 party_lobby_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_party_lobby_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPartyQueueForStandby)
  return target;
}

size_t CMsgPartyQueueForStandby::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPartyQueueForStandby)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 party_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed64 party_lobby_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPartyQueueForStandby::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgPartyQueueForStandby)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPartyQueueForStandby* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgPartyQueueForStandby>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgPartyQueueForStandby)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgPartyQueueForStandby)
    MergeFrom(*source);
  }
}

void CMsgPartyQueueForStandby::MergeFrom(const CMsgPartyQueueForStandby& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgPartyQueueForStandby)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      party_id_ = from.party_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      party_lobby_id_ = from.party_lobby_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgPartyQueueForStandby::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgPartyQueueForStandby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPartyQueueForStandby::CopyFrom(const CMsgPartyQueueForStandby& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPartyQueueForStandby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPartyQueueForStandby::IsInitialized() const {
  return true;
}

void CMsgPartyQueueForStandby::InternalSwap(CMsgPartyQueueForStandby* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgPartyQueueForStandby, party_lobby_id_)
      + sizeof(CMsgPartyQueueForStandby::party_lobby_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgPartyQueueForStandby, party_id_)>(
          reinterpret_cast<char*>(&party_id_),
          reinterpret_cast<char*>(&other->party_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPartyQueueForStandby::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[70]);
}

// ===================================================================

class CMsgPartyQueueForStandbyResponse::_Internal {
 public:
};

CMsgPartyQueueForStandbyResponse::CMsgPartyQueueForStandbyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgPartyQueueForStandbyResponse)
}
CMsgPartyQueueForStandbyResponse::CMsgPartyQueueForStandbyResponse(const CMsgPartyQueueForStandbyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgPartyQueueForStandbyResponse)
}

void CMsgPartyQueueForStandbyResponse::SharedCtor() {
}

CMsgPartyQueueForStandbyResponse::~CMsgPartyQueueForStandbyResponse() {
  // @@protoc_insertion_point(destructor:CMsgPartyQueueForStandbyResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgPartyQueueForStandbyResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgPartyQueueForStandbyResponse::ArenaDtor(void* object) {
  CMsgPartyQueueForStandbyResponse* _this = reinterpret_cast< CMsgPartyQueueForStandbyResponse* >(object);
  (void)_this;
}
void CMsgPartyQueueForStandbyResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgPartyQueueForStandbyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgPartyQueueForStandbyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPartyQueueForStandbyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPartyQueueForStandbyResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgPartyQueueForStandbyResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPartyQueueForStandbyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPartyQueueForStandbyResponse)
  return target;
}

size_t CMsgPartyQueueForStandbyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPartyQueueForStandbyResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPartyQueueForStandbyResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgPartyQueueForStandbyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPartyQueueForStandbyResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgPartyQueueForStandbyResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgPartyQueueForStandbyResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgPartyQueueForStandbyResponse)
    MergeFrom(*source);
  }
}

void CMsgPartyQueueForStandbyResponse::MergeFrom(const CMsgPartyQueueForStandbyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgPartyQueueForStandbyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgPartyQueueForStandbyResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgPartyQueueForStandbyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPartyQueueForStandbyResponse::CopyFrom(const CMsgPartyQueueForStandbyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPartyQueueForStandbyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPartyQueueForStandbyResponse::IsInitialized() const {
  return true;
}

void CMsgPartyQueueForStandbyResponse::InternalSwap(CMsgPartyQueueForStandbyResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPartyQueueForStandbyResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[71]);
}

// ===================================================================

class CMsgPartyRemoveFromQueue::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgPartyRemoveFromQueue>()._has_bits_);
  static void set_has_party_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_match_group(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgPartyRemoveFromQueue::CMsgPartyRemoveFromQueue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgPartyRemoveFromQueue)
}
CMsgPartyRemoveFromQueue::CMsgPartyRemoveFromQueue(const CMsgPartyRemoveFromQueue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&party_id_, &from.party_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&match_group_) -
    reinterpret_cast<char*>(&party_id_)) + sizeof(match_group_));
  // @@protoc_insertion_point(copy_constructor:CMsgPartyRemoveFromQueue)
}

void CMsgPartyRemoveFromQueue::SharedCtor() {
party_id_ = uint64_t{0u};
match_group_ = -1;
}

CMsgPartyRemoveFromQueue::~CMsgPartyRemoveFromQueue() {
  // @@protoc_insertion_point(destructor:CMsgPartyRemoveFromQueue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgPartyRemoveFromQueue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgPartyRemoveFromQueue::ArenaDtor(void* object) {
  CMsgPartyRemoveFromQueue* _this = reinterpret_cast< CMsgPartyRemoveFromQueue* >(object);
  (void)_this;
}
void CMsgPartyRemoveFromQueue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgPartyRemoveFromQueue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgPartyRemoveFromQueue::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPartyRemoveFromQueue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    party_id_ = uint64_t{0u};
    match_group_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPartyRemoveFromQueue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 party_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_party_id(&has_bits);
          party_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional .ETFMatchGroup match_group = 2 [default = k_eTFMatchGroup_Invalid];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ETFMatchGroup_IsValid(val))) {
            _internal_set_match_group(static_cast<::ETFMatchGroup>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgPartyRemoveFromQueue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPartyRemoveFromQueue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 party_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_party_id(), target);
  }

  // optional .ETFMatchGroup match_group = 2 [default = k_eTFMatchGroup_Invalid];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_match_group(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPartyRemoveFromQueue)
  return target;
}

size_t CMsgPartyRemoveFromQueue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPartyRemoveFromQueue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 party_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional .ETFMatchGroup match_group = 2 [default = k_eTFMatchGroup_Invalid];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_match_group());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPartyRemoveFromQueue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgPartyRemoveFromQueue)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPartyRemoveFromQueue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgPartyRemoveFromQueue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgPartyRemoveFromQueue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgPartyRemoveFromQueue)
    MergeFrom(*source);
  }
}

void CMsgPartyRemoveFromQueue::MergeFrom(const CMsgPartyRemoveFromQueue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgPartyRemoveFromQueue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      party_id_ = from.party_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      match_group_ = from.match_group_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgPartyRemoveFromQueue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgPartyRemoveFromQueue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPartyRemoveFromQueue::CopyFrom(const CMsgPartyRemoveFromQueue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPartyRemoveFromQueue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPartyRemoveFromQueue::IsInitialized() const {
  return true;
}

void CMsgPartyRemoveFromQueue::InternalSwap(CMsgPartyRemoveFromQueue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(party_id_, other->party_id_);
  swap(match_group_, other->match_group_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPartyRemoveFromQueue::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[72]);
}

// ===================================================================

class CMsgPartyRemoveFromQueueResponse::_Internal {
 public:
};

CMsgPartyRemoveFromQueueResponse::CMsgPartyRemoveFromQueueResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgPartyRemoveFromQueueResponse)
}
CMsgPartyRemoveFromQueueResponse::CMsgPartyRemoveFromQueueResponse(const CMsgPartyRemoveFromQueueResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgPartyRemoveFromQueueResponse)
}

void CMsgPartyRemoveFromQueueResponse::SharedCtor() {
}

CMsgPartyRemoveFromQueueResponse::~CMsgPartyRemoveFromQueueResponse() {
  // @@protoc_insertion_point(destructor:CMsgPartyRemoveFromQueueResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgPartyRemoveFromQueueResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgPartyRemoveFromQueueResponse::ArenaDtor(void* object) {
  CMsgPartyRemoveFromQueueResponse* _this = reinterpret_cast< CMsgPartyRemoveFromQueueResponse* >(object);
  (void)_this;
}
void CMsgPartyRemoveFromQueueResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgPartyRemoveFromQueueResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgPartyRemoveFromQueueResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPartyRemoveFromQueueResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPartyRemoveFromQueueResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgPartyRemoveFromQueueResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPartyRemoveFromQueueResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPartyRemoveFromQueueResponse)
  return target;
}

size_t CMsgPartyRemoveFromQueueResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPartyRemoveFromQueueResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPartyRemoveFromQueueResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgPartyRemoveFromQueueResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPartyRemoveFromQueueResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgPartyRemoveFromQueueResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgPartyRemoveFromQueueResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgPartyRemoveFromQueueResponse)
    MergeFrom(*source);
  }
}

void CMsgPartyRemoveFromQueueResponse::MergeFrom(const CMsgPartyRemoveFromQueueResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgPartyRemoveFromQueueResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgPartyRemoveFromQueueResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgPartyRemoveFromQueueResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPartyRemoveFromQueueResponse::CopyFrom(const CMsgPartyRemoveFromQueueResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPartyRemoveFromQueueResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPartyRemoveFromQueueResponse::IsInitialized() const {
  return true;
}

void CMsgPartyRemoveFromQueueResponse::InternalSwap(CMsgPartyRemoveFromQueueResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPartyRemoveFromQueueResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[73]);
}

// ===================================================================

class CMsgPartyRemoveFromStandbyQueue::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgPartyRemoveFromStandbyQueue>()._has_bits_);
  static void set_has_party_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgPartyRemoveFromStandbyQueue::CMsgPartyRemoveFromStandbyQueue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgPartyRemoveFromStandbyQueue)
}
CMsgPartyRemoveFromStandbyQueue::CMsgPartyRemoveFromStandbyQueue(const CMsgPartyRemoveFromStandbyQueue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  party_id_ = from.party_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgPartyRemoveFromStandbyQueue)
}

void CMsgPartyRemoveFromStandbyQueue::SharedCtor() {
party_id_ = uint64_t{0u};
}

CMsgPartyRemoveFromStandbyQueue::~CMsgPartyRemoveFromStandbyQueue() {
  // @@protoc_insertion_point(destructor:CMsgPartyRemoveFromStandbyQueue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgPartyRemoveFromStandbyQueue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgPartyRemoveFromStandbyQueue::ArenaDtor(void* object) {
  CMsgPartyRemoveFromStandbyQueue* _this = reinterpret_cast< CMsgPartyRemoveFromStandbyQueue* >(object);
  (void)_this;
}
void CMsgPartyRemoveFromStandbyQueue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgPartyRemoveFromStandbyQueue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgPartyRemoveFromStandbyQueue::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPartyRemoveFromStandbyQueue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  party_id_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPartyRemoveFromStandbyQueue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 party_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_party_id(&has_bits);
          party_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgPartyRemoveFromStandbyQueue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPartyRemoveFromStandbyQueue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 party_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_party_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPartyRemoveFromStandbyQueue)
  return target;
}

size_t CMsgPartyRemoveFromStandbyQueue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPartyRemoveFromStandbyQueue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 party_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPartyRemoveFromStandbyQueue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgPartyRemoveFromStandbyQueue)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPartyRemoveFromStandbyQueue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgPartyRemoveFromStandbyQueue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgPartyRemoveFromStandbyQueue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgPartyRemoveFromStandbyQueue)
    MergeFrom(*source);
  }
}

void CMsgPartyRemoveFromStandbyQueue::MergeFrom(const CMsgPartyRemoveFromStandbyQueue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgPartyRemoveFromStandbyQueue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_party_id()) {
    _internal_set_party_id(from._internal_party_id());
  }
}

void CMsgPartyRemoveFromStandbyQueue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgPartyRemoveFromStandbyQueue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPartyRemoveFromStandbyQueue::CopyFrom(const CMsgPartyRemoveFromStandbyQueue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPartyRemoveFromStandbyQueue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPartyRemoveFromStandbyQueue::IsInitialized() const {
  return true;
}

void CMsgPartyRemoveFromStandbyQueue::InternalSwap(CMsgPartyRemoveFromStandbyQueue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(party_id_, other->party_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPartyRemoveFromStandbyQueue::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[74]);
}

// ===================================================================

class CMsgPartyRemoveFromStandbyQueueResponse::_Internal {
 public:
};

CMsgPartyRemoveFromStandbyQueueResponse::CMsgPartyRemoveFromStandbyQueueResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgPartyRemoveFromStandbyQueueResponse)
}
CMsgPartyRemoveFromStandbyQueueResponse::CMsgPartyRemoveFromStandbyQueueResponse(const CMsgPartyRemoveFromStandbyQueueResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgPartyRemoveFromStandbyQueueResponse)
}

void CMsgPartyRemoveFromStandbyQueueResponse::SharedCtor() {
}

CMsgPartyRemoveFromStandbyQueueResponse::~CMsgPartyRemoveFromStandbyQueueResponse() {
  // @@protoc_insertion_point(destructor:CMsgPartyRemoveFromStandbyQueueResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgPartyRemoveFromStandbyQueueResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgPartyRemoveFromStandbyQueueResponse::ArenaDtor(void* object) {
  CMsgPartyRemoveFromStandbyQueueResponse* _this = reinterpret_cast< CMsgPartyRemoveFromStandbyQueueResponse* >(object);
  (void)_this;
}
void CMsgPartyRemoveFromStandbyQueueResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgPartyRemoveFromStandbyQueueResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgPartyRemoveFromStandbyQueueResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPartyRemoveFromStandbyQueueResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPartyRemoveFromStandbyQueueResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgPartyRemoveFromStandbyQueueResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPartyRemoveFromStandbyQueueResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPartyRemoveFromStandbyQueueResponse)
  return target;
}

size_t CMsgPartyRemoveFromStandbyQueueResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPartyRemoveFromStandbyQueueResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPartyRemoveFromStandbyQueueResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgPartyRemoveFromStandbyQueueResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPartyRemoveFromStandbyQueueResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgPartyRemoveFromStandbyQueueResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgPartyRemoveFromStandbyQueueResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgPartyRemoveFromStandbyQueueResponse)
    MergeFrom(*source);
  }
}

void CMsgPartyRemoveFromStandbyQueueResponse::MergeFrom(const CMsgPartyRemoveFromStandbyQueueResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgPartyRemoveFromStandbyQueueResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgPartyRemoveFromStandbyQueueResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgPartyRemoveFromStandbyQueueResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPartyRemoveFromStandbyQueueResponse::CopyFrom(const CMsgPartyRemoveFromStandbyQueueResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPartyRemoveFromStandbyQueueResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPartyRemoveFromStandbyQueueResponse::IsInitialized() const {
  return true;
}

void CMsgPartyRemoveFromStandbyQueueResponse::InternalSwap(CMsgPartyRemoveFromStandbyQueueResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPartyRemoveFromStandbyQueueResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[75]);
}

// ===================================================================

class CMsgPartyInvitePlayer::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgPartyInvitePlayer>()._has_bits_);
  static void set_has_party_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_expecting_request_to_join(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgPartyInvitePlayer::CMsgPartyInvitePlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgPartyInvitePlayer)
}
CMsgPartyInvitePlayer::CMsgPartyInvitePlayer(const CMsgPartyInvitePlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&party_id_, &from.party_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&expecting_request_to_join_) -
    reinterpret_cast<char*>(&party_id_)) + sizeof(expecting_request_to_join_));
  // @@protoc_insertion_point(copy_constructor:CMsgPartyInvitePlayer)
}

void CMsgPartyInvitePlayer::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&party_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&expecting_request_to_join_) -
    reinterpret_cast<char*>(&party_id_)) + sizeof(expecting_request_to_join_));
}

CMsgPartyInvitePlayer::~CMsgPartyInvitePlayer() {
  // @@protoc_insertion_point(destructor:CMsgPartyInvitePlayer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgPartyInvitePlayer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgPartyInvitePlayer::ArenaDtor(void* object) {
  CMsgPartyInvitePlayer* _this = reinterpret_cast< CMsgPartyInvitePlayer* >(object);
  (void)_this;
}
void CMsgPartyInvitePlayer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgPartyInvitePlayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgPartyInvitePlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPartyInvitePlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&party_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&expecting_request_to_join_) -
        reinterpret_cast<char*>(&party_id_)) + sizeof(expecting_request_to_join_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPartyInvitePlayer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 party_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_party_id(&has_bits);
          party_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed64 player_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_player_id(&has_bits);
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional bool expecting_request_to_join = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_expecting_request_to_join(&has_bits);
          expecting_request_to_join_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgPartyInvitePlayer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPartyInvitePlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 party_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_party_id(), target);
  }

  // optional fixed64 player_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_player_id(), target);
  }

  // optional bool expecting_request_to_join = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_expecting_request_to_join(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPartyInvitePlayer)
  return target;
}

size_t CMsgPartyInvitePlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPartyInvitePlayer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional fixed64 party_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed64 player_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional bool expecting_request_to_join = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPartyInvitePlayer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgPartyInvitePlayer)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPartyInvitePlayer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgPartyInvitePlayer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgPartyInvitePlayer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgPartyInvitePlayer)
    MergeFrom(*source);
  }
}

void CMsgPartyInvitePlayer::MergeFrom(const CMsgPartyInvitePlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgPartyInvitePlayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      party_id_ = from.party_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      player_id_ = from.player_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      expecting_request_to_join_ = from.expecting_request_to_join_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgPartyInvitePlayer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgPartyInvitePlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPartyInvitePlayer::CopyFrom(const CMsgPartyInvitePlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPartyInvitePlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPartyInvitePlayer::IsInitialized() const {
  return true;
}

void CMsgPartyInvitePlayer::InternalSwap(CMsgPartyInvitePlayer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgPartyInvitePlayer, expecting_request_to_join_)
      + sizeof(CMsgPartyInvitePlayer::expecting_request_to_join_)
      - PROTOBUF_FIELD_OFFSET(CMsgPartyInvitePlayer, party_id_)>(
          reinterpret_cast<char*>(&party_id_),
          reinterpret_cast<char*>(&other->party_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPartyInvitePlayer::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[76]);
}

// ===================================================================

class CMsgPartyRequestJoinPlayer::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgPartyRequestJoinPlayer>()._has_bits_);
  static void set_has_current_party_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_join_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_join_party_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_expecting_invite(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgPartyRequestJoinPlayer::CMsgPartyRequestJoinPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgPartyRequestJoinPlayer)
}
CMsgPartyRequestJoinPlayer::CMsgPartyRequestJoinPlayer(const CMsgPartyRequestJoinPlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&current_party_id_, &from.current_party_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&expecting_invite_) -
    reinterpret_cast<char*>(&current_party_id_)) + sizeof(expecting_invite_));
  // @@protoc_insertion_point(copy_constructor:CMsgPartyRequestJoinPlayer)
}

void CMsgPartyRequestJoinPlayer::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&current_party_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&expecting_invite_) -
    reinterpret_cast<char*>(&current_party_id_)) + sizeof(expecting_invite_));
}

CMsgPartyRequestJoinPlayer::~CMsgPartyRequestJoinPlayer() {
  // @@protoc_insertion_point(destructor:CMsgPartyRequestJoinPlayer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgPartyRequestJoinPlayer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgPartyRequestJoinPlayer::ArenaDtor(void* object) {
  CMsgPartyRequestJoinPlayer* _this = reinterpret_cast< CMsgPartyRequestJoinPlayer* >(object);
  (void)_this;
}
void CMsgPartyRequestJoinPlayer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgPartyRequestJoinPlayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgPartyRequestJoinPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPartyRequestJoinPlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&current_party_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&expecting_invite_) -
        reinterpret_cast<char*>(&current_party_id_)) + sizeof(expecting_invite_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPartyRequestJoinPlayer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 current_party_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_current_party_id(&has_bits);
          current_party_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed64 join_player_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_join_player_id(&has_bits);
          join_player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed64 join_party_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_join_party_id(&has_bits);
          join_party_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional bool expecting_invite = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_expecting_invite(&has_bits);
          expecting_invite_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgPartyRequestJoinPlayer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPartyRequestJoinPlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 current_party_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_current_party_id(), target);
  }

  // optional fixed64 join_player_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_join_player_id(), target);
  }

  // optional fixed64 join_party_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_join_party_id(), target);
  }

  // optional bool expecting_invite = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_expecting_invite(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPartyRequestJoinPlayer)
  return target;
}

size_t CMsgPartyRequestJoinPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPartyRequestJoinPlayer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional fixed64 current_party_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed64 join_player_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional fixed64 join_party_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional bool expecting_invite = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPartyRequestJoinPlayer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgPartyRequestJoinPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPartyRequestJoinPlayer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgPartyRequestJoinPlayer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgPartyRequestJoinPlayer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgPartyRequestJoinPlayer)
    MergeFrom(*source);
  }
}

void CMsgPartyRequestJoinPlayer::MergeFrom(const CMsgPartyRequestJoinPlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgPartyRequestJoinPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      current_party_id_ = from.current_party_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      join_player_id_ = from.join_player_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      join_party_id_ = from.join_party_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      expecting_invite_ = from.expecting_invite_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgPartyRequestJoinPlayer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgPartyRequestJoinPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPartyRequestJoinPlayer::CopyFrom(const CMsgPartyRequestJoinPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPartyRequestJoinPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPartyRequestJoinPlayer::IsInitialized() const {
  return true;
}

void CMsgPartyRequestJoinPlayer::InternalSwap(CMsgPartyRequestJoinPlayer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgPartyRequestJoinPlayer, expecting_invite_)
      + sizeof(CMsgPartyRequestJoinPlayer::expecting_invite_)
      - PROTOBUF_FIELD_OFFSET(CMsgPartyRequestJoinPlayer, current_party_id_)>(
          reinterpret_cast<char*>(&current_party_id_),
          reinterpret_cast<char*>(&other->current_party_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPartyRequestJoinPlayer::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[77]);
}

// ===================================================================

class CMsgPartyClearPendingPlayer::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgPartyClearPendingPlayer>()._has_bits_);
  static void set_has_party_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pending_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgPartyClearPendingPlayer::CMsgPartyClearPendingPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgPartyClearPendingPlayer)
}
CMsgPartyClearPendingPlayer::CMsgPartyClearPendingPlayer(const CMsgPartyClearPendingPlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&party_id_, &from.party_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&pending_player_id_) -
    reinterpret_cast<char*>(&party_id_)) + sizeof(pending_player_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgPartyClearPendingPlayer)
}

void CMsgPartyClearPendingPlayer::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&party_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pending_player_id_) -
    reinterpret_cast<char*>(&party_id_)) + sizeof(pending_player_id_));
}

CMsgPartyClearPendingPlayer::~CMsgPartyClearPendingPlayer() {
  // @@protoc_insertion_point(destructor:CMsgPartyClearPendingPlayer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgPartyClearPendingPlayer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgPartyClearPendingPlayer::ArenaDtor(void* object) {
  CMsgPartyClearPendingPlayer* _this = reinterpret_cast< CMsgPartyClearPendingPlayer* >(object);
  (void)_this;
}
void CMsgPartyClearPendingPlayer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgPartyClearPendingPlayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgPartyClearPendingPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPartyClearPendingPlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&party_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pending_player_id_) -
        reinterpret_cast<char*>(&party_id_)) + sizeof(pending_player_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPartyClearPendingPlayer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 party_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_party_id(&has_bits);
          party_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed64 pending_player_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_pending_player_id(&has_bits);
          pending_player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgPartyClearPendingPlayer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPartyClearPendingPlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 party_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_party_id(), target);
  }

  // optional fixed64 pending_player_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_pending_player_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPartyClearPendingPlayer)
  return target;
}

size_t CMsgPartyClearPendingPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPartyClearPendingPlayer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 party_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed64 pending_player_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPartyClearPendingPlayer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgPartyClearPendingPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPartyClearPendingPlayer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgPartyClearPendingPlayer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgPartyClearPendingPlayer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgPartyClearPendingPlayer)
    MergeFrom(*source);
  }
}

void CMsgPartyClearPendingPlayer::MergeFrom(const CMsgPartyClearPendingPlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgPartyClearPendingPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      party_id_ = from.party_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      pending_player_id_ = from.pending_player_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgPartyClearPendingPlayer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgPartyClearPendingPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPartyClearPendingPlayer::CopyFrom(const CMsgPartyClearPendingPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPartyClearPendingPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPartyClearPendingPlayer::IsInitialized() const {
  return true;
}

void CMsgPartyClearPendingPlayer::InternalSwap(CMsgPartyClearPendingPlayer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgPartyClearPendingPlayer, pending_player_id_)
      + sizeof(CMsgPartyClearPendingPlayer::pending_player_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgPartyClearPendingPlayer, party_id_)>(
          reinterpret_cast<char*>(&party_id_),
          reinterpret_cast<char*>(&other->party_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPartyClearPendingPlayer::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[78]);
}

// ===================================================================

class CMsgPartyClearPendingPlayerResponse::_Internal {
 public:
};

CMsgPartyClearPendingPlayerResponse::CMsgPartyClearPendingPlayerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgPartyClearPendingPlayerResponse)
}
CMsgPartyClearPendingPlayerResponse::CMsgPartyClearPendingPlayerResponse(const CMsgPartyClearPendingPlayerResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgPartyClearPendingPlayerResponse)
}

void CMsgPartyClearPendingPlayerResponse::SharedCtor() {
}

CMsgPartyClearPendingPlayerResponse::~CMsgPartyClearPendingPlayerResponse() {
  // @@protoc_insertion_point(destructor:CMsgPartyClearPendingPlayerResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgPartyClearPendingPlayerResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgPartyClearPendingPlayerResponse::ArenaDtor(void* object) {
  CMsgPartyClearPendingPlayerResponse* _this = reinterpret_cast< CMsgPartyClearPendingPlayerResponse* >(object);
  (void)_this;
}
void CMsgPartyClearPendingPlayerResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgPartyClearPendingPlayerResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgPartyClearPendingPlayerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPartyClearPendingPlayerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPartyClearPendingPlayerResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgPartyClearPendingPlayerResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPartyClearPendingPlayerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPartyClearPendingPlayerResponse)
  return target;
}

size_t CMsgPartyClearPendingPlayerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPartyClearPendingPlayerResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPartyClearPendingPlayerResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgPartyClearPendingPlayerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPartyClearPendingPlayerResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgPartyClearPendingPlayerResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgPartyClearPendingPlayerResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgPartyClearPendingPlayerResponse)
    MergeFrom(*source);
  }
}

void CMsgPartyClearPendingPlayerResponse::MergeFrom(const CMsgPartyClearPendingPlayerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgPartyClearPendingPlayerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgPartyClearPendingPlayerResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgPartyClearPendingPlayerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPartyClearPendingPlayerResponse::CopyFrom(const CMsgPartyClearPendingPlayerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPartyClearPendingPlayerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPartyClearPendingPlayerResponse::IsInitialized() const {
  return true;
}

void CMsgPartyClearPendingPlayerResponse::InternalSwap(CMsgPartyClearPendingPlayerResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPartyClearPendingPlayerResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[79]);
}

// ===================================================================

class CMsgPartyClearOtherPartyRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgPartyClearOtherPartyRequest>()._has_bits_);
  static void set_has_other_party_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgPartyClearOtherPartyRequest::CMsgPartyClearOtherPartyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgPartyClearOtherPartyRequest)
}
CMsgPartyClearOtherPartyRequest::CMsgPartyClearOtherPartyRequest(const CMsgPartyClearOtherPartyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  other_party_id_ = from.other_party_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgPartyClearOtherPartyRequest)
}

void CMsgPartyClearOtherPartyRequest::SharedCtor() {
other_party_id_ = uint64_t{0u};
}

CMsgPartyClearOtherPartyRequest::~CMsgPartyClearOtherPartyRequest() {
  // @@protoc_insertion_point(destructor:CMsgPartyClearOtherPartyRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgPartyClearOtherPartyRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgPartyClearOtherPartyRequest::ArenaDtor(void* object) {
  CMsgPartyClearOtherPartyRequest* _this = reinterpret_cast< CMsgPartyClearOtherPartyRequest* >(object);
  (void)_this;
}
void CMsgPartyClearOtherPartyRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgPartyClearOtherPartyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgPartyClearOtherPartyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPartyClearOtherPartyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  other_party_id_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPartyClearOtherPartyRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 other_party_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_other_party_id(&has_bits);
          other_party_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgPartyClearOtherPartyRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPartyClearOtherPartyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 other_party_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_other_party_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPartyClearOtherPartyRequest)
  return target;
}

size_t CMsgPartyClearOtherPartyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPartyClearOtherPartyRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 other_party_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPartyClearOtherPartyRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgPartyClearOtherPartyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPartyClearOtherPartyRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgPartyClearOtherPartyRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgPartyClearOtherPartyRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgPartyClearOtherPartyRequest)
    MergeFrom(*source);
  }
}

void CMsgPartyClearOtherPartyRequest::MergeFrom(const CMsgPartyClearOtherPartyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgPartyClearOtherPartyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_other_party_id()) {
    _internal_set_other_party_id(from._internal_other_party_id());
  }
}

void CMsgPartyClearOtherPartyRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgPartyClearOtherPartyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPartyClearOtherPartyRequest::CopyFrom(const CMsgPartyClearOtherPartyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPartyClearOtherPartyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPartyClearOtherPartyRequest::IsInitialized() const {
  return true;
}

void CMsgPartyClearOtherPartyRequest::InternalSwap(CMsgPartyClearOtherPartyRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(other_party_id_, other->other_party_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPartyClearOtherPartyRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[80]);
}

// ===================================================================

class CMsgPartyClearOtherPartyRequestResponse::_Internal {
 public:
};

CMsgPartyClearOtherPartyRequestResponse::CMsgPartyClearOtherPartyRequestResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgPartyClearOtherPartyRequestResponse)
}
CMsgPartyClearOtherPartyRequestResponse::CMsgPartyClearOtherPartyRequestResponse(const CMsgPartyClearOtherPartyRequestResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgPartyClearOtherPartyRequestResponse)
}

void CMsgPartyClearOtherPartyRequestResponse::SharedCtor() {
}

CMsgPartyClearOtherPartyRequestResponse::~CMsgPartyClearOtherPartyRequestResponse() {
  // @@protoc_insertion_point(destructor:CMsgPartyClearOtherPartyRequestResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgPartyClearOtherPartyRequestResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgPartyClearOtherPartyRequestResponse::ArenaDtor(void* object) {
  CMsgPartyClearOtherPartyRequestResponse* _this = reinterpret_cast< CMsgPartyClearOtherPartyRequestResponse* >(object);
  (void)_this;
}
void CMsgPartyClearOtherPartyRequestResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgPartyClearOtherPartyRequestResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgPartyClearOtherPartyRequestResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPartyClearOtherPartyRequestResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPartyClearOtherPartyRequestResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgPartyClearOtherPartyRequestResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPartyClearOtherPartyRequestResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPartyClearOtherPartyRequestResponse)
  return target;
}

size_t CMsgPartyClearOtherPartyRequestResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPartyClearOtherPartyRequestResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPartyClearOtherPartyRequestResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgPartyClearOtherPartyRequestResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPartyClearOtherPartyRequestResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgPartyClearOtherPartyRequestResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgPartyClearOtherPartyRequestResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgPartyClearOtherPartyRequestResponse)
    MergeFrom(*source);
  }
}

void CMsgPartyClearOtherPartyRequestResponse::MergeFrom(const CMsgPartyClearOtherPartyRequestResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgPartyClearOtherPartyRequestResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgPartyClearOtherPartyRequestResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgPartyClearOtherPartyRequestResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPartyClearOtherPartyRequestResponse::CopyFrom(const CMsgPartyClearOtherPartyRequestResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPartyClearOtherPartyRequestResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPartyClearOtherPartyRequestResponse::IsInitialized() const {
  return true;
}

void CMsgPartyClearOtherPartyRequestResponse::InternalSwap(CMsgPartyClearOtherPartyRequestResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPartyClearOtherPartyRequestResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[81]);
}

// ===================================================================

class CMsgPartyPromoteToLeader::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgPartyPromoteToLeader>()._has_bits_);
  static void set_has_party_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_new_leader_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgPartyPromoteToLeader::CMsgPartyPromoteToLeader(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgPartyPromoteToLeader)
}
CMsgPartyPromoteToLeader::CMsgPartyPromoteToLeader(const CMsgPartyPromoteToLeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&party_id_, &from.party_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&new_leader_id_) -
    reinterpret_cast<char*>(&party_id_)) + sizeof(new_leader_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgPartyPromoteToLeader)
}

void CMsgPartyPromoteToLeader::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&party_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&new_leader_id_) -
    reinterpret_cast<char*>(&party_id_)) + sizeof(new_leader_id_));
}

CMsgPartyPromoteToLeader::~CMsgPartyPromoteToLeader() {
  // @@protoc_insertion_point(destructor:CMsgPartyPromoteToLeader)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgPartyPromoteToLeader::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgPartyPromoteToLeader::ArenaDtor(void* object) {
  CMsgPartyPromoteToLeader* _this = reinterpret_cast< CMsgPartyPromoteToLeader* >(object);
  (void)_this;
}
void CMsgPartyPromoteToLeader::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgPartyPromoteToLeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgPartyPromoteToLeader::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPartyPromoteToLeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&party_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&new_leader_id_) -
        reinterpret_cast<char*>(&party_id_)) + sizeof(new_leader_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPartyPromoteToLeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 party_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_party_id(&has_bits);
          party_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed64 new_leader_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_new_leader_id(&has_bits);
          new_leader_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgPartyPromoteToLeader::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPartyPromoteToLeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 party_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_party_id(), target);
  }

  // optional fixed64 new_leader_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_new_leader_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPartyPromoteToLeader)
  return target;
}

size_t CMsgPartyPromoteToLeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPartyPromoteToLeader)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 party_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed64 new_leader_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPartyPromoteToLeader::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgPartyPromoteToLeader)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPartyPromoteToLeader* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgPartyPromoteToLeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgPartyPromoteToLeader)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgPartyPromoteToLeader)
    MergeFrom(*source);
  }
}

void CMsgPartyPromoteToLeader::MergeFrom(const CMsgPartyPromoteToLeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgPartyPromoteToLeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      party_id_ = from.party_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      new_leader_id_ = from.new_leader_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgPartyPromoteToLeader::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgPartyPromoteToLeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPartyPromoteToLeader::CopyFrom(const CMsgPartyPromoteToLeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPartyPromoteToLeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPartyPromoteToLeader::IsInitialized() const {
  return true;
}

void CMsgPartyPromoteToLeader::InternalSwap(CMsgPartyPromoteToLeader* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgPartyPromoteToLeader, new_leader_id_)
      + sizeof(CMsgPartyPromoteToLeader::new_leader_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgPartyPromoteToLeader, party_id_)>(
          reinterpret_cast<char*>(&party_id_),
          reinterpret_cast<char*>(&other->party_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPartyPromoteToLeader::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[82]);
}

// ===================================================================

class CMsgPartyKickMember::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgPartyKickMember>()._has_bits_);
  static void set_has_party_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_target_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgPartyKickMember::CMsgPartyKickMember(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgPartyKickMember)
}
CMsgPartyKickMember::CMsgPartyKickMember(const CMsgPartyKickMember& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&party_id_, &from.party_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&target_id_) -
    reinterpret_cast<char*>(&party_id_)) + sizeof(target_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgPartyKickMember)
}

void CMsgPartyKickMember::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&party_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&target_id_) -
    reinterpret_cast<char*>(&party_id_)) + sizeof(target_id_));
}

CMsgPartyKickMember::~CMsgPartyKickMember() {
  // @@protoc_insertion_point(destructor:CMsgPartyKickMember)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgPartyKickMember::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgPartyKickMember::ArenaDtor(void* object) {
  CMsgPartyKickMember* _this = reinterpret_cast< CMsgPartyKickMember* >(object);
  (void)_this;
}
void CMsgPartyKickMember::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgPartyKickMember::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgPartyKickMember::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPartyKickMember)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&party_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&target_id_) -
        reinterpret_cast<char*>(&party_id_)) + sizeof(target_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPartyKickMember::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 party_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_party_id(&has_bits);
          party_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed64 target_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_target_id(&has_bits);
          target_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgPartyKickMember::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPartyKickMember)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 party_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_party_id(), target);
  }

  // optional fixed64 target_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_target_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPartyKickMember)
  return target;
}

size_t CMsgPartyKickMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPartyKickMember)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 party_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed64 target_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPartyKickMember::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgPartyKickMember)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPartyKickMember* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgPartyKickMember>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgPartyKickMember)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgPartyKickMember)
    MergeFrom(*source);
  }
}

void CMsgPartyKickMember::MergeFrom(const CMsgPartyKickMember& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgPartyKickMember)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      party_id_ = from.party_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      target_id_ = from.target_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgPartyKickMember::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgPartyKickMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPartyKickMember::CopyFrom(const CMsgPartyKickMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPartyKickMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPartyKickMember::IsInitialized() const {
  return true;
}

void CMsgPartyKickMember::InternalSwap(CMsgPartyKickMember* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgPartyKickMember, target_id_)
      + sizeof(CMsgPartyKickMember::target_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgPartyKickMember, party_id_)>(
          reinterpret_cast<char*>(&party_id_),
          reinterpret_cast<char*>(&other->party_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPartyKickMember::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[83]);
}

// ===================================================================

class CMsgPartySendChat::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgPartySendChat>()._has_bits_);
  static void set_has_party_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgPartySendChat::CMsgPartySendChat(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgPartySendChat)
}
CMsgPartySendChat::CMsgPartySendChat(const CMsgPartySendChat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_msg()) {
    msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg(), 
      GetArenaForAllocation());
  }
  party_id_ = from.party_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgPartySendChat)
}

void CMsgPartySendChat::SharedCtor() {
msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
party_id_ = uint64_t{0u};
}

CMsgPartySendChat::~CMsgPartySendChat() {
  // @@protoc_insertion_point(destructor:CMsgPartySendChat)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgPartySendChat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgPartySendChat::ArenaDtor(void* object) {
  CMsgPartySendChat* _this = reinterpret_cast< CMsgPartySendChat* >(object);
  (void)_this;
}
void CMsgPartySendChat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgPartySendChat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgPartySendChat::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPartySendChat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    msg_.ClearNonDefaultToEmpty();
  }
  party_id_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPartySendChat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 party_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_party_id(&has_bits);
          party_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional string msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgPartySendChat.msg");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgPartySendChat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPartySendChat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 party_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_party_id(), target);
  }

  // optional string msg = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgPartySendChat.msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPartySendChat)
  return target;
}

size_t CMsgPartySendChat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPartySendChat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string msg = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_msg());
    }

    // optional fixed64 party_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPartySendChat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgPartySendChat)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPartySendChat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgPartySendChat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgPartySendChat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgPartySendChat)
    MergeFrom(*source);
  }
}

void CMsgPartySendChat::MergeFrom(const CMsgPartySendChat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgPartySendChat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_msg(from._internal_msg());
    }
    if (cached_has_bits & 0x00000002u) {
      party_id_ = from.party_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgPartySendChat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgPartySendChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPartySendChat::CopyFrom(const CMsgPartySendChat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPartySendChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPartySendChat::IsInitialized() const {
  return true;
}

void CMsgPartySendChat::InternalSwap(CMsgPartySendChat* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msg_, GetArenaForAllocation(),
      &other->msg_, other->GetArenaForAllocation()
  );
  swap(party_id_, other->party_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPartySendChat::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[84]);
}

// ===================================================================

class CMsgPartyChatMsg::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgPartyChatMsg>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_actor_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgPartyChatMsg::CMsgPartyChatMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgPartyChatMsg)
}
CMsgPartyChatMsg::CMsgPartyChatMsg(const CMsgPartyChatMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_msg()) {
    msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg(), 
      GetArenaForAllocation());
  }
  ::memcpy(&actor_id_, &from.actor_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&actor_id_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:CMsgPartyChatMsg)
}

void CMsgPartyChatMsg::SharedCtor() {
msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&actor_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&actor_id_)) + sizeof(type_));
}

CMsgPartyChatMsg::~CMsgPartyChatMsg() {
  // @@protoc_insertion_point(destructor:CMsgPartyChatMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgPartyChatMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgPartyChatMsg::ArenaDtor(void* object) {
  CMsgPartyChatMsg* _this = reinterpret_cast< CMsgPartyChatMsg* >(object);
  (void)_this;
}
void CMsgPartyChatMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgPartyChatMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgPartyChatMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPartyChatMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    msg_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&actor_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&actor_id_)) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPartyChatMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .ETFPartyChatType type = 1 [default = k_eTFPartyChatType_Invalid];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ETFPartyChatType_IsValid(val))) {
            _internal_set_type(static_cast<::ETFPartyChatType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional fixed64 actor_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_actor_id(&has_bits);
          actor_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional string msg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgPartyChatMsg.msg");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgPartyChatMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPartyChatMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ETFPartyChatType type = 1 [default = k_eTFPartyChatType_Invalid];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional fixed64 actor_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_actor_id(), target);
  }

  // optional string msg = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgPartyChatMsg.msg");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPartyChatMsg)
  return target;
}

size_t CMsgPartyChatMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPartyChatMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string msg = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_msg());
    }

    // optional fixed64 actor_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional .ETFPartyChatType type = 1 [default = k_eTFPartyChatType_Invalid];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPartyChatMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgPartyChatMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPartyChatMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgPartyChatMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgPartyChatMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgPartyChatMsg)
    MergeFrom(*source);
  }
}

void CMsgPartyChatMsg::MergeFrom(const CMsgPartyChatMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgPartyChatMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_msg(from._internal_msg());
    }
    if (cached_has_bits & 0x00000002u) {
      actor_id_ = from.actor_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgPartyChatMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgPartyChatMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPartyChatMsg::CopyFrom(const CMsgPartyChatMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPartyChatMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPartyChatMsg::IsInitialized() const {
  return true;
}

void CMsgPartyChatMsg::InternalSwap(CMsgPartyChatMsg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msg_, GetArenaForAllocation(),
      &other->msg_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgPartyChatMsg, type_)
      + sizeof(CMsgPartyChatMsg::type_)
      - PROTOBUF_FIELD_OFFSET(CMsgPartyChatMsg, actor_id_)>(
          reinterpret_cast<char*>(&actor_id_),
          reinterpret_cast<char*>(&other->actor_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPartyChatMsg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[85]);
}

// ===================================================================

class CSOTFParty_QueueEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<CSOTFParty_QueueEntry>()._has_bits_);
  static void set_has_match_group(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_queued_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CSOTFParty_QueueEntry::CSOTFParty_QueueEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSOTFParty.QueueEntry)
}
CSOTFParty_QueueEntry::CSOTFParty_QueueEntry(const CSOTFParty_QueueEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&queued_time_, &from.queued_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&match_group_) -
    reinterpret_cast<char*>(&queued_time_)) + sizeof(match_group_));
  // @@protoc_insertion_point(copy_constructor:CSOTFParty.QueueEntry)
}

void CSOTFParty_QueueEntry::SharedCtor() {
queued_time_ = 0u;
match_group_ = -1;
}

CSOTFParty_QueueEntry::~CSOTFParty_QueueEntry() {
  // @@protoc_insertion_point(destructor:CSOTFParty.QueueEntry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSOTFParty_QueueEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSOTFParty_QueueEntry::ArenaDtor(void* object) {
  CSOTFParty_QueueEntry* _this = reinterpret_cast< CSOTFParty_QueueEntry* >(object);
  (void)_this;
}
void CSOTFParty_QueueEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSOTFParty_QueueEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSOTFParty_QueueEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:CSOTFParty.QueueEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    queued_time_ = 0u;
    match_group_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSOTFParty_QueueEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .ETFMatchGroup match_group = 1 [default = k_eTFMatchGroup_Invalid];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ETFMatchGroup_IsValid(val))) {
            _internal_set_match_group(static_cast<::ETFMatchGroup>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional fixed32 queued_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_queued_time(&has_bits);
          queued_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSOTFParty_QueueEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSOTFParty.QueueEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ETFMatchGroup match_group = 1 [default = k_eTFMatchGroup_Invalid];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_match_group(), target);
  }

  // optional fixed32 queued_time = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(2, this->_internal_queued_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSOTFParty.QueueEntry)
  return target;
}

size_t CSOTFParty_QueueEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSOTFParty.QueueEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed32 queued_time = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional .ETFMatchGroup match_group = 1 [default = k_eTFMatchGroup_Invalid];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_match_group());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSOTFParty_QueueEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSOTFParty.QueueEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const CSOTFParty_QueueEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSOTFParty_QueueEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSOTFParty.QueueEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSOTFParty.QueueEntry)
    MergeFrom(*source);
  }
}

void CSOTFParty_QueueEntry::MergeFrom(const CSOTFParty_QueueEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSOTFParty.QueueEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      queued_time_ = from.queued_time_;
    }
    if (cached_has_bits & 0x00000002u) {
      match_group_ = from.match_group_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSOTFParty_QueueEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSOTFParty.QueueEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOTFParty_QueueEntry::CopyFrom(const CSOTFParty_QueueEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSOTFParty.QueueEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOTFParty_QueueEntry::IsInitialized() const {
  return true;
}

void CSOTFParty_QueueEntry::InternalSwap(CSOTFParty_QueueEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(queued_time_, other->queued_time_);
  swap(match_group_, other->match_group_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSOTFParty_QueueEntry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[86]);
}

// ===================================================================

class CSOTFParty::_Internal {
 public:
  using HasBits = decltype(std::declval<CSOTFParty>()._has_bits_);
  static void set_has_party_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_leader_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_associated_lobby_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_associated_lobby_match_group(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::CTFGroupMatchCriteriaProto& group_criteria(const CSOTFParty* msg);
  static void set_has_group_criteria(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_casual_banned_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_casual_low_priority_time(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_ranked_banned_time(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_ranked_low_priority_time(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TFSyncedMMUIState& leader_ui_state(const CSOTFParty* msg);
  static void set_has_leader_ui_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CTFGroupMatchCriteriaProto&
CSOTFParty::_Internal::group_criteria(const CSOTFParty* msg) {
  return *msg->group_criteria_;
}
const ::TFSyncedMMUIState&
CSOTFParty::_Internal::leader_ui_state(const CSOTFParty* msg) {
  return *msg->leader_ui_state_;
}
CSOTFParty::CSOTFParty(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  member_ids_(arena),
  members_(arena),
  pending_members_(arena),
  matchmaking_queues_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSOTFParty)
}
CSOTFParty::CSOTFParty(const CSOTFParty& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      member_ids_(from.member_ids_),
      members_(from.members_),
      pending_members_(from.pending_members_),
      matchmaking_queues_(from.matchmaking_queues_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_group_criteria()) {
    group_criteria_ = new ::CTFGroupMatchCriteriaProto(*from.group_criteria_);
  } else {
    group_criteria_ = nullptr;
  }
  if (from._internal_has_leader_ui_state()) {
    leader_ui_state_ = new ::TFSyncedMMUIState(*from.leader_ui_state_);
  } else {
    leader_ui_state_ = nullptr;
  }
  ::memcpy(&party_id_, &from.party_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&associated_lobby_match_group_) -
    reinterpret_cast<char*>(&party_id_)) + sizeof(associated_lobby_match_group_));
  // @@protoc_insertion_point(copy_constructor:CSOTFParty)
}

void CSOTFParty::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&group_criteria_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ranked_low_priority_time_) -
    reinterpret_cast<char*>(&group_criteria_)) + sizeof(ranked_low_priority_time_));
associated_lobby_match_group_ = -1;
}

CSOTFParty::~CSOTFParty() {
  // @@protoc_insertion_point(destructor:CSOTFParty)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSOTFParty::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete group_criteria_;
  if (this != internal_default_instance()) delete leader_ui_state_;
}

void CSOTFParty::ArenaDtor(void* object) {
  CSOTFParty* _this = reinterpret_cast< CSOTFParty* >(object);
  (void)_this;
}
void CSOTFParty::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSOTFParty::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSOTFParty::Clear() {
// @@protoc_insertion_point(message_clear_start:CSOTFParty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  member_ids_.Clear();
  members_.Clear();
  pending_members_.Clear();
  matchmaking_queues_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(group_criteria_ != nullptr);
      group_criteria_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(leader_ui_state_ != nullptr);
      leader_ui_state_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&party_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ranked_banned_time_) -
        reinterpret_cast<char*>(&party_id_)) + sizeof(ranked_banned_time_));
  }
  if (cached_has_bits & 0x00000300u) {
    ranked_low_priority_time_ = 0u;
    associated_lobby_match_group_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSOTFParty::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 party_id = 1 [(.key_field) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_party_id(&has_bits);
          party_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 leader_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_leader_id(&has_bits);
          leader_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // repeated fixed64 member_ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_member_ids(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr));
            ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<25>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_member_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CSOTFPartyMember members = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 casual_banned_time = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_casual_banned_time(&has_bits);
          casual_banned_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 casual_low_priority_time = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_casual_low_priority_time(&has_bits);
          casual_low_priority_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 associated_lobby_id = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_associated_lobby_id(&has_bits);
          associated_lobby_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CTFGroupMatchCriteriaProto group_criteria = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_group_criteria(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TFPendingPartyMember pending_members = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_pending_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<314>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .ETFMatchGroup associated_lobby_match_group = 40 [default = k_eTFMatchGroup_Invalid];
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ETFMatchGroup_IsValid(val))) {
            _internal_set_associated_lobby_match_group(static_cast<::ETFMatchGroup>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(40, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 ranked_banned_time = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_ranked_banned_time(&has_bits);
          ranked_banned_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ranked_low_priority_time = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_ranked_low_priority_time(&has_bits);
          ranked_low_priority_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CSOTFParty.QueueEntry matchmaking_queues = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_matchmaking_queues(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<346>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .TFSyncedMMUIState leader_ui_state = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_leader_ui_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSOTFParty::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSOTFParty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 party_id = 1 [(.key_field) = true];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_party_id(), target);
  }

  // optional fixed64 leader_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_leader_id(), target);
  }

  // repeated fixed64 member_ids = 3;
  for (int i = 0, n = this->_internal_member_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_member_ids(i), target);
  }

  // repeated .CSOTFPartyMember members = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_members_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_members(i), target, stream);
  }

  // optional uint32 casual_banned_time = 18;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_casual_banned_time(), target);
  }

  // optional uint32 casual_low_priority_time = 20;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_casual_low_priority_time(), target);
  }

  // optional uint64 associated_lobby_id = 35;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(35, this->_internal_associated_lobby_id(), target);
  }

  // optional .CTFGroupMatchCriteriaProto group_criteria = 37;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        37, _Internal::group_criteria(this), target, stream);
  }

  // repeated .TFPendingPartyMember pending_members = 39;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pending_members_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(39, this->_internal_pending_members(i), target, stream);
  }

  // optional .ETFMatchGroup associated_lobby_match_group = 40 [default = k_eTFMatchGroup_Invalid];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      40, this->_internal_associated_lobby_match_group(), target);
  }

  // optional uint32 ranked_banned_time = 41;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(41, this->_internal_ranked_banned_time(), target);
  }

  // optional uint32 ranked_low_priority_time = 42;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(42, this->_internal_ranked_low_priority_time(), target);
  }

  // repeated .CSOTFParty.QueueEntry matchmaking_queues = 43;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_matchmaking_queues_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(43, this->_internal_matchmaking_queues(i), target, stream);
  }

  // optional .TFSyncedMMUIState leader_ui_state = 44;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        44, _Internal::leader_ui_state(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSOTFParty)
  return target;
}

size_t CSOTFParty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSOTFParty)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed64 member_ids = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_member_ids_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_member_ids_size());
    total_size += data_size;
  }

  // repeated .CSOTFPartyMember members = 13;
  total_size += 1UL * this->_internal_members_size();
  for (const auto& msg : this->members_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TFPendingPartyMember pending_members = 39;
  total_size += 2UL * this->_internal_pending_members_size();
  for (const auto& msg : this->pending_members_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CSOTFParty.QueueEntry matchmaking_queues = 43;
  total_size += 2UL * this->_internal_matchmaking_queues_size();
  for (const auto& msg : this->matchmaking_queues_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .CTFGroupMatchCriteriaProto group_criteria = 37;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *group_criteria_);
    }

    // optional .TFSyncedMMUIState leader_ui_state = 44;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *leader_ui_state_);
    }

    // optional uint64 party_id = 1 [(.key_field) = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_party_id());
    }

    // optional fixed64 leader_id = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional uint32 casual_banned_time = 18;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_casual_banned_time());
    }

    // optional uint32 casual_low_priority_time = 20;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_casual_low_priority_time());
    }

    // optional uint64 associated_lobby_id = 35;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_associated_lobby_id());
    }

    // optional uint32 ranked_banned_time = 41;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ranked_banned_time());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional uint32 ranked_low_priority_time = 42;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ranked_low_priority_time());
    }

    // optional .ETFMatchGroup associated_lobby_match_group = 40 [default = k_eTFMatchGroup_Invalid];
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_associated_lobby_match_group());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSOTFParty::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSOTFParty)
  GOOGLE_DCHECK_NE(&from, this);
  const CSOTFParty* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSOTFParty>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSOTFParty)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSOTFParty)
    MergeFrom(*source);
  }
}

void CSOTFParty::MergeFrom(const CSOTFParty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSOTFParty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  member_ids_.MergeFrom(from.member_ids_);
  members_.MergeFrom(from.members_);
  pending_members_.MergeFrom(from.pending_members_);
  matchmaking_queues_.MergeFrom(from.matchmaking_queues_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_group_criteria()->::CTFGroupMatchCriteriaProto::MergeFrom(from._internal_group_criteria());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_leader_ui_state()->::TFSyncedMMUIState::MergeFrom(from._internal_leader_ui_state());
    }
    if (cached_has_bits & 0x00000004u) {
      party_id_ = from.party_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      leader_id_ = from.leader_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      casual_banned_time_ = from.casual_banned_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      casual_low_priority_time_ = from.casual_low_priority_time_;
    }
    if (cached_has_bits & 0x00000040u) {
      associated_lobby_id_ = from.associated_lobby_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      ranked_banned_time_ = from.ranked_banned_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      ranked_low_priority_time_ = from.ranked_low_priority_time_;
    }
    if (cached_has_bits & 0x00000200u) {
      associated_lobby_match_group_ = from.associated_lobby_match_group_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSOTFParty::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSOTFParty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOTFParty::CopyFrom(const CSOTFParty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSOTFParty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOTFParty::IsInitialized() const {
  return true;
}

void CSOTFParty::InternalSwap(CSOTFParty* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  member_ids_.InternalSwap(&other->member_ids_);
  members_.InternalSwap(&other->members_);
  pending_members_.InternalSwap(&other->pending_members_);
  matchmaking_queues_.InternalSwap(&other->matchmaking_queues_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSOTFParty, ranked_low_priority_time_)
      + sizeof(CSOTFParty::ranked_low_priority_time_)
      - PROTOBUF_FIELD_OFFSET(CSOTFParty, group_criteria_)>(
          reinterpret_cast<char*>(&group_criteria_),
          reinterpret_cast<char*>(&other->group_criteria_));
  swap(associated_lobby_match_group_, other->associated_lobby_match_group_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSOTFParty::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[87]);
}

// ===================================================================

class CSOTFPartyInvite_PartyMember::_Internal {
 public:
  using HasBits = decltype(std::declval<CSOTFPartyInvite_PartyMember>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CSOTFPartyInvite_PartyMember::CSOTFPartyInvite_PartyMember(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSOTFPartyInvite.PartyMember)
}
CSOTFPartyInvite_PartyMember::CSOTFPartyInvite_PartyMember(const CSOTFPartyInvite_PartyMember& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  steamid_ = from.steamid_;
  // @@protoc_insertion_point(copy_constructor:CSOTFPartyInvite.PartyMember)
}

void CSOTFPartyInvite_PartyMember::SharedCtor() {
steamid_ = uint64_t{0u};
}

CSOTFPartyInvite_PartyMember::~CSOTFPartyInvite_PartyMember() {
  // @@protoc_insertion_point(destructor:CSOTFPartyInvite.PartyMember)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSOTFPartyInvite_PartyMember::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSOTFPartyInvite_PartyMember::ArenaDtor(void* object) {
  CSOTFPartyInvite_PartyMember* _this = reinterpret_cast< CSOTFPartyInvite_PartyMember* >(object);
  (void)_this;
}
void CSOTFPartyInvite_PartyMember::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSOTFPartyInvite_PartyMember::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSOTFPartyInvite_PartyMember::Clear() {
// @@protoc_insertion_point(message_clear_start:CSOTFPartyInvite.PartyMember)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  steamid_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSOTFPartyInvite_PartyMember::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSOTFPartyInvite_PartyMember::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSOTFPartyInvite.PartyMember)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_steamid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSOTFPartyInvite.PartyMember)
  return target;
}

size_t CSOTFPartyInvite_PartyMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSOTFPartyInvite.PartyMember)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 steamid = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSOTFPartyInvite_PartyMember::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSOTFPartyInvite.PartyMember)
  GOOGLE_DCHECK_NE(&from, this);
  const CSOTFPartyInvite_PartyMember* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSOTFPartyInvite_PartyMember>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSOTFPartyInvite.PartyMember)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSOTFPartyInvite.PartyMember)
    MergeFrom(*source);
  }
}

void CSOTFPartyInvite_PartyMember::MergeFrom(const CSOTFPartyInvite_PartyMember& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSOTFPartyInvite.PartyMember)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_steamid()) {
    _internal_set_steamid(from._internal_steamid());
  }
}

void CSOTFPartyInvite_PartyMember::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSOTFPartyInvite.PartyMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOTFPartyInvite_PartyMember::CopyFrom(const CSOTFPartyInvite_PartyMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSOTFPartyInvite.PartyMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOTFPartyInvite_PartyMember::IsInitialized() const {
  return true;
}

void CSOTFPartyInvite_PartyMember::InternalSwap(CSOTFPartyInvite_PartyMember* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steamid_, other->steamid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSOTFPartyInvite_PartyMember::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[88]);
}

// ===================================================================

class CSOTFPartyInvite::_Internal {
 public:
  using HasBits = decltype(std::declval<CSOTFPartyInvite>()._has_bits_);
  static void set_has_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_inviter(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CSOTFPartyInvite::CSOTFPartyInvite(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  members_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSOTFPartyInvite)
}
CSOTFPartyInvite::CSOTFPartyInvite(const CSOTFPartyInvite& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      members_(from.members_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&group_id_, &from.group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&group_id_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:CSOTFPartyInvite)
}

void CSOTFPartyInvite::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&group_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&inviter_) -
    reinterpret_cast<char*>(&group_id_)) + sizeof(inviter_));
type_ = 1;
}

CSOTFPartyInvite::~CSOTFPartyInvite() {
  // @@protoc_insertion_point(destructor:CSOTFPartyInvite)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSOTFPartyInvite::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSOTFPartyInvite::ArenaDtor(void* object) {
  CSOTFPartyInvite* _this = reinterpret_cast< CSOTFPartyInvite* >(object);
  (void)_this;
}
void CSOTFPartyInvite::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSOTFPartyInvite::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSOTFPartyInvite::Clear() {
// @@protoc_insertion_point(message_clear_start:CSOTFPartyInvite)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  members_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&inviter_) -
        reinterpret_cast<char*>(&group_id_)) + sizeof(inviter_));
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSOTFPartyInvite::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 group_id = 1 [(.key_field) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_group_id(&has_bits);
          group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 inviter = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_inviter(&has_bits);
          inviter_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // repeated .CSOTFPartyInvite.PartyMember members = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .CSOTFPartyInvite.Type type = 5 [default = PENDING_INVITE];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CSOTFPartyInvite_Type_IsValid(val))) {
            _internal_set_type(static_cast<::CSOTFPartyInvite_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSOTFPartyInvite::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSOTFPartyInvite)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 group_id = 1 [(.key_field) = true];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_group_id(), target);
  }

  // optional fixed64 inviter = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_inviter(), target);
  }

  // repeated .CSOTFPartyInvite.PartyMember members = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_members_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_members(i), target, stream);
  }

  // optional .CSOTFPartyInvite.Type type = 5 [default = PENDING_INVITE];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSOTFPartyInvite)
  return target;
}

size_t CSOTFPartyInvite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSOTFPartyInvite)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CSOTFPartyInvite.PartyMember members = 4;
  total_size += 1UL * this->_internal_members_size();
  for (const auto& msg : this->members_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 group_id = 1 [(.key_field) = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_group_id());
    }

    // optional fixed64 inviter = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional .CSOTFPartyInvite.Type type = 5 [default = PENDING_INVITE];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSOTFPartyInvite::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSOTFPartyInvite)
  GOOGLE_DCHECK_NE(&from, this);
  const CSOTFPartyInvite* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSOTFPartyInvite>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSOTFPartyInvite)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSOTFPartyInvite)
    MergeFrom(*source);
  }
}

void CSOTFPartyInvite::MergeFrom(const CSOTFPartyInvite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSOTFPartyInvite)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      group_id_ = from.group_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      inviter_ = from.inviter_;
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSOTFPartyInvite::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSOTFPartyInvite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOTFPartyInvite::CopyFrom(const CSOTFPartyInvite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSOTFPartyInvite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOTFPartyInvite::IsInitialized() const {
  return true;
}

void CSOTFPartyInvite::InternalSwap(CSOTFPartyInvite* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  members_.InternalSwap(&other->members_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSOTFPartyInvite, inviter_)
      + sizeof(CSOTFPartyInvite::inviter_)
      - PROTOBUF_FIELD_OFFSET(CSOTFPartyInvite, group_id_)>(
          reinterpret_cast<char*>(&group_id_),
          reinterpret_cast<char*>(&other->group_id_));
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSOTFPartyInvite::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[89]);
}

// ===================================================================

class CTFLobbyPlayerProto::_Internal {
 public:
  using HasBits = decltype(std::declval<CTFLobbyPlayerProto>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_team(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_connect_state(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_original_party_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_squad_surplus(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_badge_level(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_last_connect_time(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_normalized_rating(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_normalized_uncertainty(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_rank(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_chat_suspension(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

CTFLobbyPlayerProto::CTFLobbyPlayerProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CTFLobbyPlayerProto)
}
CTFLobbyPlayerProto::CTFLobbyPlayerProto(const CTFLobbyPlayerProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&normalized_uncertainty_) -
    reinterpret_cast<char*>(&id_)) + sizeof(normalized_uncertainty_));
  // @@protoc_insertion_point(copy_constructor:CTFLobbyPlayerProto)
}

void CTFLobbyPlayerProto::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&normalized_uncertainty_) -
    reinterpret_cast<char*>(&id_)) + sizeof(normalized_uncertainty_));
}

CTFLobbyPlayerProto::~CTFLobbyPlayerProto() {
  // @@protoc_insertion_point(destructor:CTFLobbyPlayerProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CTFLobbyPlayerProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CTFLobbyPlayerProto::ArenaDtor(void* object) {
  CTFLobbyPlayerProto* _this = reinterpret_cast< CTFLobbyPlayerProto* >(object);
  (void)_this;
}
void CTFLobbyPlayerProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CTFLobbyPlayerProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CTFLobbyPlayerProto::Clear() {
// @@protoc_insertion_point(message_clear_start:CTFLobbyPlayerProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&last_connect_time_) -
        reinterpret_cast<char*>(&id_)) + sizeof(last_connect_time_));
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&squad_surplus_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&normalized_uncertainty_) -
        reinterpret_cast<char*>(&squad_surplus_)) + sizeof(normalized_uncertainty_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CTFLobbyPlayerProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 id = 1 [(.key_field) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional .TF_GC_TEAM team = 3 [default = TF_GC_TEAM_DEFENDERS];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TF_GC_TEAM_IsValid(val))) {
            _internal_set_team(static_cast<::TF_GC_TEAM>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CTFLobbyPlayerProto.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 original_party_id = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_original_party_id(&has_bits);
          original_party_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CTFLobbyPlayerProto.ConnectState connect_state = 13 [default = INVALID];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CTFLobbyPlayerProto_ConnectState_IsValid(val))) {
            _internal_set_connect_state(static_cast<::CTFLobbyPlayerProto_ConnectState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(13, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool squad_surplus = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_squad_surplus(&has_bits);
          squad_surplus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 badge_level = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_badge_level(&has_bits);
          badge_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 last_connect_time = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_last_connect_time(&has_bits);
          last_connect_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CTFLobbyPlayerProto.Type type = 19 [default = INVALID_PLAYER];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CTFLobbyPlayerProto_Type_IsValid(val))) {
            _internal_set_type(static_cast<::CTFLobbyPlayerProto_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(19, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional double normalized_rating = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 161)) {
          _Internal::set_has_normalized_rating(&has_bits);
          normalized_rating_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional uint32 rank = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_rank(&has_bits);
          rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double normalized_uncertainty = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 177)) {
          _Internal::set_has_normalized_uncertainty(&has_bits);
          normalized_uncertainty_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool chat_suspension = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_chat_suspension(&has_bits);
          chat_suspension_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CTFLobbyPlayerProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CTFLobbyPlayerProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 id = 1 [(.key_field) = true];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_id(), target);
  }

  // optional .TF_GC_TEAM team = 3 [default = TF_GC_TEAM_DEFENDERS];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_team(), target);
  }

  // optional string name = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CTFLobbyPlayerProto.name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_name(), target);
  }

  // optional uint64 original_party_id = 12;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(12, this->_internal_original_party_id(), target);
  }

  // optional .CTFLobbyPlayerProto.ConnectState connect_state = 13 [default = INVALID];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      13, this->_internal_connect_state(), target);
  }

  // optional bool squad_surplus = 14;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_squad_surplus(), target);
  }

  // optional uint32 badge_level = 15;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_badge_level(), target);
  }

  // optional uint32 last_connect_time = 17;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_last_connect_time(), target);
  }

  // optional .CTFLobbyPlayerProto.Type type = 19 [default = INVALID_PLAYER];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      19, this->_internal_type(), target);
  }

  // optional double normalized_rating = 20;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(20, this->_internal_normalized_rating(), target);
  }

  // optional uint32 rank = 21;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(21, this->_internal_rank(), target);
  }

  // optional double normalized_uncertainty = 22;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(22, this->_internal_normalized_uncertainty(), target);
  }

  // optional bool chat_suspension = 23;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(23, this->_internal_chat_suspension(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CTFLobbyPlayerProto)
  return target;
}

size_t CTFLobbyPlayerProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CTFLobbyPlayerProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional fixed64 id = 1 [(.key_field) = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional .TF_GC_TEAM team = 3 [default = TF_GC_TEAM_DEFENDERS];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_team());
    }

    // optional .CTFLobbyPlayerProto.ConnectState connect_state = 13 [default = INVALID];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_connect_state());
    }

    // optional uint64 original_party_id = 12;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_original_party_id());
    }

    // optional uint32 rank = 21;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rank());
    }

    // optional uint32 badge_level = 15;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_badge_level());
    }

    // optional uint32 last_connect_time = 17;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_last_connect_time());
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional bool squad_surplus = 14;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool chat_suspension = 23;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 1;
    }

    // optional .CTFLobbyPlayerProto.Type type = 19 [default = INVALID_PLAYER];
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional double normalized_rating = 20;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 8;
    }

    // optional double normalized_uncertainty = 22;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CTFLobbyPlayerProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CTFLobbyPlayerProto)
  GOOGLE_DCHECK_NE(&from, this);
  const CTFLobbyPlayerProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CTFLobbyPlayerProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CTFLobbyPlayerProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CTFLobbyPlayerProto)
    MergeFrom(*source);
  }
}

void CTFLobbyPlayerProto::MergeFrom(const CTFLobbyPlayerProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CTFLobbyPlayerProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      team_ = from.team_;
    }
    if (cached_has_bits & 0x00000008u) {
      connect_state_ = from.connect_state_;
    }
    if (cached_has_bits & 0x00000010u) {
      original_party_id_ = from.original_party_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      rank_ = from.rank_;
    }
    if (cached_has_bits & 0x00000040u) {
      badge_level_ = from.badge_level_;
    }
    if (cached_has_bits & 0x00000080u) {
      last_connect_time_ = from.last_connect_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      squad_surplus_ = from.squad_surplus_;
    }
    if (cached_has_bits & 0x00000200u) {
      chat_suspension_ = from.chat_suspension_;
    }
    if (cached_has_bits & 0x00000400u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000800u) {
      normalized_rating_ = from.normalized_rating_;
    }
    if (cached_has_bits & 0x00001000u) {
      normalized_uncertainty_ = from.normalized_uncertainty_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CTFLobbyPlayerProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CTFLobbyPlayerProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTFLobbyPlayerProto::CopyFrom(const CTFLobbyPlayerProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CTFLobbyPlayerProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTFLobbyPlayerProto::IsInitialized() const {
  return true;
}

void CTFLobbyPlayerProto::InternalSwap(CTFLobbyPlayerProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CTFLobbyPlayerProto, normalized_uncertainty_)
      + sizeof(CTFLobbyPlayerProto::normalized_uncertainty_)
      - PROTOBUF_FIELD_OFFSET(CTFLobbyPlayerProto, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CTFLobbyPlayerProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[90]);
}

// ===================================================================

class CTFLobbyInviteProto::_Internal {
 public:
  using HasBits = decltype(std::declval<CTFLobbyInviteProto>()._has_bits_);
  static void set_has_lobby_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_match_group(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CTFLobbyInviteProto::CTFLobbyInviteProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CTFLobbyInviteProto)
}
CTFLobbyInviteProto::CTFLobbyInviteProto(const CTFLobbyInviteProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&lobby_id_, &from.lobby_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&match_group_) -
    reinterpret_cast<char*>(&lobby_id_)) + sizeof(match_group_));
  // @@protoc_insertion_point(copy_constructor:CTFLobbyInviteProto)
}

void CTFLobbyInviteProto::SharedCtor() {
lobby_id_ = uint64_t{0u};
match_group_ = -1;
}

CTFLobbyInviteProto::~CTFLobbyInviteProto() {
  // @@protoc_insertion_point(destructor:CTFLobbyInviteProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CTFLobbyInviteProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CTFLobbyInviteProto::ArenaDtor(void* object) {
  CTFLobbyInviteProto* _this = reinterpret_cast< CTFLobbyInviteProto* >(object);
  (void)_this;
}
void CTFLobbyInviteProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CTFLobbyInviteProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CTFLobbyInviteProto::Clear() {
// @@protoc_insertion_point(message_clear_start:CTFLobbyInviteProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    lobby_id_ = uint64_t{0u};
    match_group_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CTFLobbyInviteProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 lobby_id = 1 [(.key_field) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_lobby_id(&has_bits);
          lobby_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional .ETFMatchGroup match_group = 2 [default = k_eTFMatchGroup_Invalid];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ETFMatchGroup_IsValid(val))) {
            _internal_set_match_group(static_cast<::ETFMatchGroup>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CTFLobbyInviteProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CTFLobbyInviteProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 lobby_id = 1 [(.key_field) = true];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_lobby_id(), target);
  }

  // optional .ETFMatchGroup match_group = 2 [default = k_eTFMatchGroup_Invalid];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_match_group(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CTFLobbyInviteProto)
  return target;
}

size_t CTFLobbyInviteProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CTFLobbyInviteProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 lobby_id = 1 [(.key_field) = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional .ETFMatchGroup match_group = 2 [default = k_eTFMatchGroup_Invalid];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_match_group());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CTFLobbyInviteProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CTFLobbyInviteProto)
  GOOGLE_DCHECK_NE(&from, this);
  const CTFLobbyInviteProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CTFLobbyInviteProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CTFLobbyInviteProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CTFLobbyInviteProto)
    MergeFrom(*source);
  }
}

void CTFLobbyInviteProto::MergeFrom(const CTFLobbyInviteProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CTFLobbyInviteProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      lobby_id_ = from.lobby_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      match_group_ = from.match_group_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CTFLobbyInviteProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CTFLobbyInviteProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTFLobbyInviteProto::CopyFrom(const CTFLobbyInviteProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CTFLobbyInviteProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTFLobbyInviteProto::IsInitialized() const {
  return true;
}

void CTFLobbyInviteProto::InternalSwap(CTFLobbyInviteProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(lobby_id_, other->lobby_id_);
  swap(match_group_, other->match_group_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CTFLobbyInviteProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[91]);
}

// ===================================================================

class CSOTFGameServerLobby::_Internal {
 public:
  using HasBits = decltype(std::declval<CSOTFGameServerLobby>()._has_bits_);
  static void set_has_lobby_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_server_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_connect(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_game_state(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_initial_average_mm_rating(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_mannup_tour_name(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_map_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mission_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_match_group(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_formed_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_late_join_eligible(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_fixed_match_size(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_is_war_match(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_lobby_mm_version(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

CSOTFGameServerLobby::CSOTFGameServerLobby(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  members_(arena),
  next_maps_for_vote_(arena),
  pending_members_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSOTFGameServerLobby)
}
CSOTFGameServerLobby::CSOTFGameServerLobby(const CSOTFGameServerLobby& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      members_(from.members_),
      next_maps_for_vote_(from.next_maps_for_vote_),
      pending_members_(from.pending_members_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  connect_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_connect()) {
    connect_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_connect(), 
      GetArenaForAllocation());
  }
  map_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_map_name()) {
    map_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_map_name(), 
      GetArenaForAllocation());
  }
  mission_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_mission_name()) {
    mission_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mission_name(), 
      GetArenaForAllocation());
  }
  mannup_tour_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_mannup_tour_name()) {
    mannup_tour_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mannup_tour_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&lobby_id_, &from.lobby_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_war_match_) -
    reinterpret_cast<char*>(&lobby_id_)) + sizeof(is_war_match_));
  // @@protoc_insertion_point(copy_constructor:CSOTFGameServerLobby)
}

void CSOTFGameServerLobby::SharedCtor() {
connect_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
map_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
mission_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
mannup_tour_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&lobby_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_war_match_) -
    reinterpret_cast<char*>(&lobby_id_)) + sizeof(is_war_match_));
}

CSOTFGameServerLobby::~CSOTFGameServerLobby() {
  // @@protoc_insertion_point(destructor:CSOTFGameServerLobby)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSOTFGameServerLobby::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  connect_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  map_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mission_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mannup_tour_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CSOTFGameServerLobby::ArenaDtor(void* object) {
  CSOTFGameServerLobby* _this = reinterpret_cast< CSOTFGameServerLobby* >(object);
  (void)_this;
}
void CSOTFGameServerLobby::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSOTFGameServerLobby::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSOTFGameServerLobby::Clear() {
// @@protoc_insertion_point(message_clear_start:CSOTFGameServerLobby)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  members_.Clear();
  next_maps_for_vote_.Clear();
  pending_members_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      connect_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      map_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      mission_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      mannup_tour_name_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&lobby_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&game_state_) -
        reinterpret_cast<char*>(&lobby_id_)) + sizeof(game_state_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&lobby_mm_version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fixed_match_size_) -
        reinterpret_cast<char*>(&lobby_mm_version_)) + sizeof(fixed_match_size_));
  }
  is_war_match_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSOTFGameServerLobby::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 lobby_id = 1 [(.key_field) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_lobby_id(&has_bits);
          lobby_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CTFLobbyPlayerProto members = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .CSOTFGameServerLobby.State state = 4 [default = UNKNOWN];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CSOTFGameServerLobby_State_IsValid(val))) {
            _internal_set_state(static_cast<::CSOTFGameServerLobby_State>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string connect = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_connect();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSOTFGameServerLobby.connect");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 server_id = 6 [default = 0];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_server_id(&has_bits);
          server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional .TF_GC_GameState game_state = 22 [default = TF_GC_GAMESTATE_STATE_INIT];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TF_GC_GameState_IsValid(val))) {
            _internal_set_game_state(static_cast<::TF_GC_GameState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(22, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint64 match_id = 30 [default = 0];
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_match_id(&has_bits);
          match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double initial_average_mm_rating = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 1)) {
          _Internal::set_has_initial_average_mm_rating(&has_bits);
          initial_average_mm_rating_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional uint32 formed_time = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_formed_time(&has_bits);
          formed_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string map_name = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_map_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSOTFGameServerLobby.map_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string mission_name = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_mission_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSOTFGameServerLobby.mission_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 match_group = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_match_group(&has_bits);
          match_group_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string mannup_tour_name = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_mannup_tour_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSOTFGameServerLobby.mannup_tour_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 flags = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_flags(&has_bits);
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool late_join_eligible = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_late_join_eligible(&has_bits);
          late_join_eligible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 fixed_match_size = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_fixed_match_size(&has_bits);
          fixed_match_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CSOTFGameServerLobby.WarMatch is_war_match = 46 [default = NOPE];
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CSOTFGameServerLobby_WarMatch_IsValid(val))) {
            _internal_set_is_war_match(static_cast<::CSOTFGameServerLobby_WarMatch>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(46, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated uint32 next_maps_for_vote = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_next_maps_for_vote(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<376>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_next_maps_for_vote(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 lobby_mm_version = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_lobby_mm_version(&has_bits);
          lobby_mm_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CTFLobbyPlayerProto pending_members = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_pending_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<394>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSOTFGameServerLobby::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSOTFGameServerLobby)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 lobby_id = 1 [(.key_field) = true];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_lobby_id(), target);
  }

  // repeated .CTFLobbyPlayerProto members = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_members_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_members(i), target, stream);
  }

  // optional .CSOTFGameServerLobby.State state = 4 [default = UNKNOWN];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_state(), target);
  }

  // optional string connect = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_connect().data(), static_cast<int>(this->_internal_connect().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSOTFGameServerLobby.connect");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_connect(), target);
  }

  // optional fixed64 server_id = 6 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(6, this->_internal_server_id(), target);
  }

  // optional .TF_GC_GameState game_state = 22 [default = TF_GC_GAMESTATE_STATE_INIT];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      22, this->_internal_game_state(), target);
  }

  // optional uint64 match_id = 30 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(30, this->_internal_match_id(), target);
  }

  // optional double initial_average_mm_rating = 32;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(32, this->_internal_initial_average_mm_rating(), target);
  }

  // optional uint32 formed_time = 36;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(36, this->_internal_formed_time(), target);
  }

  // optional string map_name = 38;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_map_name().data(), static_cast<int>(this->_internal_map_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSOTFGameServerLobby.map_name");
    target = stream->WriteStringMaybeAliased(
        38, this->_internal_map_name(), target);
  }

  // optional string mission_name = 39;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_mission_name().data(), static_cast<int>(this->_internal_mission_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSOTFGameServerLobby.mission_name");
    target = stream->WriteStringMaybeAliased(
        39, this->_internal_mission_name(), target);
  }

  // optional uint32 match_group = 41;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(41, this->_internal_match_group(), target);
  }

  // optional string mannup_tour_name = 42;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_mannup_tour_name().data(), static_cast<int>(this->_internal_mannup_tour_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSOTFGameServerLobby.mannup_tour_name");
    target = stream->WriteStringMaybeAliased(
        42, this->_internal_mannup_tour_name(), target);
  }

  // optional uint32 flags = 43;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(43, this->_internal_flags(), target);
  }

  // optional bool late_join_eligible = 44;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(44, this->_internal_late_join_eligible(), target);
  }

  // optional uint32 fixed_match_size = 45;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(45, this->_internal_fixed_match_size(), target);
  }

  // optional .CSOTFGameServerLobby.WarMatch is_war_match = 46 [default = NOPE];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      46, this->_internal_is_war_match(), target);
  }

  // repeated uint32 next_maps_for_vote = 47;
  for (int i = 0, n = this->_internal_next_maps_for_vote_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(47, this->_internal_next_maps_for_vote(i), target);
  }

  // optional uint32 lobby_mm_version = 48;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(48, this->_internal_lobby_mm_version(), target);
  }

  // repeated .CTFLobbyPlayerProto pending_members = 49;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pending_members_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(49, this->_internal_pending_members(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSOTFGameServerLobby)
  return target;
}

size_t CSOTFGameServerLobby::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSOTFGameServerLobby)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CTFLobbyPlayerProto members = 2;
  total_size += 1UL * this->_internal_members_size();
  for (const auto& msg : this->members_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 next_maps_for_vote = 47;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->next_maps_for_vote_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_next_maps_for_vote_size());
    total_size += data_size;
  }

  // repeated .CTFLobbyPlayerProto pending_members = 49;
  total_size += 2UL * this->_internal_pending_members_size();
  for (const auto& msg : this->pending_members_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string connect = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_connect());
    }

    // optional string map_name = 38;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_map_name());
    }

    // optional string mission_name = 39;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mission_name());
    }

    // optional string mannup_tour_name = 42;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mannup_tour_name());
    }

    // optional uint64 lobby_id = 1 [(.key_field) = true];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_lobby_id());
    }

    // optional fixed64 server_id = 6 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional .CSOTFGameServerLobby.State state = 4 [default = UNKNOWN];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
    }

    // optional .TF_GC_GameState game_state = 22 [default = TF_GC_GAMESTATE_STATE_INIT];
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_game_state());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 lobby_mm_version = 48;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_lobby_mm_version());
    }

    // optional uint64 match_id = 30 [default = 0];
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_match_id());
    }

    // optional double initial_average_mm_rating = 32;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 8;
    }

    // optional uint32 formed_time = 36;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_formed_time());
    }

    // optional uint32 match_group = 41;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_match_group());
    }

    // optional uint32 flags = 43;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_flags());
    }

    // optional bool late_join_eligible = 44;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 1;
    }

    // optional uint32 fixed_match_size = 45;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_fixed_match_size());
    }

  }
  // optional .CSOTFGameServerLobby.WarMatch is_war_match = 46 [default = NOPE];
  if (cached_has_bits & 0x00010000u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_is_war_match());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSOTFGameServerLobby::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSOTFGameServerLobby)
  GOOGLE_DCHECK_NE(&from, this);
  const CSOTFGameServerLobby* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSOTFGameServerLobby>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSOTFGameServerLobby)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSOTFGameServerLobby)
    MergeFrom(*source);
  }
}

void CSOTFGameServerLobby::MergeFrom(const CSOTFGameServerLobby& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSOTFGameServerLobby)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
  next_maps_for_vote_.MergeFrom(from.next_maps_for_vote_);
  pending_members_.MergeFrom(from.pending_members_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_connect(from._internal_connect());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_map_name(from._internal_map_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_mission_name(from._internal_mission_name());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_mannup_tour_name(from._internal_mannup_tour_name());
    }
    if (cached_has_bits & 0x00000010u) {
      lobby_id_ = from.lobby_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      server_id_ = from.server_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      state_ = from.state_;
    }
    if (cached_has_bits & 0x00000080u) {
      game_state_ = from.game_state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      lobby_mm_version_ = from.lobby_mm_version_;
    }
    if (cached_has_bits & 0x00000200u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000400u) {
      initial_average_mm_rating_ = from.initial_average_mm_rating_;
    }
    if (cached_has_bits & 0x00000800u) {
      formed_time_ = from.formed_time_;
    }
    if (cached_has_bits & 0x00001000u) {
      match_group_ = from.match_group_;
    }
    if (cached_has_bits & 0x00002000u) {
      flags_ = from.flags_;
    }
    if (cached_has_bits & 0x00004000u) {
      late_join_eligible_ = from.late_join_eligible_;
    }
    if (cached_has_bits & 0x00008000u) {
      fixed_match_size_ = from.fixed_match_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    _internal_set_is_war_match(from._internal_is_war_match());
  }
}

void CSOTFGameServerLobby::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSOTFGameServerLobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOTFGameServerLobby::CopyFrom(const CSOTFGameServerLobby& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSOTFGameServerLobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOTFGameServerLobby::IsInitialized() const {
  return true;
}

void CSOTFGameServerLobby::InternalSwap(CSOTFGameServerLobby* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  members_.InternalSwap(&other->members_);
  next_maps_for_vote_.InternalSwap(&other->next_maps_for_vote_);
  pending_members_.InternalSwap(&other->pending_members_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &connect_, GetArenaForAllocation(),
      &other->connect_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &map_name_, GetArenaForAllocation(),
      &other->map_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &mission_name_, GetArenaForAllocation(),
      &other->mission_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &mannup_tour_name_, GetArenaForAllocation(),
      &other->mannup_tour_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSOTFGameServerLobby, is_war_match_)
      + sizeof(CSOTFGameServerLobby::is_war_match_)
      - PROTOBUF_FIELD_OFFSET(CSOTFGameServerLobby, lobby_id_)>(
          reinterpret_cast<char*>(&lobby_id_),
          reinterpret_cast<char*>(&other->lobby_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSOTFGameServerLobby::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[92]);
}

// ===================================================================

class CMsgExitMatchmaking::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgExitMatchmaking>()._has_bits_);
  static void set_has_explicit_abandon(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_party_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_lobby_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgExitMatchmaking::CMsgExitMatchmaking(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgExitMatchmaking)
}
CMsgExitMatchmaking::CMsgExitMatchmaking(const CMsgExitMatchmaking& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&party_id_, &from.party_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&explicit_abandon_) -
    reinterpret_cast<char*>(&party_id_)) + sizeof(explicit_abandon_));
  // @@protoc_insertion_point(copy_constructor:CMsgExitMatchmaking)
}

void CMsgExitMatchmaking::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&party_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&explicit_abandon_) -
    reinterpret_cast<char*>(&party_id_)) + sizeof(explicit_abandon_));
}

CMsgExitMatchmaking::~CMsgExitMatchmaking() {
  // @@protoc_insertion_point(destructor:CMsgExitMatchmaking)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgExitMatchmaking::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgExitMatchmaking::ArenaDtor(void* object) {
  CMsgExitMatchmaking* _this = reinterpret_cast< CMsgExitMatchmaking* >(object);
  (void)_this;
}
void CMsgExitMatchmaking::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgExitMatchmaking::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgExitMatchmaking::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgExitMatchmaking)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&party_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&explicit_abandon_) -
        reinterpret_cast<char*>(&party_id_)) + sizeof(explicit_abandon_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgExitMatchmaking::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool explicit_abandon = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_explicit_abandon(&has_bits);
          explicit_abandon_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 party_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_party_id(&has_bits);
          party_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 lobby_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_lobby_id(&has_bits);
          lobby_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgExitMatchmaking::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgExitMatchmaking)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool explicit_abandon = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_explicit_abandon(), target);
  }

  // optional uint64 party_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_party_id(), target);
  }

  // optional uint64 lobby_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_lobby_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgExitMatchmaking)
  return target;
}

size_t CMsgExitMatchmaking::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgExitMatchmaking)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 party_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_party_id());
    }

    // optional uint64 lobby_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_lobby_id());
    }

    // optional bool explicit_abandon = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgExitMatchmaking::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgExitMatchmaking)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgExitMatchmaking* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgExitMatchmaking>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgExitMatchmaking)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgExitMatchmaking)
    MergeFrom(*source);
  }
}

void CMsgExitMatchmaking::MergeFrom(const CMsgExitMatchmaking& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgExitMatchmaking)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      party_id_ = from.party_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      lobby_id_ = from.lobby_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      explicit_abandon_ = from.explicit_abandon_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgExitMatchmaking::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgExitMatchmaking)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgExitMatchmaking::CopyFrom(const CMsgExitMatchmaking& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgExitMatchmaking)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgExitMatchmaking::IsInitialized() const {
  return true;
}

void CMsgExitMatchmaking::InternalSwap(CMsgExitMatchmaking* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgExitMatchmaking, explicit_abandon_)
      + sizeof(CMsgExitMatchmaking::explicit_abandon_)
      - PROTOBUF_FIELD_OFFSET(CMsgExitMatchmaking, party_id_)>(
          reinterpret_cast<char*>(&party_id_),
          reinterpret_cast<char*>(&other->party_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgExitMatchmaking::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[93]);
}

// ===================================================================

class CMsgAcceptLobbyInvite::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgAcceptLobbyInvite>()._has_bits_);
  static void set_has_invited_lobby_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_abandoning_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgAcceptLobbyInvite::CMsgAcceptLobbyInvite(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  abandoning_invite_lobby_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgAcceptLobbyInvite)
}
CMsgAcceptLobbyInvite::CMsgAcceptLobbyInvite(const CMsgAcceptLobbyInvite& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      abandoning_invite_lobby_ids_(from.abandoning_invite_lobby_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&invited_lobby_id_, &from.invited_lobby_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&abandoning_match_id_) -
    reinterpret_cast<char*>(&invited_lobby_id_)) + sizeof(abandoning_match_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgAcceptLobbyInvite)
}

void CMsgAcceptLobbyInvite::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&invited_lobby_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&abandoning_match_id_) -
    reinterpret_cast<char*>(&invited_lobby_id_)) + sizeof(abandoning_match_id_));
}

CMsgAcceptLobbyInvite::~CMsgAcceptLobbyInvite() {
  // @@protoc_insertion_point(destructor:CMsgAcceptLobbyInvite)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgAcceptLobbyInvite::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgAcceptLobbyInvite::ArenaDtor(void* object) {
  CMsgAcceptLobbyInvite* _this = reinterpret_cast< CMsgAcceptLobbyInvite* >(object);
  (void)_this;
}
void CMsgAcceptLobbyInvite::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgAcceptLobbyInvite::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgAcceptLobbyInvite::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgAcceptLobbyInvite)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  abandoning_invite_lobby_ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&invited_lobby_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&abandoning_match_id_) -
        reinterpret_cast<char*>(&invited_lobby_id_)) + sizeof(abandoning_match_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgAcceptLobbyInvite::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 invited_lobby_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_invited_lobby_id(&has_bits);
          invited_lobby_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 abandoning_match_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_abandoning_match_id(&has_bits);
          abandoning_match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 abandoning_invite_lobby_ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_abandoning_invite_lobby_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_abandoning_invite_lobby_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgAcceptLobbyInvite::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgAcceptLobbyInvite)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 invited_lobby_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_invited_lobby_id(), target);
  }

  // optional uint64 abandoning_match_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_abandoning_match_id(), target);
  }

  // repeated uint64 abandoning_invite_lobby_ids = 3;
  for (int i = 0, n = this->_internal_abandoning_invite_lobby_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_abandoning_invite_lobby_ids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgAcceptLobbyInvite)
  return target;
}

size_t CMsgAcceptLobbyInvite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgAcceptLobbyInvite)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 abandoning_invite_lobby_ids = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->abandoning_invite_lobby_ids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_abandoning_invite_lobby_ids_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 invited_lobby_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_invited_lobby_id());
    }

    // optional uint64 abandoning_match_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_abandoning_match_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgAcceptLobbyInvite::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgAcceptLobbyInvite)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgAcceptLobbyInvite* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgAcceptLobbyInvite>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgAcceptLobbyInvite)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgAcceptLobbyInvite)
    MergeFrom(*source);
  }
}

void CMsgAcceptLobbyInvite::MergeFrom(const CMsgAcceptLobbyInvite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgAcceptLobbyInvite)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  abandoning_invite_lobby_ids_.MergeFrom(from.abandoning_invite_lobby_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      invited_lobby_id_ = from.invited_lobby_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      abandoning_match_id_ = from.abandoning_match_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgAcceptLobbyInvite::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgAcceptLobbyInvite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAcceptLobbyInvite::CopyFrom(const CMsgAcceptLobbyInvite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgAcceptLobbyInvite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAcceptLobbyInvite::IsInitialized() const {
  return true;
}

void CMsgAcceptLobbyInvite::InternalSwap(CMsgAcceptLobbyInvite* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  abandoning_invite_lobby_ids_.InternalSwap(&other->abandoning_invite_lobby_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgAcceptLobbyInvite, abandoning_match_id_)
      + sizeof(CMsgAcceptLobbyInvite::abandoning_match_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgAcceptLobbyInvite, invited_lobby_id_)>(
          reinterpret_cast<char*>(&invited_lobby_id_),
          reinterpret_cast<char*>(&other->invited_lobby_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgAcceptLobbyInvite::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[94]);
}

// ===================================================================

class CMsgAcceptLobbyInviteReply::_Internal {
 public:
};

CMsgAcceptLobbyInviteReply::CMsgAcceptLobbyInviteReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgAcceptLobbyInviteReply)
}
CMsgAcceptLobbyInviteReply::CMsgAcceptLobbyInviteReply(const CMsgAcceptLobbyInviteReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgAcceptLobbyInviteReply)
}

void CMsgAcceptLobbyInviteReply::SharedCtor() {
}

CMsgAcceptLobbyInviteReply::~CMsgAcceptLobbyInviteReply() {
  // @@protoc_insertion_point(destructor:CMsgAcceptLobbyInviteReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgAcceptLobbyInviteReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgAcceptLobbyInviteReply::ArenaDtor(void* object) {
  CMsgAcceptLobbyInviteReply* _this = reinterpret_cast< CMsgAcceptLobbyInviteReply* >(object);
  (void)_this;
}
void CMsgAcceptLobbyInviteReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgAcceptLobbyInviteReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgAcceptLobbyInviteReply::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgAcceptLobbyInviteReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgAcceptLobbyInviteReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgAcceptLobbyInviteReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgAcceptLobbyInviteReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgAcceptLobbyInviteReply)
  return target;
}

size_t CMsgAcceptLobbyInviteReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgAcceptLobbyInviteReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgAcceptLobbyInviteReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgAcceptLobbyInviteReply)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgAcceptLobbyInviteReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgAcceptLobbyInviteReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgAcceptLobbyInviteReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgAcceptLobbyInviteReply)
    MergeFrom(*source);
  }
}

void CMsgAcceptLobbyInviteReply::MergeFrom(const CMsgAcceptLobbyInviteReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgAcceptLobbyInviteReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgAcceptLobbyInviteReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgAcceptLobbyInviteReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAcceptLobbyInviteReply::CopyFrom(const CMsgAcceptLobbyInviteReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgAcceptLobbyInviteReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAcceptLobbyInviteReply::IsInitialized() const {
  return true;
}

void CMsgAcceptLobbyInviteReply::InternalSwap(CMsgAcceptLobbyInviteReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgAcceptLobbyInviteReply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[95]);
}

// ===================================================================

class CMsgMatchmakingSearchCountRequest::_Internal {
 public:
};

CMsgMatchmakingSearchCountRequest::CMsgMatchmakingSearchCountRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgMatchmakingSearchCountRequest)
}
CMsgMatchmakingSearchCountRequest::CMsgMatchmakingSearchCountRequest(const CMsgMatchmakingSearchCountRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgMatchmakingSearchCountRequest)
}

void CMsgMatchmakingSearchCountRequest::SharedCtor() {
}

CMsgMatchmakingSearchCountRequest::~CMsgMatchmakingSearchCountRequest() {
  // @@protoc_insertion_point(destructor:CMsgMatchmakingSearchCountRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgMatchmakingSearchCountRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgMatchmakingSearchCountRequest::ArenaDtor(void* object) {
  CMsgMatchmakingSearchCountRequest* _this = reinterpret_cast< CMsgMatchmakingSearchCountRequest* >(object);
  (void)_this;
}
void CMsgMatchmakingSearchCountRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgMatchmakingSearchCountRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgMatchmakingSearchCountRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgMatchmakingSearchCountRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgMatchmakingSearchCountRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgMatchmakingSearchCountRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgMatchmakingSearchCountRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgMatchmakingSearchCountRequest)
  return target;
}

size_t CMsgMatchmakingSearchCountRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgMatchmakingSearchCountRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgMatchmakingSearchCountRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgMatchmakingSearchCountRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgMatchmakingSearchCountRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgMatchmakingSearchCountRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgMatchmakingSearchCountRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgMatchmakingSearchCountRequest)
    MergeFrom(*source);
  }
}

void CMsgMatchmakingSearchCountRequest::MergeFrom(const CMsgMatchmakingSearchCountRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgMatchmakingSearchCountRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgMatchmakingSearchCountRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgMatchmakingSearchCountRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgMatchmakingSearchCountRequest::CopyFrom(const CMsgMatchmakingSearchCountRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgMatchmakingSearchCountRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMatchmakingSearchCountRequest::IsInitialized() const {
  return true;
}

void CMsgMatchmakingSearchCountRequest::InternalSwap(CMsgMatchmakingSearchCountRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgMatchmakingSearchCountRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[96]);
}

// ===================================================================

class CMsgMatchmakingSearchCountResponse::_Internal {
 public:
};

CMsgMatchmakingSearchCountResponse::CMsgMatchmakingSearchCountResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  searching_players_by_group_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgMatchmakingSearchCountResponse)
}
CMsgMatchmakingSearchCountResponse::CMsgMatchmakingSearchCountResponse(const CMsgMatchmakingSearchCountResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      searching_players_by_group_(from.searching_players_by_group_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgMatchmakingSearchCountResponse)
}

void CMsgMatchmakingSearchCountResponse::SharedCtor() {
}

CMsgMatchmakingSearchCountResponse::~CMsgMatchmakingSearchCountResponse() {
  // @@protoc_insertion_point(destructor:CMsgMatchmakingSearchCountResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgMatchmakingSearchCountResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgMatchmakingSearchCountResponse::ArenaDtor(void* object) {
  CMsgMatchmakingSearchCountResponse* _this = reinterpret_cast< CMsgMatchmakingSearchCountResponse* >(object);
  (void)_this;
}
void CMsgMatchmakingSearchCountResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgMatchmakingSearchCountResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgMatchmakingSearchCountResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgMatchmakingSearchCountResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  searching_players_by_group_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgMatchmakingSearchCountResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 searching_players_by_group = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_searching_players_by_group(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_searching_players_by_group(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgMatchmakingSearchCountResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgMatchmakingSearchCountResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 searching_players_by_group = 1;
  for (int i = 0, n = this->_internal_searching_players_by_group_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_searching_players_by_group(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgMatchmakingSearchCountResponse)
  return target;
}

size_t CMsgMatchmakingSearchCountResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgMatchmakingSearchCountResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 searching_players_by_group = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->searching_players_by_group_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_searching_players_by_group_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgMatchmakingSearchCountResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgMatchmakingSearchCountResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgMatchmakingSearchCountResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgMatchmakingSearchCountResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgMatchmakingSearchCountResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgMatchmakingSearchCountResponse)
    MergeFrom(*source);
  }
}

void CMsgMatchmakingSearchCountResponse::MergeFrom(const CMsgMatchmakingSearchCountResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgMatchmakingSearchCountResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  searching_players_by_group_.MergeFrom(from.searching_players_by_group_);
}

void CMsgMatchmakingSearchCountResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgMatchmakingSearchCountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgMatchmakingSearchCountResponse::CopyFrom(const CMsgMatchmakingSearchCountResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgMatchmakingSearchCountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMatchmakingSearchCountResponse::IsInitialized() const {
  return true;
}

void CMsgMatchmakingSearchCountResponse::InternalSwap(CMsgMatchmakingSearchCountResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  searching_players_by_group_.InternalSwap(&other->searching_players_by_group_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgMatchmakingSearchCountResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[97]);
}

// ===================================================================

class CMsgKickedFromMatchmakingQueue::_Internal {
 public:
};

CMsgKickedFromMatchmakingQueue::CMsgKickedFromMatchmakingQueue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgKickedFromMatchmakingQueue)
}
CMsgKickedFromMatchmakingQueue::CMsgKickedFromMatchmakingQueue(const CMsgKickedFromMatchmakingQueue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgKickedFromMatchmakingQueue)
}

void CMsgKickedFromMatchmakingQueue::SharedCtor() {
}

CMsgKickedFromMatchmakingQueue::~CMsgKickedFromMatchmakingQueue() {
  // @@protoc_insertion_point(destructor:CMsgKickedFromMatchmakingQueue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgKickedFromMatchmakingQueue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgKickedFromMatchmakingQueue::ArenaDtor(void* object) {
  CMsgKickedFromMatchmakingQueue* _this = reinterpret_cast< CMsgKickedFromMatchmakingQueue* >(object);
  (void)_this;
}
void CMsgKickedFromMatchmakingQueue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgKickedFromMatchmakingQueue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgKickedFromMatchmakingQueue::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgKickedFromMatchmakingQueue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgKickedFromMatchmakingQueue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgKickedFromMatchmakingQueue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgKickedFromMatchmakingQueue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgKickedFromMatchmakingQueue)
  return target;
}

size_t CMsgKickedFromMatchmakingQueue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgKickedFromMatchmakingQueue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgKickedFromMatchmakingQueue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgKickedFromMatchmakingQueue)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgKickedFromMatchmakingQueue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgKickedFromMatchmakingQueue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgKickedFromMatchmakingQueue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgKickedFromMatchmakingQueue)
    MergeFrom(*source);
  }
}

void CMsgKickedFromMatchmakingQueue::MergeFrom(const CMsgKickedFromMatchmakingQueue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgKickedFromMatchmakingQueue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgKickedFromMatchmakingQueue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgKickedFromMatchmakingQueue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgKickedFromMatchmakingQueue::CopyFrom(const CMsgKickedFromMatchmakingQueue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgKickedFromMatchmakingQueue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgKickedFromMatchmakingQueue::IsInitialized() const {
  return true;
}

void CMsgKickedFromMatchmakingQueue::InternalSwap(CMsgKickedFromMatchmakingQueue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgKickedFromMatchmakingQueue::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[98]);
}

// ===================================================================

class CMsgGameServerMatchmakingStatus_Player::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGameServerMatchmakingStatus_Player>()._has_bits_);
  static void set_has_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_connect_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGameServerMatchmakingStatus_Player::CMsgGameServerMatchmakingStatus_Player(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGameServerMatchmakingStatus.Player)
}
CMsgGameServerMatchmakingStatus_Player::CMsgGameServerMatchmakingStatus_Player(const CMsgGameServerMatchmakingStatus_Player& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steam_id_, &from.steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&connect_state_) -
    reinterpret_cast<char*>(&steam_id_)) + sizeof(connect_state_));
  // @@protoc_insertion_point(copy_constructor:CMsgGameServerMatchmakingStatus.Player)
}

void CMsgGameServerMatchmakingStatus_Player::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steam_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&connect_state_) -
    reinterpret_cast<char*>(&steam_id_)) + sizeof(connect_state_));
}

CMsgGameServerMatchmakingStatus_Player::~CMsgGameServerMatchmakingStatus_Player() {
  // @@protoc_insertion_point(destructor:CMsgGameServerMatchmakingStatus.Player)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGameServerMatchmakingStatus_Player::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGameServerMatchmakingStatus_Player::ArenaDtor(void* object) {
  CMsgGameServerMatchmakingStatus_Player* _this = reinterpret_cast< CMsgGameServerMatchmakingStatus_Player* >(object);
  (void)_this;
}
void CMsgGameServerMatchmakingStatus_Player::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGameServerMatchmakingStatus_Player::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGameServerMatchmakingStatus_Player::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGameServerMatchmakingStatus.Player)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&connect_state_) -
        reinterpret_cast<char*>(&steam_id_)) + sizeof(connect_state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGameServerMatchmakingStatus_Player::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steam_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_steam_id(&has_bits);
          steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional .CMsgGameServerMatchmakingStatus.PlayerConnectState connect_state = 2 [default = INVALID];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgGameServerMatchmakingStatus_PlayerConnectState_IsValid(val))) {
            _internal_set_connect_state(static_cast<::CMsgGameServerMatchmakingStatus_PlayerConnectState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGameServerMatchmakingStatus_Player::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGameServerMatchmakingStatus.Player)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steam_id(), target);
  }

  // optional .CMsgGameServerMatchmakingStatus.PlayerConnectState connect_state = 2 [default = INVALID];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_connect_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGameServerMatchmakingStatus.Player)
  return target;
}

size_t CMsgGameServerMatchmakingStatus_Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGameServerMatchmakingStatus.Player)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 steam_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional .CMsgGameServerMatchmakingStatus.PlayerConnectState connect_state = 2 [default = INVALID];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_connect_state());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGameServerMatchmakingStatus_Player::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGameServerMatchmakingStatus.Player)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGameServerMatchmakingStatus_Player* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGameServerMatchmakingStatus_Player>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGameServerMatchmakingStatus.Player)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGameServerMatchmakingStatus.Player)
    MergeFrom(*source);
  }
}

void CMsgGameServerMatchmakingStatus_Player::MergeFrom(const CMsgGameServerMatchmakingStatus_Player& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGameServerMatchmakingStatus.Player)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      connect_state_ = from.connect_state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGameServerMatchmakingStatus_Player::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGameServerMatchmakingStatus.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameServerMatchmakingStatus_Player::CopyFrom(const CMsgGameServerMatchmakingStatus_Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGameServerMatchmakingStatus.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameServerMatchmakingStatus_Player::IsInitialized() const {
  return true;
}

void CMsgGameServerMatchmakingStatus_Player::InternalSwap(CMsgGameServerMatchmakingStatus_Player* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGameServerMatchmakingStatus_Player, connect_state_)
      + sizeof(CMsgGameServerMatchmakingStatus_Player::connect_state_)
      - PROTOBUF_FIELD_OFFSET(CMsgGameServerMatchmakingStatus_Player, steam_id_)>(
          reinterpret_cast<char*>(&steam_id_),
          reinterpret_cast<char*>(&other->steam_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGameServerMatchmakingStatus_Player::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[99]);
}

// ===================================================================

class CMsgGameServerMatchmakingStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGameServerMatchmakingStatus>()._has_bits_);
  static void set_has_server_version(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_matchmaking_state(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_map(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tags(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_bot_count(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_num_spectators(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_max_players(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_slots_free(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_server_region(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_server_loadavg(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_server_trusted(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_server_dedicated(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_strict(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_game_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_event(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_mvm_wave(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_mvm_credits_acquired(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_mvm_credits_dropped(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_match_group(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_lobby_mm_version(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
};

CMsgGameServerMatchmakingStatus::CMsgGameServerMatchmakingStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  players_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGameServerMatchmakingStatus)
}
CMsgGameServerMatchmakingStatus::CMsgGameServerMatchmakingStatus(const CMsgGameServerMatchmakingStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      players_(from.players_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  map_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_map()) {
    map_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_map(), 
      GetArenaForAllocation());
  }
  tags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_tags()) {
    tags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tags(), 
      GetArenaForAllocation());
  }
  ::memcpy(&matchmaking_state_, &from.matchmaking_state_,
    static_cast<size_t>(reinterpret_cast<char*>(&match_group_) -
    reinterpret_cast<char*>(&matchmaking_state_)) + sizeof(match_group_));
  // @@protoc_insertion_point(copy_constructor:CMsgGameServerMatchmakingStatus)
}

void CMsgGameServerMatchmakingStatus::SharedCtor() {
map_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
tags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&matchmaking_state_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&lobby_mm_version_) -
    reinterpret_cast<char*>(&matchmaking_state_)) + sizeof(lobby_mm_version_));
server_version_ = 1225u;
match_group_ = -1;
}

CMsgGameServerMatchmakingStatus::~CMsgGameServerMatchmakingStatus() {
  // @@protoc_insertion_point(destructor:CMsgGameServerMatchmakingStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGameServerMatchmakingStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  map_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tags_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgGameServerMatchmakingStatus::ArenaDtor(void* object) {
  CMsgGameServerMatchmakingStatus* _this = reinterpret_cast< CMsgGameServerMatchmakingStatus* >(object);
  (void)_this;
}
void CMsgGameServerMatchmakingStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGameServerMatchmakingStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGameServerMatchmakingStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGameServerMatchmakingStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      map_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      tags_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&matchmaking_state_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&server_region_) -
        reinterpret_cast<char*>(&matchmaking_state_)) + sizeof(server_region_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&server_loadavg_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mvm_credits_acquired_) -
        reinterpret_cast<char*>(&server_loadavg_)) + sizeof(mvm_credits_acquired_));
  }
  if (cached_has_bits & 0x000f0000u) {
    ::memset(&mvm_credits_dropped_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lobby_mm_version_) -
        reinterpret_cast<char*>(&mvm_credits_dropped_)) + sizeof(lobby_mm_version_));
    server_version_ = 1225u;
    match_group_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGameServerMatchmakingStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .ServerMatchmakingState matchmaking_state = 1 [default = ServerMatchmakingState_INVALID];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ServerMatchmakingState_IsValid(val))) {
            _internal_set_matchmaking_state(static_cast<::ServerMatchmakingState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string map = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_map();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGameServerMatchmakingStatus.map");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string tags = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_tags();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGameServerMatchmakingStatus.tags");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 bot_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_bot_count(&has_bits);
          bot_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 num_spectators = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_num_spectators(&has_bits);
          num_spectators_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_players = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_max_players(&has_bits);
          max_players_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 slots_free = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_slots_free(&has_bits);
          slots_free_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 server_region = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_server_region(&has_bits);
          server_region_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float server_loadavg = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_server_loadavg(&has_bits);
          server_loadavg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool server_trusted = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_server_trusted(&has_bits);
          server_trusted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool server_dedicated = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_server_dedicated(&has_bits);
          server_dedicated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgGameServerMatchmakingStatus.Player players = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .TF_GC_GameState game_state = 14 [default = TF_GC_GAMESTATE_STATE_INIT];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TF_GC_GameState_IsValid(val))) {
            _internal_set_game_state(static_cast<::TF_GC_GameState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(14, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .CMsgGameServerMatchmakingStatus.Event event = 15 [default = None];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgGameServerMatchmakingStatus_Event_IsValid(val))) {
            _internal_set_event(static_cast<::CMsgGameServerMatchmakingStatus_Event>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(15, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 server_version = 16 [default = 1225];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_server_version(&has_bits);
          server_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 strict = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_strict(&has_bits);
          strict_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 mvm_wave = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_mvm_wave(&has_bits);
          mvm_wave_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 mvm_credits_acquired = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_mvm_credits_acquired(&has_bits);
          mvm_credits_acquired_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 mvm_credits_dropped = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_mvm_credits_dropped(&has_bits);
          mvm_credits_dropped_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional sint32 match_group = 23 [default = -1];
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_match_group(&has_bits);
          match_group_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 lobby_mm_version = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_lobby_mm_version(&has_bits);
          lobby_mm_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGameServerMatchmakingStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGameServerMatchmakingStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ServerMatchmakingState matchmaking_state = 1 [default = ServerMatchmakingState_INVALID];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_matchmaking_state(), target);
  }

  // optional string map = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_map().data(), static_cast<int>(this->_internal_map().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGameServerMatchmakingStatus.map");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_map(), target);
  }

  // optional string tags = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tags().data(), static_cast<int>(this->_internal_tags().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGameServerMatchmakingStatus.tags");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_tags(), target);
  }

  // optional uint32 bot_count = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_bot_count(), target);
  }

  // optional uint32 num_spectators = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_num_spectators(), target);
  }

  // optional uint32 max_players = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_max_players(), target);
  }

  // optional uint32 slots_free = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_slots_free(), target);
  }

  // optional uint32 server_region = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_server_region(), target);
  }

  // optional float server_loadavg = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_server_loadavg(), target);
  }

  // optional bool server_trusted = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_server_trusted(), target);
  }

  // optional bool server_dedicated = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_server_dedicated(), target);
  }

  // repeated .CMsgGameServerMatchmakingStatus.Player players = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_players_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_players(i), target, stream);
  }

  // optional .TF_GC_GameState game_state = 14 [default = TF_GC_GAMESTATE_STATE_INIT];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      14, this->_internal_game_state(), target);
  }

  // optional .CMsgGameServerMatchmakingStatus.Event event = 15 [default = None];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      15, this->_internal_event(), target);
  }

  // optional uint32 server_version = 16 [default = 1225];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_server_version(), target);
  }

  // optional uint32 strict = 17;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_strict(), target);
  }

  // optional uint32 mvm_wave = 18;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_mvm_wave(), target);
  }

  // optional uint32 mvm_credits_acquired = 19;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_mvm_credits_acquired(), target);
  }

  // optional uint32 mvm_credits_dropped = 20;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_mvm_credits_dropped(), target);
  }

  // optional sint32 match_group = 23 [default = -1];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(23, this->_internal_match_group(), target);
  }

  // optional uint32 lobby_mm_version = 24;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(24, this->_internal_lobby_mm_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGameServerMatchmakingStatus)
  return target;
}

size_t CMsgGameServerMatchmakingStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGameServerMatchmakingStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgGameServerMatchmakingStatus.Player players = 13;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string map = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_map());
    }

    // optional string tags = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tags());
    }

    // optional .ServerMatchmakingState matchmaking_state = 1 [default = ServerMatchmakingState_INVALID];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_matchmaking_state());
    }

    // optional uint32 bot_count = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_bot_count());
    }

    // optional uint32 num_spectators = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_num_spectators());
    }

    // optional uint32 max_players = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_players());
    }

    // optional uint32 slots_free = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_slots_free());
    }

    // optional uint32 server_region = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_server_region());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional float server_loadavg = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional bool server_trusted = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool server_dedicated = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional .TF_GC_GameState game_state = 14 [default = TF_GC_GAMESTATE_STATE_INIT];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_game_state());
    }

    // optional .CMsgGameServerMatchmakingStatus.Event event = 15 [default = None];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event());
    }

    // optional uint32 strict = 17;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_strict());
    }

    // optional uint32 mvm_wave = 18;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_mvm_wave());
    }

    // optional uint32 mvm_credits_acquired = 19;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_mvm_credits_acquired());
    }

  }
  if (cached_has_bits & 0x000f0000u) {
    // optional uint32 mvm_credits_dropped = 20;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_mvm_credits_dropped());
    }

    // optional uint32 lobby_mm_version = 24;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_lobby_mm_version());
    }

    // optional uint32 server_version = 16 [default = 1225];
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_server_version());
    }

    // optional sint32 match_group = 23 [default = -1];
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
          this->_internal_match_group());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGameServerMatchmakingStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGameServerMatchmakingStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGameServerMatchmakingStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGameServerMatchmakingStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGameServerMatchmakingStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGameServerMatchmakingStatus)
    MergeFrom(*source);
  }
}

void CMsgGameServerMatchmakingStatus::MergeFrom(const CMsgGameServerMatchmakingStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGameServerMatchmakingStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_map(from._internal_map());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_tags(from._internal_tags());
    }
    if (cached_has_bits & 0x00000004u) {
      matchmaking_state_ = from.matchmaking_state_;
    }
    if (cached_has_bits & 0x00000008u) {
      bot_count_ = from.bot_count_;
    }
    if (cached_has_bits & 0x00000010u) {
      num_spectators_ = from.num_spectators_;
    }
    if (cached_has_bits & 0x00000020u) {
      max_players_ = from.max_players_;
    }
    if (cached_has_bits & 0x00000040u) {
      slots_free_ = from.slots_free_;
    }
    if (cached_has_bits & 0x00000080u) {
      server_region_ = from.server_region_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      server_loadavg_ = from.server_loadavg_;
    }
    if (cached_has_bits & 0x00000200u) {
      server_trusted_ = from.server_trusted_;
    }
    if (cached_has_bits & 0x00000400u) {
      server_dedicated_ = from.server_dedicated_;
    }
    if (cached_has_bits & 0x00000800u) {
      game_state_ = from.game_state_;
    }
    if (cached_has_bits & 0x00001000u) {
      event_ = from.event_;
    }
    if (cached_has_bits & 0x00002000u) {
      strict_ = from.strict_;
    }
    if (cached_has_bits & 0x00004000u) {
      mvm_wave_ = from.mvm_wave_;
    }
    if (cached_has_bits & 0x00008000u) {
      mvm_credits_acquired_ = from.mvm_credits_acquired_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x000f0000u) {
    if (cached_has_bits & 0x00010000u) {
      mvm_credits_dropped_ = from.mvm_credits_dropped_;
    }
    if (cached_has_bits & 0x00020000u) {
      lobby_mm_version_ = from.lobby_mm_version_;
    }
    if (cached_has_bits & 0x00040000u) {
      server_version_ = from.server_version_;
    }
    if (cached_has_bits & 0x00080000u) {
      match_group_ = from.match_group_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGameServerMatchmakingStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGameServerMatchmakingStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameServerMatchmakingStatus::CopyFrom(const CMsgGameServerMatchmakingStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGameServerMatchmakingStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameServerMatchmakingStatus::IsInitialized() const {
  return true;
}

void CMsgGameServerMatchmakingStatus::InternalSwap(CMsgGameServerMatchmakingStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  players_.InternalSwap(&other->players_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &map_, GetArenaForAllocation(),
      &other->map_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &tags_, GetArenaForAllocation(),
      &other->tags_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGameServerMatchmakingStatus, lobby_mm_version_)
      + sizeof(CMsgGameServerMatchmakingStatus::lobby_mm_version_)
      - PROTOBUF_FIELD_OFFSET(CMsgGameServerMatchmakingStatus, matchmaking_state_)>(
          reinterpret_cast<char*>(&matchmaking_state_),
          reinterpret_cast<char*>(&other->matchmaking_state_));
  swap(server_version_, other->server_version_);
  swap(match_group_, other->match_group_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGameServerMatchmakingStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[100]);
}

// ===================================================================

class CMsgMatchmakingProgress::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgMatchmakingProgress>()._has_bits_);
  static void set_has_avg_wait_time_new(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_avg_wait_time_join_late(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_your_wait_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_matching_worldwide_searching_players(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_matching_near_you_searching_players(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_total_worldwide_searching_players(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_total_near_you_searching_players(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_matching_worldwide_active_players(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_matching_near_you_active_players(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_total_worldwide_active_players(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_total_near_you_active_players(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_matching_worldwide_empty_gameservers(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_matching_near_you_empty_gameservers(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_total_worldwide_empty_gameservers(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_total_near_you_empty_gameservers(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_urgency_pct(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgMatchmakingProgress::CMsgMatchmakingProgress(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgMatchmakingProgress)
}
CMsgMatchmakingProgress::CMsgMatchmakingProgress(const CMsgMatchmakingProgress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&urgency_pct_, &from.urgency_pct_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_near_you_empty_gameservers_) -
    reinterpret_cast<char*>(&urgency_pct_)) + sizeof(total_near_you_empty_gameservers_));
  // @@protoc_insertion_point(copy_constructor:CMsgMatchmakingProgress)
}

void CMsgMatchmakingProgress::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&urgency_pct_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&total_near_you_empty_gameservers_) -
    reinterpret_cast<char*>(&urgency_pct_)) + sizeof(total_near_you_empty_gameservers_));
}

CMsgMatchmakingProgress::~CMsgMatchmakingProgress() {
  // @@protoc_insertion_point(destructor:CMsgMatchmakingProgress)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgMatchmakingProgress::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgMatchmakingProgress::ArenaDtor(void* object) {
  CMsgMatchmakingProgress* _this = reinterpret_cast< CMsgMatchmakingProgress* >(object);
  (void)_this;
}
void CMsgMatchmakingProgress::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgMatchmakingProgress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgMatchmakingProgress::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgMatchmakingProgress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&urgency_pct_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&total_near_you_searching_players_) -
        reinterpret_cast<char*>(&urgency_pct_)) + sizeof(total_near_you_searching_players_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&matching_worldwide_active_players_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&total_near_you_empty_gameservers_) -
        reinterpret_cast<char*>(&matching_worldwide_active_players_)) + sizeof(total_near_you_empty_gameservers_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgMatchmakingProgress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 urgency_pct = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_urgency_pct(&has_bits);
          urgency_pct_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 avg_wait_time_new = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_avg_wait_time_new(&has_bits);
          avg_wait_time_new_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 avg_wait_time_join_late = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_avg_wait_time_join_late(&has_bits);
          avg_wait_time_join_late_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 your_wait_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_your_wait_time(&has_bits);
          your_wait_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 matching_worldwide_searching_players = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_matching_worldwide_searching_players(&has_bits);
          matching_worldwide_searching_players_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 matching_near_you_searching_players = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_matching_near_you_searching_players(&has_bits);
          matching_near_you_searching_players_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 total_worldwide_searching_players = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_total_worldwide_searching_players(&has_bits);
          total_worldwide_searching_players_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 total_near_you_searching_players = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_total_near_you_searching_players(&has_bits);
          total_near_you_searching_players_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 matching_worldwide_active_players = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_matching_worldwide_active_players(&has_bits);
          matching_worldwide_active_players_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 matching_near_you_active_players = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_matching_near_you_active_players(&has_bits);
          matching_near_you_active_players_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 total_worldwide_active_players = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_total_worldwide_active_players(&has_bits);
          total_worldwide_active_players_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 total_near_you_active_players = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_total_near_you_active_players(&has_bits);
          total_near_you_active_players_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 matching_worldwide_empty_gameservers = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_matching_worldwide_empty_gameservers(&has_bits);
          matching_worldwide_empty_gameservers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 matching_near_you_empty_gameservers = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_matching_near_you_empty_gameservers(&has_bits);
          matching_near_you_empty_gameservers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 total_worldwide_empty_gameservers = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_total_worldwide_empty_gameservers(&has_bits);
          total_worldwide_empty_gameservers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 total_near_you_empty_gameservers = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_total_near_you_empty_gameservers(&has_bits);
          total_near_you_empty_gameservers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgMatchmakingProgress::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgMatchmakingProgress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 urgency_pct = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_urgency_pct(), target);
  }

  // optional uint32 avg_wait_time_new = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_avg_wait_time_new(), target);
  }

  // optional uint32 avg_wait_time_join_late = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_avg_wait_time_join_late(), target);
  }

  // optional uint32 your_wait_time = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_your_wait_time(), target);
  }

  // optional uint32 matching_worldwide_searching_players = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_matching_worldwide_searching_players(), target);
  }

  // optional uint32 matching_near_you_searching_players = 9;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_matching_near_you_searching_players(), target);
  }

  // optional uint32 total_worldwide_searching_players = 13;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_total_worldwide_searching_players(), target);
  }

  // optional uint32 total_near_you_searching_players = 14;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_total_near_you_searching_players(), target);
  }

  // optional uint32 matching_worldwide_active_players = 15;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_matching_worldwide_active_players(), target);
  }

  // optional uint32 matching_near_you_active_players = 16;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_matching_near_you_active_players(), target);
  }

  // optional uint32 total_worldwide_active_players = 17;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_total_worldwide_active_players(), target);
  }

  // optional uint32 total_near_you_active_players = 18;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_total_near_you_active_players(), target);
  }

  // optional uint32 matching_worldwide_empty_gameservers = 19;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_matching_worldwide_empty_gameservers(), target);
  }

  // optional uint32 matching_near_you_empty_gameservers = 20;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_matching_near_you_empty_gameservers(), target);
  }

  // optional uint32 total_worldwide_empty_gameservers = 21;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(21, this->_internal_total_worldwide_empty_gameservers(), target);
  }

  // optional uint32 total_near_you_empty_gameservers = 22;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->_internal_total_near_you_empty_gameservers(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgMatchmakingProgress)
  return target;
}

size_t CMsgMatchmakingProgress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgMatchmakingProgress)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 urgency_pct = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_urgency_pct());
    }

    // optional uint32 avg_wait_time_new = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_avg_wait_time_new());
    }

    // optional uint32 avg_wait_time_join_late = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_avg_wait_time_join_late());
    }

    // optional uint32 your_wait_time = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_your_wait_time());
    }

    // optional uint32 matching_worldwide_searching_players = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_matching_worldwide_searching_players());
    }

    // optional uint32 matching_near_you_searching_players = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_matching_near_you_searching_players());
    }

    // optional uint32 total_worldwide_searching_players = 13;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_total_worldwide_searching_players());
    }

    // optional uint32 total_near_you_searching_players = 14;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_total_near_you_searching_players());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 matching_worldwide_active_players = 15;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_matching_worldwide_active_players());
    }

    // optional uint32 matching_near_you_active_players = 16;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_matching_near_you_active_players());
    }

    // optional uint32 total_worldwide_active_players = 17;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_total_worldwide_active_players());
    }

    // optional uint32 total_near_you_active_players = 18;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_total_near_you_active_players());
    }

    // optional uint32 matching_worldwide_empty_gameservers = 19;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_matching_worldwide_empty_gameservers());
    }

    // optional uint32 matching_near_you_empty_gameservers = 20;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_matching_near_you_empty_gameservers());
    }

    // optional uint32 total_worldwide_empty_gameservers = 21;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_total_worldwide_empty_gameservers());
    }

    // optional uint32 total_near_you_empty_gameservers = 22;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_total_near_you_empty_gameservers());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgMatchmakingProgress::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgMatchmakingProgress)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgMatchmakingProgress* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgMatchmakingProgress>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgMatchmakingProgress)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgMatchmakingProgress)
    MergeFrom(*source);
  }
}

void CMsgMatchmakingProgress::MergeFrom(const CMsgMatchmakingProgress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgMatchmakingProgress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      urgency_pct_ = from.urgency_pct_;
    }
    if (cached_has_bits & 0x00000002u) {
      avg_wait_time_new_ = from.avg_wait_time_new_;
    }
    if (cached_has_bits & 0x00000004u) {
      avg_wait_time_join_late_ = from.avg_wait_time_join_late_;
    }
    if (cached_has_bits & 0x00000008u) {
      your_wait_time_ = from.your_wait_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      matching_worldwide_searching_players_ = from.matching_worldwide_searching_players_;
    }
    if (cached_has_bits & 0x00000020u) {
      matching_near_you_searching_players_ = from.matching_near_you_searching_players_;
    }
    if (cached_has_bits & 0x00000040u) {
      total_worldwide_searching_players_ = from.total_worldwide_searching_players_;
    }
    if (cached_has_bits & 0x00000080u) {
      total_near_you_searching_players_ = from.total_near_you_searching_players_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      matching_worldwide_active_players_ = from.matching_worldwide_active_players_;
    }
    if (cached_has_bits & 0x00000200u) {
      matching_near_you_active_players_ = from.matching_near_you_active_players_;
    }
    if (cached_has_bits & 0x00000400u) {
      total_worldwide_active_players_ = from.total_worldwide_active_players_;
    }
    if (cached_has_bits & 0x00000800u) {
      total_near_you_active_players_ = from.total_near_you_active_players_;
    }
    if (cached_has_bits & 0x00001000u) {
      matching_worldwide_empty_gameservers_ = from.matching_worldwide_empty_gameservers_;
    }
    if (cached_has_bits & 0x00002000u) {
      matching_near_you_empty_gameservers_ = from.matching_near_you_empty_gameservers_;
    }
    if (cached_has_bits & 0x00004000u) {
      total_worldwide_empty_gameservers_ = from.total_worldwide_empty_gameservers_;
    }
    if (cached_has_bits & 0x00008000u) {
      total_near_you_empty_gameservers_ = from.total_near_you_empty_gameservers_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgMatchmakingProgress::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgMatchmakingProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgMatchmakingProgress::CopyFrom(const CMsgMatchmakingProgress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgMatchmakingProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMatchmakingProgress::IsInitialized() const {
  return true;
}

void CMsgMatchmakingProgress::InternalSwap(CMsgMatchmakingProgress* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgMatchmakingProgress, total_near_you_empty_gameservers_)
      + sizeof(CMsgMatchmakingProgress::total_near_you_empty_gameservers_)
      - PROTOBUF_FIELD_OFFSET(CMsgMatchmakingProgress, urgency_pct_)>(
          reinterpret_cast<char*>(&urgency_pct_),
          reinterpret_cast<char*>(&other->urgency_pct_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgMatchmakingProgress::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[101]);
}

// ===================================================================

class CMsgMvMVictoryInfo_Item::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgMvMVictoryInfo_Item>()._has_bits_);
  static void set_has_grant_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_item_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_squad_surplus_claimer_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgMvMVictoryInfo_Item::CMsgMvMVictoryInfo_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgMvMVictoryInfo.Item)
}
CMsgMvMVictoryInfo_Item::CMsgMvMVictoryInfo_Item(const CMsgMvMVictoryInfo_Item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  item_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_item_data()) {
    item_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_item_data(), 
      GetArenaForAllocation());
  }
  ::memcpy(&squad_surplus_claimer_steam_id_, &from.squad_surplus_claimer_steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&grant_reason_) -
    reinterpret_cast<char*>(&squad_surplus_claimer_steam_id_)) + sizeof(grant_reason_));
  // @@protoc_insertion_point(copy_constructor:CMsgMvMVictoryInfo.Item)
}

void CMsgMvMVictoryInfo_Item::SharedCtor() {
item_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&squad_surplus_claimer_steam_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&grant_reason_) -
    reinterpret_cast<char*>(&squad_surplus_claimer_steam_id_)) + sizeof(grant_reason_));
}

CMsgMvMVictoryInfo_Item::~CMsgMvMVictoryInfo_Item() {
  // @@protoc_insertion_point(destructor:CMsgMvMVictoryInfo.Item)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgMvMVictoryInfo_Item::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  item_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgMvMVictoryInfo_Item::ArenaDtor(void* object) {
  CMsgMvMVictoryInfo_Item* _this = reinterpret_cast< CMsgMvMVictoryInfo_Item* >(object);
  (void)_this;
}
void CMsgMvMVictoryInfo_Item::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgMvMVictoryInfo_Item::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgMvMVictoryInfo_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgMvMVictoryInfo.Item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    item_data_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&squad_surplus_claimer_steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&grant_reason_) -
        reinterpret_cast<char*>(&squad_surplus_claimer_steam_id_)) + sizeof(grant_reason_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgMvMVictoryInfo_Item::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgMvMVictoryInfo.GrantReason grant_reason = 1 [default = INVALID];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgMvMVictoryInfo_GrantReason_IsValid(val))) {
            _internal_set_grant_reason(static_cast<::CMsgMvMVictoryInfo_GrantReason>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bytes item_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_item_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 squad_surplus_claimer_steam_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_squad_surplus_claimer_steam_id(&has_bits);
          squad_surplus_claimer_steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgMvMVictoryInfo_Item::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgMvMVictoryInfo.Item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgMvMVictoryInfo.GrantReason grant_reason = 1 [default = INVALID];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_grant_reason(), target);
  }

  // optional bytes item_data = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_item_data(), target);
  }

  // optional fixed64 squad_surplus_claimer_steam_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_squad_surplus_claimer_steam_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgMvMVictoryInfo.Item)
  return target;
}

size_t CMsgMvMVictoryInfo_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgMvMVictoryInfo.Item)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes item_data = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_item_data());
    }

    // optional fixed64 squad_surplus_claimer_steam_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional .CMsgMvMVictoryInfo.GrantReason grant_reason = 1 [default = INVALID];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_grant_reason());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgMvMVictoryInfo_Item::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgMvMVictoryInfo.Item)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgMvMVictoryInfo_Item* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgMvMVictoryInfo_Item>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgMvMVictoryInfo.Item)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgMvMVictoryInfo.Item)
    MergeFrom(*source);
  }
}

void CMsgMvMVictoryInfo_Item::MergeFrom(const CMsgMvMVictoryInfo_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgMvMVictoryInfo.Item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_item_data(from._internal_item_data());
    }
    if (cached_has_bits & 0x00000002u) {
      squad_surplus_claimer_steam_id_ = from.squad_surplus_claimer_steam_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      grant_reason_ = from.grant_reason_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgMvMVictoryInfo_Item::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgMvMVictoryInfo.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgMvMVictoryInfo_Item::CopyFrom(const CMsgMvMVictoryInfo_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgMvMVictoryInfo.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMvMVictoryInfo_Item::IsInitialized() const {
  return true;
}

void CMsgMvMVictoryInfo_Item::InternalSwap(CMsgMvMVictoryInfo_Item* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &item_data_, GetArenaForAllocation(),
      &other->item_data_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgMvMVictoryInfo_Item, grant_reason_)
      + sizeof(CMsgMvMVictoryInfo_Item::grant_reason_)
      - PROTOBUF_FIELD_OFFSET(CMsgMvMVictoryInfo_Item, squad_surplus_claimer_steam_id_)>(
          reinterpret_cast<char*>(&squad_surplus_claimer_steam_id_),
          reinterpret_cast<char*>(&other->squad_surplus_claimer_steam_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgMvMVictoryInfo_Item::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[102]);
}

// ===================================================================

class CMsgMvMVictoryInfo_Player::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgMvMVictoryInfo_Player>()._has_bits_);
  static void set_has_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_badge_granted(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_badge_progress_updated(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_badge_leveled(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_badge_level(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_badge_progress_bits(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_voucher_missing(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_badge_points(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

CMsgMvMVictoryInfo_Player::CMsgMvMVictoryInfo_Player(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  items_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgMvMVictoryInfo.Player)
}
CMsgMvMVictoryInfo_Player::CMsgMvMVictoryInfo_Player(const CMsgMvMVictoryInfo_Player& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steam_id_, &from.steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&badge_points_) -
    reinterpret_cast<char*>(&steam_id_)) + sizeof(badge_points_));
  // @@protoc_insertion_point(copy_constructor:CMsgMvMVictoryInfo.Player)
}

void CMsgMvMVictoryInfo_Player::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steam_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&badge_points_) -
    reinterpret_cast<char*>(&steam_id_)) + sizeof(badge_points_));
}

CMsgMvMVictoryInfo_Player::~CMsgMvMVictoryInfo_Player() {
  // @@protoc_insertion_point(destructor:CMsgMvMVictoryInfo.Player)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgMvMVictoryInfo_Player::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgMvMVictoryInfo_Player::ArenaDtor(void* object) {
  CMsgMvMVictoryInfo_Player* _this = reinterpret_cast< CMsgMvMVictoryInfo_Player* >(object);
  (void)_this;
}
void CMsgMvMVictoryInfo_Player::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgMvMVictoryInfo_Player::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgMvMVictoryInfo_Player::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgMvMVictoryInfo.Player)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&badge_points_) -
        reinterpret_cast<char*>(&steam_id_)) + sizeof(badge_points_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgMvMVictoryInfo_Player::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steam_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_steam_id(&has_bits);
          steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional bool badge_granted = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_badge_granted(&has_bits);
          badge_granted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool badge_progress_updated = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_badge_progress_updated(&has_bits);
          badge_progress_updated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool badge_leveled = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_badge_leveled(&has_bits);
          badge_leveled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 badge_level = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_badge_level(&has_bits);
          badge_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 badge_progress_bits = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_badge_progress_bits(&has_bits);
          badge_progress_bits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgMvMVictoryInfo.Item items = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool voucher_missing = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_voucher_missing(&has_bits);
          voucher_missing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 badge_points = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_badge_points(&has_bits);
          badge_points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgMvMVictoryInfo_Player::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgMvMVictoryInfo.Player)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steam_id(), target);
  }

  // optional bool badge_granted = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_badge_granted(), target);
  }

  // optional bool badge_progress_updated = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_badge_progress_updated(), target);
  }

  // optional bool badge_leveled = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_badge_leveled(), target);
  }

  // optional uint32 badge_level = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_badge_level(), target);
  }

  // optional uint32 badge_progress_bits = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_badge_progress_bits(), target);
  }

  // repeated .CMsgMvMVictoryInfo.Item items = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_items(i), target, stream);
  }

  // optional bool voucher_missing = 9;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_voucher_missing(), target);
  }

  // optional uint32 badge_points = 10;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_badge_points(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgMvMVictoryInfo.Player)
  return target;
}

size_t CMsgMvMVictoryInfo_Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgMvMVictoryInfo.Player)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgMvMVictoryInfo.Item items = 8;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional fixed64 steam_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional bool badge_granted = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool badge_progress_updated = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool badge_leveled = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool voucher_missing = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional uint32 badge_level = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_badge_level());
    }

    // optional uint32 badge_progress_bits = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_badge_progress_bits());
    }

    // optional uint32 badge_points = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_badge_points());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgMvMVictoryInfo_Player::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgMvMVictoryInfo.Player)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgMvMVictoryInfo_Player* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgMvMVictoryInfo_Player>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgMvMVictoryInfo.Player)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgMvMVictoryInfo.Player)
    MergeFrom(*source);
  }
}

void CMsgMvMVictoryInfo_Player::MergeFrom(const CMsgMvMVictoryInfo_Player& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgMvMVictoryInfo.Player)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      badge_granted_ = from.badge_granted_;
    }
    if (cached_has_bits & 0x00000004u) {
      badge_progress_updated_ = from.badge_progress_updated_;
    }
    if (cached_has_bits & 0x00000008u) {
      badge_leveled_ = from.badge_leveled_;
    }
    if (cached_has_bits & 0x00000010u) {
      voucher_missing_ = from.voucher_missing_;
    }
    if (cached_has_bits & 0x00000020u) {
      badge_level_ = from.badge_level_;
    }
    if (cached_has_bits & 0x00000040u) {
      badge_progress_bits_ = from.badge_progress_bits_;
    }
    if (cached_has_bits & 0x00000080u) {
      badge_points_ = from.badge_points_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgMvMVictoryInfo_Player::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgMvMVictoryInfo.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgMvMVictoryInfo_Player::CopyFrom(const CMsgMvMVictoryInfo_Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgMvMVictoryInfo.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMvMVictoryInfo_Player::IsInitialized() const {
  return true;
}

void CMsgMvMVictoryInfo_Player::InternalSwap(CMsgMvMVictoryInfo_Player* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  items_.InternalSwap(&other->items_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgMvMVictoryInfo_Player, badge_points_)
      + sizeof(CMsgMvMVictoryInfo_Player::badge_points_)
      - PROTOBUF_FIELD_OFFSET(CMsgMvMVictoryInfo_Player, steam_id_)>(
          reinterpret_cast<char*>(&steam_id_),
          reinterpret_cast<char*>(&other->steam_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgMvMVictoryInfo_Player::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[103]);
}

// ===================================================================

class CMsgMvMVictoryInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgMvMVictoryInfo>()._has_bits_);
  static void set_has_tour_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mission_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgMvMVictoryInfo::CMsgMvMVictoryInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  players_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgMvMVictoryInfo)
}
CMsgMvMVictoryInfo::CMsgMvMVictoryInfo(const CMsgMvMVictoryInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      players_(from.players_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tour_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_tour_name()) {
    tour_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tour_name(), 
      GetArenaForAllocation());
  }
  mission_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_mission_name()) {
    mission_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mission_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CMsgMvMVictoryInfo)
}

void CMsgMvMVictoryInfo::SharedCtor() {
tour_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
mission_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CMsgMvMVictoryInfo::~CMsgMvMVictoryInfo() {
  // @@protoc_insertion_point(destructor:CMsgMvMVictoryInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgMvMVictoryInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  tour_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mission_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgMvMVictoryInfo::ArenaDtor(void* object) {
  CMsgMvMVictoryInfo* _this = reinterpret_cast< CMsgMvMVictoryInfo* >(object);
  (void)_this;
}
void CMsgMvMVictoryInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgMvMVictoryInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgMvMVictoryInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgMvMVictoryInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      tour_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      mission_name_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgMvMVictoryInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgMvMVictoryInfo.Player players = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string tour_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_tour_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgMvMVictoryInfo.tour_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string mission_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_mission_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgMvMVictoryInfo.mission_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgMvMVictoryInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgMvMVictoryInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgMvMVictoryInfo.Player players = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_players_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_players(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional string tour_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tour_name().data(), static_cast<int>(this->_internal_tour_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgMvMVictoryInfo.tour_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_tour_name(), target);
  }

  // optional string mission_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_mission_name().data(), static_cast<int>(this->_internal_mission_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgMvMVictoryInfo.mission_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_mission_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgMvMVictoryInfo)
  return target;
}

size_t CMsgMvMVictoryInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgMvMVictoryInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgMvMVictoryInfo.Player players = 1;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string tour_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tour_name());
    }

    // optional string mission_name = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mission_name());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgMvMVictoryInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgMvMVictoryInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgMvMVictoryInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgMvMVictoryInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgMvMVictoryInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgMvMVictoryInfo)
    MergeFrom(*source);
  }
}

void CMsgMvMVictoryInfo::MergeFrom(const CMsgMvMVictoryInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgMvMVictoryInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_tour_name(from._internal_tour_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_mission_name(from._internal_mission_name());
    }
  }
}

void CMsgMvMVictoryInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgMvMVictoryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgMvMVictoryInfo::CopyFrom(const CMsgMvMVictoryInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgMvMVictoryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMvMVictoryInfo::IsInitialized() const {
  return true;
}

void CMsgMvMVictoryInfo::InternalSwap(CMsgMvMVictoryInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  players_.InternalSwap(&other->players_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &tour_name_, GetArenaForAllocation(),
      &other->tour_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &mission_name_, GetArenaForAllocation(),
      &other->mission_name_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgMvMVictoryInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[104]);
}

// ===================================================================

class CGCMsgTFHelloResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CGCMsgTFHelloResponse>()._has_bits_);
  static void set_has_version_check(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_version_verbose(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CGCMsgTFHelloResponse::CGCMsgTFHelloResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  version_checksum_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGCMsgTFHelloResponse)
}
CGCMsgTFHelloResponse::CGCMsgTFHelloResponse(const CGCMsgTFHelloResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      version_checksum_(from.version_checksum_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&version_check_, &from.version_check_,
    static_cast<size_t>(reinterpret_cast<char*>(&version_verbose_) -
    reinterpret_cast<char*>(&version_check_)) + sizeof(version_verbose_));
  // @@protoc_insertion_point(copy_constructor:CGCMsgTFHelloResponse)
}

void CGCMsgTFHelloResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&version_check_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&version_verbose_) -
    reinterpret_cast<char*>(&version_check_)) + sizeof(version_verbose_));
}

CGCMsgTFHelloResponse::~CGCMsgTFHelloResponse() {
  // @@protoc_insertion_point(destructor:CGCMsgTFHelloResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGCMsgTFHelloResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGCMsgTFHelloResponse::ArenaDtor(void* object) {
  CGCMsgTFHelloResponse* _this = reinterpret_cast< CGCMsgTFHelloResponse* >(object);
  (void)_this;
}
void CGCMsgTFHelloResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGCMsgTFHelloResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGCMsgTFHelloResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CGCMsgTFHelloResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  version_checksum_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&version_check_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&version_verbose_) -
        reinterpret_cast<char*>(&version_check_)) + sizeof(version_verbose_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGCMsgTFHelloResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 version_check = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_version_check(&has_bits);
          version_check_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 version_checksum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_version_checksum(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_version_checksum(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 version_verbose = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_version_verbose(&has_bits);
          version_verbose_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGCMsgTFHelloResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGCMsgTFHelloResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 version_check = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_version_check(), target);
  }

  // repeated uint64 version_checksum = 2;
  for (int i = 0, n = this->_internal_version_checksum_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_version_checksum(i), target);
  }

  // optional uint32 version_verbose = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_version_verbose(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGCMsgTFHelloResponse)
  return target;
}

size_t CGCMsgTFHelloResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGCMsgTFHelloResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 version_checksum = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->version_checksum_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_version_checksum_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 version_check = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_version_check());
    }

    // optional uint32 version_verbose = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_version_verbose());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGCMsgTFHelloResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGCMsgTFHelloResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CGCMsgTFHelloResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGCMsgTFHelloResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGCMsgTFHelloResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGCMsgTFHelloResponse)
    MergeFrom(*source);
  }
}

void CGCMsgTFHelloResponse::MergeFrom(const CGCMsgTFHelloResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGCMsgTFHelloResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  version_checksum_.MergeFrom(from.version_checksum_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      version_check_ = from.version_check_;
    }
    if (cached_has_bits & 0x00000002u) {
      version_verbose_ = from.version_verbose_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGCMsgTFHelloResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGCMsgTFHelloResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCMsgTFHelloResponse::CopyFrom(const CGCMsgTFHelloResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGCMsgTFHelloResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsgTFHelloResponse::IsInitialized() const {
  return true;
}

void CGCMsgTFHelloResponse::InternalSwap(CGCMsgTFHelloResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  version_checksum_.InternalSwap(&other->version_checksum_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGCMsgTFHelloResponse, version_verbose_)
      + sizeof(CGCMsgTFHelloResponse::version_verbose_)
      - PROTOBUF_FIELD_OFFSET(CGCMsgTFHelloResponse, version_check_)>(
          reinterpret_cast<char*>(&version_check_),
          reinterpret_cast<char*>(&other->version_check_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGCMsgTFHelloResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[105]);
}

// ===================================================================

class CGCMsgTFSync::_Internal {
 public:
  using HasBits = decltype(std::declval<CGCMsgTFSync>()._has_bits_);
  static void set_has_version_checksum(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_version_check(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_version_check_ex(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_version_check_ex2(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_version_checksum_ex(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CGCMsgTFSync::CGCMsgTFSync(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGCMsgTFSync)
}
CGCMsgTFSync::CGCMsgTFSync(const CGCMsgTFSync& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  version_checksum_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_version_checksum()) {
    version_checksum_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_version_checksum(), 
      GetArenaForAllocation());
  }
  version_checksum_ex_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_version_checksum_ex()) {
    version_checksum_ex_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_version_checksum_ex(), 
      GetArenaForAllocation());
  }
  ::memcpy(&version_check_, &from.version_check_,
    static_cast<size_t>(reinterpret_cast<char*>(&version_check_ex2_) -
    reinterpret_cast<char*>(&version_check_)) + sizeof(version_check_ex2_));
  // @@protoc_insertion_point(copy_constructor:CGCMsgTFSync)
}

void CGCMsgTFSync::SharedCtor() {
version_checksum_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
version_checksum_ex_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&version_check_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&version_check_ex2_) -
    reinterpret_cast<char*>(&version_check_)) + sizeof(version_check_ex2_));
}

CGCMsgTFSync::~CGCMsgTFSync() {
  // @@protoc_insertion_point(destructor:CGCMsgTFSync)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGCMsgTFSync::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  version_checksum_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_checksum_ex_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CGCMsgTFSync::ArenaDtor(void* object) {
  CGCMsgTFSync* _this = reinterpret_cast< CGCMsgTFSync* >(object);
  (void)_this;
}
void CGCMsgTFSync::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGCMsgTFSync::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGCMsgTFSync::Clear() {
// @@protoc_insertion_point(message_clear_start:CGCMsgTFSync)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      version_checksum_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      version_checksum_ex_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&version_check_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&version_check_ex2_) -
        reinterpret_cast<char*>(&version_check_)) + sizeof(version_check_ex2_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGCMsgTFSync::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes version_checksum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_version_checksum();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 version_check = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_version_check(&has_bits);
          version_check_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 version_check_ex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_version_check_ex(&has_bits);
          version_check_ex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 version_check_ex2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_version_check_ex2(&has_bits);
          version_check_ex2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes version_checksum_ex = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_version_checksum_ex();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGCMsgTFSync::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGCMsgTFSync)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes version_checksum = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_version_checksum(), target);
  }

  // optional uint32 version_check = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_version_check(), target);
  }

  // optional uint32 version_check_ex = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_version_check_ex(), target);
  }

  // optional uint32 version_check_ex2 = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_version_check_ex2(), target);
  }

  // optional bytes version_checksum_ex = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_version_checksum_ex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGCMsgTFSync)
  return target;
}

size_t CGCMsgTFSync::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGCMsgTFSync)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bytes version_checksum = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_version_checksum());
    }

    // optional bytes version_checksum_ex = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_version_checksum_ex());
    }

    // optional uint32 version_check = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_version_check());
    }

    // optional uint32 version_check_ex = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_version_check_ex());
    }

    // optional uint32 version_check_ex2 = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_version_check_ex2());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGCMsgTFSync::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGCMsgTFSync)
  GOOGLE_DCHECK_NE(&from, this);
  const CGCMsgTFSync* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGCMsgTFSync>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGCMsgTFSync)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGCMsgTFSync)
    MergeFrom(*source);
  }
}

void CGCMsgTFSync::MergeFrom(const CGCMsgTFSync& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGCMsgTFSync)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_version_checksum(from._internal_version_checksum());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_version_checksum_ex(from._internal_version_checksum_ex());
    }
    if (cached_has_bits & 0x00000004u) {
      version_check_ = from.version_check_;
    }
    if (cached_has_bits & 0x00000008u) {
      version_check_ex_ = from.version_check_ex_;
    }
    if (cached_has_bits & 0x00000010u) {
      version_check_ex2_ = from.version_check_ex2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGCMsgTFSync::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGCMsgTFSync)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCMsgTFSync::CopyFrom(const CGCMsgTFSync& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGCMsgTFSync)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsgTFSync::IsInitialized() const {
  return true;
}

void CGCMsgTFSync::InternalSwap(CGCMsgTFSync* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &version_checksum_, GetArenaForAllocation(),
      &other->version_checksum_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &version_checksum_ex_, GetArenaForAllocation(),
      &other->version_checksum_ex_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGCMsgTFSync, version_check_ex2_)
      + sizeof(CGCMsgTFSync::version_check_ex2_)
      - PROTOBUF_FIELD_OFFSET(CGCMsgTFSync, version_check_)>(
          reinterpret_cast<char*>(&version_check_),
          reinterpret_cast<char*>(&other->version_check_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGCMsgTFSync::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[106]);
}

// ===================================================================

class CGCMsgTFSyncEx::_Internal {
 public:
  using HasBits = decltype(std::declval<CGCMsgTFSyncEx>()._has_bits_);
  static void set_has_version_checksum(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_version_checksum_ex(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_version_check(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CGCMsgTFSyncEx::CGCMsgTFSyncEx(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGCMsgTFSyncEx)
}
CGCMsgTFSyncEx::CGCMsgTFSyncEx(const CGCMsgTFSyncEx& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  version_checksum_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_version_checksum()) {
    version_checksum_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_version_checksum(), 
      GetArenaForAllocation());
  }
  version_checksum_ex_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_version_checksum_ex()) {
    version_checksum_ex_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_version_checksum_ex(), 
      GetArenaForAllocation());
  }
  version_check_ = from.version_check_;
  // @@protoc_insertion_point(copy_constructor:CGCMsgTFSyncEx)
}

void CGCMsgTFSyncEx::SharedCtor() {
version_checksum_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
version_checksum_ex_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
version_check_ = 0u;
}

CGCMsgTFSyncEx::~CGCMsgTFSyncEx() {
  // @@protoc_insertion_point(destructor:CGCMsgTFSyncEx)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGCMsgTFSyncEx::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  version_checksum_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_checksum_ex_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CGCMsgTFSyncEx::ArenaDtor(void* object) {
  CGCMsgTFSyncEx* _this = reinterpret_cast< CGCMsgTFSyncEx* >(object);
  (void)_this;
}
void CGCMsgTFSyncEx::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGCMsgTFSyncEx::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGCMsgTFSyncEx::Clear() {
// @@protoc_insertion_point(message_clear_start:CGCMsgTFSyncEx)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      version_checksum_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      version_checksum_ex_.ClearNonDefaultToEmpty();
    }
  }
  version_check_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGCMsgTFSyncEx::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string version_checksum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_version_checksum();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGCMsgTFSyncEx.version_checksum");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes version_checksum_ex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_version_checksum_ex();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 version_check = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_version_check(&has_bits);
          version_check_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGCMsgTFSyncEx::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGCMsgTFSyncEx)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string version_checksum = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_version_checksum().data(), static_cast<int>(this->_internal_version_checksum().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGCMsgTFSyncEx.version_checksum");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_version_checksum(), target);
  }

  // optional bytes version_checksum_ex = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_version_checksum_ex(), target);
  }

  // optional uint32 version_check = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_version_check(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGCMsgTFSyncEx)
  return target;
}

size_t CGCMsgTFSyncEx::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGCMsgTFSyncEx)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string version_checksum = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_version_checksum());
    }

    // optional bytes version_checksum_ex = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_version_checksum_ex());
    }

    // optional uint32 version_check = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_version_check());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGCMsgTFSyncEx::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGCMsgTFSyncEx)
  GOOGLE_DCHECK_NE(&from, this);
  const CGCMsgTFSyncEx* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGCMsgTFSyncEx>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGCMsgTFSyncEx)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGCMsgTFSyncEx)
    MergeFrom(*source);
  }
}

void CGCMsgTFSyncEx::MergeFrom(const CGCMsgTFSyncEx& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGCMsgTFSyncEx)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_version_checksum(from._internal_version_checksum());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_version_checksum_ex(from._internal_version_checksum_ex());
    }
    if (cached_has_bits & 0x00000004u) {
      version_check_ = from.version_check_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGCMsgTFSyncEx::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGCMsgTFSyncEx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCMsgTFSyncEx::CopyFrom(const CGCMsgTFSyncEx& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGCMsgTFSyncEx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsgTFSyncEx::IsInitialized() const {
  return true;
}

void CGCMsgTFSyncEx::InternalSwap(CGCMsgTFSyncEx* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &version_checksum_, GetArenaForAllocation(),
      &other->version_checksum_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &version_checksum_ex_, GetArenaForAllocation(),
      &other->version_checksum_ex_, other->GetArenaForAllocation()
  );
  swap(version_check_, other->version_check_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGCMsgTFSyncEx::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[107]);
}

// ===================================================================

class CMsgMvMVictory_Player::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgMvMVictory_Player>()._has_bits_);
  static void set_has_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_squad_surplus(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgMvMVictory_Player::CMsgMvMVictory_Player(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgMvMVictory.Player)
}
CMsgMvMVictory_Player::CMsgMvMVictory_Player(const CMsgMvMVictory_Player& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steam_id_, &from.steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&squad_surplus_) -
    reinterpret_cast<char*>(&steam_id_)) + sizeof(squad_surplus_));
  // @@protoc_insertion_point(copy_constructor:CMsgMvMVictory.Player)
}

void CMsgMvMVictory_Player::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steam_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&squad_surplus_) -
    reinterpret_cast<char*>(&steam_id_)) + sizeof(squad_surplus_));
}

CMsgMvMVictory_Player::~CMsgMvMVictory_Player() {
  // @@protoc_insertion_point(destructor:CMsgMvMVictory.Player)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgMvMVictory_Player::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgMvMVictory_Player::ArenaDtor(void* object) {
  CMsgMvMVictory_Player* _this = reinterpret_cast< CMsgMvMVictory_Player* >(object);
  (void)_this;
}
void CMsgMvMVictory_Player::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgMvMVictory_Player::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgMvMVictory_Player::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgMvMVictory.Player)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&squad_surplus_) -
        reinterpret_cast<char*>(&steam_id_)) + sizeof(squad_surplus_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgMvMVictory_Player::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steam_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_steam_id(&has_bits);
          steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional bool squad_surplus = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_squad_surplus(&has_bits);
          squad_surplus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgMvMVictory_Player::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgMvMVictory.Player)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steam_id(), target);
  }

  // optional bool squad_surplus = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_squad_surplus(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgMvMVictory.Player)
  return target;
}

size_t CMsgMvMVictory_Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgMvMVictory.Player)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 steam_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional bool squad_surplus = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgMvMVictory_Player::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgMvMVictory.Player)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgMvMVictory_Player* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgMvMVictory_Player>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgMvMVictory.Player)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgMvMVictory.Player)
    MergeFrom(*source);
  }
}

void CMsgMvMVictory_Player::MergeFrom(const CMsgMvMVictory_Player& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgMvMVictory.Player)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      squad_surplus_ = from.squad_surplus_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgMvMVictory_Player::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgMvMVictory.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgMvMVictory_Player::CopyFrom(const CMsgMvMVictory_Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgMvMVictory.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMvMVictory_Player::IsInitialized() const {
  return true;
}

void CMsgMvMVictory_Player::InternalSwap(CMsgMvMVictory_Player* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgMvMVictory_Player, squad_surplus_)
      + sizeof(CMsgMvMVictory_Player::squad_surplus_)
      - PROTOBUF_FIELD_OFFSET(CMsgMvMVictory_Player, steam_id_)>(
          reinterpret_cast<char*>(&steam_id_),
          reinterpret_cast<char*>(&other->steam_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgMvMVictory_Player::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[108]);
}

// ===================================================================

class CMsgMvMVictory::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgMvMVictory>()._has_bits_);
  static void set_has_legacy_mission_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_tour_name_mannup(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mission_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_lobby_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_event_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgMvMVictory::CMsgMvMVictory(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  players_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgMvMVictory)
}
CMsgMvMVictory::CMsgMvMVictory(const CMsgMvMVictory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      players_(from.players_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tour_name_mannup_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_tour_name_mannup()) {
    tour_name_mannup_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tour_name_mannup(), 
      GetArenaForAllocation());
  }
  mission_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_mission_name()) {
    mission_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mission_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&legacy_mission_index_, &from.legacy_mission_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&lobby_id_) -
    reinterpret_cast<char*>(&legacy_mission_index_)) + sizeof(lobby_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgMvMVictory)
}

void CMsgMvMVictory::SharedCtor() {
tour_name_mannup_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
mission_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&legacy_mission_index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&lobby_id_) -
    reinterpret_cast<char*>(&legacy_mission_index_)) + sizeof(lobby_id_));
}

CMsgMvMVictory::~CMsgMvMVictory() {
  // @@protoc_insertion_point(destructor:CMsgMvMVictory)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgMvMVictory::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  tour_name_mannup_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mission_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgMvMVictory::ArenaDtor(void* object) {
  CMsgMvMVictory* _this = reinterpret_cast< CMsgMvMVictory* >(object);
  (void)_this;
}
void CMsgMvMVictory::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgMvMVictory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgMvMVictory::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgMvMVictory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      tour_name_mannup_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      mission_name_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&legacy_mission_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lobby_id_) -
        reinterpret_cast<char*>(&legacy_mission_index_)) + sizeof(lobby_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgMvMVictory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 legacy_mission_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_legacy_mission_index(&has_bits);
          legacy_mission_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgMvMVictory.Player players = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint64 lobby_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_lobby_id(&has_bits);
          lobby_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 event_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_event_time(&has_bits);
          event_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional string tour_name_mannup = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_tour_name_mannup();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgMvMVictory.tour_name_mannup");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string mission_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_mission_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgMvMVictory.mission_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgMvMVictory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgMvMVictory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 legacy_mission_index = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_legacy_mission_index(), target);
  }

  // repeated .CMsgMvMVictory.Player players = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_players_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_players(i), target, stream);
  }

  // optional uint64 lobby_id = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_lobby_id(), target);
  }

  // optional fixed32 event_time = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(4, this->_internal_event_time(), target);
  }

  // optional string tour_name_mannup = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tour_name_mannup().data(), static_cast<int>(this->_internal_tour_name_mannup().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgMvMVictory.tour_name_mannup");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_tour_name_mannup(), target);
  }

  // optional string mission_name = 6;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_mission_name().data(), static_cast<int>(this->_internal_mission_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgMvMVictory.mission_name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_mission_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgMvMVictory)
  return target;
}

size_t CMsgMvMVictory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgMvMVictory)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgMvMVictory.Player players = 2;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string tour_name_mannup = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tour_name_mannup());
    }

    // optional string mission_name = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mission_name());
    }

    // optional uint32 legacy_mission_index = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_legacy_mission_index());
    }

    // optional fixed32 event_time = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional uint64 lobby_id = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_lobby_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgMvMVictory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgMvMVictory)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgMvMVictory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgMvMVictory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgMvMVictory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgMvMVictory)
    MergeFrom(*source);
  }
}

void CMsgMvMVictory::MergeFrom(const CMsgMvMVictory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgMvMVictory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_tour_name_mannup(from._internal_tour_name_mannup());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_mission_name(from._internal_mission_name());
    }
    if (cached_has_bits & 0x00000004u) {
      legacy_mission_index_ = from.legacy_mission_index_;
    }
    if (cached_has_bits & 0x00000008u) {
      event_time_ = from.event_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      lobby_id_ = from.lobby_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgMvMVictory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgMvMVictory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgMvMVictory::CopyFrom(const CMsgMvMVictory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgMvMVictory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMvMVictory::IsInitialized() const {
  return true;
}

void CMsgMvMVictory::InternalSwap(CMsgMvMVictory* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  players_.InternalSwap(&other->players_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &tour_name_mannup_, GetArenaForAllocation(),
      &other->tour_name_mannup_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &mission_name_, GetArenaForAllocation(),
      &other->mission_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgMvMVictory, lobby_id_)
      + sizeof(CMsgMvMVictory::lobby_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgMvMVictory, legacy_mission_index_)>(
          reinterpret_cast<char*>(&legacy_mission_index_),
          reinterpret_cast<char*>(&other->legacy_mission_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgMvMVictory::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[109]);
}

// ===================================================================

class CMsgMvMMannUpVictoryReply::_Internal {
 public:
};

CMsgMvMMannUpVictoryReply::CMsgMvMMannUpVictoryReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgMvMMannUpVictoryReply)
}
CMsgMvMMannUpVictoryReply::CMsgMvMMannUpVictoryReply(const CMsgMvMMannUpVictoryReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgMvMMannUpVictoryReply)
}

void CMsgMvMMannUpVictoryReply::SharedCtor() {
}

CMsgMvMMannUpVictoryReply::~CMsgMvMMannUpVictoryReply() {
  // @@protoc_insertion_point(destructor:CMsgMvMMannUpVictoryReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgMvMMannUpVictoryReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgMvMMannUpVictoryReply::ArenaDtor(void* object) {
  CMsgMvMMannUpVictoryReply* _this = reinterpret_cast< CMsgMvMMannUpVictoryReply* >(object);
  (void)_this;
}
void CMsgMvMMannUpVictoryReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgMvMMannUpVictoryReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgMvMMannUpVictoryReply::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgMvMMannUpVictoryReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgMvMMannUpVictoryReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgMvMMannUpVictoryReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgMvMMannUpVictoryReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgMvMMannUpVictoryReply)
  return target;
}

size_t CMsgMvMMannUpVictoryReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgMvMMannUpVictoryReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgMvMMannUpVictoryReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgMvMMannUpVictoryReply)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgMvMMannUpVictoryReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgMvMMannUpVictoryReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgMvMMannUpVictoryReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgMvMMannUpVictoryReply)
    MergeFrom(*source);
  }
}

void CMsgMvMMannUpVictoryReply::MergeFrom(const CMsgMvMMannUpVictoryReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgMvMMannUpVictoryReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgMvMMannUpVictoryReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgMvMMannUpVictoryReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgMvMMannUpVictoryReply::CopyFrom(const CMsgMvMMannUpVictoryReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgMvMMannUpVictoryReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMvMMannUpVictoryReply::IsInitialized() const {
  return true;
}

void CMsgMvMMannUpVictoryReply::InternalSwap(CMsgMvMMannUpVictoryReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgMvMMannUpVictoryReply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[110]);
}

// ===================================================================

class CMsgGameServerKickingLobby::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGameServerKickingLobby>()._has_bits_);
  static void set_has_lobby_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGameServerKickingLobby::CMsgGameServerKickingLobby(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGameServerKickingLobby)
}
CMsgGameServerKickingLobby::CMsgGameServerKickingLobby(const CMsgGameServerKickingLobby& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&lobby_id_, &from.lobby_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&match_id_) -
    reinterpret_cast<char*>(&lobby_id_)) + sizeof(match_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgGameServerKickingLobby)
}

void CMsgGameServerKickingLobby::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&lobby_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&match_id_) -
    reinterpret_cast<char*>(&lobby_id_)) + sizeof(match_id_));
}

CMsgGameServerKickingLobby::~CMsgGameServerKickingLobby() {
  // @@protoc_insertion_point(destructor:CMsgGameServerKickingLobby)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGameServerKickingLobby::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGameServerKickingLobby::ArenaDtor(void* object) {
  CMsgGameServerKickingLobby* _this = reinterpret_cast< CMsgGameServerKickingLobby* >(object);
  (void)_this;
}
void CMsgGameServerKickingLobby::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGameServerKickingLobby::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGameServerKickingLobby::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGameServerKickingLobby)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&lobby_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&match_id_) -
        reinterpret_cast<char*>(&lobby_id_)) + sizeof(match_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGameServerKickingLobby::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 lobby_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_lobby_id(&has_bits);
          lobby_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 match_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_match_id(&has_bits);
          match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGameServerKickingLobby::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGameServerKickingLobby)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 lobby_id = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_lobby_id(), target);
  }

  // optional uint64 match_id = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_match_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGameServerKickingLobby)
  return target;
}

size_t CMsgGameServerKickingLobby::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGameServerKickingLobby)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 lobby_id = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_lobby_id());
    }

    // optional uint64 match_id = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_match_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGameServerKickingLobby::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGameServerKickingLobby)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGameServerKickingLobby* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGameServerKickingLobby>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGameServerKickingLobby)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGameServerKickingLobby)
    MergeFrom(*source);
  }
}

void CMsgGameServerKickingLobby::MergeFrom(const CMsgGameServerKickingLobby& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGameServerKickingLobby)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      lobby_id_ = from.lobby_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      match_id_ = from.match_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGameServerKickingLobby::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGameServerKickingLobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameServerKickingLobby::CopyFrom(const CMsgGameServerKickingLobby& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGameServerKickingLobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameServerKickingLobby::IsInitialized() const {
  return true;
}

void CMsgGameServerKickingLobby::InternalSwap(CMsgGameServerKickingLobby* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGameServerKickingLobby, match_id_)
      + sizeof(CMsgGameServerKickingLobby::match_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgGameServerKickingLobby, lobby_id_)>(
          reinterpret_cast<char*>(&lobby_id_),
          reinterpret_cast<char*>(&other->lobby_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGameServerKickingLobby::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[111]);
}

// ===================================================================

class CMsgGameServerKickingLobbyResponse::_Internal {
 public:
};

CMsgGameServerKickingLobbyResponse::CMsgGameServerKickingLobbyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGameServerKickingLobbyResponse)
}
CMsgGameServerKickingLobbyResponse::CMsgGameServerKickingLobbyResponse(const CMsgGameServerKickingLobbyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGameServerKickingLobbyResponse)
}

void CMsgGameServerKickingLobbyResponse::SharedCtor() {
}

CMsgGameServerKickingLobbyResponse::~CMsgGameServerKickingLobbyResponse() {
  // @@protoc_insertion_point(destructor:CMsgGameServerKickingLobbyResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGameServerKickingLobbyResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGameServerKickingLobbyResponse::ArenaDtor(void* object) {
  CMsgGameServerKickingLobbyResponse* _this = reinterpret_cast< CMsgGameServerKickingLobbyResponse* >(object);
  (void)_this;
}
void CMsgGameServerKickingLobbyResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGameServerKickingLobbyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGameServerKickingLobbyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGameServerKickingLobbyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGameServerKickingLobbyResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGameServerKickingLobbyResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGameServerKickingLobbyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGameServerKickingLobbyResponse)
  return target;
}

size_t CMsgGameServerKickingLobbyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGameServerKickingLobbyResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGameServerKickingLobbyResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGameServerKickingLobbyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGameServerKickingLobbyResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGameServerKickingLobbyResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGameServerKickingLobbyResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGameServerKickingLobbyResponse)
    MergeFrom(*source);
  }
}

void CMsgGameServerKickingLobbyResponse::MergeFrom(const CMsgGameServerKickingLobbyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGameServerKickingLobbyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgGameServerKickingLobbyResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGameServerKickingLobbyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameServerKickingLobbyResponse::CopyFrom(const CMsgGameServerKickingLobbyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGameServerKickingLobbyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameServerKickingLobbyResponse::IsInitialized() const {
  return true;
}

void CMsgGameServerKickingLobbyResponse::InternalSwap(CMsgGameServerKickingLobbyResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGameServerKickingLobbyResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[112]);
}

// ===================================================================

class CMsgLeaveGameAndPrepareToJoinParty::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgLeaveGameAndPrepareToJoinParty>()._has_bits_);
  static void set_has_party_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgLeaveGameAndPrepareToJoinParty::CMsgLeaveGameAndPrepareToJoinParty(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgLeaveGameAndPrepareToJoinParty)
}
CMsgLeaveGameAndPrepareToJoinParty::CMsgLeaveGameAndPrepareToJoinParty(const CMsgLeaveGameAndPrepareToJoinParty& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  party_id_ = from.party_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgLeaveGameAndPrepareToJoinParty)
}

void CMsgLeaveGameAndPrepareToJoinParty::SharedCtor() {
party_id_ = uint64_t{0u};
}

CMsgLeaveGameAndPrepareToJoinParty::~CMsgLeaveGameAndPrepareToJoinParty() {
  // @@protoc_insertion_point(destructor:CMsgLeaveGameAndPrepareToJoinParty)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgLeaveGameAndPrepareToJoinParty::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgLeaveGameAndPrepareToJoinParty::ArenaDtor(void* object) {
  CMsgLeaveGameAndPrepareToJoinParty* _this = reinterpret_cast< CMsgLeaveGameAndPrepareToJoinParty* >(object);
  (void)_this;
}
void CMsgLeaveGameAndPrepareToJoinParty::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgLeaveGameAndPrepareToJoinParty::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgLeaveGameAndPrepareToJoinParty::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgLeaveGameAndPrepareToJoinParty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  party_id_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgLeaveGameAndPrepareToJoinParty::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 party_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_party_id(&has_bits);
          party_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgLeaveGameAndPrepareToJoinParty::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgLeaveGameAndPrepareToJoinParty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 party_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_party_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgLeaveGameAndPrepareToJoinParty)
  return target;
}

size_t CMsgLeaveGameAndPrepareToJoinParty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgLeaveGameAndPrepareToJoinParty)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 party_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgLeaveGameAndPrepareToJoinParty::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgLeaveGameAndPrepareToJoinParty)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgLeaveGameAndPrepareToJoinParty* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgLeaveGameAndPrepareToJoinParty>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgLeaveGameAndPrepareToJoinParty)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgLeaveGameAndPrepareToJoinParty)
    MergeFrom(*source);
  }
}

void CMsgLeaveGameAndPrepareToJoinParty::MergeFrom(const CMsgLeaveGameAndPrepareToJoinParty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgLeaveGameAndPrepareToJoinParty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_party_id()) {
    _internal_set_party_id(from._internal_party_id());
  }
}

void CMsgLeaveGameAndPrepareToJoinParty::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgLeaveGameAndPrepareToJoinParty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLeaveGameAndPrepareToJoinParty::CopyFrom(const CMsgLeaveGameAndPrepareToJoinParty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgLeaveGameAndPrepareToJoinParty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLeaveGameAndPrepareToJoinParty::IsInitialized() const {
  return true;
}

void CMsgLeaveGameAndPrepareToJoinParty::InternalSwap(CMsgLeaveGameAndPrepareToJoinParty* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(party_id_, other->party_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgLeaveGameAndPrepareToJoinParty::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[113]);
}

// ===================================================================

class CMsgPlayerLeftMatch::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgPlayerLeftMatch>()._has_bits_);
  static void set_has_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_leave_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_was_abandon(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_lobby_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgPlayerLeftMatch::CMsgPlayerLeftMatch(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  xp_breakdown_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgPlayerLeftMatch)
}
CMsgPlayerLeftMatch::CMsgPlayerLeftMatch(const CMsgPlayerLeftMatch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      xp_breakdown_(from.xp_breakdown_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steam_id_, &from.steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&match_id_) -
    reinterpret_cast<char*>(&steam_id_)) + sizeof(match_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgPlayerLeftMatch)
}

void CMsgPlayerLeftMatch::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steam_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&match_id_) -
    reinterpret_cast<char*>(&steam_id_)) + sizeof(match_id_));
}

CMsgPlayerLeftMatch::~CMsgPlayerLeftMatch() {
  // @@protoc_insertion_point(destructor:CMsgPlayerLeftMatch)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgPlayerLeftMatch::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgPlayerLeftMatch::ArenaDtor(void* object) {
  CMsgPlayerLeftMatch* _this = reinterpret_cast< CMsgPlayerLeftMatch* >(object);
  (void)_this;
}
void CMsgPlayerLeftMatch::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgPlayerLeftMatch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgPlayerLeftMatch::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPlayerLeftMatch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  xp_breakdown_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&match_id_) -
        reinterpret_cast<char*>(&steam_id_)) + sizeof(match_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPlayerLeftMatch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steam_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_steam_id(&has_bits);
          steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional .TFMatchLeaveReason leave_reason = 2 [default = TFMatchLeaveReason_UNSPECIFIED];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TFMatchLeaveReason_IsValid(val))) {
            _internal_set_leave_reason(static_cast<::TFMatchLeaveReason>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool was_abandon = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_was_abandon(&has_bits);
          was_abandon_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 lobby_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_lobby_id(&has_bits);
          lobby_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 match_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_match_id(&has_bits);
          match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgTFXPSource xp_breakdown = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_xp_breakdown(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgPlayerLeftMatch::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPlayerLeftMatch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steam_id(), target);
  }

  // optional .TFMatchLeaveReason leave_reason = 2 [default = TFMatchLeaveReason_UNSPECIFIED];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_leave_reason(), target);
  }

  // optional bool was_abandon = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_was_abandon(), target);
  }

  // optional uint64 lobby_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_lobby_id(), target);
  }

  // optional uint64 match_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_match_id(), target);
  }

  // repeated .CMsgTFXPSource xp_breakdown = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_xp_breakdown_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_xp_breakdown(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPlayerLeftMatch)
  return target;
}

size_t CMsgPlayerLeftMatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPlayerLeftMatch)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgTFXPSource xp_breakdown = 6;
  total_size += 1UL * this->_internal_xp_breakdown_size();
  for (const auto& msg : this->xp_breakdown_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional fixed64 steam_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional .TFMatchLeaveReason leave_reason = 2 [default = TFMatchLeaveReason_UNSPECIFIED];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_leave_reason());
    }

    // optional bool was_abandon = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional uint64 lobby_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_lobby_id());
    }

    // optional uint64 match_id = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_match_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPlayerLeftMatch::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgPlayerLeftMatch)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPlayerLeftMatch* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgPlayerLeftMatch>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgPlayerLeftMatch)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgPlayerLeftMatch)
    MergeFrom(*source);
  }
}

void CMsgPlayerLeftMatch::MergeFrom(const CMsgPlayerLeftMatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgPlayerLeftMatch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  xp_breakdown_.MergeFrom(from.xp_breakdown_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      leave_reason_ = from.leave_reason_;
    }
    if (cached_has_bits & 0x00000004u) {
      was_abandon_ = from.was_abandon_;
    }
    if (cached_has_bits & 0x00000008u) {
      lobby_id_ = from.lobby_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      match_id_ = from.match_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgPlayerLeftMatch::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgPlayerLeftMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPlayerLeftMatch::CopyFrom(const CMsgPlayerLeftMatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPlayerLeftMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPlayerLeftMatch::IsInitialized() const {
  return true;
}

void CMsgPlayerLeftMatch::InternalSwap(CMsgPlayerLeftMatch* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  xp_breakdown_.InternalSwap(&other->xp_breakdown_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgPlayerLeftMatch, match_id_)
      + sizeof(CMsgPlayerLeftMatch::match_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgPlayerLeftMatch, steam_id_)>(
          reinterpret_cast<char*>(&steam_id_),
          reinterpret_cast<char*>(&other->steam_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPlayerLeftMatch::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[114]);
}

// ===================================================================

class CMsgPlayerLeftMatchResponse::_Internal {
 public:
};

CMsgPlayerLeftMatchResponse::CMsgPlayerLeftMatchResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgPlayerLeftMatchResponse)
}
CMsgPlayerLeftMatchResponse::CMsgPlayerLeftMatchResponse(const CMsgPlayerLeftMatchResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgPlayerLeftMatchResponse)
}

void CMsgPlayerLeftMatchResponse::SharedCtor() {
}

CMsgPlayerLeftMatchResponse::~CMsgPlayerLeftMatchResponse() {
  // @@protoc_insertion_point(destructor:CMsgPlayerLeftMatchResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgPlayerLeftMatchResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgPlayerLeftMatchResponse::ArenaDtor(void* object) {
  CMsgPlayerLeftMatchResponse* _this = reinterpret_cast< CMsgPlayerLeftMatchResponse* >(object);
  (void)_this;
}
void CMsgPlayerLeftMatchResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgPlayerLeftMatchResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgPlayerLeftMatchResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPlayerLeftMatchResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPlayerLeftMatchResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgPlayerLeftMatchResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPlayerLeftMatchResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPlayerLeftMatchResponse)
  return target;
}

size_t CMsgPlayerLeftMatchResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPlayerLeftMatchResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPlayerLeftMatchResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgPlayerLeftMatchResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPlayerLeftMatchResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgPlayerLeftMatchResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgPlayerLeftMatchResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgPlayerLeftMatchResponse)
    MergeFrom(*source);
  }
}

void CMsgPlayerLeftMatchResponse::MergeFrom(const CMsgPlayerLeftMatchResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgPlayerLeftMatchResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgPlayerLeftMatchResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgPlayerLeftMatchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPlayerLeftMatchResponse::CopyFrom(const CMsgPlayerLeftMatchResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPlayerLeftMatchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPlayerLeftMatchResponse::IsInitialized() const {
  return true;
}

void CMsgPlayerLeftMatchResponse::InternalSwap(CMsgPlayerLeftMatchResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPlayerLeftMatchResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[115]);
}

// ===================================================================

class CMsgProcessMatchVoteKick_Vote::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgProcessMatchVoteKick_Vote>()._has_bits_);
  static void set_has_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_vote_yay(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgProcessMatchVoteKick_Vote::CMsgProcessMatchVoteKick_Vote(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgProcessMatchVoteKick.Vote)
}
CMsgProcessMatchVoteKick_Vote::CMsgProcessMatchVoteKick_Vote(const CMsgProcessMatchVoteKick_Vote& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steam_id_, &from.steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&vote_yay_) -
    reinterpret_cast<char*>(&steam_id_)) + sizeof(vote_yay_));
  // @@protoc_insertion_point(copy_constructor:CMsgProcessMatchVoteKick.Vote)
}

void CMsgProcessMatchVoteKick_Vote::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steam_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&vote_yay_) -
    reinterpret_cast<char*>(&steam_id_)) + sizeof(vote_yay_));
}

CMsgProcessMatchVoteKick_Vote::~CMsgProcessMatchVoteKick_Vote() {
  // @@protoc_insertion_point(destructor:CMsgProcessMatchVoteKick.Vote)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgProcessMatchVoteKick_Vote::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgProcessMatchVoteKick_Vote::ArenaDtor(void* object) {
  CMsgProcessMatchVoteKick_Vote* _this = reinterpret_cast< CMsgProcessMatchVoteKick_Vote* >(object);
  (void)_this;
}
void CMsgProcessMatchVoteKick_Vote::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgProcessMatchVoteKick_Vote::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgProcessMatchVoteKick_Vote::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgProcessMatchVoteKick.Vote)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&vote_yay_) -
        reinterpret_cast<char*>(&steam_id_)) + sizeof(vote_yay_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgProcessMatchVoteKick_Vote::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steam_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_steam_id(&has_bits);
          steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional bool vote_yay = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_vote_yay(&has_bits);
          vote_yay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgProcessMatchVoteKick_Vote::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgProcessMatchVoteKick.Vote)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steam_id(), target);
  }

  // optional bool vote_yay = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_vote_yay(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgProcessMatchVoteKick.Vote)
  return target;
}

size_t CMsgProcessMatchVoteKick_Vote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgProcessMatchVoteKick.Vote)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 steam_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional bool vote_yay = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgProcessMatchVoteKick_Vote::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgProcessMatchVoteKick.Vote)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgProcessMatchVoteKick_Vote* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgProcessMatchVoteKick_Vote>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgProcessMatchVoteKick.Vote)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgProcessMatchVoteKick.Vote)
    MergeFrom(*source);
  }
}

void CMsgProcessMatchVoteKick_Vote::MergeFrom(const CMsgProcessMatchVoteKick_Vote& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgProcessMatchVoteKick.Vote)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      vote_yay_ = from.vote_yay_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgProcessMatchVoteKick_Vote::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgProcessMatchVoteKick.Vote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgProcessMatchVoteKick_Vote::CopyFrom(const CMsgProcessMatchVoteKick_Vote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgProcessMatchVoteKick.Vote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgProcessMatchVoteKick_Vote::IsInitialized() const {
  return true;
}

void CMsgProcessMatchVoteKick_Vote::InternalSwap(CMsgProcessMatchVoteKick_Vote* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgProcessMatchVoteKick_Vote, vote_yay_)
      + sizeof(CMsgProcessMatchVoteKick_Vote::vote_yay_)
      - PROTOBUF_FIELD_OFFSET(CMsgProcessMatchVoteKick_Vote, steam_id_)>(
          reinterpret_cast<char*>(&steam_id_),
          reinterpret_cast<char*>(&other->steam_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgProcessMatchVoteKick_Vote::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[116]);
}

// ===================================================================

class CMsgProcessMatchVoteKick::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgProcessMatchVoteKick>()._has_bits_);
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_initiator_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_target_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_default_pass(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgProcessMatchVoteKick::CMsgProcessMatchVoteKick(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  votes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgProcessMatchVoteKick)
}
CMsgProcessMatchVoteKick::CMsgProcessMatchVoteKick(const CMsgProcessMatchVoteKick& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      votes_(from.votes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&match_id_, &from.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&default_pass_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(default_pass_));
  // @@protoc_insertion_point(copy_constructor:CMsgProcessMatchVoteKick)
}

void CMsgProcessMatchVoteKick::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&match_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&default_pass_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(default_pass_));
}

CMsgProcessMatchVoteKick::~CMsgProcessMatchVoteKick() {
  // @@protoc_insertion_point(destructor:CMsgProcessMatchVoteKick)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgProcessMatchVoteKick::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgProcessMatchVoteKick::ArenaDtor(void* object) {
  CMsgProcessMatchVoteKick* _this = reinterpret_cast< CMsgProcessMatchVoteKick* >(object);
  (void)_this;
}
void CMsgProcessMatchVoteKick::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgProcessMatchVoteKick::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgProcessMatchVoteKick::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgProcessMatchVoteKick)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  votes_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&default_pass_) -
        reinterpret_cast<char*>(&match_id_)) + sizeof(default_pass_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgProcessMatchVoteKick::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 match_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_match_id(&has_bits);
          match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed64 initiator_steam_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_initiator_steam_id(&has_bits);
          initiator_steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed64 target_steam_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_target_steam_id(&has_bits);
          target_steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional .TFVoteKickReason reason = 4 [default = TFVoteKickReason_Other];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TFVoteKickReason_IsValid(val))) {
            _internal_set_reason(static_cast<::TFVoteKickReason>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .CMsgProcessMatchVoteKick.Vote votes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_votes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool default_pass = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_default_pass(&has_bits);
          default_pass_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgProcessMatchVoteKick::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgProcessMatchVoteKick)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_match_id(), target);
  }

  // optional fixed64 initiator_steam_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_initiator_steam_id(), target);
  }

  // optional fixed64 target_steam_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_target_steam_id(), target);
  }

  // optional .TFVoteKickReason reason = 4 [default = TFVoteKickReason_Other];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_reason(), target);
  }

  // repeated .CMsgProcessMatchVoteKick.Vote votes = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_votes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_votes(i), target, stream);
  }

  // optional bool default_pass = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_default_pass(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgProcessMatchVoteKick)
  return target;
}

size_t CMsgProcessMatchVoteKick::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgProcessMatchVoteKick)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgProcessMatchVoteKick.Vote votes = 5;
  total_size += 1UL * this->_internal_votes_size();
  for (const auto& msg : this->votes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional fixed64 match_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed64 initiator_steam_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional fixed64 target_steam_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional .TFVoteKickReason reason = 4 [default = TFVoteKickReason_Other];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reason());
    }

    // optional bool default_pass = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgProcessMatchVoteKick::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgProcessMatchVoteKick)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgProcessMatchVoteKick* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgProcessMatchVoteKick>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgProcessMatchVoteKick)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgProcessMatchVoteKick)
    MergeFrom(*source);
  }
}

void CMsgProcessMatchVoteKick::MergeFrom(const CMsgProcessMatchVoteKick& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgProcessMatchVoteKick)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  votes_.MergeFrom(from.votes_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      initiator_steam_id_ = from.initiator_steam_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      target_steam_id_ = from.target_steam_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      reason_ = from.reason_;
    }
    if (cached_has_bits & 0x00000010u) {
      default_pass_ = from.default_pass_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgProcessMatchVoteKick::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgProcessMatchVoteKick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgProcessMatchVoteKick::CopyFrom(const CMsgProcessMatchVoteKick& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgProcessMatchVoteKick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgProcessMatchVoteKick::IsInitialized() const {
  return true;
}

void CMsgProcessMatchVoteKick::InternalSwap(CMsgProcessMatchVoteKick* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  votes_.InternalSwap(&other->votes_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgProcessMatchVoteKick, default_pass_)
      + sizeof(CMsgProcessMatchVoteKick::default_pass_)
      - PROTOBUF_FIELD_OFFSET(CMsgProcessMatchVoteKick, match_id_)>(
          reinterpret_cast<char*>(&match_id_),
          reinterpret_cast<char*>(&other->match_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgProcessMatchVoteKick::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[117]);
}

// ===================================================================

class CMsgProcessMatchVoteKickResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgProcessMatchVoteKickResponse>()._has_bits_);
  static void set_has_rip(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgProcessMatchVoteKickResponse::CMsgProcessMatchVoteKickResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgProcessMatchVoteKickResponse)
}
CMsgProcessMatchVoteKickResponse::CMsgProcessMatchVoteKickResponse(const CMsgProcessMatchVoteKickResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rip_ = from.rip_;
  // @@protoc_insertion_point(copy_constructor:CMsgProcessMatchVoteKickResponse)
}

void CMsgProcessMatchVoteKickResponse::SharedCtor() {
rip_ = false;
}

CMsgProcessMatchVoteKickResponse::~CMsgProcessMatchVoteKickResponse() {
  // @@protoc_insertion_point(destructor:CMsgProcessMatchVoteKickResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgProcessMatchVoteKickResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgProcessMatchVoteKickResponse::ArenaDtor(void* object) {
  CMsgProcessMatchVoteKickResponse* _this = reinterpret_cast< CMsgProcessMatchVoteKickResponse* >(object);
  (void)_this;
}
void CMsgProcessMatchVoteKickResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgProcessMatchVoteKickResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgProcessMatchVoteKickResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgProcessMatchVoteKickResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rip_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgProcessMatchVoteKickResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool rip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_rip(&has_bits);
          rip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgProcessMatchVoteKickResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgProcessMatchVoteKickResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool rip = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_rip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgProcessMatchVoteKickResponse)
  return target;
}

size_t CMsgProcessMatchVoteKickResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgProcessMatchVoteKickResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool rip = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgProcessMatchVoteKickResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgProcessMatchVoteKickResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgProcessMatchVoteKickResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgProcessMatchVoteKickResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgProcessMatchVoteKickResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgProcessMatchVoteKickResponse)
    MergeFrom(*source);
  }
}

void CMsgProcessMatchVoteKickResponse::MergeFrom(const CMsgProcessMatchVoteKickResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgProcessMatchVoteKickResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_rip()) {
    _internal_set_rip(from._internal_rip());
  }
}

void CMsgProcessMatchVoteKickResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgProcessMatchVoteKickResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgProcessMatchVoteKickResponse::CopyFrom(const CMsgProcessMatchVoteKickResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgProcessMatchVoteKickResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgProcessMatchVoteKickResponse::IsInitialized() const {
  return true;
}

void CMsgProcessMatchVoteKickResponse::InternalSwap(CMsgProcessMatchVoteKickResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(rip_, other->rip_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgProcessMatchVoteKickResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[118]);
}

// ===================================================================

class CMsgPlayerVoteKickedAfterLeavingMatchResponse::_Internal {
 public:
};

CMsgPlayerVoteKickedAfterLeavingMatchResponse::CMsgPlayerVoteKickedAfterLeavingMatchResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgPlayerVoteKickedAfterLeavingMatchResponse)
}
CMsgPlayerVoteKickedAfterLeavingMatchResponse::CMsgPlayerVoteKickedAfterLeavingMatchResponse(const CMsgPlayerVoteKickedAfterLeavingMatchResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgPlayerVoteKickedAfterLeavingMatchResponse)
}

void CMsgPlayerVoteKickedAfterLeavingMatchResponse::SharedCtor() {
}

CMsgPlayerVoteKickedAfterLeavingMatchResponse::~CMsgPlayerVoteKickedAfterLeavingMatchResponse() {
  // @@protoc_insertion_point(destructor:CMsgPlayerVoteKickedAfterLeavingMatchResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgPlayerVoteKickedAfterLeavingMatchResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgPlayerVoteKickedAfterLeavingMatchResponse::ArenaDtor(void* object) {
  CMsgPlayerVoteKickedAfterLeavingMatchResponse* _this = reinterpret_cast< CMsgPlayerVoteKickedAfterLeavingMatchResponse* >(object);
  (void)_this;
}
void CMsgPlayerVoteKickedAfterLeavingMatchResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgPlayerVoteKickedAfterLeavingMatchResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgPlayerVoteKickedAfterLeavingMatchResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPlayerVoteKickedAfterLeavingMatchResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPlayerVoteKickedAfterLeavingMatchResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgPlayerVoteKickedAfterLeavingMatchResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPlayerVoteKickedAfterLeavingMatchResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPlayerVoteKickedAfterLeavingMatchResponse)
  return target;
}

size_t CMsgPlayerVoteKickedAfterLeavingMatchResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPlayerVoteKickedAfterLeavingMatchResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPlayerVoteKickedAfterLeavingMatchResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgPlayerVoteKickedAfterLeavingMatchResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPlayerVoteKickedAfterLeavingMatchResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgPlayerVoteKickedAfterLeavingMatchResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgPlayerVoteKickedAfterLeavingMatchResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgPlayerVoteKickedAfterLeavingMatchResponse)
    MergeFrom(*source);
  }
}

void CMsgPlayerVoteKickedAfterLeavingMatchResponse::MergeFrom(const CMsgPlayerVoteKickedAfterLeavingMatchResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgPlayerVoteKickedAfterLeavingMatchResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgPlayerVoteKickedAfterLeavingMatchResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgPlayerVoteKickedAfterLeavingMatchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPlayerVoteKickedAfterLeavingMatchResponse::CopyFrom(const CMsgPlayerVoteKickedAfterLeavingMatchResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPlayerVoteKickedAfterLeavingMatchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPlayerVoteKickedAfterLeavingMatchResponse::IsInitialized() const {
  return true;
}

void CMsgPlayerVoteKickedAfterLeavingMatchResponse::InternalSwap(CMsgPlayerVoteKickedAfterLeavingMatchResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPlayerVoteKickedAfterLeavingMatchResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[119]);
}

// ===================================================================

class CMsgHalloween_ServerBossEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgHalloween_ServerBossEvent>()._has_bits_);
  static void set_has_event_counter(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_boss_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_boss_level(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_event_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_players_involved(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_elapsed_time(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CMsgHalloween_ServerBossEvent::CMsgHalloween_ServerBossEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgHalloween_ServerBossEvent)
}
CMsgHalloween_ServerBossEvent::CMsgHalloween_ServerBossEvent(const CMsgHalloween_ServerBossEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&event_counter_, &from.event_counter_,
    static_cast<size_t>(reinterpret_cast<char*>(&elapsed_time_) -
    reinterpret_cast<char*>(&event_counter_)) + sizeof(elapsed_time_));
  // @@protoc_insertion_point(copy_constructor:CMsgHalloween_ServerBossEvent)
}

void CMsgHalloween_ServerBossEvent::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&event_counter_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&elapsed_time_) -
    reinterpret_cast<char*>(&event_counter_)) + sizeof(elapsed_time_));
}

CMsgHalloween_ServerBossEvent::~CMsgHalloween_ServerBossEvent() {
  // @@protoc_insertion_point(destructor:CMsgHalloween_ServerBossEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgHalloween_ServerBossEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgHalloween_ServerBossEvent::ArenaDtor(void* object) {
  CMsgHalloween_ServerBossEvent* _this = reinterpret_cast< CMsgHalloween_ServerBossEvent* >(object);
  (void)_this;
}
void CMsgHalloween_ServerBossEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgHalloween_ServerBossEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgHalloween_ServerBossEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgHalloween_ServerBossEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&event_counter_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&elapsed_time_) -
        reinterpret_cast<char*>(&event_counter_)) + sizeof(elapsed_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgHalloween_ServerBossEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 event_counter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_event_counter(&has_bits);
          event_counter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 boss_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_boss_type(&has_bits);
          boss_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 boss_level = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_boss_level(&has_bits);
          boss_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 event_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_event_type(&has_bits);
          event_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 players_involved = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_players_involved(&has_bits);
          players_involved_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float elapsed_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_elapsed_time(&has_bits);
          elapsed_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgHalloween_ServerBossEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgHalloween_ServerBossEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 event_counter = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_event_counter(), target);
  }

  // optional uint32 timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_timestamp(), target);
  }

  // optional uint32 boss_type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_boss_type(), target);
  }

  // optional uint32 boss_level = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_boss_level(), target);
  }

  // optional uint32 event_type = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_event_type(), target);
  }

  // optional uint32 players_involved = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_players_involved(), target);
  }

  // optional float elapsed_time = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_elapsed_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgHalloween_ServerBossEvent)
  return target;
}

size_t CMsgHalloween_ServerBossEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgHalloween_ServerBossEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional uint32 event_counter = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_event_counter());
    }

    // optional uint32 timestamp = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_timestamp());
    }

    // optional uint32 boss_type = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_boss_type());
    }

    // optional uint32 boss_level = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_boss_level());
    }

    // optional uint32 event_type = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_event_type());
    }

    // optional uint32 players_involved = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_players_involved());
    }

    // optional float elapsed_time = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgHalloween_ServerBossEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgHalloween_ServerBossEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgHalloween_ServerBossEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgHalloween_ServerBossEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgHalloween_ServerBossEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgHalloween_ServerBossEvent)
    MergeFrom(*source);
  }
}

void CMsgHalloween_ServerBossEvent::MergeFrom(const CMsgHalloween_ServerBossEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgHalloween_ServerBossEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      event_counter_ = from.event_counter_;
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      boss_type_ = from.boss_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      boss_level_ = from.boss_level_;
    }
    if (cached_has_bits & 0x00000010u) {
      event_type_ = from.event_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      players_involved_ = from.players_involved_;
    }
    if (cached_has_bits & 0x00000040u) {
      elapsed_time_ = from.elapsed_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgHalloween_ServerBossEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgHalloween_ServerBossEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgHalloween_ServerBossEvent::CopyFrom(const CMsgHalloween_ServerBossEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgHalloween_ServerBossEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgHalloween_ServerBossEvent::IsInitialized() const {
  return true;
}

void CMsgHalloween_ServerBossEvent::InternalSwap(CMsgHalloween_ServerBossEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgHalloween_ServerBossEvent, elapsed_time_)
      + sizeof(CMsgHalloween_ServerBossEvent::elapsed_time_)
      - PROTOBUF_FIELD_OFFSET(CMsgHalloween_ServerBossEvent, event_counter_)>(
          reinterpret_cast<char*>(&event_counter_),
          reinterpret_cast<char*>(&other->event_counter_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgHalloween_ServerBossEvent::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[120]);
}

// ===================================================================

class CMsgHalloween_Merasmus2012::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgHalloween_Merasmus2012>()._has_bits_);
  static void set_has_event_counter(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_time_submitted(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_valve_server(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_boss_level(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_spawned_health(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_remaining_health(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_life_time(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_bomb_kills(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_staff_kills(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_pvp_kills(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_prophunt_time1(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_prophunt_time2(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_dmg_scout(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_dmg_sniper(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_dmg_soldier(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_dmg_demo(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_dmg_medic(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_dmg_heavy(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_dmg_pyro(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_dmg_spy(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_dmg_engineer(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_scout_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_sniper_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_solider_count(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_demo_count(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_medic_count(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_heavy_count(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_pyro_count(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_spy_count(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_engineer_count(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
};

CMsgHalloween_Merasmus2012::CMsgHalloween_Merasmus2012(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgHalloween_Merasmus2012)
}
CMsgHalloween_Merasmus2012::CMsgHalloween_Merasmus2012(const CMsgHalloween_Merasmus2012& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&event_counter_, &from.event_counter_,
    static_cast<size_t>(reinterpret_cast<char*>(&engineer_count_) -
    reinterpret_cast<char*>(&event_counter_)) + sizeof(engineer_count_));
  // @@protoc_insertion_point(copy_constructor:CMsgHalloween_Merasmus2012)
}

void CMsgHalloween_Merasmus2012::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&event_counter_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&engineer_count_) -
    reinterpret_cast<char*>(&event_counter_)) + sizeof(engineer_count_));
}

CMsgHalloween_Merasmus2012::~CMsgHalloween_Merasmus2012() {
  // @@protoc_insertion_point(destructor:CMsgHalloween_Merasmus2012)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgHalloween_Merasmus2012::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgHalloween_Merasmus2012::ArenaDtor(void* object) {
  CMsgHalloween_Merasmus2012* _this = reinterpret_cast< CMsgHalloween_Merasmus2012* >(object);
  (void)_this;
}
void CMsgHalloween_Merasmus2012::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgHalloween_Merasmus2012::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgHalloween_Merasmus2012::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgHalloween_Merasmus2012)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&event_counter_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bomb_kills_) -
        reinterpret_cast<char*>(&event_counter_)) + sizeof(bomb_kills_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&staff_kills_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dmg_demo_) -
        reinterpret_cast<char*>(&staff_kills_)) + sizeof(dmg_demo_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&dmg_medic_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&solider_count_) -
        reinterpret_cast<char*>(&dmg_medic_)) + sizeof(solider_count_));
  }
  if (cached_has_bits & 0x3f000000u) {
    ::memset(&demo_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&engineer_count_) -
        reinterpret_cast<char*>(&demo_count_)) + sizeof(engineer_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgHalloween_Merasmus2012::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 event_counter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_event_counter(&has_bits);
          event_counter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 time_submitted = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_time_submitted(&has_bits);
          time_submitted_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional bool is_valve_server = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_is_valve_server(&has_bits);
          is_valve_server_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 boss_level = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_boss_level(&has_bits);
          boss_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 spawned_health = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_spawned_health(&has_bits);
          spawned_health_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 remaining_health = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_remaining_health(&has_bits);
          remaining_health_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 life_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_life_time(&has_bits);
          life_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 bomb_kills = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_bomb_kills(&has_bits);
          bomb_kills_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 staff_kills = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_staff_kills(&has_bits);
          staff_kills_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 pvp_kills = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_pvp_kills(&has_bits);
          pvp_kills_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 prophunt_time1 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_prophunt_time1(&has_bits);
          prophunt_time1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 prophunt_time2 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_prophunt_time2(&has_bits);
          prophunt_time2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 dmg_scout = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_dmg_scout(&has_bits);
          dmg_scout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 dmg_sniper = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_dmg_sniper(&has_bits);
          dmg_sniper_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 dmg_soldier = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_dmg_soldier(&has_bits);
          dmg_soldier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 dmg_demo = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_dmg_demo(&has_bits);
          dmg_demo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 dmg_medic = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_dmg_medic(&has_bits);
          dmg_medic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 dmg_heavy = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_dmg_heavy(&has_bits);
          dmg_heavy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 dmg_pyro = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_dmg_pyro(&has_bits);
          dmg_pyro_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 dmg_spy = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_dmg_spy(&has_bits);
          dmg_spy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 dmg_engineer = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_dmg_engineer(&has_bits);
          dmg_engineer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 scout_count = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_scout_count(&has_bits);
          scout_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 sniper_count = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_sniper_count(&has_bits);
          sniper_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 solider_count = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_solider_count(&has_bits);
          solider_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 demo_count = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_demo_count(&has_bits);
          demo_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 medic_count = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_medic_count(&has_bits);
          medic_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 heavy_count = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_heavy_count(&has_bits);
          heavy_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 pyro_count = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_pyro_count(&has_bits);
          pyro_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 spy_count = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_spy_count(&has_bits);
          spy_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 engineer_count = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_engineer_count(&has_bits);
          engineer_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgHalloween_Merasmus2012::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgHalloween_Merasmus2012)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 event_counter = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_event_counter(), target);
  }

  // optional fixed32 time_submitted = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(2, this->_internal_time_submitted(), target);
  }

  // optional bool is_valve_server = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_valve_server(), target);
  }

  // optional uint32 boss_level = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_boss_level(), target);
  }

  // optional uint32 spawned_health = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_spawned_health(), target);
  }

  // optional uint32 remaining_health = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_remaining_health(), target);
  }

  // optional uint32 life_time = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_life_time(), target);
  }

  // optional uint32 bomb_kills = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_bomb_kills(), target);
  }

  // optional uint32 staff_kills = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_staff_kills(), target);
  }

  // optional uint32 pvp_kills = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_pvp_kills(), target);
  }

  // optional uint32 prophunt_time1 = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_prophunt_time1(), target);
  }

  // optional uint32 prophunt_time2 = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_prophunt_time2(), target);
  }

  // optional uint32 dmg_scout = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_dmg_scout(), target);
  }

  // optional uint32 dmg_sniper = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_dmg_sniper(), target);
  }

  // optional uint32 dmg_soldier = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_dmg_soldier(), target);
  }

  // optional uint32 dmg_demo = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_dmg_demo(), target);
  }

  // optional uint32 dmg_medic = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_dmg_medic(), target);
  }

  // optional uint32 dmg_heavy = 18;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_dmg_heavy(), target);
  }

  // optional uint32 dmg_pyro = 19;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_dmg_pyro(), target);
  }

  // optional uint32 dmg_spy = 20;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_dmg_spy(), target);
  }

  // optional uint32 dmg_engineer = 21;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(21, this->_internal_dmg_engineer(), target);
  }

  // optional uint32 scout_count = 22;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->_internal_scout_count(), target);
  }

  // optional uint32 sniper_count = 23;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(23, this->_internal_sniper_count(), target);
  }

  // optional uint32 solider_count = 24;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(24, this->_internal_solider_count(), target);
  }

  // optional uint32 demo_count = 25;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(25, this->_internal_demo_count(), target);
  }

  // optional uint32 medic_count = 26;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(26, this->_internal_medic_count(), target);
  }

  // optional uint32 heavy_count = 27;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(27, this->_internal_heavy_count(), target);
  }

  // optional uint32 pyro_count = 28;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(28, this->_internal_pyro_count(), target);
  }

  // optional uint32 spy_count = 29;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(29, this->_internal_spy_count(), target);
  }

  // optional uint32 engineer_count = 30;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(30, this->_internal_engineer_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgHalloween_Merasmus2012)
  return target;
}

size_t CMsgHalloween_Merasmus2012::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgHalloween_Merasmus2012)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 event_counter = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_event_counter());
    }

    // optional fixed32 time_submitted = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional bool is_valve_server = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional uint32 boss_level = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_boss_level());
    }

    // optional uint32 spawned_health = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_spawned_health());
    }

    // optional uint32 remaining_health = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_remaining_health());
    }

    // optional uint32 life_time = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_life_time());
    }

    // optional uint32 bomb_kills = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_bomb_kills());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 staff_kills = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_staff_kills());
    }

    // optional uint32 pvp_kills = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pvp_kills());
    }

    // optional uint32 prophunt_time1 = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_prophunt_time1());
    }

    // optional uint32 prophunt_time2 = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_prophunt_time2());
    }

    // optional uint32 dmg_scout = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_dmg_scout());
    }

    // optional uint32 dmg_sniper = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_dmg_sniper());
    }

    // optional uint32 dmg_soldier = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_dmg_soldier());
    }

    // optional uint32 dmg_demo = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_dmg_demo());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional uint32 dmg_medic = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_dmg_medic());
    }

    // optional uint32 dmg_heavy = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_dmg_heavy());
    }

    // optional uint32 dmg_pyro = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_dmg_pyro());
    }

    // optional uint32 dmg_spy = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_dmg_spy());
    }

    // optional uint32 dmg_engineer = 21;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_dmg_engineer());
    }

    // optional uint32 scout_count = 22;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_scout_count());
    }

    // optional uint32 sniper_count = 23;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_sniper_count());
    }

    // optional uint32 solider_count = 24;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_solider_count());
    }

  }
  if (cached_has_bits & 0x3f000000u) {
    // optional uint32 demo_count = 25;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_demo_count());
    }

    // optional uint32 medic_count = 26;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_medic_count());
    }

    // optional uint32 heavy_count = 27;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_heavy_count());
    }

    // optional uint32 pyro_count = 28;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pyro_count());
    }

    // optional uint32 spy_count = 29;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_spy_count());
    }

    // optional uint32 engineer_count = 30;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_engineer_count());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgHalloween_Merasmus2012::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgHalloween_Merasmus2012)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgHalloween_Merasmus2012* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgHalloween_Merasmus2012>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgHalloween_Merasmus2012)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgHalloween_Merasmus2012)
    MergeFrom(*source);
  }
}

void CMsgHalloween_Merasmus2012::MergeFrom(const CMsgHalloween_Merasmus2012& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgHalloween_Merasmus2012)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      event_counter_ = from.event_counter_;
    }
    if (cached_has_bits & 0x00000002u) {
      time_submitted_ = from.time_submitted_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_valve_server_ = from.is_valve_server_;
    }
    if (cached_has_bits & 0x00000008u) {
      boss_level_ = from.boss_level_;
    }
    if (cached_has_bits & 0x00000010u) {
      spawned_health_ = from.spawned_health_;
    }
    if (cached_has_bits & 0x00000020u) {
      remaining_health_ = from.remaining_health_;
    }
    if (cached_has_bits & 0x00000040u) {
      life_time_ = from.life_time_;
    }
    if (cached_has_bits & 0x00000080u) {
      bomb_kills_ = from.bomb_kills_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      staff_kills_ = from.staff_kills_;
    }
    if (cached_has_bits & 0x00000200u) {
      pvp_kills_ = from.pvp_kills_;
    }
    if (cached_has_bits & 0x00000400u) {
      prophunt_time1_ = from.prophunt_time1_;
    }
    if (cached_has_bits & 0x00000800u) {
      prophunt_time2_ = from.prophunt_time2_;
    }
    if (cached_has_bits & 0x00001000u) {
      dmg_scout_ = from.dmg_scout_;
    }
    if (cached_has_bits & 0x00002000u) {
      dmg_sniper_ = from.dmg_sniper_;
    }
    if (cached_has_bits & 0x00004000u) {
      dmg_soldier_ = from.dmg_soldier_;
    }
    if (cached_has_bits & 0x00008000u) {
      dmg_demo_ = from.dmg_demo_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      dmg_medic_ = from.dmg_medic_;
    }
    if (cached_has_bits & 0x00020000u) {
      dmg_heavy_ = from.dmg_heavy_;
    }
    if (cached_has_bits & 0x00040000u) {
      dmg_pyro_ = from.dmg_pyro_;
    }
    if (cached_has_bits & 0x00080000u) {
      dmg_spy_ = from.dmg_spy_;
    }
    if (cached_has_bits & 0x00100000u) {
      dmg_engineer_ = from.dmg_engineer_;
    }
    if (cached_has_bits & 0x00200000u) {
      scout_count_ = from.scout_count_;
    }
    if (cached_has_bits & 0x00400000u) {
      sniper_count_ = from.sniper_count_;
    }
    if (cached_has_bits & 0x00800000u) {
      solider_count_ = from.solider_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x3f000000u) {
    if (cached_has_bits & 0x01000000u) {
      demo_count_ = from.demo_count_;
    }
    if (cached_has_bits & 0x02000000u) {
      medic_count_ = from.medic_count_;
    }
    if (cached_has_bits & 0x04000000u) {
      heavy_count_ = from.heavy_count_;
    }
    if (cached_has_bits & 0x08000000u) {
      pyro_count_ = from.pyro_count_;
    }
    if (cached_has_bits & 0x10000000u) {
      spy_count_ = from.spy_count_;
    }
    if (cached_has_bits & 0x20000000u) {
      engineer_count_ = from.engineer_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgHalloween_Merasmus2012::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgHalloween_Merasmus2012)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgHalloween_Merasmus2012::CopyFrom(const CMsgHalloween_Merasmus2012& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgHalloween_Merasmus2012)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgHalloween_Merasmus2012::IsInitialized() const {
  return true;
}

void CMsgHalloween_Merasmus2012::InternalSwap(CMsgHalloween_Merasmus2012* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgHalloween_Merasmus2012, engineer_count_)
      + sizeof(CMsgHalloween_Merasmus2012::engineer_count_)
      - PROTOBUF_FIELD_OFFSET(CMsgHalloween_Merasmus2012, event_counter_)>(
          reinterpret_cast<char*>(&event_counter_),
          reinterpret_cast<char*>(&other->event_counter_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgHalloween_Merasmus2012::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[121]);
}

// ===================================================================

class CMsgUpdateHalloweenMerasmusLootLevel_Player::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgUpdateHalloweenMerasmusLootLevel_Player>()._has_bits_);
  static void set_has_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgUpdateHalloweenMerasmusLootLevel_Player::CMsgUpdateHalloweenMerasmusLootLevel_Player(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgUpdateHalloweenMerasmusLootLevel.Player)
}
CMsgUpdateHalloweenMerasmusLootLevel_Player::CMsgUpdateHalloweenMerasmusLootLevel_Player(const CMsgUpdateHalloweenMerasmusLootLevel_Player& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  steam_id_ = from.steam_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgUpdateHalloweenMerasmusLootLevel.Player)
}

void CMsgUpdateHalloweenMerasmusLootLevel_Player::SharedCtor() {
steam_id_ = uint64_t{0u};
}

CMsgUpdateHalloweenMerasmusLootLevel_Player::~CMsgUpdateHalloweenMerasmusLootLevel_Player() {
  // @@protoc_insertion_point(destructor:CMsgUpdateHalloweenMerasmusLootLevel.Player)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgUpdateHalloweenMerasmusLootLevel_Player::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgUpdateHalloweenMerasmusLootLevel_Player::ArenaDtor(void* object) {
  CMsgUpdateHalloweenMerasmusLootLevel_Player* _this = reinterpret_cast< CMsgUpdateHalloweenMerasmusLootLevel_Player* >(object);
  (void)_this;
}
void CMsgUpdateHalloweenMerasmusLootLevel_Player::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgUpdateHalloweenMerasmusLootLevel_Player::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgUpdateHalloweenMerasmusLootLevel_Player::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgUpdateHalloweenMerasmusLootLevel.Player)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  steam_id_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgUpdateHalloweenMerasmusLootLevel_Player::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steam_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_steam_id(&has_bits);
          steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgUpdateHalloweenMerasmusLootLevel_Player::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgUpdateHalloweenMerasmusLootLevel.Player)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steam_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgUpdateHalloweenMerasmusLootLevel.Player)
  return target;
}

size_t CMsgUpdateHalloweenMerasmusLootLevel_Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgUpdateHalloweenMerasmusLootLevel.Player)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 steam_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgUpdateHalloweenMerasmusLootLevel_Player::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgUpdateHalloweenMerasmusLootLevel.Player)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgUpdateHalloweenMerasmusLootLevel_Player* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgUpdateHalloweenMerasmusLootLevel_Player>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgUpdateHalloweenMerasmusLootLevel.Player)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgUpdateHalloweenMerasmusLootLevel.Player)
    MergeFrom(*source);
  }
}

void CMsgUpdateHalloweenMerasmusLootLevel_Player::MergeFrom(const CMsgUpdateHalloweenMerasmusLootLevel_Player& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgUpdateHalloweenMerasmusLootLevel.Player)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_steam_id()) {
    _internal_set_steam_id(from._internal_steam_id());
  }
}

void CMsgUpdateHalloweenMerasmusLootLevel_Player::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgUpdateHalloweenMerasmusLootLevel.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgUpdateHalloweenMerasmusLootLevel_Player::CopyFrom(const CMsgUpdateHalloweenMerasmusLootLevel_Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgUpdateHalloweenMerasmusLootLevel.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgUpdateHalloweenMerasmusLootLevel_Player::IsInitialized() const {
  return true;
}

void CMsgUpdateHalloweenMerasmusLootLevel_Player::InternalSwap(CMsgUpdateHalloweenMerasmusLootLevel_Player* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steam_id_, other->steam_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgUpdateHalloweenMerasmusLootLevel_Player::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[122]);
}

// ===================================================================

class CMsgUpdateHalloweenMerasmusLootLevel::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgUpdateHalloweenMerasmusLootLevel>()._has_bits_);
  static void set_has_merasmus_level(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgUpdateHalloweenMerasmusLootLevel::CMsgUpdateHalloweenMerasmusLootLevel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  players_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgUpdateHalloweenMerasmusLootLevel)
}
CMsgUpdateHalloweenMerasmusLootLevel::CMsgUpdateHalloweenMerasmusLootLevel(const CMsgUpdateHalloweenMerasmusLootLevel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      players_(from.players_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  merasmus_level_ = from.merasmus_level_;
  // @@protoc_insertion_point(copy_constructor:CMsgUpdateHalloweenMerasmusLootLevel)
}

void CMsgUpdateHalloweenMerasmusLootLevel::SharedCtor() {
merasmus_level_ = 0u;
}

CMsgUpdateHalloweenMerasmusLootLevel::~CMsgUpdateHalloweenMerasmusLootLevel() {
  // @@protoc_insertion_point(destructor:CMsgUpdateHalloweenMerasmusLootLevel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgUpdateHalloweenMerasmusLootLevel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgUpdateHalloweenMerasmusLootLevel::ArenaDtor(void* object) {
  CMsgUpdateHalloweenMerasmusLootLevel* _this = reinterpret_cast< CMsgUpdateHalloweenMerasmusLootLevel* >(object);
  (void)_this;
}
void CMsgUpdateHalloweenMerasmusLootLevel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgUpdateHalloweenMerasmusLootLevel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgUpdateHalloweenMerasmusLootLevel::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgUpdateHalloweenMerasmusLootLevel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  merasmus_level_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgUpdateHalloweenMerasmusLootLevel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgUpdateHalloweenMerasmusLootLevel.Player players = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 merasmus_level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_merasmus_level(&has_bits);
          merasmus_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgUpdateHalloweenMerasmusLootLevel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgUpdateHalloweenMerasmusLootLevel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgUpdateHalloweenMerasmusLootLevel.Player players = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_players_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_players(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 merasmus_level = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_merasmus_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgUpdateHalloweenMerasmusLootLevel)
  return target;
}

size_t CMsgUpdateHalloweenMerasmusLootLevel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgUpdateHalloweenMerasmusLootLevel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgUpdateHalloweenMerasmusLootLevel.Player players = 1;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 merasmus_level = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_merasmus_level());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgUpdateHalloweenMerasmusLootLevel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgUpdateHalloweenMerasmusLootLevel)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgUpdateHalloweenMerasmusLootLevel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgUpdateHalloweenMerasmusLootLevel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgUpdateHalloweenMerasmusLootLevel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgUpdateHalloweenMerasmusLootLevel)
    MergeFrom(*source);
  }
}

void CMsgUpdateHalloweenMerasmusLootLevel::MergeFrom(const CMsgUpdateHalloweenMerasmusLootLevel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgUpdateHalloweenMerasmusLootLevel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  if (from._internal_has_merasmus_level()) {
    _internal_set_merasmus_level(from._internal_merasmus_level());
  }
}

void CMsgUpdateHalloweenMerasmusLootLevel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgUpdateHalloweenMerasmusLootLevel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgUpdateHalloweenMerasmusLootLevel::CopyFrom(const CMsgUpdateHalloweenMerasmusLootLevel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgUpdateHalloweenMerasmusLootLevel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgUpdateHalloweenMerasmusLootLevel::IsInitialized() const {
  return true;
}

void CMsgUpdateHalloweenMerasmusLootLevel::InternalSwap(CMsgUpdateHalloweenMerasmusLootLevel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  players_.InternalSwap(&other->players_);
  swap(merasmus_level_, other->merasmus_level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgUpdateHalloweenMerasmusLootLevel::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[123]);
}

// ===================================================================

class CAttribute_String::_Internal {
 public:
  using HasBits = decltype(std::declval<CAttribute_String>()._has_bits_);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CAttribute_String::CAttribute_String(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CAttribute_String)
}
CAttribute_String::CAttribute_String(const CAttribute_String& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_value()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CAttribute_String)
}

void CAttribute_String::SharedCtor() {
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CAttribute_String::~CAttribute_String() {
  // @@protoc_insertion_point(destructor:CAttribute_String)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CAttribute_String::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CAttribute_String::ArenaDtor(void* object) {
  CAttribute_String* _this = reinterpret_cast< CAttribute_String* >(object);
  (void)_this;
}
void CAttribute_String::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CAttribute_String::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CAttribute_String::Clear() {
// @@protoc_insertion_point(message_clear_start:CAttribute_String)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CAttribute_String::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CAttribute_String.value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CAttribute_String::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CAttribute_String)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CAttribute_String.value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CAttribute_String)
  return target;
}

size_t CAttribute_String::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CAttribute_String)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CAttribute_String::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CAttribute_String)
  GOOGLE_DCHECK_NE(&from, this);
  const CAttribute_String* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CAttribute_String>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CAttribute_String)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CAttribute_String)
    MergeFrom(*source);
  }
}

void CAttribute_String::MergeFrom(const CAttribute_String& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CAttribute_String)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_value()) {
    _internal_set_value(from._internal_value());
  }
}

void CAttribute_String::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CAttribute_String)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAttribute_String::CopyFrom(const CAttribute_String& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CAttribute_String)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAttribute_String::IsInitialized() const {
  return true;
}

void CAttribute_String::InternalSwap(CAttribute_String* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, GetArenaForAllocation(),
      &other->value_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CAttribute_String::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[124]);
}

// ===================================================================

class CAttribute_DynamicRecipeComponent::_Internal {
 public:
  using HasBits = decltype(std::declval<CAttribute_DynamicRecipeComponent>()._has_bits_);
  static void set_has_def_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_item_quality(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_component_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_attributes_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_num_required(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_num_fulfilled(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CAttribute_DynamicRecipeComponent::CAttribute_DynamicRecipeComponent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CAttribute_DynamicRecipeComponent)
}
CAttribute_DynamicRecipeComponent::CAttribute_DynamicRecipeComponent(const CAttribute_DynamicRecipeComponent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  attributes_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_attributes_string()) {
    attributes_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_attributes_string(), 
      GetArenaForAllocation());
  }
  ::memcpy(&def_index_, &from.def_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_fulfilled_) -
    reinterpret_cast<char*>(&def_index_)) + sizeof(num_fulfilled_));
  // @@protoc_insertion_point(copy_constructor:CAttribute_DynamicRecipeComponent)
}

void CAttribute_DynamicRecipeComponent::SharedCtor() {
attributes_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&def_index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&num_fulfilled_) -
    reinterpret_cast<char*>(&def_index_)) + sizeof(num_fulfilled_));
}

CAttribute_DynamicRecipeComponent::~CAttribute_DynamicRecipeComponent() {
  // @@protoc_insertion_point(destructor:CAttribute_DynamicRecipeComponent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CAttribute_DynamicRecipeComponent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  attributes_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CAttribute_DynamicRecipeComponent::ArenaDtor(void* object) {
  CAttribute_DynamicRecipeComponent* _this = reinterpret_cast< CAttribute_DynamicRecipeComponent* >(object);
  (void)_this;
}
void CAttribute_DynamicRecipeComponent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CAttribute_DynamicRecipeComponent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CAttribute_DynamicRecipeComponent::Clear() {
// @@protoc_insertion_point(message_clear_start:CAttribute_DynamicRecipeComponent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    attributes_string_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&def_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_fulfilled_) -
        reinterpret_cast<char*>(&def_index_)) + sizeof(num_fulfilled_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CAttribute_DynamicRecipeComponent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 def_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_def_index(&has_bits);
          def_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 item_quality = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_item_quality(&has_bits);
          item_quality_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 component_flags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_component_flags(&has_bits);
          component_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string attributes_string = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_attributes_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CAttribute_DynamicRecipeComponent.attributes_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 num_required = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_num_required(&has_bits);
          num_required_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 num_fulfilled = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_num_fulfilled(&has_bits);
          num_fulfilled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CAttribute_DynamicRecipeComponent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CAttribute_DynamicRecipeComponent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 def_index = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_def_index(), target);
  }

  // optional uint32 item_quality = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_item_quality(), target);
  }

  // optional uint32 component_flags = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_component_flags(), target);
  }

  // optional string attributes_string = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_attributes_string().data(), static_cast<int>(this->_internal_attributes_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CAttribute_DynamicRecipeComponent.attributes_string");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_attributes_string(), target);
  }

  // optional uint32 num_required = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_num_required(), target);
  }

  // optional uint32 num_fulfilled = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_num_fulfilled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CAttribute_DynamicRecipeComponent)
  return target;
}

size_t CAttribute_DynamicRecipeComponent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CAttribute_DynamicRecipeComponent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string attributes_string = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_attributes_string());
    }

    // optional uint32 def_index = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_def_index());
    }

    // optional uint32 item_quality = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_item_quality());
    }

    // optional uint32 component_flags = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_component_flags());
    }

    // optional uint32 num_required = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_num_required());
    }

    // optional uint32 num_fulfilled = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_num_fulfilled());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CAttribute_DynamicRecipeComponent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CAttribute_DynamicRecipeComponent)
  GOOGLE_DCHECK_NE(&from, this);
  const CAttribute_DynamicRecipeComponent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CAttribute_DynamicRecipeComponent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CAttribute_DynamicRecipeComponent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CAttribute_DynamicRecipeComponent)
    MergeFrom(*source);
  }
}

void CAttribute_DynamicRecipeComponent::MergeFrom(const CAttribute_DynamicRecipeComponent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CAttribute_DynamicRecipeComponent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_attributes_string(from._internal_attributes_string());
    }
    if (cached_has_bits & 0x00000002u) {
      def_index_ = from.def_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      item_quality_ = from.item_quality_;
    }
    if (cached_has_bits & 0x00000008u) {
      component_flags_ = from.component_flags_;
    }
    if (cached_has_bits & 0x00000010u) {
      num_required_ = from.num_required_;
    }
    if (cached_has_bits & 0x00000020u) {
      num_fulfilled_ = from.num_fulfilled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CAttribute_DynamicRecipeComponent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CAttribute_DynamicRecipeComponent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAttribute_DynamicRecipeComponent::CopyFrom(const CAttribute_DynamicRecipeComponent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CAttribute_DynamicRecipeComponent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAttribute_DynamicRecipeComponent::IsInitialized() const {
  return true;
}

void CAttribute_DynamicRecipeComponent::InternalSwap(CAttribute_DynamicRecipeComponent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &attributes_string_, GetArenaForAllocation(),
      &other->attributes_string_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CAttribute_DynamicRecipeComponent, num_fulfilled_)
      + sizeof(CAttribute_DynamicRecipeComponent::num_fulfilled_)
      - PROTOBUF_FIELD_OFFSET(CAttribute_DynamicRecipeComponent, def_index_)>(
          reinterpret_cast<char*>(&def_index_),
          reinterpret_cast<char*>(&other->def_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CAttribute_DynamicRecipeComponent::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[125]);
}

// ===================================================================

class CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::_Internal {
 public:
  using HasBits = decltype(std::declval<CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT>()._has_bits_);
  static void set_has_def_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_item_def(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_item_quality(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_component_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_item_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_attributes_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_num_required(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_item_count(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_num_fulfilled(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_items_fulfilled(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT)
}
CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT(const CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  attributes_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_attributes_string()) {
    attributes_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_attributes_string(), 
      GetArenaForAllocation());
  }
  ::memcpy(&def_index_, &from.def_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&items_fulfilled_) -
    reinterpret_cast<char*>(&def_index_)) + sizeof(items_fulfilled_));
  // @@protoc_insertion_point(copy_constructor:CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT)
}

void CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::SharedCtor() {
attributes_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&def_index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&items_fulfilled_) -
    reinterpret_cast<char*>(&def_index_)) + sizeof(items_fulfilled_));
}

CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::~CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT() {
  // @@protoc_insertion_point(destructor:CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  attributes_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::ArenaDtor(void* object) {
  CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT* _this = reinterpret_cast< CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT* >(object);
  (void)_this;
}
void CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::Clear() {
// @@protoc_insertion_point(message_clear_start:CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    attributes_string_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&def_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&item_count_) -
        reinterpret_cast<char*>(&def_index_)) + sizeof(item_count_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&num_fulfilled_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&items_fulfilled_) -
        reinterpret_cast<char*>(&num_fulfilled_)) + sizeof(items_fulfilled_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 def_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_def_index(&has_bits);
          def_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 item_def = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_item_def(&has_bits);
          item_def_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 item_quality = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_item_quality(&has_bits);
          item_quality_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 component_flags = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_component_flags(&has_bits);
          component_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 item_flags = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_item_flags(&has_bits);
          item_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string attributes_string = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_attributes_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT.attributes_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 num_required = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_num_required(&has_bits);
          num_required_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 item_count = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_item_count(&has_bits);
          item_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 num_fulfilled = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_num_fulfilled(&has_bits);
          num_fulfilled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 items_fulfilled = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_items_fulfilled(&has_bits);
          items_fulfilled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 def_index = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_def_index(), target);
  }

  // optional uint32 item_def = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_item_def(), target);
  }

  // optional uint32 item_quality = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_item_quality(), target);
  }

  // optional uint32 component_flags = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_component_flags(), target);
  }

  // optional uint32 item_flags = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_item_flags(), target);
  }

  // optional string attributes_string = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_attributes_string().data(), static_cast<int>(this->_internal_attributes_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT.attributes_string");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_attributes_string(), target);
  }

  // optional uint32 num_required = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_num_required(), target);
  }

  // optional uint32 item_count = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_item_count(), target);
  }

  // optional uint32 num_fulfilled = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_num_fulfilled(), target);
  }

  // optional uint32 items_fulfilled = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_items_fulfilled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT)
  return target;
}

size_t CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string attributes_string = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_attributes_string());
    }

    // optional uint32 def_index = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_def_index());
    }

    // optional uint32 item_def = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_item_def());
    }

    // optional uint32 item_quality = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_item_quality());
    }

    // optional uint32 component_flags = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_component_flags());
    }

    // optional uint32 item_flags = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_item_flags());
    }

    // optional uint32 num_required = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_num_required());
    }

    // optional uint32 item_count = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_item_count());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional uint32 num_fulfilled = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_num_fulfilled());
    }

    // optional uint32 items_fulfilled = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_items_fulfilled());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT)
  GOOGLE_DCHECK_NE(&from, this);
  const CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT)
    MergeFrom(*source);
  }
}

void CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::MergeFrom(const CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_attributes_string(from._internal_attributes_string());
    }
    if (cached_has_bits & 0x00000002u) {
      def_index_ = from.def_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      item_def_ = from.item_def_;
    }
    if (cached_has_bits & 0x00000008u) {
      item_quality_ = from.item_quality_;
    }
    if (cached_has_bits & 0x00000010u) {
      component_flags_ = from.component_flags_;
    }
    if (cached_has_bits & 0x00000020u) {
      item_flags_ = from.item_flags_;
    }
    if (cached_has_bits & 0x00000040u) {
      num_required_ = from.num_required_;
    }
    if (cached_has_bits & 0x00000080u) {
      item_count_ = from.item_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      num_fulfilled_ = from.num_fulfilled_;
    }
    if (cached_has_bits & 0x00000200u) {
      items_fulfilled_ = from.items_fulfilled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::CopyFrom(const CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::IsInitialized() const {
  return true;
}

void CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::InternalSwap(CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &attributes_string_, GetArenaForAllocation(),
      &other->attributes_string_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT, items_fulfilled_)
      + sizeof(CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::items_fulfilled_)
      - PROTOBUF_FIELD_OFFSET(CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT, def_index_)>(
          reinterpret_cast<char*>(&def_index_),
          reinterpret_cast<char*>(&other->def_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[126]);
}

// ===================================================================

class CAttribute_ItemSlotCriteria::_Internal {
 public:
  using HasBits = decltype(std::declval<CAttribute_ItemSlotCriteria>()._has_bits_);
  static void set_has_tags(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CAttribute_ItemSlotCriteria::CAttribute_ItemSlotCriteria(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CAttribute_ItemSlotCriteria)
}
CAttribute_ItemSlotCriteria::CAttribute_ItemSlotCriteria(const CAttribute_ItemSlotCriteria& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_tags()) {
    tags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tags(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CAttribute_ItemSlotCriteria)
}

void CAttribute_ItemSlotCriteria::SharedCtor() {
tags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CAttribute_ItemSlotCriteria::~CAttribute_ItemSlotCriteria() {
  // @@protoc_insertion_point(destructor:CAttribute_ItemSlotCriteria)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CAttribute_ItemSlotCriteria::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  tags_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CAttribute_ItemSlotCriteria::ArenaDtor(void* object) {
  CAttribute_ItemSlotCriteria* _this = reinterpret_cast< CAttribute_ItemSlotCriteria* >(object);
  (void)_this;
}
void CAttribute_ItemSlotCriteria::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CAttribute_ItemSlotCriteria::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CAttribute_ItemSlotCriteria::Clear() {
// @@protoc_insertion_point(message_clear_start:CAttribute_ItemSlotCriteria)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    tags_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CAttribute_ItemSlotCriteria::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string tags = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_tags();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CAttribute_ItemSlotCriteria.tags");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CAttribute_ItemSlotCriteria::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CAttribute_ItemSlotCriteria)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string tags = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tags().data(), static_cast<int>(this->_internal_tags().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CAttribute_ItemSlotCriteria.tags");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CAttribute_ItemSlotCriteria)
  return target;
}

size_t CAttribute_ItemSlotCriteria::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CAttribute_ItemSlotCriteria)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string tags = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tags());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CAttribute_ItemSlotCriteria::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CAttribute_ItemSlotCriteria)
  GOOGLE_DCHECK_NE(&from, this);
  const CAttribute_ItemSlotCriteria* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CAttribute_ItemSlotCriteria>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CAttribute_ItemSlotCriteria)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CAttribute_ItemSlotCriteria)
    MergeFrom(*source);
  }
}

void CAttribute_ItemSlotCriteria::MergeFrom(const CAttribute_ItemSlotCriteria& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CAttribute_ItemSlotCriteria)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_tags()) {
    _internal_set_tags(from._internal_tags());
  }
}

void CAttribute_ItemSlotCriteria::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CAttribute_ItemSlotCriteria)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAttribute_ItemSlotCriteria::CopyFrom(const CAttribute_ItemSlotCriteria& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CAttribute_ItemSlotCriteria)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAttribute_ItemSlotCriteria::IsInitialized() const {
  return true;
}

void CAttribute_ItemSlotCriteria::InternalSwap(CAttribute_ItemSlotCriteria* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &tags_, GetArenaForAllocation(),
      &other->tags_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CAttribute_ItemSlotCriteria::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[127]);
}

// ===================================================================

class CMsgSetItemSlotAttribute::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSetItemSlotAttribute>()._has_bits_);
  static void set_has_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_slot_item_original_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_slot_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgSetItemSlotAttribute::CMsgSetItemSlotAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSetItemSlotAttribute)
}
CMsgSetItemSlotAttribute::CMsgSetItemSlotAttribute(const CMsgSetItemSlotAttribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&item_id_, &from.item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&slot_index_) -
    reinterpret_cast<char*>(&item_id_)) + sizeof(slot_index_));
  // @@protoc_insertion_point(copy_constructor:CMsgSetItemSlotAttribute)
}

void CMsgSetItemSlotAttribute::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&item_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&slot_index_) -
    reinterpret_cast<char*>(&item_id_)) + sizeof(slot_index_));
}

CMsgSetItemSlotAttribute::~CMsgSetItemSlotAttribute() {
  // @@protoc_insertion_point(destructor:CMsgSetItemSlotAttribute)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSetItemSlotAttribute::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgSetItemSlotAttribute::ArenaDtor(void* object) {
  CMsgSetItemSlotAttribute* _this = reinterpret_cast< CMsgSetItemSlotAttribute* >(object);
  (void)_this;
}
void CMsgSetItemSlotAttribute::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSetItemSlotAttribute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSetItemSlotAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSetItemSlotAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&slot_index_) -
        reinterpret_cast<char*>(&item_id_)) + sizeof(slot_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSetItemSlotAttribute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_item_id(&has_bits);
          item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 slot_item_original_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_slot_item_original_id(&has_bits);
          slot_item_original_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 slot_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_slot_index(&has_bits);
          slot_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSetItemSlotAttribute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSetItemSlotAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_item_id(), target);
  }

  // optional uint64 slot_item_original_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_slot_item_original_id(), target);
  }

  // optional uint32 slot_index = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_slot_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSetItemSlotAttribute)
  return target;
}

size_t CMsgSetItemSlotAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSetItemSlotAttribute)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 item_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_item_id());
    }

    // optional uint64 slot_item_original_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_slot_item_original_id());
    }

    // optional uint32 slot_index = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_slot_index());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSetItemSlotAttribute::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSetItemSlotAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSetItemSlotAttribute* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSetItemSlotAttribute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSetItemSlotAttribute)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSetItemSlotAttribute)
    MergeFrom(*source);
  }
}

void CMsgSetItemSlotAttribute::MergeFrom(const CMsgSetItemSlotAttribute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSetItemSlotAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      item_id_ = from.item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      slot_item_original_id_ = from.slot_item_original_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      slot_index_ = from.slot_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSetItemSlotAttribute::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSetItemSlotAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSetItemSlotAttribute::CopyFrom(const CMsgSetItemSlotAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSetItemSlotAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSetItemSlotAttribute::IsInitialized() const {
  return true;
}

void CMsgSetItemSlotAttribute::InternalSwap(CMsgSetItemSlotAttribute* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSetItemSlotAttribute, slot_index_)
      + sizeof(CMsgSetItemSlotAttribute::slot_index_)
      - PROTOBUF_FIELD_OFFSET(CMsgSetItemSlotAttribute, item_id_)>(
          reinterpret_cast<char*>(&item_id_),
          reinterpret_cast<char*>(&other->item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSetItemSlotAttribute::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[128]);
}

// ===================================================================

class CSOWarData::_Internal {
 public:
  using HasBits = decltype(std::declval<CSOWarData>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_war_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_affiliation(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_points_scored(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CSOWarData::CSOWarData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSOWarData)
}
CSOWarData::CSOWarData(const CSOWarData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&points_scored_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(points_scored_));
  // @@protoc_insertion_point(copy_constructor:CSOWarData)
}

void CSOWarData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&points_scored_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(points_scored_));
}

CSOWarData::~CSOWarData() {
  // @@protoc_insertion_point(destructor:CSOWarData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSOWarData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSOWarData::ArenaDtor(void* object) {
  CSOWarData* _this = reinterpret_cast< CSOWarData* >(object);
  (void)_this;
}
void CSOWarData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSOWarData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSOWarData::Clear() {
// @@protoc_insertion_point(message_clear_start:CSOWarData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&points_scored_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(points_scored_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSOWarData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1 [(.key_field) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 war_id = 2 [(.key_field) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_war_id(&has_bits);
          war_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 affiliation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_affiliation(&has_bits);
          affiliation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 points_scored = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_points_scored(&has_bits);
          points_scored_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSOWarData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSOWarData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1 [(.key_field) = true];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint32 war_id = 2 [(.key_field) = true];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_war_id(), target);
  }

  // optional uint32 affiliation = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_affiliation(), target);
  }

  // optional uint32 points_scored = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_points_scored(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSOWarData)
  return target;
}

size_t CSOWarData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSOWarData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 account_id = 1 [(.key_field) = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional uint32 war_id = 2 [(.key_field) = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_war_id());
    }

    // optional uint32 affiliation = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_affiliation());
    }

    // optional uint32 points_scored = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_points_scored());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSOWarData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSOWarData)
  GOOGLE_DCHECK_NE(&from, this);
  const CSOWarData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSOWarData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSOWarData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSOWarData)
    MergeFrom(*source);
  }
}

void CSOWarData::MergeFrom(const CSOWarData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSOWarData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      war_id_ = from.war_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      affiliation_ = from.affiliation_;
    }
    if (cached_has_bits & 0x00000008u) {
      points_scored_ = from.points_scored_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSOWarData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSOWarData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOWarData::CopyFrom(const CSOWarData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSOWarData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOWarData::IsInitialized() const {
  return true;
}

void CSOWarData::InternalSwap(CSOWarData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSOWarData, points_scored_)
      + sizeof(CSOWarData::points_scored_)
      - PROTOBUF_FIELD_OFFSET(CSOWarData, account_id_)>(
          reinterpret_cast<char*>(&account_id_),
          reinterpret_cast<char*>(&other->account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSOWarData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[129]);
}

// ===================================================================

class CGCMsgGC_War_IndividualUpdate::_Internal {
 public:
  using HasBits = decltype(std::declval<CGCMsgGC_War_IndividualUpdate>()._has_bits_);
  static void set_has_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_war_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_score(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CGCMsgGC_War_IndividualUpdate::CGCMsgGC_War_IndividualUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGCMsgGC_War_IndividualUpdate)
}
CGCMsgGC_War_IndividualUpdate::CGCMsgGC_War_IndividualUpdate(const CGCMsgGC_War_IndividualUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steam_id_, &from.steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&steam_id_)) + sizeof(score_));
  // @@protoc_insertion_point(copy_constructor:CGCMsgGC_War_IndividualUpdate)
}

void CGCMsgGC_War_IndividualUpdate::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steam_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&steam_id_)) + sizeof(score_));
}

CGCMsgGC_War_IndividualUpdate::~CGCMsgGC_War_IndividualUpdate() {
  // @@protoc_insertion_point(destructor:CGCMsgGC_War_IndividualUpdate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGCMsgGC_War_IndividualUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGCMsgGC_War_IndividualUpdate::ArenaDtor(void* object) {
  CGCMsgGC_War_IndividualUpdate* _this = reinterpret_cast< CGCMsgGC_War_IndividualUpdate* >(object);
  (void)_this;
}
void CGCMsgGC_War_IndividualUpdate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGCMsgGC_War_IndividualUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGCMsgGC_War_IndividualUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:CGCMsgGC_War_IndividualUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&score_) -
        reinterpret_cast<char*>(&steam_id_)) + sizeof(score_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGCMsgGC_War_IndividualUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steam_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_steam_id(&has_bits);
          steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint32 war_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_war_id(&has_bits);
          war_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 score = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_score(&has_bits);
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGCMsgGC_War_IndividualUpdate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGCMsgGC_War_IndividualUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steam_id(), target);
  }

  // optional uint32 war_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_war_id(), target);
  }

  // optional uint32 score = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGCMsgGC_War_IndividualUpdate)
  return target;
}

size_t CGCMsgGC_War_IndividualUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGCMsgGC_War_IndividualUpdate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional fixed64 steam_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 war_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_war_id());
    }

    // optional uint32 score = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_score());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGCMsgGC_War_IndividualUpdate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGCMsgGC_War_IndividualUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const CGCMsgGC_War_IndividualUpdate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGCMsgGC_War_IndividualUpdate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGCMsgGC_War_IndividualUpdate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGCMsgGC_War_IndividualUpdate)
    MergeFrom(*source);
  }
}

void CGCMsgGC_War_IndividualUpdate::MergeFrom(const CGCMsgGC_War_IndividualUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGCMsgGC_War_IndividualUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      war_id_ = from.war_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      score_ = from.score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGCMsgGC_War_IndividualUpdate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGCMsgGC_War_IndividualUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCMsgGC_War_IndividualUpdate::CopyFrom(const CGCMsgGC_War_IndividualUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGCMsgGC_War_IndividualUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsgGC_War_IndividualUpdate::IsInitialized() const {
  return true;
}

void CGCMsgGC_War_IndividualUpdate::InternalSwap(CGCMsgGC_War_IndividualUpdate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGCMsgGC_War_IndividualUpdate, score_)
      + sizeof(CGCMsgGC_War_IndividualUpdate::score_)
      - PROTOBUF_FIELD_OFFSET(CGCMsgGC_War_IndividualUpdate, steam_id_)>(
          reinterpret_cast<char*>(&steam_id_),
          reinterpret_cast<char*>(&other->steam_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGCMsgGC_War_IndividualUpdate::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[130]);
}

// ===================================================================

class CGCMsgGC_War_JoinWar::_Internal {
 public:
  using HasBits = decltype(std::declval<CGCMsgGC_War_JoinWar>()._has_bits_);
  static void set_has_affiliation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_war_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CGCMsgGC_War_JoinWar::CGCMsgGC_War_JoinWar(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGCMsgGC_War_JoinWar)
}
CGCMsgGC_War_JoinWar::CGCMsgGC_War_JoinWar(const CGCMsgGC_War_JoinWar& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&affiliation_, &from.affiliation_,
    static_cast<size_t>(reinterpret_cast<char*>(&war_id_) -
    reinterpret_cast<char*>(&affiliation_)) + sizeof(war_id_));
  // @@protoc_insertion_point(copy_constructor:CGCMsgGC_War_JoinWar)
}

void CGCMsgGC_War_JoinWar::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&affiliation_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&war_id_) -
    reinterpret_cast<char*>(&affiliation_)) + sizeof(war_id_));
}

CGCMsgGC_War_JoinWar::~CGCMsgGC_War_JoinWar() {
  // @@protoc_insertion_point(destructor:CGCMsgGC_War_JoinWar)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGCMsgGC_War_JoinWar::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGCMsgGC_War_JoinWar::ArenaDtor(void* object) {
  CGCMsgGC_War_JoinWar* _this = reinterpret_cast< CGCMsgGC_War_JoinWar* >(object);
  (void)_this;
}
void CGCMsgGC_War_JoinWar::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGCMsgGC_War_JoinWar::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGCMsgGC_War_JoinWar::Clear() {
// @@protoc_insertion_point(message_clear_start:CGCMsgGC_War_JoinWar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&affiliation_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&war_id_) -
        reinterpret_cast<char*>(&affiliation_)) + sizeof(war_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGCMsgGC_War_JoinWar::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 affiliation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_affiliation(&has_bits);
          affiliation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 war_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_war_id(&has_bits);
          war_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGCMsgGC_War_JoinWar::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGCMsgGC_War_JoinWar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 affiliation = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_affiliation(), target);
  }

  // optional uint32 war_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_war_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGCMsgGC_War_JoinWar)
  return target;
}

size_t CGCMsgGC_War_JoinWar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGCMsgGC_War_JoinWar)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 affiliation = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_affiliation());
    }

    // optional uint32 war_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_war_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGCMsgGC_War_JoinWar::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGCMsgGC_War_JoinWar)
  GOOGLE_DCHECK_NE(&from, this);
  const CGCMsgGC_War_JoinWar* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGCMsgGC_War_JoinWar>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGCMsgGC_War_JoinWar)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGCMsgGC_War_JoinWar)
    MergeFrom(*source);
  }
}

void CGCMsgGC_War_JoinWar::MergeFrom(const CGCMsgGC_War_JoinWar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGCMsgGC_War_JoinWar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      affiliation_ = from.affiliation_;
    }
    if (cached_has_bits & 0x00000002u) {
      war_id_ = from.war_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGCMsgGC_War_JoinWar::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGCMsgGC_War_JoinWar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCMsgGC_War_JoinWar::CopyFrom(const CGCMsgGC_War_JoinWar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGCMsgGC_War_JoinWar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsgGC_War_JoinWar::IsInitialized() const {
  return true;
}

void CGCMsgGC_War_JoinWar::InternalSwap(CGCMsgGC_War_JoinWar* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGCMsgGC_War_JoinWar, war_id_)
      + sizeof(CGCMsgGC_War_JoinWar::war_id_)
      - PROTOBUF_FIELD_OFFSET(CGCMsgGC_War_JoinWar, affiliation_)>(
          reinterpret_cast<char*>(&affiliation_),
          reinterpret_cast<char*>(&other->affiliation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGCMsgGC_War_JoinWar::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[131]);
}

// ===================================================================

class CGCMsgGC_War_RequestGlobalStats::_Internal {
 public:
  using HasBits = decltype(std::declval<CGCMsgGC_War_RequestGlobalStats>()._has_bits_);
  static void set_has_war_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CGCMsgGC_War_RequestGlobalStats::CGCMsgGC_War_RequestGlobalStats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGCMsgGC_War_RequestGlobalStats)
}
CGCMsgGC_War_RequestGlobalStats::CGCMsgGC_War_RequestGlobalStats(const CGCMsgGC_War_RequestGlobalStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  war_id_ = from.war_id_;
  // @@protoc_insertion_point(copy_constructor:CGCMsgGC_War_RequestGlobalStats)
}

void CGCMsgGC_War_RequestGlobalStats::SharedCtor() {
war_id_ = 0u;
}

CGCMsgGC_War_RequestGlobalStats::~CGCMsgGC_War_RequestGlobalStats() {
  // @@protoc_insertion_point(destructor:CGCMsgGC_War_RequestGlobalStats)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGCMsgGC_War_RequestGlobalStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGCMsgGC_War_RequestGlobalStats::ArenaDtor(void* object) {
  CGCMsgGC_War_RequestGlobalStats* _this = reinterpret_cast< CGCMsgGC_War_RequestGlobalStats* >(object);
  (void)_this;
}
void CGCMsgGC_War_RequestGlobalStats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGCMsgGC_War_RequestGlobalStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGCMsgGC_War_RequestGlobalStats::Clear() {
// @@protoc_insertion_point(message_clear_start:CGCMsgGC_War_RequestGlobalStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  war_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGCMsgGC_War_RequestGlobalStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 war_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_war_id(&has_bits);
          war_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGCMsgGC_War_RequestGlobalStats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGCMsgGC_War_RequestGlobalStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 war_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_war_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGCMsgGC_War_RequestGlobalStats)
  return target;
}

size_t CGCMsgGC_War_RequestGlobalStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGCMsgGC_War_RequestGlobalStats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 war_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_war_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGCMsgGC_War_RequestGlobalStats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGCMsgGC_War_RequestGlobalStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CGCMsgGC_War_RequestGlobalStats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGCMsgGC_War_RequestGlobalStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGCMsgGC_War_RequestGlobalStats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGCMsgGC_War_RequestGlobalStats)
    MergeFrom(*source);
  }
}

void CGCMsgGC_War_RequestGlobalStats::MergeFrom(const CGCMsgGC_War_RequestGlobalStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGCMsgGC_War_RequestGlobalStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_war_id()) {
    _internal_set_war_id(from._internal_war_id());
  }
}

void CGCMsgGC_War_RequestGlobalStats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGCMsgGC_War_RequestGlobalStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCMsgGC_War_RequestGlobalStats::CopyFrom(const CGCMsgGC_War_RequestGlobalStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGCMsgGC_War_RequestGlobalStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsgGC_War_RequestGlobalStats::IsInitialized() const {
  return true;
}

void CGCMsgGC_War_RequestGlobalStats::InternalSwap(CGCMsgGC_War_RequestGlobalStats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(war_id_, other->war_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGCMsgGC_War_RequestGlobalStats::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[132]);
}

// ===================================================================

class CGCMsgGC_War_GlobalStatsResponse_SideScore::_Internal {
 public:
  using HasBits = decltype(std::declval<CGCMsgGC_War_GlobalStatsResponse_SideScore>()._has_bits_);
  static void set_has_side(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_score(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CGCMsgGC_War_GlobalStatsResponse_SideScore::CGCMsgGC_War_GlobalStatsResponse_SideScore(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGCMsgGC_War_GlobalStatsResponse.SideScore)
}
CGCMsgGC_War_GlobalStatsResponse_SideScore::CGCMsgGC_War_GlobalStatsResponse_SideScore(const CGCMsgGC_War_GlobalStatsResponse_SideScore& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&score_, &from.score_,
    static_cast<size_t>(reinterpret_cast<char*>(&side_) -
    reinterpret_cast<char*>(&score_)) + sizeof(side_));
  // @@protoc_insertion_point(copy_constructor:CGCMsgGC_War_GlobalStatsResponse.SideScore)
}

void CGCMsgGC_War_GlobalStatsResponse_SideScore::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&score_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&side_) -
    reinterpret_cast<char*>(&score_)) + sizeof(side_));
}

CGCMsgGC_War_GlobalStatsResponse_SideScore::~CGCMsgGC_War_GlobalStatsResponse_SideScore() {
  // @@protoc_insertion_point(destructor:CGCMsgGC_War_GlobalStatsResponse.SideScore)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGCMsgGC_War_GlobalStatsResponse_SideScore::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGCMsgGC_War_GlobalStatsResponse_SideScore::ArenaDtor(void* object) {
  CGCMsgGC_War_GlobalStatsResponse_SideScore* _this = reinterpret_cast< CGCMsgGC_War_GlobalStatsResponse_SideScore* >(object);
  (void)_this;
}
void CGCMsgGC_War_GlobalStatsResponse_SideScore::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGCMsgGC_War_GlobalStatsResponse_SideScore::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGCMsgGC_War_GlobalStatsResponse_SideScore::Clear() {
// @@protoc_insertion_point(message_clear_start:CGCMsgGC_War_GlobalStatsResponse.SideScore)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&score_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&side_) -
        reinterpret_cast<char*>(&score_)) + sizeof(side_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGCMsgGC_War_GlobalStatsResponse_SideScore::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 side = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_side(&has_bits);
          side_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 score = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_score(&has_bits);
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGCMsgGC_War_GlobalStatsResponse_SideScore::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGCMsgGC_War_GlobalStatsResponse.SideScore)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 side = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_side(), target);
  }

  // optional uint64 score = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGCMsgGC_War_GlobalStatsResponse.SideScore)
  return target;
}

size_t CGCMsgGC_War_GlobalStatsResponse_SideScore::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGCMsgGC_War_GlobalStatsResponse.SideScore)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 score = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_score());
    }

    // optional uint32 side = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_side());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGCMsgGC_War_GlobalStatsResponse_SideScore::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGCMsgGC_War_GlobalStatsResponse.SideScore)
  GOOGLE_DCHECK_NE(&from, this);
  const CGCMsgGC_War_GlobalStatsResponse_SideScore* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGCMsgGC_War_GlobalStatsResponse_SideScore>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGCMsgGC_War_GlobalStatsResponse.SideScore)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGCMsgGC_War_GlobalStatsResponse.SideScore)
    MergeFrom(*source);
  }
}

void CGCMsgGC_War_GlobalStatsResponse_SideScore::MergeFrom(const CGCMsgGC_War_GlobalStatsResponse_SideScore& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGCMsgGC_War_GlobalStatsResponse.SideScore)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      score_ = from.score_;
    }
    if (cached_has_bits & 0x00000002u) {
      side_ = from.side_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGCMsgGC_War_GlobalStatsResponse_SideScore::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGCMsgGC_War_GlobalStatsResponse.SideScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCMsgGC_War_GlobalStatsResponse_SideScore::CopyFrom(const CGCMsgGC_War_GlobalStatsResponse_SideScore& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGCMsgGC_War_GlobalStatsResponse.SideScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsgGC_War_GlobalStatsResponse_SideScore::IsInitialized() const {
  return true;
}

void CGCMsgGC_War_GlobalStatsResponse_SideScore::InternalSwap(CGCMsgGC_War_GlobalStatsResponse_SideScore* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGCMsgGC_War_GlobalStatsResponse_SideScore, side_)
      + sizeof(CGCMsgGC_War_GlobalStatsResponse_SideScore::side_)
      - PROTOBUF_FIELD_OFFSET(CGCMsgGC_War_GlobalStatsResponse_SideScore, score_)>(
          reinterpret_cast<char*>(&score_),
          reinterpret_cast<char*>(&other->score_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGCMsgGC_War_GlobalStatsResponse_SideScore::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[133]);
}

// ===================================================================

class CGCMsgGC_War_GlobalStatsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CGCMsgGC_War_GlobalStatsResponse>()._has_bits_);
  static void set_has_war_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CGCMsgGC_War_GlobalStatsResponse::CGCMsgGC_War_GlobalStatsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  side_scores_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGCMsgGC_War_GlobalStatsResponse)
}
CGCMsgGC_War_GlobalStatsResponse::CGCMsgGC_War_GlobalStatsResponse(const CGCMsgGC_War_GlobalStatsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      side_scores_(from.side_scores_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  war_id_ = from.war_id_;
  // @@protoc_insertion_point(copy_constructor:CGCMsgGC_War_GlobalStatsResponse)
}

void CGCMsgGC_War_GlobalStatsResponse::SharedCtor() {
war_id_ = 0u;
}

CGCMsgGC_War_GlobalStatsResponse::~CGCMsgGC_War_GlobalStatsResponse() {
  // @@protoc_insertion_point(destructor:CGCMsgGC_War_GlobalStatsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGCMsgGC_War_GlobalStatsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGCMsgGC_War_GlobalStatsResponse::ArenaDtor(void* object) {
  CGCMsgGC_War_GlobalStatsResponse* _this = reinterpret_cast< CGCMsgGC_War_GlobalStatsResponse* >(object);
  (void)_this;
}
void CGCMsgGC_War_GlobalStatsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGCMsgGC_War_GlobalStatsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGCMsgGC_War_GlobalStatsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CGCMsgGC_War_GlobalStatsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  side_scores_.Clear();
  war_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGCMsgGC_War_GlobalStatsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CGCMsgGC_War_GlobalStatsResponse.SideScore side_scores = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_side_scores(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 war_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_war_id(&has_bits);
          war_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGCMsgGC_War_GlobalStatsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGCMsgGC_War_GlobalStatsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CGCMsgGC_War_GlobalStatsResponse.SideScore side_scores = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_side_scores_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_side_scores(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 war_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_war_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGCMsgGC_War_GlobalStatsResponse)
  return target;
}

size_t CGCMsgGC_War_GlobalStatsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGCMsgGC_War_GlobalStatsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CGCMsgGC_War_GlobalStatsResponse.SideScore side_scores = 1;
  total_size += 1UL * this->_internal_side_scores_size();
  for (const auto& msg : this->side_scores_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 war_id = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_war_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGCMsgGC_War_GlobalStatsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGCMsgGC_War_GlobalStatsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CGCMsgGC_War_GlobalStatsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGCMsgGC_War_GlobalStatsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGCMsgGC_War_GlobalStatsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGCMsgGC_War_GlobalStatsResponse)
    MergeFrom(*source);
  }
}

void CGCMsgGC_War_GlobalStatsResponse::MergeFrom(const CGCMsgGC_War_GlobalStatsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGCMsgGC_War_GlobalStatsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  side_scores_.MergeFrom(from.side_scores_);
  if (from._internal_has_war_id()) {
    _internal_set_war_id(from._internal_war_id());
  }
}

void CGCMsgGC_War_GlobalStatsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGCMsgGC_War_GlobalStatsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCMsgGC_War_GlobalStatsResponse::CopyFrom(const CGCMsgGC_War_GlobalStatsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGCMsgGC_War_GlobalStatsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsgGC_War_GlobalStatsResponse::IsInitialized() const {
  return true;
}

void CGCMsgGC_War_GlobalStatsResponse::InternalSwap(CGCMsgGC_War_GlobalStatsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  side_scores_.InternalSwap(&other->side_scores_);
  swap(war_id_, other->war_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGCMsgGC_War_GlobalStatsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[134]);
}

// ===================================================================

class CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::_Internal {
 public:
  using HasBits = decltype(std::declval<CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate>()._has_bits_);
  static void set_has_score(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_score_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_score_check(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate)
}
CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate(const CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  score_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_score_id()) {
    score_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_score_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&score_, &from.score_,
    static_cast<size_t>(reinterpret_cast<char*>(&score_check_) -
    reinterpret_cast<char*>(&score_)) + sizeof(score_check_));
  // @@protoc_insertion_point(copy_constructor:CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate)
}

void CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::SharedCtor() {
score_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&score_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&score_check_) -
    reinterpret_cast<char*>(&score_)) + sizeof(score_check_));
}

CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::~CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate() {
  // @@protoc_insertion_point(destructor:CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  score_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::ArenaDtor(void* object) {
  CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate* _this = reinterpret_cast< CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate* >(object);
  (void)_this;
}
void CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    score_id_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&score_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&score_check_) -
        reinterpret_cast<char*>(&score_)) + sizeof(score_check_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 score = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_score(&has_bits);
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes score_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_score_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 score_check = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_score_check(&has_bits);
          score_check_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 score = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_score(), target);
  }

  // optional uint32 type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_type(), target);
  }

  // optional bytes score_id = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_score_id(), target);
  }

  // optional uint32 score_check = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_score_check(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate)
  return target;
}

size_t CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes score_id = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_score_id());
    }

    // optional uint32 score = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_score());
    }

    // optional uint32 type = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_type());
    }

    // optional uint32 score_check = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_score_check());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate)
    MergeFrom(*source);
  }
}

void CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::MergeFrom(const CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_score_id(from._internal_score_id());
    }
    if (cached_has_bits & 0x00000002u) {
      score_ = from.score_;
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000008u) {
      score_check_ = from.score_check_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::CopyFrom(const CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::IsInitialized() const {
  return true;
}

void CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::InternalSwap(CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &score_id_, GetArenaForAllocation(),
      &other->score_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate, score_check_)
      + sizeof(CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::score_check_)
      - PROTOBUF_FIELD_OFFSET(CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate, score_)>(
          reinterpret_cast<char*>(&score_),
          reinterpret_cast<char*>(&other->score_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[135]);
}

// ===================================================================

class CAttribute_WorldItemPlacement::_Internal {
 public:
  using HasBits = decltype(std::declval<CAttribute_WorldItemPlacement>()._has_bits_);
  static void set_has_original_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pos_x(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_pos_y(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_pos_z(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ang_x(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_ang_y(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_ang_z(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CAttribute_WorldItemPlacement::CAttribute_WorldItemPlacement(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CAttribute_WorldItemPlacement)
}
CAttribute_WorldItemPlacement::CAttribute_WorldItemPlacement(const CAttribute_WorldItemPlacement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&original_item_id_, &from.original_item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&ang_z_) -
    reinterpret_cast<char*>(&original_item_id_)) + sizeof(ang_z_));
  // @@protoc_insertion_point(copy_constructor:CAttribute_WorldItemPlacement)
}

void CAttribute_WorldItemPlacement::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&original_item_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ang_z_) -
    reinterpret_cast<char*>(&original_item_id_)) + sizeof(ang_z_));
}

CAttribute_WorldItemPlacement::~CAttribute_WorldItemPlacement() {
  // @@protoc_insertion_point(destructor:CAttribute_WorldItemPlacement)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CAttribute_WorldItemPlacement::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CAttribute_WorldItemPlacement::ArenaDtor(void* object) {
  CAttribute_WorldItemPlacement* _this = reinterpret_cast< CAttribute_WorldItemPlacement* >(object);
  (void)_this;
}
void CAttribute_WorldItemPlacement::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CAttribute_WorldItemPlacement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CAttribute_WorldItemPlacement::Clear() {
// @@protoc_insertion_point(message_clear_start:CAttribute_WorldItemPlacement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&original_item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ang_z_) -
        reinterpret_cast<char*>(&original_item_id_)) + sizeof(ang_z_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CAttribute_WorldItemPlacement::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 original_item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_original_item_id(&has_bits);
          original_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float pos_x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_pos_x(&has_bits);
          pos_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float pos_y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_pos_y(&has_bits);
          pos_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float pos_z = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_pos_z(&has_bits);
          pos_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float ang_x = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_ang_x(&has_bits);
          ang_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float ang_y = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_ang_y(&has_bits);
          ang_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float ang_z = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_ang_z(&has_bits);
          ang_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CAttribute_WorldItemPlacement::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CAttribute_WorldItemPlacement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 original_item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_original_item_id(), target);
  }

  // optional float pos_x = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_pos_x(), target);
  }

  // optional float pos_y = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_pos_y(), target);
  }

  // optional float pos_z = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_pos_z(), target);
  }

  // optional float ang_x = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_ang_x(), target);
  }

  // optional float ang_y = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_ang_y(), target);
  }

  // optional float ang_z = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_ang_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CAttribute_WorldItemPlacement)
  return target;
}

size_t CAttribute_WorldItemPlacement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CAttribute_WorldItemPlacement)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional uint64 original_item_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_original_item_id());
    }

    // optional float pos_x = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float pos_y = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float pos_z = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float ang_x = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float ang_y = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float ang_z = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CAttribute_WorldItemPlacement::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CAttribute_WorldItemPlacement)
  GOOGLE_DCHECK_NE(&from, this);
  const CAttribute_WorldItemPlacement* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CAttribute_WorldItemPlacement>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CAttribute_WorldItemPlacement)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CAttribute_WorldItemPlacement)
    MergeFrom(*source);
  }
}

void CAttribute_WorldItemPlacement::MergeFrom(const CAttribute_WorldItemPlacement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CAttribute_WorldItemPlacement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      original_item_id_ = from.original_item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      pos_x_ = from.pos_x_;
    }
    if (cached_has_bits & 0x00000004u) {
      pos_y_ = from.pos_y_;
    }
    if (cached_has_bits & 0x00000008u) {
      pos_z_ = from.pos_z_;
    }
    if (cached_has_bits & 0x00000010u) {
      ang_x_ = from.ang_x_;
    }
    if (cached_has_bits & 0x00000020u) {
      ang_y_ = from.ang_y_;
    }
    if (cached_has_bits & 0x00000040u) {
      ang_z_ = from.ang_z_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CAttribute_WorldItemPlacement::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CAttribute_WorldItemPlacement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAttribute_WorldItemPlacement::CopyFrom(const CAttribute_WorldItemPlacement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CAttribute_WorldItemPlacement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAttribute_WorldItemPlacement::IsInitialized() const {
  return true;
}

void CAttribute_WorldItemPlacement::InternalSwap(CAttribute_WorldItemPlacement* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CAttribute_WorldItemPlacement, ang_z_)
      + sizeof(CAttribute_WorldItemPlacement::ang_z_)
      - PROTOBUF_FIELD_OFFSET(CAttribute_WorldItemPlacement, original_item_id_)>(
          reinterpret_cast<char*>(&original_item_id_),
          reinterpret_cast<char*>(&other->original_item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CAttribute_WorldItemPlacement::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[136]);
}

// ===================================================================

class CGCMsg_WorldItemPlacement_Update::_Internal {
 public:
  using HasBits = decltype(std::declval<CGCMsg_WorldItemPlacement_Update>()._has_bits_);
  static void set_has_original_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_pos_x(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_pos_y(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_pos_z(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_ang_x(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_ang_y(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_ang_z(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_force_remove_all(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_attrib_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CGCMsg_WorldItemPlacement_Update::CGCMsg_WorldItemPlacement_Update(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGCMsg_WorldItemPlacement_Update)
}
CGCMsg_WorldItemPlacement_Update::CGCMsg_WorldItemPlacement_Update(const CGCMsg_WorldItemPlacement_Update& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  attrib_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_attrib_name()) {
    attrib_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_attrib_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&original_item_id_, &from.original_item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&force_remove_all_) -
    reinterpret_cast<char*>(&original_item_id_)) + sizeof(force_remove_all_));
  // @@protoc_insertion_point(copy_constructor:CGCMsg_WorldItemPlacement_Update)
}

void CGCMsg_WorldItemPlacement_Update::SharedCtor() {
attrib_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&original_item_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&force_remove_all_) -
    reinterpret_cast<char*>(&original_item_id_)) + sizeof(force_remove_all_));
}

CGCMsg_WorldItemPlacement_Update::~CGCMsg_WorldItemPlacement_Update() {
  // @@protoc_insertion_point(destructor:CGCMsg_WorldItemPlacement_Update)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGCMsg_WorldItemPlacement_Update::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  attrib_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CGCMsg_WorldItemPlacement_Update::ArenaDtor(void* object) {
  CGCMsg_WorldItemPlacement_Update* _this = reinterpret_cast< CGCMsg_WorldItemPlacement_Update* >(object);
  (void)_this;
}
void CGCMsg_WorldItemPlacement_Update::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGCMsg_WorldItemPlacement_Update::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGCMsg_WorldItemPlacement_Update::Clear() {
// @@protoc_insertion_point(message_clear_start:CGCMsg_WorldItemPlacement_Update)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    attrib_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&original_item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ang_z_) -
        reinterpret_cast<char*>(&original_item_id_)) + sizeof(ang_z_));
  }
  force_remove_all_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGCMsg_WorldItemPlacement_Update::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 original_item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_original_item_id(&has_bits);
          original_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float pos_x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_pos_x(&has_bits);
          pos_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float pos_y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_pos_y(&has_bits);
          pos_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float pos_z = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_pos_z(&has_bits);
          pos_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float ang_x = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_ang_x(&has_bits);
          ang_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float ang_y = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_ang_y(&has_bits);
          ang_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float ang_z = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_ang_z(&has_bits);
          ang_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool force_remove_all = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_force_remove_all(&has_bits);
          force_remove_all_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string attrib_name = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_attrib_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGCMsg_WorldItemPlacement_Update.attrib_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGCMsg_WorldItemPlacement_Update::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGCMsg_WorldItemPlacement_Update)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 original_item_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_original_item_id(), target);
  }

  // optional float pos_x = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_pos_x(), target);
  }

  // optional float pos_y = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_pos_y(), target);
  }

  // optional float pos_z = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_pos_z(), target);
  }

  // optional float ang_x = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_ang_x(), target);
  }

  // optional float ang_y = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_ang_y(), target);
  }

  // optional float ang_z = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_ang_z(), target);
  }

  // optional bool force_remove_all = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_force_remove_all(), target);
  }

  // optional string attrib_name = 9;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_attrib_name().data(), static_cast<int>(this->_internal_attrib_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGCMsg_WorldItemPlacement_Update.attrib_name");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_attrib_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGCMsg_WorldItemPlacement_Update)
  return target;
}

size_t CGCMsg_WorldItemPlacement_Update::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGCMsg_WorldItemPlacement_Update)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string attrib_name = 9;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_attrib_name());
    }

    // optional uint64 original_item_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_original_item_id());
    }

    // optional float pos_x = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float pos_y = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float pos_z = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float ang_x = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float ang_y = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float ang_z = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  // optional bool force_remove_all = 8;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGCMsg_WorldItemPlacement_Update::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGCMsg_WorldItemPlacement_Update)
  GOOGLE_DCHECK_NE(&from, this);
  const CGCMsg_WorldItemPlacement_Update* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGCMsg_WorldItemPlacement_Update>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGCMsg_WorldItemPlacement_Update)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGCMsg_WorldItemPlacement_Update)
    MergeFrom(*source);
  }
}

void CGCMsg_WorldItemPlacement_Update::MergeFrom(const CGCMsg_WorldItemPlacement_Update& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGCMsg_WorldItemPlacement_Update)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_attrib_name(from._internal_attrib_name());
    }
    if (cached_has_bits & 0x00000002u) {
      original_item_id_ = from.original_item_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      pos_x_ = from.pos_x_;
    }
    if (cached_has_bits & 0x00000008u) {
      pos_y_ = from.pos_y_;
    }
    if (cached_has_bits & 0x00000010u) {
      pos_z_ = from.pos_z_;
    }
    if (cached_has_bits & 0x00000020u) {
      ang_x_ = from.ang_x_;
    }
    if (cached_has_bits & 0x00000040u) {
      ang_y_ = from.ang_y_;
    }
    if (cached_has_bits & 0x00000080u) {
      ang_z_ = from.ang_z_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_force_remove_all(from._internal_force_remove_all());
  }
}

void CGCMsg_WorldItemPlacement_Update::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGCMsg_WorldItemPlacement_Update)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCMsg_WorldItemPlacement_Update::CopyFrom(const CGCMsg_WorldItemPlacement_Update& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGCMsg_WorldItemPlacement_Update)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsg_WorldItemPlacement_Update::IsInitialized() const {
  return true;
}

void CGCMsg_WorldItemPlacement_Update::InternalSwap(CGCMsg_WorldItemPlacement_Update* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &attrib_name_, GetArenaForAllocation(),
      &other->attrib_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGCMsg_WorldItemPlacement_Update, force_remove_all_)
      + sizeof(CGCMsg_WorldItemPlacement_Update::force_remove_all_)
      - PROTOBUF_FIELD_OFFSET(CGCMsg_WorldItemPlacement_Update, original_item_id_)>(
          reinterpret_cast<char*>(&original_item_id_),
          reinterpret_cast<char*>(&other->original_item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGCMsg_WorldItemPlacement_Update::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[137]);
}

// ===================================================================

class CMsgAcknowledgeXP::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgAcknowledgeXP>()._has_bits_);
  static void set_has_match_group(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_predicted_experience(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgAcknowledgeXP::CMsgAcknowledgeXP(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgAcknowledgeXP)
}
CMsgAcknowledgeXP::CMsgAcknowledgeXP(const CMsgAcknowledgeXP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&match_group_, &from.match_group_,
    static_cast<size_t>(reinterpret_cast<char*>(&predicted_experience_) -
    reinterpret_cast<char*>(&match_group_)) + sizeof(predicted_experience_));
  // @@protoc_insertion_point(copy_constructor:CMsgAcknowledgeXP)
}

void CMsgAcknowledgeXP::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&match_group_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&predicted_experience_) -
    reinterpret_cast<char*>(&match_group_)) + sizeof(predicted_experience_));
}

CMsgAcknowledgeXP::~CMsgAcknowledgeXP() {
  // @@protoc_insertion_point(destructor:CMsgAcknowledgeXP)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgAcknowledgeXP::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgAcknowledgeXP::ArenaDtor(void* object) {
  CMsgAcknowledgeXP* _this = reinterpret_cast< CMsgAcknowledgeXP* >(object);
  (void)_this;
}
void CMsgAcknowledgeXP::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgAcknowledgeXP::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgAcknowledgeXP::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgAcknowledgeXP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&match_group_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&predicted_experience_) -
        reinterpret_cast<char*>(&match_group_)) + sizeof(predicted_experience_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgAcknowledgeXP::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 match_group = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_match_group(&has_bits);
          match_group_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 predicted_experience = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_predicted_experience(&has_bits);
          predicted_experience_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgAcknowledgeXP::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgAcknowledgeXP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 match_group = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_match_group(), target);
  }

  // optional uint32 predicted_experience = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_predicted_experience(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgAcknowledgeXP)
  return target;
}

size_t CMsgAcknowledgeXP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgAcknowledgeXP)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 match_group = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_match_group());
    }

    // optional uint32 predicted_experience = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_predicted_experience());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgAcknowledgeXP::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgAcknowledgeXP)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgAcknowledgeXP* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgAcknowledgeXP>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgAcknowledgeXP)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgAcknowledgeXP)
    MergeFrom(*source);
  }
}

void CMsgAcknowledgeXP::MergeFrom(const CMsgAcknowledgeXP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgAcknowledgeXP)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      match_group_ = from.match_group_;
    }
    if (cached_has_bits & 0x00000002u) {
      predicted_experience_ = from.predicted_experience_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgAcknowledgeXP::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgAcknowledgeXP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAcknowledgeXP::CopyFrom(const CMsgAcknowledgeXP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgAcknowledgeXP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAcknowledgeXP::IsInitialized() const {
  return true;
}

void CMsgAcknowledgeXP::InternalSwap(CMsgAcknowledgeXP* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgAcknowledgeXP, predicted_experience_)
      + sizeof(CMsgAcknowledgeXP::predicted_experience_)
      - PROTOBUF_FIELD_OFFSET(CMsgAcknowledgeXP, match_group_)>(
          reinterpret_cast<char*>(&match_group_),
          reinterpret_cast<char*>(&other->match_group_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgAcknowledgeXP::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[138]);
}

// ===================================================================

class CMsgTFXPSource::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgTFXPSource>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_match_group(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgTFXPSource::CMsgTFXPSource(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgTFXPSource)
}
CMsgTFXPSource::CMsgTFXPSource(const CMsgTFXPSource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&match_id_) -
    reinterpret_cast<char*>(&type_)) + sizeof(match_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgTFXPSource)
}

void CMsgTFXPSource::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&match_id_) -
    reinterpret_cast<char*>(&type_)) + sizeof(match_id_));
}

CMsgTFXPSource::~CMsgTFXPSource() {
  // @@protoc_insertion_point(destructor:CMsgTFXPSource)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgTFXPSource::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgTFXPSource::ArenaDtor(void* object) {
  CMsgTFXPSource* _this = reinterpret_cast< CMsgTFXPSource* >(object);
  (void)_this;
}
void CMsgTFXPSource::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgTFXPSource::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgTFXPSource::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgTFXPSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&match_id_) -
        reinterpret_cast<char*>(&type_)) + sizeof(match_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgTFXPSource::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgTFXPSource.XPSourceType type = 1 [default = SOURCE_SCORE, (.key_field) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgTFXPSource_XPSourceType_IsValid(val))) {
            _internal_set_type(static_cast<::CMsgTFXPSource_XPSourceType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_amount(&has_bits);
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 match_group = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_match_group(&has_bits);
          match_group_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 account_id = 4 [(.key_field) = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 match_id = 5 [(.key_field) = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_match_id(&has_bits);
          match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgTFXPSource::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTFXPSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgTFXPSource.XPSourceType type = 1 [default = SOURCE_SCORE, (.key_field) = true];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional int32 amount = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_amount(), target);
  }

  // optional int32 match_group = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_match_group(), target);
  }

  // optional uint32 account_id = 4 [(.key_field) = true];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_account_id(), target);
  }

  // optional uint64 match_id = 5 [(.key_field) = true];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_match_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTFXPSource)
  return target;
}

size_t CMsgTFXPSource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgTFXPSource)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .CMsgTFXPSource.XPSourceType type = 1 [default = SOURCE_SCORE, (.key_field) = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional int32 amount = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_amount());
    }

    // optional int32 match_group = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_match_group());
    }

    // optional uint32 account_id = 4 [(.key_field) = true];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional uint64 match_id = 5 [(.key_field) = true];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_match_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgTFXPSource::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgTFXPSource)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTFXPSource* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgTFXPSource>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgTFXPSource)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgTFXPSource)
    MergeFrom(*source);
  }
}

void CMsgTFXPSource::MergeFrom(const CMsgTFXPSource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgTFXPSource)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      amount_ = from.amount_;
    }
    if (cached_has_bits & 0x00000004u) {
      match_group_ = from.match_group_;
    }
    if (cached_has_bits & 0x00000008u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      match_id_ = from.match_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgTFXPSource::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgTFXPSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFXPSource::CopyFrom(const CMsgTFXPSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgTFXPSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFXPSource::IsInitialized() const {
  return true;
}

void CMsgTFXPSource::InternalSwap(CMsgTFXPSource* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgTFXPSource, match_id_)
      + sizeof(CMsgTFXPSource::match_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgTFXPSource, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgTFXPSource::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[139]);
}

// ===================================================================

class CMsgTFXPSourceBreakdown::_Internal {
 public:
};

CMsgTFXPSourceBreakdown::CMsgTFXPSourceBreakdown(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  sources_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgTFXPSourceBreakdown)
}
CMsgTFXPSourceBreakdown::CMsgTFXPSourceBreakdown(const CMsgTFXPSourceBreakdown& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      sources_(from.sources_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgTFXPSourceBreakdown)
}

void CMsgTFXPSourceBreakdown::SharedCtor() {
}

CMsgTFXPSourceBreakdown::~CMsgTFXPSourceBreakdown() {
  // @@protoc_insertion_point(destructor:CMsgTFXPSourceBreakdown)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgTFXPSourceBreakdown::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgTFXPSourceBreakdown::ArenaDtor(void* object) {
  CMsgTFXPSourceBreakdown* _this = reinterpret_cast< CMsgTFXPSourceBreakdown* >(object);
  (void)_this;
}
void CMsgTFXPSourceBreakdown::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgTFXPSourceBreakdown::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgTFXPSourceBreakdown::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgTFXPSourceBreakdown)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sources_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgTFXPSourceBreakdown::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgTFXPSource sources = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sources(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgTFXPSourceBreakdown::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTFXPSourceBreakdown)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgTFXPSource sources = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sources_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_sources(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTFXPSourceBreakdown)
  return target;
}

size_t CMsgTFXPSourceBreakdown::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgTFXPSourceBreakdown)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgTFXPSource sources = 1;
  total_size += 1UL * this->_internal_sources_size();
  for (const auto& msg : this->sources_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgTFXPSourceBreakdown::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgTFXPSourceBreakdown)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTFXPSourceBreakdown* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgTFXPSourceBreakdown>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgTFXPSourceBreakdown)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgTFXPSourceBreakdown)
    MergeFrom(*source);
  }
}

void CMsgTFXPSourceBreakdown::MergeFrom(const CMsgTFXPSourceBreakdown& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgTFXPSourceBreakdown)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sources_.MergeFrom(from.sources_);
}

void CMsgTFXPSourceBreakdown::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgTFXPSourceBreakdown)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFXPSourceBreakdown::CopyFrom(const CMsgTFXPSourceBreakdown& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgTFXPSourceBreakdown)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFXPSourceBreakdown::IsInitialized() const {
  return true;
}

void CMsgTFXPSourceBreakdown::InternalSwap(CMsgTFXPSourceBreakdown* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  sources_.InternalSwap(&other->sources_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgTFXPSourceBreakdown::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[140]);
}

// ===================================================================

class CMsgTFClientInit::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgTFClientInit>()._has_bits_);
  static void set_has_client_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_language(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgTFClientInit::CMsgTFClientInit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgTFClientInit)
}
CMsgTFClientInit::CMsgTFClientInit(const CMsgTFClientInit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&client_version_, &from.client_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&language_) -
    reinterpret_cast<char*>(&client_version_)) + sizeof(language_));
  // @@protoc_insertion_point(copy_constructor:CMsgTFClientInit)
}

void CMsgTFClientInit::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&client_version_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&language_) -
    reinterpret_cast<char*>(&client_version_)) + sizeof(language_));
}

CMsgTFClientInit::~CMsgTFClientInit() {
  // @@protoc_insertion_point(destructor:CMsgTFClientInit)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgTFClientInit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgTFClientInit::ArenaDtor(void* object) {
  CMsgTFClientInit* _this = reinterpret_cast< CMsgTFClientInit* >(object);
  (void)_this;
}
void CMsgTFClientInit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgTFClientInit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgTFClientInit::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgTFClientInit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&client_version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&language_) -
        reinterpret_cast<char*>(&client_version_)) + sizeof(language_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgTFClientInit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 client_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_client_version(&has_bits);
          client_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 language = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_language(&has_bits);
          language_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgTFClientInit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTFClientInit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 client_version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_client_version(), target);
  }

  // optional int32 language = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_language(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTFClientInit)
  return target;
}

size_t CMsgTFClientInit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgTFClientInit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 client_version = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_client_version());
    }

    // optional int32 language = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_language());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgTFClientInit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgTFClientInit)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTFClientInit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgTFClientInit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgTFClientInit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgTFClientInit)
    MergeFrom(*source);
  }
}

void CMsgTFClientInit::MergeFrom(const CMsgTFClientInit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgTFClientInit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      client_version_ = from.client_version_;
    }
    if (cached_has_bits & 0x00000002u) {
      language_ = from.language_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgTFClientInit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgTFClientInit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTFClientInit::CopyFrom(const CMsgTFClientInit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgTFClientInit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTFClientInit::IsInitialized() const {
  return true;
}

void CMsgTFClientInit::InternalSwap(CMsgTFClientInit* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgTFClientInit, language_)
      + sizeof(CMsgTFClientInit::language_)
      - PROTOBUF_FIELD_OFFSET(CMsgTFClientInit, client_version_)>(
          reinterpret_cast<char*>(&client_version_),
          reinterpret_cast<char*>(&other->client_version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgTFClientInit::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[141]);
}

// ===================================================================

class CMsgGCNotification::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCNotification>()._has_bits_);
  static void set_has_notification_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_expiration_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_notification_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCNotification::CMsgGCNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCNotification)
}
CMsgGCNotification::CMsgGCNotification(const CMsgGCNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  notification_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_notification_string()) {
    notification_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_notification_string(), 
      GetArenaForAllocation());
  }
  ::memcpy(&notification_id_, &from.notification_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&notification_id_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCNotification)
}

void CMsgGCNotification::SharedCtor() {
notification_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&notification_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&expiration_time_) -
    reinterpret_cast<char*>(&notification_id_)) + sizeof(expiration_time_));
type_ = 1;
}

CMsgGCNotification::~CMsgGCNotification() {
  // @@protoc_insertion_point(destructor:CMsgGCNotification)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCNotification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  notification_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCNotification::ArenaDtor(void* object) {
  CMsgGCNotification* _this = reinterpret_cast< CMsgGCNotification* >(object);
  (void)_this;
}
void CMsgGCNotification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    notification_string_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&notification_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&expiration_time_) -
        reinterpret_cast<char*>(&notification_id_)) + sizeof(expiration_time_));
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCNotification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 notification_id = 1 [(.key_field) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_notification_id(&has_bits);
          notification_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 expiration_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_expiration_time(&has_bits);
          expiration_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional .CMsgGCNotification.NotificationType type = 4 [default = NOTIFICATION_CUSTOM_STRING];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgGCNotification_NotificationType_IsValid(val))) {
            _internal_set_type(static_cast<::CMsgGCNotification_NotificationType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string notification_string = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_notification_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGCNotification.notification_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCNotification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 notification_id = 1 [(.key_field) = true];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_notification_id(), target);
  }

  // optional uint32 account_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_account_id(), target);
  }

  // optional fixed32 expiration_time = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(3, this->_internal_expiration_time(), target);
  }

  // optional .CMsgGCNotification.NotificationType type = 4 [default = NOTIFICATION_CUSTOM_STRING];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_type(), target);
  }

  // optional string notification_string = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_notification_string().data(), static_cast<int>(this->_internal_notification_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCNotification.notification_string");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_notification_string(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCNotification)
  return target;
}

size_t CMsgGCNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCNotification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string notification_string = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_notification_string());
    }

    // optional uint64 notification_id = 1 [(.key_field) = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_notification_id());
    }

    // optional uint32 account_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional fixed32 expiration_time = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional .CMsgGCNotification.NotificationType type = 4 [default = NOTIFICATION_CUSTOM_STRING];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCNotification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCNotification)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCNotification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCNotification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCNotification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCNotification)
    MergeFrom(*source);
  }
}

void CMsgGCNotification::MergeFrom(const CMsgGCNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCNotification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_notification_string(from._internal_notification_string());
    }
    if (cached_has_bits & 0x00000002u) {
      notification_id_ = from.notification_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      expiration_time_ = from.expiration_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCNotification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCNotification::CopyFrom(const CMsgGCNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCNotification::IsInitialized() const {
  return true;
}

void CMsgGCNotification::InternalSwap(CMsgGCNotification* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &notification_string_, GetArenaForAllocation(),
      &other->notification_string_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCNotification, expiration_time_)
      + sizeof(CMsgGCNotification::expiration_time_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCNotification, notification_id_)>(
          reinterpret_cast<char*>(&notification_id_),
          reinterpret_cast<char*>(&other->notification_id_));
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCNotification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[142]);
}

// ===================================================================

class CMsgGCNotificationQueue::_Internal {
 public:
};

CMsgGCNotificationQueue::CMsgGCNotificationQueue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  notifications_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCNotificationQueue)
}
CMsgGCNotificationQueue::CMsgGCNotificationQueue(const CMsgGCNotificationQueue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      notifications_(from.notifications_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGCNotificationQueue)
}

void CMsgGCNotificationQueue::SharedCtor() {
}

CMsgGCNotificationQueue::~CMsgGCNotificationQueue() {
  // @@protoc_insertion_point(destructor:CMsgGCNotificationQueue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCNotificationQueue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCNotificationQueue::ArenaDtor(void* object) {
  CMsgGCNotificationQueue* _this = reinterpret_cast< CMsgGCNotificationQueue* >(object);
  (void)_this;
}
void CMsgGCNotificationQueue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCNotificationQueue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCNotificationQueue::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCNotificationQueue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  notifications_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCNotificationQueue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgGCNotification notifications = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_notifications(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCNotificationQueue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCNotificationQueue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgGCNotification notifications = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_notifications_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_notifications(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCNotificationQueue)
  return target;
}

size_t CMsgGCNotificationQueue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCNotificationQueue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgGCNotification notifications = 1;
  total_size += 1UL * this->_internal_notifications_size();
  for (const auto& msg : this->notifications_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCNotificationQueue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCNotificationQueue)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCNotificationQueue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCNotificationQueue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCNotificationQueue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCNotificationQueue)
    MergeFrom(*source);
  }
}

void CMsgGCNotificationQueue::MergeFrom(const CMsgGCNotificationQueue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCNotificationQueue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  notifications_.MergeFrom(from.notifications_);
}

void CMsgGCNotificationQueue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCNotificationQueue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCNotificationQueue::CopyFrom(const CMsgGCNotificationQueue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCNotificationQueue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCNotificationQueue::IsInitialized() const {
  return true;
}

void CMsgGCNotificationQueue::InternalSwap(CMsgGCNotificationQueue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  notifications_.InternalSwap(&other->notifications_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCNotificationQueue::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[143]);
}

// ===================================================================

class CMsgNotificationAcknowledge::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgNotificationAcknowledge>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_notification_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgNotificationAcknowledge::CMsgNotificationAcknowledge(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgNotificationAcknowledge)
}
CMsgNotificationAcknowledge::CMsgNotificationAcknowledge(const CMsgNotificationAcknowledge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&notification_id_, &from.notification_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&account_id_) -
    reinterpret_cast<char*>(&notification_id_)) + sizeof(account_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgNotificationAcknowledge)
}

void CMsgNotificationAcknowledge::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&notification_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&account_id_) -
    reinterpret_cast<char*>(&notification_id_)) + sizeof(account_id_));
}

CMsgNotificationAcknowledge::~CMsgNotificationAcknowledge() {
  // @@protoc_insertion_point(destructor:CMsgNotificationAcknowledge)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgNotificationAcknowledge::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgNotificationAcknowledge::ArenaDtor(void* object) {
  CMsgNotificationAcknowledge* _this = reinterpret_cast< CMsgNotificationAcknowledge* >(object);
  (void)_this;
}
void CMsgNotificationAcknowledge::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgNotificationAcknowledge::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgNotificationAcknowledge::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgNotificationAcknowledge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&notification_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&account_id_) -
        reinterpret_cast<char*>(&notification_id_)) + sizeof(account_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgNotificationAcknowledge::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 notification_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_notification_id(&has_bits);
          notification_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgNotificationAcknowledge::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgNotificationAcknowledge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint64 notification_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_notification_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgNotificationAcknowledge)
  return target;
}

size_t CMsgNotificationAcknowledge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgNotificationAcknowledge)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 notification_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_notification_id());
    }

    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgNotificationAcknowledge::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgNotificationAcknowledge)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgNotificationAcknowledge* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgNotificationAcknowledge>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgNotificationAcknowledge)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgNotificationAcknowledge)
    MergeFrom(*source);
  }
}

void CMsgNotificationAcknowledge::MergeFrom(const CMsgNotificationAcknowledge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgNotificationAcknowledge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      notification_id_ = from.notification_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      account_id_ = from.account_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgNotificationAcknowledge::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgNotificationAcknowledge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgNotificationAcknowledge::CopyFrom(const CMsgNotificationAcknowledge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgNotificationAcknowledge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgNotificationAcknowledge::IsInitialized() const {
  return true;
}

void CMsgNotificationAcknowledge::InternalSwap(CMsgNotificationAcknowledge* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgNotificationAcknowledge, account_id_)
      + sizeof(CMsgNotificationAcknowledge::account_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgNotificationAcknowledge, notification_id_)>(
          reinterpret_cast<char*>(&notification_id_),
          reinterpret_cast<char*>(&other->notification_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgNotificationAcknowledge::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[144]);
}

// ===================================================================

class CMsgNotificationAcknowledgeReply::_Internal {
 public:
};

CMsgNotificationAcknowledgeReply::CMsgNotificationAcknowledgeReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgNotificationAcknowledgeReply)
}
CMsgNotificationAcknowledgeReply::CMsgNotificationAcknowledgeReply(const CMsgNotificationAcknowledgeReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgNotificationAcknowledgeReply)
}

void CMsgNotificationAcknowledgeReply::SharedCtor() {
}

CMsgNotificationAcknowledgeReply::~CMsgNotificationAcknowledgeReply() {
  // @@protoc_insertion_point(destructor:CMsgNotificationAcknowledgeReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgNotificationAcknowledgeReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgNotificationAcknowledgeReply::ArenaDtor(void* object) {
  CMsgNotificationAcknowledgeReply* _this = reinterpret_cast< CMsgNotificationAcknowledgeReply* >(object);
  (void)_this;
}
void CMsgNotificationAcknowledgeReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgNotificationAcknowledgeReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgNotificationAcknowledgeReply::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgNotificationAcknowledgeReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgNotificationAcknowledgeReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgNotificationAcknowledgeReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgNotificationAcknowledgeReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgNotificationAcknowledgeReply)
  return target;
}

size_t CMsgNotificationAcknowledgeReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgNotificationAcknowledgeReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgNotificationAcknowledgeReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgNotificationAcknowledgeReply)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgNotificationAcknowledgeReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgNotificationAcknowledgeReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgNotificationAcknowledgeReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgNotificationAcknowledgeReply)
    MergeFrom(*source);
  }
}

void CMsgNotificationAcknowledgeReply::MergeFrom(const CMsgNotificationAcknowledgeReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgNotificationAcknowledgeReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgNotificationAcknowledgeReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgNotificationAcknowledgeReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgNotificationAcknowledgeReply::CopyFrom(const CMsgNotificationAcknowledgeReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgNotificationAcknowledgeReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgNotificationAcknowledgeReply::IsInitialized() const {
  return true;
}

void CMsgNotificationAcknowledgeReply::InternalSwap(CMsgNotificationAcknowledgeReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgNotificationAcknowledgeReply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[145]);
}

// ===================================================================

class CMsgGC_Match_Result_Player::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGC_Match_Result_Player>()._has_bits_);
  static void set_has_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_original_party_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_team(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_score(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ping(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_rank(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_classes_played(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_kills(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_deaths(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_damage(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_healing(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_support(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_score_medal(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_kills_medal(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_damage_medal(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_healing_medal(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_support_medal(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_leave_time(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_leave_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_connect_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
};

CMsgGC_Match_Result_Player::CMsgGC_Match_Result_Player(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  xp_breakdown_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGC_Match_Result.Player)
}
CMsgGC_Match_Result_Player::CMsgGC_Match_Result_Player(const CMsgGC_Match_Result_Player& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      xp_breakdown_(from.xp_breakdown_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steam_id_, &from.steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&connect_time_) -
    reinterpret_cast<char*>(&steam_id_)) + sizeof(connect_time_));
  // @@protoc_insertion_point(copy_constructor:CMsgGC_Match_Result.Player)
}

void CMsgGC_Match_Result_Player::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steam_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&connect_time_) -
    reinterpret_cast<char*>(&steam_id_)) + sizeof(connect_time_));
}

CMsgGC_Match_Result_Player::~CMsgGC_Match_Result_Player() {
  // @@protoc_insertion_point(destructor:CMsgGC_Match_Result.Player)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGC_Match_Result_Player::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGC_Match_Result_Player::ArenaDtor(void* object) {
  CMsgGC_Match_Result_Player* _this = reinterpret_cast< CMsgGC_Match_Result_Player* >(object);
  (void)_this;
}
void CMsgGC_Match_Result_Player::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGC_Match_Result_Player::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGC_Match_Result_Player::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGC_Match_Result.Player)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  xp_breakdown_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&classes_played_) -
        reinterpret_cast<char*>(&steam_id_)) + sizeof(classes_played_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&kills_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&damage_medal_) -
        reinterpret_cast<char*>(&kills_)) + sizeof(damage_medal_));
  }
  if (cached_has_bits & 0x001f0000u) {
    ::memset(&healing_medal_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&connect_time_) -
        reinterpret_cast<char*>(&healing_medal_)) + sizeof(connect_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGC_Match_Result_Player::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steam_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_steam_id(&has_bits);
          steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint64 original_party_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_original_party_id(&has_bits);
          original_party_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 team = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_team(&has_bits);
          team_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 score = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_score(&has_bits);
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ping = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_ping(&has_bits);
          ping_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 flags = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_flags(&has_bits);
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rank = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_rank(&has_bits);
          rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 classes_played = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_classes_played(&has_bits);
          classes_played_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 kills = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_kills(&has_bits);
          kills_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 deaths = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_deaths(&has_bits);
          deaths_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 damage = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_damage(&has_bits);
          damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 healing = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_healing(&has_bits);
          healing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 support = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_support(&has_bits);
          support_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 score_medal = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_score_medal(&has_bits);
          score_medal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 kills_medal = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_kills_medal(&has_bits);
          kills_medal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 damage_medal = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_damage_medal(&has_bits);
          damage_medal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 healing_medal = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_healing_medal(&has_bits);
          healing_medal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 support_medal = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_support_medal(&has_bits);
          support_medal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgTFXPSource xp_breakdown = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_xp_breakdown(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<170>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 leave_time = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_leave_time(&has_bits);
          leave_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TFMatchLeaveReason leave_reason = 23 [default = TFMatchLeaveReason_UNSPECIFIED];
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TFMatchLeaveReason_IsValid(val))) {
            _internal_set_leave_reason(static_cast<::TFMatchLeaveReason>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(23, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 connect_time = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_connect_time(&has_bits);
          connect_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGC_Match_Result_Player::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGC_Match_Result.Player)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steam_id(), target);
  }

  // optional uint64 original_party_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_original_party_id(), target);
  }

  // optional uint32 team = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_team(), target);
  }

  // optional uint32 score = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_score(), target);
  }

  // optional uint32 ping = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_ping(), target);
  }

  // optional uint32 flags = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_flags(), target);
  }

  // optional uint32 rank = 9;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_rank(), target);
  }

  // optional uint32 classes_played = 10;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_classes_played(), target);
  }

  // optional uint32 kills = 11;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_kills(), target);
  }

  // optional uint32 deaths = 12;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_deaths(), target);
  }

  // optional uint32 damage = 13;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_damage(), target);
  }

  // optional uint32 healing = 14;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_healing(), target);
  }

  // optional uint32 support = 15;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_support(), target);
  }

  // optional uint32 score_medal = 16;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_score_medal(), target);
  }

  // optional uint32 kills_medal = 17;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_kills_medal(), target);
  }

  // optional uint32 damage_medal = 18;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_damage_medal(), target);
  }

  // optional uint32 healing_medal = 19;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_healing_medal(), target);
  }

  // optional uint32 support_medal = 20;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_support_medal(), target);
  }

  // repeated .CMsgTFXPSource xp_breakdown = 21;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_xp_breakdown_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, this->_internal_xp_breakdown(i), target, stream);
  }

  // optional uint32 leave_time = 22;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->_internal_leave_time(), target);
  }

  // optional .TFMatchLeaveReason leave_reason = 23 [default = TFMatchLeaveReason_UNSPECIFIED];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      23, this->_internal_leave_reason(), target);
  }

  // optional uint32 connect_time = 24;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(24, this->_internal_connect_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGC_Match_Result.Player)
  return target;
}

size_t CMsgGC_Match_Result_Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGC_Match_Result.Player)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgTFXPSource xp_breakdown = 21;
  total_size += 2UL * this->_internal_xp_breakdown_size();
  for (const auto& msg : this->xp_breakdown_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional fixed64 steam_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint64 original_party_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_original_party_id());
    }

    // optional uint32 team = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team());
    }

    // optional uint32 score = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_score());
    }

    // optional uint32 ping = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ping());
    }

    // optional uint32 flags = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_flags());
    }

    // optional uint32 rank = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rank());
    }

    // optional uint32 classes_played = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_classes_played());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 kills = 11;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_kills());
    }

    // optional uint32 deaths = 12;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_deaths());
    }

    // optional uint32 damage = 13;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_damage());
    }

    // optional uint32 healing = 14;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_healing());
    }

    // optional uint32 support = 15;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_support());
    }

    // optional uint32 score_medal = 16;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_score_medal());
    }

    // optional uint32 kills_medal = 17;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_kills_medal());
    }

    // optional uint32 damage_medal = 18;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_damage_medal());
    }

  }
  if (cached_has_bits & 0x001f0000u) {
    // optional uint32 healing_medal = 19;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_healing_medal());
    }

    // optional uint32 support_medal = 20;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_support_medal());
    }

    // optional uint32 leave_time = 22;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_leave_time());
    }

    // optional .TFMatchLeaveReason leave_reason = 23 [default = TFMatchLeaveReason_UNSPECIFIED];
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_leave_reason());
    }

    // optional uint32 connect_time = 24;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_connect_time());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGC_Match_Result_Player::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGC_Match_Result.Player)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGC_Match_Result_Player* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGC_Match_Result_Player>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGC_Match_Result.Player)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGC_Match_Result.Player)
    MergeFrom(*source);
  }
}

void CMsgGC_Match_Result_Player::MergeFrom(const CMsgGC_Match_Result_Player& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGC_Match_Result.Player)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  xp_breakdown_.MergeFrom(from.xp_breakdown_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      original_party_id_ = from.original_party_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      team_ = from.team_;
    }
    if (cached_has_bits & 0x00000008u) {
      score_ = from.score_;
    }
    if (cached_has_bits & 0x00000010u) {
      ping_ = from.ping_;
    }
    if (cached_has_bits & 0x00000020u) {
      flags_ = from.flags_;
    }
    if (cached_has_bits & 0x00000040u) {
      rank_ = from.rank_;
    }
    if (cached_has_bits & 0x00000080u) {
      classes_played_ = from.classes_played_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      kills_ = from.kills_;
    }
    if (cached_has_bits & 0x00000200u) {
      deaths_ = from.deaths_;
    }
    if (cached_has_bits & 0x00000400u) {
      damage_ = from.damage_;
    }
    if (cached_has_bits & 0x00000800u) {
      healing_ = from.healing_;
    }
    if (cached_has_bits & 0x00001000u) {
      support_ = from.support_;
    }
    if (cached_has_bits & 0x00002000u) {
      score_medal_ = from.score_medal_;
    }
    if (cached_has_bits & 0x00004000u) {
      kills_medal_ = from.kills_medal_;
    }
    if (cached_has_bits & 0x00008000u) {
      damage_medal_ = from.damage_medal_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x001f0000u) {
    if (cached_has_bits & 0x00010000u) {
      healing_medal_ = from.healing_medal_;
    }
    if (cached_has_bits & 0x00020000u) {
      support_medal_ = from.support_medal_;
    }
    if (cached_has_bits & 0x00040000u) {
      leave_time_ = from.leave_time_;
    }
    if (cached_has_bits & 0x00080000u) {
      leave_reason_ = from.leave_reason_;
    }
    if (cached_has_bits & 0x00100000u) {
      connect_time_ = from.connect_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGC_Match_Result_Player::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGC_Match_Result.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_Match_Result_Player::CopyFrom(const CMsgGC_Match_Result_Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGC_Match_Result.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_Match_Result_Player::IsInitialized() const {
  return true;
}

void CMsgGC_Match_Result_Player::InternalSwap(CMsgGC_Match_Result_Player* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  xp_breakdown_.InternalSwap(&other->xp_breakdown_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGC_Match_Result_Player, connect_time_)
      + sizeof(CMsgGC_Match_Result_Player::connect_time_)
      - PROTOBUF_FIELD_OFFSET(CMsgGC_Match_Result_Player, steam_id_)>(
          reinterpret_cast<char*>(&steam_id_),
          reinterpret_cast<char*>(&other->steam_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGC_Match_Result_Player::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[146]);
}

// ===================================================================

class CMsgGC_Match_Result::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGC_Match_Result>()._has_bits_);
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_match_group(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_red_score(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_blue_score(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_winning_team(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_map_index(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_game_type(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_win_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_bots(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

CMsgGC_Match_Result::CMsgGC_Match_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  players_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGC_Match_Result)
}
CMsgGC_Match_Result::CMsgGC_Match_Result(const CMsgGC_Match_Result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      players_(from.players_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&match_id_, &from.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&bots_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(bots_));
  // @@protoc_insertion_point(copy_constructor:CMsgGC_Match_Result)
}

void CMsgGC_Match_Result::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&match_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bots_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(bots_));
}

CMsgGC_Match_Result::~CMsgGC_Match_Result() {
  // @@protoc_insertion_point(destructor:CMsgGC_Match_Result)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGC_Match_Result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGC_Match_Result::ArenaDtor(void* object) {
  CMsgGC_Match_Result* _this = reinterpret_cast< CMsgGC_Match_Result* >(object);
  (void)_this;
}
void CMsgGC_Match_Result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGC_Match_Result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGC_Match_Result::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGC_Match_Result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&map_index_) -
        reinterpret_cast<char*>(&match_id_)) + sizeof(map_index_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&game_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bots_) -
        reinterpret_cast<char*>(&game_type_)) + sizeof(bots_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGC_Match_Result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 match_id = 1 [(.key_field) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_match_id(&has_bits);
          match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 match_group = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_match_group(&has_bits);
          match_group_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgGC_Match_Result.Status status = 3 [default = MATCH_SUCCEEDED];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgGC_Match_Result_Status_IsValid(val))) {
            _internal_set_status(static_cast<::CMsgGC_Match_Result_Status>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 duration = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_duration(&has_bits);
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 red_score = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_red_score(&has_bits);
          red_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 blue_score = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_blue_score(&has_bits);
          blue_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 winning_team = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_winning_team(&has_bits);
          winning_team_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 map_index = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_map_index(&has_bits);
          map_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 game_type = 9 [default = 0];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_game_type(&has_bits);
          game_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgGC_Match_Result.Player players = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 win_reason = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_win_reason(&has_bits);
          win_reason_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 flags = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_flags(&has_bits);
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 bots = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_bots(&has_bits);
          bots_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGC_Match_Result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGC_Match_Result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1 [(.key_field) = true];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_match_id(), target);
  }

  // optional int32 match_group = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_match_group(), target);
  }

  // optional .CMsgGC_Match_Result.Status status = 3 [default = MATCH_SUCCEEDED];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_status(), target);
  }

  // optional uint32 duration = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_duration(), target);
  }

  // optional uint32 red_score = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_red_score(), target);
  }

  // optional uint32 blue_score = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_blue_score(), target);
  }

  // optional uint32 winning_team = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_winning_team(), target);
  }

  // optional uint32 map_index = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_map_index(), target);
  }

  // optional uint32 game_type = 9 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_game_type(), target);
  }

  // repeated .CMsgGC_Match_Result.Player players = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_players_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_players(i), target, stream);
  }

  // optional uint32 win_reason = 13;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_win_reason(), target);
  }

  // optional uint32 flags = 14;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_flags(), target);
  }

  // optional uint32 bots = 16;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_bots(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGC_Match_Result)
  return target;
}

size_t CMsgGC_Match_Result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGC_Match_Result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgGC_Match_Result.Player players = 10;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint64 match_id = 1 [(.key_field) = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_match_id());
    }

    // optional int32 match_group = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_match_group());
    }

    // optional .CMsgGC_Match_Result.Status status = 3 [default = MATCH_SUCCEEDED];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
    }

    // optional uint32 duration = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_duration());
    }

    // optional uint32 red_score = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_red_score());
    }

    // optional uint32 blue_score = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_blue_score());
    }

    // optional uint32 winning_team = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_winning_team());
    }

    // optional uint32 map_index = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_map_index());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional uint32 game_type = 9 [default = 0];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_game_type());
    }

    // optional uint32 win_reason = 13;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_win_reason());
    }

    // optional uint32 flags = 14;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_flags());
    }

    // optional uint32 bots = 16;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_bots());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGC_Match_Result::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGC_Match_Result)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGC_Match_Result* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGC_Match_Result>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGC_Match_Result)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGC_Match_Result)
    MergeFrom(*source);
  }
}

void CMsgGC_Match_Result::MergeFrom(const CMsgGC_Match_Result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGC_Match_Result)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      match_group_ = from.match_group_;
    }
    if (cached_has_bits & 0x00000004u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000008u) {
      duration_ = from.duration_;
    }
    if (cached_has_bits & 0x00000010u) {
      red_score_ = from.red_score_;
    }
    if (cached_has_bits & 0x00000020u) {
      blue_score_ = from.blue_score_;
    }
    if (cached_has_bits & 0x00000040u) {
      winning_team_ = from.winning_team_;
    }
    if (cached_has_bits & 0x00000080u) {
      map_index_ = from.map_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      game_type_ = from.game_type_;
    }
    if (cached_has_bits & 0x00000200u) {
      win_reason_ = from.win_reason_;
    }
    if (cached_has_bits & 0x00000400u) {
      flags_ = from.flags_;
    }
    if (cached_has_bits & 0x00000800u) {
      bots_ = from.bots_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGC_Match_Result::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGC_Match_Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_Match_Result::CopyFrom(const CMsgGC_Match_Result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGC_Match_Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_Match_Result::IsInitialized() const {
  return true;
}

void CMsgGC_Match_Result::InternalSwap(CMsgGC_Match_Result* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  players_.InternalSwap(&other->players_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGC_Match_Result, bots_)
      + sizeof(CMsgGC_Match_Result::bots_)
      - PROTOBUF_FIELD_OFFSET(CMsgGC_Match_Result, match_id_)>(
          reinterpret_cast<char*>(&match_id_),
          reinterpret_cast<char*>(&other->match_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGC_Match_Result::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[147]);
}

// ===================================================================

class CMsgGC_Match_ResultResponse::_Internal {
 public:
};

CMsgGC_Match_ResultResponse::CMsgGC_Match_ResultResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGC_Match_ResultResponse)
}
CMsgGC_Match_ResultResponse::CMsgGC_Match_ResultResponse(const CMsgGC_Match_ResultResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGC_Match_ResultResponse)
}

void CMsgGC_Match_ResultResponse::SharedCtor() {
}

CMsgGC_Match_ResultResponse::~CMsgGC_Match_ResultResponse() {
  // @@protoc_insertion_point(destructor:CMsgGC_Match_ResultResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGC_Match_ResultResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGC_Match_ResultResponse::ArenaDtor(void* object) {
  CMsgGC_Match_ResultResponse* _this = reinterpret_cast< CMsgGC_Match_ResultResponse* >(object);
  (void)_this;
}
void CMsgGC_Match_ResultResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGC_Match_ResultResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGC_Match_ResultResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGC_Match_ResultResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGC_Match_ResultResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGC_Match_ResultResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGC_Match_ResultResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGC_Match_ResultResponse)
  return target;
}

size_t CMsgGC_Match_ResultResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGC_Match_ResultResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGC_Match_ResultResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGC_Match_ResultResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGC_Match_ResultResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGC_Match_ResultResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGC_Match_ResultResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGC_Match_ResultResponse)
    MergeFrom(*source);
  }
}

void CMsgGC_Match_ResultResponse::MergeFrom(const CMsgGC_Match_ResultResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGC_Match_ResultResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgGC_Match_ResultResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGC_Match_ResultResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_Match_ResultResponse::CopyFrom(const CMsgGC_Match_ResultResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGC_Match_ResultResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_Match_ResultResponse::IsInitialized() const {
  return true;
}

void CMsgGC_Match_ResultResponse::InternalSwap(CMsgGC_Match_ResultResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGC_Match_ResultResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[148]);
}

// ===================================================================

class CEconItemPreviewDataBlock::_Internal {
 public:
  using HasBits = decltype(std::declval<CEconItemPreviewDataBlock>()._has_bits_);
  static const ::CSOEconItem& econitem(const CEconItemPreviewDataBlock* msg);
  static void set_has_econitem(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CSOEconItem&
CEconItemPreviewDataBlock::_Internal::econitem(const CEconItemPreviewDataBlock* msg) {
  return *msg->econitem_;
}
void CEconItemPreviewDataBlock::clear_econitem() {
  if (econitem_ != nullptr) econitem_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CEconItemPreviewDataBlock::CEconItemPreviewDataBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CEconItemPreviewDataBlock)
}
CEconItemPreviewDataBlock::CEconItemPreviewDataBlock(const CEconItemPreviewDataBlock& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_econitem()) {
    econitem_ = new ::CSOEconItem(*from.econitem_);
  } else {
    econitem_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CEconItemPreviewDataBlock)
}

void CEconItemPreviewDataBlock::SharedCtor() {
econitem_ = nullptr;
}

CEconItemPreviewDataBlock::~CEconItemPreviewDataBlock() {
  // @@protoc_insertion_point(destructor:CEconItemPreviewDataBlock)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CEconItemPreviewDataBlock::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete econitem_;
}

void CEconItemPreviewDataBlock::ArenaDtor(void* object) {
  CEconItemPreviewDataBlock* _this = reinterpret_cast< CEconItemPreviewDataBlock* >(object);
  (void)_this;
}
void CEconItemPreviewDataBlock::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CEconItemPreviewDataBlock::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CEconItemPreviewDataBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:CEconItemPreviewDataBlock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(econitem_ != nullptr);
    econitem_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CEconItemPreviewDataBlock::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CSOEconItem econitem = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_econitem(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CEconItemPreviewDataBlock::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CEconItemPreviewDataBlock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CSOEconItem econitem = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::econitem(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CEconItemPreviewDataBlock)
  return target;
}

size_t CEconItemPreviewDataBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CEconItemPreviewDataBlock)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CSOEconItem econitem = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *econitem_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CEconItemPreviewDataBlock::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CEconItemPreviewDataBlock)
  GOOGLE_DCHECK_NE(&from, this);
  const CEconItemPreviewDataBlock* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CEconItemPreviewDataBlock>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CEconItemPreviewDataBlock)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CEconItemPreviewDataBlock)
    MergeFrom(*source);
  }
}

void CEconItemPreviewDataBlock::MergeFrom(const CEconItemPreviewDataBlock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CEconItemPreviewDataBlock)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_econitem()) {
    _internal_mutable_econitem()->::CSOEconItem::MergeFrom(from._internal_econitem());
  }
}

void CEconItemPreviewDataBlock::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CEconItemPreviewDataBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CEconItemPreviewDataBlock::CopyFrom(const CEconItemPreviewDataBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CEconItemPreviewDataBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CEconItemPreviewDataBlock::IsInitialized() const {
  return true;
}

void CEconItemPreviewDataBlock::InternalSwap(CEconItemPreviewDataBlock* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(econitem_, other->econitem_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CEconItemPreviewDataBlock::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[149]);
}

// ===================================================================

class CMsgGC_Client2GCEconPreviewDataBlockRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGC_Client2GCEconPreviewDataBlockRequest>()._has_bits_);
  static void set_has_param_s(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_param_a(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_param_d(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_param_m(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgGC_Client2GCEconPreviewDataBlockRequest::CMsgGC_Client2GCEconPreviewDataBlockRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGC_Client2GCEconPreviewDataBlockRequest)
}
CMsgGC_Client2GCEconPreviewDataBlockRequest::CMsgGC_Client2GCEconPreviewDataBlockRequest(const CMsgGC_Client2GCEconPreviewDataBlockRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&param_s_, &from.param_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&param_m_) -
    reinterpret_cast<char*>(&param_s_)) + sizeof(param_m_));
  // @@protoc_insertion_point(copy_constructor:CMsgGC_Client2GCEconPreviewDataBlockRequest)
}

void CMsgGC_Client2GCEconPreviewDataBlockRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&param_s_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&param_m_) -
    reinterpret_cast<char*>(&param_s_)) + sizeof(param_m_));
}

CMsgGC_Client2GCEconPreviewDataBlockRequest::~CMsgGC_Client2GCEconPreviewDataBlockRequest() {
  // @@protoc_insertion_point(destructor:CMsgGC_Client2GCEconPreviewDataBlockRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGC_Client2GCEconPreviewDataBlockRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGC_Client2GCEconPreviewDataBlockRequest::ArenaDtor(void* object) {
  CMsgGC_Client2GCEconPreviewDataBlockRequest* _this = reinterpret_cast< CMsgGC_Client2GCEconPreviewDataBlockRequest* >(object);
  (void)_this;
}
void CMsgGC_Client2GCEconPreviewDataBlockRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGC_Client2GCEconPreviewDataBlockRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGC_Client2GCEconPreviewDataBlockRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGC_Client2GCEconPreviewDataBlockRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&param_s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&param_m_) -
        reinterpret_cast<char*>(&param_s_)) + sizeof(param_m_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGC_Client2GCEconPreviewDataBlockRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 param_s = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_param_s(&has_bits);
          param_s_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 param_a = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_param_a(&has_bits);
          param_a_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 param_d = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_param_d(&has_bits);
          param_d_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 param_m = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_param_m(&has_bits);
          param_m_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGC_Client2GCEconPreviewDataBlockRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGC_Client2GCEconPreviewDataBlockRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 param_s = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_param_s(), target);
  }

  // optional uint64 param_a = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_param_a(), target);
  }

  // optional uint64 param_d = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_param_d(), target);
  }

  // optional uint64 param_m = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_param_m(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGC_Client2GCEconPreviewDataBlockRequest)
  return target;
}

size_t CMsgGC_Client2GCEconPreviewDataBlockRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGC_Client2GCEconPreviewDataBlockRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint64 param_s = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_param_s());
    }

    // optional uint64 param_a = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_param_a());
    }

    // optional uint64 param_d = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_param_d());
    }

    // optional uint64 param_m = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_param_m());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGC_Client2GCEconPreviewDataBlockRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGC_Client2GCEconPreviewDataBlockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGC_Client2GCEconPreviewDataBlockRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGC_Client2GCEconPreviewDataBlockRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGC_Client2GCEconPreviewDataBlockRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGC_Client2GCEconPreviewDataBlockRequest)
    MergeFrom(*source);
  }
}

void CMsgGC_Client2GCEconPreviewDataBlockRequest::MergeFrom(const CMsgGC_Client2GCEconPreviewDataBlockRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGC_Client2GCEconPreviewDataBlockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      param_s_ = from.param_s_;
    }
    if (cached_has_bits & 0x00000002u) {
      param_a_ = from.param_a_;
    }
    if (cached_has_bits & 0x00000004u) {
      param_d_ = from.param_d_;
    }
    if (cached_has_bits & 0x00000008u) {
      param_m_ = from.param_m_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGC_Client2GCEconPreviewDataBlockRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGC_Client2GCEconPreviewDataBlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_Client2GCEconPreviewDataBlockRequest::CopyFrom(const CMsgGC_Client2GCEconPreviewDataBlockRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGC_Client2GCEconPreviewDataBlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_Client2GCEconPreviewDataBlockRequest::IsInitialized() const {
  return true;
}

void CMsgGC_Client2GCEconPreviewDataBlockRequest::InternalSwap(CMsgGC_Client2GCEconPreviewDataBlockRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGC_Client2GCEconPreviewDataBlockRequest, param_m_)
      + sizeof(CMsgGC_Client2GCEconPreviewDataBlockRequest::param_m_)
      - PROTOBUF_FIELD_OFFSET(CMsgGC_Client2GCEconPreviewDataBlockRequest, param_s_)>(
          reinterpret_cast<char*>(&param_s_),
          reinterpret_cast<char*>(&other->param_s_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGC_Client2GCEconPreviewDataBlockRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[150]);
}

// ===================================================================

class CMsgGC_Client2GCEconPreviewDataBlockResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGC_Client2GCEconPreviewDataBlockResponse>()._has_bits_);
  static const ::CEconItemPreviewDataBlock& iteminfo(const CMsgGC_Client2GCEconPreviewDataBlockResponse* msg);
  static void set_has_iteminfo(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CEconItemPreviewDataBlock&
CMsgGC_Client2GCEconPreviewDataBlockResponse::_Internal::iteminfo(const CMsgGC_Client2GCEconPreviewDataBlockResponse* msg) {
  return *msg->iteminfo_;
}
CMsgGC_Client2GCEconPreviewDataBlockResponse::CMsgGC_Client2GCEconPreviewDataBlockResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGC_Client2GCEconPreviewDataBlockResponse)
}
CMsgGC_Client2GCEconPreviewDataBlockResponse::CMsgGC_Client2GCEconPreviewDataBlockResponse(const CMsgGC_Client2GCEconPreviewDataBlockResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_iteminfo()) {
    iteminfo_ = new ::CEconItemPreviewDataBlock(*from.iteminfo_);
  } else {
    iteminfo_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CMsgGC_Client2GCEconPreviewDataBlockResponse)
}

void CMsgGC_Client2GCEconPreviewDataBlockResponse::SharedCtor() {
iteminfo_ = nullptr;
}

CMsgGC_Client2GCEconPreviewDataBlockResponse::~CMsgGC_Client2GCEconPreviewDataBlockResponse() {
  // @@protoc_insertion_point(destructor:CMsgGC_Client2GCEconPreviewDataBlockResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGC_Client2GCEconPreviewDataBlockResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete iteminfo_;
}

void CMsgGC_Client2GCEconPreviewDataBlockResponse::ArenaDtor(void* object) {
  CMsgGC_Client2GCEconPreviewDataBlockResponse* _this = reinterpret_cast< CMsgGC_Client2GCEconPreviewDataBlockResponse* >(object);
  (void)_this;
}
void CMsgGC_Client2GCEconPreviewDataBlockResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGC_Client2GCEconPreviewDataBlockResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGC_Client2GCEconPreviewDataBlockResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGC_Client2GCEconPreviewDataBlockResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(iteminfo_ != nullptr);
    iteminfo_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGC_Client2GCEconPreviewDataBlockResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CEconItemPreviewDataBlock iteminfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_iteminfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGC_Client2GCEconPreviewDataBlockResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGC_Client2GCEconPreviewDataBlockResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CEconItemPreviewDataBlock iteminfo = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::iteminfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGC_Client2GCEconPreviewDataBlockResponse)
  return target;
}

size_t CMsgGC_Client2GCEconPreviewDataBlockResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGC_Client2GCEconPreviewDataBlockResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CEconItemPreviewDataBlock iteminfo = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *iteminfo_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGC_Client2GCEconPreviewDataBlockResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGC_Client2GCEconPreviewDataBlockResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGC_Client2GCEconPreviewDataBlockResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGC_Client2GCEconPreviewDataBlockResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGC_Client2GCEconPreviewDataBlockResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGC_Client2GCEconPreviewDataBlockResponse)
    MergeFrom(*source);
  }
}

void CMsgGC_Client2GCEconPreviewDataBlockResponse::MergeFrom(const CMsgGC_Client2GCEconPreviewDataBlockResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGC_Client2GCEconPreviewDataBlockResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_iteminfo()) {
    _internal_mutable_iteminfo()->::CEconItemPreviewDataBlock::MergeFrom(from._internal_iteminfo());
  }
}

void CMsgGC_Client2GCEconPreviewDataBlockResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGC_Client2GCEconPreviewDataBlockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_Client2GCEconPreviewDataBlockResponse::CopyFrom(const CMsgGC_Client2GCEconPreviewDataBlockResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGC_Client2GCEconPreviewDataBlockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_Client2GCEconPreviewDataBlockResponse::IsInitialized() const {
  return true;
}

void CMsgGC_Client2GCEconPreviewDataBlockResponse::InternalSwap(CMsgGC_Client2GCEconPreviewDataBlockResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(iteminfo_, other->iteminfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGC_Client2GCEconPreviewDataBlockResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[151]);
}

// ===================================================================

class CSOTFLadderPlayerStats::_Internal {
 public:
  using HasBits = decltype(std::declval<CSOTFLadderPlayerStats>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_match_group(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_season_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_games(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_score(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_kills(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_deaths(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_damage(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_healing(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_support(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_score_bronze(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_score_silver(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_score_gold(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_kills_bronze(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_kills_silver(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_kills_gold(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_damage_bronze(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_damage_silver(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_damage_gold(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_healing_bronze(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_healing_silver(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_healing_gold(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_support_bronze(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_support_silver(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_support_gold(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
};

CSOTFLadderPlayerStats::CSOTFLadderPlayerStats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSOTFLadderPlayerStats)
}
CSOTFLadderPlayerStats::CSOTFLadderPlayerStats(const CSOTFLadderPlayerStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&support_silver_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(support_silver_));
  // @@protoc_insertion_point(copy_constructor:CSOTFLadderPlayerStats)
}

void CSOTFLadderPlayerStats::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&support_silver_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(support_silver_));
}

CSOTFLadderPlayerStats::~CSOTFLadderPlayerStats() {
  // @@protoc_insertion_point(destructor:CSOTFLadderPlayerStats)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSOTFLadderPlayerStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSOTFLadderPlayerStats::ArenaDtor(void* object) {
  CSOTFLadderPlayerStats* _this = reinterpret_cast< CSOTFLadderPlayerStats* >(object);
  (void)_this;
}
void CSOTFLadderPlayerStats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSOTFLadderPlayerStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSOTFLadderPlayerStats::Clear() {
// @@protoc_insertion_point(message_clear_start:CSOTFLadderPlayerStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&damage_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(damage_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&healing_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&kills_gold_) -
        reinterpret_cast<char*>(&healing_)) + sizeof(kills_gold_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&damage_bronze_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&support_bronze_) -
        reinterpret_cast<char*>(&damage_bronze_)) + sizeof(support_bronze_));
  }
  support_silver_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSOTFLadderPlayerStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1 [(.key_field) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 match_group = 2 [(.key_field) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_match_group(&has_bits);
          match_group_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 season_id = 3 [(.key_field) = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_season_id(&has_bits);
          season_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 games = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_games(&has_bits);
          games_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 score = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_score(&has_bits);
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 kills = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_kills(&has_bits);
          kills_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 deaths = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_deaths(&has_bits);
          deaths_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 damage = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_damage(&has_bits);
          damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 healing = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_healing(&has_bits);
          healing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 support = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_support(&has_bits);
          support_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 score_bronze = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_score_bronze(&has_bits);
          score_bronze_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 score_silver = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_score_silver(&has_bits);
          score_silver_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 score_gold = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_score_gold(&has_bits);
          score_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 kills_bronze = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_kills_bronze(&has_bits);
          kills_bronze_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 kills_silver = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_kills_silver(&has_bits);
          kills_silver_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 kills_gold = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_kills_gold(&has_bits);
          kills_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 damage_bronze = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_damage_bronze(&has_bits);
          damage_bronze_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 damage_silver = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_damage_silver(&has_bits);
          damage_silver_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 damage_gold = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_damage_gold(&has_bits);
          damage_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 healing_bronze = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_healing_bronze(&has_bits);
          healing_bronze_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 healing_silver = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_healing_silver(&has_bits);
          healing_silver_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 healing_gold = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_healing_gold(&has_bits);
          healing_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 support_bronze = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_support_bronze(&has_bits);
          support_bronze_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 support_silver = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_support_silver(&has_bits);
          support_silver_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 support_gold = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_support_gold(&has_bits);
          support_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSOTFLadderPlayerStats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSOTFLadderPlayerStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1 [(.key_field) = true];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional int32 match_group = 2 [(.key_field) = true];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_match_group(), target);
  }

  // optional uint32 season_id = 3 [(.key_field) = true];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_season_id(), target);
  }

  // optional uint32 games = 9;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_games(), target);
  }

  // optional uint32 score = 10;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_score(), target);
  }

  // optional uint32 kills = 11;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_kills(), target);
  }

  // optional uint32 deaths = 12;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_deaths(), target);
  }

  // optional uint32 damage = 13;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_damage(), target);
  }

  // optional uint32 healing = 14;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_healing(), target);
  }

  // optional uint32 support = 15;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_support(), target);
  }

  // optional uint32 score_bronze = 16;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_score_bronze(), target);
  }

  // optional uint32 score_silver = 17;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_score_silver(), target);
  }

  // optional uint32 score_gold = 18;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_score_gold(), target);
  }

  // optional uint32 kills_bronze = 19;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_kills_bronze(), target);
  }

  // optional uint32 kills_silver = 20;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_kills_silver(), target);
  }

  // optional uint32 kills_gold = 21;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(21, this->_internal_kills_gold(), target);
  }

  // optional uint32 damage_bronze = 22;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->_internal_damage_bronze(), target);
  }

  // optional uint32 damage_silver = 23;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(23, this->_internal_damage_silver(), target);
  }

  // optional uint32 damage_gold = 24;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(24, this->_internal_damage_gold(), target);
  }

  // optional uint32 healing_bronze = 25;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(25, this->_internal_healing_bronze(), target);
  }

  // optional uint32 healing_silver = 26;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(26, this->_internal_healing_silver(), target);
  }

  // optional uint32 healing_gold = 27;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(27, this->_internal_healing_gold(), target);
  }

  // optional uint32 support_bronze = 28;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(28, this->_internal_support_bronze(), target);
  }

  // optional uint32 support_silver = 29;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(29, this->_internal_support_silver(), target);
  }

  // optional uint32 support_gold = 30;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(30, this->_internal_support_gold(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSOTFLadderPlayerStats)
  return target;
}

size_t CSOTFLadderPlayerStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSOTFLadderPlayerStats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 account_id = 1 [(.key_field) = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional int32 match_group = 2 [(.key_field) = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_match_group());
    }

    // optional uint32 season_id = 3 [(.key_field) = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_season_id());
    }

    // optional uint32 games = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_games());
    }

    // optional uint32 score = 10;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_score());
    }

    // optional uint32 kills = 11;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_kills());
    }

    // optional uint32 deaths = 12;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_deaths());
    }

    // optional uint32 damage = 13;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_damage());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 healing = 14;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_healing());
    }

    // optional uint32 support = 15;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_support());
    }

    // optional uint32 score_bronze = 16;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_score_bronze());
    }

    // optional uint32 score_silver = 17;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_score_silver());
    }

    // optional uint32 score_gold = 18;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_score_gold());
    }

    // optional uint32 kills_bronze = 19;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_kills_bronze());
    }

    // optional uint32 kills_silver = 20;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_kills_silver());
    }

    // optional uint32 kills_gold = 21;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_kills_gold());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional uint32 damage_bronze = 22;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_damage_bronze());
    }

    // optional uint32 damage_silver = 23;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_damage_silver());
    }

    // optional uint32 damage_gold = 24;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_damage_gold());
    }

    // optional uint32 healing_bronze = 25;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_healing_bronze());
    }

    // optional uint32 support_gold = 30;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_support_gold());
    }

    // optional uint32 healing_silver = 26;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_healing_silver());
    }

    // optional uint32 healing_gold = 27;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_healing_gold());
    }

    // optional uint32 support_bronze = 28;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_support_bronze());
    }

  }
  // optional uint32 support_silver = 29;
  if (cached_has_bits & 0x01000000u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_support_silver());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSOTFLadderPlayerStats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSOTFLadderPlayerStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CSOTFLadderPlayerStats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSOTFLadderPlayerStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSOTFLadderPlayerStats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSOTFLadderPlayerStats)
    MergeFrom(*source);
  }
}

void CSOTFLadderPlayerStats::MergeFrom(const CSOTFLadderPlayerStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSOTFLadderPlayerStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      match_group_ = from.match_group_;
    }
    if (cached_has_bits & 0x00000004u) {
      season_id_ = from.season_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      games_ = from.games_;
    }
    if (cached_has_bits & 0x00000010u) {
      score_ = from.score_;
    }
    if (cached_has_bits & 0x00000020u) {
      kills_ = from.kills_;
    }
    if (cached_has_bits & 0x00000040u) {
      deaths_ = from.deaths_;
    }
    if (cached_has_bits & 0x00000080u) {
      damage_ = from.damage_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      healing_ = from.healing_;
    }
    if (cached_has_bits & 0x00000200u) {
      support_ = from.support_;
    }
    if (cached_has_bits & 0x00000400u) {
      score_bronze_ = from.score_bronze_;
    }
    if (cached_has_bits & 0x00000800u) {
      score_silver_ = from.score_silver_;
    }
    if (cached_has_bits & 0x00001000u) {
      score_gold_ = from.score_gold_;
    }
    if (cached_has_bits & 0x00002000u) {
      kills_bronze_ = from.kills_bronze_;
    }
    if (cached_has_bits & 0x00004000u) {
      kills_silver_ = from.kills_silver_;
    }
    if (cached_has_bits & 0x00008000u) {
      kills_gold_ = from.kills_gold_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      damage_bronze_ = from.damage_bronze_;
    }
    if (cached_has_bits & 0x00020000u) {
      damage_silver_ = from.damage_silver_;
    }
    if (cached_has_bits & 0x00040000u) {
      damage_gold_ = from.damage_gold_;
    }
    if (cached_has_bits & 0x00080000u) {
      healing_bronze_ = from.healing_bronze_;
    }
    if (cached_has_bits & 0x00100000u) {
      support_gold_ = from.support_gold_;
    }
    if (cached_has_bits & 0x00200000u) {
      healing_silver_ = from.healing_silver_;
    }
    if (cached_has_bits & 0x00400000u) {
      healing_gold_ = from.healing_gold_;
    }
    if (cached_has_bits & 0x00800000u) {
      support_bronze_ = from.support_bronze_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x01000000u) {
    _internal_set_support_silver(from._internal_support_silver());
  }
}

void CSOTFLadderPlayerStats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSOTFLadderPlayerStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOTFLadderPlayerStats::CopyFrom(const CSOTFLadderPlayerStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSOTFLadderPlayerStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOTFLadderPlayerStats::IsInitialized() const {
  return true;
}

void CSOTFLadderPlayerStats::InternalSwap(CSOTFLadderPlayerStats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSOTFLadderPlayerStats, support_silver_)
      + sizeof(CSOTFLadderPlayerStats::support_silver_)
      - PROTOBUF_FIELD_OFFSET(CSOTFLadderPlayerStats, account_id_)>(
          reinterpret_cast<char*>(&account_id_),
          reinterpret_cast<char*>(&other->account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSOTFLadderPlayerStats::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[152]);
}

// ===================================================================

class CSOTFRatingData::_Internal {
 public:
  using HasBits = decltype(std::declval<CSOTFRatingData>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_rating_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_rating_primary(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_rating_secondary(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_rating_tertiary(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CSOTFRatingData::CSOTFRatingData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSOTFRatingData)
}
CSOTFRatingData::CSOTFRatingData(const CSOTFRatingData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&rating_tertiary_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(rating_tertiary_));
  // @@protoc_insertion_point(copy_constructor:CSOTFRatingData)
}

void CSOTFRatingData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&rating_tertiary_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(rating_tertiary_));
}

CSOTFRatingData::~CSOTFRatingData() {
  // @@protoc_insertion_point(destructor:CSOTFRatingData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSOTFRatingData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSOTFRatingData::ArenaDtor(void* object) {
  CSOTFRatingData* _this = reinterpret_cast< CSOTFRatingData* >(object);
  (void)_this;
}
void CSOTFRatingData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSOTFRatingData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSOTFRatingData::Clear() {
// @@protoc_insertion_point(message_clear_start:CSOTFRatingData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rating_tertiary_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(rating_tertiary_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSOTFRatingData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1 [(.key_field) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 rating_type = 2 [(.key_field) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_rating_type(&has_bits);
          rating_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rating_primary = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_rating_primary(&has_bits);
          rating_primary_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rating_secondary = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_rating_secondary(&has_bits);
          rating_secondary_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rating_tertiary = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_rating_tertiary(&has_bits);
          rating_tertiary_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSOTFRatingData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSOTFRatingData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1 [(.key_field) = true];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional int32 rating_type = 2 [(.key_field) = true];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_rating_type(), target);
  }

  // optional uint32 rating_primary = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_rating_primary(), target);
  }

  // optional uint32 rating_secondary = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_rating_secondary(), target);
  }

  // optional uint32 rating_tertiary = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_rating_tertiary(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSOTFRatingData)
  return target;
}

size_t CSOTFRatingData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSOTFRatingData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 account_id = 1 [(.key_field) = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional int32 rating_type = 2 [(.key_field) = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_rating_type());
    }

    // optional uint32 rating_primary = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rating_primary());
    }

    // optional uint32 rating_secondary = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rating_secondary());
    }

    // optional uint32 rating_tertiary = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rating_tertiary());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSOTFRatingData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSOTFRatingData)
  GOOGLE_DCHECK_NE(&from, this);
  const CSOTFRatingData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSOTFRatingData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSOTFRatingData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSOTFRatingData)
    MergeFrom(*source);
  }
}

void CSOTFRatingData::MergeFrom(const CSOTFRatingData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSOTFRatingData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      rating_type_ = from.rating_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      rating_primary_ = from.rating_primary_;
    }
    if (cached_has_bits & 0x00000008u) {
      rating_secondary_ = from.rating_secondary_;
    }
    if (cached_has_bits & 0x00000010u) {
      rating_tertiary_ = from.rating_tertiary_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSOTFRatingData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSOTFRatingData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOTFRatingData::CopyFrom(const CSOTFRatingData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSOTFRatingData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOTFRatingData::IsInitialized() const {
  return true;
}

void CSOTFRatingData::InternalSwap(CSOTFRatingData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSOTFRatingData, rating_tertiary_)
      + sizeof(CSOTFRatingData::rating_tertiary_)
      - PROTOBUF_FIELD_OFFSET(CSOTFRatingData, account_id_)>(
          reinterpret_cast<char*>(&account_id_),
          reinterpret_cast<char*>(&other->account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSOTFRatingData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[153]);
}

// ===================================================================

class CMsgGC_TFVoteKickPlayerRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGC_TFVoteKickPlayerRequest>()._has_bits_);
  static void set_has_target_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_voter_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgGC_TFVoteKickPlayerRequest::CMsgGC_TFVoteKickPlayerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGC_TFVoteKickPlayerRequest)
}
CMsgGC_TFVoteKickPlayerRequest::CMsgGC_TFVoteKickPlayerRequest(const CMsgGC_TFVoteKickPlayerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&target_id_, &from.target_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&reason_) -
    reinterpret_cast<char*>(&target_id_)) + sizeof(reason_));
  // @@protoc_insertion_point(copy_constructor:CMsgGC_TFVoteKickPlayerRequest)
}

void CMsgGC_TFVoteKickPlayerRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&target_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&reason_) -
    reinterpret_cast<char*>(&target_id_)) + sizeof(reason_));
}

CMsgGC_TFVoteKickPlayerRequest::~CMsgGC_TFVoteKickPlayerRequest() {
  // @@protoc_insertion_point(destructor:CMsgGC_TFVoteKickPlayerRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGC_TFVoteKickPlayerRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGC_TFVoteKickPlayerRequest::ArenaDtor(void* object) {
  CMsgGC_TFVoteKickPlayerRequest* _this = reinterpret_cast< CMsgGC_TFVoteKickPlayerRequest* >(object);
  (void)_this;
}
void CMsgGC_TFVoteKickPlayerRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGC_TFVoteKickPlayerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGC_TFVoteKickPlayerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGC_TFVoteKickPlayerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&target_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&reason_) -
        reinterpret_cast<char*>(&target_id_)) + sizeof(reason_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGC_TFVoteKickPlayerRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 target_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_target_id(&has_bits);
          target_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 voter_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_voter_id(&has_bits);
          voter_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TFVoteKickReason reason = 4 [default = TFVoteKickReason_Other];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TFVoteKickReason_IsValid(val))) {
            _internal_set_reason(static_cast<::TFVoteKickReason>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint64 match_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_match_id(&has_bits);
          match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGC_TFVoteKickPlayerRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGC_TFVoteKickPlayerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 target_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_target_id(), target);
  }

  // optional uint64 voter_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_voter_id(), target);
  }

  // optional .TFVoteKickReason reason = 4 [default = TFVoteKickReason_Other];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_reason(), target);
  }

  // optional uint64 match_id = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_match_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGC_TFVoteKickPlayerRequest)
  return target;
}

size_t CMsgGC_TFVoteKickPlayerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGC_TFVoteKickPlayerRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint64 target_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_target_id());
    }

    // optional uint64 voter_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_voter_id());
    }

    // optional uint64 match_id = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_match_id());
    }

    // optional .TFVoteKickReason reason = 4 [default = TFVoteKickReason_Other];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reason());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGC_TFVoteKickPlayerRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGC_TFVoteKickPlayerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGC_TFVoteKickPlayerRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGC_TFVoteKickPlayerRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGC_TFVoteKickPlayerRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGC_TFVoteKickPlayerRequest)
    MergeFrom(*source);
  }
}

void CMsgGC_TFVoteKickPlayerRequest::MergeFrom(const CMsgGC_TFVoteKickPlayerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGC_TFVoteKickPlayerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      target_id_ = from.target_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      voter_id_ = from.voter_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      reason_ = from.reason_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGC_TFVoteKickPlayerRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGC_TFVoteKickPlayerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_TFVoteKickPlayerRequest::CopyFrom(const CMsgGC_TFVoteKickPlayerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGC_TFVoteKickPlayerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_TFVoteKickPlayerRequest::IsInitialized() const {
  return true;
}

void CMsgGC_TFVoteKickPlayerRequest::InternalSwap(CMsgGC_TFVoteKickPlayerRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGC_TFVoteKickPlayerRequest, reason_)
      + sizeof(CMsgGC_TFVoteKickPlayerRequest::reason_)
      - PROTOBUF_FIELD_OFFSET(CMsgGC_TFVoteKickPlayerRequest, target_id_)>(
          reinterpret_cast<char*>(&target_id_),
          reinterpret_cast<char*>(&other->target_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGC_TFVoteKickPlayerRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[154]);
}

// ===================================================================

class CMsgGC_VoteKickPlayerRequestResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGC_VoteKickPlayerRequestResponse>()._has_bits_);
  static void set_has_allowed(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_voter_inhibit(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_target_inhibit(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgGC_VoteKickPlayerRequestResponse::CMsgGC_VoteKickPlayerRequestResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGC_VoteKickPlayerRequestResponse)
}
CMsgGC_VoteKickPlayerRequestResponse::CMsgGC_VoteKickPlayerRequestResponse(const CMsgGC_VoteKickPlayerRequestResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&allowed_, &from.allowed_,
    static_cast<size_t>(reinterpret_cast<char*>(&target_inhibit_) -
    reinterpret_cast<char*>(&allowed_)) + sizeof(target_inhibit_));
  // @@protoc_insertion_point(copy_constructor:CMsgGC_VoteKickPlayerRequestResponse)
}

void CMsgGC_VoteKickPlayerRequestResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&allowed_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&target_inhibit_) -
    reinterpret_cast<char*>(&allowed_)) + sizeof(target_inhibit_));
}

CMsgGC_VoteKickPlayerRequestResponse::~CMsgGC_VoteKickPlayerRequestResponse() {
  // @@protoc_insertion_point(destructor:CMsgGC_VoteKickPlayerRequestResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGC_VoteKickPlayerRequestResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGC_VoteKickPlayerRequestResponse::ArenaDtor(void* object) {
  CMsgGC_VoteKickPlayerRequestResponse* _this = reinterpret_cast< CMsgGC_VoteKickPlayerRequestResponse* >(object);
  (void)_this;
}
void CMsgGC_VoteKickPlayerRequestResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGC_VoteKickPlayerRequestResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGC_VoteKickPlayerRequestResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGC_VoteKickPlayerRequestResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&allowed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&target_inhibit_) -
      reinterpret_cast<char*>(&allowed_)) + sizeof(target_inhibit_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGC_VoteKickPlayerRequestResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool allowed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_allowed(&has_bits);
          allowed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool voter_inhibit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_voter_inhibit(&has_bits);
          voter_inhibit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool target_inhibit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_target_inhibit(&has_bits);
          target_inhibit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGC_VoteKickPlayerRequestResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGC_VoteKickPlayerRequestResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool allowed = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_allowed(), target);
  }

  // optional bool voter_inhibit = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_voter_inhibit(), target);
  }

  // optional bool target_inhibit = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_target_inhibit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGC_VoteKickPlayerRequestResponse)
  return target;
}

size_t CMsgGC_VoteKickPlayerRequestResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGC_VoteKickPlayerRequestResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bool allowed = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool voter_inhibit = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool target_inhibit = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGC_VoteKickPlayerRequestResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGC_VoteKickPlayerRequestResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGC_VoteKickPlayerRequestResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGC_VoteKickPlayerRequestResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGC_VoteKickPlayerRequestResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGC_VoteKickPlayerRequestResponse)
    MergeFrom(*source);
  }
}

void CMsgGC_VoteKickPlayerRequestResponse::MergeFrom(const CMsgGC_VoteKickPlayerRequestResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGC_VoteKickPlayerRequestResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      allowed_ = from.allowed_;
    }
    if (cached_has_bits & 0x00000002u) {
      voter_inhibit_ = from.voter_inhibit_;
    }
    if (cached_has_bits & 0x00000004u) {
      target_inhibit_ = from.target_inhibit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGC_VoteKickPlayerRequestResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGC_VoteKickPlayerRequestResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_VoteKickPlayerRequestResponse::CopyFrom(const CMsgGC_VoteKickPlayerRequestResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGC_VoteKickPlayerRequestResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_VoteKickPlayerRequestResponse::IsInitialized() const {
  return true;
}

void CMsgGC_VoteKickPlayerRequestResponse::InternalSwap(CMsgGC_VoteKickPlayerRequestResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGC_VoteKickPlayerRequestResponse, target_inhibit_)
      + sizeof(CMsgGC_VoteKickPlayerRequestResponse::target_inhibit_)
      - PROTOBUF_FIELD_OFFSET(CMsgGC_VoteKickPlayerRequestResponse, allowed_)>(
          reinterpret_cast<char*>(&allowed_),
          reinterpret_cast<char*>(&other->allowed_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGC_VoteKickPlayerRequestResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[155]);
}

// ===================================================================

class CMsgGC_DailyCompetitiveStatsRollup::_Internal {
 public:
};

CMsgGC_DailyCompetitiveStatsRollup::CMsgGC_DailyCompetitiveStatsRollup(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGC_DailyCompetitiveStatsRollup)
}
CMsgGC_DailyCompetitiveStatsRollup::CMsgGC_DailyCompetitiveStatsRollup(const CMsgGC_DailyCompetitiveStatsRollup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGC_DailyCompetitiveStatsRollup)
}

void CMsgGC_DailyCompetitiveStatsRollup::SharedCtor() {
}

CMsgGC_DailyCompetitiveStatsRollup::~CMsgGC_DailyCompetitiveStatsRollup() {
  // @@protoc_insertion_point(destructor:CMsgGC_DailyCompetitiveStatsRollup)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGC_DailyCompetitiveStatsRollup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGC_DailyCompetitiveStatsRollup::ArenaDtor(void* object) {
  CMsgGC_DailyCompetitiveStatsRollup* _this = reinterpret_cast< CMsgGC_DailyCompetitiveStatsRollup* >(object);
  (void)_this;
}
void CMsgGC_DailyCompetitiveStatsRollup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGC_DailyCompetitiveStatsRollup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGC_DailyCompetitiveStatsRollup::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGC_DailyCompetitiveStatsRollup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGC_DailyCompetitiveStatsRollup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGC_DailyCompetitiveStatsRollup::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGC_DailyCompetitiveStatsRollup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGC_DailyCompetitiveStatsRollup)
  return target;
}

size_t CMsgGC_DailyCompetitiveStatsRollup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGC_DailyCompetitiveStatsRollup)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGC_DailyCompetitiveStatsRollup::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGC_DailyCompetitiveStatsRollup)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGC_DailyCompetitiveStatsRollup* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGC_DailyCompetitiveStatsRollup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGC_DailyCompetitiveStatsRollup)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGC_DailyCompetitiveStatsRollup)
    MergeFrom(*source);
  }
}

void CMsgGC_DailyCompetitiveStatsRollup::MergeFrom(const CMsgGC_DailyCompetitiveStatsRollup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGC_DailyCompetitiveStatsRollup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgGC_DailyCompetitiveStatsRollup::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGC_DailyCompetitiveStatsRollup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_DailyCompetitiveStatsRollup::CopyFrom(const CMsgGC_DailyCompetitiveStatsRollup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGC_DailyCompetitiveStatsRollup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_DailyCompetitiveStatsRollup::IsInitialized() const {
  return true;
}

void CMsgGC_DailyCompetitiveStatsRollup::InternalSwap(CMsgGC_DailyCompetitiveStatsRollup* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGC_DailyCompetitiveStatsRollup::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[156]);
}

// ===================================================================

class CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry>()._has_bits_);
  static void set_has_rank(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_records(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_avg_score(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_stdev_score(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_avg_kills(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_stdev_kills(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_avg_damage(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_stdev_damage(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_avg_healing(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_stdev_healing(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_avg_support(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_stdev_support(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGC_DailyCompetitiveStatsRollup_Response.RankBucketEntry)
}
CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry(const CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&rank_, &from.rank_,
    static_cast<size_t>(reinterpret_cast<char*>(&stdev_support_) -
    reinterpret_cast<char*>(&rank_)) + sizeof(stdev_support_));
  // @@protoc_insertion_point(copy_constructor:CMsgGC_DailyCompetitiveStatsRollup_Response.RankBucketEntry)
}

void CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&rank_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&stdev_support_) -
    reinterpret_cast<char*>(&rank_)) + sizeof(stdev_support_));
}

CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::~CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry() {
  // @@protoc_insertion_point(destructor:CMsgGC_DailyCompetitiveStatsRollup_Response.RankBucketEntry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::ArenaDtor(void* object) {
  CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry* _this = reinterpret_cast< CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry* >(object);
  (void)_this;
}
void CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGC_DailyCompetitiveStatsRollup_Response.RankBucketEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&rank_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&stdev_damage_) -
        reinterpret_cast<char*>(&rank_)) + sizeof(stdev_damage_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&avg_healing_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&stdev_support_) -
        reinterpret_cast<char*>(&avg_healing_)) + sizeof(stdev_support_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 rank = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_rank(&has_bits);
          rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 records = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_records(&has_bits);
          records_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 avg_score = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_avg_score(&has_bits);
          avg_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 stdev_score = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_stdev_score(&has_bits);
          stdev_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 avg_kills = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_avg_kills(&has_bits);
          avg_kills_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 stdev_kills = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_stdev_kills(&has_bits);
          stdev_kills_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 avg_damage = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_avg_damage(&has_bits);
          avg_damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 stdev_damage = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_stdev_damage(&has_bits);
          stdev_damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 avg_healing = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_avg_healing(&has_bits);
          avg_healing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 stdev_healing = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_stdev_healing(&has_bits);
          stdev_healing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 avg_support = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_avg_support(&has_bits);
          avg_support_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 stdev_support = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_stdev_support(&has_bits);
          stdev_support_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGC_DailyCompetitiveStatsRollup_Response.RankBucketEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 rank = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_rank(), target);
  }

  // optional uint32 records = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_records(), target);
  }

  // optional uint32 avg_score = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_avg_score(), target);
  }

  // optional uint32 stdev_score = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_stdev_score(), target);
  }

  // optional uint32 avg_kills = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_avg_kills(), target);
  }

  // optional uint32 stdev_kills = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_stdev_kills(), target);
  }

  // optional uint32 avg_damage = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_avg_damage(), target);
  }

  // optional uint32 stdev_damage = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_stdev_damage(), target);
  }

  // optional uint32 avg_healing = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_avg_healing(), target);
  }

  // optional uint32 stdev_healing = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_stdev_healing(), target);
  }

  // optional uint32 avg_support = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_avg_support(), target);
  }

  // optional uint32 stdev_support = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_stdev_support(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGC_DailyCompetitiveStatsRollup_Response.RankBucketEntry)
  return target;
}

size_t CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGC_DailyCompetitiveStatsRollup_Response.RankBucketEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 rank = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rank());
    }

    // optional uint32 records = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_records());
    }

    // optional uint32 avg_score = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_avg_score());
    }

    // optional uint32 stdev_score = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_stdev_score());
    }

    // optional uint32 avg_kills = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_avg_kills());
    }

    // optional uint32 stdev_kills = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_stdev_kills());
    }

    // optional uint32 avg_damage = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_avg_damage());
    }

    // optional uint32 stdev_damage = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_stdev_damage());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional uint32 avg_healing = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_avg_healing());
    }

    // optional uint32 stdev_healing = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_stdev_healing());
    }

    // optional uint32 avg_support = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_avg_support());
    }

    // optional uint32 stdev_support = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_stdev_support());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGC_DailyCompetitiveStatsRollup_Response.RankBucketEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGC_DailyCompetitiveStatsRollup_Response.RankBucketEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGC_DailyCompetitiveStatsRollup_Response.RankBucketEntry)
    MergeFrom(*source);
  }
}

void CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::MergeFrom(const CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGC_DailyCompetitiveStatsRollup_Response.RankBucketEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      rank_ = from.rank_;
    }
    if (cached_has_bits & 0x00000002u) {
      records_ = from.records_;
    }
    if (cached_has_bits & 0x00000004u) {
      avg_score_ = from.avg_score_;
    }
    if (cached_has_bits & 0x00000008u) {
      stdev_score_ = from.stdev_score_;
    }
    if (cached_has_bits & 0x00000010u) {
      avg_kills_ = from.avg_kills_;
    }
    if (cached_has_bits & 0x00000020u) {
      stdev_kills_ = from.stdev_kills_;
    }
    if (cached_has_bits & 0x00000040u) {
      avg_damage_ = from.avg_damage_;
    }
    if (cached_has_bits & 0x00000080u) {
      stdev_damage_ = from.stdev_damage_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      avg_healing_ = from.avg_healing_;
    }
    if (cached_has_bits & 0x00000200u) {
      stdev_healing_ = from.stdev_healing_;
    }
    if (cached_has_bits & 0x00000400u) {
      avg_support_ = from.avg_support_;
    }
    if (cached_has_bits & 0x00000800u) {
      stdev_support_ = from.stdev_support_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGC_DailyCompetitiveStatsRollup_Response.RankBucketEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::CopyFrom(const CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGC_DailyCompetitiveStatsRollup_Response.RankBucketEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::IsInitialized() const {
  return true;
}

void CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::InternalSwap(CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry, stdev_support_)
      + sizeof(CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::stdev_support_)
      - PROTOBUF_FIELD_OFFSET(CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry, rank_)>(
          reinterpret_cast<char*>(&rank_),
          reinterpret_cast<char*>(&other->rank_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[157]);
}

// ===================================================================

class CMsgGC_DailyCompetitiveStatsRollup_Response::_Internal {
 public:
};

CMsgGC_DailyCompetitiveStatsRollup_Response::CMsgGC_DailyCompetitiveStatsRollup_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  rankdata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGC_DailyCompetitiveStatsRollup_Response)
}
CMsgGC_DailyCompetitiveStatsRollup_Response::CMsgGC_DailyCompetitiveStatsRollup_Response(const CMsgGC_DailyCompetitiveStatsRollup_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      rankdata_(from.rankdata_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGC_DailyCompetitiveStatsRollup_Response)
}

void CMsgGC_DailyCompetitiveStatsRollup_Response::SharedCtor() {
}

CMsgGC_DailyCompetitiveStatsRollup_Response::~CMsgGC_DailyCompetitiveStatsRollup_Response() {
  // @@protoc_insertion_point(destructor:CMsgGC_DailyCompetitiveStatsRollup_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGC_DailyCompetitiveStatsRollup_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGC_DailyCompetitiveStatsRollup_Response::ArenaDtor(void* object) {
  CMsgGC_DailyCompetitiveStatsRollup_Response* _this = reinterpret_cast< CMsgGC_DailyCompetitiveStatsRollup_Response* >(object);
  (void)_this;
}
void CMsgGC_DailyCompetitiveStatsRollup_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGC_DailyCompetitiveStatsRollup_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGC_DailyCompetitiveStatsRollup_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGC_DailyCompetitiveStatsRollup_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rankdata_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGC_DailyCompetitiveStatsRollup_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgGC_DailyCompetitiveStatsRollup_Response.RankBucketEntry rankdata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rankdata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGC_DailyCompetitiveStatsRollup_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGC_DailyCompetitiveStatsRollup_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgGC_DailyCompetitiveStatsRollup_Response.RankBucketEntry rankdata = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rankdata_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_rankdata(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGC_DailyCompetitiveStatsRollup_Response)
  return target;
}

size_t CMsgGC_DailyCompetitiveStatsRollup_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGC_DailyCompetitiveStatsRollup_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgGC_DailyCompetitiveStatsRollup_Response.RankBucketEntry rankdata = 1;
  total_size += 1UL * this->_internal_rankdata_size();
  for (const auto& msg : this->rankdata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGC_DailyCompetitiveStatsRollup_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGC_DailyCompetitiveStatsRollup_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGC_DailyCompetitiveStatsRollup_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGC_DailyCompetitiveStatsRollup_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGC_DailyCompetitiveStatsRollup_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGC_DailyCompetitiveStatsRollup_Response)
    MergeFrom(*source);
  }
}

void CMsgGC_DailyCompetitiveStatsRollup_Response::MergeFrom(const CMsgGC_DailyCompetitiveStatsRollup_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGC_DailyCompetitiveStatsRollup_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rankdata_.MergeFrom(from.rankdata_);
}

void CMsgGC_DailyCompetitiveStatsRollup_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGC_DailyCompetitiveStatsRollup_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_DailyCompetitiveStatsRollup_Response::CopyFrom(const CMsgGC_DailyCompetitiveStatsRollup_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGC_DailyCompetitiveStatsRollup_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_DailyCompetitiveStatsRollup_Response::IsInitialized() const {
  return true;
}

void CMsgGC_DailyCompetitiveStatsRollup_Response::InternalSwap(CMsgGC_DailyCompetitiveStatsRollup_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  rankdata_.InternalSwap(&other->rankdata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGC_DailyCompetitiveStatsRollup_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[158]);
}

// ===================================================================

class CMsgGC_ReportPlayer::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGC_ReportPlayer>()._has_bits_);
  static void set_has_account_id_target(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGC_ReportPlayer::CMsgGC_ReportPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGC_ReportPlayer)
}
CMsgGC_ReportPlayer::CMsgGC_ReportPlayer(const CMsgGC_ReportPlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&account_id_target_, &from.account_id_target_,
    static_cast<size_t>(reinterpret_cast<char*>(&reason_) -
    reinterpret_cast<char*>(&account_id_target_)) + sizeof(reason_));
  // @@protoc_insertion_point(copy_constructor:CMsgGC_ReportPlayer)
}

void CMsgGC_ReportPlayer::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_id_target_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&reason_) -
    reinterpret_cast<char*>(&account_id_target_)) + sizeof(reason_));
}

CMsgGC_ReportPlayer::~CMsgGC_ReportPlayer() {
  // @@protoc_insertion_point(destructor:CMsgGC_ReportPlayer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGC_ReportPlayer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGC_ReportPlayer::ArenaDtor(void* object) {
  CMsgGC_ReportPlayer* _this = reinterpret_cast< CMsgGC_ReportPlayer* >(object);
  (void)_this;
}
void CMsgGC_ReportPlayer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGC_ReportPlayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGC_ReportPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGC_ReportPlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&account_id_target_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&reason_) -
        reinterpret_cast<char*>(&account_id_target_)) + sizeof(reason_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGC_ReportPlayer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id_target = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id_target(&has_bits);
          account_id_target_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgGC_ReportPlayer.EReason reason = 2 [default = kReason_INVALID];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgGC_ReportPlayer_EReason_IsValid(val))) {
            _internal_set_reason(static_cast<::CMsgGC_ReportPlayer_EReason>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGC_ReportPlayer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGC_ReportPlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id_target = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id_target(), target);
  }

  // optional .CMsgGC_ReportPlayer.EReason reason = 2 [default = kReason_INVALID];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGC_ReportPlayer)
  return target;
}

size_t CMsgGC_ReportPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGC_ReportPlayer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 account_id_target = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id_target());
    }

    // optional .CMsgGC_ReportPlayer.EReason reason = 2 [default = kReason_INVALID];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reason());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGC_ReportPlayer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGC_ReportPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGC_ReportPlayer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGC_ReportPlayer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGC_ReportPlayer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGC_ReportPlayer)
    MergeFrom(*source);
  }
}

void CMsgGC_ReportPlayer::MergeFrom(const CMsgGC_ReportPlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGC_ReportPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_target_ = from.account_id_target_;
    }
    if (cached_has_bits & 0x00000002u) {
      reason_ = from.reason_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGC_ReportPlayer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGC_ReportPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_ReportPlayer::CopyFrom(const CMsgGC_ReportPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGC_ReportPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_ReportPlayer::IsInitialized() const {
  return true;
}

void CMsgGC_ReportPlayer::InternalSwap(CMsgGC_ReportPlayer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGC_ReportPlayer, reason_)
      + sizeof(CMsgGC_ReportPlayer::reason_)
      - PROTOBUF_FIELD_OFFSET(CMsgGC_ReportPlayer, account_id_target_)>(
          reinterpret_cast<char*>(&account_id_target_),
          reinterpret_cast<char*>(&other->account_id_target_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGC_ReportPlayer::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[159]);
}

// ===================================================================

class CSOTFMatchResultPlayerStats::_Internal {
 public:
  using HasBits = decltype(std::declval<CSOTFMatchResultPlayerStats>()._has_bits_);
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_match_group(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_endtime(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_season_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_original_party_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_team(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_score(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_ping(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_display_rating(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_display_rating_change(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_rank(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_classes_played(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_kills(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_deaths(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_damage(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_healing(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_support(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_score_medal(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_kills_medal(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_damage_medal(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_healing_medal(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_support_medal(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_map_index(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_winning_team(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
};

CSOTFMatchResultPlayerStats::CSOTFMatchResultPlayerStats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSOTFMatchResultPlayerStats)
}
CSOTFMatchResultPlayerStats::CSOTFMatchResultPlayerStats(const CSOTFMatchResultPlayerStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&match_id_, &from.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&winning_team_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(winning_team_));
  // @@protoc_insertion_point(copy_constructor:CSOTFMatchResultPlayerStats)
}

void CSOTFMatchResultPlayerStats::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&match_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&winning_team_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(winning_team_));
}

CSOTFMatchResultPlayerStats::~CSOTFMatchResultPlayerStats() {
  // @@protoc_insertion_point(destructor:CSOTFMatchResultPlayerStats)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSOTFMatchResultPlayerStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSOTFMatchResultPlayerStats::ArenaDtor(void* object) {
  CSOTFMatchResultPlayerStats* _this = reinterpret_cast< CSOTFMatchResultPlayerStats* >(object);
  (void)_this;
}
void CSOTFMatchResultPlayerStats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSOTFMatchResultPlayerStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSOTFMatchResultPlayerStats::Clear() {
// @@protoc_insertion_point(message_clear_start:CSOTFMatchResultPlayerStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&team_) -
        reinterpret_cast<char*>(&match_id_)) + sizeof(team_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&score_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&kills_) -
        reinterpret_cast<char*>(&score_)) + sizeof(kills_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&deaths_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&healing_medal_) -
        reinterpret_cast<char*>(&deaths_)) + sizeof(healing_medal_));
  }
  if (cached_has_bits & 0x07000000u) {
    ::memset(&support_medal_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&winning_team_) -
        reinterpret_cast<char*>(&support_medal_)) + sizeof(winning_team_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSOTFMatchResultPlayerStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 match_id = 1 [(.key_field) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_match_id(&has_bits);
          match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 account_id = 2 [(.key_field) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 match_group = 3 [(.key_field) = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_match_group(&has_bits);
          match_group_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 endtime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_endtime(&has_bits);
          endtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 season_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_season_id(&has_bits);
          season_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 status = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_status(&has_bits);
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 original_party_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_original_party_id(&has_bits);
          original_party_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 team = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_team(&has_bits);
          team_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 score = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_score(&has_bits);
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ping = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_ping(&has_bits);
          ping_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 flags = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_flags(&has_bits);
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 display_rating = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_display_rating(&has_bits);
          display_rating_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 display_rating_change = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_display_rating_change(&has_bits);
          display_rating_change_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rank = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_rank(&has_bits);
          rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 classes_played = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_classes_played(&has_bits);
          classes_played_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 kills = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_kills(&has_bits);
          kills_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 deaths = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_deaths(&has_bits);
          deaths_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 damage = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_damage(&has_bits);
          damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 healing = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_healing(&has_bits);
          healing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 support = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_support(&has_bits);
          support_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 score_medal = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_score_medal(&has_bits);
          score_medal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 kills_medal = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_kills_medal(&has_bits);
          kills_medal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 damage_medal = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_damage_medal(&has_bits);
          damage_medal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 healing_medal = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_healing_medal(&has_bits);
          healing_medal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 support_medal = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_support_medal(&has_bits);
          support_medal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 map_index = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_map_index(&has_bits);
          map_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 winning_team = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_winning_team(&has_bits);
          winning_team_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSOTFMatchResultPlayerStats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSOTFMatchResultPlayerStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1 [(.key_field) = true];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_match_id(), target);
  }

  // optional uint32 account_id = 2 [(.key_field) = true];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_account_id(), target);
  }

  // optional int32 match_group = 3 [(.key_field) = true];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_match_group(), target);
  }

  // optional uint32 endtime = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_endtime(), target);
  }

  // optional uint32 season_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_season_id(), target);
  }

  // optional uint32 status = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_status(), target);
  }

  // optional uint32 original_party_id = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_original_party_id(), target);
  }

  // optional uint32 team = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_team(), target);
  }

  // optional uint32 score = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_score(), target);
  }

  // optional uint32 ping = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_ping(), target);
  }

  // optional uint32 flags = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_flags(), target);
  }

  // optional uint32 display_rating = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_display_rating(), target);
  }

  // optional int32 display_rating_change = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_display_rating_change(), target);
  }

  // optional uint32 rank = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_rank(), target);
  }

  // optional uint32 classes_played = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_classes_played(), target);
  }

  // optional uint32 kills = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_kills(), target);
  }

  // optional uint32 deaths = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_deaths(), target);
  }

  // optional uint32 damage = 18;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_damage(), target);
  }

  // optional uint32 healing = 19;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_healing(), target);
  }

  // optional uint32 support = 20;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_support(), target);
  }

  // optional uint32 score_medal = 21;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(21, this->_internal_score_medal(), target);
  }

  // optional uint32 kills_medal = 22;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->_internal_kills_medal(), target);
  }

  // optional uint32 damage_medal = 23;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(23, this->_internal_damage_medal(), target);
  }

  // optional uint32 healing_medal = 24;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(24, this->_internal_healing_medal(), target);
  }

  // optional uint32 support_medal = 25;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(25, this->_internal_support_medal(), target);
  }

  // optional uint32 map_index = 26;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(26, this->_internal_map_index(), target);
  }

  // optional uint32 winning_team = 27;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(27, this->_internal_winning_team(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSOTFMatchResultPlayerStats)
  return target;
}

size_t CSOTFMatchResultPlayerStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSOTFMatchResultPlayerStats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint64 match_id = 1 [(.key_field) = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_match_id());
    }

    // optional uint32 account_id = 2 [(.key_field) = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional int32 match_group = 3 [(.key_field) = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_match_group());
    }

    // optional uint32 endtime = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_endtime());
    }

    // optional uint32 season_id = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_season_id());
    }

    // optional uint32 status = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_status());
    }

    // optional uint32 original_party_id = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_original_party_id());
    }

    // optional uint32 team = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 score = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_score());
    }

    // optional uint32 ping = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ping());
    }

    // optional uint32 flags = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_flags());
    }

    // optional uint32 display_rating = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_display_rating());
    }

    // optional int32 display_rating_change = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_display_rating_change());
    }

    // optional uint32 rank = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rank());
    }

    // optional uint32 classes_played = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_classes_played());
    }

    // optional uint32 kills = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_kills());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional uint32 deaths = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_deaths());
    }

    // optional uint32 damage = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_damage());
    }

    // optional uint32 healing = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_healing());
    }

    // optional uint32 support = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_support());
    }

    // optional uint32 score_medal = 21;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_score_medal());
    }

    // optional uint32 kills_medal = 22;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_kills_medal());
    }

    // optional uint32 damage_medal = 23;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_damage_medal());
    }

    // optional uint32 healing_medal = 24;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_healing_medal());
    }

  }
  if (cached_has_bits & 0x07000000u) {
    // optional uint32 support_medal = 25;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_support_medal());
    }

    // optional uint32 map_index = 26;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_map_index());
    }

    // optional uint32 winning_team = 27;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_winning_team());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSOTFMatchResultPlayerStats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSOTFMatchResultPlayerStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CSOTFMatchResultPlayerStats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSOTFMatchResultPlayerStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSOTFMatchResultPlayerStats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSOTFMatchResultPlayerStats)
    MergeFrom(*source);
  }
}

void CSOTFMatchResultPlayerStats::MergeFrom(const CSOTFMatchResultPlayerStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSOTFMatchResultPlayerStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      match_group_ = from.match_group_;
    }
    if (cached_has_bits & 0x00000008u) {
      endtime_ = from.endtime_;
    }
    if (cached_has_bits & 0x00000010u) {
      season_id_ = from.season_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000040u) {
      original_party_id_ = from.original_party_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      team_ = from.team_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      score_ = from.score_;
    }
    if (cached_has_bits & 0x00000200u) {
      ping_ = from.ping_;
    }
    if (cached_has_bits & 0x00000400u) {
      flags_ = from.flags_;
    }
    if (cached_has_bits & 0x00000800u) {
      display_rating_ = from.display_rating_;
    }
    if (cached_has_bits & 0x00001000u) {
      display_rating_change_ = from.display_rating_change_;
    }
    if (cached_has_bits & 0x00002000u) {
      rank_ = from.rank_;
    }
    if (cached_has_bits & 0x00004000u) {
      classes_played_ = from.classes_played_;
    }
    if (cached_has_bits & 0x00008000u) {
      kills_ = from.kills_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      deaths_ = from.deaths_;
    }
    if (cached_has_bits & 0x00020000u) {
      damage_ = from.damage_;
    }
    if (cached_has_bits & 0x00040000u) {
      healing_ = from.healing_;
    }
    if (cached_has_bits & 0x00080000u) {
      support_ = from.support_;
    }
    if (cached_has_bits & 0x00100000u) {
      score_medal_ = from.score_medal_;
    }
    if (cached_has_bits & 0x00200000u) {
      kills_medal_ = from.kills_medal_;
    }
    if (cached_has_bits & 0x00400000u) {
      damage_medal_ = from.damage_medal_;
    }
    if (cached_has_bits & 0x00800000u) {
      healing_medal_ = from.healing_medal_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x07000000u) {
    if (cached_has_bits & 0x01000000u) {
      support_medal_ = from.support_medal_;
    }
    if (cached_has_bits & 0x02000000u) {
      map_index_ = from.map_index_;
    }
    if (cached_has_bits & 0x04000000u) {
      winning_team_ = from.winning_team_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSOTFMatchResultPlayerStats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSOTFMatchResultPlayerStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOTFMatchResultPlayerStats::CopyFrom(const CSOTFMatchResultPlayerStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSOTFMatchResultPlayerStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOTFMatchResultPlayerStats::IsInitialized() const {
  return true;
}

void CSOTFMatchResultPlayerStats::InternalSwap(CSOTFMatchResultPlayerStats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSOTFMatchResultPlayerStats, winning_team_)
      + sizeof(CSOTFMatchResultPlayerStats::winning_team_)
      - PROTOBUF_FIELD_OFFSET(CSOTFMatchResultPlayerStats, match_id_)>(
          reinterpret_cast<char*>(&match_id_),
          reinterpret_cast<char*>(&other->match_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSOTFMatchResultPlayerStats::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[160]);
}

// ===================================================================

class CMsgGCRequestMatchMakerStats::_Internal {
 public:
};

CMsgGCRequestMatchMakerStats::CMsgGCRequestMatchMakerStats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCRequestMatchMakerStats)
}
CMsgGCRequestMatchMakerStats::CMsgGCRequestMatchMakerStats(const CMsgGCRequestMatchMakerStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGCRequestMatchMakerStats)
}

void CMsgGCRequestMatchMakerStats::SharedCtor() {
}

CMsgGCRequestMatchMakerStats::~CMsgGCRequestMatchMakerStats() {
  // @@protoc_insertion_point(destructor:CMsgGCRequestMatchMakerStats)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCRequestMatchMakerStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCRequestMatchMakerStats::ArenaDtor(void* object) {
  CMsgGCRequestMatchMakerStats* _this = reinterpret_cast< CMsgGCRequestMatchMakerStats* >(object);
  (void)_this;
}
void CMsgGCRequestMatchMakerStats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCRequestMatchMakerStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCRequestMatchMakerStats::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCRequestMatchMakerStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCRequestMatchMakerStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCRequestMatchMakerStats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCRequestMatchMakerStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCRequestMatchMakerStats)
  return target;
}

size_t CMsgGCRequestMatchMakerStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCRequestMatchMakerStats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCRequestMatchMakerStats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCRequestMatchMakerStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCRequestMatchMakerStats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCRequestMatchMakerStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCRequestMatchMakerStats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCRequestMatchMakerStats)
    MergeFrom(*source);
  }
}

void CMsgGCRequestMatchMakerStats::MergeFrom(const CMsgGCRequestMatchMakerStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCRequestMatchMakerStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgGCRequestMatchMakerStats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCRequestMatchMakerStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCRequestMatchMakerStats::CopyFrom(const CMsgGCRequestMatchMakerStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCRequestMatchMakerStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCRequestMatchMakerStats::IsInitialized() const {
  return true;
}

void CMsgGCRequestMatchMakerStats::InternalSwap(CMsgGCRequestMatchMakerStats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCRequestMatchMakerStats::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[161]);
}

// ===================================================================

class CMsgGCDataCenterPopulation::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCDataCenterPopulation>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_health_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCDataCenterPopulation::CMsgGCDataCenterPopulation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCDataCenterPopulation)
}
CMsgGCDataCenterPopulation::CMsgGCDataCenterPopulation(const CMsgGCDataCenterPopulation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  health_ratio_ = from.health_ratio_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCDataCenterPopulation)
}

void CMsgGCDataCenterPopulation::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
health_ratio_ = 0;
}

CMsgGCDataCenterPopulation::~CMsgGCDataCenterPopulation() {
  // @@protoc_insertion_point(destructor:CMsgGCDataCenterPopulation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCDataCenterPopulation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCDataCenterPopulation::ArenaDtor(void* object) {
  CMsgGCDataCenterPopulation* _this = reinterpret_cast< CMsgGCDataCenterPopulation* >(object);
  (void)_this;
}
void CMsgGCDataCenterPopulation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCDataCenterPopulation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCDataCenterPopulation::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCDataCenterPopulation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  health_ratio_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCDataCenterPopulation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGCDataCenterPopulation.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float health_ratio = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_health_ratio(&has_bits);
          health_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCDataCenterPopulation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCDataCenterPopulation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCDataCenterPopulation.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional float health_ratio = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_health_ratio(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCDataCenterPopulation)
  return target;
}

size_t CMsgGCDataCenterPopulation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCDataCenterPopulation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional float health_ratio = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCDataCenterPopulation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCDataCenterPopulation)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCDataCenterPopulation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCDataCenterPopulation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCDataCenterPopulation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCDataCenterPopulation)
    MergeFrom(*source);
  }
}

void CMsgGCDataCenterPopulation::MergeFrom(const CMsgGCDataCenterPopulation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCDataCenterPopulation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      health_ratio_ = from.health_ratio_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCDataCenterPopulation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCDataCenterPopulation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCDataCenterPopulation::CopyFrom(const CMsgGCDataCenterPopulation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCDataCenterPopulation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCDataCenterPopulation::IsInitialized() const {
  return true;
}

void CMsgGCDataCenterPopulation::InternalSwap(CMsgGCDataCenterPopulation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  swap(health_ratio_, other->health_ratio_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCDataCenterPopulation::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[162]);
}

// ===================================================================

class CMsgGCMatchGroupDataCenterPopulation::_Internal {
 public:
};

CMsgGCMatchGroupDataCenterPopulation::CMsgGCMatchGroupDataCenterPopulation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  data_center_population_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCMatchGroupDataCenterPopulation)
}
CMsgGCMatchGroupDataCenterPopulation::CMsgGCMatchGroupDataCenterPopulation(const CMsgGCMatchGroupDataCenterPopulation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_center_population_(from.data_center_population_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGCMatchGroupDataCenterPopulation)
}

void CMsgGCMatchGroupDataCenterPopulation::SharedCtor() {
}

CMsgGCMatchGroupDataCenterPopulation::~CMsgGCMatchGroupDataCenterPopulation() {
  // @@protoc_insertion_point(destructor:CMsgGCMatchGroupDataCenterPopulation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCMatchGroupDataCenterPopulation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCMatchGroupDataCenterPopulation::ArenaDtor(void* object) {
  CMsgGCMatchGroupDataCenterPopulation* _this = reinterpret_cast< CMsgGCMatchGroupDataCenterPopulation* >(object);
  (void)_this;
}
void CMsgGCMatchGroupDataCenterPopulation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCMatchGroupDataCenterPopulation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCMatchGroupDataCenterPopulation::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCMatchGroupDataCenterPopulation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_center_population_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCMatchGroupDataCenterPopulation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgGCDataCenterPopulation data_center_population = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data_center_population(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCMatchGroupDataCenterPopulation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCMatchGroupDataCenterPopulation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgGCDataCenterPopulation data_center_population = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_center_population_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_data_center_population(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCMatchGroupDataCenterPopulation)
  return target;
}

size_t CMsgGCMatchGroupDataCenterPopulation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCMatchGroupDataCenterPopulation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgGCDataCenterPopulation data_center_population = 1;
  total_size += 1UL * this->_internal_data_center_population_size();
  for (const auto& msg : this->data_center_population_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCMatchGroupDataCenterPopulation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCMatchGroupDataCenterPopulation)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCMatchGroupDataCenterPopulation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCMatchGroupDataCenterPopulation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCMatchGroupDataCenterPopulation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCMatchGroupDataCenterPopulation)
    MergeFrom(*source);
  }
}

void CMsgGCMatchGroupDataCenterPopulation::MergeFrom(const CMsgGCMatchGroupDataCenterPopulation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCMatchGroupDataCenterPopulation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_center_population_.MergeFrom(from.data_center_population_);
}

void CMsgGCMatchGroupDataCenterPopulation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCMatchGroupDataCenterPopulation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCMatchGroupDataCenterPopulation::CopyFrom(const CMsgGCMatchGroupDataCenterPopulation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCMatchGroupDataCenterPopulation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCMatchGroupDataCenterPopulation::IsInitialized() const {
  return true;
}

void CMsgGCMatchGroupDataCenterPopulation::InternalSwap(CMsgGCMatchGroupDataCenterPopulation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  data_center_population_.InternalSwap(&other->data_center_population_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCMatchGroupDataCenterPopulation::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[163]);
}

// ===================================================================

class CMsgGCMatchMakerStatsResponse::_Internal {
 public:
};

CMsgGCMatchMakerStatsResponse::CMsgGCMatchMakerStatsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  map_count_(arena),
  matchgroup_data_center_population_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCMatchMakerStatsResponse)
}
CMsgGCMatchMakerStatsResponse::CMsgGCMatchMakerStatsResponse(const CMsgGCMatchMakerStatsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      map_count_(from.map_count_),
      matchgroup_data_center_population_(from.matchgroup_data_center_population_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGCMatchMakerStatsResponse)
}

void CMsgGCMatchMakerStatsResponse::SharedCtor() {
}

CMsgGCMatchMakerStatsResponse::~CMsgGCMatchMakerStatsResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCMatchMakerStatsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCMatchMakerStatsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCMatchMakerStatsResponse::ArenaDtor(void* object) {
  CMsgGCMatchMakerStatsResponse* _this = reinterpret_cast< CMsgGCMatchMakerStatsResponse* >(object);
  (void)_this;
}
void CMsgGCMatchMakerStatsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCMatchMakerStatsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCMatchMakerStatsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCMatchMakerStatsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map_count_.Clear();
  matchgroup_data_center_population_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCMatchMakerStatsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 map_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_map_count(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_map_count(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgGCMatchGroupDataCenterPopulation matchgroup_data_center_population = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_matchgroup_data_center_population(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCMatchMakerStatsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCMatchMakerStatsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 map_count = 1;
  for (int i = 0, n = this->_internal_map_count_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_map_count(i), target);
  }

  // repeated .CMsgGCMatchGroupDataCenterPopulation matchgroup_data_center_population = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_matchgroup_data_center_population_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_matchgroup_data_center_population(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCMatchMakerStatsResponse)
  return target;
}

size_t CMsgGCMatchMakerStatsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCMatchMakerStatsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 map_count = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->map_count_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_count_size());
    total_size += data_size;
  }

  // repeated .CMsgGCMatchGroupDataCenterPopulation matchgroup_data_center_population = 2;
  total_size += 1UL * this->_internal_matchgroup_data_center_population_size();
  for (const auto& msg : this->matchgroup_data_center_population_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCMatchMakerStatsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCMatchMakerStatsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCMatchMakerStatsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCMatchMakerStatsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCMatchMakerStatsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCMatchMakerStatsResponse)
    MergeFrom(*source);
  }
}

void CMsgGCMatchMakerStatsResponse::MergeFrom(const CMsgGCMatchMakerStatsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCMatchMakerStatsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  map_count_.MergeFrom(from.map_count_);
  matchgroup_data_center_population_.MergeFrom(from.matchgroup_data_center_population_);
}

void CMsgGCMatchMakerStatsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCMatchMakerStatsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCMatchMakerStatsResponse::CopyFrom(const CMsgGCMatchMakerStatsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCMatchMakerStatsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCMatchMakerStatsResponse::IsInitialized() const {
  return true;
}

void CMsgGCMatchMakerStatsResponse::InternalSwap(CMsgGCMatchMakerStatsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  map_count_.InternalSwap(&other->map_count_);
  matchgroup_data_center_population_.InternalSwap(&other->matchgroup_data_center_population_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCMatchMakerStatsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[164]);
}

// ===================================================================

class CMsgGCMatchHistoryLoad::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCMatchHistoryLoad>()._has_bits_);
  static void set_has_match_group(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCMatchHistoryLoad::CMsgGCMatchHistoryLoad(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCMatchHistoryLoad)
}
CMsgGCMatchHistoryLoad::CMsgGCMatchHistoryLoad(const CMsgGCMatchHistoryLoad& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  match_group_ = from.match_group_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCMatchHistoryLoad)
}

void CMsgGCMatchHistoryLoad::SharedCtor() {
match_group_ = -1;
}

CMsgGCMatchHistoryLoad::~CMsgGCMatchHistoryLoad() {
  // @@protoc_insertion_point(destructor:CMsgGCMatchHistoryLoad)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCMatchHistoryLoad::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCMatchHistoryLoad::ArenaDtor(void* object) {
  CMsgGCMatchHistoryLoad* _this = reinterpret_cast< CMsgGCMatchHistoryLoad* >(object);
  (void)_this;
}
void CMsgGCMatchHistoryLoad::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCMatchHistoryLoad::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCMatchHistoryLoad::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCMatchHistoryLoad)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  match_group_ = -1;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCMatchHistoryLoad::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .ETFMatchGroup match_group = 1 [default = k_eTFMatchGroup_Invalid];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ETFMatchGroup_IsValid(val))) {
            _internal_set_match_group(static_cast<::ETFMatchGroup>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCMatchHistoryLoad::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCMatchHistoryLoad)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ETFMatchGroup match_group = 1 [default = k_eTFMatchGroup_Invalid];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_match_group(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCMatchHistoryLoad)
  return target;
}

size_t CMsgGCMatchHistoryLoad::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCMatchHistoryLoad)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .ETFMatchGroup match_group = 1 [default = k_eTFMatchGroup_Invalid];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_match_group());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCMatchHistoryLoad::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCMatchHistoryLoad)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCMatchHistoryLoad* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCMatchHistoryLoad>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCMatchHistoryLoad)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCMatchHistoryLoad)
    MergeFrom(*source);
  }
}

void CMsgGCMatchHistoryLoad::MergeFrom(const CMsgGCMatchHistoryLoad& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCMatchHistoryLoad)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_match_group()) {
    _internal_set_match_group(from._internal_match_group());
  }
}

void CMsgGCMatchHistoryLoad::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCMatchHistoryLoad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCMatchHistoryLoad::CopyFrom(const CMsgGCMatchHistoryLoad& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCMatchHistoryLoad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCMatchHistoryLoad::IsInitialized() const {
  return true;
}

void CMsgGCMatchHistoryLoad::InternalSwap(CMsgGCMatchHistoryLoad* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(match_group_, other->match_group_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCMatchHistoryLoad::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[165]);
}

// ===================================================================

class CMsgGCDataCenterPing_Update_PingEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCDataCenterPing_Update_PingEntry>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ping(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ping_status(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgGCDataCenterPing_Update_PingEntry::CMsgGCDataCenterPing_Update_PingEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCDataCenterPing_Update.PingEntry)
}
CMsgGCDataCenterPing_Update_PingEntry::CMsgGCDataCenterPing_Update_PingEntry(const CMsgGCDataCenterPing_Update_PingEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&ping_, &from.ping_,
    static_cast<size_t>(reinterpret_cast<char*>(&ping_status_) -
    reinterpret_cast<char*>(&ping_)) + sizeof(ping_status_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCDataCenterPing_Update.PingEntry)
}

void CMsgGCDataCenterPing_Update_PingEntry::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ping_ = 0u;
ping_status_ = 1;
}

CMsgGCDataCenterPing_Update_PingEntry::~CMsgGCDataCenterPing_Update_PingEntry() {
  // @@protoc_insertion_point(destructor:CMsgGCDataCenterPing_Update.PingEntry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCDataCenterPing_Update_PingEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCDataCenterPing_Update_PingEntry::ArenaDtor(void* object) {
  CMsgGCDataCenterPing_Update_PingEntry* _this = reinterpret_cast< CMsgGCDataCenterPing_Update_PingEntry* >(object);
  (void)_this;
}
void CMsgGCDataCenterPing_Update_PingEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCDataCenterPing_Update_PingEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCDataCenterPing_Update_PingEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCDataCenterPing_Update.PingEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ping_ = 0u;
    ping_status_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCDataCenterPing_Update_PingEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGCDataCenterPing_Update.PingEntry.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ping = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_ping(&has_bits);
          ping_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgGCDataCenterPing_Update.Status ping_status = 3 [default = Normal];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgGCDataCenterPing_Update_Status_IsValid(val))) {
            _internal_set_ping_status(static_cast<::CMsgGCDataCenterPing_Update_Status>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCDataCenterPing_Update_PingEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCDataCenterPing_Update.PingEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCDataCenterPing_Update.PingEntry.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional uint32 ping = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ping(), target);
  }

  // optional .CMsgGCDataCenterPing_Update.Status ping_status = 3 [default = Normal];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_ping_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCDataCenterPing_Update.PingEntry)
  return target;
}

size_t CMsgGCDataCenterPing_Update_PingEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCDataCenterPing_Update.PingEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional uint32 ping = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ping());
    }

    // optional .CMsgGCDataCenterPing_Update.Status ping_status = 3 [default = Normal];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ping_status());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCDataCenterPing_Update_PingEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCDataCenterPing_Update.PingEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCDataCenterPing_Update_PingEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCDataCenterPing_Update_PingEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCDataCenterPing_Update.PingEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCDataCenterPing_Update.PingEntry)
    MergeFrom(*source);
  }
}

void CMsgGCDataCenterPing_Update_PingEntry::MergeFrom(const CMsgGCDataCenterPing_Update_PingEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCDataCenterPing_Update.PingEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      ping_ = from.ping_;
    }
    if (cached_has_bits & 0x00000004u) {
      ping_status_ = from.ping_status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCDataCenterPing_Update_PingEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCDataCenterPing_Update.PingEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCDataCenterPing_Update_PingEntry::CopyFrom(const CMsgGCDataCenterPing_Update_PingEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCDataCenterPing_Update.PingEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCDataCenterPing_Update_PingEntry::IsInitialized() const {
  return true;
}

void CMsgGCDataCenterPing_Update_PingEntry::InternalSwap(CMsgGCDataCenterPing_Update_PingEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  swap(ping_, other->ping_);
  swap(ping_status_, other->ping_status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCDataCenterPing_Update_PingEntry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[166]);
}

// ===================================================================

class CMsgGCDataCenterPing_Update::_Internal {
 public:
};

CMsgGCDataCenterPing_Update::CMsgGCDataCenterPing_Update(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  pingdata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCDataCenterPing_Update)
}
CMsgGCDataCenterPing_Update::CMsgGCDataCenterPing_Update(const CMsgGCDataCenterPing_Update& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      pingdata_(from.pingdata_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGCDataCenterPing_Update)
}

void CMsgGCDataCenterPing_Update::SharedCtor() {
}

CMsgGCDataCenterPing_Update::~CMsgGCDataCenterPing_Update() {
  // @@protoc_insertion_point(destructor:CMsgGCDataCenterPing_Update)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCDataCenterPing_Update::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCDataCenterPing_Update::ArenaDtor(void* object) {
  CMsgGCDataCenterPing_Update* _this = reinterpret_cast< CMsgGCDataCenterPing_Update* >(object);
  (void)_this;
}
void CMsgGCDataCenterPing_Update::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCDataCenterPing_Update::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCDataCenterPing_Update::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCDataCenterPing_Update)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pingdata_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCDataCenterPing_Update::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgGCDataCenterPing_Update.PingEntry pingdata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pingdata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCDataCenterPing_Update::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCDataCenterPing_Update)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgGCDataCenterPing_Update.PingEntry pingdata = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pingdata_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_pingdata(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCDataCenterPing_Update)
  return target;
}

size_t CMsgGCDataCenterPing_Update::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCDataCenterPing_Update)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgGCDataCenterPing_Update.PingEntry pingdata = 1;
  total_size += 1UL * this->_internal_pingdata_size();
  for (const auto& msg : this->pingdata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCDataCenterPing_Update::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCDataCenterPing_Update)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCDataCenterPing_Update* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCDataCenterPing_Update>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCDataCenterPing_Update)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCDataCenterPing_Update)
    MergeFrom(*source);
  }
}

void CMsgGCDataCenterPing_Update::MergeFrom(const CMsgGCDataCenterPing_Update& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCDataCenterPing_Update)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pingdata_.MergeFrom(from.pingdata_);
}

void CMsgGCDataCenterPing_Update::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCDataCenterPing_Update)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCDataCenterPing_Update::CopyFrom(const CMsgGCDataCenterPing_Update& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCDataCenterPing_Update)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCDataCenterPing_Update::IsInitialized() const {
  return true;
}

void CMsgGCDataCenterPing_Update::InternalSwap(CMsgGCDataCenterPing_Update* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  pingdata_.InternalSwap(&other->pingdata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCDataCenterPing_Update::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[167]);
}

// ===================================================================

class CMsgGC_KickPlayerFromLobby::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGC_KickPlayerFromLobby>()._has_bits_);
  static void set_has_targetid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGC_KickPlayerFromLobby::CMsgGC_KickPlayerFromLobby(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGC_KickPlayerFromLobby)
}
CMsgGC_KickPlayerFromLobby::CMsgGC_KickPlayerFromLobby(const CMsgGC_KickPlayerFromLobby& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  targetid_ = from.targetid_;
  // @@protoc_insertion_point(copy_constructor:CMsgGC_KickPlayerFromLobby)
}

void CMsgGC_KickPlayerFromLobby::SharedCtor() {
targetid_ = uint64_t{0u};
}

CMsgGC_KickPlayerFromLobby::~CMsgGC_KickPlayerFromLobby() {
  // @@protoc_insertion_point(destructor:CMsgGC_KickPlayerFromLobby)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGC_KickPlayerFromLobby::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGC_KickPlayerFromLobby::ArenaDtor(void* object) {
  CMsgGC_KickPlayerFromLobby* _this = reinterpret_cast< CMsgGC_KickPlayerFromLobby* >(object);
  (void)_this;
}
void CMsgGC_KickPlayerFromLobby::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGC_KickPlayerFromLobby::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGC_KickPlayerFromLobby::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGC_KickPlayerFromLobby)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  targetid_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGC_KickPlayerFromLobby::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 targetID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_targetid(&has_bits);
          targetid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGC_KickPlayerFromLobby::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGC_KickPlayerFromLobby)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 targetID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_targetid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGC_KickPlayerFromLobby)
  return target;
}

size_t CMsgGC_KickPlayerFromLobby::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGC_KickPlayerFromLobby)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 targetID = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_targetid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGC_KickPlayerFromLobby::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGC_KickPlayerFromLobby)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGC_KickPlayerFromLobby* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGC_KickPlayerFromLobby>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGC_KickPlayerFromLobby)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGC_KickPlayerFromLobby)
    MergeFrom(*source);
  }
}

void CMsgGC_KickPlayerFromLobby::MergeFrom(const CMsgGC_KickPlayerFromLobby& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGC_KickPlayerFromLobby)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_targetid()) {
    _internal_set_targetid(from._internal_targetid());
  }
}

void CMsgGC_KickPlayerFromLobby::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGC_KickPlayerFromLobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGC_KickPlayerFromLobby::CopyFrom(const CMsgGC_KickPlayerFromLobby& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGC_KickPlayerFromLobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_KickPlayerFromLobby::IsInitialized() const {
  return true;
}

void CMsgGC_KickPlayerFromLobby::InternalSwap(CMsgGC_KickPlayerFromLobby* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(targetid_, other->targetid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGC_KickPlayerFromLobby::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[168]);
}

// ===================================================================

class CMsgGCSurveyRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCSurveyRequest>()._has_bits_);
  static void set_has_question_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCSurveyRequest::CMsgGCSurveyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCSurveyRequest)
}
CMsgGCSurveyRequest::CMsgGCSurveyRequest(const CMsgGCSurveyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&match_id_, &from.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&question_type_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(question_type_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCSurveyRequest)
}

void CMsgGCSurveyRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&match_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&question_type_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(question_type_));
}

CMsgGCSurveyRequest::~CMsgGCSurveyRequest() {
  // @@protoc_insertion_point(destructor:CMsgGCSurveyRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCSurveyRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCSurveyRequest::ArenaDtor(void* object) {
  CMsgGCSurveyRequest* _this = reinterpret_cast< CMsgGCSurveyRequest* >(object);
  (void)_this;
}
void CMsgGCSurveyRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCSurveyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCSurveyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCSurveyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&question_type_) -
        reinterpret_cast<char*>(&match_id_)) + sizeof(question_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCSurveyRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .SurveyQuestionType question_type = 1 [default = QUESTION_MATCH_QUALITY];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::SurveyQuestionType_IsValid(val))) {
            _internal_set_question_type(static_cast<::SurveyQuestionType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint64 match_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_match_id(&has_bits);
          match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCSurveyRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCSurveyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SurveyQuestionType question_type = 1 [default = QUESTION_MATCH_QUALITY];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_question_type(), target);
  }

  // optional uint64 match_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_match_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCSurveyRequest)
  return target;
}

size_t CMsgGCSurveyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCSurveyRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 match_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_match_id());
    }

    // optional .SurveyQuestionType question_type = 1 [default = QUESTION_MATCH_QUALITY];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_question_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCSurveyRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCSurveyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCSurveyRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCSurveyRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCSurveyRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCSurveyRequest)
    MergeFrom(*source);
  }
}

void CMsgGCSurveyRequest::MergeFrom(const CMsgGCSurveyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCSurveyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      question_type_ = from.question_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCSurveyRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCSurveyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCSurveyRequest::CopyFrom(const CMsgGCSurveyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCSurveyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCSurveyRequest::IsInitialized() const {
  return true;
}

void CMsgGCSurveyRequest::InternalSwap(CMsgGCSurveyRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCSurveyRequest, question_type_)
      + sizeof(CMsgGCSurveyRequest::question_type_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCSurveyRequest, match_id_)>(
          reinterpret_cast<char*>(&match_id_),
          reinterpret_cast<char*>(&other->match_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCSurveyRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[169]);
}

// ===================================================================

class CMsgGCSurveyResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCSurveyResponse>()._has_bits_);
  static void set_has_question_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgGCSurveyResponse::CMsgGCSurveyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCSurveyResponse)
}
CMsgGCSurveyResponse::CMsgGCSurveyResponse(const CMsgGCSurveyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&match_id_, &from.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&response_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(response_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCSurveyResponse)
}

void CMsgGCSurveyResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&match_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&response_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(response_));
}

CMsgGCSurveyResponse::~CMsgGCSurveyResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCSurveyResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCSurveyResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCSurveyResponse::ArenaDtor(void* object) {
  CMsgGCSurveyResponse* _this = reinterpret_cast< CMsgGCSurveyResponse* >(object);
  (void)_this;
}
void CMsgGCSurveyResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCSurveyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCSurveyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCSurveyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&response_) -
        reinterpret_cast<char*>(&match_id_)) + sizeof(response_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCSurveyResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .SurveyQuestionType question_type = 1 [default = QUESTION_MATCH_QUALITY];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::SurveyQuestionType_IsValid(val))) {
            _internal_set_question_type(static_cast<::SurveyQuestionType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint64 match_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_match_id(&has_bits);
          match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 response = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_response(&has_bits);
          response_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCSurveyResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCSurveyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SurveyQuestionType question_type = 1 [default = QUESTION_MATCH_QUALITY];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_question_type(), target);
  }

  // optional uint64 match_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_match_id(), target);
  }

  // optional int32 response = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_response(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCSurveyResponse)
  return target;
}

size_t CMsgGCSurveyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCSurveyResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 match_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_match_id());
    }

    // optional .SurveyQuestionType question_type = 1 [default = QUESTION_MATCH_QUALITY];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_question_type());
    }

    // optional int32 response = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_response());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCSurveyResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCSurveyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCSurveyResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCSurveyResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCSurveyResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCSurveyResponse)
    MergeFrom(*source);
  }
}

void CMsgGCSurveyResponse::MergeFrom(const CMsgGCSurveyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCSurveyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      question_type_ = from.question_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      response_ = from.response_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCSurveyResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCSurveyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCSurveyResponse::CopyFrom(const CMsgGCSurveyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCSurveyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCSurveyResponse::IsInitialized() const {
  return true;
}

void CMsgGCSurveyResponse::InternalSwap(CMsgGCSurveyResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCSurveyResponse, response_)
      + sizeof(CMsgGCSurveyResponse::response_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCSurveyResponse, match_id_)>(
          reinterpret_cast<char*>(&match_id_),
          reinterpret_cast<char*>(&other->match_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCSurveyResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[170]);
}

// ===================================================================

class CSOQuestMapNode::_Internal {
 public:
  using HasBits = decltype(std::declval<CSOQuestMapNode>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_defindex(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_node_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_star_0_earned(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_star_1_earned(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_star_2_earned(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_loot_claimed(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_selected_quest_def(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_map_cycle(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

CSOQuestMapNode::CSOQuestMapNode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSOQuestMapNode)
}
CSOQuestMapNode::CSOQuestMapNode(const CSOQuestMapNode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&map_cycle_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(map_cycle_));
  // @@protoc_insertion_point(copy_constructor:CSOQuestMapNode)
}

void CSOQuestMapNode::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&map_cycle_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(map_cycle_));
}

CSOQuestMapNode::~CSOQuestMapNode() {
  // @@protoc_insertion_point(destructor:CSOQuestMapNode)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSOQuestMapNode::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSOQuestMapNode::ArenaDtor(void* object) {
  CSOQuestMapNode* _this = reinterpret_cast< CSOQuestMapNode* >(object);
  (void)_this;
}
void CSOQuestMapNode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSOQuestMapNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSOQuestMapNode::Clear() {
// @@protoc_insertion_point(message_clear_start:CSOQuestMapNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&selected_quest_def_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(selected_quest_def_));
  }
  map_cycle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSOQuestMapNode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1 [(.key_field) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 defindex = 3 [(.key_field) = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_defindex(&has_bits);
          defindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 node_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_node_id(&has_bits);
          node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool star_0_earned = 6 [default = false];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_star_0_earned(&has_bits);
          star_0_earned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool star_1_earned = 7 [default = false];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_star_1_earned(&has_bits);
          star_1_earned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool star_2_earned = 8 [default = false];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_star_2_earned(&has_bits);
          star_2_earned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool loot_claimed = 9 [default = false];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_loot_claimed(&has_bits);
          loot_claimed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 selected_quest_def = 10 [default = 0];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_selected_quest_def(&has_bits);
          selected_quest_def_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 map_cycle = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_map_cycle(&has_bits);
          map_cycle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSOQuestMapNode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSOQuestMapNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1 [(.key_field) = true];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint32 defindex = 3 [(.key_field) = true];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_defindex(), target);
  }

  // optional uint32 node_id = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_node_id(), target);
  }

  // optional bool star_0_earned = 6 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_star_0_earned(), target);
  }

  // optional bool star_1_earned = 7 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_star_1_earned(), target);
  }

  // optional bool star_2_earned = 8 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_star_2_earned(), target);
  }

  // optional bool loot_claimed = 9 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_loot_claimed(), target);
  }

  // optional uint32 selected_quest_def = 10 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_selected_quest_def(), target);
  }

  // optional uint32 map_cycle = 11;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_map_cycle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSOQuestMapNode)
  return target;
}

size_t CSOQuestMapNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSOQuestMapNode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 account_id = 1 [(.key_field) = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional uint32 defindex = 3 [(.key_field) = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_defindex());
    }

    // optional uint32 node_id = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_node_id());
    }

    // optional bool star_0_earned = 6 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool star_1_earned = 7 [default = false];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool star_2_earned = 8 [default = false];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool loot_claimed = 9 [default = false];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional uint32 selected_quest_def = 10 [default = 0];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_selected_quest_def());
    }

  }
  // optional uint32 map_cycle = 11;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_map_cycle());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSOQuestMapNode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSOQuestMapNode)
  GOOGLE_DCHECK_NE(&from, this);
  const CSOQuestMapNode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSOQuestMapNode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSOQuestMapNode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSOQuestMapNode)
    MergeFrom(*source);
  }
}

void CSOQuestMapNode::MergeFrom(const CSOQuestMapNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSOQuestMapNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      defindex_ = from.defindex_;
    }
    if (cached_has_bits & 0x00000004u) {
      node_id_ = from.node_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      star_0_earned_ = from.star_0_earned_;
    }
    if (cached_has_bits & 0x00000010u) {
      star_1_earned_ = from.star_1_earned_;
    }
    if (cached_has_bits & 0x00000020u) {
      star_2_earned_ = from.star_2_earned_;
    }
    if (cached_has_bits & 0x00000040u) {
      loot_claimed_ = from.loot_claimed_;
    }
    if (cached_has_bits & 0x00000080u) {
      selected_quest_def_ = from.selected_quest_def_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_map_cycle(from._internal_map_cycle());
  }
}

void CSOQuestMapNode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSOQuestMapNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOQuestMapNode::CopyFrom(const CSOQuestMapNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSOQuestMapNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOQuestMapNode::IsInitialized() const {
  return true;
}

void CSOQuestMapNode::InternalSwap(CSOQuestMapNode* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSOQuestMapNode, map_cycle_)
      + sizeof(CSOQuestMapNode::map_cycle_)
      - PROTOBUF_FIELD_OFFSET(CSOQuestMapNode, account_id_)>(
          reinterpret_cast<char*>(&account_id_),
          reinterpret_cast<char*>(&other->account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSOQuestMapNode::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[171]);
}

// ===================================================================

class CSOQuest::_Internal {
 public:
  using HasBits = decltype(std::declval<CSOQuest>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_quest_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_defindex(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_active(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_points_0(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_points_1(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_points_2(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_quest_map_node_source_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_map_cycle(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

CSOQuest::CSOQuest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSOQuest)
}
CSOQuest::CSOQuest(const CSOQuest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&quest_id_, &from.quest_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&map_cycle_) -
    reinterpret_cast<char*>(&quest_id_)) + sizeof(map_cycle_));
  // @@protoc_insertion_point(copy_constructor:CSOQuest)
}

void CSOQuest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&quest_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&map_cycle_) -
    reinterpret_cast<char*>(&quest_id_)) + sizeof(map_cycle_));
}

CSOQuest::~CSOQuest() {
  // @@protoc_insertion_point(destructor:CSOQuest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSOQuest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSOQuest::ArenaDtor(void* object) {
  CSOQuest* _this = reinterpret_cast< CSOQuest* >(object);
  (void)_this;
}
void CSOQuest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSOQuest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSOQuest::Clear() {
// @@protoc_insertion_point(message_clear_start:CSOQuest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&quest_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&quest_map_node_source_id_) -
        reinterpret_cast<char*>(&quest_id_)) + sizeof(quest_map_node_source_id_));
  }
  map_cycle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSOQuest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 quest_id = 2 [(.key_field) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_quest_id(&has_bits);
          quest_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 defindex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_defindex(&has_bits);
          defindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool active = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_active(&has_bits);
          active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 points_0 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_points_0(&has_bits);
          points_0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 points_1 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_points_1(&has_bits);
          points_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 points_2 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_points_2(&has_bits);
          points_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 quest_map_node_source_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_quest_map_node_source_id(&has_bits);
          quest_map_node_source_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 map_cycle = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_map_cycle(&has_bits);
          map_cycle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSOQuest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSOQuest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint64 quest_id = 2 [(.key_field) = true];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_quest_id(), target);
  }

  // optional uint32 defindex = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_defindex(), target);
  }

  // optional bool active = 4 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_active(), target);
  }

  // optional uint32 points_0 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_points_0(), target);
  }

  // optional uint32 points_1 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_points_1(), target);
  }

  // optional uint32 points_2 = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_points_2(), target);
  }

  // optional uint32 quest_map_node_source_id = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_quest_map_node_source_id(), target);
  }

  // optional uint32 map_cycle = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_map_cycle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSOQuest)
  return target;
}

size_t CSOQuest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSOQuest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint64 quest_id = 2 [(.key_field) = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_quest_id());
    }

    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional uint32 defindex = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_defindex());
    }

    // optional bool active = 4 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional uint32 points_0 = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_points_0());
    }

    // optional uint32 points_1 = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_points_1());
    }

    // optional uint32 points_2 = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_points_2());
    }

    // optional uint32 quest_map_node_source_id = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_quest_map_node_source_id());
    }

  }
  // optional uint32 map_cycle = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_map_cycle());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSOQuest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSOQuest)
  GOOGLE_DCHECK_NE(&from, this);
  const CSOQuest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSOQuest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSOQuest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSOQuest)
    MergeFrom(*source);
  }
}

void CSOQuest::MergeFrom(const CSOQuest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSOQuest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      quest_id_ = from.quest_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      defindex_ = from.defindex_;
    }
    if (cached_has_bits & 0x00000008u) {
      active_ = from.active_;
    }
    if (cached_has_bits & 0x00000010u) {
      points_0_ = from.points_0_;
    }
    if (cached_has_bits & 0x00000020u) {
      points_1_ = from.points_1_;
    }
    if (cached_has_bits & 0x00000040u) {
      points_2_ = from.points_2_;
    }
    if (cached_has_bits & 0x00000080u) {
      quest_map_node_source_id_ = from.quest_map_node_source_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_map_cycle(from._internal_map_cycle());
  }
}

void CSOQuest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSOQuest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOQuest::CopyFrom(const CSOQuest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSOQuest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOQuest::IsInitialized() const {
  return true;
}

void CSOQuest::InternalSwap(CSOQuest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSOQuest, map_cycle_)
      + sizeof(CSOQuest::map_cycle_)
      - PROTOBUF_FIELD_OFFSET(CSOQuest, quest_id_)>(
          reinterpret_cast<char*>(&quest_id_),
          reinterpret_cast<char*>(&other->quest_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSOQuest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[172]);
}

// ===================================================================

class CSOQuestMapRewardPurchase::_Internal {
 public:
  using HasBits = decltype(std::declval<CSOQuestMapRewardPurchase>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_defindex(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_map_cycle(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_purchase_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CSOQuestMapRewardPurchase::CSOQuestMapRewardPurchase(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSOQuestMapRewardPurchase)
}
CSOQuestMapRewardPurchase::CSOQuestMapRewardPurchase(const CSOQuestMapRewardPurchase& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&purchase_id_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(purchase_id_));
  // @@protoc_insertion_point(copy_constructor:CSOQuestMapRewardPurchase)
}

void CSOQuestMapRewardPurchase::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&purchase_id_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(purchase_id_));
}

CSOQuestMapRewardPurchase::~CSOQuestMapRewardPurchase() {
  // @@protoc_insertion_point(destructor:CSOQuestMapRewardPurchase)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSOQuestMapRewardPurchase::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSOQuestMapRewardPurchase::ArenaDtor(void* object) {
  CSOQuestMapRewardPurchase* _this = reinterpret_cast< CSOQuestMapRewardPurchase* >(object);
  (void)_this;
}
void CSOQuestMapRewardPurchase::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSOQuestMapRewardPurchase::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSOQuestMapRewardPurchase::Clear() {
// @@protoc_insertion_point(message_clear_start:CSOQuestMapRewardPurchase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&purchase_id_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(purchase_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSOQuestMapRewardPurchase::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 defindex = 2 [(.key_field) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_defindex(&has_bits);
          defindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 map_cycle = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_map_cycle(&has_bits);
          map_cycle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 purchase_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_purchase_id(&has_bits);
          purchase_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSOQuestMapRewardPurchase::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSOQuestMapRewardPurchase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint32 defindex = 2 [(.key_field) = true];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_defindex(), target);
  }

  // optional uint32 count = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_count(), target);
  }

  // optional uint32 map_cycle = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_map_cycle(), target);
  }

  // optional uint32 purchase_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_purchase_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSOQuestMapRewardPurchase)
  return target;
}

size_t CSOQuestMapRewardPurchase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSOQuestMapRewardPurchase)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional uint32 defindex = 2 [(.key_field) = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_defindex());
    }

    // optional uint32 count = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_count());
    }

    // optional uint32 map_cycle = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_map_cycle());
    }

    // optional uint32 purchase_id = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_purchase_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSOQuestMapRewardPurchase::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSOQuestMapRewardPurchase)
  GOOGLE_DCHECK_NE(&from, this);
  const CSOQuestMapRewardPurchase* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSOQuestMapRewardPurchase>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSOQuestMapRewardPurchase)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSOQuestMapRewardPurchase)
    MergeFrom(*source);
  }
}

void CSOQuestMapRewardPurchase::MergeFrom(const CSOQuestMapRewardPurchase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSOQuestMapRewardPurchase)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      defindex_ = from.defindex_;
    }
    if (cached_has_bits & 0x00000004u) {
      count_ = from.count_;
    }
    if (cached_has_bits & 0x00000008u) {
      map_cycle_ = from.map_cycle_;
    }
    if (cached_has_bits & 0x00000010u) {
      purchase_id_ = from.purchase_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSOQuestMapRewardPurchase::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSOQuestMapRewardPurchase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOQuestMapRewardPurchase::CopyFrom(const CSOQuestMapRewardPurchase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSOQuestMapRewardPurchase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOQuestMapRewardPurchase::IsInitialized() const {
  return true;
}

void CSOQuestMapRewardPurchase::InternalSwap(CSOQuestMapRewardPurchase* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSOQuestMapRewardPurchase, purchase_id_)
      + sizeof(CSOQuestMapRewardPurchase::purchase_id_)
      - PROTOBUF_FIELD_OFFSET(CSOQuestMapRewardPurchase, account_id_)>(
          reinterpret_cast<char*>(&account_id_),
          reinterpret_cast<char*>(&other->account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSOQuestMapRewardPurchase::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[173]);
}

// ===================================================================

class CMsgGCQuestIdentify::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCQuestIdentify>()._has_bits_);
  static void set_has_quest_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCQuestIdentify::CMsgGCQuestIdentify(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCQuestIdentify)
}
CMsgGCQuestIdentify::CMsgGCQuestIdentify(const CMsgGCQuestIdentify& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  quest_id_ = from.quest_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCQuestIdentify)
}

void CMsgGCQuestIdentify::SharedCtor() {
quest_id_ = uint64_t{0u};
}

CMsgGCQuestIdentify::~CMsgGCQuestIdentify() {
  // @@protoc_insertion_point(destructor:CMsgGCQuestIdentify)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCQuestIdentify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCQuestIdentify::ArenaDtor(void* object) {
  CMsgGCQuestIdentify* _this = reinterpret_cast< CMsgGCQuestIdentify* >(object);
  (void)_this;
}
void CMsgGCQuestIdentify::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCQuestIdentify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCQuestIdentify::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCQuestIdentify)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  quest_id_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCQuestIdentify::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 quest_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_quest_id(&has_bits);
          quest_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCQuestIdentify::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCQuestIdentify)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 quest_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_quest_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCQuestIdentify)
  return target;
}

size_t CMsgGCQuestIdentify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCQuestIdentify)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 quest_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_quest_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCQuestIdentify::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCQuestIdentify)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCQuestIdentify* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCQuestIdentify>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCQuestIdentify)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCQuestIdentify)
    MergeFrom(*source);
  }
}

void CMsgGCQuestIdentify::MergeFrom(const CMsgGCQuestIdentify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCQuestIdentify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_quest_id()) {
    _internal_set_quest_id(from._internal_quest_id());
  }
}

void CMsgGCQuestIdentify::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCQuestIdentify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCQuestIdentify::CopyFrom(const CMsgGCQuestIdentify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCQuestIdentify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCQuestIdentify::IsInitialized() const {
  return true;
}

void CMsgGCQuestIdentify::InternalSwap(CMsgGCQuestIdentify* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(quest_id_, other->quest_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCQuestIdentify::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[174]);
}

// ===================================================================

class CMsgGCQuestDevGive::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCQuestDevGive>()._has_bits_);
  static void set_has_quest_def_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCQuestDevGive::CMsgGCQuestDevGive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCQuestDevGive)
}
CMsgGCQuestDevGive::CMsgGCQuestDevGive(const CMsgGCQuestDevGive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  quest_def_index_ = from.quest_def_index_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCQuestDevGive)
}

void CMsgGCQuestDevGive::SharedCtor() {
quest_def_index_ = 0u;
}

CMsgGCQuestDevGive::~CMsgGCQuestDevGive() {
  // @@protoc_insertion_point(destructor:CMsgGCQuestDevGive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCQuestDevGive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCQuestDevGive::ArenaDtor(void* object) {
  CMsgGCQuestDevGive* _this = reinterpret_cast< CMsgGCQuestDevGive* >(object);
  (void)_this;
}
void CMsgGCQuestDevGive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCQuestDevGive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCQuestDevGive::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCQuestDevGive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  quest_def_index_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCQuestDevGive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 quest_def_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_quest_def_index(&has_bits);
          quest_def_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCQuestDevGive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCQuestDevGive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 quest_def_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_quest_def_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCQuestDevGive)
  return target;
}

size_t CMsgGCQuestDevGive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCQuestDevGive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 quest_def_index = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_quest_def_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCQuestDevGive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCQuestDevGive)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCQuestDevGive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCQuestDevGive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCQuestDevGive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCQuestDevGive)
    MergeFrom(*source);
  }
}

void CMsgGCQuestDevGive::MergeFrom(const CMsgGCQuestDevGive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCQuestDevGive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_quest_def_index()) {
    _internal_set_quest_def_index(from._internal_quest_def_index());
  }
}

void CMsgGCQuestDevGive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCQuestDevGive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCQuestDevGive::CopyFrom(const CMsgGCQuestDevGive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCQuestDevGive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCQuestDevGive::IsInitialized() const {
  return true;
}

void CMsgGCQuestDevGive::InternalSwap(CMsgGCQuestDevGive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(quest_def_index_, other->quest_def_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCQuestDevGive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[175]);
}

// ===================================================================

class CMsgGCQuestNodeTurnIn::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCQuestNodeTurnIn>()._has_bits_);
  static void set_has_node_defindex(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCQuestNodeTurnIn::CMsgGCQuestNodeTurnIn(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCQuestNodeTurnIn)
}
CMsgGCQuestNodeTurnIn::CMsgGCQuestNodeTurnIn(const CMsgGCQuestNodeTurnIn& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  node_defindex_ = from.node_defindex_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCQuestNodeTurnIn)
}

void CMsgGCQuestNodeTurnIn::SharedCtor() {
node_defindex_ = 0u;
}

CMsgGCQuestNodeTurnIn::~CMsgGCQuestNodeTurnIn() {
  // @@protoc_insertion_point(destructor:CMsgGCQuestNodeTurnIn)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCQuestNodeTurnIn::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCQuestNodeTurnIn::ArenaDtor(void* object) {
  CMsgGCQuestNodeTurnIn* _this = reinterpret_cast< CMsgGCQuestNodeTurnIn* >(object);
  (void)_this;
}
void CMsgGCQuestNodeTurnIn::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCQuestNodeTurnIn::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCQuestNodeTurnIn::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCQuestNodeTurnIn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_defindex_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCQuestNodeTurnIn::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 node_defindex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_node_defindex(&has_bits);
          node_defindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCQuestNodeTurnIn::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCQuestNodeTurnIn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 node_defindex = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_node_defindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCQuestNodeTurnIn)
  return target;
}

size_t CMsgGCQuestNodeTurnIn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCQuestNodeTurnIn)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 node_defindex = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_node_defindex());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCQuestNodeTurnIn::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCQuestNodeTurnIn)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCQuestNodeTurnIn* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCQuestNodeTurnIn>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCQuestNodeTurnIn)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCQuestNodeTurnIn)
    MergeFrom(*source);
  }
}

void CMsgGCQuestNodeTurnIn::MergeFrom(const CMsgGCQuestNodeTurnIn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCQuestNodeTurnIn)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_node_defindex()) {
    _internal_set_node_defindex(from._internal_node_defindex());
  }
}

void CMsgGCQuestNodeTurnIn::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCQuestNodeTurnIn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCQuestNodeTurnIn::CopyFrom(const CMsgGCQuestNodeTurnIn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCQuestNodeTurnIn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCQuestNodeTurnIn::IsInitialized() const {
  return true;
}

void CMsgGCQuestNodeTurnIn::InternalSwap(CMsgGCQuestNodeTurnIn* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(node_defindex_, other->node_defindex_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCQuestNodeTurnIn::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[176]);
}

// ===================================================================

class CMsgGCQuestMapUnlockNode::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCQuestMapUnlockNode>()._has_bits_);
  static void set_has_node_defindex(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_quest_defindex(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCQuestMapUnlockNode::CMsgGCQuestMapUnlockNode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCQuestMapUnlockNode)
}
CMsgGCQuestMapUnlockNode::CMsgGCQuestMapUnlockNode(const CMsgGCQuestMapUnlockNode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&node_defindex_, &from.node_defindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&quest_defindex_) -
    reinterpret_cast<char*>(&node_defindex_)) + sizeof(quest_defindex_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCQuestMapUnlockNode)
}

void CMsgGCQuestMapUnlockNode::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&node_defindex_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&quest_defindex_) -
    reinterpret_cast<char*>(&node_defindex_)) + sizeof(quest_defindex_));
}

CMsgGCQuestMapUnlockNode::~CMsgGCQuestMapUnlockNode() {
  // @@protoc_insertion_point(destructor:CMsgGCQuestMapUnlockNode)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCQuestMapUnlockNode::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCQuestMapUnlockNode::ArenaDtor(void* object) {
  CMsgGCQuestMapUnlockNode* _this = reinterpret_cast< CMsgGCQuestMapUnlockNode* >(object);
  (void)_this;
}
void CMsgGCQuestMapUnlockNode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCQuestMapUnlockNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCQuestMapUnlockNode::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCQuestMapUnlockNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&node_defindex_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&quest_defindex_) -
        reinterpret_cast<char*>(&node_defindex_)) + sizeof(quest_defindex_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCQuestMapUnlockNode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 node_defindex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_node_defindex(&has_bits);
          node_defindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 quest_defindex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_quest_defindex(&has_bits);
          quest_defindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCQuestMapUnlockNode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCQuestMapUnlockNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 node_defindex = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_node_defindex(), target);
  }

  // optional uint32 quest_defindex = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_quest_defindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCQuestMapUnlockNode)
  return target;
}

size_t CMsgGCQuestMapUnlockNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCQuestMapUnlockNode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 node_defindex = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_node_defindex());
    }

    // optional uint32 quest_defindex = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_quest_defindex());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCQuestMapUnlockNode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCQuestMapUnlockNode)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCQuestMapUnlockNode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCQuestMapUnlockNode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCQuestMapUnlockNode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCQuestMapUnlockNode)
    MergeFrom(*source);
  }
}

void CMsgGCQuestMapUnlockNode::MergeFrom(const CMsgGCQuestMapUnlockNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCQuestMapUnlockNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      node_defindex_ = from.node_defindex_;
    }
    if (cached_has_bits & 0x00000002u) {
      quest_defindex_ = from.quest_defindex_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCQuestMapUnlockNode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCQuestMapUnlockNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCQuestMapUnlockNode::CopyFrom(const CMsgGCQuestMapUnlockNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCQuestMapUnlockNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCQuestMapUnlockNode::IsInitialized() const {
  return true;
}

void CMsgGCQuestMapUnlockNode::InternalSwap(CMsgGCQuestMapUnlockNode* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCQuestMapUnlockNode, quest_defindex_)
      + sizeof(CMsgGCQuestMapUnlockNode::quest_defindex_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCQuestMapUnlockNode, node_defindex_)>(
          reinterpret_cast<char*>(&node_defindex_),
          reinterpret_cast<char*>(&other->node_defindex_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCQuestMapUnlockNode::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[177]);
}

// ===================================================================

class CMsgGCNewMatchForLobbyRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCNewMatchForLobbyRequest>()._has_bits_);
  static void set_has_current_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_next_map_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_lobby_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCNewMatchForLobbyRequest::CMsgGCNewMatchForLobbyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCNewMatchForLobbyRequest)
}
CMsgGCNewMatchForLobbyRequest::CMsgGCNewMatchForLobbyRequest(const CMsgGCNewMatchForLobbyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&current_match_id_, &from.current_match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&next_map_id_) -
    reinterpret_cast<char*>(&current_match_id_)) + sizeof(next_map_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCNewMatchForLobbyRequest)
}

void CMsgGCNewMatchForLobbyRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&current_match_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&next_map_id_) -
    reinterpret_cast<char*>(&current_match_id_)) + sizeof(next_map_id_));
}

CMsgGCNewMatchForLobbyRequest::~CMsgGCNewMatchForLobbyRequest() {
  // @@protoc_insertion_point(destructor:CMsgGCNewMatchForLobbyRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCNewMatchForLobbyRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCNewMatchForLobbyRequest::ArenaDtor(void* object) {
  CMsgGCNewMatchForLobbyRequest* _this = reinterpret_cast< CMsgGCNewMatchForLobbyRequest* >(object);
  (void)_this;
}
void CMsgGCNewMatchForLobbyRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCNewMatchForLobbyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCNewMatchForLobbyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCNewMatchForLobbyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&current_match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&next_map_id_) -
        reinterpret_cast<char*>(&current_match_id_)) + sizeof(next_map_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCNewMatchForLobbyRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 current_match_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_current_match_id(&has_bits);
          current_match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 next_map_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_next_map_id(&has_bits);
          next_map_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 lobby_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_lobby_id(&has_bits);
          lobby_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCNewMatchForLobbyRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCNewMatchForLobbyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 current_match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_current_match_id(), target);
  }

  // optional uint32 next_map_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_next_map_id(), target);
  }

  // optional uint64 lobby_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_lobby_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCNewMatchForLobbyRequest)
  return target;
}

size_t CMsgGCNewMatchForLobbyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCNewMatchForLobbyRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 current_match_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_current_match_id());
    }

    // optional uint64 lobby_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_lobby_id());
    }

    // optional uint32 next_map_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_next_map_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCNewMatchForLobbyRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCNewMatchForLobbyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCNewMatchForLobbyRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCNewMatchForLobbyRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCNewMatchForLobbyRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCNewMatchForLobbyRequest)
    MergeFrom(*source);
  }
}

void CMsgGCNewMatchForLobbyRequest::MergeFrom(const CMsgGCNewMatchForLobbyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCNewMatchForLobbyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      current_match_id_ = from.current_match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      lobby_id_ = from.lobby_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      next_map_id_ = from.next_map_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCNewMatchForLobbyRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCNewMatchForLobbyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCNewMatchForLobbyRequest::CopyFrom(const CMsgGCNewMatchForLobbyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCNewMatchForLobbyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCNewMatchForLobbyRequest::IsInitialized() const {
  return true;
}

void CMsgGCNewMatchForLobbyRequest::InternalSwap(CMsgGCNewMatchForLobbyRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCNewMatchForLobbyRequest, next_map_id_)
      + sizeof(CMsgGCNewMatchForLobbyRequest::next_map_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCNewMatchForLobbyRequest, current_match_id_)>(
          reinterpret_cast<char*>(&current_match_id_),
          reinterpret_cast<char*>(&other->current_match_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCNewMatchForLobbyRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[178]);
}

// ===================================================================

class CMsgGCNewMatchForLobbyResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCNewMatchForLobbyResponse>()._has_bits_);
  static void set_has_success(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCNewMatchForLobbyResponse::CMsgGCNewMatchForLobbyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCNewMatchForLobbyResponse)
}
CMsgGCNewMatchForLobbyResponse::CMsgGCNewMatchForLobbyResponse(const CMsgGCNewMatchForLobbyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCNewMatchForLobbyResponse)
}

void CMsgGCNewMatchForLobbyResponse::SharedCtor() {
success_ = false;
}

CMsgGCNewMatchForLobbyResponse::~CMsgGCNewMatchForLobbyResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCNewMatchForLobbyResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCNewMatchForLobbyResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCNewMatchForLobbyResponse::ArenaDtor(void* object) {
  CMsgGCNewMatchForLobbyResponse* _this = reinterpret_cast< CMsgGCNewMatchForLobbyResponse* >(object);
  (void)_this;
}
void CMsgGCNewMatchForLobbyResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCNewMatchForLobbyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCNewMatchForLobbyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCNewMatchForLobbyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  success_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCNewMatchForLobbyResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_success(&has_bits);
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCNewMatchForLobbyResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCNewMatchForLobbyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool success = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCNewMatchForLobbyResponse)
  return target;
}

size_t CMsgGCNewMatchForLobbyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCNewMatchForLobbyResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool success = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCNewMatchForLobbyResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCNewMatchForLobbyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCNewMatchForLobbyResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCNewMatchForLobbyResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCNewMatchForLobbyResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCNewMatchForLobbyResponse)
    MergeFrom(*source);
  }
}

void CMsgGCNewMatchForLobbyResponse::MergeFrom(const CMsgGCNewMatchForLobbyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCNewMatchForLobbyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_success()) {
    _internal_set_success(from._internal_success());
  }
}

void CMsgGCNewMatchForLobbyResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCNewMatchForLobbyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCNewMatchForLobbyResponse::CopyFrom(const CMsgGCNewMatchForLobbyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCNewMatchForLobbyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCNewMatchForLobbyResponse::IsInitialized() const {
  return true;
}

void CMsgGCNewMatchForLobbyResponse::InternalSwap(CMsgGCNewMatchForLobbyResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCNewMatchForLobbyResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[179]);
}

// ===================================================================

class CMsgGCChangeMatchPlayerTeamsRequest_Member::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCChangeMatchPlayerTeamsRequest_Member>()._has_bits_);
  static void set_has_member_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_new_team(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCChangeMatchPlayerTeamsRequest_Member::CMsgGCChangeMatchPlayerTeamsRequest_Member(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCChangeMatchPlayerTeamsRequest.Member)
}
CMsgGCChangeMatchPlayerTeamsRequest_Member::CMsgGCChangeMatchPlayerTeamsRequest_Member(const CMsgGCChangeMatchPlayerTeamsRequest_Member& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&member_id_, &from.member_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&new_team_) -
    reinterpret_cast<char*>(&member_id_)) + sizeof(new_team_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCChangeMatchPlayerTeamsRequest.Member)
}

void CMsgGCChangeMatchPlayerTeamsRequest_Member::SharedCtor() {
member_id_ = uint64_t{0u};
new_team_ = 5;
}

CMsgGCChangeMatchPlayerTeamsRequest_Member::~CMsgGCChangeMatchPlayerTeamsRequest_Member() {
  // @@protoc_insertion_point(destructor:CMsgGCChangeMatchPlayerTeamsRequest.Member)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCChangeMatchPlayerTeamsRequest_Member::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCChangeMatchPlayerTeamsRequest_Member::ArenaDtor(void* object) {
  CMsgGCChangeMatchPlayerTeamsRequest_Member* _this = reinterpret_cast< CMsgGCChangeMatchPlayerTeamsRequest_Member* >(object);
  (void)_this;
}
void CMsgGCChangeMatchPlayerTeamsRequest_Member::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCChangeMatchPlayerTeamsRequest_Member::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCChangeMatchPlayerTeamsRequest_Member::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCChangeMatchPlayerTeamsRequest.Member)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    member_id_ = uint64_t{0u};
    new_team_ = 5;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCChangeMatchPlayerTeamsRequest_Member::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 member_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_member_id(&has_bits);
          member_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TF_GC_TEAM new_team = 2 [default = TF_GC_TEAM_NOTEAM];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TF_GC_TEAM_IsValid(val))) {
            _internal_set_new_team(static_cast<::TF_GC_TEAM>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCChangeMatchPlayerTeamsRequest_Member::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCChangeMatchPlayerTeamsRequest.Member)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 member_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_member_id(), target);
  }

  // optional .TF_GC_TEAM new_team = 2 [default = TF_GC_TEAM_NOTEAM];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_new_team(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCChangeMatchPlayerTeamsRequest.Member)
  return target;
}

size_t CMsgGCChangeMatchPlayerTeamsRequest_Member::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCChangeMatchPlayerTeamsRequest.Member)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 member_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_member_id());
    }

    // optional .TF_GC_TEAM new_team = 2 [default = TF_GC_TEAM_NOTEAM];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_new_team());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCChangeMatchPlayerTeamsRequest_Member::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCChangeMatchPlayerTeamsRequest.Member)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCChangeMatchPlayerTeamsRequest_Member* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCChangeMatchPlayerTeamsRequest_Member>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCChangeMatchPlayerTeamsRequest.Member)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCChangeMatchPlayerTeamsRequest.Member)
    MergeFrom(*source);
  }
}

void CMsgGCChangeMatchPlayerTeamsRequest_Member::MergeFrom(const CMsgGCChangeMatchPlayerTeamsRequest_Member& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCChangeMatchPlayerTeamsRequest.Member)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      member_id_ = from.member_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      new_team_ = from.new_team_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCChangeMatchPlayerTeamsRequest_Member::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCChangeMatchPlayerTeamsRequest.Member)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCChangeMatchPlayerTeamsRequest_Member::CopyFrom(const CMsgGCChangeMatchPlayerTeamsRequest_Member& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCChangeMatchPlayerTeamsRequest.Member)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCChangeMatchPlayerTeamsRequest_Member::IsInitialized() const {
  return true;
}

void CMsgGCChangeMatchPlayerTeamsRequest_Member::InternalSwap(CMsgGCChangeMatchPlayerTeamsRequest_Member* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(member_id_, other->member_id_);
  swap(new_team_, other->new_team_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCChangeMatchPlayerTeamsRequest_Member::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[180]);
}

// ===================================================================

class CMsgGCChangeMatchPlayerTeamsRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCChangeMatchPlayerTeamsRequest>()._has_bits_);
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_lobby_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCChangeMatchPlayerTeamsRequest::CMsgGCChangeMatchPlayerTeamsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  member_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCChangeMatchPlayerTeamsRequest)
}
CMsgGCChangeMatchPlayerTeamsRequest::CMsgGCChangeMatchPlayerTeamsRequest(const CMsgGCChangeMatchPlayerTeamsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      member_(from.member_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&match_id_, &from.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&lobby_id_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(lobby_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCChangeMatchPlayerTeamsRequest)
}

void CMsgGCChangeMatchPlayerTeamsRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&match_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&lobby_id_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(lobby_id_));
}

CMsgGCChangeMatchPlayerTeamsRequest::~CMsgGCChangeMatchPlayerTeamsRequest() {
  // @@protoc_insertion_point(destructor:CMsgGCChangeMatchPlayerTeamsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCChangeMatchPlayerTeamsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCChangeMatchPlayerTeamsRequest::ArenaDtor(void* object) {
  CMsgGCChangeMatchPlayerTeamsRequest* _this = reinterpret_cast< CMsgGCChangeMatchPlayerTeamsRequest* >(object);
  (void)_this;
}
void CMsgGCChangeMatchPlayerTeamsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCChangeMatchPlayerTeamsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCChangeMatchPlayerTeamsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCChangeMatchPlayerTeamsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  member_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lobby_id_) -
        reinterpret_cast<char*>(&match_id_)) + sizeof(lobby_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCChangeMatchPlayerTeamsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 match_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_match_id(&has_bits);
          match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 lobby_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_lobby_id(&has_bits);
          lobby_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgGCChangeMatchPlayerTeamsRequest.Member member = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_member(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCChangeMatchPlayerTeamsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCChangeMatchPlayerTeamsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_match_id(), target);
  }

  // optional uint64 lobby_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_lobby_id(), target);
  }

  // repeated .CMsgGCChangeMatchPlayerTeamsRequest.Member member = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_member_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_member(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCChangeMatchPlayerTeamsRequest)
  return target;
}

size_t CMsgGCChangeMatchPlayerTeamsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCChangeMatchPlayerTeamsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgGCChangeMatchPlayerTeamsRequest.Member member = 3;
  total_size += 1UL * this->_internal_member_size();
  for (const auto& msg : this->member_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 match_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_match_id());
    }

    // optional uint64 lobby_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_lobby_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCChangeMatchPlayerTeamsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCChangeMatchPlayerTeamsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCChangeMatchPlayerTeamsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCChangeMatchPlayerTeamsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCChangeMatchPlayerTeamsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCChangeMatchPlayerTeamsRequest)
    MergeFrom(*source);
  }
}

void CMsgGCChangeMatchPlayerTeamsRequest::MergeFrom(const CMsgGCChangeMatchPlayerTeamsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCChangeMatchPlayerTeamsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  member_.MergeFrom(from.member_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      lobby_id_ = from.lobby_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCChangeMatchPlayerTeamsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCChangeMatchPlayerTeamsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCChangeMatchPlayerTeamsRequest::CopyFrom(const CMsgGCChangeMatchPlayerTeamsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCChangeMatchPlayerTeamsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCChangeMatchPlayerTeamsRequest::IsInitialized() const {
  return true;
}

void CMsgGCChangeMatchPlayerTeamsRequest::InternalSwap(CMsgGCChangeMatchPlayerTeamsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  member_.InternalSwap(&other->member_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCChangeMatchPlayerTeamsRequest, lobby_id_)
      + sizeof(CMsgGCChangeMatchPlayerTeamsRequest::lobby_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCChangeMatchPlayerTeamsRequest, match_id_)>(
          reinterpret_cast<char*>(&match_id_),
          reinterpret_cast<char*>(&other->match_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCChangeMatchPlayerTeamsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[181]);
}

// ===================================================================

class CMsgGCChangeMatchPlayerTeamsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCChangeMatchPlayerTeamsResponse>()._has_bits_);
  static void set_has_success(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCChangeMatchPlayerTeamsResponse::CMsgGCChangeMatchPlayerTeamsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCChangeMatchPlayerTeamsResponse)
}
CMsgGCChangeMatchPlayerTeamsResponse::CMsgGCChangeMatchPlayerTeamsResponse(const CMsgGCChangeMatchPlayerTeamsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCChangeMatchPlayerTeamsResponse)
}

void CMsgGCChangeMatchPlayerTeamsResponse::SharedCtor() {
success_ = false;
}

CMsgGCChangeMatchPlayerTeamsResponse::~CMsgGCChangeMatchPlayerTeamsResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCChangeMatchPlayerTeamsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCChangeMatchPlayerTeamsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCChangeMatchPlayerTeamsResponse::ArenaDtor(void* object) {
  CMsgGCChangeMatchPlayerTeamsResponse* _this = reinterpret_cast< CMsgGCChangeMatchPlayerTeamsResponse* >(object);
  (void)_this;
}
void CMsgGCChangeMatchPlayerTeamsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCChangeMatchPlayerTeamsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCChangeMatchPlayerTeamsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCChangeMatchPlayerTeamsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  success_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCChangeMatchPlayerTeamsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_success(&has_bits);
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCChangeMatchPlayerTeamsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCChangeMatchPlayerTeamsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool success = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCChangeMatchPlayerTeamsResponse)
  return target;
}

size_t CMsgGCChangeMatchPlayerTeamsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCChangeMatchPlayerTeamsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool success = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCChangeMatchPlayerTeamsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCChangeMatchPlayerTeamsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCChangeMatchPlayerTeamsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCChangeMatchPlayerTeamsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCChangeMatchPlayerTeamsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCChangeMatchPlayerTeamsResponse)
    MergeFrom(*source);
  }
}

void CMsgGCChangeMatchPlayerTeamsResponse::MergeFrom(const CMsgGCChangeMatchPlayerTeamsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCChangeMatchPlayerTeamsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_success()) {
    _internal_set_success(from._internal_success());
  }
}

void CMsgGCChangeMatchPlayerTeamsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCChangeMatchPlayerTeamsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCChangeMatchPlayerTeamsResponse::CopyFrom(const CMsgGCChangeMatchPlayerTeamsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCChangeMatchPlayerTeamsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCChangeMatchPlayerTeamsResponse::IsInitialized() const {
  return true;
}

void CMsgGCChangeMatchPlayerTeamsResponse::InternalSwap(CMsgGCChangeMatchPlayerTeamsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCChangeMatchPlayerTeamsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[182]);
}

// ===================================================================

class CMsgGCQuestComplete_Debug::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCQuestComplete_Debug>()._has_bits_);
  static void set_has_quest_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_points_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCQuestComplete_Debug::CMsgGCQuestComplete_Debug(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCQuestComplete_Debug)
}
CMsgGCQuestComplete_Debug::CMsgGCQuestComplete_Debug(const CMsgGCQuestComplete_Debug& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&quest_id_, &from.quest_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&points_type_) -
    reinterpret_cast<char*>(&quest_id_)) + sizeof(points_type_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCQuestComplete_Debug)
}

void CMsgGCQuestComplete_Debug::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&quest_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&points_type_) -
    reinterpret_cast<char*>(&quest_id_)) + sizeof(points_type_));
}

CMsgGCQuestComplete_Debug::~CMsgGCQuestComplete_Debug() {
  // @@protoc_insertion_point(destructor:CMsgGCQuestComplete_Debug)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCQuestComplete_Debug::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCQuestComplete_Debug::ArenaDtor(void* object) {
  CMsgGCQuestComplete_Debug* _this = reinterpret_cast< CMsgGCQuestComplete_Debug* >(object);
  (void)_this;
}
void CMsgGCQuestComplete_Debug::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCQuestComplete_Debug::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCQuestComplete_Debug::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCQuestComplete_Debug)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&quest_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&points_type_) -
        reinterpret_cast<char*>(&quest_id_)) + sizeof(points_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCQuestComplete_Debug::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 quest_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_quest_id(&has_bits);
          quest_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 points_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_points_type(&has_bits);
          points_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCQuestComplete_Debug::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCQuestComplete_Debug)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 quest_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_quest_id(), target);
  }

  // optional uint32 points_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_points_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCQuestComplete_Debug)
  return target;
}

size_t CMsgGCQuestComplete_Debug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCQuestComplete_Debug)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 quest_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_quest_id());
    }

    // optional uint32 points_type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_points_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCQuestComplete_Debug::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCQuestComplete_Debug)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCQuestComplete_Debug* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCQuestComplete_Debug>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCQuestComplete_Debug)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCQuestComplete_Debug)
    MergeFrom(*source);
  }
}

void CMsgGCQuestComplete_Debug::MergeFrom(const CMsgGCQuestComplete_Debug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCQuestComplete_Debug)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      quest_id_ = from.quest_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      points_type_ = from.points_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCQuestComplete_Debug::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCQuestComplete_Debug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCQuestComplete_Debug::CopyFrom(const CMsgGCQuestComplete_Debug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCQuestComplete_Debug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCQuestComplete_Debug::IsInitialized() const {
  return true;
}

void CMsgGCQuestComplete_Debug::InternalSwap(CMsgGCQuestComplete_Debug* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCQuestComplete_Debug, points_type_)
      + sizeof(CMsgGCQuestComplete_Debug::points_type_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCQuestComplete_Debug, quest_id_)>(
          reinterpret_cast<char*>(&quest_id_),
          reinterpret_cast<char*>(&other->quest_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCQuestComplete_Debug::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[183]);
}

// ===================================================================

class CMsgGCQuestMap_Debug::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCQuestMap_Debug>()._has_bits_);
  static void set_has_reset_operation(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_give_credit(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CMsgGCQuestMapUnlockNode& unlock_node(const CMsgGCQuestMap_Debug* msg);
  static void set_has_unlock_node(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgGCQuestMapUnlockNode&
CMsgGCQuestMap_Debug::_Internal::unlock_node(const CMsgGCQuestMap_Debug* msg) {
  return *msg->unlock_node_;
}
CMsgGCQuestMap_Debug::CMsgGCQuestMap_Debug(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCQuestMap_Debug)
}
CMsgGCQuestMap_Debug::CMsgGCQuestMap_Debug(const CMsgGCQuestMap_Debug& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_unlock_node()) {
    unlock_node_ = new ::CMsgGCQuestMapUnlockNode(*from.unlock_node_);
  } else {
    unlock_node_ = nullptr;
  }
  ::memcpy(&reset_operation_, &from.reset_operation_,
    static_cast<size_t>(reinterpret_cast<char*>(&give_credit_) -
    reinterpret_cast<char*>(&reset_operation_)) + sizeof(give_credit_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCQuestMap_Debug)
}

void CMsgGCQuestMap_Debug::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&unlock_node_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&give_credit_) -
    reinterpret_cast<char*>(&unlock_node_)) + sizeof(give_credit_));
}

CMsgGCQuestMap_Debug::~CMsgGCQuestMap_Debug() {
  // @@protoc_insertion_point(destructor:CMsgGCQuestMap_Debug)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCQuestMap_Debug::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete unlock_node_;
}

void CMsgGCQuestMap_Debug::ArenaDtor(void* object) {
  CMsgGCQuestMap_Debug* _this = reinterpret_cast< CMsgGCQuestMap_Debug* >(object);
  (void)_this;
}
void CMsgGCQuestMap_Debug::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCQuestMap_Debug::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCQuestMap_Debug::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCQuestMap_Debug)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(unlock_node_ != nullptr);
    unlock_node_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&reset_operation_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&give_credit_) -
        reinterpret_cast<char*>(&reset_operation_)) + sizeof(give_credit_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCQuestMap_Debug::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 reset_operation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_reset_operation(&has_bits);
          reset_operation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 give_credit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_give_credit(&has_bits);
          give_credit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgGCQuestMapUnlockNode unlock_node = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_unlock_node(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCQuestMap_Debug::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCQuestMap_Debug)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 reset_operation = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_reset_operation(), target);
  }

  // optional uint32 give_credit = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_give_credit(), target);
  }

  // optional .CMsgGCQuestMapUnlockNode unlock_node = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::unlock_node(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCQuestMap_Debug)
  return target;
}

size_t CMsgGCQuestMap_Debug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCQuestMap_Debug)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .CMsgGCQuestMapUnlockNode unlock_node = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *unlock_node_);
    }

    // optional uint32 reset_operation = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_reset_operation());
    }

    // optional uint32 give_credit = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_give_credit());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCQuestMap_Debug::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCQuestMap_Debug)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCQuestMap_Debug* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCQuestMap_Debug>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCQuestMap_Debug)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCQuestMap_Debug)
    MergeFrom(*source);
  }
}

void CMsgGCQuestMap_Debug::MergeFrom(const CMsgGCQuestMap_Debug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCQuestMap_Debug)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_unlock_node()->::CMsgGCQuestMapUnlockNode::MergeFrom(from._internal_unlock_node());
    }
    if (cached_has_bits & 0x00000002u) {
      reset_operation_ = from.reset_operation_;
    }
    if (cached_has_bits & 0x00000004u) {
      give_credit_ = from.give_credit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCQuestMap_Debug::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCQuestMap_Debug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCQuestMap_Debug::CopyFrom(const CMsgGCQuestMap_Debug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCQuestMap_Debug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCQuestMap_Debug::IsInitialized() const {
  return true;
}

void CMsgGCQuestMap_Debug::InternalSwap(CMsgGCQuestMap_Debug* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCQuestMap_Debug, give_credit_)
      + sizeof(CMsgGCQuestMap_Debug::give_credit_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCQuestMap_Debug, unlock_node_)>(
          reinterpret_cast<char*>(&unlock_node_),
          reinterpret_cast<char*>(&other->unlock_node_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCQuestMap_Debug::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[184]);
}

// ===================================================================

class CMsgGCQuestMapPurchaseReward::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCQuestMapPurchaseReward>()._has_bits_);
  static void set_has_store_item_defindex(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCQuestMapPurchaseReward::CMsgGCQuestMapPurchaseReward(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCQuestMapPurchaseReward)
}
CMsgGCQuestMapPurchaseReward::CMsgGCQuestMapPurchaseReward(const CMsgGCQuestMapPurchaseReward& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  store_item_defindex_ = from.store_item_defindex_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCQuestMapPurchaseReward)
}

void CMsgGCQuestMapPurchaseReward::SharedCtor() {
store_item_defindex_ = 0u;
}

CMsgGCQuestMapPurchaseReward::~CMsgGCQuestMapPurchaseReward() {
  // @@protoc_insertion_point(destructor:CMsgGCQuestMapPurchaseReward)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCQuestMapPurchaseReward::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCQuestMapPurchaseReward::ArenaDtor(void* object) {
  CMsgGCQuestMapPurchaseReward* _this = reinterpret_cast< CMsgGCQuestMapPurchaseReward* >(object);
  (void)_this;
}
void CMsgGCQuestMapPurchaseReward::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCQuestMapPurchaseReward::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCQuestMapPurchaseReward::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCQuestMapPurchaseReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  store_item_defindex_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCQuestMapPurchaseReward::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 store_item_defindex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_store_item_defindex(&has_bits);
          store_item_defindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCQuestMapPurchaseReward::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCQuestMapPurchaseReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 store_item_defindex = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_store_item_defindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCQuestMapPurchaseReward)
  return target;
}

size_t CMsgGCQuestMapPurchaseReward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCQuestMapPurchaseReward)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 store_item_defindex = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_store_item_defindex());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCQuestMapPurchaseReward::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCQuestMapPurchaseReward)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCQuestMapPurchaseReward* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCQuestMapPurchaseReward>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCQuestMapPurchaseReward)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCQuestMapPurchaseReward)
    MergeFrom(*source);
  }
}

void CMsgGCQuestMapPurchaseReward::MergeFrom(const CMsgGCQuestMapPurchaseReward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCQuestMapPurchaseReward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_store_item_defindex()) {
    _internal_set_store_item_defindex(from._internal_store_item_defindex());
  }
}

void CMsgGCQuestMapPurchaseReward::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCQuestMapPurchaseReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCQuestMapPurchaseReward::CopyFrom(const CMsgGCQuestMapPurchaseReward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCQuestMapPurchaseReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCQuestMapPurchaseReward::IsInitialized() const {
  return true;
}

void CMsgGCQuestMapPurchaseReward::InternalSwap(CMsgGCQuestMapPurchaseReward* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(store_item_defindex_, other->store_item_defindex_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCQuestMapPurchaseReward::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[185]);
}

// ===================================================================

class CMsgGCQuestResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCQuestResponse>()._has_bits_);
  static void set_has_success(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCQuestResponse::CMsgGCQuestResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCQuestResponse)
}
CMsgGCQuestResponse::CMsgGCQuestResponse(const CMsgGCQuestResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCQuestResponse)
}

void CMsgGCQuestResponse::SharedCtor() {
success_ = false;
}

CMsgGCQuestResponse::~CMsgGCQuestResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCQuestResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCQuestResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCQuestResponse::ArenaDtor(void* object) {
  CMsgGCQuestResponse* _this = reinterpret_cast< CMsgGCQuestResponse* >(object);
  (void)_this;
}
void CMsgGCQuestResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCQuestResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCQuestResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCQuestResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  success_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCQuestResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool success = 1 [default = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_success(&has_bits);
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCQuestResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCQuestResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool success = 1 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCQuestResponse)
  return target;
}

size_t CMsgGCQuestResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCQuestResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool success = 1 [default = false];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCQuestResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCQuestResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCQuestResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCQuestResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCQuestResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCQuestResponse)
    MergeFrom(*source);
  }
}

void CMsgGCQuestResponse::MergeFrom(const CMsgGCQuestResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCQuestResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_success()) {
    _internal_set_success(from._internal_success());
  }
}

void CMsgGCQuestResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCQuestResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCQuestResponse::CopyFrom(const CMsgGCQuestResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCQuestResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCQuestResponse::IsInitialized() const {
  return true;
}

void CMsgGCQuestResponse::InternalSwap(CMsgGCQuestResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCQuestResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[186]);
}

// ===================================================================

class CMsgGCSetDisablePartyQuestProgress::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCSetDisablePartyQuestProgress>()._has_bits_);
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCSetDisablePartyQuestProgress::CMsgGCSetDisablePartyQuestProgress(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCSetDisablePartyQuestProgress)
}
CMsgGCSetDisablePartyQuestProgress::CMsgGCSetDisablePartyQuestProgress(const CMsgGCSetDisablePartyQuestProgress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCSetDisablePartyQuestProgress)
}

void CMsgGCSetDisablePartyQuestProgress::SharedCtor() {
state_ = false;
}

CMsgGCSetDisablePartyQuestProgress::~CMsgGCSetDisablePartyQuestProgress() {
  // @@protoc_insertion_point(destructor:CMsgGCSetDisablePartyQuestProgress)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCSetDisablePartyQuestProgress::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCSetDisablePartyQuestProgress::ArenaDtor(void* object) {
  CMsgGCSetDisablePartyQuestProgress* _this = reinterpret_cast< CMsgGCSetDisablePartyQuestProgress* >(object);
  (void)_this;
}
void CMsgGCSetDisablePartyQuestProgress::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCSetDisablePartyQuestProgress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCSetDisablePartyQuestProgress::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCSetDisablePartyQuestProgress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  state_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCSetDisablePartyQuestProgress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_state(&has_bits);
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCSetDisablePartyQuestProgress::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCSetDisablePartyQuestProgress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool state = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCSetDisablePartyQuestProgress)
  return target;
}

size_t CMsgGCSetDisablePartyQuestProgress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCSetDisablePartyQuestProgress)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool state = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCSetDisablePartyQuestProgress::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCSetDisablePartyQuestProgress)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCSetDisablePartyQuestProgress* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCSetDisablePartyQuestProgress>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCSetDisablePartyQuestProgress)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCSetDisablePartyQuestProgress)
    MergeFrom(*source);
  }
}

void CMsgGCSetDisablePartyQuestProgress::MergeFrom(const CMsgGCSetDisablePartyQuestProgress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCSetDisablePartyQuestProgress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_state()) {
    _internal_set_state(from._internal_state());
  }
}

void CMsgGCSetDisablePartyQuestProgress::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCSetDisablePartyQuestProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCSetDisablePartyQuestProgress::CopyFrom(const CMsgGCSetDisablePartyQuestProgress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCSetDisablePartyQuestProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCSetDisablePartyQuestProgress::IsInitialized() const {
  return true;
}

void CMsgGCSetDisablePartyQuestProgress::InternalSwap(CMsgGCSetDisablePartyQuestProgress* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCSetDisablePartyQuestProgress::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[187]);
}

// ===================================================================

class CMsgQuestProgressReport::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgQuestProgressReport>()._has_bits_);
  static void set_has_quest_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_star_0_earned(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_star_1_earned(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_star_2_earned(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_reward_credits_earned(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_contract_completed(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgQuestProgressReport::CMsgQuestProgressReport(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  items_earned_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgQuestProgressReport)
}
CMsgQuestProgressReport::CMsgQuestProgressReport(const CMsgQuestProgressReport& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      items_earned_(from.items_earned_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&quest_id_, &from.quest_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&reward_credits_earned_) -
    reinterpret_cast<char*>(&quest_id_)) + sizeof(reward_credits_earned_));
  // @@protoc_insertion_point(copy_constructor:CMsgQuestProgressReport)
}

void CMsgQuestProgressReport::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&quest_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&reward_credits_earned_) -
    reinterpret_cast<char*>(&quest_id_)) + sizeof(reward_credits_earned_));
}

CMsgQuestProgressReport::~CMsgQuestProgressReport() {
  // @@protoc_insertion_point(destructor:CMsgQuestProgressReport)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgQuestProgressReport::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgQuestProgressReport::ArenaDtor(void* object) {
  CMsgQuestProgressReport* _this = reinterpret_cast< CMsgQuestProgressReport* >(object);
  (void)_this;
}
void CMsgQuestProgressReport::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgQuestProgressReport::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgQuestProgressReport::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgQuestProgressReport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_earned_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&quest_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&reward_credits_earned_) -
        reinterpret_cast<char*>(&quest_id_)) + sizeof(reward_credits_earned_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgQuestProgressReport::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 quest_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_quest_id(&has_bits);
          quest_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool star_0_earned = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_star_0_earned(&has_bits);
          star_0_earned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool star_1_earned = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_star_1_earned(&has_bits);
          star_1_earned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool star_2_earned = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_star_2_earned(&has_bits);
          star_2_earned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 items_earned = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_items_earned(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_items_earned(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 reward_credits_earned = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_reward_credits_earned(&has_bits);
          reward_credits_earned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool contract_completed = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_contract_completed(&has_bits);
          contract_completed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgQuestProgressReport::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgQuestProgressReport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 quest_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_quest_id(), target);
  }

  // optional bool star_0_earned = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_star_0_earned(), target);
  }

  // optional bool star_1_earned = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_star_1_earned(), target);
  }

  // optional bool star_2_earned = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_star_2_earned(), target);
  }

  // repeated uint64 items_earned = 5;
  for (int i = 0, n = this->_internal_items_earned_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_items_earned(i), target);
  }

  // optional uint32 reward_credits_earned = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_reward_credits_earned(), target);
  }

  // optional bool contract_completed = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_contract_completed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgQuestProgressReport)
  return target;
}

size_t CMsgQuestProgressReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgQuestProgressReport)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 items_earned = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->items_earned_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_items_earned_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint64 quest_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_quest_id());
    }

    // optional bool star_0_earned = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool star_1_earned = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool star_2_earned = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool contract_completed = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional uint32 reward_credits_earned = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_reward_credits_earned());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgQuestProgressReport::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgQuestProgressReport)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgQuestProgressReport* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgQuestProgressReport>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgQuestProgressReport)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgQuestProgressReport)
    MergeFrom(*source);
  }
}

void CMsgQuestProgressReport::MergeFrom(const CMsgQuestProgressReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgQuestProgressReport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_earned_.MergeFrom(from.items_earned_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      quest_id_ = from.quest_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      star_0_earned_ = from.star_0_earned_;
    }
    if (cached_has_bits & 0x00000004u) {
      star_1_earned_ = from.star_1_earned_;
    }
    if (cached_has_bits & 0x00000008u) {
      star_2_earned_ = from.star_2_earned_;
    }
    if (cached_has_bits & 0x00000010u) {
      contract_completed_ = from.contract_completed_;
    }
    if (cached_has_bits & 0x00000020u) {
      reward_credits_earned_ = from.reward_credits_earned_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgQuestProgressReport::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgQuestProgressReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgQuestProgressReport::CopyFrom(const CMsgQuestProgressReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgQuestProgressReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgQuestProgressReport::IsInitialized() const {
  return true;
}

void CMsgQuestProgressReport::InternalSwap(CMsgQuestProgressReport* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  items_earned_.InternalSwap(&other->items_earned_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgQuestProgressReport, reward_credits_earned_)
      + sizeof(CMsgQuestProgressReport::reward_credits_earned_)
      - PROTOBUF_FIELD_OFFSET(CMsgQuestProgressReport, quest_id_)>(
          reinterpret_cast<char*>(&quest_id_),
          reinterpret_cast<char*>(&other->quest_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgQuestProgressReport::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[188]);
}

// ===================================================================

class CMsgConsumePaintkit::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgConsumePaintkit>()._has_bits_);
  static void set_has_source_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_target_defindex(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgConsumePaintkit::CMsgConsumePaintkit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgConsumePaintkit)
}
CMsgConsumePaintkit::CMsgConsumePaintkit(const CMsgConsumePaintkit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&source_id_, &from.source_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&target_defindex_) -
    reinterpret_cast<char*>(&source_id_)) + sizeof(target_defindex_));
  // @@protoc_insertion_point(copy_constructor:CMsgConsumePaintkit)
}

void CMsgConsumePaintkit::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&source_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&target_defindex_) -
    reinterpret_cast<char*>(&source_id_)) + sizeof(target_defindex_));
}

CMsgConsumePaintkit::~CMsgConsumePaintkit() {
  // @@protoc_insertion_point(destructor:CMsgConsumePaintkit)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgConsumePaintkit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgConsumePaintkit::ArenaDtor(void* object) {
  CMsgConsumePaintkit* _this = reinterpret_cast< CMsgConsumePaintkit* >(object);
  (void)_this;
}
void CMsgConsumePaintkit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgConsumePaintkit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgConsumePaintkit::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgConsumePaintkit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&source_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&target_defindex_) -
        reinterpret_cast<char*>(&source_id_)) + sizeof(target_defindex_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgConsumePaintkit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 source_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_source_id(&has_bits);
          source_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint32 target_defindex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_target_defindex(&has_bits);
          target_defindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgConsumePaintkit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgConsumePaintkit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 source_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_source_id(), target);
  }

  // optional uint32 target_defindex = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_target_defindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgConsumePaintkit)
  return target;
}

size_t CMsgConsumePaintkit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgConsumePaintkit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 source_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 target_defindex = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_target_defindex());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgConsumePaintkit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgConsumePaintkit)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgConsumePaintkit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgConsumePaintkit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgConsumePaintkit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgConsumePaintkit)
    MergeFrom(*source);
  }
}

void CMsgConsumePaintkit::MergeFrom(const CMsgConsumePaintkit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgConsumePaintkit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      source_id_ = from.source_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      target_defindex_ = from.target_defindex_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgConsumePaintkit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgConsumePaintkit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgConsumePaintkit::CopyFrom(const CMsgConsumePaintkit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgConsumePaintkit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgConsumePaintkit::IsInitialized() const {
  return true;
}

void CMsgConsumePaintkit::InternalSwap(CMsgConsumePaintkit* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgConsumePaintkit, target_defindex_)
      + sizeof(CMsgConsumePaintkit::target_defindex_)
      - PROTOBUF_FIELD_OFFSET(CMsgConsumePaintkit, source_id_)>(
          reinterpret_cast<char*>(&source_id_),
          reinterpret_cast<char*>(&other->source_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgConsumePaintkit::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[189]);
}

// ===================================================================

class CMsgPainkitDevGrant::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgPainkitDevGrant>()._has_bits_);
  static void set_has_paintkit_defindex(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_wear(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_item_defindex(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgPainkitDevGrant::CMsgPainkitDevGrant(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgPainkitDevGrant)
}
CMsgPainkitDevGrant::CMsgPainkitDevGrant(const CMsgPainkitDevGrant& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&paintkit_defindex_, &from.paintkit_defindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&item_defindex_) -
    reinterpret_cast<char*>(&paintkit_defindex_)) + sizeof(item_defindex_));
  // @@protoc_insertion_point(copy_constructor:CMsgPainkitDevGrant)
}

void CMsgPainkitDevGrant::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&paintkit_defindex_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&item_defindex_) -
    reinterpret_cast<char*>(&paintkit_defindex_)) + sizeof(item_defindex_));
}

CMsgPainkitDevGrant::~CMsgPainkitDevGrant() {
  // @@protoc_insertion_point(destructor:CMsgPainkitDevGrant)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgPainkitDevGrant::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgPainkitDevGrant::ArenaDtor(void* object) {
  CMsgPainkitDevGrant* _this = reinterpret_cast< CMsgPainkitDevGrant* >(object);
  (void)_this;
}
void CMsgPainkitDevGrant::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgPainkitDevGrant::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgPainkitDevGrant::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPainkitDevGrant)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&paintkit_defindex_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&item_defindex_) -
        reinterpret_cast<char*>(&paintkit_defindex_)) + sizeof(item_defindex_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPainkitDevGrant::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 paintkit_defindex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_paintkit_defindex(&has_bits);
          paintkit_defindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float wear = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_wear(&has_bits);
          wear_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 item_defindex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_item_defindex(&has_bits);
          item_defindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgPainkitDevGrant::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPainkitDevGrant)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 paintkit_defindex = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_paintkit_defindex(), target);
  }

  // optional float wear = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_wear(), target);
  }

  // optional uint32 item_defindex = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_item_defindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPainkitDevGrant)
  return target;
}

size_t CMsgPainkitDevGrant::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPainkitDevGrant)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 paintkit_defindex = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_paintkit_defindex());
    }

    // optional float wear = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional uint32 item_defindex = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_item_defindex());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPainkitDevGrant::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgPainkitDevGrant)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPainkitDevGrant* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgPainkitDevGrant>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgPainkitDevGrant)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgPainkitDevGrant)
    MergeFrom(*source);
  }
}

void CMsgPainkitDevGrant::MergeFrom(const CMsgPainkitDevGrant& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgPainkitDevGrant)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      paintkit_defindex_ = from.paintkit_defindex_;
    }
    if (cached_has_bits & 0x00000002u) {
      wear_ = from.wear_;
    }
    if (cached_has_bits & 0x00000004u) {
      item_defindex_ = from.item_defindex_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgPainkitDevGrant::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgPainkitDevGrant)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPainkitDevGrant::CopyFrom(const CMsgPainkitDevGrant& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPainkitDevGrant)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPainkitDevGrant::IsInitialized() const {
  return true;
}

void CMsgPainkitDevGrant::InternalSwap(CMsgPainkitDevGrant* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgPainkitDevGrant, item_defindex_)
      + sizeof(CMsgPainkitDevGrant::item_defindex_)
      - PROTOBUF_FIELD_OFFSET(CMsgPainkitDevGrant, paintkit_defindex_)>(
          reinterpret_cast<char*>(&paintkit_defindex_),
          reinterpret_cast<char*>(&other->paintkit_defindex_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPainkitDevGrant::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[190]);
}

// ===================================================================

class GCQuestStrangeEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<GCQuestStrangeEvent>()._has_bits_);
  static void set_has_owner_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_scorer_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_quest_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_strange_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_score(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

GCQuestStrangeEvent::GCQuestStrangeEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GCQuestStrangeEvent)
}
GCQuestStrangeEvent::GCQuestStrangeEvent(const GCQuestStrangeEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&owner_account_id_, &from.owner_account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&owner_account_id_)) + sizeof(score_));
  // @@protoc_insertion_point(copy_constructor:GCQuestStrangeEvent)
}

void GCQuestStrangeEvent::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&owner_account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&owner_account_id_)) + sizeof(score_));
}

GCQuestStrangeEvent::~GCQuestStrangeEvent() {
  // @@protoc_insertion_point(destructor:GCQuestStrangeEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GCQuestStrangeEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GCQuestStrangeEvent::ArenaDtor(void* object) {
  GCQuestStrangeEvent* _this = reinterpret_cast< GCQuestStrangeEvent* >(object);
  (void)_this;
}
void GCQuestStrangeEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GCQuestStrangeEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GCQuestStrangeEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:GCQuestStrangeEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&owner_account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&score_) -
        reinterpret_cast<char*>(&owner_account_id_)) + sizeof(score_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCQuestStrangeEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 owner_account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_owner_account_id(&has_bits);
          owner_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 scorer_account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_scorer_account_id(&has_bits);
          scorer_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 quest_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_quest_id(&has_bits);
          quest_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 strange_event_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_strange_event_id(&has_bits);
          strange_event_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 score = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_score(&has_bits);
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GCQuestStrangeEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCQuestStrangeEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 owner_account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_owner_account_id(), target);
  }

  // optional uint32 scorer_account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_scorer_account_id(), target);
  }

  // optional uint64 quest_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_quest_id(), target);
  }

  // optional uint32 strange_event_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_strange_event_id(), target);
  }

  // optional uint32 score = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCQuestStrangeEvent)
  return target;
}

size_t GCQuestStrangeEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GCQuestStrangeEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 owner_account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_owner_account_id());
    }

    // optional uint32 scorer_account_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_scorer_account_id());
    }

    // optional uint64 quest_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_quest_id());
    }

    // optional uint32 strange_event_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_strange_event_id());
    }

    // optional uint32 score = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_score());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GCQuestStrangeEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GCQuestStrangeEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const GCQuestStrangeEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GCQuestStrangeEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GCQuestStrangeEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GCQuestStrangeEvent)
    MergeFrom(*source);
  }
}

void GCQuestStrangeEvent::MergeFrom(const GCQuestStrangeEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GCQuestStrangeEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      owner_account_id_ = from.owner_account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      scorer_account_id_ = from.scorer_account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      quest_id_ = from.quest_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      strange_event_id_ = from.strange_event_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      score_ = from.score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GCQuestStrangeEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GCQuestStrangeEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCQuestStrangeEvent::CopyFrom(const GCQuestStrangeEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GCQuestStrangeEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCQuestStrangeEvent::IsInitialized() const {
  return true;
}

void GCQuestStrangeEvent::InternalSwap(GCQuestStrangeEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCQuestStrangeEvent, score_)
      + sizeof(GCQuestStrangeEvent::score_)
      - PROTOBUF_FIELD_OFFSET(GCQuestStrangeEvent, owner_account_id_)>(
          reinterpret_cast<char*>(&owner_account_id_),
          reinterpret_cast<char*>(&other->owner_account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCQuestStrangeEvent::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tf_5fgcmessages_2eproto_getter, &descriptor_table_tf_5fgcmessages_2eproto_once,
      file_level_metadata_tf_5fgcmessages_2eproto[191]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CMsgTFGoldenWrenchBroadcast* Arena::CreateMaybeMessage< ::CMsgTFGoldenWrenchBroadcast >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgTFGoldenWrenchBroadcast >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgTFSaxxyBroadcast* Arena::CreateMaybeMessage< ::CMsgTFSaxxyBroadcast >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgTFSaxxyBroadcast >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCTFSpecificItemBroadcast* Arena::CreateMaybeMessage< ::CMsgGCTFSpecificItemBroadcast >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCTFSpecificItemBroadcast >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgTFWorldStatus* Arena::CreateMaybeMessage< ::CMsgTFWorldStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgTFWorldStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::CSOTFDuelSummary* Arena::CreateMaybeMessage< ::CSOTFDuelSummary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSOTFDuelSummary >(arena);
}
template<> PROTOBUF_NOINLINE ::CSOTFMapContribution* Arena::CreateMaybeMessage< ::CSOTFMapContribution >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSOTFMapContribution >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgTFFreeTrialChooseMostHelpfulFriend* Arena::CreateMaybeMessage< ::CMsgTFFreeTrialChooseMostHelpfulFriend >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgTFFreeTrialChooseMostHelpfulFriend >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgTFRequestTF2Friends* Arena::CreateMaybeMessage< ::CMsgTFRequestTF2Friends >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgTFRequestTF2Friends >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgTFRequestTF2FriendsResponse* Arena::CreateMaybeMessage< ::CMsgTFRequestTF2FriendsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgTFRequestTF2FriendsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CSOTFPlayerInfo* Arena::CreateMaybeMessage< ::CSOTFPlayerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSOTFPlayerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgTFThankedBySomeone* Arena::CreateMaybeMessage< ::CMsgTFThankedBySomeone >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgTFThankedBySomeone >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgTFThankedSomeone* Arena::CreateMaybeMessage< ::CMsgTFThankedSomeone >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgTFThankedSomeone >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgTFFreeTrialConvertedToPremium* Arena::CreateMaybeMessage< ::CMsgTFFreeTrialConvertedToPremium >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgTFFreeTrialConvertedToPremium >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSaxxyAwarded* Arena::CreateMaybeMessage< ::CMsgSaxxyAwarded >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSaxxyAwarded >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgReplaySubmitContestEntry* Arena::CreateMaybeMessage< ::CMsgReplaySubmitContestEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgReplaySubmitContestEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgReplaySubmitContestEntryResponse* Arena::CreateMaybeMessage< ::CMsgReplaySubmitContestEntryResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgReplaySubmitContestEntryResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CReplayCachedContestData* Arena::CreateMaybeMessage< ::CReplayCachedContestData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CReplayCachedContestData >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgTFCoaching_AddToCoaches* Arena::CreateMaybeMessage< ::CMsgTFCoaching_AddToCoaches >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgTFCoaching_AddToCoaches >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgTFCoaching_RemoveFromCoaches* Arena::CreateMaybeMessage< ::CMsgTFCoaching_RemoveFromCoaches >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgTFCoaching_RemoveFromCoaches >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgTFCoaching_FindCoach* Arena::CreateMaybeMessage< ::CMsgTFCoaching_FindCoach >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgTFCoaching_FindCoach >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgTFCoaching_FindCoachResponse* Arena::CreateMaybeMessage< ::CMsgTFCoaching_FindCoachResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgTFCoaching_FindCoachResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgTFCoaching_AskCoach* Arena::CreateMaybeMessage< ::CMsgTFCoaching_AskCoach >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgTFCoaching_AskCoach >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgTFCoaching_AskCoachResponse* Arena::CreateMaybeMessage< ::CMsgTFCoaching_AskCoachResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgTFCoaching_AskCoachResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgTFCoaching_CoachJoinGame* Arena::CreateMaybeMessage< ::CMsgTFCoaching_CoachJoinGame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgTFCoaching_CoachJoinGame >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgTFCoaching_CoachJoining* Arena::CreateMaybeMessage< ::CMsgTFCoaching_CoachJoining >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgTFCoaching_CoachJoining >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgTFCoaching_CoachJoined* Arena::CreateMaybeMessage< ::CMsgTFCoaching_CoachJoined >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgTFCoaching_CoachJoined >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgTFCoaching_LikeCurrentCoach* Arena::CreateMaybeMessage< ::CMsgTFCoaching_LikeCurrentCoach >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgTFCoaching_LikeCurrentCoach >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgTFCoaching_RemoveCurrentCoach* Arena::CreateMaybeMessage< ::CMsgTFCoaching_RemoveCurrentCoach >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgTFCoaching_RemoveCurrentCoach >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgTFQuickplay_ScoreServers_ServerInfo* Arena::CreateMaybeMessage< ::CMsgTFQuickplay_ScoreServers_ServerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgTFQuickplay_ScoreServers_ServerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgTFQuickplay_ScoreServers* Arena::CreateMaybeMessage< ::CMsgTFQuickplay_ScoreServers >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgTFQuickplay_ScoreServers >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgTFQuickplay_ScoreServersResponse_ServerInfo* Arena::CreateMaybeMessage< ::CMsgTFQuickplay_ScoreServersResponse_ServerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgTFQuickplay_ScoreServersResponse_ServerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgTFQuickplay_ScoreServersResponse* Arena::CreateMaybeMessage< ::CMsgTFQuickplay_ScoreServersResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgTFQuickplay_ScoreServersResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgTFQuickplay_PlayerJoining* Arena::CreateMaybeMessage< ::CMsgTFQuickplay_PlayerJoining >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgTFQuickplay_PlayerJoining >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGC_GameServer_LevelInfo* Arena::CreateMaybeMessage< ::CMsgGC_GameServer_LevelInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGC_GameServer_LevelInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGC_GameServer_AuthChallenge* Arena::CreateMaybeMessage< ::CMsgGC_GameServer_AuthChallenge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGC_GameServer_AuthChallenge >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGC_GameServer_AuthResult* Arena::CreateMaybeMessage< ::CMsgGC_GameServer_AuthResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGC_GameServer_AuthResult >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGC_GameServer_AuthChallengeResponse* Arena::CreateMaybeMessage< ::CMsgGC_GameServer_AuthChallengeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGC_GameServer_AuthChallengeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGC_GameServer_CreateIdentity* Arena::CreateMaybeMessage< ::CMsgGC_GameServer_CreateIdentity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGC_GameServer_CreateIdentity >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGC_GameServer_CreateIdentityResponse* Arena::CreateMaybeMessage< ::CMsgGC_GameServer_CreateIdentityResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGC_GameServer_CreateIdentityResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGC_GameServer_List* Arena::CreateMaybeMessage< ::CMsgGC_GameServer_List >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGC_GameServer_List >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGC_GameServer_ListResponse_GameServerIdentity* Arena::CreateMaybeMessage< ::CMsgGC_GameServer_ListResponse_GameServerIdentity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGC_GameServer_ListResponse_GameServerIdentity >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGC_GameServer_ListResponse* Arena::CreateMaybeMessage< ::CMsgGC_GameServer_ListResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGC_GameServer_ListResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGC_GameServer_ResetIdentity* Arena::CreateMaybeMessage< ::CMsgGC_GameServer_ResetIdentity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGC_GameServer_ResetIdentity >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGC_GameServer_ResetIdentityResponse* Arena::CreateMaybeMessage< ::CMsgGC_GameServer_ResetIdentityResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGC_GameServer_ResetIdentityResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGC_GameServer_AckPolicy* Arena::CreateMaybeMessage< ::CMsgGC_GameServer_AckPolicy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGC_GameServer_AckPolicy >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGC_GameServer_AckPolicyResponse* Arena::CreateMaybeMessage< ::CMsgGC_GameServer_AckPolicyResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGC_GameServer_AckPolicyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGC_Client_UseServerModificationItem* Arena::CreateMaybeMessage< ::CMsgGC_Client_UseServerModificationItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGC_Client_UseServerModificationItem >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGC_Client_UseServerModificationItem_Response* Arena::CreateMaybeMessage< ::CMsgGC_Client_UseServerModificationItem_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGC_Client_UseServerModificationItem_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGC_GameServer_UseServerModificationItem* Arena::CreateMaybeMessage< ::CMsgGC_GameServer_UseServerModificationItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGC_GameServer_UseServerModificationItem >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGC_GameServer_UseServerModificationItem_Response* Arena::CreateMaybeMessage< ::CMsgGC_GameServer_UseServerModificationItem_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGC_GameServer_UseServerModificationItem_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGC_GameServer_ServerModificationItemExpired* Arena::CreateMaybeMessage< ::CMsgGC_GameServer_ServerModificationItemExpired >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGC_GameServer_ServerModificationItemExpired >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGC_GameServer_ServerModificationItem* Arena::CreateMaybeMessage< ::CMsgGC_GameServer_ServerModificationItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGC_GameServer_ServerModificationItem >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGC_Halloween_ReservedItem* Arena::CreateMaybeMessage< ::CMsgGC_Halloween_ReservedItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGC_Halloween_ReservedItem >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGC_Halloween_GrantItem* Arena::CreateMaybeMessage< ::CMsgGC_Halloween_GrantItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGC_Halloween_GrantItem >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGC_Halloween_GrantItemResponse* Arena::CreateMaybeMessage< ::CMsgGC_Halloween_GrantItemResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGC_Halloween_GrantItemResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGC_Halloween_ItemClaimed* Arena::CreateMaybeMessage< ::CMsgGC_Halloween_ItemClaimed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGC_Halloween_ItemClaimed >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGC_PickupItemEligibility_Query* Arena::CreateMaybeMessage< ::CMsgGC_PickupItemEligibility_Query >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGC_PickupItemEligibility_Query >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGC_PickupItemEligibility_QueryResponse* Arena::CreateMaybeMessage< ::CMsgGC_PickupItemEligibility_QueryResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGC_PickupItemEligibility_QueryResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CSOTFPartyMember_Activity* Arena::CreateMaybeMessage< ::CSOTFPartyMember_Activity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSOTFPartyMember_Activity >(arena);
}
template<> PROTOBUF_NOINLINE ::CSOTFPartyMember* Arena::CreateMaybeMessage< ::CSOTFPartyMember >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSOTFPartyMember >(arena);
}
template<> PROTOBUF_NOINLINE ::TFPendingPartyMember* Arena::CreateMaybeMessage< ::TFPendingPartyMember >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TFPendingPartyMember >(arena);
}
template<> PROTOBUF_NOINLINE ::TFSyncedMMUIState* Arena::CreateMaybeMessage< ::TFSyncedMMUIState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TFSyncedMMUIState >(arena);
}
template<> PROTOBUF_NOINLINE ::CTFGroupMatchCriteriaProto* Arena::CreateMaybeMessage< ::CTFGroupMatchCriteriaProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CTFGroupMatchCriteriaProto >(arena);
}
template<> PROTOBUF_NOINLINE ::CTFCasualMatchCriteria* Arena::CreateMaybeMessage< ::CTFCasualMatchCriteria >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CTFCasualMatchCriteria >(arena);
}
template<> PROTOBUF_NOINLINE ::CTFPerPlayerMatchCriteriaProto* Arena::CreateMaybeMessage< ::CTFPerPlayerMatchCriteriaProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CTFPerPlayerMatchCriteriaProto >(arena);
}
template<> PROTOBUF_NOINLINE ::CTFPartyOptions* Arena::CreateMaybeMessage< ::CTFPartyOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CTFPartyOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPartySetOptions* Arena::CreateMaybeMessage< ::CMsgPartySetOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPartySetOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPartySetOptionsResponse* Arena::CreateMaybeMessage< ::CMsgPartySetOptionsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPartySetOptionsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPartyQueueForMatch* Arena::CreateMaybeMessage< ::CMsgPartyQueueForMatch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPartyQueueForMatch >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPartyQueueForMatchResponse* Arena::CreateMaybeMessage< ::CMsgPartyQueueForMatchResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPartyQueueForMatchResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPartyQueueForStandby* Arena::CreateMaybeMessage< ::CMsgPartyQueueForStandby >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPartyQueueForStandby >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPartyQueueForStandbyResponse* Arena::CreateMaybeMessage< ::CMsgPartyQueueForStandbyResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPartyQueueForStandbyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPartyRemoveFromQueue* Arena::CreateMaybeMessage< ::CMsgPartyRemoveFromQueue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPartyRemoveFromQueue >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPartyRemoveFromQueueResponse* Arena::CreateMaybeMessage< ::CMsgPartyRemoveFromQueueResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPartyRemoveFromQueueResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPartyRemoveFromStandbyQueue* Arena::CreateMaybeMessage< ::CMsgPartyRemoveFromStandbyQueue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPartyRemoveFromStandbyQueue >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPartyRemoveFromStandbyQueueResponse* Arena::CreateMaybeMessage< ::CMsgPartyRemoveFromStandbyQueueResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPartyRemoveFromStandbyQueueResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPartyInvitePlayer* Arena::CreateMaybeMessage< ::CMsgPartyInvitePlayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPartyInvitePlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPartyRequestJoinPlayer* Arena::CreateMaybeMessage< ::CMsgPartyRequestJoinPlayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPartyRequestJoinPlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPartyClearPendingPlayer* Arena::CreateMaybeMessage< ::CMsgPartyClearPendingPlayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPartyClearPendingPlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPartyClearPendingPlayerResponse* Arena::CreateMaybeMessage< ::CMsgPartyClearPendingPlayerResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPartyClearPendingPlayerResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPartyClearOtherPartyRequest* Arena::CreateMaybeMessage< ::CMsgPartyClearOtherPartyRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPartyClearOtherPartyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPartyClearOtherPartyRequestResponse* Arena::CreateMaybeMessage< ::CMsgPartyClearOtherPartyRequestResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPartyClearOtherPartyRequestResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPartyPromoteToLeader* Arena::CreateMaybeMessage< ::CMsgPartyPromoteToLeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPartyPromoteToLeader >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPartyKickMember* Arena::CreateMaybeMessage< ::CMsgPartyKickMember >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPartyKickMember >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPartySendChat* Arena::CreateMaybeMessage< ::CMsgPartySendChat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPartySendChat >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPartyChatMsg* Arena::CreateMaybeMessage< ::CMsgPartyChatMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPartyChatMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::CSOTFParty_QueueEntry* Arena::CreateMaybeMessage< ::CSOTFParty_QueueEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSOTFParty_QueueEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::CSOTFParty* Arena::CreateMaybeMessage< ::CSOTFParty >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSOTFParty >(arena);
}
template<> PROTOBUF_NOINLINE ::CSOTFPartyInvite_PartyMember* Arena::CreateMaybeMessage< ::CSOTFPartyInvite_PartyMember >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSOTFPartyInvite_PartyMember >(arena);
}
template<> PROTOBUF_NOINLINE ::CSOTFPartyInvite* Arena::CreateMaybeMessage< ::CSOTFPartyInvite >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSOTFPartyInvite >(arena);
}
template<> PROTOBUF_NOINLINE ::CTFLobbyPlayerProto* Arena::CreateMaybeMessage< ::CTFLobbyPlayerProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CTFLobbyPlayerProto >(arena);
}
template<> PROTOBUF_NOINLINE ::CTFLobbyInviteProto* Arena::CreateMaybeMessage< ::CTFLobbyInviteProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CTFLobbyInviteProto >(arena);
}
template<> PROTOBUF_NOINLINE ::CSOTFGameServerLobby* Arena::CreateMaybeMessage< ::CSOTFGameServerLobby >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSOTFGameServerLobby >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgExitMatchmaking* Arena::CreateMaybeMessage< ::CMsgExitMatchmaking >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgExitMatchmaking >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgAcceptLobbyInvite* Arena::CreateMaybeMessage< ::CMsgAcceptLobbyInvite >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgAcceptLobbyInvite >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgAcceptLobbyInviteReply* Arena::CreateMaybeMessage< ::CMsgAcceptLobbyInviteReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgAcceptLobbyInviteReply >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgMatchmakingSearchCountRequest* Arena::CreateMaybeMessage< ::CMsgMatchmakingSearchCountRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgMatchmakingSearchCountRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgMatchmakingSearchCountResponse* Arena::CreateMaybeMessage< ::CMsgMatchmakingSearchCountResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgMatchmakingSearchCountResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgKickedFromMatchmakingQueue* Arena::CreateMaybeMessage< ::CMsgKickedFromMatchmakingQueue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgKickedFromMatchmakingQueue >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGameServerMatchmakingStatus_Player* Arena::CreateMaybeMessage< ::CMsgGameServerMatchmakingStatus_Player >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGameServerMatchmakingStatus_Player >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGameServerMatchmakingStatus* Arena::CreateMaybeMessage< ::CMsgGameServerMatchmakingStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGameServerMatchmakingStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgMatchmakingProgress* Arena::CreateMaybeMessage< ::CMsgMatchmakingProgress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgMatchmakingProgress >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgMvMVictoryInfo_Item* Arena::CreateMaybeMessage< ::CMsgMvMVictoryInfo_Item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgMvMVictoryInfo_Item >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgMvMVictoryInfo_Player* Arena::CreateMaybeMessage< ::CMsgMvMVictoryInfo_Player >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgMvMVictoryInfo_Player >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgMvMVictoryInfo* Arena::CreateMaybeMessage< ::CMsgMvMVictoryInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgMvMVictoryInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CGCMsgTFHelloResponse* Arena::CreateMaybeMessage< ::CGCMsgTFHelloResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGCMsgTFHelloResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CGCMsgTFSync* Arena::CreateMaybeMessage< ::CGCMsgTFSync >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGCMsgTFSync >(arena);
}
template<> PROTOBUF_NOINLINE ::CGCMsgTFSyncEx* Arena::CreateMaybeMessage< ::CGCMsgTFSyncEx >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGCMsgTFSyncEx >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgMvMVictory_Player* Arena::CreateMaybeMessage< ::CMsgMvMVictory_Player >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgMvMVictory_Player >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgMvMVictory* Arena::CreateMaybeMessage< ::CMsgMvMVictory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgMvMVictory >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgMvMMannUpVictoryReply* Arena::CreateMaybeMessage< ::CMsgMvMMannUpVictoryReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgMvMMannUpVictoryReply >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGameServerKickingLobby* Arena::CreateMaybeMessage< ::CMsgGameServerKickingLobby >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGameServerKickingLobby >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGameServerKickingLobbyResponse* Arena::CreateMaybeMessage< ::CMsgGameServerKickingLobbyResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGameServerKickingLobbyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgLeaveGameAndPrepareToJoinParty* Arena::CreateMaybeMessage< ::CMsgLeaveGameAndPrepareToJoinParty >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgLeaveGameAndPrepareToJoinParty >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPlayerLeftMatch* Arena::CreateMaybeMessage< ::CMsgPlayerLeftMatch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPlayerLeftMatch >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPlayerLeftMatchResponse* Arena::CreateMaybeMessage< ::CMsgPlayerLeftMatchResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPlayerLeftMatchResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgProcessMatchVoteKick_Vote* Arena::CreateMaybeMessage< ::CMsgProcessMatchVoteKick_Vote >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgProcessMatchVoteKick_Vote >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgProcessMatchVoteKick* Arena::CreateMaybeMessage< ::CMsgProcessMatchVoteKick >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgProcessMatchVoteKick >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgProcessMatchVoteKickResponse* Arena::CreateMaybeMessage< ::CMsgProcessMatchVoteKickResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgProcessMatchVoteKickResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPlayerVoteKickedAfterLeavingMatchResponse* Arena::CreateMaybeMessage< ::CMsgPlayerVoteKickedAfterLeavingMatchResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPlayerVoteKickedAfterLeavingMatchResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgHalloween_ServerBossEvent* Arena::CreateMaybeMessage< ::CMsgHalloween_ServerBossEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgHalloween_ServerBossEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgHalloween_Merasmus2012* Arena::CreateMaybeMessage< ::CMsgHalloween_Merasmus2012 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgHalloween_Merasmus2012 >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgUpdateHalloweenMerasmusLootLevel_Player* Arena::CreateMaybeMessage< ::CMsgUpdateHalloweenMerasmusLootLevel_Player >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgUpdateHalloweenMerasmusLootLevel_Player >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgUpdateHalloweenMerasmusLootLevel* Arena::CreateMaybeMessage< ::CMsgUpdateHalloweenMerasmusLootLevel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgUpdateHalloweenMerasmusLootLevel >(arena);
}
template<> PROTOBUF_NOINLINE ::CAttribute_String* Arena::CreateMaybeMessage< ::CAttribute_String >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CAttribute_String >(arena);
}
template<> PROTOBUF_NOINLINE ::CAttribute_DynamicRecipeComponent* Arena::CreateMaybeMessage< ::CAttribute_DynamicRecipeComponent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CAttribute_DynamicRecipeComponent >(arena);
}
template<> PROTOBUF_NOINLINE ::CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT* Arena::CreateMaybeMessage< ::CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT >(arena);
}
template<> PROTOBUF_NOINLINE ::CAttribute_ItemSlotCriteria* Arena::CreateMaybeMessage< ::CAttribute_ItemSlotCriteria >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CAttribute_ItemSlotCriteria >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSetItemSlotAttribute* Arena::CreateMaybeMessage< ::CMsgSetItemSlotAttribute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSetItemSlotAttribute >(arena);
}
template<> PROTOBUF_NOINLINE ::CSOWarData* Arena::CreateMaybeMessage< ::CSOWarData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSOWarData >(arena);
}
template<> PROTOBUF_NOINLINE ::CGCMsgGC_War_IndividualUpdate* Arena::CreateMaybeMessage< ::CGCMsgGC_War_IndividualUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGCMsgGC_War_IndividualUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::CGCMsgGC_War_JoinWar* Arena::CreateMaybeMessage< ::CGCMsgGC_War_JoinWar >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGCMsgGC_War_JoinWar >(arena);
}
template<> PROTOBUF_NOINLINE ::CGCMsgGC_War_RequestGlobalStats* Arena::CreateMaybeMessage< ::CGCMsgGC_War_RequestGlobalStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGCMsgGC_War_RequestGlobalStats >(arena);
}
template<> PROTOBUF_NOINLINE ::CGCMsgGC_War_GlobalStatsResponse_SideScore* Arena::CreateMaybeMessage< ::CGCMsgGC_War_GlobalStatsResponse_SideScore >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGCMsgGC_War_GlobalStatsResponse_SideScore >(arena);
}
template<> PROTOBUF_NOINLINE ::CGCMsgGC_War_GlobalStatsResponse* Arena::CreateMaybeMessage< ::CGCMsgGC_War_GlobalStatsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGCMsgGC_War_GlobalStatsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate* Arena::CreateMaybeMessage< ::CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::CAttribute_WorldItemPlacement* Arena::CreateMaybeMessage< ::CAttribute_WorldItemPlacement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CAttribute_WorldItemPlacement >(arena);
}
template<> PROTOBUF_NOINLINE ::CGCMsg_WorldItemPlacement_Update* Arena::CreateMaybeMessage< ::CGCMsg_WorldItemPlacement_Update >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGCMsg_WorldItemPlacement_Update >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgAcknowledgeXP* Arena::CreateMaybeMessage< ::CMsgAcknowledgeXP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgAcknowledgeXP >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgTFXPSource* Arena::CreateMaybeMessage< ::CMsgTFXPSource >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgTFXPSource >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgTFXPSourceBreakdown* Arena::CreateMaybeMessage< ::CMsgTFXPSourceBreakdown >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgTFXPSourceBreakdown >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgTFClientInit* Arena::CreateMaybeMessage< ::CMsgTFClientInit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgTFClientInit >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCNotification* Arena::CreateMaybeMessage< ::CMsgGCNotification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCNotificationQueue* Arena::CreateMaybeMessage< ::CMsgGCNotificationQueue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCNotificationQueue >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgNotificationAcknowledge* Arena::CreateMaybeMessage< ::CMsgNotificationAcknowledge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgNotificationAcknowledge >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgNotificationAcknowledgeReply* Arena::CreateMaybeMessage< ::CMsgNotificationAcknowledgeReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgNotificationAcknowledgeReply >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGC_Match_Result_Player* Arena::CreateMaybeMessage< ::CMsgGC_Match_Result_Player >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGC_Match_Result_Player >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGC_Match_Result* Arena::CreateMaybeMessage< ::CMsgGC_Match_Result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGC_Match_Result >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGC_Match_ResultResponse* Arena::CreateMaybeMessage< ::CMsgGC_Match_ResultResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGC_Match_ResultResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CEconItemPreviewDataBlock* Arena::CreateMaybeMessage< ::CEconItemPreviewDataBlock >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CEconItemPreviewDataBlock >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGC_Client2GCEconPreviewDataBlockRequest* Arena::CreateMaybeMessage< ::CMsgGC_Client2GCEconPreviewDataBlockRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGC_Client2GCEconPreviewDataBlockRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGC_Client2GCEconPreviewDataBlockResponse* Arena::CreateMaybeMessage< ::CMsgGC_Client2GCEconPreviewDataBlockResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGC_Client2GCEconPreviewDataBlockResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CSOTFLadderPlayerStats* Arena::CreateMaybeMessage< ::CSOTFLadderPlayerStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSOTFLadderPlayerStats >(arena);
}
template<> PROTOBUF_NOINLINE ::CSOTFRatingData* Arena::CreateMaybeMessage< ::CSOTFRatingData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSOTFRatingData >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGC_TFVoteKickPlayerRequest* Arena::CreateMaybeMessage< ::CMsgGC_TFVoteKickPlayerRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGC_TFVoteKickPlayerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGC_VoteKickPlayerRequestResponse* Arena::CreateMaybeMessage< ::CMsgGC_VoteKickPlayerRequestResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGC_VoteKickPlayerRequestResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGC_DailyCompetitiveStatsRollup* Arena::CreateMaybeMessage< ::CMsgGC_DailyCompetitiveStatsRollup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGC_DailyCompetitiveStatsRollup >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry* Arena::CreateMaybeMessage< ::CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGC_DailyCompetitiveStatsRollup_Response* Arena::CreateMaybeMessage< ::CMsgGC_DailyCompetitiveStatsRollup_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGC_DailyCompetitiveStatsRollup_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGC_ReportPlayer* Arena::CreateMaybeMessage< ::CMsgGC_ReportPlayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGC_ReportPlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::CSOTFMatchResultPlayerStats* Arena::CreateMaybeMessage< ::CSOTFMatchResultPlayerStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSOTFMatchResultPlayerStats >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCRequestMatchMakerStats* Arena::CreateMaybeMessage< ::CMsgGCRequestMatchMakerStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCRequestMatchMakerStats >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCDataCenterPopulation* Arena::CreateMaybeMessage< ::CMsgGCDataCenterPopulation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCDataCenterPopulation >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCMatchGroupDataCenterPopulation* Arena::CreateMaybeMessage< ::CMsgGCMatchGroupDataCenterPopulation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCMatchGroupDataCenterPopulation >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCMatchMakerStatsResponse* Arena::CreateMaybeMessage< ::CMsgGCMatchMakerStatsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCMatchMakerStatsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCMatchHistoryLoad* Arena::CreateMaybeMessage< ::CMsgGCMatchHistoryLoad >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCMatchHistoryLoad >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCDataCenterPing_Update_PingEntry* Arena::CreateMaybeMessage< ::CMsgGCDataCenterPing_Update_PingEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCDataCenterPing_Update_PingEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCDataCenterPing_Update* Arena::CreateMaybeMessage< ::CMsgGCDataCenterPing_Update >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCDataCenterPing_Update >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGC_KickPlayerFromLobby* Arena::CreateMaybeMessage< ::CMsgGC_KickPlayerFromLobby >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGC_KickPlayerFromLobby >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCSurveyRequest* Arena::CreateMaybeMessage< ::CMsgGCSurveyRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCSurveyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCSurveyResponse* Arena::CreateMaybeMessage< ::CMsgGCSurveyResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCSurveyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CSOQuestMapNode* Arena::CreateMaybeMessage< ::CSOQuestMapNode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSOQuestMapNode >(arena);
}
template<> PROTOBUF_NOINLINE ::CSOQuest* Arena::CreateMaybeMessage< ::CSOQuest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSOQuest >(arena);
}
template<> PROTOBUF_NOINLINE ::CSOQuestMapRewardPurchase* Arena::CreateMaybeMessage< ::CSOQuestMapRewardPurchase >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSOQuestMapRewardPurchase >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCQuestIdentify* Arena::CreateMaybeMessage< ::CMsgGCQuestIdentify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCQuestIdentify >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCQuestDevGive* Arena::CreateMaybeMessage< ::CMsgGCQuestDevGive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCQuestDevGive >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCQuestNodeTurnIn* Arena::CreateMaybeMessage< ::CMsgGCQuestNodeTurnIn >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCQuestNodeTurnIn >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCQuestMapUnlockNode* Arena::CreateMaybeMessage< ::CMsgGCQuestMapUnlockNode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCQuestMapUnlockNode >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCNewMatchForLobbyRequest* Arena::CreateMaybeMessage< ::CMsgGCNewMatchForLobbyRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCNewMatchForLobbyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCNewMatchForLobbyResponse* Arena::CreateMaybeMessage< ::CMsgGCNewMatchForLobbyResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCNewMatchForLobbyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCChangeMatchPlayerTeamsRequest_Member* Arena::CreateMaybeMessage< ::CMsgGCChangeMatchPlayerTeamsRequest_Member >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCChangeMatchPlayerTeamsRequest_Member >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCChangeMatchPlayerTeamsRequest* Arena::CreateMaybeMessage< ::CMsgGCChangeMatchPlayerTeamsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCChangeMatchPlayerTeamsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCChangeMatchPlayerTeamsResponse* Arena::CreateMaybeMessage< ::CMsgGCChangeMatchPlayerTeamsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCChangeMatchPlayerTeamsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCQuestComplete_Debug* Arena::CreateMaybeMessage< ::CMsgGCQuestComplete_Debug >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCQuestComplete_Debug >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCQuestMap_Debug* Arena::CreateMaybeMessage< ::CMsgGCQuestMap_Debug >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCQuestMap_Debug >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCQuestMapPurchaseReward* Arena::CreateMaybeMessage< ::CMsgGCQuestMapPurchaseReward >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCQuestMapPurchaseReward >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCQuestResponse* Arena::CreateMaybeMessage< ::CMsgGCQuestResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCQuestResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCSetDisablePartyQuestProgress* Arena::CreateMaybeMessage< ::CMsgGCSetDisablePartyQuestProgress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCSetDisablePartyQuestProgress >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgQuestProgressReport* Arena::CreateMaybeMessage< ::CMsgQuestProgressReport >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgQuestProgressReport >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgConsumePaintkit* Arena::CreateMaybeMessage< ::CMsgConsumePaintkit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgConsumePaintkit >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPainkitDevGrant* Arena::CreateMaybeMessage< ::CMsgPainkitDevGrant >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPainkitDevGrant >(arena);
}
template<> PROTOBUF_NOINLINE ::GCQuestStrangeEvent* Arena::CreateMaybeMessage< ::GCQuestStrangeEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GCQuestStrangeEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
#pragma warning(pop)