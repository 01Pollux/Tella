// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gcsystemmsgs.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_gcsystemmsgs_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_gcsystemmsgs_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_gcsystemmsgs_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_gcsystemmsgs_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gcsystemmsgs_2eproto;
class CCommunity_GamePersonalDataCategoryInfo;
struct CCommunity_GamePersonalDataCategoryInfoDefaultTypeInternal;
extern CCommunity_GamePersonalDataCategoryInfoDefaultTypeInternal _CCommunity_GamePersonalDataCategoryInfo_default_instance_;
class CCommunity_GetGamePersonalDataCategories_Request;
struct CCommunity_GetGamePersonalDataCategories_RequestDefaultTypeInternal;
extern CCommunity_GetGamePersonalDataCategories_RequestDefaultTypeInternal _CCommunity_GetGamePersonalDataCategories_Request_default_instance_;
class CCommunity_GetGamePersonalDataCategories_Response;
struct CCommunity_GetGamePersonalDataCategories_ResponseDefaultTypeInternal;
extern CCommunity_GetGamePersonalDataCategories_ResponseDefaultTypeInternal _CCommunity_GetGamePersonalDataCategories_Response_default_instance_;
class CCommunity_GetGamePersonalDataEntries_Request;
struct CCommunity_GetGamePersonalDataEntries_RequestDefaultTypeInternal;
extern CCommunity_GetGamePersonalDataEntries_RequestDefaultTypeInternal _CCommunity_GetGamePersonalDataEntries_Request_default_instance_;
class CCommunity_GetGamePersonalDataEntries_Response;
struct CCommunity_GetGamePersonalDataEntries_ResponseDefaultTypeInternal;
extern CCommunity_GetGamePersonalDataEntries_ResponseDefaultTypeInternal _CCommunity_GetGamePersonalDataEntries_Response_default_instance_;
class CCommunity_TerminateGamePersonalDataEntries_Request;
struct CCommunity_TerminateGamePersonalDataEntries_RequestDefaultTypeInternal;
extern CCommunity_TerminateGamePersonalDataEntries_RequestDefaultTypeInternal _CCommunity_TerminateGamePersonalDataEntries_Request_default_instance_;
class CCommunity_TerminateGamePersonalDataEntries_Response;
struct CCommunity_TerminateGamePersonalDataEntries_ResponseDefaultTypeInternal;
extern CCommunity_TerminateGamePersonalDataEntries_ResponseDefaultTypeInternal _CCommunity_TerminateGamePersonalDataEntries_Response_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CCommunity_GamePersonalDataCategoryInfo* Arena::CreateMaybeMessage<::CCommunity_GamePersonalDataCategoryInfo>(Arena*);
template<> ::CCommunity_GetGamePersonalDataCategories_Request* Arena::CreateMaybeMessage<::CCommunity_GetGamePersonalDataCategories_Request>(Arena*);
template<> ::CCommunity_GetGamePersonalDataCategories_Response* Arena::CreateMaybeMessage<::CCommunity_GetGamePersonalDataCategories_Response>(Arena*);
template<> ::CCommunity_GetGamePersonalDataEntries_Request* Arena::CreateMaybeMessage<::CCommunity_GetGamePersonalDataEntries_Request>(Arena*);
template<> ::CCommunity_GetGamePersonalDataEntries_Response* Arena::CreateMaybeMessage<::CCommunity_GetGamePersonalDataEntries_Response>(Arena*);
template<> ::CCommunity_TerminateGamePersonalDataEntries_Request* Arena::CreateMaybeMessage<::CCommunity_TerminateGamePersonalDataEntries_Request>(Arena*);
template<> ::CCommunity_TerminateGamePersonalDataEntries_Response* Arena::CreateMaybeMessage<::CCommunity_TerminateGamePersonalDataEntries_Response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum EGCSystemMsg : int {
  k_EGCMsgInvalid = 0,
  k_EGCMsgMulti = 1,
  k_EGCMsgGenericReply = 10,
  k_EGCMsgSystemBase = 50,
  k_EGCMsgAchievementAwarded = 51,
  k_EGCMsgConCommand = 52,
  k_EGCMsgStartPlaying = 53,
  k_EGCMsgStopPlaying = 54,
  k_EGCMsgStartGameserver = 55,
  k_EGCMsgStopGameserver = 56,
  k_EGCMsgWGRequest = 57,
  k_EGCMsgWGResponse = 58,
  k_EGCMsgGetUserGameStatsSchema = 59,
  k_EGCMsgGetUserGameStatsSchemaResponse = 60,
  k_EGCMsgGetUserStatsDEPRECATED = 61,
  k_EGCMsgGetUserStatsResponse = 62,
  k_EGCMsgAppInfoUpdated = 63,
  k_EGCMsgValidateSession = 64,
  k_EGCMsgValidateSessionResponse = 65,
  k_EGCMsgLookupAccountFromInput = 66,
  k_EGCMsgSendHTTPRequest = 67,
  k_EGCMsgSendHTTPRequestResponse = 68,
  k_EGCMsgPreTestSetup = 69,
  k_EGCMsgRecordSupportAction = 70,
  k_EGCMsgGetAccountDetails_DEPRECATED = 71,
  k_EGCMsgReceiveInterAppMessage = 73,
  k_EGCMsgFindAccounts = 74,
  k_EGCMsgPostAlert = 75,
  k_EGCMsgGetLicenses = 76,
  k_EGCMsgGetUserStats = 77,
  k_EGCMsgGetCommands = 78,
  k_EGCMsgGetCommandsResponse = 79,
  k_EGCMsgAddFreeLicense = 80,
  k_EGCMsgAddFreeLicenseResponse = 81,
  k_EGCMsgGetIPLocation = 82,
  k_EGCMsgGetIPLocationResponse = 83,
  k_EGCMsgSystemStatsSchema = 84,
  k_EGCMsgGetSystemStats = 85,
  k_EGCMsgGetSystemStatsResponse = 86,
  k_EGCMsgSendEmail = 87,
  k_EGCMsgSendEmailResponse = 88,
  k_EGCMsgGetEmailTemplate = 89,
  k_EGCMsgGetEmailTemplateResponse = 90,
  k_EGCMsgGrantGuestPass = 91,
  k_EGCMsgGrantGuestPassResponse = 92,
  k_EGCMsgGetAccountDetails = 93,
  k_EGCMsgGetAccountDetailsResponse = 94,
  k_EGCMsgGetPersonaNames = 95,
  k_EGCMsgGetPersonaNamesResponse = 96,
  k_EGCMsgMultiplexMsg = 97,
  k_EGCMsgWebAPIRegisterInterfaces = 101,
  k_EGCMsgWebAPIJobRequest = 102,
  k_EGCMsgWebAPIJobRequestHttpResponse = 104,
  k_EGCMsgWebAPIJobRequestForwardResponse = 105,
  k_EGCMsgMemCachedGet = 200,
  k_EGCMsgMemCachedGetResponse = 201,
  k_EGCMsgMemCachedSet = 202,
  k_EGCMsgMemCachedDelete = 203,
  k_EGCMsgMemCachedStats = 204,
  k_EGCMsgMemCachedStatsResponse = 205,
  k_EGCMsgSQLStats = 210,
  k_EGCMsgSQLStatsResponse = 211,
  k_EGCMsgMasterSetDirectory = 220,
  k_EGCMsgMasterSetDirectoryResponse = 221,
  k_EGCMsgMasterSetWebAPIRouting = 222,
  k_EGCMsgMasterSetWebAPIRoutingResponse = 223,
  k_EGCMsgMasterSetClientMsgRouting = 224,
  k_EGCMsgMasterSetClientMsgRoutingResponse = 225,
  k_EGCMsgSetOptions = 226,
  k_EGCMsgSetOptionsResponse = 227,
  k_EGCMsgSystemBase2 = 500,
  k_EGCMsgGetPurchaseTrustStatus = 501,
  k_EGCMsgGetPurchaseTrustStatusResponse = 502,
  k_EGCMsgUpdateSession = 503,
  k_EGCMsgGCAccountVacStatusChange = 504,
  k_EGCMsgCheckFriendship = 505,
  k_EGCMsgCheckFriendshipResponse = 506,
  k_EGCMsgGetPartnerAccountLink = 507,
  k_EGCMsgGetPartnerAccountLinkResponse = 508,
  k_EGCMsgVSReportedSuspiciousActivity = 509,
  k_EGCMsgAccountTradeBanStatusChange = 510,
  k_EGCMsgAccountLockStatusChange = 511,
  k_EGCMsgDPPartnerMicroTxns = 512,
  k_EGCMsgDPPartnerMicroTxnsResponse = 513,
  k_EGCMsgGetIPASN = 514,
  k_EGCMsgGetIPASNResponse = 515,
  k_EGCMsgGetAppFriendsList = 516,
  k_EGCMsgGetAppFriendsListResponse = 517,
  k_EGCMsgVacVerificationChange = 518,
  k_EGCMsgAccountPhoneNumberChange = 519,
  k_EGCMsgAccountTwoFactorChange = 520,
  k_EGCMsgCheckClanMembership = 521,
  k_EGCMsgCheckClanMembershipResponse = 522,
  k_EGCMsgInviteUserToLobby = 523,
  k_EGCMsgGetGamePersonalDataCategoriesRequest = 524,
  k_EGCMsgGetGamePersonalDataCategoriesResponse = 525,
  k_EGCMsgGetGamePersonalDataEntriesRequest = 526,
  k_EGCMsgGetGamePersonalDataEntriesResponse = 527,
  k_EGCMsgTerminateGamePersonalDataEntriesRequest = 528,
  k_EGCMsgTerminateGamePersonalDataEntriesResponse = 529
};
bool EGCSystemMsg_IsValid(int value);
constexpr EGCSystemMsg EGCSystemMsg_MIN = k_EGCMsgInvalid;
constexpr EGCSystemMsg EGCSystemMsg_MAX = k_EGCMsgTerminateGamePersonalDataEntriesResponse;
constexpr int EGCSystemMsg_ARRAYSIZE = EGCSystemMsg_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EGCSystemMsg_descriptor();
template<typename T>
inline const std::string& EGCSystemMsg_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EGCSystemMsg>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EGCSystemMsg_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EGCSystemMsg_descriptor(), enum_t_value);
}
inline bool EGCSystemMsg_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EGCSystemMsg* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EGCSystemMsg>(
    EGCSystemMsg_descriptor(), name, value);
}
enum ESOMsg : int {
  k_ESOMsg_Create = 21,
  k_ESOMsg_Update = 22,
  k_ESOMsg_Destroy = 23,
  k_ESOMsg_CacheSubscribed = 24,
  k_ESOMsg_CacheUnsubscribed = 25,
  k_ESOMsg_UpdateMultiple = 26,
  k_ESOMsg_CacheSubscriptionCheck = 27,
  k_ESOMsg_CacheSubscriptionRefresh = 28,
  k_ESOMsg_CacheSubscribedUpToDate = 29
};
bool ESOMsg_IsValid(int value);
constexpr ESOMsg ESOMsg_MIN = k_ESOMsg_Create;
constexpr ESOMsg ESOMsg_MAX = k_ESOMsg_CacheSubscribedUpToDate;
constexpr int ESOMsg_ARRAYSIZE = ESOMsg_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESOMsg_descriptor();
template<typename T>
inline const std::string& ESOMsg_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ESOMsg>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ESOMsg_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ESOMsg_descriptor(), enum_t_value);
}
inline bool ESOMsg_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ESOMsg* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ESOMsg>(
    ESOMsg_descriptor(), name, value);
}
enum EGCBaseClientMsg : int {
  k_EMsgGCPingRequest = 3001,
  k_EMsgGCPingResponse = 3002,
  k_EMsgGCClientWelcome = 4004,
  k_EMsgGCServerWelcome = 4005,
  k_EMsgGCClientHello = 4006,
  k_EMsgGCServerHello = 4007,
  k_EMsgGCClientGoodbye = 4008,
  k_EMsgGCServerGoodbye = 4009
};
bool EGCBaseClientMsg_IsValid(int value);
constexpr EGCBaseClientMsg EGCBaseClientMsg_MIN = k_EMsgGCPingRequest;
constexpr EGCBaseClientMsg EGCBaseClientMsg_MAX = k_EMsgGCServerGoodbye;
constexpr int EGCBaseClientMsg_ARRAYSIZE = EGCBaseClientMsg_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EGCBaseClientMsg_descriptor();
template<typename T>
inline const std::string& EGCBaseClientMsg_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EGCBaseClientMsg>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EGCBaseClientMsg_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EGCBaseClientMsg_descriptor(), enum_t_value);
}
inline bool EGCBaseClientMsg_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EGCBaseClientMsg* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EGCBaseClientMsg>(
    EGCBaseClientMsg_descriptor(), name, value);
}
enum EGCToGCMsg : int {
  k_EGCToGCMsgMasterAck = 150,
  k_EGCToGCMsgMasterAckResponse = 151,
  k_EGCToGCMsgRouted = 152,
  k_EGCToGCMsgRoutedReply = 153,
  k_EMsgGCUpdateSubGCSessionInfo = 154,
  k_EMsgGCRequestSubGCSessionInfo = 155,
  k_EMsgGCRequestSubGCSessionInfoResponse = 156,
  k_EGCToGCMsgMasterStartupComplete = 157,
  k_EMsgGCToGCSOCacheSubscribe = 158,
  k_EMsgGCToGCSOCacheUnsubscribe = 159
};
bool EGCToGCMsg_IsValid(int value);
constexpr EGCToGCMsg EGCToGCMsg_MIN = k_EGCToGCMsgMasterAck;
constexpr EGCToGCMsg EGCToGCMsg_MAX = k_EMsgGCToGCSOCacheUnsubscribe;
constexpr int EGCToGCMsg_ARRAYSIZE = EGCToGCMsg_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EGCToGCMsg_descriptor();
template<typename T>
inline const std::string& EGCToGCMsg_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EGCToGCMsg>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EGCToGCMsg_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EGCToGCMsg_descriptor(), enum_t_value);
}
inline bool EGCToGCMsg_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EGCToGCMsg* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EGCToGCMsg>(
    EGCToGCMsg_descriptor(), name, value);
}
// ===================================================================

class CCommunity_GamePersonalDataCategoryInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCommunity_GamePersonalDataCategoryInfo) */ {
 public:
  inline CCommunity_GamePersonalDataCategoryInfo() : CCommunity_GamePersonalDataCategoryInfo(nullptr) {}
  ~CCommunity_GamePersonalDataCategoryInfo() override;
  explicit constexpr CCommunity_GamePersonalDataCategoryInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCommunity_GamePersonalDataCategoryInfo(const CCommunity_GamePersonalDataCategoryInfo& from);
  CCommunity_GamePersonalDataCategoryInfo(CCommunity_GamePersonalDataCategoryInfo&& from) noexcept
    : CCommunity_GamePersonalDataCategoryInfo() {
    *this = ::std::move(from);
  }

  inline CCommunity_GamePersonalDataCategoryInfo& operator=(const CCommunity_GamePersonalDataCategoryInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCommunity_GamePersonalDataCategoryInfo& operator=(CCommunity_GamePersonalDataCategoryInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCommunity_GamePersonalDataCategoryInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCommunity_GamePersonalDataCategoryInfo* internal_default_instance() {
    return reinterpret_cast<const CCommunity_GamePersonalDataCategoryInfo*>(
               &_CCommunity_GamePersonalDataCategoryInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CCommunity_GamePersonalDataCategoryInfo& a, CCommunity_GamePersonalDataCategoryInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CCommunity_GamePersonalDataCategoryInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCommunity_GamePersonalDataCategoryInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CCommunity_GamePersonalDataCategoryInfo* New() const final {
    return new CCommunity_GamePersonalDataCategoryInfo();
  }

  CCommunity_GamePersonalDataCategoryInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CCommunity_GamePersonalDataCategoryInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CCommunity_GamePersonalDataCategoryInfo& from);
  void MergeFrom(const CCommunity_GamePersonalDataCategoryInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCommunity_GamePersonalDataCategoryInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCommunity_GamePersonalDataCategoryInfo";
  }
  protected:
  explicit CCommunity_GamePersonalDataCategoryInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kLocalizationTokenFieldNumber = 2,
    kTemplateFileFieldNumber = 3,
  };
  // optional string type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // optional string localization_token = 2;
  bool has_localization_token() const;
  private:
  bool _internal_has_localization_token() const;
  public:
  void clear_localization_token();
  const std::string& localization_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_localization_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_localization_token();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_localization_token();
  void set_allocated_localization_token(std::string* localization_token);
  private:
  const std::string& _internal_localization_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_localization_token(const std::string& value);
  std::string* _internal_mutable_localization_token();
  public:

  // optional string template_file = 3;
  bool has_template_file() const;
  private:
  bool _internal_has_template_file() const;
  public:
  void clear_template_file();
  const std::string& template_file() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_template_file(ArgT0&& arg0, ArgT... args);
  std::string* mutable_template_file();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_template_file();
  void set_allocated_template_file(std::string* template_file);
  private:
  const std::string& _internal_template_file() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_template_file(const std::string& value);
  std::string* _internal_mutable_template_file();
  public:

  // @@protoc_insertion_point(class_scope:CCommunity_GamePersonalDataCategoryInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr localization_token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr template_file_;
  friend struct ::TableStruct_gcsystemmsgs_2eproto;
};
// -------------------------------------------------------------------

class CCommunity_GetGamePersonalDataCategories_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCommunity_GetGamePersonalDataCategories_Request) */ {
 public:
  inline CCommunity_GetGamePersonalDataCategories_Request() : CCommunity_GetGamePersonalDataCategories_Request(nullptr) {}
  ~CCommunity_GetGamePersonalDataCategories_Request() override;
  explicit constexpr CCommunity_GetGamePersonalDataCategories_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCommunity_GetGamePersonalDataCategories_Request(const CCommunity_GetGamePersonalDataCategories_Request& from);
  CCommunity_GetGamePersonalDataCategories_Request(CCommunity_GetGamePersonalDataCategories_Request&& from) noexcept
    : CCommunity_GetGamePersonalDataCategories_Request() {
    *this = ::std::move(from);
  }

  inline CCommunity_GetGamePersonalDataCategories_Request& operator=(const CCommunity_GetGamePersonalDataCategories_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCommunity_GetGamePersonalDataCategories_Request& operator=(CCommunity_GetGamePersonalDataCategories_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCommunity_GetGamePersonalDataCategories_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCommunity_GetGamePersonalDataCategories_Request* internal_default_instance() {
    return reinterpret_cast<const CCommunity_GetGamePersonalDataCategories_Request*>(
               &_CCommunity_GetGamePersonalDataCategories_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CCommunity_GetGamePersonalDataCategories_Request& a, CCommunity_GetGamePersonalDataCategories_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CCommunity_GetGamePersonalDataCategories_Request* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCommunity_GetGamePersonalDataCategories_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CCommunity_GetGamePersonalDataCategories_Request* New() const final {
    return new CCommunity_GetGamePersonalDataCategories_Request();
  }

  CCommunity_GetGamePersonalDataCategories_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CCommunity_GetGamePersonalDataCategories_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CCommunity_GetGamePersonalDataCategories_Request& from);
  void MergeFrom(const CCommunity_GetGamePersonalDataCategories_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCommunity_GetGamePersonalDataCategories_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCommunity_GetGamePersonalDataCategories_Request";
  }
  protected:
  explicit CCommunity_GetGamePersonalDataCategories_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppidFieldNumber = 1,
  };
  // optional uint32 appid = 1;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  ::PROTOBUF_NAMESPACE_ID::uint32 appid() const;
  void set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_appid() const;
  void _internal_set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CCommunity_GetGamePersonalDataCategories_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 appid_;
  friend struct ::TableStruct_gcsystemmsgs_2eproto;
};
// -------------------------------------------------------------------

class CCommunity_GetGamePersonalDataCategories_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCommunity_GetGamePersonalDataCategories_Response) */ {
 public:
  inline CCommunity_GetGamePersonalDataCategories_Response() : CCommunity_GetGamePersonalDataCategories_Response(nullptr) {}
  ~CCommunity_GetGamePersonalDataCategories_Response() override;
  explicit constexpr CCommunity_GetGamePersonalDataCategories_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCommunity_GetGamePersonalDataCategories_Response(const CCommunity_GetGamePersonalDataCategories_Response& from);
  CCommunity_GetGamePersonalDataCategories_Response(CCommunity_GetGamePersonalDataCategories_Response&& from) noexcept
    : CCommunity_GetGamePersonalDataCategories_Response() {
    *this = ::std::move(from);
  }

  inline CCommunity_GetGamePersonalDataCategories_Response& operator=(const CCommunity_GetGamePersonalDataCategories_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCommunity_GetGamePersonalDataCategories_Response& operator=(CCommunity_GetGamePersonalDataCategories_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCommunity_GetGamePersonalDataCategories_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCommunity_GetGamePersonalDataCategories_Response* internal_default_instance() {
    return reinterpret_cast<const CCommunity_GetGamePersonalDataCategories_Response*>(
               &_CCommunity_GetGamePersonalDataCategories_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CCommunity_GetGamePersonalDataCategories_Response& a, CCommunity_GetGamePersonalDataCategories_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CCommunity_GetGamePersonalDataCategories_Response* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCommunity_GetGamePersonalDataCategories_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CCommunity_GetGamePersonalDataCategories_Response* New() const final {
    return new CCommunity_GetGamePersonalDataCategories_Response();
  }

  CCommunity_GetGamePersonalDataCategories_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CCommunity_GetGamePersonalDataCategories_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CCommunity_GetGamePersonalDataCategories_Response& from);
  void MergeFrom(const CCommunity_GetGamePersonalDataCategories_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCommunity_GetGamePersonalDataCategories_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCommunity_GetGamePersonalDataCategories_Response";
  }
  protected:
  explicit CCommunity_GetGamePersonalDataCategories_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCategoriesFieldNumber = 1,
    kAppAssetsBasenameFieldNumber = 2,
  };
  // repeated .CCommunity_GamePersonalDataCategoryInfo categories = 1;
  int categories_size() const;
  private:
  int _internal_categories_size() const;
  public:
  void clear_categories();
  ::CCommunity_GamePersonalDataCategoryInfo* mutable_categories(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CCommunity_GamePersonalDataCategoryInfo >*
      mutable_categories();
  private:
  const ::CCommunity_GamePersonalDataCategoryInfo& _internal_categories(int index) const;
  ::CCommunity_GamePersonalDataCategoryInfo* _internal_add_categories();
  public:
  const ::CCommunity_GamePersonalDataCategoryInfo& categories(int index) const;
  ::CCommunity_GamePersonalDataCategoryInfo* add_categories();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CCommunity_GamePersonalDataCategoryInfo >&
      categories() const;

  // optional string app_assets_basename = 2;
  bool has_app_assets_basename() const;
  private:
  bool _internal_has_app_assets_basename() const;
  public:
  void clear_app_assets_basename();
  const std::string& app_assets_basename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_app_assets_basename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_app_assets_basename();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_app_assets_basename();
  void set_allocated_app_assets_basename(std::string* app_assets_basename);
  private:
  const std::string& _internal_app_assets_basename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_assets_basename(const std::string& value);
  std::string* _internal_mutable_app_assets_basename();
  public:

  // @@protoc_insertion_point(class_scope:CCommunity_GetGamePersonalDataCategories_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CCommunity_GamePersonalDataCategoryInfo > categories_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_assets_basename_;
  friend struct ::TableStruct_gcsystemmsgs_2eproto;
};
// -------------------------------------------------------------------

class CCommunity_GetGamePersonalDataEntries_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCommunity_GetGamePersonalDataEntries_Request) */ {
 public:
  inline CCommunity_GetGamePersonalDataEntries_Request() : CCommunity_GetGamePersonalDataEntries_Request(nullptr) {}
  ~CCommunity_GetGamePersonalDataEntries_Request() override;
  explicit constexpr CCommunity_GetGamePersonalDataEntries_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCommunity_GetGamePersonalDataEntries_Request(const CCommunity_GetGamePersonalDataEntries_Request& from);
  CCommunity_GetGamePersonalDataEntries_Request(CCommunity_GetGamePersonalDataEntries_Request&& from) noexcept
    : CCommunity_GetGamePersonalDataEntries_Request() {
    *this = ::std::move(from);
  }

  inline CCommunity_GetGamePersonalDataEntries_Request& operator=(const CCommunity_GetGamePersonalDataEntries_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCommunity_GetGamePersonalDataEntries_Request& operator=(CCommunity_GetGamePersonalDataEntries_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCommunity_GetGamePersonalDataEntries_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCommunity_GetGamePersonalDataEntries_Request* internal_default_instance() {
    return reinterpret_cast<const CCommunity_GetGamePersonalDataEntries_Request*>(
               &_CCommunity_GetGamePersonalDataEntries_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CCommunity_GetGamePersonalDataEntries_Request& a, CCommunity_GetGamePersonalDataEntries_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CCommunity_GetGamePersonalDataEntries_Request* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCommunity_GetGamePersonalDataEntries_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CCommunity_GetGamePersonalDataEntries_Request* New() const final {
    return new CCommunity_GetGamePersonalDataEntries_Request();
  }

  CCommunity_GetGamePersonalDataEntries_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CCommunity_GetGamePersonalDataEntries_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CCommunity_GetGamePersonalDataEntries_Request& from);
  void MergeFrom(const CCommunity_GetGamePersonalDataEntries_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCommunity_GetGamePersonalDataEntries_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCommunity_GetGamePersonalDataEntries_Request";
  }
  protected:
  explicit CCommunity_GetGamePersonalDataEntries_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 3,
    kContinueTokenFieldNumber = 4,
    kSteamidFieldNumber = 2,
    kAppidFieldNumber = 1,
  };
  // optional string type = 3;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // optional string continue_token = 4;
  bool has_continue_token() const;
  private:
  bool _internal_has_continue_token() const;
  public:
  void clear_continue_token();
  const std::string& continue_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_continue_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_continue_token();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_continue_token();
  void set_allocated_continue_token(std::string* continue_token);
  private:
  const std::string& _internal_continue_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_continue_token(const std::string& value);
  std::string* _internal_mutable_continue_token();
  public:

  // optional uint64 steamid = 2;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  ::PROTOBUF_NAMESPACE_ID::uint64 steamid() const;
  void set_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_steamid() const;
  void _internal_set_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 appid = 1;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  ::PROTOBUF_NAMESPACE_ID::uint32 appid() const;
  void set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_appid() const;
  void _internal_set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CCommunity_GetGamePersonalDataEntries_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr continue_token_;
  ::PROTOBUF_NAMESPACE_ID::uint64 steamid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 appid_;
  friend struct ::TableStruct_gcsystemmsgs_2eproto;
};
// -------------------------------------------------------------------

class CCommunity_GetGamePersonalDataEntries_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCommunity_GetGamePersonalDataEntries_Response) */ {
 public:
  inline CCommunity_GetGamePersonalDataEntries_Response() : CCommunity_GetGamePersonalDataEntries_Response(nullptr) {}
  ~CCommunity_GetGamePersonalDataEntries_Response() override;
  explicit constexpr CCommunity_GetGamePersonalDataEntries_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCommunity_GetGamePersonalDataEntries_Response(const CCommunity_GetGamePersonalDataEntries_Response& from);
  CCommunity_GetGamePersonalDataEntries_Response(CCommunity_GetGamePersonalDataEntries_Response&& from) noexcept
    : CCommunity_GetGamePersonalDataEntries_Response() {
    *this = ::std::move(from);
  }

  inline CCommunity_GetGamePersonalDataEntries_Response& operator=(const CCommunity_GetGamePersonalDataEntries_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCommunity_GetGamePersonalDataEntries_Response& operator=(CCommunity_GetGamePersonalDataEntries_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCommunity_GetGamePersonalDataEntries_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCommunity_GetGamePersonalDataEntries_Response* internal_default_instance() {
    return reinterpret_cast<const CCommunity_GetGamePersonalDataEntries_Response*>(
               &_CCommunity_GetGamePersonalDataEntries_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CCommunity_GetGamePersonalDataEntries_Response& a, CCommunity_GetGamePersonalDataEntries_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CCommunity_GetGamePersonalDataEntries_Response* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCommunity_GetGamePersonalDataEntries_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CCommunity_GetGamePersonalDataEntries_Response* New() const final {
    return new CCommunity_GetGamePersonalDataEntries_Response();
  }

  CCommunity_GetGamePersonalDataEntries_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CCommunity_GetGamePersonalDataEntries_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CCommunity_GetGamePersonalDataEntries_Response& from);
  void MergeFrom(const CCommunity_GetGamePersonalDataEntries_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCommunity_GetGamePersonalDataEntries_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCommunity_GetGamePersonalDataEntries_Response";
  }
  protected:
  explicit CCommunity_GetGamePersonalDataEntries_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 2,
    kContinueTokenFieldNumber = 3,
    kGceresultFieldNumber = 1,
  };
  // repeated string entries = 2;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  const std::string& entries(int index) const;
  std::string* mutable_entries(int index);
  void set_entries(int index, const std::string& value);
  void set_entries(int index, std::string&& value);
  void set_entries(int index, const char* value);
  void set_entries(int index, const char* value, size_t size);
  std::string* add_entries();
  void add_entries(const std::string& value);
  void add_entries(std::string&& value);
  void add_entries(const char* value);
  void add_entries(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& entries() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_entries();
  private:
  const std::string& _internal_entries(int index) const;
  std::string* _internal_add_entries();
  public:

  // optional string continue_token = 3;
  bool has_continue_token() const;
  private:
  bool _internal_has_continue_token() const;
  public:
  void clear_continue_token();
  const std::string& continue_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_continue_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_continue_token();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_continue_token();
  void set_allocated_continue_token(std::string* continue_token);
  private:
  const std::string& _internal_continue_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_continue_token(const std::string& value);
  std::string* _internal_mutable_continue_token();
  public:

  // optional uint32 gceresult = 1;
  bool has_gceresult() const;
  private:
  bool _internal_has_gceresult() const;
  public:
  void clear_gceresult();
  ::PROTOBUF_NAMESPACE_ID::uint32 gceresult() const;
  void set_gceresult(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_gceresult() const;
  void _internal_set_gceresult(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CCommunity_GetGamePersonalDataEntries_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> entries_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr continue_token_;
  ::PROTOBUF_NAMESPACE_ID::uint32 gceresult_;
  friend struct ::TableStruct_gcsystemmsgs_2eproto;
};
// -------------------------------------------------------------------

class CCommunity_TerminateGamePersonalDataEntries_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCommunity_TerminateGamePersonalDataEntries_Request) */ {
 public:
  inline CCommunity_TerminateGamePersonalDataEntries_Request() : CCommunity_TerminateGamePersonalDataEntries_Request(nullptr) {}
  ~CCommunity_TerminateGamePersonalDataEntries_Request() override;
  explicit constexpr CCommunity_TerminateGamePersonalDataEntries_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCommunity_TerminateGamePersonalDataEntries_Request(const CCommunity_TerminateGamePersonalDataEntries_Request& from);
  CCommunity_TerminateGamePersonalDataEntries_Request(CCommunity_TerminateGamePersonalDataEntries_Request&& from) noexcept
    : CCommunity_TerminateGamePersonalDataEntries_Request() {
    *this = ::std::move(from);
  }

  inline CCommunity_TerminateGamePersonalDataEntries_Request& operator=(const CCommunity_TerminateGamePersonalDataEntries_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCommunity_TerminateGamePersonalDataEntries_Request& operator=(CCommunity_TerminateGamePersonalDataEntries_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCommunity_TerminateGamePersonalDataEntries_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCommunity_TerminateGamePersonalDataEntries_Request* internal_default_instance() {
    return reinterpret_cast<const CCommunity_TerminateGamePersonalDataEntries_Request*>(
               &_CCommunity_TerminateGamePersonalDataEntries_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CCommunity_TerminateGamePersonalDataEntries_Request& a, CCommunity_TerminateGamePersonalDataEntries_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CCommunity_TerminateGamePersonalDataEntries_Request* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCommunity_TerminateGamePersonalDataEntries_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CCommunity_TerminateGamePersonalDataEntries_Request* New() const final {
    return new CCommunity_TerminateGamePersonalDataEntries_Request();
  }

  CCommunity_TerminateGamePersonalDataEntries_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CCommunity_TerminateGamePersonalDataEntries_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CCommunity_TerminateGamePersonalDataEntries_Request& from);
  void MergeFrom(const CCommunity_TerminateGamePersonalDataEntries_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCommunity_TerminateGamePersonalDataEntries_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCommunity_TerminateGamePersonalDataEntries_Request";
  }
  protected:
  explicit CCommunity_TerminateGamePersonalDataEntries_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamidFieldNumber = 2,
    kAppidFieldNumber = 1,
  };
  // optional uint64 steamid = 2;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  ::PROTOBUF_NAMESPACE_ID::uint64 steamid() const;
  void set_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_steamid() const;
  void _internal_set_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 appid = 1;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  ::PROTOBUF_NAMESPACE_ID::uint32 appid() const;
  void set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_appid() const;
  void _internal_set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CCommunity_TerminateGamePersonalDataEntries_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 steamid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 appid_;
  friend struct ::TableStruct_gcsystemmsgs_2eproto;
};
// -------------------------------------------------------------------

class CCommunity_TerminateGamePersonalDataEntries_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCommunity_TerminateGamePersonalDataEntries_Response) */ {
 public:
  inline CCommunity_TerminateGamePersonalDataEntries_Response() : CCommunity_TerminateGamePersonalDataEntries_Response(nullptr) {}
  ~CCommunity_TerminateGamePersonalDataEntries_Response() override;
  explicit constexpr CCommunity_TerminateGamePersonalDataEntries_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCommunity_TerminateGamePersonalDataEntries_Response(const CCommunity_TerminateGamePersonalDataEntries_Response& from);
  CCommunity_TerminateGamePersonalDataEntries_Response(CCommunity_TerminateGamePersonalDataEntries_Response&& from) noexcept
    : CCommunity_TerminateGamePersonalDataEntries_Response() {
    *this = ::std::move(from);
  }

  inline CCommunity_TerminateGamePersonalDataEntries_Response& operator=(const CCommunity_TerminateGamePersonalDataEntries_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCommunity_TerminateGamePersonalDataEntries_Response& operator=(CCommunity_TerminateGamePersonalDataEntries_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCommunity_TerminateGamePersonalDataEntries_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCommunity_TerminateGamePersonalDataEntries_Response* internal_default_instance() {
    return reinterpret_cast<const CCommunity_TerminateGamePersonalDataEntries_Response*>(
               &_CCommunity_TerminateGamePersonalDataEntries_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CCommunity_TerminateGamePersonalDataEntries_Response& a, CCommunity_TerminateGamePersonalDataEntries_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CCommunity_TerminateGamePersonalDataEntries_Response* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCommunity_TerminateGamePersonalDataEntries_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CCommunity_TerminateGamePersonalDataEntries_Response* New() const final {
    return new CCommunity_TerminateGamePersonalDataEntries_Response();
  }

  CCommunity_TerminateGamePersonalDataEntries_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CCommunity_TerminateGamePersonalDataEntries_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CCommunity_TerminateGamePersonalDataEntries_Response& from);
  void MergeFrom(const CCommunity_TerminateGamePersonalDataEntries_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCommunity_TerminateGamePersonalDataEntries_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCommunity_TerminateGamePersonalDataEntries_Response";
  }
  protected:
  explicit CCommunity_TerminateGamePersonalDataEntries_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGceresultFieldNumber = 1,
  };
  // optional uint32 gceresult = 1;
  bool has_gceresult() const;
  private:
  bool _internal_has_gceresult() const;
  public:
  void clear_gceresult();
  ::PROTOBUF_NAMESPACE_ID::uint32 gceresult() const;
  void set_gceresult(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_gceresult() const;
  void _internal_set_gceresult(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CCommunity_TerminateGamePersonalDataEntries_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 gceresult_;
  friend struct ::TableStruct_gcsystemmsgs_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CCommunity_GamePersonalDataCategoryInfo

// optional string type = 1;
inline bool CCommunity_GamePersonalDataCategoryInfo::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCommunity_GamePersonalDataCategoryInfo::has_type() const {
  return _internal_has_type();
}
inline void CCommunity_GamePersonalDataCategoryInfo::clear_type() {
  type_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CCommunity_GamePersonalDataCategoryInfo::type() const {
  // @@protoc_insertion_point(field_get:CCommunity_GamePersonalDataCategoryInfo.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCommunity_GamePersonalDataCategoryInfo::set_type(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCommunity_GamePersonalDataCategoryInfo.type)
}
inline std::string* CCommunity_GamePersonalDataCategoryInfo::mutable_type() {
  // @@protoc_insertion_point(field_mutable:CCommunity_GamePersonalDataCategoryInfo.type)
  return _internal_mutable_type();
}
inline const std::string& CCommunity_GamePersonalDataCategoryInfo::_internal_type() const {
  return type_.Get();
}
inline void CCommunity_GamePersonalDataCategoryInfo::_internal_set_type(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CCommunity_GamePersonalDataCategoryInfo::_internal_mutable_type() {
  _has_bits_[0] |= 0x00000001u;
  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CCommunity_GamePersonalDataCategoryInfo::release_type() {
  // @@protoc_insertion_point(field_release:CCommunity_GamePersonalDataCategoryInfo.type)
  if (!_internal_has_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return type_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CCommunity_GamePersonalDataCategoryInfo::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CCommunity_GamePersonalDataCategoryInfo.type)
}

// optional string localization_token = 2;
inline bool CCommunity_GamePersonalDataCategoryInfo::_internal_has_localization_token() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CCommunity_GamePersonalDataCategoryInfo::has_localization_token() const {
  return _internal_has_localization_token();
}
inline void CCommunity_GamePersonalDataCategoryInfo::clear_localization_token() {
  localization_token_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CCommunity_GamePersonalDataCategoryInfo::localization_token() const {
  // @@protoc_insertion_point(field_get:CCommunity_GamePersonalDataCategoryInfo.localization_token)
  return _internal_localization_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCommunity_GamePersonalDataCategoryInfo::set_localization_token(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 localization_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCommunity_GamePersonalDataCategoryInfo.localization_token)
}
inline std::string* CCommunity_GamePersonalDataCategoryInfo::mutable_localization_token() {
  // @@protoc_insertion_point(field_mutable:CCommunity_GamePersonalDataCategoryInfo.localization_token)
  return _internal_mutable_localization_token();
}
inline const std::string& CCommunity_GamePersonalDataCategoryInfo::_internal_localization_token() const {
  return localization_token_.Get();
}
inline void CCommunity_GamePersonalDataCategoryInfo::_internal_set_localization_token(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  localization_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CCommunity_GamePersonalDataCategoryInfo::_internal_mutable_localization_token() {
  _has_bits_[0] |= 0x00000002u;
  return localization_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CCommunity_GamePersonalDataCategoryInfo::release_localization_token() {
  // @@protoc_insertion_point(field_release:CCommunity_GamePersonalDataCategoryInfo.localization_token)
  if (!_internal_has_localization_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return localization_token_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CCommunity_GamePersonalDataCategoryInfo::set_allocated_localization_token(std::string* localization_token) {
  if (localization_token != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  localization_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), localization_token,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CCommunity_GamePersonalDataCategoryInfo.localization_token)
}

// optional string template_file = 3;
inline bool CCommunity_GamePersonalDataCategoryInfo::_internal_has_template_file() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CCommunity_GamePersonalDataCategoryInfo::has_template_file() const {
  return _internal_has_template_file();
}
inline void CCommunity_GamePersonalDataCategoryInfo::clear_template_file() {
  template_file_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CCommunity_GamePersonalDataCategoryInfo::template_file() const {
  // @@protoc_insertion_point(field_get:CCommunity_GamePersonalDataCategoryInfo.template_file)
  return _internal_template_file();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCommunity_GamePersonalDataCategoryInfo::set_template_file(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 template_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCommunity_GamePersonalDataCategoryInfo.template_file)
}
inline std::string* CCommunity_GamePersonalDataCategoryInfo::mutable_template_file() {
  // @@protoc_insertion_point(field_mutable:CCommunity_GamePersonalDataCategoryInfo.template_file)
  return _internal_mutable_template_file();
}
inline const std::string& CCommunity_GamePersonalDataCategoryInfo::_internal_template_file() const {
  return template_file_.Get();
}
inline void CCommunity_GamePersonalDataCategoryInfo::_internal_set_template_file(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  template_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CCommunity_GamePersonalDataCategoryInfo::_internal_mutable_template_file() {
  _has_bits_[0] |= 0x00000004u;
  return template_file_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CCommunity_GamePersonalDataCategoryInfo::release_template_file() {
  // @@protoc_insertion_point(field_release:CCommunity_GamePersonalDataCategoryInfo.template_file)
  if (!_internal_has_template_file()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return template_file_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CCommunity_GamePersonalDataCategoryInfo::set_allocated_template_file(std::string* template_file) {
  if (template_file != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  template_file_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), template_file,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CCommunity_GamePersonalDataCategoryInfo.template_file)
}

// -------------------------------------------------------------------

// CCommunity_GetGamePersonalDataCategories_Request

// optional uint32 appid = 1;
inline bool CCommunity_GetGamePersonalDataCategories_Request::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCommunity_GetGamePersonalDataCategories_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CCommunity_GetGamePersonalDataCategories_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CCommunity_GetGamePersonalDataCategories_Request::_internal_appid() const {
  return appid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CCommunity_GetGamePersonalDataCategories_Request::appid() const {
  // @@protoc_insertion_point(field_get:CCommunity_GetGamePersonalDataCategories_Request.appid)
  return _internal_appid();
}
inline void CCommunity_GetGamePersonalDataCategories_Request::_internal_set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  appid_ = value;
}
inline void CCommunity_GetGamePersonalDataCategories_Request::set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CCommunity_GetGamePersonalDataCategories_Request.appid)
}

// -------------------------------------------------------------------

// CCommunity_GetGamePersonalDataCategories_Response

// repeated .CCommunity_GamePersonalDataCategoryInfo categories = 1;
inline int CCommunity_GetGamePersonalDataCategories_Response::_internal_categories_size() const {
  return categories_.size();
}
inline int CCommunity_GetGamePersonalDataCategories_Response::categories_size() const {
  return _internal_categories_size();
}
inline void CCommunity_GetGamePersonalDataCategories_Response::clear_categories() {
  categories_.Clear();
}
inline ::CCommunity_GamePersonalDataCategoryInfo* CCommunity_GetGamePersonalDataCategories_Response::mutable_categories(int index) {
  // @@protoc_insertion_point(field_mutable:CCommunity_GetGamePersonalDataCategories_Response.categories)
  return categories_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CCommunity_GamePersonalDataCategoryInfo >*
CCommunity_GetGamePersonalDataCategories_Response::mutable_categories() {
  // @@protoc_insertion_point(field_mutable_list:CCommunity_GetGamePersonalDataCategories_Response.categories)
  return &categories_;
}
inline const ::CCommunity_GamePersonalDataCategoryInfo& CCommunity_GetGamePersonalDataCategories_Response::_internal_categories(int index) const {
  return categories_.Get(index);
}
inline const ::CCommunity_GamePersonalDataCategoryInfo& CCommunity_GetGamePersonalDataCategories_Response::categories(int index) const {
  // @@protoc_insertion_point(field_get:CCommunity_GetGamePersonalDataCategories_Response.categories)
  return _internal_categories(index);
}
inline ::CCommunity_GamePersonalDataCategoryInfo* CCommunity_GetGamePersonalDataCategories_Response::_internal_add_categories() {
  return categories_.Add();
}
inline ::CCommunity_GamePersonalDataCategoryInfo* CCommunity_GetGamePersonalDataCategories_Response::add_categories() {
  // @@protoc_insertion_point(field_add:CCommunity_GetGamePersonalDataCategories_Response.categories)
  return _internal_add_categories();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CCommunity_GamePersonalDataCategoryInfo >&
CCommunity_GetGamePersonalDataCategories_Response::categories() const {
  // @@protoc_insertion_point(field_list:CCommunity_GetGamePersonalDataCategories_Response.categories)
  return categories_;
}

// optional string app_assets_basename = 2;
inline bool CCommunity_GetGamePersonalDataCategories_Response::_internal_has_app_assets_basename() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCommunity_GetGamePersonalDataCategories_Response::has_app_assets_basename() const {
  return _internal_has_app_assets_basename();
}
inline void CCommunity_GetGamePersonalDataCategories_Response::clear_app_assets_basename() {
  app_assets_basename_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CCommunity_GetGamePersonalDataCategories_Response::app_assets_basename() const {
  // @@protoc_insertion_point(field_get:CCommunity_GetGamePersonalDataCategories_Response.app_assets_basename)
  return _internal_app_assets_basename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCommunity_GetGamePersonalDataCategories_Response::set_app_assets_basename(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 app_assets_basename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCommunity_GetGamePersonalDataCategories_Response.app_assets_basename)
}
inline std::string* CCommunity_GetGamePersonalDataCategories_Response::mutable_app_assets_basename() {
  // @@protoc_insertion_point(field_mutable:CCommunity_GetGamePersonalDataCategories_Response.app_assets_basename)
  return _internal_mutable_app_assets_basename();
}
inline const std::string& CCommunity_GetGamePersonalDataCategories_Response::_internal_app_assets_basename() const {
  return app_assets_basename_.Get();
}
inline void CCommunity_GetGamePersonalDataCategories_Response::_internal_set_app_assets_basename(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  app_assets_basename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CCommunity_GetGamePersonalDataCategories_Response::_internal_mutable_app_assets_basename() {
  _has_bits_[0] |= 0x00000001u;
  return app_assets_basename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CCommunity_GetGamePersonalDataCategories_Response::release_app_assets_basename() {
  // @@protoc_insertion_point(field_release:CCommunity_GetGamePersonalDataCategories_Response.app_assets_basename)
  if (!_internal_has_app_assets_basename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return app_assets_basename_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CCommunity_GetGamePersonalDataCategories_Response::set_allocated_app_assets_basename(std::string* app_assets_basename) {
  if (app_assets_basename != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  app_assets_basename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), app_assets_basename,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CCommunity_GetGamePersonalDataCategories_Response.app_assets_basename)
}

// -------------------------------------------------------------------

// CCommunity_GetGamePersonalDataEntries_Request

// optional uint32 appid = 1;
inline bool CCommunity_GetGamePersonalDataEntries_Request::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CCommunity_GetGamePersonalDataEntries_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CCommunity_GetGamePersonalDataEntries_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CCommunity_GetGamePersonalDataEntries_Request::_internal_appid() const {
  return appid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CCommunity_GetGamePersonalDataEntries_Request::appid() const {
  // @@protoc_insertion_point(field_get:CCommunity_GetGamePersonalDataEntries_Request.appid)
  return _internal_appid();
}
inline void CCommunity_GetGamePersonalDataEntries_Request::_internal_set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  appid_ = value;
}
inline void CCommunity_GetGamePersonalDataEntries_Request::set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CCommunity_GetGamePersonalDataEntries_Request.appid)
}

// optional uint64 steamid = 2;
inline bool CCommunity_GetGamePersonalDataEntries_Request::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CCommunity_GetGamePersonalDataEntries_Request::has_steamid() const {
  return _internal_has_steamid();
}
inline void CCommunity_GetGamePersonalDataEntries_Request::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CCommunity_GetGamePersonalDataEntries_Request::_internal_steamid() const {
  return steamid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CCommunity_GetGamePersonalDataEntries_Request::steamid() const {
  // @@protoc_insertion_point(field_get:CCommunity_GetGamePersonalDataEntries_Request.steamid)
  return _internal_steamid();
}
inline void CCommunity_GetGamePersonalDataEntries_Request::_internal_set_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  steamid_ = value;
}
inline void CCommunity_GetGamePersonalDataEntries_Request::set_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CCommunity_GetGamePersonalDataEntries_Request.steamid)
}

// optional string type = 3;
inline bool CCommunity_GetGamePersonalDataEntries_Request::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCommunity_GetGamePersonalDataEntries_Request::has_type() const {
  return _internal_has_type();
}
inline void CCommunity_GetGamePersonalDataEntries_Request::clear_type() {
  type_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CCommunity_GetGamePersonalDataEntries_Request::type() const {
  // @@protoc_insertion_point(field_get:CCommunity_GetGamePersonalDataEntries_Request.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCommunity_GetGamePersonalDataEntries_Request::set_type(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCommunity_GetGamePersonalDataEntries_Request.type)
}
inline std::string* CCommunity_GetGamePersonalDataEntries_Request::mutable_type() {
  // @@protoc_insertion_point(field_mutable:CCommunity_GetGamePersonalDataEntries_Request.type)
  return _internal_mutable_type();
}
inline const std::string& CCommunity_GetGamePersonalDataEntries_Request::_internal_type() const {
  return type_.Get();
}
inline void CCommunity_GetGamePersonalDataEntries_Request::_internal_set_type(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CCommunity_GetGamePersonalDataEntries_Request::_internal_mutable_type() {
  _has_bits_[0] |= 0x00000001u;
  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CCommunity_GetGamePersonalDataEntries_Request::release_type() {
  // @@protoc_insertion_point(field_release:CCommunity_GetGamePersonalDataEntries_Request.type)
  if (!_internal_has_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return type_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CCommunity_GetGamePersonalDataEntries_Request::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CCommunity_GetGamePersonalDataEntries_Request.type)
}

// optional string continue_token = 4;
inline bool CCommunity_GetGamePersonalDataEntries_Request::_internal_has_continue_token() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CCommunity_GetGamePersonalDataEntries_Request::has_continue_token() const {
  return _internal_has_continue_token();
}
inline void CCommunity_GetGamePersonalDataEntries_Request::clear_continue_token() {
  continue_token_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CCommunity_GetGamePersonalDataEntries_Request::continue_token() const {
  // @@protoc_insertion_point(field_get:CCommunity_GetGamePersonalDataEntries_Request.continue_token)
  return _internal_continue_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCommunity_GetGamePersonalDataEntries_Request::set_continue_token(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 continue_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCommunity_GetGamePersonalDataEntries_Request.continue_token)
}
inline std::string* CCommunity_GetGamePersonalDataEntries_Request::mutable_continue_token() {
  // @@protoc_insertion_point(field_mutable:CCommunity_GetGamePersonalDataEntries_Request.continue_token)
  return _internal_mutable_continue_token();
}
inline const std::string& CCommunity_GetGamePersonalDataEntries_Request::_internal_continue_token() const {
  return continue_token_.Get();
}
inline void CCommunity_GetGamePersonalDataEntries_Request::_internal_set_continue_token(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  continue_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CCommunity_GetGamePersonalDataEntries_Request::_internal_mutable_continue_token() {
  _has_bits_[0] |= 0x00000002u;
  return continue_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CCommunity_GetGamePersonalDataEntries_Request::release_continue_token() {
  // @@protoc_insertion_point(field_release:CCommunity_GetGamePersonalDataEntries_Request.continue_token)
  if (!_internal_has_continue_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return continue_token_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CCommunity_GetGamePersonalDataEntries_Request::set_allocated_continue_token(std::string* continue_token) {
  if (continue_token != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  continue_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), continue_token,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CCommunity_GetGamePersonalDataEntries_Request.continue_token)
}

// -------------------------------------------------------------------

// CCommunity_GetGamePersonalDataEntries_Response

// optional uint32 gceresult = 1;
inline bool CCommunity_GetGamePersonalDataEntries_Response::_internal_has_gceresult() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CCommunity_GetGamePersonalDataEntries_Response::has_gceresult() const {
  return _internal_has_gceresult();
}
inline void CCommunity_GetGamePersonalDataEntries_Response::clear_gceresult() {
  gceresult_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CCommunity_GetGamePersonalDataEntries_Response::_internal_gceresult() const {
  return gceresult_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CCommunity_GetGamePersonalDataEntries_Response::gceresult() const {
  // @@protoc_insertion_point(field_get:CCommunity_GetGamePersonalDataEntries_Response.gceresult)
  return _internal_gceresult();
}
inline void CCommunity_GetGamePersonalDataEntries_Response::_internal_set_gceresult(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  gceresult_ = value;
}
inline void CCommunity_GetGamePersonalDataEntries_Response::set_gceresult(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_gceresult(value);
  // @@protoc_insertion_point(field_set:CCommunity_GetGamePersonalDataEntries_Response.gceresult)
}

// repeated string entries = 2;
inline int CCommunity_GetGamePersonalDataEntries_Response::_internal_entries_size() const {
  return entries_.size();
}
inline int CCommunity_GetGamePersonalDataEntries_Response::entries_size() const {
  return _internal_entries_size();
}
inline void CCommunity_GetGamePersonalDataEntries_Response::clear_entries() {
  entries_.Clear();
}
inline std::string* CCommunity_GetGamePersonalDataEntries_Response::add_entries() {
  // @@protoc_insertion_point(field_add_mutable:CCommunity_GetGamePersonalDataEntries_Response.entries)
  return _internal_add_entries();
}
inline const std::string& CCommunity_GetGamePersonalDataEntries_Response::_internal_entries(int index) const {
  return entries_.Get(index);
}
inline const std::string& CCommunity_GetGamePersonalDataEntries_Response::entries(int index) const {
  // @@protoc_insertion_point(field_get:CCommunity_GetGamePersonalDataEntries_Response.entries)
  return _internal_entries(index);
}
inline std::string* CCommunity_GetGamePersonalDataEntries_Response::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:CCommunity_GetGamePersonalDataEntries_Response.entries)
  return entries_.Mutable(index);
}
inline void CCommunity_GetGamePersonalDataEntries_Response::set_entries(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:CCommunity_GetGamePersonalDataEntries_Response.entries)
  entries_.Mutable(index)->assign(value);
}
inline void CCommunity_GetGamePersonalDataEntries_Response::set_entries(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:CCommunity_GetGamePersonalDataEntries_Response.entries)
  entries_.Mutable(index)->assign(std::move(value));
}
inline void CCommunity_GetGamePersonalDataEntries_Response::set_entries(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  entries_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CCommunity_GetGamePersonalDataEntries_Response.entries)
}
inline void CCommunity_GetGamePersonalDataEntries_Response::set_entries(int index, const char* value, size_t size) {
  entries_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CCommunity_GetGamePersonalDataEntries_Response.entries)
}
inline std::string* CCommunity_GetGamePersonalDataEntries_Response::_internal_add_entries() {
  return entries_.Add();
}
inline void CCommunity_GetGamePersonalDataEntries_Response::add_entries(const std::string& value) {
  entries_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CCommunity_GetGamePersonalDataEntries_Response.entries)
}
inline void CCommunity_GetGamePersonalDataEntries_Response::add_entries(std::string&& value) {
  entries_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CCommunity_GetGamePersonalDataEntries_Response.entries)
}
inline void CCommunity_GetGamePersonalDataEntries_Response::add_entries(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  entries_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CCommunity_GetGamePersonalDataEntries_Response.entries)
}
inline void CCommunity_GetGamePersonalDataEntries_Response::add_entries(const char* value, size_t size) {
  entries_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CCommunity_GetGamePersonalDataEntries_Response.entries)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CCommunity_GetGamePersonalDataEntries_Response::entries() const {
  // @@protoc_insertion_point(field_list:CCommunity_GetGamePersonalDataEntries_Response.entries)
  return entries_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CCommunity_GetGamePersonalDataEntries_Response::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:CCommunity_GetGamePersonalDataEntries_Response.entries)
  return &entries_;
}

// optional string continue_token = 3;
inline bool CCommunity_GetGamePersonalDataEntries_Response::_internal_has_continue_token() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCommunity_GetGamePersonalDataEntries_Response::has_continue_token() const {
  return _internal_has_continue_token();
}
inline void CCommunity_GetGamePersonalDataEntries_Response::clear_continue_token() {
  continue_token_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CCommunity_GetGamePersonalDataEntries_Response::continue_token() const {
  // @@protoc_insertion_point(field_get:CCommunity_GetGamePersonalDataEntries_Response.continue_token)
  return _internal_continue_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCommunity_GetGamePersonalDataEntries_Response::set_continue_token(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 continue_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCommunity_GetGamePersonalDataEntries_Response.continue_token)
}
inline std::string* CCommunity_GetGamePersonalDataEntries_Response::mutable_continue_token() {
  // @@protoc_insertion_point(field_mutable:CCommunity_GetGamePersonalDataEntries_Response.continue_token)
  return _internal_mutable_continue_token();
}
inline const std::string& CCommunity_GetGamePersonalDataEntries_Response::_internal_continue_token() const {
  return continue_token_.Get();
}
inline void CCommunity_GetGamePersonalDataEntries_Response::_internal_set_continue_token(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  continue_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CCommunity_GetGamePersonalDataEntries_Response::_internal_mutable_continue_token() {
  _has_bits_[0] |= 0x00000001u;
  return continue_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CCommunity_GetGamePersonalDataEntries_Response::release_continue_token() {
  // @@protoc_insertion_point(field_release:CCommunity_GetGamePersonalDataEntries_Response.continue_token)
  if (!_internal_has_continue_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return continue_token_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CCommunity_GetGamePersonalDataEntries_Response::set_allocated_continue_token(std::string* continue_token) {
  if (continue_token != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  continue_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), continue_token,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CCommunity_GetGamePersonalDataEntries_Response.continue_token)
}

// -------------------------------------------------------------------

// CCommunity_TerminateGamePersonalDataEntries_Request

// optional uint32 appid = 1;
inline bool CCommunity_TerminateGamePersonalDataEntries_Request::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CCommunity_TerminateGamePersonalDataEntries_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CCommunity_TerminateGamePersonalDataEntries_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CCommunity_TerminateGamePersonalDataEntries_Request::_internal_appid() const {
  return appid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CCommunity_TerminateGamePersonalDataEntries_Request::appid() const {
  // @@protoc_insertion_point(field_get:CCommunity_TerminateGamePersonalDataEntries_Request.appid)
  return _internal_appid();
}
inline void CCommunity_TerminateGamePersonalDataEntries_Request::_internal_set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  appid_ = value;
}
inline void CCommunity_TerminateGamePersonalDataEntries_Request::set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CCommunity_TerminateGamePersonalDataEntries_Request.appid)
}

// optional uint64 steamid = 2;
inline bool CCommunity_TerminateGamePersonalDataEntries_Request::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCommunity_TerminateGamePersonalDataEntries_Request::has_steamid() const {
  return _internal_has_steamid();
}
inline void CCommunity_TerminateGamePersonalDataEntries_Request::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CCommunity_TerminateGamePersonalDataEntries_Request::_internal_steamid() const {
  return steamid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CCommunity_TerminateGamePersonalDataEntries_Request::steamid() const {
  // @@protoc_insertion_point(field_get:CCommunity_TerminateGamePersonalDataEntries_Request.steamid)
  return _internal_steamid();
}
inline void CCommunity_TerminateGamePersonalDataEntries_Request::_internal_set_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  steamid_ = value;
}
inline void CCommunity_TerminateGamePersonalDataEntries_Request::set_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CCommunity_TerminateGamePersonalDataEntries_Request.steamid)
}

// -------------------------------------------------------------------

// CCommunity_TerminateGamePersonalDataEntries_Response

// optional uint32 gceresult = 1;
inline bool CCommunity_TerminateGamePersonalDataEntries_Response::_internal_has_gceresult() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCommunity_TerminateGamePersonalDataEntries_Response::has_gceresult() const {
  return _internal_has_gceresult();
}
inline void CCommunity_TerminateGamePersonalDataEntries_Response::clear_gceresult() {
  gceresult_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CCommunity_TerminateGamePersonalDataEntries_Response::_internal_gceresult() const {
  return gceresult_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CCommunity_TerminateGamePersonalDataEntries_Response::gceresult() const {
  // @@protoc_insertion_point(field_get:CCommunity_TerminateGamePersonalDataEntries_Response.gceresult)
  return _internal_gceresult();
}
inline void CCommunity_TerminateGamePersonalDataEntries_Response::_internal_set_gceresult(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  gceresult_ = value;
}
inline void CCommunity_TerminateGamePersonalDataEntries_Response::set_gceresult(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_gceresult(value);
  // @@protoc_insertion_point(field_set:CCommunity_TerminateGamePersonalDataEntries_Response.gceresult)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::EGCSystemMsg> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EGCSystemMsg>() {
  return ::EGCSystemMsg_descriptor();
}
template <> struct is_proto_enum< ::ESOMsg> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ESOMsg>() {
  return ::ESOMsg_descriptor();
}
template <> struct is_proto_enum< ::EGCBaseClientMsg> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EGCBaseClientMsg>() {
  return ::EGCBaseClientMsg_descriptor();
}
template <> struct is_proto_enum< ::EGCToGCMsg> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EGCToGCMsg>() {
  return ::EGCToGCMsg_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_gcsystemmsgs_2eproto
